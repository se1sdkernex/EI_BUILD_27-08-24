
EI_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000238e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056ac  08023ae8  08023ae8  00033ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029194  08029194  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  08029194  08029194  00039194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802919c  0802919c  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802919c  0802919c  0003919c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080291a0  080291a0  000391a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  080291a4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  08029348  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  080293e8  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00013fc0  200002e4  08029488  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200142a4  08029488  000442a4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037d21  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000830a  00000000  00000000  00078033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002478  00000000  00000000  00080340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000021a8  00000000  00000000  000827b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043070  00000000  00000000  00084960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047ba6  00000000  00000000  000c79d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013cbd0  00000000  00000000  0010f576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0024c146  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a00c  00000000  00000000  0024c198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08023ad0 	.word	0x08023ad0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	08023ad0 	.word	0x08023ad0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000a50 	.word	0x20000a50
 8000a70:	08023ae8 	.word	0x08023ae8
 8000a74:	08023af4 	.word	0x08023af4
 8000a78:	08023b04 	.word	0x08023b04
 8000a7c:	08023b14 	.word	0x08023b14
 8000a80:	08023b28 	.word	0x08023b28
 8000a84:	08023b3c 	.word	0x08023b3c
 8000a88:	08023b50 	.word	0x08023b50
 8000a8c:	08023b5c 	.word	0x08023b5c
 8000a90:	20000e38 	.word	0x20000e38

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01a fb1b 	bl	801b0e0 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f021 fe47 	bl	8022748 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000bc44 	.word	0x2000bc44
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f017 f9ef 	bl	8017ec0 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f017 f9df 	bl	8017ec0 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f017 f9ce 	bl	8017ec0 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a48 	.word	0x20000a48
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f021 fc0a 	bl	8022394 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00d ff01 	bl	800e98c <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f014 f9b3 	bl	8014f00 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f014 f962 	bl	8014e80 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f021 fcc0 	bl	8022564 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f021 fd34 	bl	802269c <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f021 fc8a 	bl	8022564 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f021 fd05 	bl	802269c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f021 fc58 	bl	8022564 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f021 fcf1 	bl	802269c <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f021 fc3b 	bl	8022564 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f021 fc2d 	bl	8022564 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f021 fcc6 	bl	802269c <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f021 fc0d 	bl	8022564 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f021 fbff 	bl	8022564 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f021 fc98 	bl	802269c <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f021 fbda 	bl	8022564 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f021 fbb8 	bl	8022564 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f021 fb9f 	bl	8022564 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f021 fb91 	bl	8022564 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f021 fb83 	bl	8022564 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f021 fc1b 	bl	802269c <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00e fb05 	bl	800f484 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000a004 	.word	0x2000a004
 8000e88:	08023b64 	.word	0x08023b64
 8000e8c:	20000644 	.word	0x20000644
 8000e90:	08023b7c 	.word	0x08023b7c
 8000e94:	20000a82 	.word	0x20000a82
 8000e98:	08023bbc 	.word	0x08023bbc
 8000e9c:	20000645 	.word	0x20000645
 8000ea0:	08023bd0 	.word	0x08023bd0
 8000ea4:	20000ab4 	.word	0x20000ab4
 8000ea8:	08023bec 	.word	0x08023bec
 8000eac:	08023c08 	.word	0x08023c08
 8000eb0:	2000195c 	.word	0x2000195c
 8000eb4:	08023c18 	.word	0x08023c18
 8000eb8:	20000ae6 	.word	0x20000ae6
 8000ebc:	08023c2c 	.word	0x08023c2c
 8000ec0:	20000b18 	.word	0x20000b18
 8000ec4:	08023c3c 	.word	0x08023c3c
 8000ec8:	20000b4a 	.word	0x20000b4a
 8000ecc:	20000b7c 	.word	0x20000b7c
 8000ed0:	20000bae 	.word	0x20000bae
 8000ed4:	08023c58 	.word	0x08023c58
 8000ed8:	20000be0 	.word	0x20000be0
 8000edc:	08023c68 	.word	0x08023c68
 8000ee0:	20000c12 	.word	0x20000c12

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f021 fa02 	bl	8022324 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000a50 	.word	0x20000a50
 8000f48:	20000e38 	.word	0x20000e38

08000f4c <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a2      	sub	sp, #136	; 0x88
 8000f50:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	227c      	movs	r2, #124	; 0x7c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f021 fa15 	bl	8022394 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 8000f76:	e03a      	b.n	8000fee <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8000f78:	f00e f8ca 	bl	800f110 <Get_Eth_Byte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8000f82:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f86:	2bf4      	cmp	r3, #244	; 0xf4
 8000f88:	d002      	beq.n	8000f90 <Process_Hitachi_Packets_Eth+0x44>
 8000f8a:	2bf6      	cmp	r3, #246	; 0xf6
 8000f8c:	d00c      	beq.n	8000fa8 <Process_Hitachi_Packets_Eth+0x5c>
 8000f8e:	e01b      	b.n	8000fc8 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8000f90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000f9a:	3388      	adds	r3, #136	; 0x88
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fa2:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 8000fa6:	e01e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 8000fa8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fb2:	3388      	adds	r3, #136	; 0x88
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fba:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 8000fbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fc2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 8000fc6:	e00e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 8000fc8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 8000fd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fda:	3388      	adds	r3, #136	; 0x88
 8000fdc:	443b      	add	r3, r7
 8000fde:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fe2:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8000fe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 8000fee:	f00e f87b 	bl	800f0e8 <Is_There_EI_Data>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1bf      	bne.n	8000f78 <Process_Hitachi_Packets_Eth+0x2c>
 8000ff8:	e000      	b.n	8000ffc <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 8000ffa:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8000ffc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00d      	beq.n	8001020 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 8001004:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d906      	bls.n	800101a <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 800100c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8a3 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001020:	bf00      	nop
 8001022:	3788      	adds	r7, #136	; 0x88
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	; 0x88
 800102c:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	227c      	movs	r2, #124	; 0x7c
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f021 f9a7 	bl	8022394 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <Process_Hitachi_Packets_Com+0x12c>)
 8001054:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001058:	2b00      	cmp	r3, #0
 800105a:	d074      	beq.n	8001146 <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <Process_Hitachi_Packets_Com+0x130>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f00d fc93 	bl	800e98c <HAL_Elaps_Ticks>
 8001066:	4603      	mov	r3, r0
 8001068:	2b13      	cmp	r3, #19
 800106a:	d96e      	bls.n	800114a <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 800106c:	e04a      	b.n	8001104 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 800106e:	2003      	movs	r0, #3
 8001070:	f013 ff46 	bl	8014f00 <Com_Get_Byte>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800107a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800107e:	2b7e      	cmp	r3, #126	; 0x7e
 8001080:	d90a      	bls.n	8001098 <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001082:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	4619      	mov	r1, r3
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <Process_Hitachi_Packets_Com+0x134>)
 800108c:	f021 fa6a 	bl	8022564 <iprintf>
			Traverser = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 8001096:	e03d      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 8001098:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800109c:	2bf4      	cmp	r3, #244	; 0xf4
 800109e:	d002      	beq.n	80010a6 <Process_Hitachi_Packets_Com+0x7e>
 80010a0:	2bf6      	cmp	r3, #246	; 0xf6
 80010a2:	d00c      	beq.n	80010be <Process_Hitachi_Packets_Com+0x96>
 80010a4:	e01b      	b.n	80010de <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80010a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010b0:	3388      	adds	r3, #136	; 0x88
 80010b2:	443b      	add	r3, r7
 80010b4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010b8:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80010bc:	e01e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80010be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010c8:	3388      	adds	r3, #136	; 0x88
 80010ca:	443b      	add	r3, r7
 80010cc:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010dc:	e00e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80010de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80010e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010f0:	3388      	adds	r3, #136	; 0x88
 80010f2:	443b      	add	r3, r7
 80010f4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010f8:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80010fc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 8001104:	2003      	movs	r0, #3
 8001106:	f013 febb 	bl	8014e80 <Com_DataReady>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ae      	bne.n	800106e <Process_Hitachi_Packets_Com+0x46>
 8001110:	e000      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 8001112:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001114:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001118:	2b00      	cmp	r3, #0
 800111a:	d017      	beq.n	800114c <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 800111c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d906      	bls.n	8001132 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001124:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f817 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f021 f928 	bl	8022394 <memset>
 8001144:	e002      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 800114a:	bf00      	nop
	}
}
 800114c:	3788      	adds	r7, #136	; 0x88
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000304 	.word	0x20000304
 8001158:	2000a000 	.word	0x2000a000
 800115c:	08023ca4 	.word	0x08023ca4

08001160 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a4      	sub	sp, #144	; 0x90
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	227c      	movs	r2, #124	; 0x7c
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f021 f90b 	bl	8022394 <memset>
	uint16_t des_index=0,src_index=0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800118a:	2300      	movs	r3, #0
 800118c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001190:	2300      	movs	r3, #0
 8001192:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001196:	e034      	b.n	8001202 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 8001198:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2bf0      	cmp	r3, #240	; 0xf0
 80011a4:	d118      	bne.n	80011d8 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80011a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011b4:	3301      	adds	r3, #1
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011c0:	430a      	orrs	r2, r1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	3390      	adds	r3, #144	; 0x90
 80011c6:	443b      	add	r3, r7
 80011c8:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80011cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011d0:	3301      	adds	r3, #1
 80011d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80011d6:	e00a      	b.n	80011ee <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80011d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	441a      	add	r2, r3
 80011e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	3390      	adds	r3, #144	; 0x90
 80011e8:	443b      	add	r3, r7
 80011ea:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80011ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80011f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800120a:	429a      	cmp	r2, r3
 800120c:	d3c4      	bcc.n	8001198 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 800120e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f805 	bl	8001228 <EI_Data_Analyzer>
}
 800121e:	bf00      	nop
 8001220:	3790      	adds	r7, #144	; 0x90
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	2300      	movs	r3, #0
 800123e:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001248:	f014 f982 	bl	8015550 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 800124e:	4ba7      	ldr	r3, [pc, #668]	; (80014ec <EI_Data_Analyzer+0x2c4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <EI_Data_Analyzer+0x52>
 8001256:	f014 f97b 	bl	8015550 <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001260:	4293      	cmp	r3, r2
 8001262:	d90a      	bls.n	800127a <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001264:	48a2      	ldr	r0, [pc, #648]	; (80014f0 <EI_Data_Analyzer+0x2c8>)
 8001266:	f021 fa19 	bl	802269c <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800126a:	49a2      	ldr	r1, [pc, #648]	; (80014f4 <EI_Data_Analyzer+0x2cc>)
 800126c:	48a2      	ldr	r0, [pc, #648]	; (80014f8 <EI_Data_Analyzer+0x2d0>)
 800126e:	f7fe ffe7 	bl	8000240 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 81a1 	bne.w	80015bc <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3303      	adds	r3, #3
 800127e:	461a      	mov	r2, r3
 8001280:	2110      	movs	r1, #16
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff f9c6 	bl	8000614 <ExtractBits>
 8001288:	4603      	mov	r3, r0
 800128a:	b29b      	uxth	r3, r3
 800128c:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 800128e:	e00b      	b.n	80012a8 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	4a9a      	ldr	r2, [pc, #616]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001294:	3366      	adds	r3, #102	; 0x66
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d009      	beq.n	80012b6 <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	3301      	adds	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	4b94      	ldr	r3, [pc, #592]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	7ffa      	ldrb	r2, [r7, #31]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3ed      	bcc.n	8001290 <EI_Data_Analyzer+0x68>
 80012b4:	e000      	b.n	80012b8 <EI_Data_Analyzer+0x90>
		{
			break;
 80012b6:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80012b8:	4b90      	ldr	r3, [pc, #576]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	7ffa      	ldrb	r2, [r7, #31]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d309      	bcc.n	80012d8 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80012c4:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8179 	bne.w	80015c0 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	488c      	ldr	r0, [pc, #560]	; (8001504 <EI_Data_Analyzer+0x2dc>)
 80012d2:	f021 f947 	bl	8022564 <iprintf>
		}
		return;
 80012d6:	e173      	b.n	80015c0 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	461a      	mov	r2, r3
 80012de:	2110      	movs	r1, #16
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff f997 	bl	8000614 <ExtractBits>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	4a83      	ldr	r2, [pc, #524]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012f0:	3370      	adds	r3, #112	; 0x70
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d012      	beq.n	8001324 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80012fe:	4882      	ldr	r0, [pc, #520]	; (8001508 <EI_Data_Analyzer+0x2e0>)
 8001300:	f021 f9cc 	bl	802269c <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001304:	69b9      	ldr	r1, [r7, #24]
 8001306:	4881      	ldr	r0, [pc, #516]	; (800150c <EI_Data_Analyzer+0x2e4>)
 8001308:	f021 f92c 	bl	8022564 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	4a7b      	ldr	r2, [pc, #492]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001310:	3370      	adds	r3, #112	; 0x70
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	487c      	ldr	r0, [pc, #496]	; (8001510 <EI_Data_Analyzer+0x2e8>)
 800131e:	f021 f921 	bl	8022564 <iprintf>
		return;
 8001322:	e14e      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	7fba      	ldrb	r2, [r7, #30]
 800133c:	429a      	cmp	r2, r3
 800133e:	d111      	bne.n	8001364 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001340:	4875      	ldr	r0, [pc, #468]	; (8001518 <EI_Data_Analyzer+0x2f0>)
 8001342:	f021 f9ab 	bl	802269c <puts>
			printf("Received:%lu\n",Destin_Address);
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	4874      	ldr	r0, [pc, #464]	; (800151c <EI_Data_Analyzer+0x2f4>)
 800134a:	f021 f90b 	bl	8022564 <iprintf>
			Destin_Address = 333;
 800134e:	f240 134d 	movw	r3, #333	; 0x14d
 8001352:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	4870      	ldr	r0, [pc, #448]	; (8001520 <EI_Data_Analyzer+0x2f8>)
 8001360:	f021 f900 	bl	8022564 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	7fba      	ldrb	r2, [r7, #30]
 800136c:	429a      	cmp	r2, r3
 800136e:	d307      	bcc.n	8001380 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001370:	486c      	ldr	r0, [pc, #432]	; (8001524 <EI_Data_Analyzer+0x2fc>)
 8001372:	f021 f993 	bl	802269c <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	486b      	ldr	r0, [pc, #428]	; (8001528 <EI_Data_Analyzer+0x300>)
 800137a:	f021 f8f3 	bl	8022564 <iprintf>
		return;
 800137e:	e120      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d121      	bne.n	80013cc <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	4a68      	ldr	r2, [pc, #416]	; (800152c <EI_Data_Analyzer+0x304>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d002      	beq.n	8001398 <EI_Data_Analyzer+0x170>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d004      	beq.n	80013a0 <EI_Data_Analyzer+0x178>
 8001396:	e007      	b.n	80013a8 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001398:	4865      	ldr	r0, [pc, #404]	; (8001530 <EI_Data_Analyzer+0x308>)
 800139a:	f021 f97f 	bl	802269c <puts>
			break;
 800139e:	e015      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 80013a0:	4864      	ldr	r0, [pc, #400]	; (8001534 <EI_Data_Analyzer+0x30c>)
 80013a2:	f021 f97b 	bl	802269c <puts>
			break;
 80013a6:	e011      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80013ac:	4413      	add	r3, r2
 80013ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d103      	bne.n	80013be <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 80013b6:	4860      	ldr	r0, [pc, #384]	; (8001538 <EI_Data_Analyzer+0x310>)
 80013b8:	f021 f970 	bl	802269c <puts>
 80013bc:	e006      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	4a5a      	ldr	r2, [pc, #360]	; (800152c <EI_Data_Analyzer+0x304>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	4619      	mov	r1, r3
 80013c6:	485d      	ldr	r0, [pc, #372]	; (800153c <EI_Data_Analyzer+0x314>)
 80013c8:	f021 f8cc 	bl	8022564 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	7ffa      	ldrb	r2, [r7, #31]
 80013d6:	4955      	ldr	r1, [pc, #340]	; (800152c <EI_Data_Analyzer+0x304>)
 80013d8:	5c8a      	ldrb	r2, [r1, r2]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d014      	beq.n	8001408 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <EI_Data_Analyzer+0x31c>)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	4957      	ldr	r1, [pc, #348]	; (8001548 <EI_Data_Analyzer+0x320>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <EI_Data_Analyzer+0x304>)
 80013f6:	5cd2      	ldrb	r2, [r2, r3]
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4a50      	ldr	r2, [pc, #320]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001402:	4852      	ldr	r0, [pc, #328]	; (800154c <EI_Data_Analyzer+0x324>)
 8001404:	f021 f94a 	bl	802269c <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001408:	7ffa      	ldrb	r2, [r7, #31]
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	4947      	ldr	r1, [pc, #284]	; (800152c <EI_Data_Analyzer+0x304>)
 800140e:	5c89      	ldrb	r1, [r1, r2]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <EI_Data_Analyzer+0x328>)
 8001412:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	4618      	mov	r0, r3
 800141e:	f00d fab5 	bl	800e98c <HAL_Elaps_Ticks>
 8001422:	4602      	mov	r2, r0
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001428:	338a      	adds	r3, #138	; 0x8a
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	429a      	cmp	r2, r3
 8001430:	d318      	bcc.n	8001464 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	4947      	ldr	r1, [pc, #284]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	4941      	ldr	r1, [pc, #260]	; (8001544 <EI_Data_Analyzer+0x31c>)
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	493f      	ldr	r1, [pc, #252]	; (8001548 <EI_Data_Analyzer+0x320>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001454:	3366      	adds	r3, #102	; 0x66
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4619      	mov	r1, r3
 800145e:	483e      	ldr	r0, [pc, #248]	; (8001558 <EI_Data_Analyzer+0x330>)
 8001460:	f021 f880 	bl	8022564 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	493b      	ldr	r1, [pc, #236]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 800146e:	2281      	movs	r2, #129	; 0x81
 8001470:	2100      	movs	r1, #0
 8001472:	483a      	ldr	r0, [pc, #232]	; (800155c <EI_Data_Analyzer+0x334>)
 8001474:	f020 ff8e 	bl	8022394 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	461a      	mov	r2, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4837      	ldr	r0, [pc, #220]	; (800155c <EI_Data_Analyzer+0x334>)
 8001480:	f020 ff60 	bl	8022344 <memcpy>
	Rx_Print_st.Size = Size;
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <EI_Data_Analyzer+0x334>)
 800148a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3307      	adds	r3, #7
 8001492:	461a      	mov	r2, r3
 8001494:	2108      	movs	r1, #8
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff f8bc 	bl	8000614 <ExtractBits>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 80014a0:	7ffa      	ldrb	r2, [r7, #31]
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <EI_Data_Analyzer+0x338>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3303      	adds	r3, #3
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	492b      	ldr	r1, [pc, #172]	; (8001564 <EI_Data_Analyzer+0x33c>)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 fbd9 	bl	8007c78 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d870      	bhi.n	80015b0 <EI_Data_Analyzer+0x388>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <EI_Data_Analyzer+0x2ac>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	08001569 	.word	0x08001569
 80014d8:	08001579 	.word	0x08001579
 80014dc:	08001589 	.word	0x08001589
 80014e0:	08001591 	.word	0x08001591
 80014e4:	080015b1 	.word	0x080015b1
 80014e8:	080015a1 	.word	0x080015a1
 80014ec:	20000108 	.word	0x20000108
 80014f0:	08023cd0 	.word	0x08023cd0
 80014f4:	08023d10 	.word	0x08023d10
 80014f8:	20000305 	.word	0x20000305
 80014fc:	20000304 	.word	0x20000304
 8001500:	20000645 	.word	0x20000645
 8001504:	08023d1c 	.word	0x08023d1c
 8001508:	08023d58 	.word	0x08023d58
 800150c:	08023d74 	.word	0x08023d74
 8001510:	08023d98 	.word	0x08023d98
 8001514:	2000195c 	.word	0x2000195c
 8001518:	08023dd0 	.word	0x08023dd0
 800151c:	08023df4 	.word	0x08023df4
 8001520:	08023e04 	.word	0x08023e04
 8001524:	08023e14 	.word	0x08023e14
 8001528:	08023e48 	.word	0x08023e48
 800152c:	20001080 	.word	0x20001080
 8001530:	08023e68 	.word	0x08023e68
 8001534:	08023e78 	.word	0x08023e78
 8001538:	08023e88 	.word	0x08023e88
 800153c:	08023ea0 	.word	0x08023ea0
 8001540:	20000f7c 	.word	0x20000f7c
 8001544:	20000fa4 	.word	0x20000fa4
 8001548:	20000fcc 	.word	0x20000fcc
 800154c:	08023ec4 	.word	0x08023ec4
 8001550:	20001024 	.word	0x20001024
 8001554:	20001030 	.word	0x20001030
 8001558:	08023edc 	.word	0x08023edc
 800155c:	20001c10 	.word	0x20001c10
 8001560:	20001674 	.word	0x20001674
 8001564:	20000e74 	.word	0x20000e74
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	7fbb      	ldrb	r3, [r7, #30]
 800156e:	7ffa      	ldrb	r2, [r7, #31]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f82d 	bl	80015d0 <Init_Msg_extr>
		break;
 8001576:	e024      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	b2d9      	uxtb	r1, r3
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	7ffa      	ldrb	r2, [r7, #31]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 fbc3 	bl	8002d0c <Vital_Msg_extr>
		break;
 8001586:	e01c      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <EI_Data_Analyzer+0x3a0>)
 800158a:	f021 f887 	bl	802269c <puts>
		break;
 800158e:	e018      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2d9      	uxtb	r1, r3
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	7ffa      	ldrb	r2, [r7, #31]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f003 fe4b 	bl	8005234 <Status_Msg_Extr>
		break;
 800159e:	e010      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	7ffa      	ldrb	r2, [r7, #31]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 f843 	bl	8006634 <Service_Msg_Extr>
		break;
 80015ae:	e008      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <EI_Data_Analyzer+0x3a4>)
 80015b6:	f020 ffd5 	bl	8022564 <iprintf>
		break;
 80015ba:	e002      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
			return;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
		return;
 80015c0:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	08023ef8 	.word	0x08023ef8
 80015cc:	08023f1c 	.word	0x08023f1c

080015d0 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 80015fa:	f013 ffa9 	bl	8015550 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	83fb      	strh	r3, [r7, #30]
 8001604:	2300      	movs	r3, #0
 8001606:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b05      	subs	r3, #5
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f011 fbc4 	bl	8012da0 <CalculateDirectReverseCrc>
 8001618:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	3b05      	subs	r3, #5
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	441a      	add	r2, r3
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	2120      	movs	r1, #32
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fff4 	bl	8000614 <ExtractBits>
 800162c:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d013      	beq.n	800165e <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <Init_Msg_extr+0x110>)
 800163a:	3366      	adds	r3, #102	; 0x66
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4619      	mov	r1, r3
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <Init_Msg_extr+0x114>)
 8001646:	f020 ff8d 	bl	8022564 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <Init_Msg_extr+0x118>)
 800164e:	f020 ff89 	bl	8022564 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4825      	ldr	r0, [pc, #148]	; (80016ec <Init_Msg_extr+0x11c>)
 8001656:	f020 ff85 	bl	8022564 <iprintf>
		return;
 800165a:	f000 be32 	b.w	80022c2 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <Init_Msg_extr+0x120>)
 8001662:	2101      	movs	r1, #1
 8001664:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <Init_Msg_extr+0x124>)
 800166a:	2101      	movs	r1, #1
 800166c:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 021d 	add.w	r2, r3, #29
 8001674:	8bbb      	ldrh	r3, [r7, #28]
 8001676:	2110      	movs	r1, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ffcb 	bl	8000614 <ExtractBits>
 800167e:	4603      	mov	r3, r0
 8001680:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <Init_Msg_extr+0x110>)
 8001686:	33fe      	adds	r3, #254	; 0xfe
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	8b7a      	ldrh	r2, [r7, #26]
 8001690:	429a      	cmp	r2, r3
 8001692:	d03d      	beq.n	8001710 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <Init_Msg_extr+0x128>)
 8001698:	2101      	movs	r1, #1
 800169a:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <Init_Msg_extr+0x110>)
 80016a0:	3366      	adds	r3, #102	; 0x66
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <Init_Msg_extr+0x12c>)
 80016ac:	f020 ff5a 	bl	8022564 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 80016b0:	8b7b      	ldrh	r3, [r7, #26]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <Init_Msg_extr+0x130>)
 80016b6:	f020 ff55 	bl	8022564 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 80016ba:	78bb      	ldrb	r3, [r7, #2]
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <Init_Msg_extr+0x110>)
 80016be:	33fe      	adds	r3, #254	; 0xfe
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	889b      	ldrh	r3, [r3, #4]
 80016c6:	4619      	mov	r1, r3
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <Init_Msg_extr+0x134>)
 80016ca:	f020 ff4b 	bl	8022564 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <Init_Msg_extr+0x138>)
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <Init_Msg_extr+0x13c>)
 80016d2:	f7fe fdb5 	bl	8000240 <strcmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01d      	beq.n	8001718 <Init_Msg_extr+0x148>
		{
			return;
 80016dc:	f000 bdf1 	b.w	80022c2 <Init_Msg_extr+0xcf2>
 80016e0:	20000304 	.word	0x20000304
 80016e4:	08023f38 	.word	0x08023f38
 80016e8:	08023f54 	.word	0x08023f54
 80016ec:	08023f64 	.word	0x08023f64
 80016f0:	20000ff4 	.word	0x20000ff4
 80016f4:	2000100c 	.word	0x2000100c
 80016f8:	20001000 	.word	0x20001000
 80016fc:	08023f74 	.word	0x08023f74
 8001700:	08023fac 	.word	0x08023fac
 8001704:	08023fd0 	.word	0x08023fd0
 8001708:	08023d10 	.word	0x08023d10
 800170c:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001710:	78bb      	ldrb	r3, [r7, #2]
 8001712:	4aab      	ldr	r2, [pc, #684]	; (80019c0 <Init_Msg_extr+0x3f0>)
 8001714:	2100      	movs	r1, #0
 8001716:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800171e:	8bbb      	ldrh	r3, [r7, #28]
 8001720:	2108      	movs	r1, #8
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff76 	bl	8000614 <ExtractBits>
 8001728:	4603      	mov	r3, r0
 800172a:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	4aa5      	ldr	r2, [pc, #660]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001730:	4413      	add	r3, r2
 8001732:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001736:	7e7a      	ldrb	r2, [r7, #25]
 8001738:	429a      	cmp	r2, r3
 800173a:	d01f      	beq.n	800177c <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	4aa1      	ldr	r2, [pc, #644]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001740:	3366      	adds	r3, #102	; 0x66
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4619      	mov	r1, r3
 800174a:	489f      	ldr	r0, [pc, #636]	; (80019c8 <Init_Msg_extr+0x3f8>)
 800174c:	f020 ff0a 	bl	8022564 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001750:	78bb      	ldrb	r3, [r7, #2]
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001754:	4413      	add	r3, r2
 8001756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800175a:	4619      	mov	r1, r3
 800175c:	489b      	ldr	r0, [pc, #620]	; (80019cc <Init_Msg_extr+0x3fc>)
 800175e:	f020 ff01 	bl	8022564 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001762:	7e7b      	ldrb	r3, [r7, #25]
 8001764:	4619      	mov	r1, r3
 8001766:	489a      	ldr	r0, [pc, #616]	; (80019d0 <Init_Msg_extr+0x400>)
 8001768:	f020 fefc 	bl	8022564 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800176c:	4999      	ldr	r1, [pc, #612]	; (80019d4 <Init_Msg_extr+0x404>)
 800176e:	489a      	ldr	r0, [pc, #616]	; (80019d8 <Init_Msg_extr+0x408>)
 8001770:	f7fe fd66 	bl	8000240 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 85a2 	bne.w	80022c0 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	4997      	ldr	r1, [pc, #604]	; (80019dc <Init_Msg_extr+0x40c>)
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	4a95      	ldr	r2, [pc, #596]	; (80019e0 <Init_Msg_extr+0x410>)
 800178a:	2101      	movs	r1, #1
 800178c:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	4a94      	ldr	r2, [pc, #592]	; (80019e4 <Init_Msg_extr+0x414>)
 8001792:	2100      	movs	r1, #0
 8001794:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001796:	78bb      	ldrb	r3, [r7, #2]
 8001798:	4993      	ldr	r1, [pc, #588]	; (80019e8 <Init_Msg_extr+0x418>)
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 80017a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017a4:	3308      	adds	r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <Init_Msg_extr+0x1dc>
 80017aa:	3307      	adds	r3, #7
 80017ac:	10db      	asrs	r3, r3, #3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	4413      	add	r3, r2
 80017b4:	83fb      	strh	r3, [r7, #30]
 80017b6:	8bbb      	ldrh	r3, [r7, #28]
 80017b8:	3308      	adds	r3, #8
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b21b      	sxth	r3, r3
 80017be:	425a      	negs	r2, r3
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	f002 0207 	and.w	r2, r2, #7
 80017c8:	bf58      	it	pl
 80017ca:	4253      	negpl	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80017d0:	8bfb      	ldrh	r3, [r7, #30]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	441a      	add	r2, r3
 80017d6:	8bbb      	ldrh	r3, [r7, #28]
 80017d8:	2110      	movs	r1, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff1a 	bl	8000614 <ExtractBits>
 80017e0:	4602      	mov	r2, r0
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	b291      	uxth	r1, r2
 80017e6:	4a81      	ldr	r2, [pc, #516]	; (80019ec <Init_Msg_extr+0x41c>)
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	4413      	add	r3, r2
 80017ec:	3310      	adds	r3, #16
 80017ee:	460a      	mov	r2, r1
 80017f0:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	4a7d      	ldr	r2, [pc, #500]	; (80019ec <Init_Msg_extr+0x41c>)
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	4413      	add	r3, r2
 80017fa:	3310      	adds	r3, #16
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	487b      	ldr	r0, [pc, #492]	; (80019f0 <Init_Msg_extr+0x420>)
 8001802:	f020 feaf 	bl	8022564 <iprintf>
	BITSTUFFINC(16);
 8001806:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800180a:	3310      	adds	r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	da00      	bge.n	8001812 <Init_Msg_extr+0x242>
 8001810:	3307      	adds	r3, #7
 8001812:	10db      	asrs	r3, r3, #3
 8001814:	b29a      	uxth	r2, r3
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	4413      	add	r3, r2
 800181a:	83fb      	strh	r3, [r7, #30]
 800181c:	8bbb      	ldrh	r3, [r7, #28]
 800181e:	3310      	adds	r3, #16
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	425a      	negs	r2, r3
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	f002 0207 	and.w	r2, r2, #7
 800182e:	bf58      	it	pl
 8001830:	4253      	negpl	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	441a      	add	r2, r3
 800183c:	8bbb      	ldrh	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fee7 	bl	8000614 <ExtractBits>
 8001846:	4602      	mov	r2, r0
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	b291      	uxth	r1, r2
 800184c:	4a67      	ldr	r2, [pc, #412]	; (80019ec <Init_Msg_extr+0x41c>)
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	4413      	add	r3, r2
 8001852:	330e      	adds	r3, #14
 8001854:	460a      	mov	r2, r1
 8001856:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	4a64      	ldr	r2, [pc, #400]	; (80019ec <Init_Msg_extr+0x41c>)
 800185c:	015b      	lsls	r3, r3, #5
 800185e:	4413      	add	r3, r2
 8001860:	330e      	adds	r3, #14
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <Init_Msg_extr+0x424>)
 8001868:	f020 fe7c 	bl	8022564 <iprintf>
	BITSTUFFINC(16);
 800186c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001870:	3310      	adds	r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	da00      	bge.n	8001878 <Init_Msg_extr+0x2a8>
 8001876:	3307      	adds	r3, #7
 8001878:	10db      	asrs	r3, r3, #3
 800187a:	b29a      	uxth	r2, r3
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	4413      	add	r3, r2
 8001880:	83fb      	strh	r3, [r7, #30]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	3310      	adds	r3, #16
 8001886:	b29b      	uxth	r3, r3
 8001888:	b21b      	sxth	r3, r3
 800188a:	425a      	negs	r2, r3
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	f002 0207 	and.w	r2, r2, #7
 8001894:	bf58      	it	pl
 8001896:	4253      	negpl	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800189c:	8bfb      	ldrh	r3, [r7, #30]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	441a      	add	r2, r3
 80018a2:	8bbb      	ldrh	r3, [r7, #28]
 80018a4:	2108      	movs	r1, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe feb4 	bl	8000614 <ExtractBits>
 80018ac:	4602      	mov	r2, r0
 80018ae:	78bb      	ldrb	r3, [r7, #2]
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <Init_Msg_extr+0x41c>)
 80018b4:	015b      	lsls	r3, r3, #5
 80018b6:	4413      	add	r3, r2
 80018b8:	460a      	mov	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80018bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018c0:	3308      	adds	r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <Init_Msg_extr+0x2f8>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	8bfb      	ldrh	r3, [r7, #30]
 80018ce:	4413      	add	r3, r2
 80018d0:	83fb      	strh	r3, [r7, #30]
 80018d2:	8bbb      	ldrh	r3, [r7, #28]
 80018d4:	3308      	adds	r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b21b      	sxth	r3, r3
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	f002 0207 	and.w	r2, r2, #7
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80018ec:	8bfb      	ldrh	r3, [r7, #30]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	441a      	add	r2, r3
 80018f2:	8bbb      	ldrh	r3, [r7, #28]
 80018f4:	2108      	movs	r1, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe8c 	bl	8000614 <ExtractBits>
 80018fc:	4602      	mov	r2, r0
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	b2d1      	uxtb	r1, r2
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <Init_Msg_extr+0x41c>)
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	4413      	add	r3, r2
 8001908:	3301      	adds	r3, #1
 800190a:	460a      	mov	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800190e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001912:	3308      	adds	r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	da00      	bge.n	800191a <Init_Msg_extr+0x34a>
 8001918:	3307      	adds	r3, #7
 800191a:	10db      	asrs	r3, r3, #3
 800191c:	b29a      	uxth	r2, r3
 800191e:	8bfb      	ldrh	r3, [r7, #30]
 8001920:	4413      	add	r3, r2
 8001922:	83fb      	strh	r3, [r7, #30]
 8001924:	8bbb      	ldrh	r3, [r7, #28]
 8001926:	3308      	adds	r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21b      	sxth	r3, r3
 800192c:	425a      	negs	r2, r3
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f002 0207 	and.w	r2, r2, #7
 8001936:	bf58      	it	pl
 8001938:	4253      	negpl	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	441a      	add	r2, r3
 8001944:	8bbb      	ldrh	r3, [r7, #28]
 8001946:	2108      	movs	r1, #8
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe63 	bl	8000614 <ExtractBits>
 800194e:	4602      	mov	r2, r0
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <Init_Msg_extr+0x41c>)
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	4413      	add	r3, r2
 800195a:	3302      	adds	r3, #2
 800195c:	460a      	mov	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001960:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001964:	3308      	adds	r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	da00      	bge.n	800196c <Init_Msg_extr+0x39c>
 800196a:	3307      	adds	r3, #7
 800196c:	10db      	asrs	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	83fb      	strh	r3, [r7, #30]
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3308      	adds	r3, #8
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21b      	sxth	r3, r3
 800197e:	425a      	negs	r2, r3
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	f002 0207 	and.w	r2, r2, #7
 8001988:	bf58      	it	pl
 800198a:	4253      	negpl	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001990:	8bfb      	ldrh	r3, [r7, #30]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	441a      	add	r2, r3
 8001996:	8bbb      	ldrh	r3, [r7, #28]
 8001998:	2110      	movs	r1, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fe3a 	bl	8000614 <ExtractBits>
 80019a0:	4602      	mov	r2, r0
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	b291      	uxth	r1, r2
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <Init_Msg_extr+0x428>)
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	460a      	mov	r2, r1
 80019b0:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80019b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019b6:	3310      	adds	r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da1f      	bge.n	80019fc <Init_Msg_extr+0x42c>
 80019bc:	3307      	adds	r3, #7
 80019be:	e01d      	b.n	80019fc <Init_Msg_extr+0x42c>
 80019c0:	20001000 	.word	0x20001000
 80019c4:	20000304 	.word	0x20000304
 80019c8:	08023ff4 	.word	0x08023ff4
 80019cc:	0802401c 	.word	0x0802401c
 80019d0:	08024030 	.word	0x08024030
 80019d4:	08023d10 	.word	0x08023d10
 80019d8:	20000305 	.word	0x20000305
 80019dc:	20000fa4 	.word	0x20000fa4
 80019e0:	2000100c 	.word	0x2000100c
 80019e4:	2000108c 	.word	0x2000108c
 80019e8:	20001098 	.word	0x20001098
 80019ec:	20001264 	.word	0x20001264
 80019f0:	08024044 	.word	0x08024044
 80019f4:	0802404c 	.word	0x0802404c
 80019f8:	200011c4 	.word	0x200011c4
 80019fc:	10db      	asrs	r3, r3, #3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	8bfb      	ldrh	r3, [r7, #30]
 8001a02:	4413      	add	r3, r2
 8001a04:	83fb      	strh	r3, [r7, #30]
 8001a06:	8bbb      	ldrh	r3, [r7, #28]
 8001a08:	3310      	adds	r3, #16
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	425a      	negs	r2, r3
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	f002 0207 	and.w	r2, r2, #7
 8001a18:	bf58      	it	pl
 8001a1a:	4253      	negpl	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	4a8e      	ldr	r2, [pc, #568]	; (8001c5c <Init_Msg_extr+0x68c>)
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 811d 	beq.w	8001c70 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	8bbb      	ldrh	r3, [r7, #28]
 8001a3e:	2108      	movs	r1, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fde7 	bl	8000614 <ExtractBits>
 8001a46:	4603      	mov	r3, r0
 8001a48:	78ba      	ldrb	r2, [r7, #2]
 8001a4a:	b2d8      	uxtb	r0, r3
 8001a4c:	4984      	ldr	r1, [pc, #528]	; (8001c60 <Init_Msg_extr+0x690>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	3305      	adds	r3, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001a5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a62:	3308      	adds	r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <Init_Msg_extr+0x49a>
 8001a68:	3307      	adds	r3, #7
 8001a6a:	10db      	asrs	r3, r3, #3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	4413      	add	r3, r2
 8001a72:	83fb      	strh	r3, [r7, #30]
 8001a74:	8bbb      	ldrh	r3, [r7, #28]
 8001a76:	3308      	adds	r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	425a      	negs	r2, r3
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	f002 0207 	and.w	r2, r2, #7
 8001a86:	bf58      	it	pl
 8001a88:	4253      	negpl	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	441a      	add	r2, r3
 8001a94:	8bbb      	ldrh	r3, [r7, #28]
 8001a96:	2108      	movs	r1, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fdbb 	bl	8000614 <ExtractBits>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	78ba      	ldrb	r2, [r7, #2]
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	496e      	ldr	r1, [pc, #440]	; (8001c60 <Init_Msg_extr+0x690>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001ab6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001aba:	3308      	adds	r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <Init_Msg_extr+0x4f2>
 8001ac0:	3307      	adds	r3, #7
 8001ac2:	10db      	asrs	r3, r3, #3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	4413      	add	r3, r2
 8001aca:	83fb      	strh	r3, [r7, #30]
 8001acc:	8bbb      	ldrh	r3, [r7, #28]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	f002 0207 	and.w	r2, r2, #7
 8001ade:	bf58      	it	pl
 8001ae0:	4253      	negpl	r3, r2
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	441a      	add	r2, r3
 8001aec:	8bbb      	ldrh	r3, [r7, #28]
 8001aee:	2108      	movs	r1, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd8f 	bl	8000614 <ExtractBits>
 8001af6:	4603      	mov	r3, r0
 8001af8:	78ba      	ldrb	r2, [r7, #2]
 8001afa:	b2d8      	uxtb	r0, r3
 8001afc:	4958      	ldr	r1, [pc, #352]	; (8001c60 <Init_Msg_extr+0x690>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	3303      	adds	r3, #3
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001b0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b12:	3308      	adds	r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <Init_Msg_extr+0x54a>
 8001b18:	3307      	adds	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	8bfb      	ldrh	r3, [r7, #30]
 8001b20:	4413      	add	r3, r2
 8001b22:	83fb      	strh	r3, [r7, #30]
 8001b24:	8bbb      	ldrh	r3, [r7, #28]
 8001b26:	3308      	adds	r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	f002 0207 	and.w	r2, r2, #7
 8001b36:	bf58      	it	pl
 8001b38:	4253      	negpl	r3, r2
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b3e:	8bfb      	ldrh	r3, [r7, #30]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	441a      	add	r2, r3
 8001b44:	8bbb      	ldrh	r3, [r7, #28]
 8001b46:	2108      	movs	r1, #8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd63 	bl	8000614 <ExtractBits>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	78ba      	ldrb	r2, [r7, #2]
 8001b52:	b2d8      	uxtb	r0, r3
 8001b54:	4942      	ldr	r1, [pc, #264]	; (8001c60 <Init_Msg_extr+0x690>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001b64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <Init_Msg_extr+0x5a0>
 8001b6e:	3307      	adds	r3, #7
 8001b70:	10db      	asrs	r3, r3, #3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	8bfb      	ldrh	r3, [r7, #30]
 8001b76:	4413      	add	r3, r2
 8001b78:	83fb      	strh	r3, [r7, #30]
 8001b7a:	8bbb      	ldrh	r3, [r7, #28]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	425a      	negs	r2, r3
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	f002 0207 	and.w	r2, r2, #7
 8001b8c:	bf58      	it	pl
 8001b8e:	4253      	negpl	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b94:	8bfb      	ldrh	r3, [r7, #30]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	441a      	add	r2, r3
 8001b9a:	8bbb      	ldrh	r3, [r7, #28]
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	b2d8      	uxtb	r0, r3
 8001baa:	492d      	ldr	r1, [pc, #180]	; (8001c60 <Init_Msg_extr+0x690>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4602      	mov	r2, r0
 8001bba:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001bbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da00      	bge.n	8001bc8 <Init_Msg_extr+0x5f8>
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	10db      	asrs	r3, r3, #3
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	4413      	add	r3, r2
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	8bbb      	ldrh	r3, [r7, #28]
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	425a      	negs	r2, r3
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	f002 0207 	and.w	r2, r2, #7
 8001be4:	bf58      	it	pl
 8001be6:	4253      	negpl	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001bec:	8bfb      	ldrh	r3, [r7, #30]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	8bbb      	ldrh	r3, [r7, #28]
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd0c 	bl	8000614 <ExtractBits>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	78ba      	ldrb	r2, [r7, #2]
 8001c00:	b2d8      	uxtb	r0, r3
 8001c02:	4917      	ldr	r1, [pc, #92]	; (8001c60 <Init_Msg_extr+0x690>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3302      	adds	r3, #2
 8001c10:	4602      	mov	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001c14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c18:	3308      	adds	r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da00      	bge.n	8001c20 <Init_Msg_extr+0x650>
 8001c1e:	3307      	adds	r3, #7
 8001c20:	10db      	asrs	r3, r3, #3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	4413      	add	r3, r2
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	425a      	negs	r2, r3
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	f002 0207 	and.w	r2, r2, #7
 8001c3c:	bf58      	it	pl
 8001c3e:	4253      	negpl	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001c44:	78bb      	ldrb	r3, [r7, #2]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 fe66 	bl	8008918 <IS_MLK_EIPC_TIME_MATCHING>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <Init_Msg_extr+0x698>
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <Init_Msg_extr+0x694>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	54d1      	strb	r1, [r2, r3]
 8001c5a:	e009      	b.n	8001c70 <Init_Msg_extr+0x6a0>
 8001c5c:	200011c4 	.word	0x200011c4
 8001c60:	20001188 	.word	0x20001188
 8001c64:	200010d8 	.word	0x200010d8
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	4aa4      	ldr	r2, [pc, #656]	; (8001efc <Init_Msg_extr+0x92c>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c70:	8bfb      	ldrh	r3, [r7, #30]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	441a      	add	r2, r3
 8001c76:	8bbb      	ldrh	r3, [r7, #28]
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fcca 	bl	8000614 <ExtractBits>
 8001c80:	4602      	mov	r2, r0
 8001c82:	78bb      	ldrb	r3, [r7, #2]
 8001c84:	b2d1      	uxtb	r1, r2
 8001c86:	4a9e      	ldr	r2, [pc, #632]	; (8001f00 <Init_Msg_extr+0x930>)
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	460a      	mov	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001c92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c96:	3308      	adds	r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da00      	bge.n	8001c9e <Init_Msg_extr+0x6ce>
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	10db      	asrs	r3, r3, #3
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	83fb      	strh	r3, [r7, #30]
 8001ca8:	8bbb      	ldrh	r3, [r7, #28]
 8001caa:	3308      	adds	r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	425a      	negs	r2, r3
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	f002 0207 	and.w	r2, r2, #7
 8001cba:	bf58      	it	pl
 8001cbc:	4253      	negpl	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001cc2:	8bfb      	ldrh	r3, [r7, #30]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	8bbb      	ldrh	r3, [r7, #28]
 8001cca:	2110      	movs	r1, #16
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fca1 	bl	8000614 <ExtractBits>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	b291      	uxth	r1, r2
 8001cd8:	4a89      	ldr	r2, [pc, #548]	; (8001f00 <Init_Msg_extr+0x930>)
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	4413      	add	r3, r2
 8001cde:	3312      	adds	r3, #18
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001ce4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ce8:	3310      	adds	r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da00      	bge.n	8001cf0 <Init_Msg_extr+0x720>
 8001cee:	3307      	adds	r3, #7
 8001cf0:	10db      	asrs	r3, r3, #3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bbb      	ldrh	r3, [r7, #28]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	425a      	negs	r2, r3
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	f002 0207 	and.w	r2, r2, #7
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <Init_Msg_extr+0x930>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	1d18      	adds	r0, r3, #4
 8001d1e:	8bfb      	ldrh	r3, [r7, #30]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2206      	movs	r2, #6
 8001d26:	4619      	mov	r1, r3
 8001d28:	f020 fb0c 	bl	8022344 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001d2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d30:	3310      	adds	r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <Init_Msg_extr+0x768>
 8001d36:	3307      	adds	r3, #7
 8001d38:	10db      	asrs	r3, r3, #3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8bfb      	ldrh	r3, [r7, #30]
 8001d3e:	4413      	add	r3, r2
 8001d40:	83fb      	strh	r3, [r7, #30]
 8001d42:	8bbb      	ldrh	r3, [r7, #28]
 8001d44:	3310      	adds	r3, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	425a      	negs	r2, r3
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	f002 0207 	and.w	r2, r2, #7
 8001d54:	bf58      	it	pl
 8001d56:	4253      	negpl	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d60:	3310      	adds	r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da00      	bge.n	8001d68 <Init_Msg_extr+0x798>
 8001d66:	3307      	adds	r3, #7
 8001d68:	10db      	asrs	r3, r3, #3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	4413      	add	r3, r2
 8001d70:	83fb      	strh	r3, [r7, #30]
 8001d72:	8bbb      	ldrh	r3, [r7, #28]
 8001d74:	3310      	adds	r3, #16
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	f002 0207 	and.w	r2, r2, #7
 8001d84:	bf58      	it	pl
 8001d86:	4253      	negpl	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d90:	3310      	adds	r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da00      	bge.n	8001d98 <Init_Msg_extr+0x7c8>
 8001d96:	3307      	adds	r3, #7
 8001d98:	10db      	asrs	r3, r3, #3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	8bfb      	ldrh	r3, [r7, #30]
 8001d9e:	4413      	add	r3, r2
 8001da0:	83fb      	strh	r3, [r7, #30]
 8001da2:	8bbb      	ldrh	r3, [r7, #28]
 8001da4:	3310      	adds	r3, #16
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	425a      	negs	r2, r3
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	f002 0207 	and.w	r2, r2, #7
 8001db4:	bf58      	it	pl
 8001db6:	4253      	negpl	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001dbc:	8bfb      	ldrh	r3, [r7, #30]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	441a      	add	r2, r3
 8001dc2:	8bbb      	ldrh	r3, [r7, #28]
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fc24 	bl	8000614 <ExtractBits>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	b291      	uxth	r1, r2
 8001dd2:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <Init_Msg_extr+0x930>)
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3314      	adds	r3, #20
 8001dda:	460a      	mov	r2, r1
 8001ddc:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001dde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001de2:	3310      	adds	r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da00      	bge.n	8001dea <Init_Msg_extr+0x81a>
 8001de8:	3307      	adds	r3, #7
 8001dea:	10db      	asrs	r3, r3, #3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	8bfb      	ldrh	r3, [r7, #30]
 8001df0:	4413      	add	r3, r2
 8001df2:	83fb      	strh	r3, [r7, #30]
 8001df4:	8bbb      	ldrh	r3, [r7, #28]
 8001df6:	3310      	adds	r3, #16
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	425a      	negs	r2, r3
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	f002 0207 	and.w	r2, r2, #7
 8001e06:	bf58      	it	pl
 8001e08:	4253      	negpl	r3, r2
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	441a      	add	r2, r3
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	2110      	movs	r1, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbfb 	bl	8000614 <ExtractBits>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	b291      	uxth	r1, r2
 8001e24:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	4413      	add	r3, r2
 8001e2a:	3316      	adds	r3, #22
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001e30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e34:	3310      	adds	r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da00      	bge.n	8001e3c <Init_Msg_extr+0x86c>
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	10db      	asrs	r3, r3, #3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	8bfb      	ldrh	r3, [r7, #30]
 8001e42:	4413      	add	r3, r2
 8001e44:	83fb      	strh	r3, [r7, #30]
 8001e46:	8bbb      	ldrh	r3, [r7, #28]
 8001e48:	3310      	adds	r3, #16
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	425a      	negs	r2, r3
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	f002 0207 	and.w	r2, r2, #7
 8001e58:	bf58      	it	pl
 8001e5a:	4253      	negpl	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e60:	8bfb      	ldrh	r3, [r7, #30]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	441a      	add	r2, r3
 8001e66:	8bbb      	ldrh	r3, [r7, #28]
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fbd2 	bl	8000614 <ExtractBits>
 8001e70:	4602      	mov	r2, r0
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	b291      	uxth	r1, r2
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	460a      	mov	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001e82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e86:	3310      	adds	r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da00      	bge.n	8001e8e <Init_Msg_extr+0x8be>
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	10db      	asrs	r3, r3, #3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	8bfb      	ldrh	r3, [r7, #30]
 8001e94:	4413      	add	r3, r2
 8001e96:	83fb      	strh	r3, [r7, #30]
 8001e98:	8bbb      	ldrh	r3, [r7, #28]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	425a      	negs	r2, r3
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	f002 0207 	and.w	r2, r2, #7
 8001eaa:	bf58      	it	pl
 8001eac:	4253      	negpl	r3, r2
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	78bc      	ldrb	r4, [r7, #2]
 8001eba:	8bbb      	ldrh	r3, [r7, #28]
 8001ebc:	2118      	movs	r1, #24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fba8 	bl	8000614 <ExtractBits>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	490f      	ldr	r1, [pc, #60]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ec8:	0123      	lsls	r3, r4, #4
 8001eca:	440b      	add	r3, r1
 8001ecc:	3308      	adds	r3, #8
 8001ece:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	78ba      	ldrb	r2, [r7, #2]
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	440b      	add	r3, r1
 8001eda:	3308      	adds	r3, #8
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <Init_Msg_extr+0x938>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4403      	add	r3, r0
 8001eea:	3308      	adds	r3, #8
 8001eec:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001eee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da09      	bge.n	8001f0c <Init_Msg_extr+0x93c>
 8001ef8:	3307      	adds	r3, #7
 8001efa:	e007      	b.n	8001f0c <Init_Msg_extr+0x93c>
 8001efc:	200010d8 	.word	0x200010d8
 8001f00:	20001264 	.word	0x20001264
 8001f04:	200011c4 	.word	0x200011c4
 8001f08:	20001674 	.word	0x20001674
 8001f0c:	10db      	asrs	r3, r3, #3
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	8bfb      	ldrh	r3, [r7, #30]
 8001f12:	4413      	add	r3, r2
 8001f14:	83fb      	strh	r3, [r7, #30]
 8001f16:	8bbb      	ldrh	r3, [r7, #28]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	425a      	negs	r2, r3
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	f002 0207 	and.w	r2, r2, #7
 8001f28:	bf58      	it	pl
 8001f2a:	4253      	negpl	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f30:	8bfb      	ldrh	r3, [r7, #30]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	8bbb      	ldrh	r3, [r7, #28]
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb6a 	bl	8000614 <ExtractBits>
 8001f40:	4602      	mov	r2, r0
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	b2d1      	uxtb	r1, r2
 8001f46:	4ab1      	ldr	r2, [pc, #708]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8001f50:	78ba      	ldrb	r2, [r7, #2]
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	49ad      	ldr	r1, [pc, #692]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	440a      	add	r2, r1
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4aab      	ldr	r2, [pc, #684]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	3302      	adds	r3, #2
 8001f64:	460a      	mov	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8001f68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da00      	bge.n	8001f74 <Init_Msg_extr+0x9a4>
 8001f72:	3307      	adds	r3, #7
 8001f74:	10db      	asrs	r3, r3, #3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	83fb      	strh	r3, [r7, #30]
 8001f7e:	8bbb      	ldrh	r3, [r7, #28]
 8001f80:	3308      	adds	r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	425a      	negs	r2, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	f002 0207 	and.w	r2, r2, #7
 8001f90:	bf58      	it	pl
 8001f92:	4253      	negpl	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f98:	8bfb      	ldrh	r3, [r7, #30]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb36 	bl	8000614 <ExtractBits>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	b2d1      	uxtb	r1, r2
 8001fae:	4a98      	ldr	r2, [pc, #608]	; (8002210 <Init_Msg_extr+0xc40>)
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	4413      	add	r3, r2
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 8001fba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da00      	bge.n	8001fc6 <Init_Msg_extr+0x9f6>
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	10db      	asrs	r3, r3, #3
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	4413      	add	r3, r2
 8001fce:	83fb      	strh	r3, [r7, #30]
 8001fd0:	8bbb      	ldrh	r3, [r7, #28]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	425a      	negs	r2, r3
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	f002 0207 	and.w	r2, r2, #7
 8001fe2:	bf58      	it	pl
 8001fe4:	4253      	negpl	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	441a      	add	r2, r3
 8001ff0:	8bbb      	ldrh	r3, [r7, #28]
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fb0d 	bl	8000614 <ExtractBits>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	b2d1      	uxtb	r1, r2
 8002000:	4a82      	ldr	r2, [pc, #520]	; (800220c <Init_Msg_extr+0xc3c>)
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	3303      	adds	r3, #3
 8002008:	460a      	mov	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 800200c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002010:	3308      	adds	r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	da00      	bge.n	8002018 <Init_Msg_extr+0xa48>
 8002016:	3307      	adds	r3, #7
 8002018:	10db      	asrs	r3, r3, #3
 800201a:	b29a      	uxth	r2, r3
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	4413      	add	r3, r2
 8002020:	83fb      	strh	r3, [r7, #30]
 8002022:	8bbb      	ldrh	r3, [r7, #28]
 8002024:	3308      	adds	r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21b      	sxth	r3, r3
 800202a:	425a      	negs	r2, r3
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	f002 0207 	and.w	r2, r2, #7
 8002034:	bf58      	it	pl
 8002036:	4253      	negpl	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	4a73      	ldr	r2, [pc, #460]	; (800220c <Init_Msg_extr+0xc3c>)
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	3303      	adds	r3, #3
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	78bb      	ldrb	r3, [r7, #2]
 800204a:	4972      	ldr	r1, [pc, #456]	; (8002214 <Init_Msg_extr+0xc44>)
 800204c:	440b      	add	r3, r1
 800204e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002052:	429a      	cmp	r2, r3
 8002054:	d015      	beq.n	8002082 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 8002056:	4870      	ldr	r0, [pc, #448]	; (8002218 <Init_Msg_extr+0xc48>)
 8002058:	f020 fb20 	bl	802269c <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	4a6d      	ldr	r2, [pc, #436]	; (8002214 <Init_Msg_extr+0xc44>)
 8002060:	4413      	add	r3, r2
 8002062:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002066:	4619      	mov	r1, r3
 8002068:	486c      	ldr	r0, [pc, #432]	; (800221c <Init_Msg_extr+0xc4c>)
 800206a:	f020 fa7b 	bl	8022564 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	4a66      	ldr	r2, [pc, #408]	; (800220c <Init_Msg_extr+0xc3c>)
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3303      	adds	r3, #3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4868      	ldr	r0, [pc, #416]	; (8002220 <Init_Msg_extr+0xc50>)
 800207e:	f020 fa71 	bl	8022564 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002082:	8bfb      	ldrh	r3, [r7, #30]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	441a      	add	r2, r3
 8002088:	8bbb      	ldrh	r3, [r7, #28]
 800208a:	2108      	movs	r1, #8
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fac1 	bl	8000614 <ExtractBits>
 8002092:	4602      	mov	r2, r0
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	b2d1      	uxtb	r1, r2
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <Init_Msg_extr+0xc40>)
 800209a:	015b      	lsls	r3, r3, #5
 800209c:	4413      	add	r3, r2
 800209e:	330b      	adds	r3, #11
 80020a0:	460a      	mov	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80020a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a8:	3308      	adds	r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da00      	bge.n	80020b0 <Init_Msg_extr+0xae0>
 80020ae:	3307      	adds	r3, #7
 80020b0:	10db      	asrs	r3, r3, #3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	8bfb      	ldrh	r3, [r7, #30]
 80020b6:	4413      	add	r3, r2
 80020b8:	83fb      	strh	r3, [r7, #30]
 80020ba:	8bbb      	ldrh	r3, [r7, #28]
 80020bc:	3308      	adds	r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	425a      	negs	r2, r3
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	f002 0207 	and.w	r2, r2, #7
 80020cc:	bf58      	it	pl
 80020ce:	4253      	negpl	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	8bbb      	ldrh	r3, [r7, #28]
 80020dc:	2108      	movs	r1, #8
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa98 	bl	8000614 <ExtractBits>
 80020e4:	4602      	mov	r2, r0
 80020e6:	78bb      	ldrb	r3, [r7, #2]
 80020e8:	b2d1      	uxtb	r1, r2
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <Init_Msg_extr+0xc40>)
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	4413      	add	r3, r2
 80020f0:	330c      	adds	r3, #12
 80020f2:	460a      	mov	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80020f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020fa:	3308      	adds	r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da00      	bge.n	8002102 <Init_Msg_extr+0xb32>
 8002100:	3307      	adds	r3, #7
 8002102:	10db      	asrs	r3, r3, #3
 8002104:	b29a      	uxth	r2, r3
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	4413      	add	r3, r2
 800210a:	83fb      	strh	r3, [r7, #30]
 800210c:	8bbb      	ldrh	r3, [r7, #28]
 800210e:	3308      	adds	r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	b21b      	sxth	r3, r3
 8002114:	425a      	negs	r2, r3
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	f002 0207 	and.w	r2, r2, #7
 800211e:	bf58      	it	pl
 8002120:	4253      	negpl	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 8002126:	78bb      	ldrb	r3, [r7, #2]
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <Init_Msg_extr+0xc40>)
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	4413      	add	r3, r2
 800212e:	330c      	adds	r3, #12
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00c      	beq.n	8002150 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	4a35      	ldr	r2, [pc, #212]	; (8002210 <Init_Msg_extr+0xc40>)
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	4413      	add	r3, r2
 800213e:	330c      	adds	r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4837      	ldr	r0, [pc, #220]	; (8002224 <Init_Msg_extr+0xc54>)
 8002146:	f020 fa0d 	bl	8022564 <iprintf>
		printf("This Value has to be \"1\"\n");
 800214a:	4837      	ldr	r0, [pc, #220]	; (8002228 <Init_Msg_extr+0xc58>)
 800214c:	f020 faa6 	bl	802269c <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	441a      	add	r2, r3
 8002156:	8bbb      	ldrh	r3, [r7, #28]
 8002158:	2108      	movs	r1, #8
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa5a 	bl	8000614 <ExtractBits>
 8002160:	4602      	mov	r2, r0
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	b2d1      	uxtb	r1, r2
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <Init_Msg_extr+0xc40>)
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	4413      	add	r3, r2
 800216c:	330d      	adds	r3, #13
 800216e:	460a      	mov	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002172:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002176:	3308      	adds	r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	da00      	bge.n	800217e <Init_Msg_extr+0xbae>
 800217c:	3307      	adds	r3, #7
 800217e:	10db      	asrs	r3, r3, #3
 8002180:	b29a      	uxth	r2, r3
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	4413      	add	r3, r2
 8002186:	83fb      	strh	r3, [r7, #30]
 8002188:	8bbb      	ldrh	r3, [r7, #28]
 800218a:	3308      	adds	r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b21b      	sxth	r3, r3
 8002190:	425a      	negs	r2, r3
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	f002 0207 	and.w	r2, r2, #7
 800219a:	bf58      	it	pl
 800219c:	4253      	negpl	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80021a2:	8bfb      	ldrh	r3, [r7, #30]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	441a      	add	r2, r3
 80021a8:	78bc      	ldrb	r4, [r7, #2]
 80021aa:	8bbb      	ldrh	r3, [r7, #28]
 80021ac:	2120      	movs	r1, #32
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fa30 	bl	8000614 <ExtractBits>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4916      	ldr	r1, [pc, #88]	; (8002210 <Init_Msg_extr+0xc40>)
 80021b8:	0163      	lsls	r3, r4, #5
 80021ba:	440b      	add	r3, r1
 80021bc:	331c      	adds	r3, #28
 80021be:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80021c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c4:	3320      	adds	r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da00      	bge.n	80021cc <Init_Msg_extr+0xbfc>
 80021ca:	3307      	adds	r3, #7
 80021cc:	10db      	asrs	r3, r3, #3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	4413      	add	r3, r2
 80021d4:	83fb      	strh	r3, [r7, #30]
 80021d6:	8bbb      	ldrh	r3, [r7, #28]
 80021d8:	3320      	adds	r3, #32
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b21b      	sxth	r3, r3
 80021de:	425a      	negs	r2, r3
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	f002 0207 	and.w	r2, r2, #7
 80021e8:	bf58      	it	pl
 80021ea:	4253      	negpl	r3, r2
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80021f0:	787a      	ldrb	r2, [r7, #1]
 80021f2:	78bb      	ldrb	r3, [r7, #2]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f86c 	bl	80022d4 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80021fc:	78ba      	ldrb	r2, [r7, #2]
 80021fe:	490b      	ldr	r1, [pc, #44]	; (800222c <Init_Msg_extr+0xc5c>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	e012      	b.n	8002230 <Init_Msg_extr+0xc60>
 800220a:	bf00      	nop
 800220c:	200011c4 	.word	0x200011c4
 8002210:	20001264 	.word	0x20001264
 8002214:	20000304 	.word	0x20000304
 8002218:	08024054 	.word	0x08024054
 800221c:	0802401c 	.word	0x0802401c
 8002220:	08024030 	.word	0x08024030
 8002224:	08024070 	.word	0x08024070
 8002228:	0802409c 	.word	0x0802409c
 800222c:	20001674 	.word	0x20001674
 8002230:	440b      	add	r3, r1
 8002232:	3314      	adds	r3, #20
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002238:	78ba      	ldrb	r2, [r7, #2]
 800223a:	4923      	ldr	r1, [pc, #140]	; (80022c8 <Init_Msg_extr+0xcf8>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3305      	adds	r3, #5
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800224c:	78ba      	ldrb	r2, [r7, #2]
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800225e:	78ba      	ldrb	r2, [r7, #2]
 8002260:	4919      	ldr	r1, [pc, #100]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3301      	adds	r3, #1
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002272:	2218      	movs	r2, #24
 8002274:	2100      	movs	r1, #0
 8002276:	4815      	ldr	r0, [pc, #84]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002278:	f020 f88c 	bl	8022394 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800227c:	78ba      	ldrb	r2, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002288:	4413      	add	r3, r2
 800228a:	2218      	movs	r2, #24
 800228c:	4619      	mov	r1, r3
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002290:	f020 f858 	bl	8022344 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002294:	f240 2002 	movw	r0, #514	; 0x202
 8002298:	f00d f8f4 	bl	800f484 <TransmitCanPkt>
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <Init_Msg_extr+0xcf8>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3301      	adds	r3, #1
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80022b0:	78bc      	ldrb	r4, [r7, #2]
 80022b2:	f013 f94d 	bl	8015550 <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <Init_Msg_extr+0xd00>)
 80022ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80022be:	e000      	b.n	80022c2 <Init_Msg_extr+0xcf2>
			return;
 80022c0:	bf00      	nop
}
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	20001674 	.word	0x20001674
 80022cc:	20001854 	.word	0x20001854
 80022d0:	20000e44 	.word	0x20000e44

080022d4 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b097      	sub	sp, #92	; 0x5c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	460a      	mov	r2, r1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f020 f84f 	bl	8022394 <memset>
	uint32_t Calc_CRC = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002300:	2300      	movs	r3, #0
 8002302:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	441a      	add	r2, r3
 8002310:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002314:	23f4      	movs	r3, #244	; 0xf4
 8002316:	2108      	movs	r1, #8
 8002318:	f7fe fa08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800231c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Send_Init_Msg+0x54>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002330:	4413      	add	r3, r2
 8002332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002336:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800233a:	3308      	adds	r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21b      	sxth	r3, r3
 8002340:	425a      	negs	r2, r3
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	f002 0207 	and.w	r2, r2, #7
 800234a:	bf58      	it	pl
 800234c:	4253      	negpl	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	441a      	add	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4977      	ldr	r1, [pc, #476]	; (8002540 <Send_Init_Msg+0x26c>)
 8002362:	3366      	adds	r3, #102	; 0x66
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800236e:	2110      	movs	r1, #16
 8002370:	f7fe f9dc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002374:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002378:	3310      	adds	r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	da00      	bge.n	8002380 <Send_Init_Msg+0xac>
 800237e:	3307      	adds	r3, #7
 8002380:	10db      	asrs	r3, r3, #3
 8002382:	b29a      	uxth	r2, r3
 8002384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002388:	4413      	add	r3, r2
 800238a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800238e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002392:	3310      	adds	r3, #16
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21b      	sxth	r3, r3
 8002398:	425a      	negs	r2, r3
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	f002 0207 	and.w	r2, r2, #7
 80023a2:	bf58      	it	pl
 80023a4:	4253      	negpl	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80023ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	441a      	add	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4961      	ldr	r1, [pc, #388]	; (8002540 <Send_Init_Msg+0x26c>)
 80023ba:	3370      	adds	r3, #112	; 0x70
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023c6:	2110      	movs	r1, #16
 80023c8:	f7fe f9b0 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80023cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80023d0:	3310      	adds	r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da00      	bge.n	80023d8 <Send_Init_Msg+0x104>
 80023d6:	3307      	adds	r3, #7
 80023d8:	10db      	asrs	r3, r3, #3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e0:	4413      	add	r3, r2
 80023e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023ea:	3310      	adds	r3, #16
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	425a      	negs	r2, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f002 0207 	and.w	r2, r2, #7
 80023fa:	bf58      	it	pl
 80023fc:	4253      	negpl	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <Send_Init_Msg+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d031      	beq.n	8002476 <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <Send_Init_Msg+0x270>)
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d137      	bne.n	800248c <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002422:	4849      	ldr	r0, [pc, #292]	; (8002548 <Send_Init_Msg+0x274>)
 8002424:	f017 fd46 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8002428:	4602      	mov	r2, r0
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <Send_Init_Msg+0x278>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	21c8      	movs	r1, #200	; 0xc8
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002442:	4843      	ldr	r0, [pc, #268]	; (8002550 <Send_Init_Msg+0x27c>)
 8002444:	f020 f92a 	bl	802269c <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002448:	2100      	movs	r1, #0
 800244a:	4842      	ldr	r0, [pc, #264]	; (8002554 <Send_Init_Msg+0x280>)
 800244c:	f020 f88a 	bl	8022564 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002450:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002454:	4619      	mov	r1, r3
 8002456:	4840      	ldr	r0, [pc, #256]	; (8002558 <Send_Init_Msg+0x284>)
 8002458:	f020 f884 	bl	8022564 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800245c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	441a      	add	r2, r3
 8002466:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800246a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800246e:	2108      	movs	r1, #8
 8002470:	f7fe f95c 	bl	800072c <InsertBits>
 8002474:	e00a      	b.n	800248c <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	441a      	add	r2, r3
 8002480:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002484:	2300      	movs	r3, #0
 8002486:	2108      	movs	r1, #8
 8002488:	f7fe f950 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 800248c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002490:	3308      	adds	r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	da00      	bge.n	8002498 <Send_Init_Msg+0x1c4>
 8002496:	3307      	adds	r3, #7
 8002498:	10db      	asrs	r3, r3, #3
 800249a:	b29a      	uxth	r2, r3
 800249c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a0:	4413      	add	r3, r2
 80024a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024aa:	3308      	adds	r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	425a      	negs	r2, r3
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	f002 0207 	and.w	r2, r2, #7
 80024ba:	bf58      	it	pl
 80024bc:	4253      	negpl	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <Send_Init_Msg+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <Send_Init_Msg+0x270>)
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	79fa      	ldrb	r2, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d165      	bne.n	80025a8 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80024e2:	4819      	ldr	r0, [pc, #100]	; (8002548 <Send_Init_Msg+0x274>)
 80024e4:	f017 fce6 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <Send_Init_Msg+0x278>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	21c8      	movs	r1, #200	; 0xc8
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 80024fe:	4817      	ldr	r0, [pc, #92]	; (800255c <Send_Init_Msg+0x288>)
 8002500:	f020 f8cc 	bl	802269c <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <Send_Init_Msg+0x28c>)
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	4814      	ldr	r0, [pc, #80]	; (8002564 <Send_Init_Msg+0x290>)
 8002514:	f020 f826 	bl	8022564 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002518:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800251c:	4619      	mov	r1, r3
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <Send_Init_Msg+0x294>)
 8002520:	f020 f820 	bl	8022564 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	441a      	add	r2, r3
 800252e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002532:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002536:	2108      	movs	r1, #8
 8002538:	f7fe f8f8 	bl	800072c <InsertBits>
 800253c:	e034      	b.n	80025a8 <Send_Init_Msg+0x2d4>
 800253e:	bf00      	nop
 8002540:	20000304 	.word	0x20000304
 8002544:	2000195c 	.word	0x2000195c
 8002548:	20009c7c 	.word	0x20009c7c
 800254c:	51eb851f 	.word	0x51eb851f
 8002550:	080240b8 	.word	0x080240b8
 8002554:	080240dc 	.word	0x080240dc
 8002558:	080240fc 	.word	0x080240fc
 800255c:	0802411c 	.word	0x0802411c
 8002560:	200011c4 	.word	0x200011c4
 8002564:	08024140 	.word	0x08024140
 8002568:	08024160 	.word	0x08024160

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 800256c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	18d1      	adds	r1, r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	48c4      	ldr	r0, [pc, #784]	; (800288c <Send_Init_Msg+0x5b8>)
 800257a:	011a      	lsls	r2, r3, #4
 800257c:	4402      	add	r2, r0
 800257e:	3202      	adds	r2, #2
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	3201      	adds	r2, #1
 8002584:	b2d4      	uxtb	r4, r2
 8002586:	48c1      	ldr	r0, [pc, #772]	; (800288c <Send_Init_Msg+0x5b8>)
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	4402      	add	r2, r0
 800258c:	3202      	adds	r2, #2
 800258e:	4620      	mov	r0, r4
 8002590:	7010      	strb	r0, [r2, #0]
 8002592:	4abe      	ldr	r2, [pc, #760]	; (800288c <Send_Init_Msg+0x5b8>)
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025a0:	460a      	mov	r2, r1
 80025a2:	2108      	movs	r1, #8
 80025a4:	f7fe f8c2 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80025a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025ac:	3308      	adds	r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da00      	bge.n	80025b4 <Send_Init_Msg+0x2e0>
 80025b2:	3307      	adds	r3, #7
 80025b4:	10db      	asrs	r3, r3, #3
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025bc:	4413      	add	r3, r2
 80025be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025c6:	3308      	adds	r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	425a      	negs	r2, r3
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	f002 0207 	and.w	r2, r2, #7
 80025d6:	bf58      	it	pl
 80025d8:	4253      	negpl	r3, r2
 80025da:	b21b      	sxth	r3, r3
 80025dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80025e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e4:	f107 020c 	add.w	r2, r7, #12
 80025e8:	441a      	add	r2, r3
 80025ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025ee:	2301      	movs	r3, #1
 80025f0:	2108      	movs	r1, #8
 80025f2:	f7fe f89b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80025f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025fa:	3308      	adds	r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da00      	bge.n	8002602 <Send_Init_Msg+0x32e>
 8002600:	3307      	adds	r3, #7
 8002602:	10db      	asrs	r3, r3, #3
 8002604:	b29a      	uxth	r2, r3
 8002606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260a:	4413      	add	r3, r2
 800260c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002614:	3308      	adds	r3, #8
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21b      	sxth	r3, r3
 800261a:	425a      	negs	r2, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	f002 0207 	and.w	r2, r2, #7
 8002624:	bf58      	it	pl
 8002626:	4253      	negpl	r3, r2
 8002628:	b21b      	sxth	r3, r3
 800262a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a96      	ldr	r2, [pc, #600]	; (800288c <Send_Init_Msg+0x5b8>)
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	3306      	adds	r3, #6
 8002638:	2205      	movs	r2, #5
 800263a:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 800263c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	441a      	add	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4990      	ldr	r1, [pc, #576]	; (800288c <Send_Init_Msg+0x5b8>)
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	3306      	adds	r3, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002656:	2110      	movs	r1, #16
 8002658:	f7fe f868 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800265c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002660:	3310      	adds	r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	da00      	bge.n	8002668 <Send_Init_Msg+0x394>
 8002666:	3307      	adds	r3, #7
 8002668:	10db      	asrs	r3, r3, #3
 800266a:	b29a      	uxth	r2, r3
 800266c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002670:	4413      	add	r3, r2
 8002672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800267a:	3310      	adds	r3, #16
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21b      	sxth	r3, r3
 8002680:	425a      	negs	r2, r3
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	f002 0207 	and.w	r2, r2, #7
 800268a:	bf58      	it	pl
 800268c:	4253      	negpl	r3, r2
 800268e:	b21b      	sxth	r3, r3
 8002690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	441a      	add	r2, r3
 800269e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026a2:	2317      	movs	r3, #23
 80026a4:	2108      	movs	r1, #8
 80026a6:	f7fe f841 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026ae:	3308      	adds	r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da00      	bge.n	80026b6 <Send_Init_Msg+0x3e2>
 80026b4:	3307      	adds	r3, #7
 80026b6:	10db      	asrs	r3, r3, #3
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026be:	4413      	add	r3, r2
 80026c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026c8:	3308      	adds	r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	425a      	negs	r2, r3
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	f002 0207 	and.w	r2, r2, #7
 80026d8:	bf58      	it	pl
 80026da:	4253      	negpl	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80026e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e6:	f107 020c 	add.w	r2, r7, #12
 80026ea:	441a      	add	r2, r3
 80026ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026f0:	2301      	movs	r3, #1
 80026f2:	2110      	movs	r1, #16
 80026f4:	f7fe f81a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80026f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026fc:	3310      	adds	r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da00      	bge.n	8002704 <Send_Init_Msg+0x430>
 8002702:	3307      	adds	r3, #7
 8002704:	10db      	asrs	r3, r3, #3
 8002706:	b29a      	uxth	r2, r3
 8002708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270c:	4413      	add	r3, r2
 800270e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002716:	3310      	adds	r3, #16
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	425a      	negs	r2, r3
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	f002 0207 	and.w	r2, r2, #7
 8002726:	bf58      	it	pl
 8002728:	4253      	negpl	r3, r2
 800272a:	b21b      	sxth	r3, r3
 800272c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002734:	f107 020c 	add.w	r2, r7, #12
 8002738:	441a      	add	r2, r3
 800273a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <Send_Init_Msg+0x5bc>)
 8002740:	2120      	movs	r1, #32
 8002742:	f7fd fff3 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002746:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800274a:	3320      	adds	r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	da00      	bge.n	8002752 <Send_Init_Msg+0x47e>
 8002750:	3307      	adds	r3, #7
 8002752:	10db      	asrs	r3, r3, #3
 8002754:	b29a      	uxth	r2, r3
 8002756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800275a:	4413      	add	r3, r2
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002760:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002764:	3320      	adds	r3, #32
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21b      	sxth	r3, r3
 800276a:	425a      	negs	r2, r3
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	f002 0207 	and.w	r2, r2, #7
 8002774:	bf58      	it	pl
 8002776:	4253      	negpl	r3, r2
 8002778:	b21b      	sxth	r3, r3
 800277a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 800277e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	441a      	add	r2, r3
 8002788:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800278c:	2300      	movs	r3, #0
 800278e:	2110      	movs	r1, #16
 8002790:	f7fd ffcc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002794:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002798:	3310      	adds	r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	da00      	bge.n	80027a0 <Send_Init_Msg+0x4cc>
 800279e:	3307      	adds	r3, #7
 80027a0:	10db      	asrs	r3, r3, #3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	4413      	add	r3, r2
 80027aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027b2:	3310      	adds	r3, #16
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	425a      	negs	r2, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	f002 0207 	and.w	r2, r2, #7
 80027c2:	bf58      	it	pl
 80027c4:	4253      	negpl	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80027cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	441a      	add	r2, r3
 80027d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027da:	2300      	movs	r3, #0
 80027dc:	2110      	movs	r1, #16
 80027de:	f7fd ffa5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e6:	3310      	adds	r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <Send_Init_Msg+0x51a>
 80027ec:	3307      	adds	r3, #7
 80027ee:	10db      	asrs	r3, r3, #3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f6:	4413      	add	r3, r2
 80027f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002800:	3310      	adds	r3, #16
 8002802:	b29b      	uxth	r3, r3
 8002804:	b21b      	sxth	r3, r3
 8002806:	425a      	negs	r2, r3
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	f002 0207 	and.w	r2, r2, #7
 8002810:	bf58      	it	pl
 8002812:	4253      	negpl	r3, r2
 8002814:	b21b      	sxth	r3, r3
 8002816:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 800281a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281e:	f107 020c 	add.w	r2, r7, #12
 8002822:	441a      	add	r2, r3
 8002824:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002828:	2300      	movs	r3, #0
 800282a:	2110      	movs	r1, #16
 800282c:	f7fd ff7e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002830:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002834:	3310      	adds	r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	da00      	bge.n	800283c <Send_Init_Msg+0x568>
 800283a:	3307      	adds	r3, #7
 800283c:	10db      	asrs	r3, r3, #3
 800283e:	b29a      	uxth	r2, r3
 8002840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002844:	4413      	add	r3, r2
 8002846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800284a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800284e:	3310      	adds	r3, #16
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21b      	sxth	r3, r3
 8002854:	425a      	negs	r2, r3
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	f002 0207 	and.w	r2, r2, #7
 800285e:	bf58      	it	pl
 8002860:	4253      	negpl	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	441a      	add	r2, r3
 8002872:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002876:	2300      	movs	r3, #0
 8002878:	2110      	movs	r1, #16
 800287a:	f7fd ff57 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800287e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002882:	3310      	adds	r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	da05      	bge.n	8002894 <Send_Init_Msg+0x5c0>
 8002888:	3307      	adds	r3, #7
 800288a:	e003      	b.n	8002894 <Send_Init_Msg+0x5c0>
 800288c:	200011c4 	.word	0x200011c4
 8002890:	33e232af 	.word	0x33e232af
 8002894:	10db      	asrs	r3, r3, #3
 8002896:	b29a      	uxth	r2, r3
 8002898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800289c:	4413      	add	r3, r2
 800289e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028a6:	3310      	adds	r3, #16
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	425a      	negs	r2, r3
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	f002 0207 	and.w	r2, r2, #7
 80028b6:	bf58      	it	pl
 80028b8:	4253      	negpl	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4ab2      	ldr	r2, [pc, #712]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	3308      	adds	r3, #8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4ab0      	ldr	r2, [pc, #704]	; (8002b90 <Send_Init_Msg+0x8bc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d90d      	bls.n	80028ee <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4aad      	ldr	r2, [pc, #692]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	3308      	adds	r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	3a01      	subs	r2, #1
 80028e2:	49aa      	ldr	r1, [pc, #680]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	330c      	adds	r3, #12
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e00c      	b.n	8002908 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4aa6      	ldr	r2, [pc, #664]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	3308      	adds	r3, #8
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	3201      	adds	r2, #1
 80028fe:	49a3      	ldr	r1, [pc, #652]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	330c      	adds	r3, #12
 8002906:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8002908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	441a      	add	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	499d      	ldr	r1, [pc, #628]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	440b      	add	r3, r1
 800291a:	330c      	adds	r3, #12
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002922:	2118      	movs	r1, #24
 8002924:	f7fd ff02 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	4997      	ldr	r1, [pc, #604]	; (8002b8c <Send_Init_Msg+0x8b8>)
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	330c      	adds	r3, #12
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	4897      	ldr	r0, [pc, #604]	; (8002b94 <Send_Init_Msg+0x8c0>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4403      	add	r3, r0
 8002942:	330c      	adds	r3, #12
 8002944:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8002946:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800294a:	3318      	adds	r3, #24
 800294c:	2b00      	cmp	r3, #0
 800294e:	da00      	bge.n	8002952 <Send_Init_Msg+0x67e>
 8002950:	3307      	adds	r3, #7
 8002952:	10db      	asrs	r3, r3, #3
 8002954:	b29a      	uxth	r2, r3
 8002956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800295a:	4413      	add	r3, r2
 800295c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002960:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002964:	3318      	adds	r3, #24
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21b      	sxth	r3, r3
 800296a:	425a      	negs	r2, r3
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	f002 0207 	and.w	r2, r2, #7
 8002974:	bf58      	it	pl
 8002976:	4253      	negpl	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4a85      	ldr	r2, [pc, #532]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002982:	5cd2      	ldrb	r2, [r2, r3]
 8002984:	3201      	adds	r2, #1
 8002986:	b2d1      	uxtb	r1, r2
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800298a:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a82      	ldr	r2, [pc, #520]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	2bb3      	cmp	r3, #179	; 0xb3
 8002994:	d804      	bhi.n	80029a0 <Send_Init_Msg+0x6cc>
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4a7d      	ldr	r2, [pc, #500]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029a4:	210a      	movs	r1, #10
 80029a6:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80029a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	441a      	add	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4978      	ldr	r1, [pc, #480]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80029bc:	2108      	movs	r1, #8
 80029be:	f7fd feb5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80029c2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80029c6:	3308      	adds	r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da00      	bge.n	80029ce <Send_Init_Msg+0x6fa>
 80029cc:	3307      	adds	r3, #7
 80029ce:	10db      	asrs	r3, r3, #3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d6:	4413      	add	r3, r2
 80029d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029e0:	3308      	adds	r3, #8
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	425a      	negs	r2, r3
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	f002 0207 	and.w	r2, r2, #7
 80029f0:	bf58      	it	pl
 80029f2:	4253      	negpl	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	f107 020c 	add.w	r2, r7, #12
 8002a02:	441a      	add	r2, r3
 8002a04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	f7fd fe8e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a14:	3308      	adds	r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da00      	bge.n	8002a1c <Send_Init_Msg+0x748>
 8002a1a:	3307      	adds	r3, #7
 8002a1c:	10db      	asrs	r3, r3, #3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a24:	4413      	add	r3, r2
 8002a26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	3308      	adds	r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	425a      	negs	r2, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	f002 0207 	and.w	r2, r2, #7
 8002a3e:	bf58      	it	pl
 8002a40:	4253      	negpl	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	441a      	add	r2, r3
 8002a52:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a56:	2301      	movs	r3, #1
 8002a58:	2108      	movs	r1, #8
 8002a5a:	f7fd fe67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a62:	3308      	adds	r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da00      	bge.n	8002a6a <Send_Init_Msg+0x796>
 8002a68:	3307      	adds	r3, #7
 8002a6a:	10db      	asrs	r3, r3, #3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a72:	4413      	add	r3, r2
 8002a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	425a      	negs	r2, r3
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	f002 0207 	and.w	r2, r2, #7
 8002a8c:	bf58      	it	pl
 8002a8e:	4253      	negpl	r3, r2
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9a:	f107 020c 	add.w	r2, r7, #12
 8002a9e:	441a      	add	r2, r3
 8002aa0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	f7fd fe40 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002aac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da00      	bge.n	8002ab8 <Send_Init_Msg+0x7e4>
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	10db      	asrs	r3, r3, #3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002aca:	3308      	adds	r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	425a      	negs	r2, r3
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	f002 0207 	and.w	r2, r2, #7
 8002ada:	bf58      	it	pl
 8002adc:	4253      	negpl	r3, r2
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d060      	beq.n	8002bb4 <Send_Init_Msg+0x8e0>
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d15b      	bne.n	8002bb4 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002afc:	230c      	movs	r3, #12
 8002afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002b02:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <Send_Init_Msg+0x8cc>)
 8002b04:	f017 f9d6 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <Send_Init_Msg+0x8d0>)
 8002b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	4613      	mov	r3, r2
 8002b14:	015b      	lsls	r3, r3, #5
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1aca      	subs	r2, r1, r3
 8002b1e:	b2d3      	uxtb	r3, r2
 8002b20:	3301      	adds	r3, #1
 8002b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <Send_Init_Msg+0x8d4>)
 8002b28:	f01f fdb8 	bl	802269c <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3303      	adds	r3, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481c      	ldr	r0, [pc, #112]	; (8002bac <Send_Init_Msg+0x8d8>)
 8002b3c:	f01f fd12 	bl	8022564 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d108      	bne.n	8002b66 <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3b02      	subs	r3, #2
 8002b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <Send_Init_Msg+0x8dc>)
 8002b6e:	f01f fcf9 	bl	8022564 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	441a      	add	r2, r3
 8002b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b80:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b84:	2108      	movs	r1, #8
 8002b86:	f7fd fdd1 	bl	800072c <InsertBits>
	{
 8002b8a:	e022      	b.n	8002bd2 <Send_Init_Msg+0x8fe>
 8002b8c:	200011c4 	.word	0x200011c4
 8002b90:	00ffffef 	.word	0x00ffffef
 8002b94:	20001674 	.word	0x20001674
 8002b98:	2000010c 	.word	0x2000010c
 8002b9c:	2000195c 	.word	0x2000195c
 8002ba0:	20009c7c 	.word	0x20009c7c
 8002ba4:	10624dd3 	.word	0x10624dd3
 8002ba8:	08024180 	.word	0x08024180
 8002bac:	080241b0 	.word	0x080241b0
 8002bb0:	080241cc 	.word	0x080241cc
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb8:	f107 020c 	add.w	r2, r7, #12
 8002bbc:	441a      	add	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	494e      	ldr	r1, [pc, #312]	; (8002cfc <Send_Init_Msg+0xa28>)
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002bc8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002bcc:	2108      	movs	r1, #8
 8002bce:	f7fd fdad 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002bd2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da00      	bge.n	8002bde <Send_Init_Msg+0x90a>
 8002bdc:	3307      	adds	r3, #7
 8002bde:	10db      	asrs	r3, r3, #3
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002be6:	4413      	add	r3, r2
 8002be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	f002 0207 	and.w	r2, r2, #7
 8002c00:	bf58      	it	pl
 8002c02:	4253      	negpl	r3, r2
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	441a      	add	r2, r3
 8002c14:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	f7fd fd86 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002c20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c24:	3308      	adds	r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da00      	bge.n	8002c2c <Send_Init_Msg+0x958>
 8002c2a:	3307      	adds	r3, #7
 8002c2c:	10db      	asrs	r3, r3, #3
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c34:	4413      	add	r3, r2
 8002c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	3308      	adds	r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	425a      	negs	r2, r3
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	f002 0207 	and.w	r2, r2, #7
 8002c4e:	bf58      	it	pl
 8002c50:	4253      	negpl	r3, r2
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002c58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f010 f89c 	bl	8012da0 <CalculateDirectReverseCrc>
 8002c68:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	441a      	add	r2, r3
 8002c74:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	f7fd fd56 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002c80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c84:	3320      	adds	r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da00      	bge.n	8002c8c <Send_Init_Msg+0x9b8>
 8002c8a:	3307      	adds	r3, #7
 8002c8c:	10db      	asrs	r3, r3, #3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c94:	4413      	add	r3, r2
 8002c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	425a      	negs	r2, r3
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	f002 0207 	and.w	r2, r2, #7
 8002cae:	bf58      	it	pl
 8002cb0:	4253      	negpl	r3, r2
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <Send_Init_Msg+0xa0a>
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	79fa      	ldrb	r2, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <Send_Init_Msg+0xa30>)
 8002cd2:	f01f fce3 	bl	802269c <puts>
		printf("Not Sending Reply");
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <Send_Init_Msg+0xa34>)
 8002cd8:	f01f fc44 	bl	8022564 <iprintf>
 8002cdc:	e009      	b.n	8002cf2 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 fc40 	bl	8007570 <Process_Sending_Reply>
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	375c      	adds	r7, #92	; 0x5c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	2000195c 	.word	0x2000195c
 8002d04:	080241e8 	.word	0x080241e8
 8002d08:	08024200 	.word	0x08024200

08002d0c <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b099      	sub	sp, #100	; 0x64
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	70fb      	strb	r3, [r7, #3]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70bb      	strb	r3, [r7, #2]
 8002d22:	4613      	mov	r3, r2
 8002d24:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint32_t Calc_CRC = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Recv_CRC = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t Ticks = HAL_GetTick();
 8002d34:	f012 fc0c 	bl	8015550 <HAL_GetTick>
 8002d38:	64b8      	str	r0, [r7, #72]	; 0x48
	uint8_t noofIP = 0, uc_index = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t LinkEstablishFlag = CLEAR;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t Temp_Vital_Data_Buff[60] = {0,};
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2238      	movs	r2, #56	; 0x38
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f01f fb1b 	bl	8022394 <memset>
	BITSTUFFINIT(0, 0);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002d6a:	49a1      	ldr	r1, [pc, #644]	; (8002ff0 <Vital_Msg_extr+0x2e4>)
 8002d6c:	48a1      	ldr	r0, [pc, #644]	; (8002ff4 <Vital_Msg_extr+0x2e8>)
 8002d6e:	f7fd fa67 	bl	8000240 <strcmp>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8138 	beq.w	8002fea <Vital_Msg_extr+0x2de>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d7a:	4b9f      	ldr	r3, [pc, #636]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02d      	beq.n	8002de2 <Vital_Msg_extr+0xd6>
 8002d86:	4b9c      	ldr	r3, [pc, #624]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	78ba      	ldrb	r2, [r7, #2]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d128      	bne.n	8002de2 <Vital_Msg_extr+0xd6>
	{
		uint32_t Rand_Number = 22;
 8002d90:	2316      	movs	r3, #22
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002d94:	4899      	ldr	r0, [pc, #612]	; (8002ffc <Vital_Msg_extr+0x2f0>)
 8002d96:	f017 f88d 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b98      	ldr	r3, [pc, #608]	; (8003000 <Vital_Msg_extr+0x2f4>)
 8002d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002da2:	0dd9      	lsrs	r1, r3, #23
 8002da4:	460b      	mov	r3, r1
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	1a5b      	subs	r3, r3, r1
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002db0:	4894      	ldr	r0, [pc, #592]	; (8003004 <Vital_Msg_extr+0x2f8>)
 8002db2:	f01f fc73 	bl	802269c <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002db6:	78bb      	ldrb	r3, [r7, #2]
 8002db8:	4a93      	ldr	r2, [pc, #588]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4891      	ldr	r0, [pc, #580]	; (800300c <Vital_Msg_extr+0x300>)
 8002dc6:	f01f fbcd 	bl	8022564 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dcc:	4890      	ldr	r0, [pc, #576]	; (8003010 <Vital_Msg_extr+0x304>)
 8002dce:	f01f fbc9 	bl	8022564 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002dd2:	f107 0208 	add.w	r2, r7, #8
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd8:	2118      	movs	r1, #24
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fca6 	bl	800072c <InsertBits>
	{
 8002de0:	e00b      	b.n	8002dfa <Vital_Msg_extr+0xee>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002de2:	78bb      	ldrb	r3, [r7, #2]
 8002de4:	4a88      	ldr	r2, [pc, #544]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	3308      	adds	r3, #8
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f107 0208 	add.w	r2, r7, #8
 8002df2:	2118      	movs	r1, #24
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fd fc99 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e00:	e010      	b.n	8002e24 <Vital_Msg_extr+0x118>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002e02:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	441a      	add	r2, r3
 8002e0a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e0e:	3303      	adds	r3, #3
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	443b      	add	r3, r7
 8002e16:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e1a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e24:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	3b05      	subs	r3, #5
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	dbe8      	blt.n	8002e02 <Vital_Msg_extr+0xf6>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002e30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3303      	adds	r3, #3
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f00f ffad 	bl	8012da0 <CalculateDirectReverseCrc>
 8002e46:	64f8      	str	r0, [r7, #76]	; 0x4c
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	3b05      	subs	r3, #5
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	441a      	add	r2, r3
 8002e50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e54:	2120      	movs	r1, #32
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fbdc 	bl	8000614 <ExtractBits>
 8002e5c:	65b8      	str	r0, [r7, #88]	; 0x58

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e62:	429a      	cmp	r2, r3
 8002e64:	f000 80ec 	beq.w	8003040 <Vital_Msg_extr+0x334>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3305      	adds	r3, #5
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2108      	movs	r1, #8
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fbcf 	bl	8000614 <ExtractBits>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <Vital_Msg_extr+0x186>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3305      	adds	r3, #5
 8002e80:	461a      	mov	r2, r3
 8002e82:	2108      	movs	r1, #8
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fd fbc5 	bl	8000614 <ExtractBits>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 8098 	bne.w	8002fc2 <Vital_Msg_extr+0x2b6>
		{
			printf("Tx seq Roll over Detected\n");
 8002e92:	4860      	ldr	r0, [pc, #384]	; (8003014 <Vital_Msg_extr+0x308>)
 8002e94:	f01f fc02 	bl	802269c <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	223c      	movs	r2, #60	; 0x3c
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f01f fa77 	bl	8022394 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002ea6:	78bb      	ldrb	r3, [r7, #2]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	3308      	adds	r3, #8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f107 0208 	add.w	r2, r7, #8
 8002eb8:	2118      	movs	r1, #24
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fc36 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002ec6:	e010      	b.n	8002eea <Vital_Msg_extr+0x1de>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002ec8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	441a      	add	r2, r3
 8002ed0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	443b      	add	r3, r7
 8002edc:	f803 2c58 	strb.w	r2, [r3, #-88]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ee0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002eea:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	3b05      	subs	r3, #5
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbe8      	blt.n	8002ec8 <Vital_Msg_extr+0x1bc>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002ef6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3303      	adds	r3, #3
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	f107 0308 	add.w	r3, r7, #8
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00f ff4a 	bl	8012da0 <CalculateDirectReverseCrc>
 8002f0c:	64f8      	str	r0, [r7, #76]	; 0x4c
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	3b05      	subs	r3, #5
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	441a      	add	r2, r3
 8002f16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb79 	bl	8000614 <ExtractBits>
 8002f22:	65b8      	str	r0, [r7, #88]	; 0x58

			if(Calc_CRC == Recv_CRC)
 8002f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d136      	bne.n	8002f9a <Vital_Msg_extr+0x28e>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8002f2c:	483a      	ldr	r0, [pc, #232]	; (8003018 <Vital_Msg_extr+0x30c>)
 8002f2e:	f01f fbb5 	bl	802269c <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8002f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f34:	4839      	ldr	r0, [pc, #228]	; (800301c <Vital_Msg_extr+0x310>)
 8002f36:	f01f fb15 	bl	8022564 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f3a:	78bb      	ldrb	r3, [r7, #2]
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4413      	add	r3, r2
 8002f42:	3308      	adds	r3, #8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4835      	ldr	r0, [pc, #212]	; (8003020 <Vital_Msg_extr+0x314>)
 8002f4a:	f01f fb0b 	bl	8022564 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f4e:	78bb      	ldrb	r3, [r7, #2]
 8002f50:	492d      	ldr	r1, [pc, #180]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f52:	011a      	lsls	r2, r3, #4
 8002f54:	440a      	add	r2, r1
 8002f56:	3208      	adds	r2, #8
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	492a      	ldr	r1, [pc, #168]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	440b      	add	r3, r1
 8002f62:	3308      	adds	r3, #8
 8002f64:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3308      	adds	r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	482b      	ldr	r0, [pc, #172]	; (8003024 <Vital_Msg_extr+0x318>)
 8002f76:	f01f faf5 	bl	8022564 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f7a:	78bb      	ldrb	r3, [r7, #2]
 8002f7c:	78ba      	ldrb	r2, [r7, #2]
 8002f7e:	4922      	ldr	r1, [pc, #136]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	440b      	add	r3, r1
 8002f84:	3308      	adds	r3, #8
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	4827      	ldr	r0, [pc, #156]	; (8003028 <Vital_Msg_extr+0x31c>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4403      	add	r3, r0
 8002f94:	3308      	adds	r3, #8
 8002f96:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 8002f98:	e053      	b.n	8003042 <Vital_Msg_extr+0x336>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002f9a:	78bb      	ldrb	r3, [r7, #2]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <Vital_Msg_extr+0x320>)
 8002f9e:	3366      	adds	r3, #102	; 0x66
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4821      	ldr	r0, [pc, #132]	; (8003030 <Vital_Msg_extr+0x324>)
 8002faa:	f01f fadb 	bl	8022564 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fb0:	4820      	ldr	r0, [pc, #128]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fb2:	f01f fad7 	bl	8022564 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fb8:	481f      	ldr	r0, [pc, #124]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fba:	f01f fad3 	bl	8022564 <iprintf>
				return;
 8002fbe:	f000 bea2 	b.w	8003d06 <Vital_Msg_extr+0xffa>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fc2:	78bb      	ldrb	r3, [r7, #2]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <Vital_Msg_extr+0x320>)
 8002fc6:	3366      	adds	r3, #102	; 0x66
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481a      	ldr	r0, [pc, #104]	; (800303c <Vital_Msg_extr+0x330>)
 8002fd2:	f01f fac7 	bl	8022564 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fd8:	4816      	ldr	r0, [pc, #88]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fda:	f01f fac3 	bl	8022564 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fde:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fe2:	f01f fabf 	bl	8022564 <iprintf>
			return;
 8002fe6:	f000 be8e 	b.w	8003d06 <Vital_Msg_extr+0xffa>
		goto ROLLOVER_VITAL;
 8002fea:	bf00      	nop
 8002fec:	e029      	b.n	8003042 <Vital_Msg_extr+0x336>
 8002fee:	bf00      	nop
 8002ff0:	08023d10 	.word	0x08023d10
 8002ff4:	20000305 	.word	0x20000305
 8002ff8:	2000195c 	.word	0x2000195c
 8002ffc:	20009c7c 	.word	0x20009c7c
 8003000:	80008001 	.word	0x80008001
 8003004:	08024214 	.word	0x08024214
 8003008:	200011c4 	.word	0x200011c4
 800300c:	08024234 	.word	0x08024234
 8003010:	0802425c 	.word	0x0802425c
 8003014:	08024284 	.word	0x08024284
 8003018:	080242a0 	.word	0x080242a0
 800301c:	080242b8 	.word	0x080242b8
 8003020:	080242d8 	.word	0x080242d8
 8003024:	080242f8 	.word	0x080242f8
 8003028:	20001674 	.word	0x20001674
 800302c:	20000304 	.word	0x20000304
 8003030:	08024324 	.word	0x08024324
 8003034:	08023f54 	.word	0x08023f54
 8003038:	08023f64 	.word	0x08023f64
 800303c:	08024344 	.word	0x08024344
		}
	}

	ROLLOVER_VITAL:
 8003040:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003042:	78bb      	ldrb	r3, [r7, #2]
 8003044:	49c3      	ldr	r1, [pc, #780]	; (8003354 <Vital_Msg_extr+0x648>)
 8003046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	49c2      	ldr	r1, [pc, #776]	; (8003358 <Vital_Msg_extr+0x64c>)
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 8003056:	78bb      	ldrb	r3, [r7, #2]
 8003058:	4ac0      	ldr	r2, [pc, #768]	; (800335c <Vital_Msg_extr+0x650>)
 800305a:	2101      	movs	r1, #1
 800305c:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 800305e:	78ba      	ldrb	r2, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4abd      	ldr	r2, [pc, #756]	; (8003360 <Vital_Msg_extr+0x654>)
 800306a:	4413      	add	r3, r2
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f01f f98f 	bl	8022394 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 8003076:	78ba      	ldrb	r2, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4ab7      	ldr	r2, [pc, #732]	; (8003360 <Vital_Msg_extr+0x654>)
 8003082:	4413      	add	r3, r2
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f01f f95b 	bl	8022344 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 800308e:	78ba      	ldrb	r2, [r7, #2]
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	b298      	uxth	r0, r3
 8003094:	49b2      	ldr	r1, [pc, #712]	; (8003360 <Vital_Msg_extr+0x654>)
 8003096:	4613      	mov	r3, r2
 8003098:	015b      	lsls	r3, r3, #5
 800309a:	4413      	add	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	440b      	add	r3, r1
 80030a0:	3340      	adds	r3, #64	; 0x40
 80030a2:	4602      	mov	r2, r0
 80030a4:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80030a6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80030aa:	3308      	adds	r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <Vital_Msg_extr+0x3a6>
 80030b0:	3307      	adds	r3, #7
 80030b2:	10db      	asrs	r3, r3, #3
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030ba:	4413      	add	r3, r2
 80030bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80030c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030c4:	3308      	adds	r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	425a      	negs	r2, r3
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	f002 0207 	and.w	r2, r2, #7
 80030d4:	bf58      	it	pl
 80030d6:	4253      	negpl	r3, r2
 80030d8:	b21b      	sxth	r3, r3
 80030da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80030de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	441a      	add	r2, r3
 80030e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030ea:	2110      	movs	r1, #16
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa91 	bl	8000614 <ExtractBits>
 80030f2:	4603      	mov	r3, r0
 80030f4:	78ba      	ldrb	r2, [r7, #2]
 80030f6:	b298      	uxth	r0, r3
 80030f8:	499a      	ldr	r1, [pc, #616]	; (8003364 <Vital_Msg_extr+0x658>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	440b      	add	r3, r1
 8003104:	3328      	adds	r3, #40	; 0x28
 8003106:	4602      	mov	r2, r0
 8003108:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800310a:	78ba      	ldrb	r2, [r7, #2]
 800310c:	4995      	ldr	r1, [pc, #596]	; (8003364 <Vital_Msg_extr+0x658>)
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	440b      	add	r3, r1
 8003118:	3328      	adds	r3, #40	; 0x28
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4892      	ldr	r0, [pc, #584]	; (8003368 <Vital_Msg_extr+0x65c>)
 8003120:	f01f fa20 	bl	8022564 <iprintf>
	BITSTUFFINC(16);
 8003124:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003128:	3310      	adds	r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	da00      	bge.n	8003130 <Vital_Msg_extr+0x424>
 800312e:	3307      	adds	r3, #7
 8003130:	10db      	asrs	r3, r3, #3
 8003132:	b29a      	uxth	r2, r3
 8003134:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003138:	4413      	add	r3, r2
 800313a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800313e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003142:	3310      	adds	r3, #16
 8003144:	b29b      	uxth	r3, r3
 8003146:	b21b      	sxth	r3, r3
 8003148:	425a      	negs	r2, r3
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	f002 0207 	and.w	r2, r2, #7
 8003152:	bf58      	it	pl
 8003154:	4253      	negpl	r3, r2
 8003156:	b21b      	sxth	r3, r3
 8003158:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800315c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	441a      	add	r2, r3
 8003164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003168:	2110      	movs	r1, #16
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fa52 	bl	8000614 <ExtractBits>
 8003170:	4603      	mov	r3, r0
 8003172:	78ba      	ldrb	r2, [r7, #2]
 8003174:	b298      	uxth	r0, r3
 8003176:	497b      	ldr	r1, [pc, #492]	; (8003364 <Vital_Msg_extr+0x658>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	440b      	add	r3, r1
 8003182:	3326      	adds	r3, #38	; 0x26
 8003184:	4602      	mov	r2, r0
 8003186:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 8003188:	78ba      	ldrb	r2, [r7, #2]
 800318a:	4976      	ldr	r1, [pc, #472]	; (8003364 <Vital_Msg_extr+0x658>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	440b      	add	r3, r1
 8003196:	3326      	adds	r3, #38	; 0x26
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4873      	ldr	r0, [pc, #460]	; (800336c <Vital_Msg_extr+0x660>)
 800319e:	f01f f9e1 	bl	8022564 <iprintf>
	BITSTUFFINC(16);
 80031a2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80031a6:	3310      	adds	r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da00      	bge.n	80031ae <Vital_Msg_extr+0x4a2>
 80031ac:	3307      	adds	r3, #7
 80031ae:	10db      	asrs	r3, r3, #3
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031b6:	4413      	add	r3, r2
 80031b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031c0:	3310      	adds	r3, #16
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	425a      	negs	r2, r3
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	f002 0207 	and.w	r2, r2, #7
 80031d0:	bf58      	it	pl
 80031d2:	4253      	negpl	r3, r2
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80031da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	441a      	add	r2, r3
 80031e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031e6:	2108      	movs	r1, #8
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd fa13 	bl	8000614 <ExtractBits>
 80031ee:	4602      	mov	r2, r0
 80031f0:	78bb      	ldrb	r3, [r7, #2]
 80031f2:	b2d1      	uxtb	r1, r2
 80031f4:	4a5e      	ldr	r2, [pc, #376]	; (8003370 <Vital_Msg_extr+0x664>)
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	4413      	add	r3, r2
 80031fa:	3302      	adds	r3, #2
 80031fc:	460a      	mov	r2, r1
 80031fe:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003200:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003204:	3308      	adds	r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	da00      	bge.n	800320c <Vital_Msg_extr+0x500>
 800320a:	3307      	adds	r3, #7
 800320c:	10db      	asrs	r3, r3, #3
 800320e:	b29a      	uxth	r2, r3
 8003210:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003214:	4413      	add	r3, r2
 8003216:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800321a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800321e:	3308      	adds	r3, #8
 8003220:	b29b      	uxth	r3, r3
 8003222:	b21b      	sxth	r3, r3
 8003224:	425a      	negs	r2, r3
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	f002 0207 	and.w	r2, r2, #7
 800322e:	bf58      	it	pl
 8003230:	4253      	negpl	r3, r2
 8003232:	b21b      	sxth	r3, r3
 8003234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003238:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003244:	2108      	movs	r1, #8
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f9e4 	bl	8000614 <ExtractBits>
 800324c:	4602      	mov	r2, r0
 800324e:	78bb      	ldrb	r3, [r7, #2]
 8003250:	b2d1      	uxtb	r1, r2
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <Vital_Msg_extr+0x664>)
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	3301      	adds	r3, #1
 800325a:	460a      	mov	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800325e:	78bb      	ldrb	r3, [r7, #2]
 8003260:	4a43      	ldr	r2, [pc, #268]	; (8003370 <Vital_Msg_extr+0x664>)
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	3301      	adds	r3, #1
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d138      	bne.n	80032e0 <Vital_Msg_extr+0x5d4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800326e:	78bb      	ldrb	r3, [r7, #2]
 8003270:	4a40      	ldr	r2, [pc, #256]	; (8003374 <Vital_Msg_extr+0x668>)
 8003272:	3366      	adds	r3, #102	; 0x66
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4619      	mov	r1, r3
 800327c:	483e      	ldr	r0, [pc, #248]	; (8003378 <Vital_Msg_extr+0x66c>)
 800327e:	f01f f971 	bl	8022564 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003282:	78bb      	ldrb	r3, [r7, #2]
 8003284:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <Vital_Msg_extr+0x664>)
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	330c      	adds	r3, #12
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	483a      	ldr	r0, [pc, #232]	; (800337c <Vital_Msg_extr+0x670>)
 8003292:	f01f f967 	bl	8022564 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8003296:	78bb      	ldrb	r3, [r7, #2]
 8003298:	4935      	ldr	r1, [pc, #212]	; (8003370 <Vital_Msg_extr+0x664>)
 800329a:	011a      	lsls	r2, r3, #4
 800329c:	440a      	add	r2, r1
 800329e:	320c      	adds	r2, #12
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	3201      	adds	r2, #1
 80032a4:	4932      	ldr	r1, [pc, #200]	; (8003370 <Vital_Msg_extr+0x664>)
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	440b      	add	r3, r1
 80032aa:	330c      	adds	r3, #12
 80032ac:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <Vital_Msg_extr+0x664>)
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	330c      	adds	r3, #12
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4830      	ldr	r0, [pc, #192]	; (8003380 <Vital_Msg_extr+0x674>)
 80032be:	f01f f951 	bl	8022564 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	78ba      	ldrb	r2, [r7, #2]
 80032c6:	492a      	ldr	r1, [pc, #168]	; (8003370 <Vital_Msg_extr+0x664>)
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	440b      	add	r3, r1
 80032cc:	330c      	adds	r3, #12
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	482c      	ldr	r0, [pc, #176]	; (8003384 <Vital_Msg_extr+0x678>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4403      	add	r3, r0
 80032dc:	330c      	adds	r3, #12
 80032de:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80032e0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80032e4:	3308      	adds	r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da00      	bge.n	80032ec <Vital_Msg_extr+0x5e0>
 80032ea:	3307      	adds	r3, #7
 80032ec:	10db      	asrs	r3, r3, #3
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032f4:	4413      	add	r3, r2
 80032f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80032fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032fe:	3308      	adds	r3, #8
 8003300:	b29b      	uxth	r3, r3
 8003302:	b21b      	sxth	r3, r3
 8003304:	425a      	negs	r2, r3
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	f002 0207 	and.w	r2, r2, #7
 800330e:	bf58      	it	pl
 8003310:	4253      	negpl	r3, r2
 8003312:	b21b      	sxth	r3, r3
 8003314:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003318:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	441a      	add	r2, r3
 8003320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003324:	2108      	movs	r1, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f974 	bl	8000614 <ExtractBits>
 800332c:	4603      	mov	r3, r0
 800332e:	78ba      	ldrb	r2, [r7, #2]
 8003330:	b2d8      	uxtb	r0, r3
 8003332:	490c      	ldr	r1, [pc, #48]	; (8003364 <Vital_Msg_extr+0x658>)
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	440b      	add	r3, r1
 800333e:	3302      	adds	r3, #2
 8003340:	4602      	mov	r2, r0
 8003342:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003344:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003348:	3308      	adds	r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	da1c      	bge.n	8003388 <Vital_Msg_extr+0x67c>
 800334e:	3307      	adds	r3, #7
 8003350:	e01a      	b.n	8003388 <Vital_Msg_extr+0x67c>
 8003352:	bf00      	nop
 8003354:	20000fa4 	.word	0x20000fa4
 8003358:	20000fcc 	.word	0x20000fcc
 800335c:	20001018 	.word	0x20001018
 8003360:	2000197c 	.word	0x2000197c
 8003364:	200013a4 	.word	0x200013a4
 8003368:	08024044 	.word	0x08024044
 800336c:	0802404c 	.word	0x0802404c
 8003370:	200011c4 	.word	0x200011c4
 8003374:	20000304 	.word	0x20000304
 8003378:	08024358 	.word	0x08024358
 800337c:	0802439c 	.word	0x0802439c
 8003380:	080243ac 	.word	0x080243ac
 8003384:	20001674 	.word	0x20001674
 8003388:	10db      	asrs	r3, r3, #3
 800338a:	b29a      	uxth	r2, r3
 800338c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003390:	4413      	add	r3, r2
 8003392:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003396:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800339a:	3308      	adds	r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	b21b      	sxth	r3, r3
 80033a0:	425a      	negs	r2, r3
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	f002 0207 	and.w	r2, r2, #7
 80033aa:	bf58      	it	pl
 80033ac:	4253      	negpl	r3, r2
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80033b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	441a      	add	r2, r3
 80033bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033c0:	2110      	movs	r1, #16
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f926 	bl	8000614 <ExtractBits>
 80033c8:	4602      	mov	r2, r0
 80033ca:	78bb      	ldrb	r3, [r7, #2]
 80033cc:	b291      	uxth	r1, r2
 80033ce:	4abd      	ldr	r2, [pc, #756]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	460a      	mov	r2, r1
 80033d8:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80033da:	49bb      	ldr	r1, [pc, #748]	; (80036c8 <Vital_Msg_extr+0x9bc>)
 80033dc:	48bb      	ldr	r0, [pc, #748]	; (80036cc <Vital_Msg_extr+0x9c0>)
 80033de:	f7fc ff2f 	bl	8000240 <strcmp>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <Vital_Msg_extr+0x6fc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80033e8:	78bb      	ldrb	r3, [r7, #2]
 80033ea:	4ab6      	ldr	r2, [pc, #728]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	b291      	uxth	r1, r2
 80033fc:	4ab1      	ldr	r2, [pc, #708]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	460a      	mov	r2, r1
 8003406:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003408:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800340c:	3310      	adds	r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	da00      	bge.n	8003414 <Vital_Msg_extr+0x708>
 8003412:	3307      	adds	r3, #7
 8003414:	10db      	asrs	r3, r3, #3
 8003416:	b29a      	uxth	r2, r3
 8003418:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800341c:	4413      	add	r3, r2
 800341e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003422:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003426:	3310      	adds	r3, #16
 8003428:	b29b      	uxth	r3, r3
 800342a:	b21b      	sxth	r3, r3
 800342c:	425a      	negs	r2, r3
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	f002 0207 	and.w	r2, r2, #7
 8003436:	bf58      	it	pl
 8003438:	4253      	negpl	r3, r2
 800343a:	b21b      	sxth	r3, r3
 800343c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003440:	78bb      	ldrb	r3, [r7, #2]
 8003442:	4aa0      	ldr	r2, [pc, #640]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8145 	beq.w	80036e0 <Vital_Msg_extr+0x9d4>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	441a      	add	r2, r3
 800345e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003462:	2108      	movs	r1, #8
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f8d5 	bl	8000614 <ExtractBits>
 800346a:	4603      	mov	r3, r0
 800346c:	78ba      	ldrb	r2, [r7, #2]
 800346e:	b2d8      	uxtb	r0, r3
 8003470:	4997      	ldr	r1, [pc, #604]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	440b      	add	r3, r1
 800347c:	3305      	adds	r3, #5
 800347e:	4602      	mov	r2, r0
 8003480:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003482:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003486:	3308      	adds	r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	da00      	bge.n	800348e <Vital_Msg_extr+0x782>
 800348c:	3307      	adds	r3, #7
 800348e:	10db      	asrs	r3, r3, #3
 8003490:	b29a      	uxth	r2, r3
 8003492:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003496:	4413      	add	r3, r2
 8003498:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800349c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034a0:	3308      	adds	r3, #8
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	425a      	negs	r2, r3
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	f002 0207 	and.w	r2, r2, #7
 80034b0:	bf58      	it	pl
 80034b2:	4253      	negpl	r3, r2
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80034ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	441a      	add	r2, r3
 80034c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034c6:	2108      	movs	r1, #8
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd f8a3 	bl	8000614 <ExtractBits>
 80034ce:	4603      	mov	r3, r0
 80034d0:	78ba      	ldrb	r2, [r7, #2]
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	497e      	ldr	r1, [pc, #504]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	3304      	adds	r3, #4
 80034e2:	4602      	mov	r2, r0
 80034e4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80034e6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80034ea:	3308      	adds	r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da00      	bge.n	80034f2 <Vital_Msg_extr+0x7e6>
 80034f0:	3307      	adds	r3, #7
 80034f2:	10db      	asrs	r3, r3, #3
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034fa:	4413      	add	r3, r2
 80034fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003500:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003504:	3308      	adds	r3, #8
 8003506:	b29b      	uxth	r3, r3
 8003508:	b21b      	sxth	r3, r3
 800350a:	425a      	negs	r2, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	f002 0207 	and.w	r2, r2, #7
 8003514:	bf58      	it	pl
 8003516:	4253      	negpl	r3, r2
 8003518:	b21b      	sxth	r3, r3
 800351a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800351e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	441a      	add	r2, r3
 8003526:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800352a:	2108      	movs	r1, #8
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f871 	bl	8000614 <ExtractBits>
 8003532:	4603      	mov	r3, r0
 8003534:	78ba      	ldrb	r2, [r7, #2]
 8003536:	b2d8      	uxtb	r0, r3
 8003538:	4965      	ldr	r1, [pc, #404]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	3303      	adds	r3, #3
 8003546:	4602      	mov	r2, r0
 8003548:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 800354a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800354e:	3308      	adds	r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	da00      	bge.n	8003556 <Vital_Msg_extr+0x84a>
 8003554:	3307      	adds	r3, #7
 8003556:	10db      	asrs	r3, r3, #3
 8003558:	b29a      	uxth	r2, r3
 800355a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800355e:	4413      	add	r3, r2
 8003560:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003564:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003568:	3308      	adds	r3, #8
 800356a:	b29b      	uxth	r3, r3
 800356c:	b21b      	sxth	r3, r3
 800356e:	425a      	negs	r2, r3
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	f002 0207 	and.w	r2, r2, #7
 8003578:	bf58      	it	pl
 800357a:	4253      	negpl	r3, r2
 800357c:	b21b      	sxth	r3, r3
 800357e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003582:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	441a      	add	r2, r3
 800358a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800358e:	2108      	movs	r1, #8
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd f83f 	bl	8000614 <ExtractBits>
 8003596:	4603      	mov	r3, r0
 8003598:	78ba      	ldrb	r2, [r7, #2]
 800359a:	b2d8      	uxtb	r0, r3
 800359c:	494c      	ldr	r1, [pc, #304]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	4602      	mov	r2, r0
 80035aa:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 80035ac:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80035b0:	3308      	adds	r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da00      	bge.n	80035b8 <Vital_Msg_extr+0x8ac>
 80035b6:	3307      	adds	r3, #7
 80035b8:	10db      	asrs	r3, r3, #3
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035c0:	4413      	add	r3, r2
 80035c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ca:	3308      	adds	r3, #8
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	425a      	negs	r2, r3
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	f002 0207 	and.w	r2, r2, #7
 80035da:	bf58      	it	pl
 80035dc:	4253      	negpl	r3, r2
 80035de:	b21b      	sxth	r3, r3
 80035e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80035e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	441a      	add	r2, r3
 80035ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035f0:	2108      	movs	r1, #8
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd f80e 	bl	8000614 <ExtractBits>
 80035f8:	4603      	mov	r3, r0
 80035fa:	78ba      	ldrb	r2, [r7, #2]
 80035fc:	b2d8      	uxtb	r0, r3
 80035fe:	4934      	ldr	r1, [pc, #208]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	440b      	add	r3, r1
 800360a:	3301      	adds	r3, #1
 800360c:	4602      	mov	r2, r0
 800360e:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003610:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003614:	3308      	adds	r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	da00      	bge.n	800361c <Vital_Msg_extr+0x910>
 800361a:	3307      	adds	r3, #7
 800361c:	10db      	asrs	r3, r3, #3
 800361e:	b29a      	uxth	r2, r3
 8003620:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003624:	4413      	add	r3, r2
 8003626:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800362a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800362e:	3308      	adds	r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	b21b      	sxth	r3, r3
 8003634:	425a      	negs	r2, r3
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	f002 0207 	and.w	r2, r2, #7
 800363e:	bf58      	it	pl
 8003640:	4253      	negpl	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003648:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	441a      	add	r2, r3
 8003650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003654:	2108      	movs	r1, #8
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc ffdc 	bl	8000614 <ExtractBits>
 800365c:	4603      	mov	r3, r0
 800365e:	78ba      	ldrb	r2, [r7, #2]
 8003660:	b2d8      	uxtb	r0, r3
 8003662:	491b      	ldr	r1, [pc, #108]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	440b      	add	r3, r1
 800366e:	3302      	adds	r3, #2
 8003670:	4602      	mov	r2, r0
 8003672:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003674:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003678:	3308      	adds	r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	da00      	bge.n	8003680 <Vital_Msg_extr+0x974>
 800367e:	3307      	adds	r3, #7
 8003680:	10db      	asrs	r3, r3, #3
 8003682:	b29a      	uxth	r2, r3
 8003684:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003688:	4413      	add	r3, r2
 800368a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800368e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003692:	3308      	adds	r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b21b      	sxth	r3, r3
 8003698:	425a      	negs	r2, r3
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	f002 0207 	and.w	r2, r2, #7
 80036a2:	bf58      	it	pl
 80036a4:	4253      	negpl	r3, r2
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80036ac:	78bb      	ldrb	r3, [r7, #2]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f005 f932 	bl	8008918 <IS_MLK_EIPC_TIME_MATCHING>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <Vital_Msg_extr+0x9cc>
 80036ba:	78bb      	ldrb	r3, [r7, #2]
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <Vital_Msg_extr+0x9c8>)
 80036be:	2100      	movs	r1, #0
 80036c0:	54d1      	strb	r1, [r2, r3]
 80036c2:	e00d      	b.n	80036e0 <Vital_Msg_extr+0x9d4>
 80036c4:	200011c4 	.word	0x200011c4
 80036c8:	08023d10 	.word	0x08023d10
 80036cc:	20000305 	.word	0x20000305
 80036d0:	20001188 	.word	0x20001188
 80036d4:	200010d8 	.word	0x200010d8
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	4a86      	ldr	r2, [pc, #536]	; (80038f4 <Vital_Msg_extr+0xbe8>)
 80036dc:	2101      	movs	r1, #1
 80036de:	54d1      	strb	r1, [r2, r3]


	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 80036e0:	78bb      	ldrb	r3, [r7, #2]
 80036e2:	4a85      	ldr	r2, [pc, #532]	; (80038f8 <Vital_Msg_extr+0xbec>)
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <Vital_Msg_extr+0x9ee>
	{
		LinkEstablishFlag = SET;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80036fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	441a      	add	r2, r3
 8003702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003706:	2108      	movs	r1, #8
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc ff83 	bl	8000614 <ExtractBits>
 800370e:	4603      	mov	r3, r0
 8003710:	78ba      	ldrb	r2, [r7, #2]
 8003712:	b2d8      	uxtb	r0, r3
 8003714:	4979      	ldr	r1, [pc, #484]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	440b      	add	r3, r1
 8003720:	3303      	adds	r3, #3
 8003722:	4602      	mov	r2, r0
 8003724:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003726:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800372a:	3308      	adds	r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	da00      	bge.n	8003732 <Vital_Msg_extr+0xa26>
 8003730:	3307      	adds	r3, #7
 8003732:	10db      	asrs	r3, r3, #3
 8003734:	b29a      	uxth	r2, r3
 8003736:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800373a:	4413      	add	r3, r2
 800373c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003740:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003744:	3308      	adds	r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	b21b      	sxth	r3, r3
 800374a:	425a      	negs	r2, r3
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	f002 0207 	and.w	r2, r2, #7
 8003754:	bf58      	it	pl
 8003756:	4253      	negpl	r3, r2
 8003758:	b21b      	sxth	r3, r3
 800375a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 800375e:	78ba      	ldrb	r2, [r7, #2]
 8003760:	4966      	ldr	r1, [pc, #408]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	440b      	add	r3, r1
 800376c:	3303      	adds	r3, #3
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	4863      	ldr	r0, [pc, #396]	; (8003900 <Vital_Msg_extr+0xbf4>)
 8003774:	f01e fef6 	bl	8022564 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003778:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	441a      	add	r2, r3
 8003780:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003784:	2108      	movs	r1, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f7fc ff44 	bl	8000614 <ExtractBits>
 800378c:	4603      	mov	r3, r0
 800378e:	78ba      	ldrb	r2, [r7, #2]
 8003790:	b2d8      	uxtb	r0, r3
 8003792:	495a      	ldr	r1, [pc, #360]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	440b      	add	r3, r1
 800379e:	3304      	adds	r3, #4
 80037a0:	4602      	mov	r2, r0
 80037a2:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 80037a4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80037a8:	3308      	adds	r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da00      	bge.n	80037b0 <Vital_Msg_extr+0xaa4>
 80037ae:	3307      	adds	r3, #7
 80037b0:	10db      	asrs	r3, r3, #3
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037b8:	4413      	add	r3, r2
 80037ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80037be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037c2:	3308      	adds	r3, #8
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	f002 0207 	and.w	r2, r2, #7
 80037d2:	bf58      	it	pl
 80037d4:	4253      	negpl	r3, r2
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 80037dc:	78ba      	ldrb	r2, [r7, #2]
 80037de:	4947      	ldr	r1, [pc, #284]	; (80038fc <Vital_Msg_extr+0xbf0>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	440b      	add	r3, r1
 80037ea:	3303      	adds	r3, #3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (noofIP != 0)
 80037f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <Vital_Msg_extr+0xb10>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 80037fe:	78ba      	ldrb	r2, [r7, #2]
 8003800:	493e      	ldr	r1, [pc, #248]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	440b      	add	r3, r1
 800380c:	3303      	adds	r3, #3
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	08db      	lsrs	r3, r3, #3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800381a:	e00b      	b.n	8003834 <Vital_Msg_extr+0xb28>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 800381c:	78ba      	ldrb	r2, [r7, #2]
 800381e:	4937      	ldr	r1, [pc, #220]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	440b      	add	r3, r1
 800382a:	3303      	adds	r3, #3
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003834:	2300      	movs	r3, #0
 8003836:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800383a:	e04c      	b.n	80038d6 <Vital_Msg_extr+0xbca>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800383c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	441a      	add	r2, r3
 8003844:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003848:	2108      	movs	r1, #8
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fee2 	bl	8000614 <ExtractBits>
 8003850:	4603      	mov	r3, r0
 8003852:	78ba      	ldrb	r2, [r7, #2]
 8003854:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003858:	b2dc      	uxtb	r4, r3
 800385a:	4828      	ldr	r0, [pc, #160]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4403      	add	r3, r0
 8003866:	440b      	add	r3, r1
 8003868:	3305      	adds	r3, #5
 800386a:	4622      	mov	r2, r4
 800386c:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 800386e:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8003872:	78ba      	ldrb	r2, [r7, #2]
 8003874:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003878:	4c20      	ldr	r4, [pc, #128]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	4423      	add	r3, r4
 8003884:	440b      	add	r3, r1
 8003886:	3305      	adds	r3, #5
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4601      	mov	r1, r0
 800388e:	481d      	ldr	r0, [pc, #116]	; (8003904 <Vital_Msg_extr+0xbf8>)
 8003890:	f01e fe68 	bl	8022564 <iprintf>
		BITSTUFFINC(8);
 8003894:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003898:	3308      	adds	r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	da00      	bge.n	80038a0 <Vital_Msg_extr+0xb94>
 800389e:	3307      	adds	r3, #7
 80038a0:	10db      	asrs	r3, r3, #3
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038a8:	4413      	add	r3, r2
 80038aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80038ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038b2:	3308      	adds	r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	425a      	negs	r2, r3
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	f002 0207 	and.w	r2, r2, #7
 80038c2:	bf58      	it	pl
 80038c4:	4253      	negpl	r3, r2
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80038cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038d0:	3301      	adds	r3, #1
 80038d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3ab      	bcc.n	800383c <Vital_Msg_extr+0xb30>
	}
	printf("\n");
 80038e4:	200a      	movs	r0, #10
 80038e6:	f01e fe55 	bl	8022594 <putchar>

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038f0:	e044      	b.n	800397c <Vital_Msg_extr+0xc70>
 80038f2:	bf00      	nop
 80038f4:	200010d8 	.word	0x200010d8
 80038f8:	200011c4 	.word	0x200011c4
 80038fc:	200013a4 	.word	0x200013a4
 8003900:	080243bc 	.word	0x080243bc
 8003904:	080243c4 	.word	0x080243c4
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003908:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	441a      	add	r2, r3
 8003910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003914:	2108      	movs	r1, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f7fc fe7c 	bl	8000614 <ExtractBits>
 800391c:	4603      	mov	r3, r0
 800391e:	78ba      	ldrb	r2, [r7, #2]
 8003920:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003924:	b2dc      	uxtb	r4, r3
 8003926:	48c4      	ldr	r0, [pc, #784]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4403      	add	r3, r0
 8003932:	440b      	add	r3, r1
 8003934:	3315      	adds	r3, #21
 8003936:	4622      	mov	r2, r4
 8003938:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800393a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800393e:	3308      	adds	r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	da00      	bge.n	8003946 <Vital_Msg_extr+0xc3a>
 8003944:	3307      	adds	r3, #7
 8003946:	10db      	asrs	r3, r3, #3
 8003948:	b29a      	uxth	r2, r3
 800394a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800394e:	4413      	add	r3, r2
 8003950:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003954:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003958:	3308      	adds	r3, #8
 800395a:	b29b      	uxth	r3, r3
 800395c:	b21b      	sxth	r3, r3
 800395e:	425a      	negs	r2, r3
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	f002 0207 	and.w	r2, r2, #7
 8003968:	bf58      	it	pl
 800396a:	4253      	negpl	r3, r2
 800396c:	b21b      	sxth	r3, r3
 800396e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003972:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003976:	3301      	adds	r3, #1
 8003978:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800397c:	78ba      	ldrb	r2, [r7, #2]
 800397e:	49ae      	ldr	r1, [pc, #696]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	440b      	add	r3, r1
 800398a:	3304      	adds	r3, #4
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003994:	429a      	cmp	r2, r3
 8003996:	d3b7      	bcc.n	8003908 <Vital_Msg_extr+0xbfc>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8003998:	787a      	ldrb	r2, [r7, #1]
 800399a:	78bb      	ldrb	r3, [r7, #2]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fa46 	bl	8006e30 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 80039a4:	78bb      	ldrb	r3, [r7, #2]
 80039a6:	4aa5      	ldr	r2, [pc, #660]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039a8:	2101      	movs	r1, #1
 80039aa:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 80039ac:	78bb      	ldrb	r3, [r7, #2]
 80039ae:	4aa3      	ldr	r2, [pc, #652]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039b0:	3302      	adds	r3, #2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b8:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	49a0      	ldr	r1, [pc, #640]	; (8003c40 <Vital_Msg_extr+0xf34>)
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	3304      	adds	r3, #4
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d116      	bne.n	80039fe <Vital_Msg_extr+0xcf2>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80039d0:	2246      	movs	r2, #70	; 0x46
 80039d2:	2100      	movs	r1, #0
 80039d4:	489b      	ldr	r0, [pc, #620]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039d6:	f01e fcdd 	bl	8022394 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 80039da:	78bb      	ldrb	r3, [r7, #2]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b99      	ldr	r3, [pc, #612]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e0:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e8:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4895      	ldr	r0, [pc, #596]	; (8003c48 <Vital_Msg_extr+0xf3c>)
 80039f2:	f01e fca7 	bl	8022344 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
#endif
#ifdef EI_2
		TransmitCanPkt(SEND_VITAL_MSG_2);
 80039f6:	f44f 7001 	mov.w	r0, #516	; 0x204
 80039fa:	f00b fd43 	bl	800f484 <TransmitCanPkt>




	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 80039fe:	78ba      	ldrb	r2, [r7, #2]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4a90      	ldr	r2, [pc, #576]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	2210      	movs	r2, #16
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f01e fcbe 	bl	8022394 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003a18:	78ba      	ldrb	r2, [r7, #2]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a8a      	ldr	r2, [pc, #552]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a24:	4413      	add	r3, r2
 8003a26:	1c58      	adds	r0, r3, #1
 8003a28:	78ba      	ldrb	r2, [r7, #2]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4a81      	ldr	r2, [pc, #516]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003a34:	4413      	add	r3, r2
 8003a36:	3305      	adds	r3, #5
 8003a38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f01e fc81 	bl	8022344 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003a42:	78ba      	ldrb	r2, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	3301      	adds	r3, #1
 8003a52:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a56:	b212      	sxth	r2, r2
 8003a58:	78bc      	ldrb	r4, [r7, #2]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f00f f8e5 	bl	8012c2c <GetCRC16>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4619      	mov	r1, r3
 8003a66:	4a79      	ldr	r2, [pc, #484]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a68:	4623      	mov	r3, r4
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4423      	add	r3, r4
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	3312      	adds	r3, #18
 8003a74:	460a      	mov	r2, r1
 8003a76:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003a78:	78ba      	ldrb	r2, [r7, #2]
 8003a7a:	4974      	ldr	r1, [pc, #464]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3311      	adds	r3, #17
 8003a88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a8c:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003a8e:	78ba      	ldrb	r2, [r7, #2]
 8003a90:	496e      	ldr	r1, [pc, #440]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	78ba      	ldrb	r2, [r7, #2]
 8003a9e:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003aa0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d16b      	bne.n	8003b80 <Vital_Msg_extr+0xe74>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003aa8:	78ba      	ldrb	r2, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a67      	ldr	r2, [pc, #412]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	2210      	movs	r2, #16
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f01e fc69 	bl	8022394 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003ac2:	78ba      	ldrb	r2, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ace:	1898      	adds	r0, r3, r2
 8003ad0:	78ba      	ldrb	r2, [r7, #2]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a5c      	ldr	r2, [pc, #368]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003adc:	4413      	add	r3, r2
 8003ade:	2214      	movs	r2, #20
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f01e fc2f 	bl	8022344 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003ae6:	78bb      	ldrb	r3, [r7, #2]
 8003ae8:	495a      	ldr	r1, [pc, #360]	; (8003c54 <Vital_Msg_extr+0xf48>)
 8003aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003af0:	78bb      	ldrb	r3, [r7, #2]
 8003af2:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003af4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003af8:	78ba      	ldrb	r2, [r7, #2]
 8003afa:	4855      	ldr	r0, [pc, #340]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4403      	add	r3, r0
 8003b06:	3312      	adds	r3, #18
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d038      	beq.n	8003b80 <Vital_Msg_extr+0xe74>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b0e:	78ba      	ldrb	r2, [r7, #2]
 8003b10:	78b9      	ldrb	r1, [r7, #2]
 8003b12:	484f      	ldr	r0, [pc, #316]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3312      	adds	r3, #18
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	4b4d      	ldr	r3, [pc, #308]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003b24:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003b28:	2214      	movs	r2, #20
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	484b      	ldr	r0, [pc, #300]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b2e:	f01e fc31 	bl	8022394 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003b32:	78ba      	ldrb	r2, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	2214      	movs	r2, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	4845      	ldr	r0, [pc, #276]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b46:	f01e fbfd 	bl	8022344 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8003b4a:	f44f 7002 	mov.w	r0, #520	; 0x208
 8003b4e:	f00b fc99 	bl	800f484 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8003b52:	78bb      	ldrb	r3, [r7, #2]
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <Vital_Msg_extr+0xf54>)
 8003b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d110      	bne.n	8003b80 <Vital_Msg_extr+0xe74>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003b5e:	78bb      	ldrb	r3, [r7, #2]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <Vital_Msg_extr+0xf58>)
 8003b64:	4413      	add	r3, r2
 8003b66:	1c98      	adds	r0, r3, #2
 8003b68:	78ba      	ldrb	r2, [r7, #2]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a37      	ldr	r2, [pc, #220]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b74:	4413      	add	r3, r2
 8003b76:	3301      	adds	r3, #1
 8003b78:	2210      	movs	r2, #16
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f01e fbe2 	bl	8022344 <memcpy>

		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b80:	78b9      	ldrb	r1, [r7, #2]
 8003b82:	78ba      	ldrb	r2, [r7, #2]
 8003b84:	4832      	ldr	r0, [pc, #200]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b86:	460b      	mov	r3, r1
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4403      	add	r3, r0
 8003b90:	3312      	adds	r3, #18
 8003b92:	8818      	ldrh	r0, [r3, #0]
 8003b94:	492a      	ldr	r1, [pc, #168]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3306      	adds	r3, #6
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003ba6:	78ba      	ldrb	r2, [r7, #2]
 8003ba8:	4925      	ldr	r1, [pc, #148]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bb8:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003bba:	78ba      	ldrb	r2, [r7, #2]
 8003bbc:	4920      	ldr	r1, [pc, #128]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3305      	adds	r3, #5
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003bce:	78ba      	ldrb	r2, [r7, #2]
 8003bd0:	491b      	ldr	r1, [pc, #108]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	78ba      	ldrb	r2, [r7, #2]
 8003bde:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003be0:	78ba      	ldrb	r2, [r7, #2]
 8003be2:	4917      	ldr	r1, [pc, #92]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	3301      	adds	r3, #1
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003bf4:	78ba      	ldrb	r2, [r7, #2]
 8003bf6:	4912      	ldr	r1, [pc, #72]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	3302      	adds	r3, #2
 8003c04:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003c08:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003c0a:	2218      	movs	r2, #24
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4816      	ldr	r0, [pc, #88]	; (8003c68 <Vital_Msg_extr+0xf5c>)
 8003c10:	f01e fbc0 	bl	8022394 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003c14:	78ba      	ldrb	r2, [r7, #2]
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003c20:	4413      	add	r3, r2
 8003c22:	2218      	movs	r2, #24
 8003c24:	4619      	mov	r1, r3
 8003c26:	4810      	ldr	r0, [pc, #64]	; (8003c68 <Vital_Msg_extr+0xf5c>)
 8003c28:	f01e fb8c 	bl	8022344 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8003c2c:	f240 2002 	movw	r0, #514	; 0x202
 8003c30:	f00b fc28 	bl	800f484 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003c34:	78ba      	ldrb	r2, [r7, #2]
 8003c36:	e019      	b.n	8003c6c <Vital_Msg_extr+0xf60>
 8003c38:	200013a4 	.word	0x200013a4
 8003c3c:	20001c94 	.word	0x20001c94
 8003c40:	20001674 	.word	0x20001674
 8003c44:	20001884 	.word	0x20001884
 8003c48:	2000188a 	.word	0x2000188a
 8003c4c:	20001db8 	.word	0x20001db8
 8003c50:	20001e80 	.word	0x20001e80
 8003c54:	20000ed8 	.word	0x20000ed8
 8003c58:	20000f00 	.word	0x20000f00
 8003c5c:	20002010 	.word	0x20002010
 8003c60:	20000ec4 	.word	0x20000ec4
 8003c64:	200010e4 	.word	0x200010e4
 8003c68:	20001854 	.word	0x20001854
 8003c6c:	4927      	ldr	r1, [pc, #156]	; (8003d0c <Vital_Msg_extr+0x1000>)
 8003c6e:	4613      	mov	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	440b      	add	r3, r1
 8003c78:	3301      	adds	r3, #1
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003c7e:	78bb      	ldrb	r3, [r7, #2]
 8003c80:	4923      	ldr	r1, [pc, #140]	; (8003d10 <Vital_Msg_extr+0x1004>)
 8003c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003c88:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d11d      	bne.n	8003ccc <Vital_Msg_extr+0xfc0>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003c90:	78bb      	ldrb	r3, [r7, #2]
 8003c92:	4920      	ldr	r1, [pc, #128]	; (8003d14 <Vital_Msg_extr+0x1008>)
 8003c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003c9a:	78ba      	ldrb	r2, [r7, #2]
 8003c9c:	491e      	ldr	r1, [pc, #120]	; (8003d18 <Vital_Msg_extr+0x100c>)
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3304      	adds	r3, #4
 8003caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cac:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003cae:	78ba      	ldrb	r2, [r7, #2]
 8003cb0:	4919      	ldr	r1, [pc, #100]	; (8003d18 <Vital_Msg_extr+0x100c>)
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8003cc2:	78bb      	ldrb	r3, [r7, #2]
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <Vital_Msg_extr+0x1010>)
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	54d1      	strb	r1, [r2, r3]
 8003cca:	e017      	b.n	8003cfc <Vital_Msg_extr+0xff0>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8003ccc:	78bb      	ldrb	r3, [r7, #2]
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <Vital_Msg_extr+0x1010>)
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003cd4:	78ba      	ldrb	r2, [r7, #2]
 8003cd6:	4910      	ldr	r1, [pc, #64]	; (8003d18 <Vital_Msg_extr+0x100c>)
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce6:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8003ce8:	78ba      	ldrb	r2, [r7, #2]
 8003cea:	490b      	ldr	r1, [pc, #44]	; (8003d18 <Vital_Msg_extr+0x100c>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d00:	4807      	ldr	r0, [pc, #28]	; (8003d20 <Vital_Msg_extr+0x1014>)
 8003d02:	f014 f90e 	bl	8017f22 <HAL_GPIO_TogglePin>

}
 8003d06:	3764      	adds	r7, #100	; 0x64
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd90      	pop	{r4, r7, pc}
 8003d0c:	20001674 	.word	0x20001674
 8003d10:	20000e44 	.word	0x20000e44
 8003d14:	20000f14 	.word	0x20000f14
 8003d18:	20001cc8 	.word	0x20001cc8
 8003d1c:	20000f64 	.word	0x20000f64
 8003d20:	40021c00 	.word	0x40021c00

08003d24 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b0a5      	sub	sp, #148	; 0x94
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	71fb      	strb	r3, [r7, #7]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003d34:	2300      	movs	r3, #0
 8003d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d3c:	2238      	movs	r2, #56	; 0x38
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f01e fb27 	bl	8022394 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	f107 0310 	add.w	r3, r7, #16
 8003d4e:	2238      	movs	r2, #56	; 0x38
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f01e fb1e 	bl	8022394 <memset>
	uint8_t uc_index = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003d6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d6e:	223c      	movs	r2, #60	; 0x3c
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f01e fb0e 	bl	8022394 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003d78:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003d7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d80:	441a      	add	r2, r3
 8003d82:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003d86:	23f4      	movs	r3, #244	; 0xf4
 8003d88:	2108      	movs	r1, #8
 8003d8a:	f7fc fccf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003d8e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003d92:	3308      	adds	r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da00      	bge.n	8003d9a <Send_Vital_Data_Message+0x76>
 8003d98:	3307      	adds	r3, #7
 8003d9a:	10db      	asrs	r3, r3, #3
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003da2:	4413      	add	r3, r2
 8003da4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003da8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003dac:	3308      	adds	r3, #8
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	b21b      	sxth	r3, r3
 8003db2:	425a      	negs	r2, r3
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	f002 0207 	and.w	r2, r2, #7
 8003dbc:	bf58      	it	pl
 8003dbe:	4253      	negpl	r3, r2
 8003dc0:	b21b      	sxth	r3, r3
 8003dc2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003dc6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003dca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003dce:	441a      	add	r2, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	49c6      	ldr	r1, [pc, #792]	; (80040ec <Send_Vital_Data_Message+0x3c8>)
 8003dd4:	3366      	adds	r3, #102	; 0x66
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003de0:	2110      	movs	r1, #16
 8003de2:	f7fc fca3 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003de6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003dea:	3310      	adds	r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da00      	bge.n	8003df2 <Send_Vital_Data_Message+0xce>
 8003df0:	3307      	adds	r3, #7
 8003df2:	10db      	asrs	r3, r3, #3
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e04:	3310      	adds	r3, #16
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	425a      	negs	r2, r3
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	f002 0207 	and.w	r2, r2, #7
 8003e14:	bf58      	it	pl
 8003e16:	4253      	negpl	r3, r2
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003e1e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e26:	441a      	add	r2, r3
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	49b0      	ldr	r1, [pc, #704]	; (80040ec <Send_Vital_Data_Message+0x3c8>)
 8003e2c:	3370      	adds	r3, #112	; 0x70
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003e38:	2110      	movs	r1, #16
 8003e3a:	f7fc fc77 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003e3e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e42:	3310      	adds	r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	da00      	bge.n	8003e4a <Send_Vital_Data_Message+0x126>
 8003e48:	3307      	adds	r3, #7
 8003e4a:	10db      	asrs	r3, r3, #3
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e52:	4413      	add	r3, r2
 8003e54:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e5c:	3310      	adds	r3, #16
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	425a      	negs	r2, r3
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	f002 0207 	and.w	r2, r2, #7
 8003e6c:	bf58      	it	pl
 8003e6e:	4253      	negpl	r3, r2
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003e76:	4b9e      	ldr	r3, [pc, #632]	; (80040f0 <Send_Vital_Data_Message+0x3cc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d035      	beq.n	8003ef0 <Send_Vital_Data_Message+0x1cc>
 8003e84:	4b9a      	ldr	r3, [pc, #616]	; (80040f0 <Send_Vital_Data_Message+0x3cc>)
 8003e86:	791b      	ldrb	r3, [r3, #4]
 8003e88:	79fa      	ldrb	r2, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d130      	bne.n	8003ef0 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8003e94:	4897      	ldr	r0, [pc, #604]	; (80040f4 <Send_Vital_Data_Message+0x3d0>)
 8003e96:	f016 f80d 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4b96      	ldr	r3, [pc, #600]	; (80040f8 <Send_Vital_Data_Message+0x3d4>)
 8003e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	21c8      	movs	r1, #200	; 0xc8
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8003eb0:	4892      	ldr	r0, [pc, #584]	; (80040fc <Send_Vital_Data_Message+0x3d8>)
 8003eb2:	f01e fbf3 	bl	802269c <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	4a91      	ldr	r2, [pc, #580]	; (8004100 <Send_Vital_Data_Message+0x3dc>)
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	488f      	ldr	r0, [pc, #572]	; (8004104 <Send_Vital_Data_Message+0x3e0>)
 8003ec6:	f01e fb4d 	bl	8022564 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8003eca:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003ece:	4619      	mov	r1, r3
 8003ed0:	488d      	ldr	r0, [pc, #564]	; (8004108 <Send_Vital_Data_Message+0x3e4>)
 8003ed2:	f01e fb47 	bl	8022564 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8003ed6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003eda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ede:	441a      	add	r2, r3
 8003ee0:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003ee4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003ee8:	2108      	movs	r1, #8
 8003eea:	f7fc fc1f 	bl	800072c <InsertBits>
	{
 8003eee:	e00f      	b.n	8003f10 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8003ef0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ef4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ef8:	441a      	add	r2, r3
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	4980      	ldr	r1, [pc, #512]	; (8004100 <Send_Vital_Data_Message+0x3dc>)
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	440b      	add	r3, r1
 8003f02:	3301      	adds	r3, #1
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f0a:	2108      	movs	r1, #8
 8003f0c:	f7fc fc0e 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8003f10:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f14:	3308      	adds	r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	da00      	bge.n	8003f1c <Send_Vital_Data_Message+0x1f8>
 8003f1a:	3307      	adds	r3, #7
 8003f1c:	10db      	asrs	r3, r3, #3
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f24:	4413      	add	r3, r2
 8003f26:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f2e:	3308      	adds	r3, #8
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	b21b      	sxth	r3, r3
 8003f34:	425a      	negs	r2, r3
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	f002 0207 	and.w	r2, r2, #7
 8003f3e:	bf58      	it	pl
 8003f40:	4253      	negpl	r3, r2
 8003f42:	b21b      	sxth	r3, r3
 8003f44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003f48:	4b69      	ldr	r3, [pc, #420]	; (80040f0 <Send_Vital_Data_Message+0x3cc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	08db      	lsrs	r3, r3, #3
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d035      	beq.n	8003fc2 <Send_Vital_Data_Message+0x29e>
 8003f56:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <Send_Vital_Data_Message+0x3cc>)
 8003f58:	791b      	ldrb	r3, [r3, #4]
 8003f5a:	79fa      	ldrb	r2, [r7, #7]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d130      	bne.n	8003fc2 <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8003f66:	4863      	ldr	r0, [pc, #396]	; (80040f4 <Send_Vital_Data_Message+0x3d0>)
 8003f68:	f015 ffa4 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <Send_Vital_Data_Message+0x3d4>)
 8003f70:	fba3 1302 	umull	r1, r3, r3, r2
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	21c8      	movs	r1, #200	; 0xc8
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8003f82:	4862      	ldr	r0, [pc, #392]	; (800410c <Send_Vital_Data_Message+0x3e8>)
 8003f84:	f01e fb8a 	bl	802269c <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	4a5d      	ldr	r2, [pc, #372]	; (8004100 <Send_Vital_Data_Message+0x3dc>)
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	4413      	add	r3, r2
 8003f90:	3302      	adds	r3, #2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	485e      	ldr	r0, [pc, #376]	; (8004110 <Send_Vital_Data_Message+0x3ec>)
 8003f98:	f01e fae4 	bl	8022564 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8003f9c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	485c      	ldr	r0, [pc, #368]	; (8004114 <Send_Vital_Data_Message+0x3f0>)
 8003fa4:	f01e fade 	bl	8022564 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8003fa8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fb0:	441a      	add	r2, r3
 8003fb2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fb6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fba:	2108      	movs	r1, #8
 8003fbc:	f7fc fbb6 	bl	800072c <InsertBits>
	{
 8003fc0:	e00f      	b.n	8003fe2 <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8003fc2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fc6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fca:	441a      	add	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	494c      	ldr	r1, [pc, #304]	; (8004100 <Send_Vital_Data_Message+0x3dc>)
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fdc:	2108      	movs	r1, #8
 8003fde:	f7fc fba5 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 8003fe2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	da00      	bge.n	8003fee <Send_Vital_Data_Message+0x2ca>
 8003fec:	3307      	adds	r3, #7
 8003fee:	10db      	asrs	r3, r3, #3
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003ffc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004000:	3308      	adds	r3, #8
 8004002:	b29b      	uxth	r3, r3
 8004004:	b21b      	sxth	r3, r3
 8004006:	425a      	negs	r2, r3
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	f002 0207 	and.w	r2, r2, #7
 8004010:	bf58      	it	pl
 8004012:	4253      	negpl	r3, r2
 8004014:	b21b      	sxth	r3, r3
 8004016:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 800401a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800401e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004022:	441a      	add	r2, r3
 8004024:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004028:	2302      	movs	r3, #2
 800402a:	2108      	movs	r1, #8
 800402c:	f7fc fb7e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004030:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004034:	3308      	adds	r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	da00      	bge.n	800403c <Send_Vital_Data_Message+0x318>
 800403a:	3307      	adds	r3, #7
 800403c:	10db      	asrs	r3, r3, #3
 800403e:	b29a      	uxth	r2, r3
 8004040:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004044:	4413      	add	r3, r2
 8004046:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800404a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800404e:	3308      	adds	r3, #8
 8004050:	b29b      	uxth	r3, r3
 8004052:	b21b      	sxth	r3, r3
 8004054:	425a      	negs	r2, r3
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	f002 0207 	and.w	r2, r2, #7
 800405e:	bf58      	it	pl
 8004060:	4253      	negpl	r3, r2
 8004062:	b21b      	sxth	r3, r3
 8004064:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <Send_Vital_Data_Message+0x3f4>)
 800406c:	5cd3      	ldrb	r3, [r2, r3]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d15a      	bne.n	8004128 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 8004072:	f007 f841 	bl	800b0f8 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8004076:	79fa      	ldrb	r2, [r7, #7]
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <Send_Vital_Data_Message+0x3f8>)
 8004082:	4413      	add	r3, r2
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <Send_Vital_Data_Message+0x3fc>)
 8004086:	6811      	ldr	r1, [r2, #0]
 8004088:	6019      	str	r1, [r3, #0]
 800408a:	8892      	ldrh	r2, [r2, #4]
 800408c:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 800408e:	4825      	ldr	r0, [pc, #148]	; (8004124 <Send_Vital_Data_Message+0x400>)
 8004090:	f01e fb04 	bl	802269c <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4a20      	ldr	r2, [pc, #128]	; (8004118 <Send_Vital_Data_Message+0x3f4>)
 8004098:	2100      	movs	r1, #0
 800409a:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 800409c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040a4:	441a      	add	r2, r3
 80040a6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040aa:	2368      	movs	r3, #104	; 0x68
 80040ac:	2110      	movs	r1, #16
 80040ae:	f7fc fb3d 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80040b2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040b6:	3310      	adds	r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	da00      	bge.n	80040be <Send_Vital_Data_Message+0x39a>
 80040bc:	3307      	adds	r3, #7
 80040be:	10db      	asrs	r3, r3, #3
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040c6:	4413      	add	r3, r2
 80040c8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040d0:	3310      	adds	r3, #16
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	b21b      	sxth	r3, r3
 80040d6:	425a      	negs	r2, r3
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	f002 0207 	and.w	r2, r2, #7
 80040e0:	bf58      	it	pl
 80040e2:	4253      	negpl	r3, r2
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80040ea:	e044      	b.n	8004176 <Send_Vital_Data_Message+0x452>
 80040ec:	20000304 	.word	0x20000304
 80040f0:	2000195c 	.word	0x2000195c
 80040f4:	20009c7c 	.word	0x20009c7c
 80040f8:	51eb851f 	.word	0x51eb851f
 80040fc:	080243d4 	.word	0x080243d4
 8004100:	200011c4 	.word	0x200011c4
 8004104:	080243f8 	.word	0x080243f8
 8004108:	08024418 	.word	0x08024418
 800410c:	0802411c 	.word	0x0802411c
 8004110:	08024140 	.word	0x08024140
 8004114:	08024160 	.word	0x08024160
 8004118:	200010d8 	.word	0x200010d8
 800411c:	20001188 	.word	0x20001188
 8004120:	200027ec 	.word	0x200027ec
 8004124:	08024438 	.word	0x08024438
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 8004128:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800412c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004130:	441a      	add	r2, r3
 8004132:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004136:	2328      	movs	r3, #40	; 0x28
 8004138:	2110      	movs	r1, #16
 800413a:	f7fc faf7 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800413e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004142:	3310      	adds	r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	da00      	bge.n	800414a <Send_Vital_Data_Message+0x426>
 8004148:	3307      	adds	r3, #7
 800414a:	10db      	asrs	r3, r3, #3
 800414c:	b29a      	uxth	r2, r3
 800414e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004152:	4413      	add	r3, r2
 8004154:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004158:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800415c:	3310      	adds	r3, #16
 800415e:	b29b      	uxth	r3, r3
 8004160:	b21b      	sxth	r3, r3
 8004162:	425a      	negs	r2, r3
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	f002 0207 	and.w	r2, r2, #7
 800416c:	bf58      	it	pl
 800416e:	4253      	negpl	r3, r2
 8004170:	b21b      	sxth	r3, r3
 8004172:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8004176:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800417a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800417e:	18d1      	adds	r1, r2, r3
 8004180:	79fa      	ldrb	r2, [r7, #7]
 8004182:	48cd      	ldr	r0, [pc, #820]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 8004184:	4613      	mov	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4413      	add	r3, r2
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4403      	add	r3, r0
 800418e:	3305      	adds	r3, #5
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004196:	460a      	mov	r2, r1
 8004198:	2108      	movs	r1, #8
 800419a:	f7fc fac7 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800419e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041a2:	3308      	adds	r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da00      	bge.n	80041aa <Send_Vital_Data_Message+0x486>
 80041a8:	3307      	adds	r3, #7
 80041aa:	10db      	asrs	r3, r3, #3
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041b2:	4413      	add	r3, r2
 80041b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041bc:	3308      	adds	r3, #8
 80041be:	b29b      	uxth	r3, r3
 80041c0:	b21b      	sxth	r3, r3
 80041c2:	425a      	negs	r2, r3
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	f002 0207 	and.w	r2, r2, #7
 80041cc:	bf58      	it	pl
 80041ce:	4253      	negpl	r3, r2
 80041d0:	b21b      	sxth	r3, r3
 80041d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80041d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041de:	18d1      	adds	r1, r2, r3
 80041e0:	79fa      	ldrb	r2, [r7, #7]
 80041e2:	48b5      	ldr	r0, [pc, #724]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 80041e4:	4613      	mov	r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4403      	add	r3, r0
 80041ee:	3304      	adds	r3, #4
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041f6:	460a      	mov	r2, r1
 80041f8:	2108      	movs	r1, #8
 80041fa:	f7fc fa97 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80041fe:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004202:	3308      	adds	r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	da00      	bge.n	800420a <Send_Vital_Data_Message+0x4e6>
 8004208:	3307      	adds	r3, #7
 800420a:	10db      	asrs	r3, r3, #3
 800420c:	b29a      	uxth	r2, r3
 800420e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004212:	4413      	add	r3, r2
 8004214:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004218:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800421c:	3308      	adds	r3, #8
 800421e:	b29b      	uxth	r3, r3
 8004220:	b21b      	sxth	r3, r3
 8004222:	425a      	negs	r2, r3
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	f002 0207 	and.w	r2, r2, #7
 800422c:	bf58      	it	pl
 800422e:	4253      	negpl	r3, r2
 8004230:	b21b      	sxth	r3, r3
 8004232:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004236:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800423a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800423e:	18d1      	adds	r1, r2, r3
 8004240:	79fa      	ldrb	r2, [r7, #7]
 8004242:	489d      	ldr	r0, [pc, #628]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4403      	add	r3, r0
 800424e:	3303      	adds	r3, #3
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004256:	460a      	mov	r2, r1
 8004258:	2108      	movs	r1, #8
 800425a:	f7fc fa67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800425e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004262:	3308      	adds	r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	da00      	bge.n	800426a <Send_Vital_Data_Message+0x546>
 8004268:	3307      	adds	r3, #7
 800426a:	10db      	asrs	r3, r3, #3
 800426c:	b29a      	uxth	r2, r3
 800426e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004272:	4413      	add	r3, r2
 8004274:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004278:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800427c:	3308      	adds	r3, #8
 800427e:	b29b      	uxth	r3, r3
 8004280:	b21b      	sxth	r3, r3
 8004282:	425a      	negs	r2, r3
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	f002 0207 	and.w	r2, r2, #7
 800428c:	bf58      	it	pl
 800428e:	4253      	negpl	r3, r2
 8004290:	b21b      	sxth	r3, r3
 8004292:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8004296:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800429a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800429e:	18d1      	adds	r1, r2, r3
 80042a0:	79fa      	ldrb	r2, [r7, #7]
 80042a2:	4885      	ldr	r0, [pc, #532]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4403      	add	r3, r0
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80042b4:	460a      	mov	r2, r1
 80042b6:	2108      	movs	r1, #8
 80042b8:	f7fc fa38 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80042bc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80042c0:	3308      	adds	r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da00      	bge.n	80042c8 <Send_Vital_Data_Message+0x5a4>
 80042c6:	3307      	adds	r3, #7
 80042c8:	10db      	asrs	r3, r3, #3
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042d0:	4413      	add	r3, r2
 80042d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80042d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042da:	3308      	adds	r3, #8
 80042dc:	b29b      	uxth	r3, r3
 80042de:	b21b      	sxth	r3, r3
 80042e0:	425a      	negs	r2, r3
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	f002 0207 	and.w	r2, r2, #7
 80042ea:	bf58      	it	pl
 80042ec:	4253      	negpl	r3, r2
 80042ee:	b21b      	sxth	r3, r3
 80042f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80042f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042fc:	18d1      	adds	r1, r2, r3
 80042fe:	79fa      	ldrb	r2, [r7, #7]
 8004300:	486d      	ldr	r0, [pc, #436]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 8004302:	4613      	mov	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4413      	add	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4403      	add	r3, r0
 800430c:	3301      	adds	r3, #1
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004314:	460a      	mov	r2, r1
 8004316:	2108      	movs	r1, #8
 8004318:	f7fc fa08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800431c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004320:	3308      	adds	r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	da00      	bge.n	8004328 <Send_Vital_Data_Message+0x604>
 8004326:	3307      	adds	r3, #7
 8004328:	10db      	asrs	r3, r3, #3
 800432a:	b29a      	uxth	r2, r3
 800432c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004330:	4413      	add	r3, r2
 8004332:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004336:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800433a:	3308      	adds	r3, #8
 800433c:	b29b      	uxth	r3, r3
 800433e:	b21b      	sxth	r3, r3
 8004340:	425a      	negs	r2, r3
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	f002 0207 	and.w	r2, r2, #7
 800434a:	bf58      	it	pl
 800434c:	4253      	negpl	r3, r2
 800434e:	b21b      	sxth	r3, r3
 8004350:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004354:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004358:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800435c:	18d1      	adds	r1, r2, r3
 800435e:	79fa      	ldrb	r2, [r7, #7]
 8004360:	4855      	ldr	r0, [pc, #340]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4403      	add	r3, r0
 800436c:	3302      	adds	r3, #2
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004374:	460a      	mov	r2, r1
 8004376:	2108      	movs	r1, #8
 8004378:	f7fc f9d8 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800437c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004380:	3308      	adds	r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	da00      	bge.n	8004388 <Send_Vital_Data_Message+0x664>
 8004386:	3307      	adds	r3, #7
 8004388:	10db      	asrs	r3, r3, #3
 800438a:	b29a      	uxth	r2, r3
 800438c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004390:	4413      	add	r3, r2
 8004392:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004396:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800439a:	3308      	adds	r3, #8
 800439c:	b29b      	uxth	r3, r3
 800439e:	b21b      	sxth	r3, r3
 80043a0:	425a      	negs	r2, r3
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	f002 0207 	and.w	r2, r2, #7
 80043aa:	bf58      	it	pl
 80043ac:	4253      	negpl	r3, r2
 80043ae:	b21b      	sxth	r3, r3
 80043b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 80043b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043bc:	441a      	add	r2, r3
 80043be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043c2:	2301      	movs	r3, #1
 80043c4:	2108      	movs	r1, #8
 80043c6:	f7fc f9b1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043ce:	3308      	adds	r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	da00      	bge.n	80043d6 <Send_Vital_Data_Message+0x6b2>
 80043d4:	3307      	adds	r3, #7
 80043d6:	10db      	asrs	r3, r3, #3
 80043d8:	b29a      	uxth	r2, r3
 80043da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043de:	4413      	add	r3, r2
 80043e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043e8:	3308      	adds	r3, #8
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	b21b      	sxth	r3, r3
 80043ee:	425a      	negs	r2, r3
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	f002 0207 	and.w	r2, r2, #7
 80043f8:	bf58      	it	pl
 80043fa:	4253      	negpl	r3, r2
 80043fc:	b21b      	sxth	r3, r3
 80043fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 8004402:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004406:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800440a:	441a      	add	r2, r3
 800440c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004410:	2300      	movs	r3, #0
 8004412:	2108      	movs	r1, #8
 8004414:	f7fc f98a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004418:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800441c:	3308      	adds	r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	da00      	bge.n	8004424 <Send_Vital_Data_Message+0x700>
 8004422:	3307      	adds	r3, #7
 8004424:	10db      	asrs	r3, r3, #3
 8004426:	b29a      	uxth	r2, r3
 8004428:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800442c:	4413      	add	r3, r2
 800442e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004432:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004436:	3308      	adds	r3, #8
 8004438:	b29b      	uxth	r3, r3
 800443a:	b21b      	sxth	r3, r3
 800443c:	425a      	negs	r2, r3
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	f002 0207 	and.w	r2, r2, #7
 8004446:	bf58      	it	pl
 8004448:	4253      	negpl	r3, r2
 800444a:	b21b      	sxth	r3, r3
 800444c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004450:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004454:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004458:	441a      	add	r2, r3
 800445a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800445e:	2301      	movs	r3, #1
 8004460:	2108      	movs	r1, #8
 8004462:	f7fc f963 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004466:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800446a:	3308      	adds	r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	da00      	bge.n	8004472 <Send_Vital_Data_Message+0x74e>
 8004470:	3307      	adds	r3, #7
 8004472:	10db      	asrs	r3, r3, #3
 8004474:	b29a      	uxth	r2, r3
 8004476:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800447a:	4413      	add	r3, r2
 800447c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004480:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004484:	3308      	adds	r3, #8
 8004486:	b29b      	uxth	r3, r3
 8004488:	b21b      	sxth	r3, r3
 800448a:	425a      	negs	r2, r3
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	f002 0207 	and.w	r2, r2, #7
 8004494:	bf58      	it	pl
 8004496:	4253      	negpl	r3, r2
 8004498:	b21b      	sxth	r3, r3
 800449a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <Send_Vital_Data_Message+0x798>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02c      	beq.n	8004506 <Send_Vital_Data_Message+0x7e2>
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <Send_Vital_Data_Message+0x798>)
 80044ae:	791b      	ldrb	r3, [r3, #4]
 80044b0:	79fa      	ldrb	r2, [r7, #7]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d127      	bne.n	8004506 <Send_Vital_Data_Message+0x7e2>
 80044b6:	e003      	b.n	80044c0 <Send_Vital_Data_Message+0x79c>
 80044b8:	20001188 	.word	0x20001188
 80044bc:	2000195c 	.word	0x2000195c
	{
		uint32_t Rand_Number = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 80044c6:	484e      	ldr	r0, [pc, #312]	; (8004600 <Send_Vital_Data_Message+0x8dc>)
 80044c8:	f015 fcf4 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 80044cc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80044d0:	484c      	ldr	r0, [pc, #304]	; (8004604 <Send_Vital_Data_Message+0x8e0>)
 80044d2:	f01e f8e3 	bl	802269c <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	4a4b      	ldr	r2, [pc, #300]	; (8004608 <Send_Vital_Data_Message+0x8e4>)
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	4413      	add	r3, r2
 80044de:	330c      	adds	r3, #12
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	4849      	ldr	r0, [pc, #292]	; (800460c <Send_Vital_Data_Message+0x8e8>)
 80044e6:	f01e f83d 	bl	8022564 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 80044ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80044ee:	4848      	ldr	r0, [pc, #288]	; (8004610 <Send_Vital_Data_Message+0x8ec>)
 80044f0:	f01e f838 	bl	8022564 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 80044f4:	f107 020c 	add.w	r2, r7, #12
 80044f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044fc:	2118      	movs	r1, #24
 80044fe:	2000      	movs	r0, #0
 8004500:	f7fc f914 	bl	800072c <InsertBits>
	{
 8004504:	e00b      	b.n	800451e <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <Send_Vital_Data_Message+0x8e4>)
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	330c      	adds	r3, #12
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f107 020c 	add.w	r2, r7, #12
 8004516:	2118      	movs	r1, #24
 8004518:	2000      	movs	r0, #0
 800451a:	f7fc f907 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800451e:	2300      	movs	r3, #0
 8004520:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004524:	e011      	b.n	800454a <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8004526:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800452a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800452e:	3303      	adds	r3, #3
 8004530:	3290      	adds	r2, #144	; 0x90
 8004532:	443a      	add	r2, r7
 8004534:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004538:	3390      	adds	r3, #144	; 0x90
 800453a:	443b      	add	r3, r7
 800453c:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004540:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004544:	3301      	adds	r3, #1
 8004546:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800454a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800454e:	b29b      	uxth	r3, r3
 8004550:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004554:	429a      	cmp	r2, r3
 8004556:	d8e6      	bhi.n	8004526 <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004558:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800455c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004560:	18d4      	adds	r4, r2, r3
 8004562:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004566:	b29b      	uxth	r3, r3
 8004568:	3303      	adds	r3, #3
 800456a:	b29a      	uxth	r2, r3
 800456c:	f107 030c 	add.w	r3, r7, #12
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f00e fc14 	bl	8012da0 <CalculateDirectReverseCrc>
 8004578:	4603      	mov	r3, r0
 800457a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800457e:	4622      	mov	r2, r4
 8004580:	2120      	movs	r1, #32
 8004582:	f7fc f8d3 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8004586:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800458a:	3320      	adds	r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	da00      	bge.n	8004592 <Send_Vital_Data_Message+0x86e>
 8004590:	3307      	adds	r3, #7
 8004592:	10db      	asrs	r3, r3, #3
 8004594:	b29a      	uxth	r2, r3
 8004596:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800459a:	4413      	add	r3, r2
 800459c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045a4:	3320      	adds	r3, #32
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	425a      	negs	r2, r3
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	f002 0207 	and.w	r2, r2, #7
 80045b4:	bf58      	it	pl
 80045b6:	4253      	negpl	r3, r2
 80045b8:	b21b      	sxth	r3, r3
 80045ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <Send_Vital_Data_Message+0x8f0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0a5b      	lsrs	r3, r3, #9
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <Send_Vital_Data_Message+0x8c0>
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <Send_Vital_Data_Message+0x8f0>)
 80045ce:	791b      	ldrb	r3, [r3, #4]
 80045d0:	79fa      	ldrb	r2, [r7, #7]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d106      	bne.n	80045e4 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 80045d6:	4810      	ldr	r0, [pc, #64]	; (8004618 <Send_Vital_Data_Message+0x8f4>)
 80045d8:	f01e f860 	bl	802269c <puts>
		printf("Not Sending Reply");
 80045dc:	480f      	ldr	r0, [pc, #60]	; (800461c <Send_Vital_Data_Message+0x8f8>)
 80045de:	f01d ffc1 	bl	8022564 <iprintf>
 80045e2:	e009      	b.n	80045f8 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80045e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045e8:	b2d9      	uxtb	r1, r3
 80045ea:	79fa      	ldrb	r2, [r7, #7]
 80045ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 ffbd 	bl	8007570 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	3794      	adds	r7, #148	; 0x94
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd90      	pop	{r4, r7, pc}
 8004600:	20009c7c 	.word	0x20009c7c
 8004604:	08024450 	.word	0x08024450
 8004608:	200011c4 	.word	0x200011c4
 800460c:	08024474 	.word	0x08024474
 8004610:	08024498 	.word	0x08024498
 8004614:	2000195c 	.word	0x2000195c
 8004618:	080241e8 	.word	0x080241e8
 800461c:	08024200 	.word	0x08024200

08004620 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b0c0      	sub	sp, #256	; 0x100
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4603      	mov	r3, r0
 8004630:	70fb      	strb	r3, [r7, #3]
 8004632:	460b      	mov	r3, r1
 8004634:	70bb      	strb	r3, [r7, #2]
 8004636:	4613      	mov	r3, r2
 8004638:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 800464c:	f010 ff80 	bl	8015550 <HAL_GetTick>
 8004650:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 800465a:	2300      	movs	r3, #0
 800465c:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 8004666:	2300      	movs	r3, #0
 8004668:	667b      	str	r3, [r7, #100]	; 0x64
 800466a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800466e:	227c      	movs	r2, #124	; 0x7c
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f01d fe8e 	bl	8022394 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004678:	2300      	movs	r3, #0
 800467a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800467e:	2300      	movs	r3, #0
 8004680:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	b299      	uxth	r1, r3
 8004688:	78ba      	ldrb	r2, [r7, #2]
 800468a:	48c3      	ldr	r0, [pc, #780]	; (8004998 <Vital_Msg_extr_from_CAN+0x378>)
 800468c:	4613      	mov	r3, r2
 800468e:	015b      	lsls	r3, r3, #5
 8004690:	4413      	add	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4403      	add	r3, r0
 8004696:	3340      	adds	r3, #64	; 0x40
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	4299      	cmp	r1, r3
 800469c:	d11a      	bne.n	80046d4 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 800469e:	78ba      	ldrb	r2, [r7, #2]
 80046a0:	4613      	mov	r3, r2
 80046a2:	015b      	lsls	r3, r3, #5
 80046a4:	4413      	add	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4abb      	ldr	r2, [pc, #748]	; (8004998 <Vital_Msg_extr_from_CAN+0x378>)
 80046aa:	4413      	add	r3, r2
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f01d fe37 	bl	8022324 <memcmp>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80046bc:	78bb      	ldrb	r3, [r7, #2]
 80046be:	4ab7      	ldr	r2, [pc, #732]	; (800499c <Vital_Msg_extr_from_CAN+0x37c>)
 80046c0:	3366      	adds	r3, #102	; 0x66
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4619      	mov	r1, r3
 80046ca:	48b5      	ldr	r0, [pc, #724]	; (80049a0 <Vital_Msg_extr_from_CAN+0x380>)
 80046cc:	f01d ff4a 	bl	8022564 <iprintf>
			return;
 80046d0:	f000 bd98 	b.w	8005204 <Vital_Msg_extr_from_CAN+0xbe4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	3b05      	subs	r3, #5
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	441a      	add	r2, r3
 80046dc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80046e0:	2120      	movs	r1, #32
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb ff96 	bl	8000614 <ExtractBits>
 80046e8:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80046ec:	4bad      	ldr	r3, [pc, #692]	; (80049a4 <Vital_Msg_extr_from_CAN+0x384>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d034      	beq.n	8004762 <Vital_Msg_extr_from_CAN+0x142>
 80046f8:	4baa      	ldr	r3, [pc, #680]	; (80049a4 <Vital_Msg_extr_from_CAN+0x384>)
 80046fa:	791b      	ldrb	r3, [r3, #4]
 80046fc:	78ba      	ldrb	r2, [r7, #2]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d12f      	bne.n	8004762 <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 8004702:	2316      	movs	r3, #22
 8004704:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004708:	48a7      	ldr	r0, [pc, #668]	; (80049a8 <Vital_Msg_extr_from_CAN+0x388>)
 800470a:	f015 fbd3 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800470e:	4602      	mov	r2, r0
 8004710:	4ba6      	ldr	r3, [pc, #664]	; (80049ac <Vital_Msg_extr_from_CAN+0x38c>)
 8004712:	fba3 1302 	umull	r1, r3, r3, r2
 8004716:	0dd9      	lsrs	r1, r3, #23
 8004718:	460b      	mov	r3, r1
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	1a5b      	subs	r3, r3, r1
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 8004726:	48a2      	ldr	r0, [pc, #648]	; (80049b0 <Vital_Msg_extr_from_CAN+0x390>)
 8004728:	f01d ffb8 	bl	802269c <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800472c:	78ba      	ldrb	r2, [r7, #2]
 800472e:	49a1      	ldr	r1, [pc, #644]	; (80049b4 <Vital_Msg_extr_from_CAN+0x394>)
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	3308      	adds	r3, #8
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	489d      	ldr	r0, [pc, #628]	; (80049b8 <Vital_Msg_extr_from_CAN+0x398>)
 8004742:	f01d ff0f 	bl	8022564 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8004746:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800474a:	489c      	ldr	r0, [pc, #624]	; (80049bc <Vital_Msg_extr_from_CAN+0x39c>)
 800474c:	f01d ff0a 	bl	8022564 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8004750:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004758:	2118      	movs	r1, #24
 800475a:	2000      	movs	r0, #0
 800475c:	f7fb ffe6 	bl	800072c <InsertBits>
	{
 8004760:	e00e      	b.n	8004780 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004762:	78ba      	ldrb	r2, [r7, #2]
 8004764:	4993      	ldr	r1, [pc, #588]	; (80049b4 <Vital_Msg_extr_from_CAN+0x394>)
 8004766:	4613      	mov	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	3308      	adds	r3, #8
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004778:	2118      	movs	r1, #24
 800477a:	2000      	movs	r0, #0
 800477c:	f7fb ffd6 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004780:	2300      	movs	r3, #0
 8004782:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004786:	e011      	b.n	80047ac <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8004788:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	441a      	add	r2, r3
 8004790:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004794:	3303      	adds	r3, #3
 8004796:	7812      	ldrb	r2, [r2, #0]
 8004798:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800479c:	443b      	add	r3, r7
 800479e:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80047a2:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047a6:	3301      	adds	r3, #1
 80047a8:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80047ac:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	3b05      	subs	r3, #5
 80047b4:	429a      	cmp	r2, r3
 80047b6:	dbe7      	blt.n	8004788 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80047b8:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3303      	adds	r3, #3
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f00e fae9 	bl	8012da0 <CalculateDirectReverseCrc>
 80047ce:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 80047d2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80047d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047da:	429a      	cmp	r2, r3
 80047dc:	f000 8104 	beq.w	80049e8 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3305      	adds	r3, #5
 80047e4:	461a      	mov	r2, r3
 80047e6:	2108      	movs	r1, #8
 80047e8:	2000      	movs	r0, #0
 80047ea:	f7fb ff13 	bl	8000614 <ExtractBits>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 80ba 	bne.w	800496a <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 80047f6:	4872      	ldr	r0, [pc, #456]	; (80049c0 <Vital_Msg_extr_from_CAN+0x3a0>)
 80047f8:	f01d ff50 	bl	802269c <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80047fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	2100      	movs	r1, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f01d fdc5 	bl	8022394 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 800480a:	78ba      	ldrb	r2, [r7, #2]
 800480c:	4969      	ldr	r1, [pc, #420]	; (80049b4 <Vital_Msg_extr_from_CAN+0x394>)
 800480e:	4613      	mov	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	4413      	add	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	440b      	add	r3, r1
 8004818:	3308      	adds	r3, #8
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3301      	adds	r3, #1
 800481e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004822:	2118      	movs	r1, #24
 8004824:	2000      	movs	r0, #0
 8004826:	f7fb ff81 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800482a:	2300      	movs	r3, #0
 800482c:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004830:	e011      	b.n	8004856 <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8004832:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	441a      	add	r2, r3
 800483a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800483e:	3303      	adds	r3, #3
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004846:	443b      	add	r3, r7
 8004848:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800484c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004850:	3301      	adds	r3, #1
 8004852:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004856:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	3b05      	subs	r3, #5
 800485e:	429a      	cmp	r2, r3
 8004860:	dbe7      	blt.n	8004832 <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8004862:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004866:	b29b      	uxth	r3, r3
 8004868:	3303      	adds	r3, #3
 800486a:	b29a      	uxth	r2, r3
 800486c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f00e fa94 	bl	8012da0 <CalculateDirectReverseCrc>
 8004878:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	3b05      	subs	r3, #5
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	441a      	add	r2, r3
 8004884:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004888:	2120      	movs	r1, #32
 800488a:	4618      	mov	r0, r3
 800488c:	f7fb fec2 	bl	8000614 <ExtractBits>
 8004890:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 8004894:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004898:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800489c:	429a      	cmp	r2, r3
 800489e:	d14e      	bne.n	800493e <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 80048a0:	4848      	ldr	r0, [pc, #288]	; (80049c4 <Vital_Msg_extr_from_CAN+0x3a4>)
 80048a2:	f01d fefb 	bl	802269c <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 80048a6:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80048aa:	4847      	ldr	r0, [pc, #284]	; (80049c8 <Vital_Msg_extr_from_CAN+0x3a8>)
 80048ac:	f01d fe5a 	bl	8022564 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80048b0:	78ba      	ldrb	r2, [r7, #2]
 80048b2:	4940      	ldr	r1, [pc, #256]	; (80049b4 <Vital_Msg_extr_from_CAN+0x394>)
 80048b4:	4613      	mov	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	440b      	add	r3, r1
 80048be:	3308      	adds	r3, #8
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4619      	mov	r1, r3
 80048c4:	4841      	ldr	r0, [pc, #260]	; (80049cc <Vital_Msg_extr_from_CAN+0x3ac>)
 80048c6:	f01d fe4d 	bl	8022564 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80048ca:	78ba      	ldrb	r2, [r7, #2]
 80048cc:	4939      	ldr	r1, [pc, #228]	; (80049b4 <Vital_Msg_extr_from_CAN+0x394>)
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	440b      	add	r3, r1
 80048d8:	3308      	adds	r3, #8
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	1c59      	adds	r1, r3, #1
 80048de:	4835      	ldr	r0, [pc, #212]	; (80049b4 <Vital_Msg_extr_from_CAN+0x394>)
 80048e0:	4613      	mov	r3, r2
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	4413      	add	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4403      	add	r3, r0
 80048ea:	3308      	adds	r3, #8
 80048ec:	6019      	str	r1, [r3, #0]
 80048ee:	78b9      	ldrb	r1, [r7, #2]
 80048f0:	4830      	ldr	r0, [pc, #192]	; (80049b4 <Vital_Msg_extr_from_CAN+0x394>)
 80048f2:	4613      	mov	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4403      	add	r3, r0
 80048fc:	3308      	adds	r3, #8
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4833      	ldr	r0, [pc, #204]	; (80049d0 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004902:	010b      	lsls	r3, r1, #4
 8004904:	4403      	add	r3, r0
 8004906:	3308      	adds	r3, #8
 8004908:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800490a:	78bb      	ldrb	r3, [r7, #2]
 800490c:	4a30      	ldr	r2, [pc, #192]	; (80049d0 <Vital_Msg_extr_from_CAN+0x3b0>)
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	4413      	add	r3, r2
 8004912:	3308      	adds	r3, #8
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4619      	mov	r1, r3
 8004918:	482e      	ldr	r0, [pc, #184]	; (80049d4 <Vital_Msg_extr_from_CAN+0x3b4>)
 800491a:	f01d fe23 	bl	8022564 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800491e:	78bb      	ldrb	r3, [r7, #2]
 8004920:	78ba      	ldrb	r2, [r7, #2]
 8004922:	492b      	ldr	r1, [pc, #172]	; (80049d0 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	440b      	add	r3, r1
 8004928:	3308      	adds	r3, #8
 800492a:	6819      	ldr	r1, [r3, #0]
 800492c:	482a      	ldr	r0, [pc, #168]	; (80049d8 <Vital_Msg_extr_from_CAN+0x3b8>)
 800492e:	4613      	mov	r3, r2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4413      	add	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4403      	add	r3, r0
 8004938:	3308      	adds	r3, #8
 800493a:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 800493c:	e055      	b.n	80049ea <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800493e:	78bb      	ldrb	r3, [r7, #2]
 8004940:	4a16      	ldr	r2, [pc, #88]	; (800499c <Vital_Msg_extr_from_CAN+0x37c>)
 8004942:	3366      	adds	r3, #102	; 0x66
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4619      	mov	r1, r3
 800494c:	4823      	ldr	r0, [pc, #140]	; (80049dc <Vital_Msg_extr_from_CAN+0x3bc>)
 800494e:	f01d fe09 	bl	8022564 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004952:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004956:	4822      	ldr	r0, [pc, #136]	; (80049e0 <Vital_Msg_extr_from_CAN+0x3c0>)
 8004958:	f01d fe04 	bl	8022564 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 800495c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004960:	4820      	ldr	r0, [pc, #128]	; (80049e4 <Vital_Msg_extr_from_CAN+0x3c4>)
 8004962:	f01d fdff 	bl	8022564 <iprintf>
				return;
 8004966:	f000 bc4d 	b.w	8005204 <Vital_Msg_extr_from_CAN+0xbe4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800496a:	78bb      	ldrb	r3, [r7, #2]
 800496c:	4a0b      	ldr	r2, [pc, #44]	; (800499c <Vital_Msg_extr_from_CAN+0x37c>)
 800496e:	3366      	adds	r3, #102	; 0x66
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4619      	mov	r1, r3
 8004978:	4818      	ldr	r0, [pc, #96]	; (80049dc <Vital_Msg_extr_from_CAN+0x3bc>)
 800497a:	f01d fdf3 	bl	8022564 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 800497e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004982:	4817      	ldr	r0, [pc, #92]	; (80049e0 <Vital_Msg_extr_from_CAN+0x3c0>)
 8004984:	f01d fdee 	bl	8022564 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004988:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800498c:	4815      	ldr	r0, [pc, #84]	; (80049e4 <Vital_Msg_extr_from_CAN+0x3c4>)
 800498e:	f01d fde9 	bl	8022564 <iprintf>
			return;
 8004992:	f000 bc37 	b.w	8005204 <Vital_Msg_extr_from_CAN+0xbe4>
 8004996:	bf00      	nop
 8004998:	2000197c 	.word	0x2000197c
 800499c:	20000304 	.word	0x20000304
 80049a0:	080244bc 	.word	0x080244bc
 80049a4:	2000195c 	.word	0x2000195c
 80049a8:	20009c7c 	.word	0x20009c7c
 80049ac:	80008001 	.word	0x80008001
 80049b0:	08024214 	.word	0x08024214
 80049b4:	20001764 	.word	0x20001764
 80049b8:	08024234 	.word	0x08024234
 80049bc:	0802425c 	.word	0x0802425c
 80049c0:	08024284 	.word	0x08024284
 80049c4:	08024500 	.word	0x08024500
 80049c8:	080242b8 	.word	0x080242b8
 80049cc:	08024524 	.word	0x08024524
 80049d0:	200011c4 	.word	0x200011c4
 80049d4:	080242f8 	.word	0x080242f8
 80049d8:	20001674 	.word	0x20001674
 80049dc:	08024540 	.word	0x08024540
 80049e0:	08023f54 	.word	0x08023f54
 80049e4:	08023f64 	.word	0x08023f64
		}
	}
	ROLLOVER_VITAL_CAN:
 80049e8:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 80049ea:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80049ee:	3308      	adds	r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	da00      	bge.n	80049f6 <Vital_Msg_extr_from_CAN+0x3d6>
 80049f4:	3307      	adds	r3, #7
 80049f6:	10db      	asrs	r3, r3, #3
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80049fe:	4413      	add	r3, r2
 8004a00:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a04:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a08:	3308      	adds	r3, #8
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	b21b      	sxth	r3, r3
 8004a0e:	425a      	negs	r2, r3
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	f002 0207 	and.w	r2, r2, #7
 8004a18:	bf58      	it	pl
 8004a1a:	4253      	negpl	r3, r2
 8004a1c:	b21b      	sxth	r3, r3
 8004a1e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a22:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	441a      	add	r2, r3
 8004a2a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a2e:	2110      	movs	r1, #16
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fdef 	bl	8000614 <ExtractBits>
 8004a36:	4603      	mov	r3, r0
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004a3e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a42:	4619      	mov	r1, r3
 8004a44:	48c6      	ldr	r0, [pc, #792]	; (8004d60 <Vital_Msg_extr_from_CAN+0x740>)
 8004a46:	f01d fd8d 	bl	8022564 <iprintf>
	BITSTUFFINC(16);
 8004a4a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004a4e:	3310      	adds	r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	da00      	bge.n	8004a56 <Vital_Msg_extr_from_CAN+0x436>
 8004a54:	3307      	adds	r3, #7
 8004a56:	10db      	asrs	r3, r3, #3
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a5e:	4413      	add	r3, r2
 8004a60:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a64:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a68:	3310      	adds	r3, #16
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	b21b      	sxth	r3, r3
 8004a6e:	425a      	negs	r2, r3
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	f002 0207 	and.w	r2, r2, #7
 8004a78:	bf58      	it	pl
 8004a7a:	4253      	negpl	r3, r2
 8004a7c:	b21b      	sxth	r3, r3
 8004a7e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a82:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	441a      	add	r2, r3
 8004a8a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a8e:	2110      	movs	r1, #16
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fdbf 	bl	8000614 <ExtractBits>
 8004a96:	4603      	mov	r3, r0
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004a9e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	48af      	ldr	r0, [pc, #700]	; (8004d64 <Vital_Msg_extr_from_CAN+0x744>)
 8004aa6:	f01d fd5d 	bl	8022564 <iprintf>
	BITSTUFFINC(16);
 8004aaa:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004aae:	3310      	adds	r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	da00      	bge.n	8004ab6 <Vital_Msg_extr_from_CAN+0x496>
 8004ab4:	3307      	adds	r3, #7
 8004ab6:	10db      	asrs	r3, r3, #3
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004abe:	4413      	add	r3, r2
 8004ac0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ac4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ac8:	3310      	adds	r3, #16
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	b21b      	sxth	r3, r3
 8004ace:	425a      	negs	r2, r3
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	f002 0207 	and.w	r2, r2, #7
 8004ad8:	bf58      	it	pl
 8004ada:	4253      	negpl	r3, r2
 8004adc:	b21b      	sxth	r3, r3
 8004ade:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ae2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	441a      	add	r2, r3
 8004aea:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004aee:	2108      	movs	r1, #8
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fb fd8f 	bl	8000614 <ExtractBits>
 8004af6:	4603      	mov	r3, r0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004afe:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b02:	3308      	adds	r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da00      	bge.n	8004b0a <Vital_Msg_extr_from_CAN+0x4ea>
 8004b08:	3307      	adds	r3, #7
 8004b0a:	10db      	asrs	r3, r3, #3
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b12:	4413      	add	r3, r2
 8004b14:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b18:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	b21b      	sxth	r3, r3
 8004b22:	425a      	negs	r2, r3
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	f002 0207 	and.w	r2, r2, #7
 8004b2c:	bf58      	it	pl
 8004b2e:	4253      	negpl	r3, r2
 8004b30:	b21b      	sxth	r3, r3
 8004b32:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004b36:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b42:	2108      	movs	r1, #8
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fb fd65 	bl	8000614 <ExtractBits>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004b52:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b56:	3308      	adds	r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	da00      	bge.n	8004b5e <Vital_Msg_extr_from_CAN+0x53e>
 8004b5c:	3307      	adds	r3, #7
 8004b5e:	10db      	asrs	r3, r3, #3
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b66:	4413      	add	r3, r2
 8004b68:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b6c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b70:	3308      	adds	r3, #8
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	b21b      	sxth	r3, r3
 8004b76:	425a      	negs	r2, r3
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	f002 0207 	and.w	r2, r2, #7
 8004b80:	bf58      	it	pl
 8004b82:	4253      	negpl	r3, r2
 8004b84:	b21b      	sxth	r3, r3
 8004b86:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004b8a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	441a      	add	r2, r3
 8004b92:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b96:	2108      	movs	r1, #8
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fb fd3b 	bl	8000614 <ExtractBits>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004ba6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004baa:	3308      	adds	r3, #8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da00      	bge.n	8004bb2 <Vital_Msg_extr_from_CAN+0x592>
 8004bb0:	3307      	adds	r3, #7
 8004bb2:	10db      	asrs	r3, r3, #3
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bba:	4413      	add	r3, r2
 8004bbc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004bc0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	b21b      	sxth	r3, r3
 8004bca:	425a      	negs	r2, r3
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	f002 0207 	and.w	r2, r2, #7
 8004bd4:	bf58      	it	pl
 8004bd6:	4253      	negpl	r3, r2
 8004bd8:	b21b      	sxth	r3, r3
 8004bda:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004bde:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	441a      	add	r2, r3
 8004be6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bea:	2110      	movs	r1, #16
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb fd11 	bl	8000614 <ExtractBits>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004bf8:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004bfc:	3310      	adds	r3, #16
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da00      	bge.n	8004c04 <Vital_Msg_extr_from_CAN+0x5e4>
 8004c02:	3307      	adds	r3, #7
 8004c04:	10db      	asrs	r3, r3, #3
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c12:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c16:	3310      	adds	r3, #16
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	b21b      	sxth	r3, r3
 8004c1c:	425a      	negs	r2, r3
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	f002 0207 	and.w	r2, r2, #7
 8004c26:	bf58      	it	pl
 8004c28:	4253      	negpl	r3, r2
 8004c2a:	b21b      	sxth	r3, r3
 8004c2c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004c30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80fe 	beq.w	8004e38 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c3c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	441a      	add	r2, r3
 8004c44:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c48:	2108      	movs	r1, #8
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fce2 	bl	8000614 <ExtractBits>
 8004c50:	4603      	mov	r3, r0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004c58:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	da00      	bge.n	8004c64 <Vital_Msg_extr_from_CAN+0x644>
 8004c62:	3307      	adds	r3, #7
 8004c64:	10db      	asrs	r3, r3, #3
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c72:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c76:	3308      	adds	r3, #8
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	b21b      	sxth	r3, r3
 8004c7c:	425a      	negs	r2, r3
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	f002 0207 	and.w	r2, r2, #7
 8004c86:	bf58      	it	pl
 8004c88:	4253      	negpl	r3, r2
 8004c8a:	b21b      	sxth	r3, r3
 8004c8c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c90:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	441a      	add	r2, r3
 8004c98:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c9c:	2108      	movs	r1, #8
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fb fcb8 	bl	8000614 <ExtractBits>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004cac:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da00      	bge.n	8004cb8 <Vital_Msg_extr_from_CAN+0x698>
 8004cb6:	3307      	adds	r3, #7
 8004cb8:	10db      	asrs	r3, r3, #3
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004cc6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cca:	3308      	adds	r3, #8
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	b21b      	sxth	r3, r3
 8004cd0:	425a      	negs	r2, r3
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	f002 0207 	and.w	r2, r2, #7
 8004cda:	bf58      	it	pl
 8004cdc:	4253      	negpl	r3, r2
 8004cde:	b21b      	sxth	r3, r3
 8004ce0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ce4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	441a      	add	r2, r3
 8004cec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cf0:	2108      	movs	r1, #8
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fb fc8e 	bl	8000614 <ExtractBits>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004cfe:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d02:	3308      	adds	r3, #8
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	da00      	bge.n	8004d0a <Vital_Msg_extr_from_CAN+0x6ea>
 8004d08:	3307      	adds	r3, #7
 8004d0a:	10db      	asrs	r3, r3, #3
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d12:	4413      	add	r3, r2
 8004d14:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d18:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	b21b      	sxth	r3, r3
 8004d22:	425a      	negs	r2, r3
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	f002 0207 	and.w	r2, r2, #7
 8004d2c:	bf58      	it	pl
 8004d2e:	4253      	negpl	r3, r2
 8004d30:	b21b      	sxth	r3, r3
 8004d32:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d36:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	441a      	add	r2, r3
 8004d3e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d42:	2108      	movs	r1, #8
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fb fc65 	bl	8000614 <ExtractBits>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004d50:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d54:	3308      	adds	r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da06      	bge.n	8004d68 <Vital_Msg_extr_from_CAN+0x748>
 8004d5a:	3307      	adds	r3, #7
 8004d5c:	e004      	b.n	8004d68 <Vital_Msg_extr_from_CAN+0x748>
 8004d5e:	bf00      	nop
 8004d60:	08024044 	.word	0x08024044
 8004d64:	0802404c 	.word	0x0802404c
 8004d68:	10db      	asrs	r3, r3, #3
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d70:	4413      	add	r3, r2
 8004d72:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d76:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	b21b      	sxth	r3, r3
 8004d80:	425a      	negs	r2, r3
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	f002 0207 	and.w	r2, r2, #7
 8004d8a:	bf58      	it	pl
 8004d8c:	4253      	negpl	r3, r2
 8004d8e:	b21b      	sxth	r3, r3
 8004d90:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d94:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004da0:	2108      	movs	r1, #8
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb fc36 	bl	8000614 <ExtractBits>
 8004da8:	4603      	mov	r3, r0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004dae:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004db2:	3308      	adds	r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da00      	bge.n	8004dba <Vital_Msg_extr_from_CAN+0x79a>
 8004db8:	3307      	adds	r3, #7
 8004dba:	10db      	asrs	r3, r3, #3
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004dc8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004dcc:	3308      	adds	r3, #8
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	b21b      	sxth	r3, r3
 8004dd2:	425a      	negs	r2, r3
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	f002 0207 	and.w	r2, r2, #7
 8004ddc:	bf58      	it	pl
 8004dde:	4253      	negpl	r3, r2
 8004de0:	b21b      	sxth	r3, r3
 8004de2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004de6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	441a      	add	r2, r3
 8004dee:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004df2:	2108      	movs	r1, #8
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fb fc0d 	bl	8000614 <ExtractBits>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004e00:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e04:	3308      	adds	r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da00      	bge.n	8004e0c <Vital_Msg_extr_from_CAN+0x7ec>
 8004e0a:	3307      	adds	r3, #7
 8004e0c:	10db      	asrs	r3, r3, #3
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e14:	4413      	add	r3, r2
 8004e16:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e1a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e1e:	3308      	adds	r3, #8
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	b21b      	sxth	r3, r3
 8004e24:	425a      	negs	r2, r3
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	f002 0207 	and.w	r2, r2, #7
 8004e2e:	bf58      	it	pl
 8004e30:	4253      	negpl	r3, r2
 8004e32:	b21b      	sxth	r3, r3
 8004e34:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8004e38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e48:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	441a      	add	r2, r3
 8004e50:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e54:	2108      	movs	r1, #8
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fb fbdc 	bl	8000614 <ExtractBits>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8004e64:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e68:	3308      	adds	r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	da00      	bge.n	8004e70 <Vital_Msg_extr_from_CAN+0x850>
 8004e6e:	3307      	adds	r3, #7
 8004e70:	10db      	asrs	r3, r3, #3
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e78:	4413      	add	r3, r2
 8004e7a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e7e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e82:	3308      	adds	r3, #8
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	b21b      	sxth	r3, r3
 8004e88:	425a      	negs	r2, r3
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	f002 0207 	and.w	r2, r2, #7
 8004e92:	bf58      	it	pl
 8004e94:	4253      	negpl	r3, r2
 8004e96:	b21b      	sxth	r3, r3
 8004e98:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8004e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	484b      	ldr	r0, [pc, #300]	; (8004fd0 <Vital_Msg_extr_from_CAN+0x9b0>)
 8004ea4:	f01d fb5e 	bl	8022564 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ea8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	441a      	add	r2, r3
 8004eb0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004eb4:	2108      	movs	r1, #8
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb fbac 	bl	8000614 <ExtractBits>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8004ec4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ec8:	3308      	adds	r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	da00      	bge.n	8004ed0 <Vital_Msg_extr_from_CAN+0x8b0>
 8004ece:	3307      	adds	r3, #7
 8004ed0:	10db      	asrs	r3, r3, #3
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ed8:	4413      	add	r3, r2
 8004eda:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ede:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	b21b      	sxth	r3, r3
 8004ee8:	425a      	negs	r2, r3
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	f002 0207 	and.w	r2, r2, #7
 8004ef2:	bf58      	it	pl
 8004ef4:	4253      	negpl	r3, r2
 8004ef6:	b21b      	sxth	r3, r3
 8004ef8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 8004efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 8004f08:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d007      	beq.n	8004f20 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 8004f10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f14:	08db      	lsrs	r3, r3, #3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004f1e:	e004      	b.n	8004f2a <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 8004f20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f24:	08db      	lsrs	r3, r3, #3
 8004f26:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004f30:	e040      	b.n	8004fb4 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f32:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	441a      	add	r2, r3
 8004f3a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f3e:	2108      	movs	r1, #8
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fb fb67 	bl	8000614 <ExtractBits>
 8004f46:	4602      	mov	r2, r0
 8004f48:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f52:	443b      	add	r3, r7
 8004f54:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8004f58:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8004f5c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f64:	443b      	add	r3, r7
 8004f66:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4819      	ldr	r0, [pc, #100]	; (8004fd4 <Vital_Msg_extr_from_CAN+0x9b4>)
 8004f6e:	f01d faf9 	bl	8022564 <iprintf>
		BITSTUFFINC(8);
 8004f72:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f76:	3308      	adds	r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da00      	bge.n	8004f7e <Vital_Msg_extr_from_CAN+0x95e>
 8004f7c:	3307      	adds	r3, #7
 8004f7e:	10db      	asrs	r3, r3, #3
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f86:	4413      	add	r3, r2
 8004f88:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f8c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f90:	3308      	adds	r3, #8
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	b21b      	sxth	r3, r3
 8004f96:	425a      	negs	r2, r3
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	f002 0207 	and.w	r2, r2, #7
 8004fa0:	bf58      	it	pl
 8004fa2:	4253      	negpl	r3, r2
 8004fa4:	b21b      	sxth	r3, r3
 8004fa6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004faa:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004fb4:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d3b7      	bcc.n	8004f32 <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 8004fc2:	200a      	movs	r0, #10
 8004fc4:	f01d fae6 	bl	8022594 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004fce:	e037      	b.n	8005040 <Vital_Msg_extr_from_CAN+0xa20>
 8004fd0:	0802455c 	.word	0x0802455c
 8004fd4:	08024564 	.word	0x08024564
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004fd8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	441a      	add	r2, r3
 8004fe0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fe4:	2108      	movs	r1, #8
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fb fb14 	bl	8000614 <ExtractBits>
 8004fec:	4602      	mov	r2, r0
 8004fee:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ff8:	443b      	add	r3, r7
 8004ffa:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 8004ffe:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005002:	3308      	adds	r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	da00      	bge.n	800500a <Vital_Msg_extr_from_CAN+0x9ea>
 8005008:	3307      	adds	r3, #7
 800500a:	10db      	asrs	r3, r3, #3
 800500c:	b29a      	uxth	r2, r3
 800500e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005012:	4413      	add	r3, r2
 8005014:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005018:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800501c:	3308      	adds	r3, #8
 800501e:	b29b      	uxth	r3, r3
 8005020:	b21b      	sxth	r3, r3
 8005022:	425a      	negs	r2, r3
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	f002 0207 	and.w	r2, r2, #7
 800502c:	bf58      	it	pl
 800502e:	4253      	negpl	r3, r2
 8005030:	b21b      	sxth	r3, r3
 8005032:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005036:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800503a:	3301      	adds	r3, #1
 800503c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005040:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005044:	b29b      	uxth	r3, r3
 8005046:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 800504a:	429a      	cmp	r2, r3
 800504c:	d3c4      	bcc.n	8004fd8 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 800504e:	f107 0308 	add.w	r3, r7, #8
 8005052:	3301      	adds	r3, #1
 8005054:	2210      	movs	r2, #16
 8005056:	2100      	movs	r1, #0
 8005058:	4618      	mov	r0, r3
 800505a:	f01d f99b 	bl	8022394 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 800505e:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005062:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005066:	1d59      	adds	r1, r3, #5
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	3301      	adds	r3, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f01d f968 	bl	8022344 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 8005074:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005078:	b21a      	sxth	r2, r3
 800507a:	f107 0308 	add.w	r3, r7, #8
 800507e:	3301      	adds	r3, #1
 8005080:	4619      	mov	r1, r3
 8005082:	2000      	movs	r0, #0
 8005084:	f00d fdd2 	bl	8012c2c <GetCRC16>
 8005088:	4603      	mov	r3, r0
 800508a:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 800508c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005090:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 8005092:	78bb      	ldrb	r3, [r7, #2]
 8005094:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 8005096:	78bb      	ldrb	r3, [r7, #2]
 8005098:	4a5c      	ldr	r2, [pc, #368]	; (800520c <Vital_Msg_extr_from_CAN+0xbec>)
 800509a:	4413      	add	r3, r2
 800509c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d177      	bne.n	8005194 <Vital_Msg_extr_from_CAN+0xb74>
 80050a4:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d173      	bne.n	8005194 <Vital_Msg_extr_from_CAN+0xb74>
 80050ac:	8b79      	ldrh	r1, [r7, #26]
 80050ae:	78ba      	ldrb	r2, [r7, #2]
 80050b0:	4857      	ldr	r0, [pc, #348]	; (8005210 <Vital_Msg_extr_from_CAN+0xbf0>)
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4403      	add	r3, r0
 80050bc:	3312      	adds	r3, #18
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	4299      	cmp	r1, r3
 80050c2:	d067      	beq.n	8005194 <Vital_Msg_extr_from_CAN+0xb74>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80050c4:	78ba      	ldrb	r2, [r7, #2]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4a50      	ldr	r2, [pc, #320]	; (8005210 <Vital_Msg_extr_from_CAN+0xbf0>)
 80050d0:	4413      	add	r3, r2
 80050d2:	3301      	adds	r3, #1
 80050d4:	2210      	movs	r2, #16
 80050d6:	2100      	movs	r1, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	f01d f95b 	bl	8022394 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80050de:	78ba      	ldrb	r2, [r7, #2]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4a49      	ldr	r2, [pc, #292]	; (8005210 <Vital_Msg_extr_from_CAN+0xbf0>)
 80050ea:	4413      	add	r3, r2
 80050ec:	f107 0108 	add.w	r1, r7, #8
 80050f0:	2214      	movs	r2, #20
 80050f2:	4618      	mov	r0, r3
 80050f4:	f01d f926 	bl	8022344 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80050f8:	78bb      	ldrb	r3, [r7, #2]
 80050fa:	4946      	ldr	r1, [pc, #280]	; (8005214 <Vital_Msg_extr_from_CAN+0xbf4>)
 80050fc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005104:	78bb      	ldrb	r3, [r7, #2]
 8005106:	4a44      	ldr	r2, [pc, #272]	; (8005218 <Vital_Msg_extr_from_CAN+0xbf8>)
 8005108:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800510c:	78ba      	ldrb	r2, [r7, #2]
 800510e:	4840      	ldr	r0, [pc, #256]	; (8005210 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4403      	add	r3, r0
 800511a:	3312      	adds	r3, #18
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	4299      	cmp	r1, r3
 8005120:	d038      	beq.n	8005194 <Vital_Msg_extr_from_CAN+0xb74>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005122:	78ba      	ldrb	r2, [r7, #2]
 8005124:	78b9      	ldrb	r1, [r7, #2]
 8005126:	483a      	ldr	r0, [pc, #232]	; (8005210 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4403      	add	r3, r0
 8005132:	3312      	adds	r3, #18
 8005134:	881a      	ldrh	r2, [r3, #0]
 8005136:	4b38      	ldr	r3, [pc, #224]	; (8005218 <Vital_Msg_extr_from_CAN+0xbf8>)
 8005138:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 800513c:	2214      	movs	r2, #20
 800513e:	2100      	movs	r1, #0
 8005140:	4836      	ldr	r0, [pc, #216]	; (800521c <Vital_Msg_extr_from_CAN+0xbfc>)
 8005142:	f01d f927 	bl	8022394 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005146:	78ba      	ldrb	r2, [r7, #2]
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4a2f      	ldr	r2, [pc, #188]	; (8005210 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005152:	4413      	add	r3, r2
 8005154:	2214      	movs	r2, #20
 8005156:	4619      	mov	r1, r3
 8005158:	4830      	ldr	r0, [pc, #192]	; (800521c <Vital_Msg_extr_from_CAN+0xbfc>)
 800515a:	f01d f8f3 	bl	8022344 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800515e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8005162:	f00a f98f 	bl	800f484 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8005166:	78bb      	ldrb	r3, [r7, #2]
 8005168:	4a2d      	ldr	r2, [pc, #180]	; (8005220 <Vital_Msg_extr_from_CAN+0xc00>)
 800516a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d110      	bne.n	8005194 <Vital_Msg_extr_from_CAN+0xb74>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005172:	78bb      	ldrb	r3, [r7, #2]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <Vital_Msg_extr_from_CAN+0xc04>)
 8005178:	4413      	add	r3, r2
 800517a:	1c98      	adds	r0, r3, #2
 800517c:	78ba      	ldrb	r2, [r7, #2]
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4a22      	ldr	r2, [pc, #136]	; (8005210 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005188:	4413      	add	r3, r2
 800518a:	3301      	adds	r3, #1
 800518c:	2210      	movs	r2, #16
 800518e:	4619      	mov	r1, r3
 8005190:	f01d f8d8 	bl	8022344 <memcpy>





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005194:	78ba      	ldrb	r2, [r7, #2]
 8005196:	4924      	ldr	r1, [pc, #144]	; (8005228 <Vital_Msg_extr_from_CAN+0xc08>)
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	440b      	add	r3, r1
 80051a2:	78ba      	ldrb	r2, [r7, #2]
 80051a4:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80051a6:	78ba      	ldrb	r2, [r7, #2]
 80051a8:	491f      	ldr	r1, [pc, #124]	; (8005228 <Vital_Msg_extr_from_CAN+0xc08>)
 80051aa:	4613      	mov	r3, r2
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	4413      	add	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	440b      	add	r3, r1
 80051b4:	3301      	adds	r3, #1
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80051ba:	2218      	movs	r2, #24
 80051bc:	2100      	movs	r1, #0
 80051be:	481b      	ldr	r0, [pc, #108]	; (800522c <Vital_Msg_extr_from_CAN+0xc0c>)
 80051c0:	f01d f8e8 	bl	8022394 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80051c4:	78ba      	ldrb	r2, [r7, #2]
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4a16      	ldr	r2, [pc, #88]	; (8005228 <Vital_Msg_extr_from_CAN+0xc08>)
 80051d0:	4413      	add	r3, r2
 80051d2:	2218      	movs	r2, #24
 80051d4:	4619      	mov	r1, r3
 80051d6:	4815      	ldr	r0, [pc, #84]	; (800522c <Vital_Msg_extr_from_CAN+0xc0c>)
 80051d8:	f01d f8b4 	bl	8022344 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 80051dc:	f240 2002 	movw	r0, #514	; 0x202
 80051e0:	f00a f950 	bl	800f484 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80051e4:	78ba      	ldrb	r2, [r7, #2]
 80051e6:	4910      	ldr	r1, [pc, #64]	; (8005228 <Vital_Msg_extr_from_CAN+0xc08>)
 80051e8:	4613      	mov	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4413      	add	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	440b      	add	r3, r1
 80051f2:	3301      	adds	r3, #1
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80051f8:	78bb      	ldrb	r3, [r7, #2]
 80051fa:	490d      	ldr	r1, [pc, #52]	; (8005230 <Vital_Msg_extr_from_CAN+0xc10>)
 80051fc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 8005204:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20000304 	.word	0x20000304
 8005210:	20001e80 	.word	0x20001e80
 8005214:	20000ed8 	.word	0x20000ed8
 8005218:	20000f00 	.word	0x20000f00
 800521c:	20002010 	.word	0x20002010
 8005220:	20000ec4 	.word	0x20000ec4
 8005224:	200010e4 	.word	0x200010e4
 8005228:	20001674 	.word	0x20001674
 800522c:	20001854 	.word	0x20001854
 8005230:	20000e44 	.word	0x20000e44

08005234 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b095      	sub	sp, #84	; 0x54
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	4608      	mov	r0, r1
 800523e:	4611      	mov	r1, r2
 8005240:	461a      	mov	r2, r3
 8005242:	4603      	mov	r3, r0
 8005244:	70fb      	strb	r3, [r7, #3]
 8005246:	460b      	mov	r3, r1
 8005248:	70bb      	strb	r3, [r7, #2]
 800524a:	4613      	mov	r3, r2
 800524c:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 800524e:	2300      	movs	r3, #0
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	f107 030c 	add.w	r3, r7, #12
 8005256:	2224      	movs	r2, #36	; 0x24
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f01d f89a 	bl	8022394 <memset>
	uint8_t uc_index = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = CLEAR;
 800526e:	2300      	movs	r3, #0
 8005270:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005274:	f010 f96c 	bl	8015550 <HAL_GetTick>
 8005278:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 8005280:	2300      	movs	r3, #0
 8005282:	873b      	strh	r3, [r7, #56]	; 0x38
 8005284:	2300      	movs	r3, #0
 8005286:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005288:	499a      	ldr	r1, [pc, #616]	; (80054f4 <Status_Msg_Extr+0x2c0>)
 800528a:	489b      	ldr	r0, [pc, #620]	; (80054f8 <Status_Msg_Extr+0x2c4>)
 800528c:	f7fa ffd8 	bl	8000240 <strcmp>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 812c 	beq.w	80054f0 <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005298:	4b98      	ldr	r3, [pc, #608]	; (80054fc <Status_Msg_Extr+0x2c8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d02c      	beq.n	80052fe <Status_Msg_Extr+0xca>
 80052a4:	4b95      	ldr	r3, [pc, #596]	; (80054fc <Status_Msg_Extr+0x2c8>)
 80052a6:	791b      	ldrb	r3, [r3, #4]
 80052a8:	78ba      	ldrb	r2, [r7, #2]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d127      	bne.n	80052fe <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 80052b2:	4893      	ldr	r0, [pc, #588]	; (8005500 <Status_Msg_Extr+0x2cc>)
 80052b4:	f014 fdfe 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b92      	ldr	r3, [pc, #584]	; (8005504 <Status_Msg_Extr+0x2d0>)
 80052bc:	fba3 1302 	umull	r1, r3, r3, r2
 80052c0:	0bd9      	lsrs	r1, r3, #15
 80052c2:	460b      	mov	r3, r1
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	1a5b      	subs	r3, r3, r1
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 80052cc:	488e      	ldr	r0, [pc, #568]	; (8005508 <Status_Msg_Extr+0x2d4>)
 80052ce:	f01d f9e5 	bl	802269c <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80052d2:	78bb      	ldrb	r3, [r7, #2]
 80052d4:	4a8d      	ldr	r2, [pc, #564]	; (800550c <Status_Msg_Extr+0x2d8>)
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4413      	add	r3, r2
 80052da:	3308      	adds	r3, #8
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4619      	mov	r1, r3
 80052e0:	488b      	ldr	r0, [pc, #556]	; (8005510 <Status_Msg_Extr+0x2dc>)
 80052e2:	f01d f93f 	bl	8022564 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80052e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052e8:	488a      	ldr	r0, [pc, #552]	; (8005514 <Status_Msg_Extr+0x2e0>)
 80052ea:	f01d f93b 	bl	8022564 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 80052ee:	f107 0208 	add.w	r2, r7, #8
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2118      	movs	r1, #24
 80052f6:	2000      	movs	r0, #0
 80052f8:	f7fb fa18 	bl	800072c <InsertBits>
	{
 80052fc:	e00b      	b.n	8005316 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80052fe:	78bb      	ldrb	r3, [r7, #2]
 8005300:	4a82      	ldr	r2, [pc, #520]	; (800550c <Status_Msg_Extr+0x2d8>)
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	4413      	add	r3, r2
 8005306:	3308      	adds	r3, #8
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f107 0208 	add.w	r2, r7, #8
 800530e:	2118      	movs	r1, #24
 8005310:	2000      	movs	r0, #0
 8005312:	f7fb fa0b 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005316:	2300      	movs	r3, #0
 8005318:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800531c:	e010      	b.n	8005340 <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 800531e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	441a      	add	r2, r3
 8005326:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800532a:	3303      	adds	r3, #3
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	3350      	adds	r3, #80	; 0x50
 8005330:	443b      	add	r3, r7
 8005332:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005336:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800533a:	3301      	adds	r3, #1
 800533c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005340:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	3b05      	subs	r3, #5
 8005348:	429a      	cmp	r2, r3
 800534a:	dbe8      	blt.n	800531e <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 800534c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005350:	b29b      	uxth	r3, r3
 8005352:	3303      	adds	r3, #3
 8005354:	b29a      	uxth	r2, r3
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f00d fd1f 	bl	8012da0 <CalculateDirectReverseCrc>
 8005362:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	3b05      	subs	r3, #5
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	441a      	add	r2, r3
 800536c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800536e:	2120      	movs	r1, #32
 8005370:	4618      	mov	r0, r3
 8005372:	f7fb f94f 	bl	8000614 <ExtractBits>
 8005376:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800537a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800537c:	429a      	cmp	r2, r3
 800537e:	f000 80df 	beq.w	8005540 <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3305      	adds	r3, #5
 8005386:	461a      	mov	r2, r3
 8005388:	2108      	movs	r1, #8
 800538a:	2000      	movs	r0, #0
 800538c:	f7fb f942 	bl	8000614 <ExtractBits>
 8005390:	4603      	mov	r3, r0
 8005392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 8005396:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800539a:	2b00      	cmp	r3, #0
 800539c:	d004      	beq.n	80053a8 <Status_Msg_Extr+0x174>
 800539e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	f040 8090 	bne.w	80054c8 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80053a8:	78bb      	ldrb	r3, [r7, #2]
 80053aa:	4a5b      	ldr	r2, [pc, #364]	; (8005518 <Status_Msg_Extr+0x2e4>)
 80053ac:	3366      	adds	r3, #102	; 0x66
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4619      	mov	r1, r3
 80053b6:	4859      	ldr	r0, [pc, #356]	; (800551c <Status_Msg_Extr+0x2e8>)
 80053b8:	f01d f8d4 	bl	8022564 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 80053bc:	f107 0308 	add.w	r3, r7, #8
 80053c0:	2228      	movs	r2, #40	; 0x28
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f01c ffe5 	bl	8022394 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80053ca:	78bb      	ldrb	r3, [r7, #2]
 80053cc:	4a4f      	ldr	r2, [pc, #316]	; (800550c <Status_Msg_Extr+0x2d8>)
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	4413      	add	r3, r2
 80053d2:	3308      	adds	r3, #8
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	f107 0208 	add.w	r2, r7, #8
 80053dc:	2118      	movs	r1, #24
 80053de:	2000      	movs	r0, #0
 80053e0:	f7fb f9a4 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80053ea:	e010      	b.n	800540e <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 80053ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	441a      	add	r2, r3
 80053f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053f8:	3303      	adds	r3, #3
 80053fa:	7812      	ldrb	r2, [r2, #0]
 80053fc:	3350      	adds	r3, #80	; 0x50
 80053fe:	443b      	add	r3, r7
 8005400:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005404:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005408:	3301      	adds	r3, #1
 800540a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800540e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	3b05      	subs	r3, #5
 8005416:	429a      	cmp	r2, r3
 8005418:	dbe8      	blt.n	80053ec <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 800541a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800541e:	b29b      	uxth	r3, r3
 8005420:	3303      	adds	r3, #3
 8005422:	b29a      	uxth	r2, r3
 8005424:	f107 0308 	add.w	r3, r7, #8
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f00d fcb8 	bl	8012da0 <CalculateDirectReverseCrc>
 8005430:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 8005432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005436:	429a      	cmp	r2, r3
 8005438:	d132      	bne.n	80054a0 <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 800543a:	4839      	ldr	r0, [pc, #228]	; (8005520 <Status_Msg_Extr+0x2ec>)
 800543c:	f01d f92e 	bl	802269c <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005440:	78bb      	ldrb	r3, [r7, #2]
 8005442:	4a32      	ldr	r2, [pc, #200]	; (800550c <Status_Msg_Extr+0x2d8>)
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	4413      	add	r3, r2
 8005448:	3308      	adds	r3, #8
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4619      	mov	r1, r3
 800544e:	4835      	ldr	r0, [pc, #212]	; (8005524 <Status_Msg_Extr+0x2f0>)
 8005450:	f01d f888 	bl	8022564 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005454:	78bb      	ldrb	r3, [r7, #2]
 8005456:	492d      	ldr	r1, [pc, #180]	; (800550c <Status_Msg_Extr+0x2d8>)
 8005458:	011a      	lsls	r2, r3, #4
 800545a:	440a      	add	r2, r1
 800545c:	3208      	adds	r2, #8
 800545e:	6812      	ldr	r2, [r2, #0]
 8005460:	3201      	adds	r2, #1
 8005462:	492a      	ldr	r1, [pc, #168]	; (800550c <Status_Msg_Extr+0x2d8>)
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	440b      	add	r3, r1
 8005468:	3308      	adds	r3, #8
 800546a:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800546c:	78bb      	ldrb	r3, [r7, #2]
 800546e:	4a27      	ldr	r2, [pc, #156]	; (800550c <Status_Msg_Extr+0x2d8>)
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	4413      	add	r3, r2
 8005474:	3308      	adds	r3, #8
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4619      	mov	r1, r3
 800547a:	482b      	ldr	r0, [pc, #172]	; (8005528 <Status_Msg_Extr+0x2f4>)
 800547c:	f01d f872 	bl	8022564 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005480:	78bb      	ldrb	r3, [r7, #2]
 8005482:	78ba      	ldrb	r2, [r7, #2]
 8005484:	4921      	ldr	r1, [pc, #132]	; (800550c <Status_Msg_Extr+0x2d8>)
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	440b      	add	r3, r1
 800548a:	3308      	adds	r3, #8
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	4827      	ldr	r0, [pc, #156]	; (800552c <Status_Msg_Extr+0x2f8>)
 8005490:	4613      	mov	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	4413      	add	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4403      	add	r3, r0
 800549a:	3308      	adds	r3, #8
 800549c:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 800549e:	e050      	b.n	8005542 <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054a0:	78bb      	ldrb	r3, [r7, #2]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <Status_Msg_Extr+0x2e4>)
 80054a4:	3366      	adds	r3, #102	; 0x66
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4619      	mov	r1, r3
 80054ae:	4820      	ldr	r0, [pc, #128]	; (8005530 <Status_Msg_Extr+0x2fc>)
 80054b0:	f01d f858 	bl	8022564 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80054b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054b6:	481f      	ldr	r0, [pc, #124]	; (8005534 <Status_Msg_Extr+0x300>)
 80054b8:	f01d f854 	bl	8022564 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80054bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054be:	481e      	ldr	r0, [pc, #120]	; (8005538 <Status_Msg_Extr+0x304>)
 80054c0:	f01d f850 	bl	8022564 <iprintf>
				return;
 80054c4:	f000 bc2c 	b.w	8005d20 <Status_Msg_Extr+0xaec>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054c8:	78bb      	ldrb	r3, [r7, #2]
 80054ca:	4a13      	ldr	r2, [pc, #76]	; (8005518 <Status_Msg_Extr+0x2e4>)
 80054cc:	3366      	adds	r3, #102	; 0x66
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4619      	mov	r1, r3
 80054d6:	4819      	ldr	r0, [pc, #100]	; (800553c <Status_Msg_Extr+0x308>)
 80054d8:	f01d f844 	bl	8022564 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80054dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054de:	4815      	ldr	r0, [pc, #84]	; (8005534 <Status_Msg_Extr+0x300>)
 80054e0:	f01d f840 	bl	8022564 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80054e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054e6:	4814      	ldr	r0, [pc, #80]	; (8005538 <Status_Msg_Extr+0x304>)
 80054e8:	f01d f83c 	bl	8022564 <iprintf>
			return;
 80054ec:	f000 bc18 	b.w	8005d20 <Status_Msg_Extr+0xaec>
		goto ROLLOVER_STATUS;
 80054f0:	bf00      	nop
 80054f2:	e026      	b.n	8005542 <Status_Msg_Extr+0x30e>
 80054f4:	08023d10 	.word	0x08023d10
 80054f8:	20000305 	.word	0x20000305
 80054fc:	2000195c 	.word	0x2000195c
 8005500:	20009c7c 	.word	0x20009c7c
 8005504:	80008001 	.word	0x80008001
 8005508:	08024574 	.word	0x08024574
 800550c:	200011c4 	.word	0x200011c4
 8005510:	08024594 	.word	0x08024594
 8005514:	0802425c 	.word	0x0802425c
 8005518:	20000304 	.word	0x20000304
 800551c:	080245b8 	.word	0x080245b8
 8005520:	080242a0 	.word	0x080242a0
 8005524:	080245dc 	.word	0x080245dc
 8005528:	080245f4 	.word	0x080245f4
 800552c:	20001674 	.word	0x20001674
 8005530:	0802460c 	.word	0x0802460c
 8005534:	08023f54 	.word	0x08023f54
 8005538:	08023f64 	.word	0x08023f64
 800553c:	0802462c 	.word	0x0802462c
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005540:	bf00      	nop

	BITSTUFFINC(8);
 8005542:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005546:	3308      	adds	r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	da00      	bge.n	800554e <Status_Msg_Extr+0x31a>
 800554c:	3307      	adds	r3, #7
 800554e:	10db      	asrs	r3, r3, #3
 8005550:	b29a      	uxth	r2, r3
 8005552:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005554:	4413      	add	r3, r2
 8005556:	873b      	strh	r3, [r7, #56]	; 0x38
 8005558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800555a:	3308      	adds	r3, #8
 800555c:	b29b      	uxth	r3, r3
 800555e:	b21b      	sxth	r3, r3
 8005560:	425a      	negs	r2, r3
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	f002 0207 	and.w	r2, r2, #7
 800556a:	bf58      	it	pl
 800556c:	4253      	negpl	r3, r2
 800556e:	b21b      	sxth	r3, r3
 8005570:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005572:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	441a      	add	r2, r3
 8005578:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800557a:	2110      	movs	r1, #16
 800557c:	4618      	mov	r0, r3
 800557e:	f7fb f849 	bl	8000614 <ExtractBits>
 8005582:	4603      	mov	r3, r0
 8005584:	78ba      	ldrb	r2, [r7, #2]
 8005586:	b298      	uxth	r0, r3
 8005588:	49ab      	ldr	r1, [pc, #684]	; (8005838 <Status_Msg_Extr+0x604>)
 800558a:	4613      	mov	r3, r2
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	3306      	adds	r3, #6
 8005596:	4602      	mov	r2, r0
 8005598:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 800559a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800559e:	3310      	adds	r3, #16
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	da00      	bge.n	80055a6 <Status_Msg_Extr+0x372>
 80055a4:	3307      	adds	r3, #7
 80055a6:	10db      	asrs	r3, r3, #3
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055ac:	4413      	add	r3, r2
 80055ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80055b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055b2:	3310      	adds	r3, #16
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	b21b      	sxth	r3, r3
 80055b8:	425a      	negs	r2, r3
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	f002 0207 	and.w	r2, r2, #7
 80055c2:	bf58      	it	pl
 80055c4:	4253      	negpl	r3, r2
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80055ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	441a      	add	r2, r3
 80055d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055d2:	2110      	movs	r1, #16
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fb f81d 	bl	8000614 <ExtractBits>
 80055da:	4603      	mov	r3, r0
 80055dc:	78ba      	ldrb	r2, [r7, #2]
 80055de:	b298      	uxth	r0, r3
 80055e0:	4995      	ldr	r1, [pc, #596]	; (8005838 <Status_Msg_Extr+0x604>)
 80055e2:	4613      	mov	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	3304      	adds	r3, #4
 80055ee:	4602      	mov	r2, r0
 80055f0:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80055f2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80055f6:	3310      	adds	r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da00      	bge.n	80055fe <Status_Msg_Extr+0x3ca>
 80055fc:	3307      	adds	r3, #7
 80055fe:	10db      	asrs	r3, r3, #3
 8005600:	b29a      	uxth	r2, r3
 8005602:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005604:	4413      	add	r3, r2
 8005606:	873b      	strh	r3, [r7, #56]	; 0x38
 8005608:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800560a:	3310      	adds	r3, #16
 800560c:	b29b      	uxth	r3, r3
 800560e:	b21b      	sxth	r3, r3
 8005610:	425a      	negs	r2, r3
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	f002 0207 	and.w	r2, r2, #7
 800561a:	bf58      	it	pl
 800561c:	4253      	negpl	r3, r2
 800561e:	b21b      	sxth	r3, r3
 8005620:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005622:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	441a      	add	r2, r3
 8005628:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800562a:	2108      	movs	r1, #8
 800562c:	4618      	mov	r0, r3
 800562e:	f7fa fff1 	bl	8000614 <ExtractBits>
 8005632:	4602      	mov	r2, r0
 8005634:	78bb      	ldrb	r3, [r7, #2]
 8005636:	b2d1      	uxtb	r1, r2
 8005638:	4a80      	ldr	r2, [pc, #512]	; (800583c <Status_Msg_Extr+0x608>)
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	4413      	add	r3, r2
 800563e:	3302      	adds	r3, #2
 8005640:	460a      	mov	r2, r1
 8005642:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005644:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005648:	3308      	adds	r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	da00      	bge.n	8005650 <Status_Msg_Extr+0x41c>
 800564e:	3307      	adds	r3, #7
 8005650:	10db      	asrs	r3, r3, #3
 8005652:	b29a      	uxth	r2, r3
 8005654:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005656:	4413      	add	r3, r2
 8005658:	873b      	strh	r3, [r7, #56]	; 0x38
 800565a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800565c:	3308      	adds	r3, #8
 800565e:	b29b      	uxth	r3, r3
 8005660:	b21b      	sxth	r3, r3
 8005662:	425a      	negs	r2, r3
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	f002 0207 	and.w	r2, r2, #7
 800566c:	bf58      	it	pl
 800566e:	4253      	negpl	r3, r2
 8005670:	b21b      	sxth	r3, r3
 8005672:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005674:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	441a      	add	r2, r3
 800567a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800567c:	2108      	movs	r1, #8
 800567e:	4618      	mov	r0, r3
 8005680:	f7fa ffc8 	bl	8000614 <ExtractBits>
 8005684:	4602      	mov	r2, r0
 8005686:	78bb      	ldrb	r3, [r7, #2]
 8005688:	b2d1      	uxtb	r1, r2
 800568a:	4a6c      	ldr	r2, [pc, #432]	; (800583c <Status_Msg_Extr+0x608>)
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	4413      	add	r3, r2
 8005690:	3301      	adds	r3, #1
 8005692:	460a      	mov	r2, r1
 8005694:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8005696:	78bb      	ldrb	r3, [r7, #2]
 8005698:	4a68      	ldr	r2, [pc, #416]	; (800583c <Status_Msg_Extr+0x608>)
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	4413      	add	r3, r2
 800569e:	3301      	adds	r3, #1
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d138      	bne.n	8005718 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80056a6:	78bb      	ldrb	r3, [r7, #2]
 80056a8:	4a65      	ldr	r2, [pc, #404]	; (8005840 <Status_Msg_Extr+0x60c>)
 80056aa:	3366      	adds	r3, #102	; 0x66
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	4619      	mov	r1, r3
 80056b4:	4863      	ldr	r0, [pc, #396]	; (8005844 <Status_Msg_Extr+0x610>)
 80056b6:	f01c ff55 	bl	8022564 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80056ba:	78bb      	ldrb	r3, [r7, #2]
 80056bc:	4a5f      	ldr	r2, [pc, #380]	; (800583c <Status_Msg_Extr+0x608>)
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	4413      	add	r3, r2
 80056c2:	330c      	adds	r3, #12
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4619      	mov	r1, r3
 80056c8:	485f      	ldr	r0, [pc, #380]	; (8005848 <Status_Msg_Extr+0x614>)
 80056ca:	f01c ff4b 	bl	8022564 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80056ce:	78bb      	ldrb	r3, [r7, #2]
 80056d0:	495a      	ldr	r1, [pc, #360]	; (800583c <Status_Msg_Extr+0x608>)
 80056d2:	011a      	lsls	r2, r3, #4
 80056d4:	440a      	add	r2, r1
 80056d6:	320c      	adds	r2, #12
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	3201      	adds	r2, #1
 80056dc:	4957      	ldr	r1, [pc, #348]	; (800583c <Status_Msg_Extr+0x608>)
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	440b      	add	r3, r1
 80056e2:	330c      	adds	r3, #12
 80056e4:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80056e6:	78bb      	ldrb	r3, [r7, #2]
 80056e8:	4a54      	ldr	r2, [pc, #336]	; (800583c <Status_Msg_Extr+0x608>)
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	330c      	adds	r3, #12
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4619      	mov	r1, r3
 80056f4:	4855      	ldr	r0, [pc, #340]	; (800584c <Status_Msg_Extr+0x618>)
 80056f6:	f01c ff35 	bl	8022564 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80056fa:	78bb      	ldrb	r3, [r7, #2]
 80056fc:	78ba      	ldrb	r2, [r7, #2]
 80056fe:	494f      	ldr	r1, [pc, #316]	; (800583c <Status_Msg_Extr+0x608>)
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	440b      	add	r3, r1
 8005704:	330c      	adds	r3, #12
 8005706:	6819      	ldr	r1, [r3, #0]
 8005708:	4851      	ldr	r0, [pc, #324]	; (8005850 <Status_Msg_Extr+0x61c>)
 800570a:	4613      	mov	r3, r2
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	4413      	add	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4403      	add	r3, r0
 8005714:	330c      	adds	r3, #12
 8005716:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005718:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800571c:	3308      	adds	r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	da00      	bge.n	8005724 <Status_Msg_Extr+0x4f0>
 8005722:	3307      	adds	r3, #7
 8005724:	10db      	asrs	r3, r3, #3
 8005726:	b29a      	uxth	r2, r3
 8005728:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800572a:	4413      	add	r3, r2
 800572c:	873b      	strh	r3, [r7, #56]	; 0x38
 800572e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005730:	3308      	adds	r3, #8
 8005732:	b29b      	uxth	r3, r3
 8005734:	b21b      	sxth	r3, r3
 8005736:	425a      	negs	r2, r3
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	f002 0207 	and.w	r2, r2, #7
 8005740:	bf58      	it	pl
 8005742:	4253      	negpl	r3, r2
 8005744:	b21b      	sxth	r3, r3
 8005746:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005748:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	441a      	add	r2, r3
 800574e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005750:	2108      	movs	r1, #8
 8005752:	4618      	mov	r0, r3
 8005754:	f7fa ff5e 	bl	8000614 <ExtractBits>
 8005758:	4603      	mov	r3, r0
 800575a:	78ba      	ldrb	r2, [r7, #2]
 800575c:	b2d8      	uxtb	r0, r3
 800575e:	4936      	ldr	r1, [pc, #216]	; (8005838 <Status_Msg_Extr+0x604>)
 8005760:	4613      	mov	r3, r2
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	3302      	adds	r3, #2
 800576c:	4602      	mov	r2, r0
 800576e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8005770:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005774:	3308      	adds	r3, #8
 8005776:	2b00      	cmp	r3, #0
 8005778:	da00      	bge.n	800577c <Status_Msg_Extr+0x548>
 800577a:	3307      	adds	r3, #7
 800577c:	10db      	asrs	r3, r3, #3
 800577e:	b29a      	uxth	r2, r3
 8005780:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005782:	4413      	add	r3, r2
 8005784:	873b      	strh	r3, [r7, #56]	; 0x38
 8005786:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005788:	3308      	adds	r3, #8
 800578a:	b29b      	uxth	r3, r3
 800578c:	b21b      	sxth	r3, r3
 800578e:	425a      	negs	r2, r3
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	f002 0207 	and.w	r2, r2, #7
 8005798:	bf58      	it	pl
 800579a:	4253      	negpl	r3, r2
 800579c:	b21b      	sxth	r3, r3
 800579e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80057a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	441a      	add	r2, r3
 80057a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057a8:	2110      	movs	r1, #16
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fa ff32 	bl	8000614 <ExtractBits>
 80057b0:	4602      	mov	r2, r0
 80057b2:	78bb      	ldrb	r3, [r7, #2]
 80057b4:	b291      	uxth	r1, r2
 80057b6:	4a21      	ldr	r2, [pc, #132]	; (800583c <Status_Msg_Extr+0x608>)
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	4413      	add	r3, r2
 80057bc:	3304      	adds	r3, #4
 80057be:	460a      	mov	r2, r1
 80057c0:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80057c2:	4924      	ldr	r1, [pc, #144]	; (8005854 <Status_Msg_Extr+0x620>)
 80057c4:	4824      	ldr	r0, [pc, #144]	; (8005858 <Status_Msg_Extr+0x624>)
 80057c6:	f7fa fd3b 	bl	8000240 <strcmp>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10f      	bne.n	80057f0 <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80057d0:	78bb      	ldrb	r3, [r7, #2]
 80057d2:	4a1a      	ldr	r2, [pc, #104]	; (800583c <Status_Msg_Extr+0x608>)
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	4413      	add	r3, r2
 80057d8:	3304      	adds	r3, #4
 80057da:	881a      	ldrh	r2, [r3, #0]
 80057dc:	78bb      	ldrb	r3, [r7, #2]
 80057de:	f042 0208 	orr.w	r2, r2, #8
 80057e2:	b291      	uxth	r1, r2
 80057e4:	4a15      	ldr	r2, [pc, #84]	; (800583c <Status_Msg_Extr+0x608>)
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	4413      	add	r3, r2
 80057ea:	3304      	adds	r3, #4
 80057ec:	460a      	mov	r2, r1
 80057ee:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 80057f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057f4:	3310      	adds	r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da00      	bge.n	80057fc <Status_Msg_Extr+0x5c8>
 80057fa:	3307      	adds	r3, #7
 80057fc:	10db      	asrs	r3, r3, #3
 80057fe:	b29a      	uxth	r2, r3
 8005800:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005802:	4413      	add	r3, r2
 8005804:	873b      	strh	r3, [r7, #56]	; 0x38
 8005806:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005808:	3310      	adds	r3, #16
 800580a:	b29b      	uxth	r3, r3
 800580c:	b21b      	sxth	r3, r3
 800580e:	425a      	negs	r2, r3
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	f002 0207 	and.w	r2, r2, #7
 8005818:	bf58      	it	pl
 800581a:	4253      	negpl	r3, r2
 800581c:	b21b      	sxth	r3, r3
 800581e:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 8005820:	78bb      	ldrb	r3, [r7, #2]
 8005822:	4a06      	ldr	r2, [pc, #24]	; (800583c <Status_Msg_Extr+0x608>)
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	4413      	add	r3, r2
 8005828:	3304      	adds	r3, #4
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 812f 	beq.w	8005a94 <Status_Msg_Extr+0x860>
 8005836:	e011      	b.n	800585c <Status_Msg_Extr+0x628>
 8005838:	200015fc 	.word	0x200015fc
 800583c:	200011c4 	.word	0x200011c4
 8005840:	20000304 	.word	0x20000304
 8005844:	08024358 	.word	0x08024358
 8005848:	08024644 	.word	0x08024644
 800584c:	08024650 	.word	0x08024650
 8005850:	20001674 	.word	0x20001674
 8005854:	08023d10 	.word	0x08023d10
 8005858:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800585c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	441a      	add	r2, r3
 8005862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005864:	2108      	movs	r1, #8
 8005866:	4618      	mov	r0, r3
 8005868:	f7fa fed4 	bl	8000614 <ExtractBits>
 800586c:	4603      	mov	r3, r0
 800586e:	78ba      	ldrb	r2, [r7, #2]
 8005870:	b2d8      	uxtb	r0, r3
 8005872:	4984      	ldr	r1, [pc, #528]	; (8005a84 <Status_Msg_Extr+0x850>)
 8005874:	4613      	mov	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	4413      	add	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	440b      	add	r3, r1
 800587e:	3305      	adds	r3, #5
 8005880:	4602      	mov	r2, r0
 8005882:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005884:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005888:	3308      	adds	r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	da00      	bge.n	8005890 <Status_Msg_Extr+0x65c>
 800588e:	3307      	adds	r3, #7
 8005890:	10db      	asrs	r3, r3, #3
 8005892:	b29a      	uxth	r2, r3
 8005894:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005896:	4413      	add	r3, r2
 8005898:	873b      	strh	r3, [r7, #56]	; 0x38
 800589a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800589c:	3308      	adds	r3, #8
 800589e:	b29b      	uxth	r3, r3
 80058a0:	b21b      	sxth	r3, r3
 80058a2:	425a      	negs	r2, r3
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	f002 0207 	and.w	r2, r2, #7
 80058ac:	bf58      	it	pl
 80058ae:	4253      	negpl	r3, r2
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80058b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	441a      	add	r2, r3
 80058ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058bc:	2108      	movs	r1, #8
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fa fea8 	bl	8000614 <ExtractBits>
 80058c4:	4603      	mov	r3, r0
 80058c6:	78ba      	ldrb	r2, [r7, #2]
 80058c8:	b2d8      	uxtb	r0, r3
 80058ca:	496e      	ldr	r1, [pc, #440]	; (8005a84 <Status_Msg_Extr+0x850>)
 80058cc:	4613      	mov	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	4413      	add	r3, r2
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	440b      	add	r3, r1
 80058d6:	3304      	adds	r3, #4
 80058d8:	4602      	mov	r2, r0
 80058da:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80058dc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058e0:	3308      	adds	r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da00      	bge.n	80058e8 <Status_Msg_Extr+0x6b4>
 80058e6:	3307      	adds	r3, #7
 80058e8:	10db      	asrs	r3, r3, #3
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ee:	4413      	add	r3, r2
 80058f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80058f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058f4:	3308      	adds	r3, #8
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	b21b      	sxth	r3, r3
 80058fa:	425a      	negs	r2, r3
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	f002 0207 	and.w	r2, r2, #7
 8005904:	bf58      	it	pl
 8005906:	4253      	negpl	r3, r2
 8005908:	b21b      	sxth	r3, r3
 800590a:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800590c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	441a      	add	r2, r3
 8005912:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005914:	2108      	movs	r1, #8
 8005916:	4618      	mov	r0, r3
 8005918:	f7fa fe7c 	bl	8000614 <ExtractBits>
 800591c:	4603      	mov	r3, r0
 800591e:	78ba      	ldrb	r2, [r7, #2]
 8005920:	b2d8      	uxtb	r0, r3
 8005922:	4958      	ldr	r1, [pc, #352]	; (8005a84 <Status_Msg_Extr+0x850>)
 8005924:	4613      	mov	r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4413      	add	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	440b      	add	r3, r1
 800592e:	3303      	adds	r3, #3
 8005930:	4602      	mov	r2, r0
 8005932:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005934:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005938:	3308      	adds	r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	da00      	bge.n	8005940 <Status_Msg_Extr+0x70c>
 800593e:	3307      	adds	r3, #7
 8005940:	10db      	asrs	r3, r3, #3
 8005942:	b29a      	uxth	r2, r3
 8005944:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005946:	4413      	add	r3, r2
 8005948:	873b      	strh	r3, [r7, #56]	; 0x38
 800594a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800594c:	3308      	adds	r3, #8
 800594e:	b29b      	uxth	r3, r3
 8005950:	b21b      	sxth	r3, r3
 8005952:	425a      	negs	r2, r3
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	f002 0207 	and.w	r2, r2, #7
 800595c:	bf58      	it	pl
 800595e:	4253      	negpl	r3, r2
 8005960:	b21b      	sxth	r3, r3
 8005962:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005964:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	441a      	add	r2, r3
 800596a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800596c:	2108      	movs	r1, #8
 800596e:	4618      	mov	r0, r3
 8005970:	f7fa fe50 	bl	8000614 <ExtractBits>
 8005974:	4603      	mov	r3, r0
 8005976:	78ba      	ldrb	r2, [r7, #2]
 8005978:	b2d8      	uxtb	r0, r3
 800597a:	4942      	ldr	r1, [pc, #264]	; (8005a84 <Status_Msg_Extr+0x850>)
 800597c:	4613      	mov	r3, r2
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	4413      	add	r3, r2
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	440b      	add	r3, r1
 8005986:	4602      	mov	r2, r0
 8005988:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800598a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800598e:	3308      	adds	r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	da00      	bge.n	8005996 <Status_Msg_Extr+0x762>
 8005994:	3307      	adds	r3, #7
 8005996:	10db      	asrs	r3, r3, #3
 8005998:	b29a      	uxth	r2, r3
 800599a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800599c:	4413      	add	r3, r2
 800599e:	873b      	strh	r3, [r7, #56]	; 0x38
 80059a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059a2:	3308      	adds	r3, #8
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	b21b      	sxth	r3, r3
 80059a8:	425a      	negs	r2, r3
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	f002 0207 	and.w	r2, r2, #7
 80059b2:	bf58      	it	pl
 80059b4:	4253      	negpl	r3, r2
 80059b6:	b21b      	sxth	r3, r3
 80059b8:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80059ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	441a      	add	r2, r3
 80059c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059c2:	2108      	movs	r1, #8
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fa fe25 	bl	8000614 <ExtractBits>
 80059ca:	4603      	mov	r3, r0
 80059cc:	78ba      	ldrb	r2, [r7, #2]
 80059ce:	b2d8      	uxtb	r0, r3
 80059d0:	492c      	ldr	r1, [pc, #176]	; (8005a84 <Status_Msg_Extr+0x850>)
 80059d2:	4613      	mov	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	440b      	add	r3, r1
 80059dc:	3301      	adds	r3, #1
 80059de:	4602      	mov	r2, r0
 80059e0:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80059e2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059e6:	3308      	adds	r3, #8
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	da00      	bge.n	80059ee <Status_Msg_Extr+0x7ba>
 80059ec:	3307      	adds	r3, #7
 80059ee:	10db      	asrs	r3, r3, #3
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059f4:	4413      	add	r3, r2
 80059f6:	873b      	strh	r3, [r7, #56]	; 0x38
 80059f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059fa:	3308      	adds	r3, #8
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	b21b      	sxth	r3, r3
 8005a00:	425a      	negs	r2, r3
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	f002 0207 	and.w	r2, r2, #7
 8005a0a:	bf58      	it	pl
 8005a0c:	4253      	negpl	r3, r2
 8005a0e:	b21b      	sxth	r3, r3
 8005a10:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	441a      	add	r2, r3
 8005a18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a1a:	2108      	movs	r1, #8
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fa fdf9 	bl	8000614 <ExtractBits>
 8005a22:	4603      	mov	r3, r0
 8005a24:	78ba      	ldrb	r2, [r7, #2]
 8005a26:	b2d8      	uxtb	r0, r3
 8005a28:	4916      	ldr	r1, [pc, #88]	; (8005a84 <Status_Msg_Extr+0x850>)
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4413      	add	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	440b      	add	r3, r1
 8005a34:	3302      	adds	r3, #2
 8005a36:	4602      	mov	r2, r0
 8005a38:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a3a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a3e:	3308      	adds	r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	da00      	bge.n	8005a46 <Status_Msg_Extr+0x812>
 8005a44:	3307      	adds	r3, #7
 8005a46:	10db      	asrs	r3, r3, #3
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a4c:	4413      	add	r3, r2
 8005a4e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a52:	3308      	adds	r3, #8
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	b21b      	sxth	r3, r3
 8005a58:	425a      	negs	r2, r3
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	f002 0207 	and.w	r2, r2, #7
 8005a62:	bf58      	it	pl
 8005a64:	4253      	negpl	r3, r2
 8005a66:	b21b      	sxth	r3, r3
 8005a68:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005a6a:	78bb      	ldrb	r3, [r7, #2]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f002 ff53 	bl	8008918 <IS_MLK_EIPC_TIME_MATCHING>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d009      	beq.n	8005a8c <Status_Msg_Extr+0x858>
 8005a78:	78bb      	ldrb	r3, [r7, #2]
 8005a7a:	4a03      	ldr	r2, [pc, #12]	; (8005a88 <Status_Msg_Extr+0x854>)
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	54d1      	strb	r1, [r2, r3]
 8005a80:	e008      	b.n	8005a94 <Status_Msg_Extr+0x860>
 8005a82:	bf00      	nop
 8005a84:	20001188 	.word	0x20001188
 8005a88:	200010d8 	.word	0x200010d8
 8005a8c:	78bb      	ldrb	r3, [r7, #2]
 8005a8e:	4aa6      	ldr	r2, [pc, #664]	; (8005d28 <Status_Msg_Extr+0xaf4>)
 8005a90:	2101      	movs	r1, #1
 8005a92:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005a94:	78bb      	ldrb	r3, [r7, #2]
 8005a96:	4aa5      	ldr	r2, [pc, #660]	; (8005d2c <Status_Msg_Extr+0xaf8>)
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <Status_Msg_Extr+0x87a>
	{
		LinkEstablishFlag = SET;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005aae:	787a      	ldrb	r2, [r7, #1]
 8005ab0:	78bb      	ldrb	r3, [r7, #2]
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f959 	bl	8005d6c <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005aba:	78bb      	ldrb	r3, [r7, #2]
 8005abc:	499c      	ldr	r1, [pc, #624]	; (8005d30 <Status_Msg_Extr+0xafc>)
 8005abe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005ac4:	78bb      	ldrb	r3, [r7, #2]
 8005ac6:	499b      	ldr	r1, [pc, #620]	; (8005d34 <Status_Msg_Extr+0xb00>)
 8005ac8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005ace:	78ba      	ldrb	r2, [r7, #2]
 8005ad0:	4999      	ldr	r1, [pc, #612]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	440b      	add	r3, r1
 8005adc:	3310      	adds	r3, #16
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	78bc      	ldrb	r4, [r7, #2]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f008 ff52 	bl	800e98c <HAL_Elaps_Ticks>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4993      	ldr	r1, [pc, #588]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005aec:	4623      	mov	r3, r4
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4423      	add	r3, r4
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	440b      	add	r3, r1
 8005af6:	3310      	adds	r3, #16
 8005af8:	601a      	str	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005afa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d166      	bne.n	8005bd0 <Status_Msg_Extr+0x99c>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005b02:	78ba      	ldrb	r2, [r7, #2]
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4a8b      	ldr	r2, [pc, #556]	; (8005d3c <Status_Msg_Extr+0xb08>)
 8005b0e:	4413      	add	r3, r2
 8005b10:	3301      	adds	r3, #1
 8005b12:	2210      	movs	r2, #16
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f01c fc3c 	bl	8022394 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005b1c:	78ba      	ldrb	r2, [r7, #2]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4a85      	ldr	r2, [pc, #532]	; (8005d3c <Status_Msg_Extr+0xb08>)
 8005b28:	1898      	adds	r0, r3, r2
 8005b2a:	78ba      	ldrb	r2, [r7, #2]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4a82      	ldr	r2, [pc, #520]	; (8005d40 <Status_Msg_Extr+0xb0c>)
 8005b36:	4413      	add	r3, r2
 8005b38:	2214      	movs	r2, #20
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	f01c fc02 	bl	8022344 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005b40:	78bb      	ldrb	r3, [r7, #2]
 8005b42:	4a80      	ldr	r2, [pc, #512]	; (8005d44 <Status_Msg_Extr+0xb10>)
 8005b44:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b48:	78ba      	ldrb	r2, [r7, #2]
 8005b4a:	487c      	ldr	r0, [pc, #496]	; (8005d3c <Status_Msg_Extr+0xb08>)
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4403      	add	r3, r0
 8005b56:	3312      	adds	r3, #18
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	d038      	beq.n	8005bd0 <Status_Msg_Extr+0x99c>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005b5e:	78ba      	ldrb	r2, [r7, #2]
 8005b60:	78b9      	ldrb	r1, [r7, #2]
 8005b62:	4876      	ldr	r0, [pc, #472]	; (8005d3c <Status_Msg_Extr+0xb08>)
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4403      	add	r3, r0
 8005b6e:	3312      	adds	r3, #18
 8005b70:	881a      	ldrh	r2, [r3, #0]
 8005b72:	4b74      	ldr	r3, [pc, #464]	; (8005d44 <Status_Msg_Extr+0xb10>)
 8005b74:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005b78:	2214      	movs	r2, #20
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	4872      	ldr	r0, [pc, #456]	; (8005d48 <Status_Msg_Extr+0xb14>)
 8005b7e:	f01c fc09 	bl	8022394 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005b82:	78ba      	ldrb	r2, [r7, #2]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4a6b      	ldr	r2, [pc, #428]	; (8005d3c <Status_Msg_Extr+0xb08>)
 8005b8e:	4413      	add	r3, r2
 8005b90:	2214      	movs	r2, #20
 8005b92:	4619      	mov	r1, r3
 8005b94:	486c      	ldr	r0, [pc, #432]	; (8005d48 <Status_Msg_Extr+0xb14>)
 8005b96:	f01c fbd5 	bl	8022344 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8005b9a:	f44f 7002 	mov.w	r0, #520	; 0x208
 8005b9e:	f009 fc71 	bl	800f484 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005ba2:	78bb      	ldrb	r3, [r7, #2]
 8005ba4:	4a69      	ldr	r2, [pc, #420]	; (8005d4c <Status_Msg_Extr+0xb18>)
 8005ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d110      	bne.n	8005bd0 <Status_Msg_Extr+0x99c>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005bae:	78bb      	ldrb	r3, [r7, #2]
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	4a67      	ldr	r2, [pc, #412]	; (8005d50 <Status_Msg_Extr+0xb1c>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	1c98      	adds	r0, r3, #2
 8005bb8:	78ba      	ldrb	r2, [r7, #2]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4a5e      	ldr	r2, [pc, #376]	; (8005d3c <Status_Msg_Extr+0xb08>)
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	2210      	movs	r2, #16
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f01c fbba 	bl	8022344 <memcpy>
		}
	}


	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005bd0:	78b9      	ldrb	r1, [r7, #2]
 8005bd2:	78ba      	ldrb	r2, [r7, #2]
 8005bd4:	4859      	ldr	r0, [pc, #356]	; (8005d3c <Status_Msg_Extr+0xb08>)
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4403      	add	r3, r0
 8005be0:	3312      	adds	r3, #18
 8005be2:	8818      	ldrh	r0, [r3, #0]
 8005be4:	4954      	ldr	r1, [pc, #336]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005be6:	4613      	mov	r3, r2
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	4413      	add	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	440b      	add	r3, r1
 8005bf0:	3306      	adds	r3, #6
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005bf6:	78ba      	ldrb	r2, [r7, #2]
 8005bf8:	494f      	ldr	r1, [pc, #316]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	440b      	add	r3, r1
 8005c04:	3314      	adds	r3, #20
 8005c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c08:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005c0a:	78ba      	ldrb	r2, [r7, #2]
 8005c0c:	494a      	ldr	r1, [pc, #296]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005c0e:	4613      	mov	r3, r2
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	4413      	add	r3, r2
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	440b      	add	r3, r1
 8005c18:	3305      	adds	r3, #5
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005c1e:	78ba      	ldrb	r2, [r7, #2]
 8005c20:	4945      	ldr	r1, [pc, #276]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005c22:	4613      	mov	r3, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	4413      	add	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	440b      	add	r3, r1
 8005c2c:	78ba      	ldrb	r2, [r7, #2]
 8005c2e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005c30:	78ba      	ldrb	r2, [r7, #2]
 8005c32:	4941      	ldr	r1, [pc, #260]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3301      	adds	r3, #1
 8005c40:	2201      	movs	r2, #1
 8005c42:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005c44:	78ba      	ldrb	r2, [r7, #2]
 8005c46:	493c      	ldr	r1, [pc, #240]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	440b      	add	r3, r1
 8005c52:	3302      	adds	r3, #2
 8005c54:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005c58:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005c5a:	2218      	movs	r2, #24
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	483d      	ldr	r0, [pc, #244]	; (8005d54 <Status_Msg_Extr+0xb20>)
 8005c60:	f01c fb98 	bl	8022394 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005c64:	78ba      	ldrb	r2, [r7, #2]
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4a32      	ldr	r2, [pc, #200]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005c70:	4413      	add	r3, r2
 8005c72:	2218      	movs	r2, #24
 8005c74:	4619      	mov	r1, r3
 8005c76:	4837      	ldr	r0, [pc, #220]	; (8005d54 <Status_Msg_Extr+0xb20>)
 8005c78:	f01c fb64 	bl	8022344 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8005c7c:	f240 2002 	movw	r0, #514	; 0x202
 8005c80:	f009 fc00 	bl	800f484 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005c84:	78ba      	ldrb	r2, [r7, #2]
 8005c86:	492c      	ldr	r1, [pc, #176]	; (8005d38 <Status_Msg_Extr+0xb04>)
 8005c88:	4613      	mov	r3, r2
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	4413      	add	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	440b      	add	r3, r1
 8005c92:	3301      	adds	r3, #1
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005c98:	78bb      	ldrb	r3, [r7, #2]
 8005c9a:	492f      	ldr	r1, [pc, #188]	; (8005d58 <Status_Msg_Extr+0xb24>)
 8005c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005ca2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d11d      	bne.n	8005ce6 <Status_Msg_Extr+0xab2>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005caa:	78bb      	ldrb	r3, [r7, #2]
 8005cac:	492b      	ldr	r1, [pc, #172]	; (8005d5c <Status_Msg_Extr+0xb28>)
 8005cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005cb4:	78ba      	ldrb	r2, [r7, #2]
 8005cb6:	492a      	ldr	r1, [pc, #168]	; (8005d60 <Status_Msg_Extr+0xb2c>)
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cc6:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005cc8:	78ba      	ldrb	r2, [r7, #2]
 8005cca:	4925      	ldr	r1, [pc, #148]	; (8005d60 <Status_Msg_Extr+0xb2c>)
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	2201      	movs	r2, #1
 8005cda:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8005cdc:	78bb      	ldrb	r3, [r7, #2]
 8005cde:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <Status_Msg_Extr+0xb30>)
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	54d1      	strb	r1, [r2, r3]
 8005ce4:	e017      	b.n	8005d16 <Status_Msg_Extr+0xae2>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8005ce6:	78bb      	ldrb	r3, [r7, #2]
 8005ce8:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <Status_Msg_Extr+0xb30>)
 8005cea:	2100      	movs	r1, #0
 8005cec:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005cee:	78ba      	ldrb	r2, [r7, #2]
 8005cf0:	491b      	ldr	r1, [pc, #108]	; (8005d60 <Status_Msg_Extr+0xb2c>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d00:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8005d02:	78ba      	ldrb	r2, [r7, #2]
 8005d04:	4916      	ldr	r1, [pc, #88]	; (8005d60 <Status_Msg_Extr+0xb2c>)
 8005d06:	4613      	mov	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3301      	adds	r3, #1
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d1a:	4813      	ldr	r0, [pc, #76]	; (8005d68 <Status_Msg_Extr+0xb34>)
 8005d1c:	f012 f901 	bl	8017f22 <HAL_GPIO_TogglePin>

}
 8005d20:	3754      	adds	r7, #84	; 0x54
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd90      	pop	{r4, r7, pc}
 8005d26:	bf00      	nop
 8005d28:	200010d8 	.word	0x200010d8
 8005d2c:	200011c4 	.word	0x200011c4
 8005d30:	20000fa4 	.word	0x20000fa4
 8005d34:	20000fcc 	.word	0x20000fcc
 8005d38:	20001674 	.word	0x20001674
 8005d3c:	20001e80 	.word	0x20001e80
 8005d40:	20001db8 	.word	0x20001db8
 8005d44:	20000f00 	.word	0x20000f00
 8005d48:	20002010 	.word	0x20002010
 8005d4c:	20000ec4 	.word	0x20000ec4
 8005d50:	200010e4 	.word	0x200010e4
 8005d54:	20001854 	.word	0x20001854
 8005d58:	20000e44 	.word	0x20000e44
 8005d5c:	20000f14 	.word	0x20000f14
 8005d60:	20001cc8 	.word	0x20001cc8
 8005d64:	20000f64 	.word	0x20000f64
 8005d68:	40021c00 	.word	0x40021c00

08005d6c <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b0a5      	sub	sp, #148	; 0x94
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	4603      	mov	r3, r0
 8005d74:	460a      	mov	r2, r1
 8005d76:	71fb      	strb	r3, [r7, #7]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d84:	2238      	movs	r2, #56	; 0x38
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f01c fb03 	bl	8022394 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	f107 0310 	add.w	r3, r7, #16
 8005d96:	2238      	movs	r2, #56	; 0x38
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f01c fafa 	bl	8022394 <memset>
	uint8_t uc_index = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8005da6:	2300      	movs	r3, #0
 8005da8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005dac:	2300      	movs	r3, #0
 8005dae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8005db2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005db6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005dba:	441a      	add	r2, r3
 8005dbc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005dc0:	23f4      	movs	r3, #244	; 0xf4
 8005dc2:	2108      	movs	r1, #8
 8005dc4:	f7fa fcb2 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8005dc8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005dcc:	3308      	adds	r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	da00      	bge.n	8005dd4 <Send_Status_Message+0x68>
 8005dd2:	3307      	adds	r3, #7
 8005dd4:	10db      	asrs	r3, r3, #3
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ddc:	4413      	add	r3, r2
 8005dde:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005de2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005de6:	3308      	adds	r3, #8
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	425a      	negs	r2, r3
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	f002 0207 	and.w	r2, r2, #7
 8005df6:	bf58      	it	pl
 8005df8:	4253      	negpl	r3, r2
 8005dfa:	b21b      	sxth	r3, r3
 8005dfc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005e00:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e04:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e08:	441a      	add	r2, r3
 8005e0a:	79fb      	ldrb	r3, [r7, #7]
 8005e0c:	49bc      	ldr	r1, [pc, #752]	; (8006100 <Send_Status_Message+0x394>)
 8005e0e:	3366      	adds	r3, #102	; 0x66
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005e1a:	2110      	movs	r1, #16
 8005e1c:	f7fa fc86 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005e20:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e24:	3310      	adds	r3, #16
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	da00      	bge.n	8005e2c <Send_Status_Message+0xc0>
 8005e2a:	3307      	adds	r3, #7
 8005e2c:	10db      	asrs	r3, r3, #3
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e34:	4413      	add	r3, r2
 8005e36:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e3e:	3310      	adds	r3, #16
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	425a      	negs	r2, r3
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	f002 0207 	and.w	r2, r2, #7
 8005e4e:	bf58      	it	pl
 8005e50:	4253      	negpl	r3, r2
 8005e52:	b21b      	sxth	r3, r3
 8005e54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8005e58:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e60:	441a      	add	r2, r3
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	49a6      	ldr	r1, [pc, #664]	; (8006100 <Send_Status_Message+0x394>)
 8005e66:	3370      	adds	r3, #112	; 0x70
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005e72:	2110      	movs	r1, #16
 8005e74:	f7fa fc5a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005e78:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e7c:	3310      	adds	r3, #16
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	da00      	bge.n	8005e84 <Send_Status_Message+0x118>
 8005e82:	3307      	adds	r3, #7
 8005e84:	10db      	asrs	r3, r3, #3
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e96:	3310      	adds	r3, #16
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	425a      	negs	r2, r3
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	f002 0207 	and.w	r2, r2, #7
 8005ea6:	bf58      	it	pl
 8005ea8:	4253      	negpl	r3, r2
 8005eaa:	b21b      	sxth	r3, r3
 8005eac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005eb0:	4b94      	ldr	r3, [pc, #592]	; (8006104 <Send_Status_Message+0x398>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	089b      	lsrs	r3, r3, #2
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d035      	beq.n	8005f2a <Send_Status_Message+0x1be>
 8005ebe:	4b91      	ldr	r3, [pc, #580]	; (8006104 <Send_Status_Message+0x398>)
 8005ec0:	791b      	ldrb	r3, [r3, #4]
 8005ec2:	79fa      	ldrb	r2, [r7, #7]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d130      	bne.n	8005f2a <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 8005ece:	488e      	ldr	r0, [pc, #568]	; (8006108 <Send_Status_Message+0x39c>)
 8005ed0:	f013 fff0 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b8d      	ldr	r3, [pc, #564]	; (800610c <Send_Status_Message+0x3a0>)
 8005ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8005edc:	099b      	lsrs	r3, r3, #6
 8005ede:	21c8      	movs	r1, #200	; 0xc8
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 8005eea:	4889      	ldr	r0, [pc, #548]	; (8006110 <Send_Status_Message+0x3a4>)
 8005eec:	f01c fbd6 	bl	802269c <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	4a88      	ldr	r2, [pc, #544]	; (8006114 <Send_Status_Message+0x3a8>)
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3301      	adds	r3, #1
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	4619      	mov	r1, r3
 8005efe:	4886      	ldr	r0, [pc, #536]	; (8006118 <Send_Status_Message+0x3ac>)
 8005f00:	f01c fb30 	bl	8022564 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8005f04:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4884      	ldr	r0, [pc, #528]	; (800611c <Send_Status_Message+0x3b0>)
 8005f0c:	f01c fb2a 	bl	8022564 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8005f10:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f18:	441a      	add	r2, r3
 8005f1a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f1e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f22:	2108      	movs	r1, #8
 8005f24:	f7fa fc02 	bl	800072c <InsertBits>
	{
 8005f28:	e00f      	b.n	8005f4a <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8005f2a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f32:	441a      	add	r2, r3
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	4977      	ldr	r1, [pc, #476]	; (8006114 <Send_Status_Message+0x3a8>)
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	440b      	add	r3, r1
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f44:	2108      	movs	r1, #8
 8005f46:	f7fa fbf1 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 8005f4a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f4e:	3308      	adds	r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da00      	bge.n	8005f56 <Send_Status_Message+0x1ea>
 8005f54:	3307      	adds	r3, #7
 8005f56:	10db      	asrs	r3, r3, #3
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f5e:	4413      	add	r3, r2
 8005f60:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005f64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f68:	3308      	adds	r3, #8
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	b21b      	sxth	r3, r3
 8005f6e:	425a      	negs	r2, r3
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	f002 0207 	and.w	r2, r2, #7
 8005f78:	bf58      	it	pl
 8005f7a:	4253      	negpl	r3, r2
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005f82:	4b60      	ldr	r3, [pc, #384]	; (8006104 <Send_Status_Message+0x398>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	08db      	lsrs	r3, r3, #3
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d038      	beq.n	8006002 <Send_Status_Message+0x296>
 8005f90:	4b5c      	ldr	r3, [pc, #368]	; (8006104 <Send_Status_Message+0x398>)
 8005f92:	791b      	ldrb	r3, [r3, #4]
 8005f94:	79fa      	ldrb	r2, [r7, #7]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d133      	bne.n	8006002 <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8005fa0:	4859      	ldr	r0, [pc, #356]	; (8006108 <Send_Status_Message+0x39c>)
 8005fa2:	f013 ff87 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	4b58      	ldr	r3, [pc, #352]	; (800610c <Send_Status_Message+0x3a0>)
 8005faa:	fba3 1302 	umull	r1, r3, r3, r2
 8005fae:	099b      	lsrs	r3, r3, #6
 8005fb0:	21c8      	movs	r1, #200	; 0xc8
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8005fbc:	4858      	ldr	r0, [pc, #352]	; (8006120 <Send_Status_Message+0x3b4>)
 8005fbe:	f01c fb6d 	bl	802269c <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4a53      	ldr	r2, [pc, #332]	; (8006114 <Send_Status_Message+0x3a8>)
 8005fc6:	011b      	lsls	r3, r3, #4
 8005fc8:	4413      	add	r3, r2
 8005fca:	3302      	adds	r3, #2
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4854      	ldr	r0, [pc, #336]	; (8006124 <Send_Status_Message+0x3b8>)
 8005fd2:	f01c fac7 	bl	8022564 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8005fd6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4852      	ldr	r0, [pc, #328]	; (8006128 <Send_Status_Message+0x3bc>)
 8005fde:	f01c fac1 	bl	8022564 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8005fe2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005fe6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005fea:	441a      	add	r2, r3
 8005fec:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8005ff0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005ff4:	2108      	movs	r1, #8
 8005ff6:	f7fa fb99 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 8005ffa:	4b4c      	ldr	r3, [pc, #304]	; (800612c <Send_Status_Message+0x3c0>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
	{
 8006000:	e020      	b.n	8006044 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 8006002:	4b4a      	ldr	r3, [pc, #296]	; (800612c <Send_Status_Message+0x3c0>)
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8006008:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800600c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006010:	18d1      	adds	r1, r2, r3
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	483f      	ldr	r0, [pc, #252]	; (8006114 <Send_Status_Message+0x3a8>)
 8006016:	011a      	lsls	r2, r3, #4
 8006018:	4402      	add	r2, r0
 800601a:	3202      	adds	r2, #2
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	3201      	adds	r2, #1
 8006020:	b2d4      	uxtb	r4, r2
 8006022:	483c      	ldr	r0, [pc, #240]	; (8006114 <Send_Status_Message+0x3a8>)
 8006024:	011a      	lsls	r2, r3, #4
 8006026:	4402      	add	r2, r0
 8006028:	3202      	adds	r2, #2
 800602a:	4620      	mov	r0, r4
 800602c:	7010      	strb	r0, [r2, #0]
 800602e:	4a39      	ldr	r2, [pc, #228]	; (8006114 <Send_Status_Message+0x3a8>)
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	4413      	add	r3, r2
 8006034:	3302      	adds	r3, #2
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800603c:	460a      	mov	r2, r1
 800603e:	2108      	movs	r1, #8
 8006040:	f7fa fb74 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006044:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006048:	3308      	adds	r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	da00      	bge.n	8006050 <Send_Status_Message+0x2e4>
 800604e:	3307      	adds	r3, #7
 8006050:	10db      	asrs	r3, r3, #3
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006058:	4413      	add	r3, r2
 800605a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800605e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006062:	3308      	adds	r3, #8
 8006064:	b29b      	uxth	r3, r3
 8006066:	b21b      	sxth	r3, r3
 8006068:	425a      	negs	r2, r3
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	f002 0207 	and.w	r2, r2, #7
 8006072:	bf58      	it	pl
 8006074:	4253      	negpl	r3, r2
 8006076:	b21b      	sxth	r3, r3
 8006078:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 800607c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006080:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006084:	441a      	add	r2, r3
 8006086:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800608a:	2304      	movs	r3, #4
 800608c:	2108      	movs	r1, #8
 800608e:	f7fa fb4d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006092:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006096:	3308      	adds	r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	da00      	bge.n	800609e <Send_Status_Message+0x332>
 800609c:	3307      	adds	r3, #7
 800609e:	10db      	asrs	r3, r3, #3
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060a6:	4413      	add	r3, r2
 80060a8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80060ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060b0:	3308      	adds	r3, #8
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	b21b      	sxth	r3, r3
 80060b6:	425a      	negs	r2, r3
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	f002 0207 	and.w	r2, r2, #7
 80060c0:	bf58      	it	pl
 80060c2:	4253      	negpl	r3, r2
 80060c4:	b21b      	sxth	r3, r3
 80060c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	4a11      	ldr	r2, [pc, #68]	; (8006114 <Send_Status_Message+0x3a8>)
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	4413      	add	r3, r2
 80060d2:	3304      	adds	r3, #4
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d052      	beq.n	8006184 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	4a13      	ldr	r2, [pc, #76]	; (8006130 <Send_Status_Message+0x3c4>)
 80060e2:	5cd3      	ldrb	r3, [r2, r3]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d125      	bne.n	8006134 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 80060e8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060f0:	441a      	add	r2, r3
 80060f2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80060f6:	2368      	movs	r3, #104	; 0x68
 80060f8:	2110      	movs	r1, #16
 80060fa:	f7fa fb17 	bl	800072c <InsertBits>
 80060fe:	e024      	b.n	800614a <Send_Status_Message+0x3de>
 8006100:	20000304 	.word	0x20000304
 8006104:	2000195c 	.word	0x2000195c
 8006108:	20009c7c 	.word	0x20009c7c
 800610c:	51eb851f 	.word	0x51eb851f
 8006110:	080240b8 	.word	0x080240b8
 8006114:	200011c4 	.word	0x200011c4
 8006118:	0802465c 	.word	0x0802465c
 800611c:	0802467c 	.word	0x0802467c
 8006120:	0802411c 	.word	0x0802411c
 8006124:	0802469c 	.word	0x0802469c
 8006128:	080246bc 	.word	0x080246bc
 800612c:	20000e39 	.word	0x20000e39
 8006130:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006134:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006138:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800613c:	441a      	add	r2, r3
 800613e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006142:	2328      	movs	r3, #40	; 0x28
 8006144:	2110      	movs	r1, #16
 8006146:	f7fa faf1 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 800614a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800614e:	3310      	adds	r3, #16
 8006150:	2b00      	cmp	r3, #0
 8006152:	da00      	bge.n	8006156 <Send_Status_Message+0x3ea>
 8006154:	3307      	adds	r3, #7
 8006156:	10db      	asrs	r3, r3, #3
 8006158:	b29a      	uxth	r2, r3
 800615a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800615e:	4413      	add	r3, r2
 8006160:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006164:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006168:	3310      	adds	r3, #16
 800616a:	b29b      	uxth	r3, r3
 800616c:	b21b      	sxth	r3, r3
 800616e:	425a      	negs	r2, r3
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	f002 0207 	and.w	r2, r2, #7
 8006178:	bf58      	it	pl
 800617a:	4253      	negpl	r3, r2
 800617c:	b21b      	sxth	r3, r3
 800617e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006182:	e03a      	b.n	80061fa <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <Send_Status_Message+0x43c>)
 8006188:	5cd3      	ldrb	r3, [r2, r3]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d10e      	bne.n	80061ac <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 800618e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006192:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006196:	441a      	add	r2, r3
 8006198:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800619c:	2364      	movs	r3, #100	; 0x64
 800619e:	2110      	movs	r1, #16
 80061a0:	f7fa fac4 	bl	800072c <InsertBits>
 80061a4:	e00d      	b.n	80061c2 <Send_Status_Message+0x456>
 80061a6:	bf00      	nop
 80061a8:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 80061ac:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061b4:	441a      	add	r2, r3
 80061b6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061ba:	2324      	movs	r3, #36	; 0x24
 80061bc:	2110      	movs	r1, #16
 80061be:	f7fa fab5 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 80061c2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80061c6:	3310      	adds	r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	da00      	bge.n	80061ce <Send_Status_Message+0x462>
 80061cc:	3307      	adds	r3, #7
 80061ce:	10db      	asrs	r3, r3, #3
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061d6:	4413      	add	r3, r2
 80061d8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80061dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061e0:	3310      	adds	r3, #16
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	b21b      	sxth	r3, r3
 80061e6:	425a      	negs	r2, r3
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	f002 0207 	and.w	r2, r2, #7
 80061f0:	bf58      	it	pl
 80061f2:	4253      	negpl	r3, r2
 80061f4:	b21b      	sxth	r3, r3
 80061f6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	4ac6      	ldr	r2, [pc, #792]	; (8006518 <Send_Status_Message+0x7ac>)
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	4413      	add	r3, r2
 8006202:	3304      	adds	r3, #4
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	b29b      	uxth	r3, r3
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8139 	beq.w	8006486 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	4ac1      	ldr	r2, [pc, #772]	; (800651c <Send_Status_Message+0x7b0>)
 8006218:	5cd3      	ldrb	r3, [r2, r3]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d114      	bne.n	8006248 <Send_Status_Message+0x4dc>
		{
			Get_time();
 800621e:	f004 ff6b 	bl	800b0f8 <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8006222:	79fa      	ldrb	r2, [r7, #7]
 8006224:	4613      	mov	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4413      	add	r3, r2
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	4abc      	ldr	r2, [pc, #752]	; (8006520 <Send_Status_Message+0x7b4>)
 800622e:	4413      	add	r3, r2
 8006230:	4abc      	ldr	r2, [pc, #752]	; (8006524 <Send_Status_Message+0x7b8>)
 8006232:	6811      	ldr	r1, [r2, #0]
 8006234:	6019      	str	r1, [r3, #0]
 8006236:	8892      	ldrh	r2, [r2, #4]
 8006238:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 800623a:	48bb      	ldr	r0, [pc, #748]	; (8006528 <Send_Status_Message+0x7bc>)
 800623c:	f01c fa2e 	bl	802269c <puts>
			Change_MLK_TIME[Source_Index] = 0;
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	4ab6      	ldr	r2, [pc, #728]	; (800651c <Send_Status_Message+0x7b0>)
 8006244:	2100      	movs	r1, #0
 8006246:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006248:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800624c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006250:	18d1      	adds	r1, r2, r3
 8006252:	79fa      	ldrb	r2, [r7, #7]
 8006254:	48b2      	ldr	r0, [pc, #712]	; (8006520 <Send_Status_Message+0x7b4>)
 8006256:	4613      	mov	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4413      	add	r3, r2
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	4403      	add	r3, r0
 8006260:	3305      	adds	r3, #5
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006268:	460a      	mov	r2, r1
 800626a:	2108      	movs	r1, #8
 800626c:	f7fa fa5e 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006270:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006274:	3308      	adds	r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	da00      	bge.n	800627c <Send_Status_Message+0x510>
 800627a:	3307      	adds	r3, #7
 800627c:	10db      	asrs	r3, r3, #3
 800627e:	b29a      	uxth	r2, r3
 8006280:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006284:	4413      	add	r3, r2
 8006286:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800628a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800628e:	3308      	adds	r3, #8
 8006290:	b29b      	uxth	r3, r3
 8006292:	b21b      	sxth	r3, r3
 8006294:	425a      	negs	r2, r3
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	f002 0207 	and.w	r2, r2, #7
 800629e:	bf58      	it	pl
 80062a0:	4253      	negpl	r3, r2
 80062a2:	b21b      	sxth	r3, r3
 80062a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80062a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062b0:	18d1      	adds	r1, r2, r3
 80062b2:	79fa      	ldrb	r2, [r7, #7]
 80062b4:	489a      	ldr	r0, [pc, #616]	; (8006520 <Send_Status_Message+0x7b4>)
 80062b6:	4613      	mov	r3, r2
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4403      	add	r3, r0
 80062c0:	3304      	adds	r3, #4
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062c8:	460a      	mov	r2, r1
 80062ca:	2108      	movs	r1, #8
 80062cc:	f7fa fa2e 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80062d0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80062d4:	3308      	adds	r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	da00      	bge.n	80062dc <Send_Status_Message+0x570>
 80062da:	3307      	adds	r3, #7
 80062dc:	10db      	asrs	r3, r3, #3
 80062de:	b29a      	uxth	r2, r3
 80062e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062e4:	4413      	add	r3, r2
 80062e6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80062ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062ee:	3308      	adds	r3, #8
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	b21b      	sxth	r3, r3
 80062f4:	425a      	negs	r2, r3
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	f002 0207 	and.w	r2, r2, #7
 80062fe:	bf58      	it	pl
 8006300:	4253      	negpl	r3, r2
 8006302:	b21b      	sxth	r3, r3
 8006304:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006308:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800630c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006310:	18d1      	adds	r1, r2, r3
 8006312:	79fa      	ldrb	r2, [r7, #7]
 8006314:	4882      	ldr	r0, [pc, #520]	; (8006520 <Send_Status_Message+0x7b4>)
 8006316:	4613      	mov	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4413      	add	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	4403      	add	r3, r0
 8006320:	3303      	adds	r3, #3
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006328:	460a      	mov	r2, r1
 800632a:	2108      	movs	r1, #8
 800632c:	f7fa f9fe 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006330:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006334:	3308      	adds	r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	da00      	bge.n	800633c <Send_Status_Message+0x5d0>
 800633a:	3307      	adds	r3, #7
 800633c:	10db      	asrs	r3, r3, #3
 800633e:	b29a      	uxth	r2, r3
 8006340:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006344:	4413      	add	r3, r2
 8006346:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800634a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800634e:	3308      	adds	r3, #8
 8006350:	b29b      	uxth	r3, r3
 8006352:	b21b      	sxth	r3, r3
 8006354:	425a      	negs	r2, r3
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	f002 0207 	and.w	r2, r2, #7
 800635e:	bf58      	it	pl
 8006360:	4253      	negpl	r3, r2
 8006362:	b21b      	sxth	r3, r3
 8006364:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006368:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800636c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006370:	18d1      	adds	r1, r2, r3
 8006372:	79fa      	ldrb	r2, [r7, #7]
 8006374:	486a      	ldr	r0, [pc, #424]	; (8006520 <Send_Status_Message+0x7b4>)
 8006376:	4613      	mov	r3, r2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	4413      	add	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4403      	add	r3, r0
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006386:	460a      	mov	r2, r1
 8006388:	2108      	movs	r1, #8
 800638a:	f7fa f9cf 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800638e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006392:	3308      	adds	r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	da00      	bge.n	800639a <Send_Status_Message+0x62e>
 8006398:	3307      	adds	r3, #7
 800639a:	10db      	asrs	r3, r3, #3
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063a2:	4413      	add	r3, r2
 80063a4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80063a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063ac:	3308      	adds	r3, #8
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	b21b      	sxth	r3, r3
 80063b2:	425a      	negs	r2, r3
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	f002 0207 	and.w	r2, r2, #7
 80063bc:	bf58      	it	pl
 80063be:	4253      	negpl	r3, r2
 80063c0:	b21b      	sxth	r3, r3
 80063c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80063c6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063ce:	18d1      	adds	r1, r2, r3
 80063d0:	79fa      	ldrb	r2, [r7, #7]
 80063d2:	4853      	ldr	r0, [pc, #332]	; (8006520 <Send_Status_Message+0x7b4>)
 80063d4:	4613      	mov	r3, r2
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	4413      	add	r3, r2
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	4403      	add	r3, r0
 80063de:	3301      	adds	r3, #1
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063e6:	460a      	mov	r2, r1
 80063e8:	2108      	movs	r1, #8
 80063ea:	f7fa f99f 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80063ee:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80063f2:	3308      	adds	r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da00      	bge.n	80063fa <Send_Status_Message+0x68e>
 80063f8:	3307      	adds	r3, #7
 80063fa:	10db      	asrs	r3, r3, #3
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006402:	4413      	add	r3, r2
 8006404:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006408:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800640c:	3308      	adds	r3, #8
 800640e:	b29b      	uxth	r3, r3
 8006410:	b21b      	sxth	r3, r3
 8006412:	425a      	negs	r2, r3
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	f002 0207 	and.w	r2, r2, #7
 800641c:	bf58      	it	pl
 800641e:	4253      	negpl	r3, r2
 8006420:	b21b      	sxth	r3, r3
 8006422:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006426:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800642a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800642e:	18d1      	adds	r1, r2, r3
 8006430:	79fa      	ldrb	r2, [r7, #7]
 8006432:	483b      	ldr	r0, [pc, #236]	; (8006520 <Send_Status_Message+0x7b4>)
 8006434:	4613      	mov	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	4413      	add	r3, r2
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	4403      	add	r3, r0
 800643e:	3302      	adds	r3, #2
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006446:	460a      	mov	r2, r1
 8006448:	2108      	movs	r1, #8
 800644a:	f7fa f96f 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800644e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006452:	3308      	adds	r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	da00      	bge.n	800645a <Send_Status_Message+0x6ee>
 8006458:	3307      	adds	r3, #7
 800645a:	10db      	asrs	r3, r3, #3
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006462:	4413      	add	r3, r2
 8006464:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006468:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800646c:	3308      	adds	r3, #8
 800646e:	b29b      	uxth	r3, r3
 8006470:	b21b      	sxth	r3, r3
 8006472:	425a      	negs	r2, r3
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	f002 0207 	and.w	r2, r2, #7
 800647c:	bf58      	it	pl
 800647e:	4253      	negpl	r3, r2
 8006480:	b21b      	sxth	r3, r3
 8006482:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006486:	4b29      	ldr	r3, [pc, #164]	; (800652c <Send_Status_Message+0x7c0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d031      	beq.n	80064f8 <Send_Status_Message+0x78c>
 8006494:	4b25      	ldr	r3, [pc, #148]	; (800652c <Send_Status_Message+0x7c0>)
 8006496:	791b      	ldrb	r3, [r3, #4]
 8006498:	79fa      	ldrb	r2, [r7, #7]
 800649a:	429a      	cmp	r2, r3
 800649c:	d12c      	bne.n	80064f8 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 80064a4:	4822      	ldr	r0, [pc, #136]	; (8006530 <Send_Status_Message+0x7c4>)
 80064a6:	f013 fd05 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 80064aa:	4602      	mov	r2, r0
 80064ac:	4b21      	ldr	r3, [pc, #132]	; (8006534 <Send_Status_Message+0x7c8>)
 80064ae:	fba3 1302 	umull	r1, r3, r3, r2
 80064b2:	0dd9      	lsrs	r1, r3, #23
 80064b4:	460b      	mov	r3, r1
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	1a5b      	subs	r3, r3, r1
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80064c2:	481d      	ldr	r0, [pc, #116]	; (8006538 <Send_Status_Message+0x7cc>)
 80064c4:	f01c f8ea 	bl	802269c <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	4a13      	ldr	r2, [pc, #76]	; (8006518 <Send_Status_Message+0x7ac>)
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	4413      	add	r3, r2
 80064d0:	330c      	adds	r3, #12
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	4819      	ldr	r0, [pc, #100]	; (800653c <Send_Status_Message+0x7d0>)
 80064d8:	f01c f844 	bl	8022564 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 80064dc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80064e0:	4817      	ldr	r0, [pc, #92]	; (8006540 <Send_Status_Message+0x7d4>)
 80064e2:	f01c f83f 	bl	8022564 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 80064e6:	f107 020c 	add.w	r2, r7, #12
 80064ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064ee:	2118      	movs	r1, #24
 80064f0:	2000      	movs	r0, #0
 80064f2:	f7fa f91b 	bl	800072c <InsertBits>
	{
 80064f6:	e00b      	b.n	8006510 <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	4a07      	ldr	r2, [pc, #28]	; (8006518 <Send_Status_Message+0x7ac>)
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	4413      	add	r3, r2
 8006500:	330c      	adds	r3, #12
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f107 020c 	add.w	r2, r7, #12
 8006508:	2118      	movs	r1, #24
 800650a:	2000      	movs	r0, #0
 800650c:	f7fa f90e 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006510:	2300      	movs	r3, #0
 8006512:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006516:	e027      	b.n	8006568 <Send_Status_Message+0x7fc>
 8006518:	200011c4 	.word	0x200011c4
 800651c:	200010d8 	.word	0x200010d8
 8006520:	20001188 	.word	0x20001188
 8006524:	200027ec 	.word	0x200027ec
 8006528:	08024438 	.word	0x08024438
 800652c:	2000195c 	.word	0x2000195c
 8006530:	20009c7c 	.word	0x20009c7c
 8006534:	80008001 	.word	0x80008001
 8006538:	08024450 	.word	0x08024450
 800653c:	08024474 	.word	0x08024474
 8006540:	08024498 	.word	0x08024498
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006544:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006548:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800654c:	3303      	adds	r3, #3
 800654e:	3290      	adds	r2, #144	; 0x90
 8006550:	443a      	add	r2, r7
 8006552:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006556:	3390      	adds	r3, #144	; 0x90
 8006558:	443b      	add	r3, r7
 800655a:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800655e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006562:	3301      	adds	r3, #1
 8006564:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006568:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800656c:	b29b      	uxth	r3, r3
 800656e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006572:	429a      	cmp	r2, r3
 8006574:	d8e6      	bhi.n	8006544 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006576:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800657a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800657e:	18d4      	adds	r4, r2, r3
 8006580:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006584:	b29b      	uxth	r3, r3
 8006586:	3303      	adds	r3, #3
 8006588:	b29a      	uxth	r2, r3
 800658a:	f107 030c 	add.w	r3, r7, #12
 800658e:	4611      	mov	r1, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f00c fc05 	bl	8012da0 <CalculateDirectReverseCrc>
 8006596:	4603      	mov	r3, r0
 8006598:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800659c:	4622      	mov	r2, r4
 800659e:	2120      	movs	r1, #32
 80065a0:	f7fa f8c4 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 80065a4:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <Send_Status_Message+0x8b8>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 80065aa:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80065ae:	3320      	adds	r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	da00      	bge.n	80065b6 <Send_Status_Message+0x84a>
 80065b4:	3307      	adds	r3, #7
 80065b6:	10db      	asrs	r3, r3, #3
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065be:	4413      	add	r3, r2
 80065c0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80065c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065c8:	3320      	adds	r3, #32
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	b21b      	sxth	r3, r3
 80065ce:	425a      	negs	r2, r3
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	f002 0207 	and.w	r2, r2, #7
 80065d8:	bf58      	it	pl
 80065da:	4253      	negpl	r3, r2
 80065dc:	b21b      	sxth	r3, r3
 80065de:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80065e2:	4b11      	ldr	r3, [pc, #68]	; (8006628 <Send_Status_Message+0x8bc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	0a5b      	lsrs	r3, r3, #9
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <Send_Status_Message+0x89c>
 80065f0:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <Send_Status_Message+0x8bc>)
 80065f2:	791b      	ldrb	r3, [r3, #4]
 80065f4:	79fa      	ldrb	r2, [r7, #7]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d106      	bne.n	8006608 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 80065fa:	480c      	ldr	r0, [pc, #48]	; (800662c <Send_Status_Message+0x8c0>)
 80065fc:	f01c f84e 	bl	802269c <puts>
		printf("Not Sending Reply");
 8006600:	480b      	ldr	r0, [pc, #44]	; (8006630 <Send_Status_Message+0x8c4>)
 8006602:	f01b ffaf 	bl	8022564 <iprintf>
 8006606:	e009      	b.n	800661c <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006608:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800660c:	b2d9      	uxtb	r1, r3
 800660e:	79fa      	ldrb	r2, [r7, #7]
 8006610:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006614:	4618      	mov	r0, r3
 8006616:	f000 ffab 	bl	8007570 <Process_Sending_Reply>
	}
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	3794      	adds	r7, #148	; 0x94
 8006620:	46bd      	mov	sp, r7
 8006622:	bd90      	pop	{r4, r7, pc}
 8006624:	20000e39 	.word	0x20000e39
 8006628:	2000195c 	.word	0x2000195c
 800662c:	080241e8 	.word	0x080241e8
 8006630:	08024200 	.word	0x08024200

08006634 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	4608      	mov	r0, r1
 800663e:	4611      	mov	r1, r2
 8006640:	461a      	mov	r2, r3
 8006642:	4603      	mov	r3, r0
 8006644:	70fb      	strb	r3, [r7, #3]
 8006646:	460b      	mov	r3, r1
 8006648:	70bb      	strb	r3, [r7, #2]
 800664a:	4613      	mov	r3, r2
 800664c:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = CLEAR;
 8006656:	2300      	movs	r3, #0
 8006658:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 800665a:	f00e ff79 	bl	8015550 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 8006660:	2300      	movs	r3, #0
 8006662:	81fb      	strh	r3, [r7, #14]
 8006664:	2300      	movs	r3, #0
 8006666:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b05      	subs	r3, #5
 800666e:	b29b      	uxth	r3, r3
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f00c fb94 	bl	8012da0 <CalculateDirectReverseCrc>
 8006678:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	3b05      	subs	r3, #5
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	441a      	add	r2, r3
 8006682:	89bb      	ldrh	r3, [r7, #12]
 8006684:	2120      	movs	r1, #32
 8006686:	4618      	mov	r0, r3
 8006688:	f7f9 ffc4 	bl	8000614 <ExtractBits>
 800668c:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	429a      	cmp	r2, r3
 8006694:	d01a      	beq.n	80066cc <Service_Msg_Extr+0x98>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8006696:	78bb      	ldrb	r3, [r7, #2]
 8006698:	4a08      	ldr	r2, [pc, #32]	; (80066bc <Service_Msg_Extr+0x88>)
 800669a:	3366      	adds	r3, #102	; 0x66
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4619      	mov	r1, r3
 80066a4:	4806      	ldr	r0, [pc, #24]	; (80066c0 <Service_Msg_Extr+0x8c>)
 80066a6:	f01b ff5d 	bl	8022564 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 80066aa:	6979      	ldr	r1, [r7, #20]
 80066ac:	4805      	ldr	r0, [pc, #20]	; (80066c4 <Service_Msg_Extr+0x90>)
 80066ae:	f01b ff59 	bl	8022564 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 80066b2:	69b9      	ldr	r1, [r7, #24]
 80066b4:	4804      	ldr	r0, [pc, #16]	; (80066c8 <Service_Msg_Extr+0x94>)
 80066b6:	f01b ff55 	bl	8022564 <iprintf>
		return;
 80066ba:	e397      	b.n	8006dec <Service_Msg_Extr+0x7b8>
 80066bc:	20000304 	.word	0x20000304
 80066c0:	080246e0 	.word	0x080246e0
 80066c4:	08023f54 	.word	0x08023f54
 80066c8:	08023f64 	.word	0x08023f64
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 80066cc:	78bb      	ldrb	r3, [r7, #2]
 80066ce:	49ae      	ldr	r1, [pc, #696]	; (8006988 <Service_Msg_Extr+0x354>)
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80066d6:	78bb      	ldrb	r3, [r7, #2]
 80066d8:	49ac      	ldr	r1, [pc, #688]	; (800698c <Service_Msg_Extr+0x358>)
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 80066e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80066e4:	3308      	adds	r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	da00      	bge.n	80066ec <Service_Msg_Extr+0xb8>
 80066ea:	3307      	adds	r3, #7
 80066ec:	10db      	asrs	r3, r3, #3
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	89fb      	ldrh	r3, [r7, #14]
 80066f2:	4413      	add	r3, r2
 80066f4:	81fb      	strh	r3, [r7, #14]
 80066f6:	89bb      	ldrh	r3, [r7, #12]
 80066f8:	3308      	adds	r3, #8
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	b21b      	sxth	r3, r3
 80066fe:	425a      	negs	r2, r3
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	f002 0207 	and.w	r2, r2, #7
 8006708:	bf58      	it	pl
 800670a:	4253      	negpl	r3, r2
 800670c:	b21b      	sxth	r3, r3
 800670e:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006710:	89fb      	ldrh	r3, [r7, #14]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	441a      	add	r2, r3
 8006716:	89bb      	ldrh	r3, [r7, #12]
 8006718:	2110      	movs	r1, #16
 800671a:	4618      	mov	r0, r3
 800671c:	f7f9 ff7a 	bl	8000614 <ExtractBits>
 8006720:	4603      	mov	r3, r0
 8006722:	78ba      	ldrb	r2, [r7, #2]
 8006724:	b298      	uxth	r0, r3
 8006726:	499a      	ldr	r1, [pc, #616]	; (8006990 <Service_Msg_Extr+0x35c>)
 8006728:	4613      	mov	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	3306      	adds	r3, #6
 8006734:	4602      	mov	r2, r0
 8006736:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8006738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800673c:	3310      	adds	r3, #16
 800673e:	2b00      	cmp	r3, #0
 8006740:	da00      	bge.n	8006744 <Service_Msg_Extr+0x110>
 8006742:	3307      	adds	r3, #7
 8006744:	10db      	asrs	r3, r3, #3
 8006746:	b29a      	uxth	r2, r3
 8006748:	89fb      	ldrh	r3, [r7, #14]
 800674a:	4413      	add	r3, r2
 800674c:	81fb      	strh	r3, [r7, #14]
 800674e:	89bb      	ldrh	r3, [r7, #12]
 8006750:	3310      	adds	r3, #16
 8006752:	b29b      	uxth	r3, r3
 8006754:	b21b      	sxth	r3, r3
 8006756:	425a      	negs	r2, r3
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	f002 0207 	and.w	r2, r2, #7
 8006760:	bf58      	it	pl
 8006762:	4253      	negpl	r3, r2
 8006764:	b21b      	sxth	r3, r3
 8006766:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	441a      	add	r2, r3
 800676e:	89bb      	ldrh	r3, [r7, #12]
 8006770:	2110      	movs	r1, #16
 8006772:	4618      	mov	r0, r3
 8006774:	f7f9 ff4e 	bl	8000614 <ExtractBits>
 8006778:	4603      	mov	r3, r0
 800677a:	78ba      	ldrb	r2, [r7, #2]
 800677c:	b298      	uxth	r0, r3
 800677e:	4984      	ldr	r1, [pc, #528]	; (8006990 <Service_Msg_Extr+0x35c>)
 8006780:	4613      	mov	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	3304      	adds	r3, #4
 800678c:	4602      	mov	r2, r0
 800678e:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8006790:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006794:	3310      	adds	r3, #16
 8006796:	2b00      	cmp	r3, #0
 8006798:	da00      	bge.n	800679c <Service_Msg_Extr+0x168>
 800679a:	3307      	adds	r3, #7
 800679c:	10db      	asrs	r3, r3, #3
 800679e:	b29a      	uxth	r2, r3
 80067a0:	89fb      	ldrh	r3, [r7, #14]
 80067a2:	4413      	add	r3, r2
 80067a4:	81fb      	strh	r3, [r7, #14]
 80067a6:	89bb      	ldrh	r3, [r7, #12]
 80067a8:	3310      	adds	r3, #16
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	b21b      	sxth	r3, r3
 80067ae:	425a      	negs	r2, r3
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	f002 0207 	and.w	r2, r2, #7
 80067b8:	bf58      	it	pl
 80067ba:	4253      	negpl	r3, r2
 80067bc:	b21b      	sxth	r3, r3
 80067be:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80067c0:	89fb      	ldrh	r3, [r7, #14]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	441a      	add	r2, r3
 80067c6:	89bb      	ldrh	r3, [r7, #12]
 80067c8:	2108      	movs	r1, #8
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7f9 ff22 	bl	8000614 <ExtractBits>
 80067d0:	4602      	mov	r2, r0
 80067d2:	78bb      	ldrb	r3, [r7, #2]
 80067d4:	b2d1      	uxtb	r1, r2
 80067d6:	4a6f      	ldr	r2, [pc, #444]	; (8006994 <Service_Msg_Extr+0x360>)
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	4413      	add	r3, r2
 80067dc:	3302      	adds	r3, #2
 80067de:	460a      	mov	r2, r1
 80067e0:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80067e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067e6:	3308      	adds	r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da00      	bge.n	80067ee <Service_Msg_Extr+0x1ba>
 80067ec:	3307      	adds	r3, #7
 80067ee:	10db      	asrs	r3, r3, #3
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	4413      	add	r3, r2
 80067f6:	81fb      	strh	r3, [r7, #14]
 80067f8:	89bb      	ldrh	r3, [r7, #12]
 80067fa:	3308      	adds	r3, #8
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	b21b      	sxth	r3, r3
 8006800:	425a      	negs	r2, r3
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	f002 0207 	and.w	r2, r2, #7
 800680a:	bf58      	it	pl
 800680c:	4253      	negpl	r3, r2
 800680e:	b21b      	sxth	r3, r3
 8006810:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006812:	89fb      	ldrh	r3, [r7, #14]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	441a      	add	r2, r3
 8006818:	89bb      	ldrh	r3, [r7, #12]
 800681a:	2108      	movs	r1, #8
 800681c:	4618      	mov	r0, r3
 800681e:	f7f9 fef9 	bl	8000614 <ExtractBits>
 8006822:	4602      	mov	r2, r0
 8006824:	78bb      	ldrb	r3, [r7, #2]
 8006826:	b2d1      	uxtb	r1, r2
 8006828:	4a5a      	ldr	r2, [pc, #360]	; (8006994 <Service_Msg_Extr+0x360>)
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	4413      	add	r3, r2
 800682e:	3301      	adds	r3, #1
 8006830:	460a      	mov	r2, r1
 8006832:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006834:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006838:	3308      	adds	r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	da00      	bge.n	8006840 <Service_Msg_Extr+0x20c>
 800683e:	3307      	adds	r3, #7
 8006840:	10db      	asrs	r3, r3, #3
 8006842:	b29a      	uxth	r2, r3
 8006844:	89fb      	ldrh	r3, [r7, #14]
 8006846:	4413      	add	r3, r2
 8006848:	81fb      	strh	r3, [r7, #14]
 800684a:	89bb      	ldrh	r3, [r7, #12]
 800684c:	3308      	adds	r3, #8
 800684e:	b29b      	uxth	r3, r3
 8006850:	b21b      	sxth	r3, r3
 8006852:	425a      	negs	r2, r3
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	f002 0207 	and.w	r2, r2, #7
 800685c:	bf58      	it	pl
 800685e:	4253      	negpl	r3, r2
 8006860:	b21b      	sxth	r3, r3
 8006862:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006864:	89fb      	ldrh	r3, [r7, #14]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	441a      	add	r2, r3
 800686a:	89bb      	ldrh	r3, [r7, #12]
 800686c:	2108      	movs	r1, #8
 800686e:	4618      	mov	r0, r3
 8006870:	f7f9 fed0 	bl	8000614 <ExtractBits>
 8006874:	4603      	mov	r3, r0
 8006876:	78ba      	ldrb	r2, [r7, #2]
 8006878:	b2d8      	uxtb	r0, r3
 800687a:	4945      	ldr	r1, [pc, #276]	; (8006990 <Service_Msg_Extr+0x35c>)
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	3302      	adds	r3, #2
 8006888:	4602      	mov	r2, r0
 800688a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800688c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006890:	3308      	adds	r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	da00      	bge.n	8006898 <Service_Msg_Extr+0x264>
 8006896:	3307      	adds	r3, #7
 8006898:	10db      	asrs	r3, r3, #3
 800689a:	b29a      	uxth	r2, r3
 800689c:	89fb      	ldrh	r3, [r7, #14]
 800689e:	4413      	add	r3, r2
 80068a0:	81fb      	strh	r3, [r7, #14]
 80068a2:	89bb      	ldrh	r3, [r7, #12]
 80068a4:	3308      	adds	r3, #8
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	b21b      	sxth	r3, r3
 80068aa:	425a      	negs	r2, r3
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	f002 0207 	and.w	r2, r2, #7
 80068b4:	bf58      	it	pl
 80068b6:	4253      	negpl	r3, r2
 80068b8:	b21b      	sxth	r3, r3
 80068ba:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80068bc:	89fb      	ldrh	r3, [r7, #14]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	441a      	add	r2, r3
 80068c2:	89bb      	ldrh	r3, [r7, #12]
 80068c4:	2110      	movs	r1, #16
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7f9 fea4 	bl	8000614 <ExtractBits>
 80068cc:	4602      	mov	r2, r0
 80068ce:	78bb      	ldrb	r3, [r7, #2]
 80068d0:	b291      	uxth	r1, r2
 80068d2:	4a30      	ldr	r2, [pc, #192]	; (8006994 <Service_Msg_Extr+0x360>)
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	4413      	add	r3, r2
 80068d8:	3304      	adds	r3, #4
 80068da:	460a      	mov	r2, r1
 80068dc:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80068de:	492e      	ldr	r1, [pc, #184]	; (8006998 <Service_Msg_Extr+0x364>)
 80068e0:	482e      	ldr	r0, [pc, #184]	; (800699c <Service_Msg_Extr+0x368>)
 80068e2:	f7f9 fcad 	bl	8000240 <strcmp>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10f      	bne.n	800690c <Service_Msg_Extr+0x2d8>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80068ec:	78bb      	ldrb	r3, [r7, #2]
 80068ee:	4a29      	ldr	r2, [pc, #164]	; (8006994 <Service_Msg_Extr+0x360>)
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	4413      	add	r3, r2
 80068f4:	3304      	adds	r3, #4
 80068f6:	881a      	ldrh	r2, [r3, #0]
 80068f8:	78bb      	ldrb	r3, [r7, #2]
 80068fa:	f042 0208 	orr.w	r2, r2, #8
 80068fe:	b291      	uxth	r1, r2
 8006900:	4a24      	ldr	r2, [pc, #144]	; (8006994 <Service_Msg_Extr+0x360>)
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	4413      	add	r3, r2
 8006906:	3304      	adds	r3, #4
 8006908:	460a      	mov	r2, r1
 800690a:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 800690c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006910:	3310      	adds	r3, #16
 8006912:	2b00      	cmp	r3, #0
 8006914:	da00      	bge.n	8006918 <Service_Msg_Extr+0x2e4>
 8006916:	3307      	adds	r3, #7
 8006918:	10db      	asrs	r3, r3, #3
 800691a:	b29a      	uxth	r2, r3
 800691c:	89fb      	ldrh	r3, [r7, #14]
 800691e:	4413      	add	r3, r2
 8006920:	81fb      	strh	r3, [r7, #14]
 8006922:	89bb      	ldrh	r3, [r7, #12]
 8006924:	3310      	adds	r3, #16
 8006926:	b29b      	uxth	r3, r3
 8006928:	b21b      	sxth	r3, r3
 800692a:	425a      	negs	r2, r3
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	f002 0207 	and.w	r2, r2, #7
 8006934:	bf58      	it	pl
 8006936:	4253      	negpl	r3, r2
 8006938:	b21b      	sxth	r3, r3
 800693a:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 800693c:	78bb      	ldrb	r3, [r7, #2]
 800693e:	4a15      	ldr	r2, [pc, #84]	; (8006994 <Service_Msg_Extr+0x360>)
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	4413      	add	r3, r2
 8006944:	3304      	adds	r3, #4
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 812b 	beq.w	8006ba8 <Service_Msg_Extr+0x574>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006952:	89fb      	ldrh	r3, [r7, #14]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	441a      	add	r2, r3
 8006958:	89bb      	ldrh	r3, [r7, #12]
 800695a:	2108      	movs	r1, #8
 800695c:	4618      	mov	r0, r3
 800695e:	f7f9 fe59 	bl	8000614 <ExtractBits>
 8006962:	4603      	mov	r3, r0
 8006964:	78ba      	ldrb	r2, [r7, #2]
 8006966:	b2d8      	uxtb	r0, r3
 8006968:	490d      	ldr	r1, [pc, #52]	; (80069a0 <Service_Msg_Extr+0x36c>)
 800696a:	4613      	mov	r3, r2
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	4413      	add	r3, r2
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	440b      	add	r3, r1
 8006974:	3305      	adds	r3, #5
 8006976:	4602      	mov	r2, r0
 8006978:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 800697a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800697e:	3308      	adds	r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	da0f      	bge.n	80069a4 <Service_Msg_Extr+0x370>
 8006984:	3307      	adds	r3, #7
 8006986:	e00d      	b.n	80069a4 <Service_Msg_Extr+0x370>
 8006988:	20000fa4 	.word	0x20000fa4
 800698c:	20000fcc 	.word	0x20000fcc
 8006990:	20001584 	.word	0x20001584
 8006994:	200011c4 	.word	0x200011c4
 8006998:	08023d10 	.word	0x08023d10
 800699c:	20000305 	.word	0x20000305
 80069a0:	20001188 	.word	0x20001188
 80069a4:	10db      	asrs	r3, r3, #3
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	89fb      	ldrh	r3, [r7, #14]
 80069aa:	4413      	add	r3, r2
 80069ac:	81fb      	strh	r3, [r7, #14]
 80069ae:	89bb      	ldrh	r3, [r7, #12]
 80069b0:	3308      	adds	r3, #8
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	b21b      	sxth	r3, r3
 80069b6:	425a      	negs	r2, r3
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	f002 0207 	and.w	r2, r2, #7
 80069c0:	bf58      	it	pl
 80069c2:	4253      	negpl	r3, r2
 80069c4:	b21b      	sxth	r3, r3
 80069c6:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80069c8:	89fb      	ldrh	r3, [r7, #14]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	441a      	add	r2, r3
 80069ce:	89bb      	ldrh	r3, [r7, #12]
 80069d0:	2108      	movs	r1, #8
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7f9 fe1e 	bl	8000614 <ExtractBits>
 80069d8:	4603      	mov	r3, r0
 80069da:	78ba      	ldrb	r2, [r7, #2]
 80069dc:	b2d8      	uxtb	r0, r3
 80069de:	496e      	ldr	r1, [pc, #440]	; (8006b98 <Service_Msg_Extr+0x564>)
 80069e0:	4613      	mov	r3, r2
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	4413      	add	r3, r2
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	440b      	add	r3, r1
 80069ea:	3304      	adds	r3, #4
 80069ec:	4602      	mov	r2, r0
 80069ee:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80069f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069f4:	3308      	adds	r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da00      	bge.n	80069fc <Service_Msg_Extr+0x3c8>
 80069fa:	3307      	adds	r3, #7
 80069fc:	10db      	asrs	r3, r3, #3
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	89fb      	ldrh	r3, [r7, #14]
 8006a02:	4413      	add	r3, r2
 8006a04:	81fb      	strh	r3, [r7, #14]
 8006a06:	89bb      	ldrh	r3, [r7, #12]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	b21b      	sxth	r3, r3
 8006a0e:	425a      	negs	r2, r3
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	f002 0207 	and.w	r2, r2, #7
 8006a18:	bf58      	it	pl
 8006a1a:	4253      	negpl	r3, r2
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a20:	89fb      	ldrh	r3, [r7, #14]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	441a      	add	r2, r3
 8006a26:	89bb      	ldrh	r3, [r7, #12]
 8006a28:	2108      	movs	r1, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7f9 fdf2 	bl	8000614 <ExtractBits>
 8006a30:	4603      	mov	r3, r0
 8006a32:	78ba      	ldrb	r2, [r7, #2]
 8006a34:	b2d8      	uxtb	r0, r3
 8006a36:	4958      	ldr	r1, [pc, #352]	; (8006b98 <Service_Msg_Extr+0x564>)
 8006a38:	4613      	mov	r3, r2
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	4413      	add	r3, r2
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	440b      	add	r3, r1
 8006a42:	3303      	adds	r3, #3
 8006a44:	4602      	mov	r2, r0
 8006a46:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006a48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	da00      	bge.n	8006a54 <Service_Msg_Extr+0x420>
 8006a52:	3307      	adds	r3, #7
 8006a54:	10db      	asrs	r3, r3, #3
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	89fb      	ldrh	r3, [r7, #14]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	81fb      	strh	r3, [r7, #14]
 8006a5e:	89bb      	ldrh	r3, [r7, #12]
 8006a60:	3308      	adds	r3, #8
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	b21b      	sxth	r3, r3
 8006a66:	425a      	negs	r2, r3
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	f002 0207 	and.w	r2, r2, #7
 8006a70:	bf58      	it	pl
 8006a72:	4253      	negpl	r3, r2
 8006a74:	b21b      	sxth	r3, r3
 8006a76:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	441a      	add	r2, r3
 8006a7e:	89bb      	ldrh	r3, [r7, #12]
 8006a80:	2108      	movs	r1, #8
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7f9 fdc6 	bl	8000614 <ExtractBits>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	78ba      	ldrb	r2, [r7, #2]
 8006a8c:	b2d8      	uxtb	r0, r3
 8006a8e:	4942      	ldr	r1, [pc, #264]	; (8006b98 <Service_Msg_Extr+0x564>)
 8006a90:	4613      	mov	r3, r2
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	4413      	add	r3, r2
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	440b      	add	r3, r1
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006a9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	da00      	bge.n	8006aaa <Service_Msg_Extr+0x476>
 8006aa8:	3307      	adds	r3, #7
 8006aaa:	10db      	asrs	r3, r3, #3
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	89fb      	ldrh	r3, [r7, #14]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	81fb      	strh	r3, [r7, #14]
 8006ab4:	89bb      	ldrh	r3, [r7, #12]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	b21b      	sxth	r3, r3
 8006abc:	425a      	negs	r2, r3
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	f002 0207 	and.w	r2, r2, #7
 8006ac6:	bf58      	it	pl
 8006ac8:	4253      	negpl	r3, r2
 8006aca:	b21b      	sxth	r3, r3
 8006acc:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006ace:	89fb      	ldrh	r3, [r7, #14]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	441a      	add	r2, r3
 8006ad4:	89bb      	ldrh	r3, [r7, #12]
 8006ad6:	2108      	movs	r1, #8
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7f9 fd9b 	bl	8000614 <ExtractBits>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	78ba      	ldrb	r2, [r7, #2]
 8006ae2:	b2d8      	uxtb	r0, r3
 8006ae4:	492c      	ldr	r1, [pc, #176]	; (8006b98 <Service_Msg_Extr+0x564>)
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	4413      	add	r3, r2
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	440b      	add	r3, r1
 8006af0:	3301      	adds	r3, #1
 8006af2:	4602      	mov	r2, r0
 8006af4:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006af6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006afa:	3308      	adds	r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da00      	bge.n	8006b02 <Service_Msg_Extr+0x4ce>
 8006b00:	3307      	adds	r3, #7
 8006b02:	10db      	asrs	r3, r3, #3
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	89fb      	ldrh	r3, [r7, #14]
 8006b08:	4413      	add	r3, r2
 8006b0a:	81fb      	strh	r3, [r7, #14]
 8006b0c:	89bb      	ldrh	r3, [r7, #12]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	b21b      	sxth	r3, r3
 8006b14:	425a      	negs	r2, r3
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	f002 0207 	and.w	r2, r2, #7
 8006b1e:	bf58      	it	pl
 8006b20:	4253      	negpl	r3, r2
 8006b22:	b21b      	sxth	r3, r3
 8006b24:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b26:	89fb      	ldrh	r3, [r7, #14]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	441a      	add	r2, r3
 8006b2c:	89bb      	ldrh	r3, [r7, #12]
 8006b2e:	2108      	movs	r1, #8
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7f9 fd6f 	bl	8000614 <ExtractBits>
 8006b36:	4603      	mov	r3, r0
 8006b38:	78ba      	ldrb	r2, [r7, #2]
 8006b3a:	b2d8      	uxtb	r0, r3
 8006b3c:	4916      	ldr	r1, [pc, #88]	; (8006b98 <Service_Msg_Extr+0x564>)
 8006b3e:	4613      	mov	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	440b      	add	r3, r1
 8006b48:	3302      	adds	r3, #2
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006b4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b52:	3308      	adds	r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	da00      	bge.n	8006b5a <Service_Msg_Extr+0x526>
 8006b58:	3307      	adds	r3, #7
 8006b5a:	10db      	asrs	r3, r3, #3
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	89fb      	ldrh	r3, [r7, #14]
 8006b60:	4413      	add	r3, r2
 8006b62:	81fb      	strh	r3, [r7, #14]
 8006b64:	89bb      	ldrh	r3, [r7, #12]
 8006b66:	3308      	adds	r3, #8
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	b21b      	sxth	r3, r3
 8006b6c:	425a      	negs	r2, r3
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	f002 0207 	and.w	r2, r2, #7
 8006b76:	bf58      	it	pl
 8006b78:	4253      	negpl	r3, r2
 8006b7a:	b21b      	sxth	r3, r3
 8006b7c:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006b7e:	78bb      	ldrb	r3, [r7, #2]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 fec9 	bl	8008918 <IS_MLK_EIPC_TIME_MATCHING>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <Service_Msg_Extr+0x56c>
 8006b8c:	78bb      	ldrb	r3, [r7, #2]
 8006b8e:	4a03      	ldr	r2, [pc, #12]	; (8006b9c <Service_Msg_Extr+0x568>)
 8006b90:	2100      	movs	r1, #0
 8006b92:	54d1      	strb	r1, [r2, r3]
 8006b94:	e008      	b.n	8006ba8 <Service_Msg_Extr+0x574>
 8006b96:	bf00      	nop
 8006b98:	20001188 	.word	0x20001188
 8006b9c:	200010d8 	.word	0x200010d8
 8006ba0:	78bb      	ldrb	r3, [r7, #2]
 8006ba2:	4a94      	ldr	r2, [pc, #592]	; (8006df4 <Service_Msg_Extr+0x7c0>)
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006ba8:	78bb      	ldrb	r3, [r7, #2]
 8006baa:	4a93      	ldr	r2, [pc, #588]	; (8006df8 <Service_Msg_Extr+0x7c4>)
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	4413      	add	r3, r2
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <Service_Msg_Extr+0x58c>
	{
		LinkEstablishFlag = SET;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006bc0:	787a      	ldrb	r2, [r7, #1]
 8006bc2:	78bb      	ldrb	r3, [r7, #2]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff f8d0 	bl	8005d6c <Send_Status_Message>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006bcc:	7ffb      	ldrb	r3, [r7, #31]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d179      	bne.n	8006cc6 <Service_Msg_Extr+0x692>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006bd2:	78ba      	ldrb	r2, [r7, #2]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4a87      	ldr	r2, [pc, #540]	; (8006dfc <Service_Msg_Extr+0x7c8>)
 8006bde:	4413      	add	r3, r2
 8006be0:	3301      	adds	r3, #1
 8006be2:	2210      	movs	r2, #16
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f01b fbd4 	bl	8022394 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006bec:	78ba      	ldrb	r2, [r7, #2]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4a81      	ldr	r2, [pc, #516]	; (8006dfc <Service_Msg_Extr+0x7c8>)
 8006bf8:	1898      	adds	r0, r3, r2
 8006bfa:	78ba      	ldrb	r2, [r7, #2]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4a7e      	ldr	r2, [pc, #504]	; (8006e00 <Service_Msg_Extr+0x7cc>)
 8006c06:	4413      	add	r3, r2
 8006c08:	2214      	movs	r2, #20
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	f01b fb9a 	bl	8022344 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006c10:	78bb      	ldrb	r3, [r7, #2]
 8006c12:	4a7c      	ldr	r2, [pc, #496]	; (8006e04 <Service_Msg_Extr+0x7d0>)
 8006c14:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006c18:	78ba      	ldrb	r2, [r7, #2]
 8006c1a:	4878      	ldr	r0, [pc, #480]	; (8006dfc <Service_Msg_Extr+0x7c8>)
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4403      	add	r3, r0
 8006c26:	3312      	adds	r3, #18
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	4299      	cmp	r1, r3
 8006c2c:	d04b      	beq.n	8006cc6 <Service_Msg_Extr+0x692>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006c2e:	78ba      	ldrb	r2, [r7, #2]
 8006c30:	78b9      	ldrb	r1, [r7, #2]
 8006c32:	4872      	ldr	r0, [pc, #456]	; (8006dfc <Service_Msg_Extr+0x7c8>)
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4403      	add	r3, r0
 8006c3e:	3312      	adds	r3, #18
 8006c40:	881a      	ldrh	r2, [r3, #0]
 8006c42:	4b70      	ldr	r3, [pc, #448]	; (8006e04 <Service_Msg_Extr+0x7d0>)
 8006c44:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006c48:	2214      	movs	r2, #20
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	486e      	ldr	r0, [pc, #440]	; (8006e08 <Service_Msg_Extr+0x7d4>)
 8006c4e:	f01b fba1 	bl	8022394 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006c52:	78ba      	ldrb	r2, [r7, #2]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4a67      	ldr	r2, [pc, #412]	; (8006dfc <Service_Msg_Extr+0x7c8>)
 8006c5e:	4413      	add	r3, r2
 8006c60:	2214      	movs	r2, #20
 8006c62:	4619      	mov	r1, r3
 8006c64:	4868      	ldr	r0, [pc, #416]	; (8006e08 <Service_Msg_Extr+0x7d4>)
 8006c66:	f01b fb6d 	bl	8022344 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8006c6a:	f44f 7002 	mov.w	r0, #520	; 0x208
 8006c6e:	f008 fc09 	bl	800f484 <TransmitCanPkt>
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006c72:	78b9      	ldrb	r1, [r7, #2]
 8006c74:	78ba      	ldrb	r2, [r7, #2]
 8006c76:	4861      	ldr	r0, [pc, #388]	; (8006dfc <Service_Msg_Extr+0x7c8>)
 8006c78:	460b      	mov	r3, r1
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4403      	add	r3, r0
 8006c82:	3312      	adds	r3, #18
 8006c84:	8818      	ldrh	r0, [r3, #0]
 8006c86:	4961      	ldr	r1, [pc, #388]	; (8006e0c <Service_Msg_Extr+0x7d8>)
 8006c88:	4613      	mov	r3, r2
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	4413      	add	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	440b      	add	r3, r1
 8006c92:	3306      	adds	r3, #6
 8006c94:	4602      	mov	r2, r0
 8006c96:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8006c98:	78bb      	ldrb	r3, [r7, #2]
 8006c9a:	4a5d      	ldr	r2, [pc, #372]	; (8006e10 <Service_Msg_Extr+0x7dc>)
 8006c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d110      	bne.n	8006cc6 <Service_Msg_Extr+0x692>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006ca4:	78bb      	ldrb	r3, [r7, #2]
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	4a5a      	ldr	r2, [pc, #360]	; (8006e14 <Service_Msg_Extr+0x7e0>)
 8006caa:	4413      	add	r3, r2
 8006cac:	1c98      	adds	r0, r3, #2
 8006cae:	78ba      	ldrb	r2, [r7, #2]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4a50      	ldr	r2, [pc, #320]	; (8006dfc <Service_Msg_Extr+0x7c8>)
 8006cba:	4413      	add	r3, r2
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	2210      	movs	r2, #16
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f01b fb3f 	bl	8022344 <memcpy>
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006cc6:	78ba      	ldrb	r2, [r7, #2]
 8006cc8:	4950      	ldr	r1, [pc, #320]	; (8006e0c <Service_Msg_Extr+0x7d8>)
 8006cca:	4613      	mov	r3, r2
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	4413      	add	r3, r2
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3314      	adds	r3, #20
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8006cda:	78ba      	ldrb	r2, [r7, #2]
 8006cdc:	494b      	ldr	r1, [pc, #300]	; (8006e0c <Service_Msg_Extr+0x7d8>)
 8006cde:	4613      	mov	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	00db      	lsls	r3, r3, #3
 8006ce6:	440b      	add	r3, r1
 8006ce8:	3305      	adds	r3, #5
 8006cea:	2206      	movs	r2, #6
 8006cec:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006cee:	78ba      	ldrb	r2, [r7, #2]
 8006cf0:	4946      	ldr	r1, [pc, #280]	; (8006e0c <Service_Msg_Extr+0x7d8>)
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	4413      	add	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	78ba      	ldrb	r2, [r7, #2]
 8006cfe:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006d00:	78ba      	ldrb	r2, [r7, #2]
 8006d02:	4942      	ldr	r1, [pc, #264]	; (8006e0c <Service_Msg_Extr+0x7d8>)
 8006d04:	4613      	mov	r3, r2
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	4413      	add	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3301      	adds	r3, #1
 8006d10:	2201      	movs	r2, #1
 8006d12:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8006d14:	78ba      	ldrb	r2, [r7, #2]
 8006d16:	493d      	ldr	r1, [pc, #244]	; (8006e0c <Service_Msg_Extr+0x7d8>)
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	4413      	add	r3, r2
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	440b      	add	r3, r1
 8006d22:	3302      	adds	r3, #2
 8006d24:	7ffa      	ldrb	r2, [r7, #31]
 8006d26:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006d28:	2218      	movs	r2, #24
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	483a      	ldr	r0, [pc, #232]	; (8006e18 <Service_Msg_Extr+0x7e4>)
 8006d2e:	f01b fb31 	bl	8022394 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8006d32:	78ba      	ldrb	r2, [r7, #2]
 8006d34:	4613      	mov	r3, r2
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	4413      	add	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	4a33      	ldr	r2, [pc, #204]	; (8006e0c <Service_Msg_Extr+0x7d8>)
 8006d3e:	4413      	add	r3, r2
 8006d40:	2218      	movs	r2, #24
 8006d42:	4619      	mov	r1, r3
 8006d44:	4834      	ldr	r0, [pc, #208]	; (8006e18 <Service_Msg_Extr+0x7e4>)
 8006d46:	f01b fafd 	bl	8022344 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8006d4a:	f240 2002 	movw	r0, #514	; 0x202
 8006d4e:	f008 fb99 	bl	800f484 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8006d52:	78ba      	ldrb	r2, [r7, #2]
 8006d54:	492d      	ldr	r1, [pc, #180]	; (8006e0c <Service_Msg_Extr+0x7d8>)
 8006d56:	4613      	mov	r3, r2
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4413      	add	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	440b      	add	r3, r1
 8006d60:	3301      	adds	r3, #1
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006d66:	78bb      	ldrb	r3, [r7, #2]
 8006d68:	492c      	ldr	r1, [pc, #176]	; (8006e1c <Service_Msg_Extr+0x7e8>)
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8006d70:	7ffb      	ldrb	r3, [r7, #31]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d11d      	bne.n	8006db2 <Service_Msg_Extr+0x77e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006d76:	78bb      	ldrb	r3, [r7, #2]
 8006d78:	4929      	ldr	r1, [pc, #164]	; (8006e20 <Service_Msg_Extr+0x7ec>)
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Link_Flag[Source_Index] = SET;
 8006d80:	78bb      	ldrb	r3, [r7, #2]
 8006d82:	4a28      	ldr	r2, [pc, #160]	; (8006e24 <Service_Msg_Extr+0x7f0>)
 8006d84:	2101      	movs	r1, #1
 8006d86:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006d88:	78ba      	ldrb	r2, [r7, #2]
 8006d8a:	4927      	ldr	r1, [pc, #156]	; (8006e28 <Service_Msg_Extr+0x7f4>)
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	3301      	adds	r3, #1
 8006d98:	2201      	movs	r2, #1
 8006d9a:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8006d9c:	78ba      	ldrb	r2, [r7, #2]
 8006d9e:	4922      	ldr	r1, [pc, #136]	; (8006e28 <Service_Msg_Extr+0x7f4>)
 8006da0:	4613      	mov	r3, r2
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	3304      	adds	r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	e017      	b.n	8006de2 <Service_Msg_Extr+0x7ae>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8006db2:	78bb      	ldrb	r3, [r7, #2]
 8006db4:	4a1b      	ldr	r2, [pc, #108]	; (8006e24 <Service_Msg_Extr+0x7f0>)
 8006db6:	2100      	movs	r1, #0
 8006db8:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006dba:	78ba      	ldrb	r2, [r7, #2]
 8006dbc:	491a      	ldr	r1, [pc, #104]	; (8006e28 <Service_Msg_Extr+0x7f4>)
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3308      	adds	r3, #8
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8006dce:	78ba      	ldrb	r2, [r7, #2]
 8006dd0:	4915      	ldr	r1, [pc, #84]	; (8006e28 <Service_Msg_Extr+0x7f4>)
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	440b      	add	r3, r1
 8006ddc:	3301      	adds	r3, #1
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8006de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006de6:	4811      	ldr	r0, [pc, #68]	; (8006e2c <Service_Msg_Extr+0x7f8>)
 8006de8:	f011 f89b 	bl	8017f22 <HAL_GPIO_TogglePin>

}
 8006dec:	3720      	adds	r7, #32
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	200010d8 	.word	0x200010d8
 8006df8:	200011c4 	.word	0x200011c4
 8006dfc:	20001e80 	.word	0x20001e80
 8006e00:	20001db8 	.word	0x20001db8
 8006e04:	20000f00 	.word	0x20000f00
 8006e08:	20002010 	.word	0x20002010
 8006e0c:	20001674 	.word	0x20001674
 8006e10:	20000ec4 	.word	0x20000ec4
 8006e14:	200010e4 	.word	0x200010e4
 8006e18:	20001854 	.word	0x20001854
 8006e1c:	20000e44 	.word	0x20000e44
 8006e20:	20000f14 	.word	0x20000f14
 8006e24:	20000f64 	.word	0x20000f64
 8006e28:	20001cc8 	.word	0x20001cc8
 8006e2c:	40021c00 	.word	0x40021c00

08006e30 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b095      	sub	sp, #84	; 0x54
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	460a      	mov	r2, r1
 8006e3a:	71fb      	strb	r3, [r7, #7]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	f107 0310 	add.w	r3, r7, #16
 8006e48:	2238      	movs	r2, #56	; 0x38
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f01b faa1 	bl	8022394 <memset>

	BITSTUFFINIT(0, 0);
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8006e5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e62:	f107 020c 	add.w	r2, r7, #12
 8006e66:	441a      	add	r2, r3
 8006e68:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006e6c:	23f4      	movs	r3, #244	; 0xf4
 8006e6e:	2108      	movs	r1, #8
 8006e70:	f7f9 fc5c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006e74:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006e78:	3308      	adds	r3, #8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	da00      	bge.n	8006e80 <Send_Service_Signal_Message+0x50>
 8006e7e:	3307      	adds	r3, #7
 8006e80:	10db      	asrs	r3, r3, #3
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e88:	4413      	add	r3, r2
 8006e8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e92:	3308      	adds	r3, #8
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	b21b      	sxth	r3, r3
 8006e98:	425a      	negs	r2, r3
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	f002 0207 	and.w	r2, r2, #7
 8006ea2:	bf58      	it	pl
 8006ea4:	4253      	negpl	r3, r2
 8006ea6:	b21b      	sxth	r3, r3
 8006ea8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8006eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006eb0:	f107 020c 	add.w	r2, r7, #12
 8006eb4:	441a      	add	r2, r3
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	497b      	ldr	r1, [pc, #492]	; (80070a8 <Send_Service_Signal_Message+0x278>)
 8006eba:	3366      	adds	r3, #102	; 0x66
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006ec6:	2110      	movs	r1, #16
 8006ec8:	f7f9 fc30 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006ecc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006ed0:	3310      	adds	r3, #16
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da00      	bge.n	8006ed8 <Send_Service_Signal_Message+0xa8>
 8006ed6:	3307      	adds	r3, #7
 8006ed8:	10db      	asrs	r3, r3, #3
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ee6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006eea:	3310      	adds	r3, #16
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	b21b      	sxth	r3, r3
 8006ef0:	425a      	negs	r2, r3
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	f002 0207 	and.w	r2, r2, #7
 8006efa:	bf58      	it	pl
 8006efc:	4253      	negpl	r3, r2
 8006efe:	b21b      	sxth	r3, r3
 8006f00:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 8006f04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f08:	f107 020c 	add.w	r2, r7, #12
 8006f0c:	441a      	add	r2, r3
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	4965      	ldr	r1, [pc, #404]	; (80070a8 <Send_Service_Signal_Message+0x278>)
 8006f12:	3370      	adds	r3, #112	; 0x70
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f1e:	2110      	movs	r1, #16
 8006f20:	f7f9 fc04 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f24:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f28:	3310      	adds	r3, #16
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da00      	bge.n	8006f30 <Send_Service_Signal_Message+0x100>
 8006f2e:	3307      	adds	r3, #7
 8006f30:	10db      	asrs	r3, r3, #3
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f38:	4413      	add	r3, r2
 8006f3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f42:	3310      	adds	r3, #16
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	b21b      	sxth	r3, r3
 8006f48:	425a      	negs	r2, r3
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	f002 0207 	and.w	r2, r2, #7
 8006f52:	bf58      	it	pl
 8006f54:	4253      	negpl	r3, r2
 8006f56:	b21b      	sxth	r3, r3
 8006f58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006f5c:	4b53      	ldr	r3, [pc, #332]	; (80070ac <Send_Service_Signal_Message+0x27c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	089b      	lsrs	r3, r3, #2
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d035      	beq.n	8006fd6 <Send_Service_Signal_Message+0x1a6>
 8006f6a:	4b50      	ldr	r3, [pc, #320]	; (80070ac <Send_Service_Signal_Message+0x27c>)
 8006f6c:	791b      	ldrb	r3, [r3, #4]
 8006f6e:	79fa      	ldrb	r2, [r7, #7]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d130      	bne.n	8006fd6 <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006f7a:	484d      	ldr	r0, [pc, #308]	; (80070b0 <Send_Service_Signal_Message+0x280>)
 8006f7c:	f012 ff9a 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8006f80:	4602      	mov	r2, r0
 8006f82:	4b4c      	ldr	r3, [pc, #304]	; (80070b4 <Send_Service_Signal_Message+0x284>)
 8006f84:	fba3 1302 	umull	r1, r3, r3, r2
 8006f88:	099b      	lsrs	r3, r3, #6
 8006f8a:	21c8      	movs	r1, #200	; 0xc8
 8006f8c:	fb01 f303 	mul.w	r3, r1, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8006f96:	4848      	ldr	r0, [pc, #288]	; (80070b8 <Send_Service_Signal_Message+0x288>)
 8006f98:	f01b fb80 	bl	802269c <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	4a47      	ldr	r2, [pc, #284]	; (80070bc <Send_Service_Signal_Message+0x28c>)
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	4413      	add	r3, r2
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4845      	ldr	r0, [pc, #276]	; (80070c0 <Send_Service_Signal_Message+0x290>)
 8006fac:	f01b fada 	bl	8022564 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8006fb0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4843      	ldr	r0, [pc, #268]	; (80070c4 <Send_Service_Signal_Message+0x294>)
 8006fb8:	f01b fad4 	bl	8022564 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 8006fbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fc0:	f107 020c 	add.w	r2, r7, #12
 8006fc4:	441a      	add	r2, r3
 8006fc6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006fca:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006fce:	2108      	movs	r1, #8
 8006fd0:	f7f9 fbac 	bl	800072c <InsertBits>
	{
 8006fd4:	e00f      	b.n	8006ff6 <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8006fd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fda:	f107 020c 	add.w	r2, r7, #12
 8006fde:	441a      	add	r2, r3
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	4936      	ldr	r1, [pc, #216]	; (80070bc <Send_Service_Signal_Message+0x28c>)
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3301      	adds	r3, #1
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006ff0:	2108      	movs	r1, #8
 8006ff2:	f7f9 fb9b 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8006ff6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	da00      	bge.n	8007002 <Send_Service_Signal_Message+0x1d2>
 8007000:	3307      	adds	r3, #7
 8007002:	10db      	asrs	r3, r3, #3
 8007004:	b29a      	uxth	r2, r3
 8007006:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800700a:	4413      	add	r3, r2
 800700c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007010:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007014:	3308      	adds	r3, #8
 8007016:	b29b      	uxth	r3, r3
 8007018:	b21b      	sxth	r3, r3
 800701a:	425a      	negs	r2, r3
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	f002 0207 	and.w	r2, r2, #7
 8007024:	bf58      	it	pl
 8007026:	4253      	negpl	r3, r2
 8007028:	b21b      	sxth	r3, r3
 800702a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800702e:	4b1f      	ldr	r3, [pc, #124]	; (80070ac <Send_Service_Signal_Message+0x27c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	08db      	lsrs	r3, r3, #3
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d04b      	beq.n	80070d4 <Send_Service_Signal_Message+0x2a4>
 800703c:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <Send_Service_Signal_Message+0x27c>)
 800703e:	791b      	ldrb	r3, [r3, #4]
 8007040:	79fa      	ldrb	r2, [r7, #7]
 8007042:	429a      	cmp	r2, r3
 8007044:	d146      	bne.n	80070d4 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800704c:	4818      	ldr	r0, [pc, #96]	; (80070b0 <Send_Service_Signal_Message+0x280>)
 800704e:	f012 ff31 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8007052:	4602      	mov	r2, r0
 8007054:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <Send_Service_Signal_Message+0x284>)
 8007056:	fba3 1302 	umull	r1, r3, r3, r2
 800705a:	099b      	lsrs	r3, r3, #6
 800705c:	21c8      	movs	r1, #200	; 0xc8
 800705e:	fb01 f303 	mul.w	r3, r1, r3
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 8007068:	4817      	ldr	r0, [pc, #92]	; (80070c8 <Send_Service_Signal_Message+0x298>)
 800706a:	f01b fb17 	bl	802269c <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	4a12      	ldr	r2, [pc, #72]	; (80070bc <Send_Service_Signal_Message+0x28c>)
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	4413      	add	r3, r2
 8007076:	3302      	adds	r3, #2
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	4619      	mov	r1, r3
 800707c:	4813      	ldr	r0, [pc, #76]	; (80070cc <Send_Service_Signal_Message+0x29c>)
 800707e:	f01b fa71 	bl	8022564 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8007082:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007086:	4619      	mov	r1, r3
 8007088:	4811      	ldr	r0, [pc, #68]	; (80070d0 <Send_Service_Signal_Message+0x2a0>)
 800708a:	f01b fa6b 	bl	8022564 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 800708e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007092:	f107 020c 	add.w	r2, r7, #12
 8007096:	441a      	add	r2, r3
 8007098:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800709c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80070a0:	2108      	movs	r1, #8
 80070a2:	f7f9 fb43 	bl	800072c <InsertBits>
	{
 80070a6:	e033      	b.n	8007110 <Send_Service_Signal_Message+0x2e0>
 80070a8:	20000304 	.word	0x20000304
 80070ac:	2000195c 	.word	0x2000195c
 80070b0:	20009c7c 	.word	0x20009c7c
 80070b4:	51eb851f 	.word	0x51eb851f
 80070b8:	080240b8 	.word	0x080240b8
 80070bc:	200011c4 	.word	0x200011c4
 80070c0:	0802465c 	.word	0x0802465c
 80070c4:	0802467c 	.word	0x0802467c
 80070c8:	0802411c 	.word	0x0802411c
 80070cc:	0802469c 	.word	0x0802469c
 80070d0:	080246bc 	.word	0x080246bc
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80070d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070d8:	f107 020c 	add.w	r2, r7, #12
 80070dc:	18d1      	adds	r1, r2, r3
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	484e      	ldr	r0, [pc, #312]	; (800721c <Send_Service_Signal_Message+0x3ec>)
 80070e2:	011a      	lsls	r2, r3, #4
 80070e4:	4402      	add	r2, r0
 80070e6:	3202      	adds	r2, #2
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	3201      	adds	r2, #1
 80070ec:	b2d4      	uxtb	r4, r2
 80070ee:	484b      	ldr	r0, [pc, #300]	; (800721c <Send_Service_Signal_Message+0x3ec>)
 80070f0:	011a      	lsls	r2, r3, #4
 80070f2:	4402      	add	r2, r0
 80070f4:	3202      	adds	r2, #2
 80070f6:	4620      	mov	r0, r4
 80070f8:	7010      	strb	r0, [r2, #0]
 80070fa:	4a48      	ldr	r2, [pc, #288]	; (800721c <Send_Service_Signal_Message+0x3ec>)
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	4413      	add	r3, r2
 8007100:	3302      	adds	r3, #2
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007108:	460a      	mov	r2, r1
 800710a:	2108      	movs	r1, #8
 800710c:	f7f9 fb0e 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007110:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007114:	3308      	adds	r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	da00      	bge.n	800711c <Send_Service_Signal_Message+0x2ec>
 800711a:	3307      	adds	r3, #7
 800711c:	10db      	asrs	r3, r3, #3
 800711e:	b29a      	uxth	r2, r3
 8007120:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007124:	4413      	add	r3, r2
 8007126:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800712a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800712e:	3308      	adds	r3, #8
 8007130:	b29b      	uxth	r3, r3
 8007132:	b21b      	sxth	r3, r3
 8007134:	425a      	negs	r2, r3
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	f002 0207 	and.w	r2, r2, #7
 800713e:	bf58      	it	pl
 8007140:	4253      	negpl	r3, r2
 8007142:	b21b      	sxth	r3, r3
 8007144:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007148:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800714c:	f107 020c 	add.w	r2, r7, #12
 8007150:	441a      	add	r2, r3
 8007152:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007156:	2306      	movs	r3, #6
 8007158:	2108      	movs	r1, #8
 800715a:	f7f9 fae7 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800715e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007162:	3308      	adds	r3, #8
 8007164:	2b00      	cmp	r3, #0
 8007166:	da00      	bge.n	800716a <Send_Service_Signal_Message+0x33a>
 8007168:	3307      	adds	r3, #7
 800716a:	10db      	asrs	r3, r3, #3
 800716c:	b29a      	uxth	r2, r3
 800716e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007172:	4413      	add	r3, r2
 8007174:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007178:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800717c:	3308      	adds	r3, #8
 800717e:	b29b      	uxth	r3, r3
 8007180:	b21b      	sxth	r3, r3
 8007182:	425a      	negs	r2, r3
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	f002 0207 	and.w	r2, r2, #7
 800718c:	bf58      	it	pl
 800718e:	4253      	negpl	r3, r2
 8007190:	b21b      	sxth	r3, r3
 8007192:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	4a21      	ldr	r2, [pc, #132]	; (8007220 <Send_Service_Signal_Message+0x3f0>)
 800719a:	5cd3      	ldrb	r3, [r2, r3]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d147      	bne.n	8007230 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 80071a0:	f003 ffaa 	bl	800b0f8 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 80071a4:	79fa      	ldrb	r2, [r7, #7]
 80071a6:	4613      	mov	r3, r2
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	4413      	add	r3, r2
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <Send_Service_Signal_Message+0x3f4>)
 80071b0:	4413      	add	r3, r2
 80071b2:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <Send_Service_Signal_Message+0x3f8>)
 80071b4:	6811      	ldr	r1, [r2, #0]
 80071b6:	6019      	str	r1, [r3, #0]
 80071b8:	8892      	ldrh	r2, [r2, #4]
 80071ba:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 80071bc:	481b      	ldr	r0, [pc, #108]	; (800722c <Send_Service_Signal_Message+0x3fc>)
 80071be:	f01b fa6d 	bl	802269c <puts>
		Change_MLK_TIME[Source_Index] = 0;
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	4a16      	ldr	r2, [pc, #88]	; (8007220 <Send_Service_Signal_Message+0x3f0>)
 80071c6:	2100      	movs	r1, #0
 80071c8:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 80071ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071ce:	f107 020c 	add.w	r2, r7, #12
 80071d2:	441a      	add	r2, r3
 80071d4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80071d8:	2369      	movs	r3, #105	; 0x69
 80071da:	2110      	movs	r1, #16
 80071dc:	f7f9 faa6 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80071e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80071e4:	3310      	adds	r3, #16
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da00      	bge.n	80071ec <Send_Service_Signal_Message+0x3bc>
 80071ea:	3307      	adds	r3, #7
 80071ec:	10db      	asrs	r3, r3, #3
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071f4:	4413      	add	r3, r2
 80071f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071fe:	3310      	adds	r3, #16
 8007200:	b29b      	uxth	r3, r3
 8007202:	b21b      	sxth	r3, r3
 8007204:	425a      	negs	r2, r3
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	f002 0207 	and.w	r2, r2, #7
 800720e:	bf58      	it	pl
 8007210:	4253      	negpl	r3, r2
 8007212:	b21b      	sxth	r3, r3
 8007214:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007218:	e031      	b.n	800727e <Send_Service_Signal_Message+0x44e>
 800721a:	bf00      	nop
 800721c:	200011c4 	.word	0x200011c4
 8007220:	200010d8 	.word	0x200010d8
 8007224:	20001188 	.word	0x20001188
 8007228:	200027ec 	.word	0x200027ec
 800722c:	08024438 	.word	0x08024438
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007230:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007234:	f107 020c 	add.w	r2, r7, #12
 8007238:	441a      	add	r2, r3
 800723a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800723e:	2329      	movs	r3, #41	; 0x29
 8007240:	2110      	movs	r1, #16
 8007242:	f7f9 fa73 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007246:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800724a:	3310      	adds	r3, #16
 800724c:	2b00      	cmp	r3, #0
 800724e:	da00      	bge.n	8007252 <Send_Service_Signal_Message+0x422>
 8007250:	3307      	adds	r3, #7
 8007252:	10db      	asrs	r3, r3, #3
 8007254:	b29a      	uxth	r2, r3
 8007256:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800725a:	4413      	add	r3, r2
 800725c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007260:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007264:	3310      	adds	r3, #16
 8007266:	b29b      	uxth	r3, r3
 8007268:	b21b      	sxth	r3, r3
 800726a:	425a      	negs	r2, r3
 800726c:	f003 0307 	and.w	r3, r3, #7
 8007270:	f002 0207 	and.w	r2, r2, #7
 8007274:	bf58      	it	pl
 8007276:	4253      	negpl	r3, r2
 8007278:	b21b      	sxth	r3, r3
 800727a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800727e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007282:	f107 020c 	add.w	r2, r7, #12
 8007286:	18d1      	adds	r1, r2, r3
 8007288:	79fa      	ldrb	r2, [r7, #7]
 800728a:	48b5      	ldr	r0, [pc, #724]	; (8007560 <Send_Service_Signal_Message+0x730>)
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	4403      	add	r3, r0
 8007296:	3305      	adds	r3, #5
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800729e:	460a      	mov	r2, r1
 80072a0:	2108      	movs	r1, #8
 80072a2:	f7f9 fa43 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80072a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072aa:	3308      	adds	r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	da00      	bge.n	80072b2 <Send_Service_Signal_Message+0x482>
 80072b0:	3307      	adds	r3, #7
 80072b2:	10db      	asrs	r3, r3, #3
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072ba:	4413      	add	r3, r2
 80072bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072c4:	3308      	adds	r3, #8
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	b21b      	sxth	r3, r3
 80072ca:	425a      	negs	r2, r3
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	f002 0207 	and.w	r2, r2, #7
 80072d4:	bf58      	it	pl
 80072d6:	4253      	negpl	r3, r2
 80072d8:	b21b      	sxth	r3, r3
 80072da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80072de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072e2:	f107 020c 	add.w	r2, r7, #12
 80072e6:	18d1      	adds	r1, r2, r3
 80072e8:	79fa      	ldrb	r2, [r7, #7]
 80072ea:	489d      	ldr	r0, [pc, #628]	; (8007560 <Send_Service_Signal_Message+0x730>)
 80072ec:	4613      	mov	r3, r2
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	4413      	add	r3, r2
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	4403      	add	r3, r0
 80072f6:	3304      	adds	r3, #4
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072fe:	460a      	mov	r2, r1
 8007300:	2108      	movs	r1, #8
 8007302:	f7f9 fa13 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007306:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800730a:	3308      	adds	r3, #8
 800730c:	2b00      	cmp	r3, #0
 800730e:	da00      	bge.n	8007312 <Send_Service_Signal_Message+0x4e2>
 8007310:	3307      	adds	r3, #7
 8007312:	10db      	asrs	r3, r3, #3
 8007314:	b29a      	uxth	r2, r3
 8007316:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800731a:	4413      	add	r3, r2
 800731c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007320:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007324:	3308      	adds	r3, #8
 8007326:	b29b      	uxth	r3, r3
 8007328:	b21b      	sxth	r3, r3
 800732a:	425a      	negs	r2, r3
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	f002 0207 	and.w	r2, r2, #7
 8007334:	bf58      	it	pl
 8007336:	4253      	negpl	r3, r2
 8007338:	b21b      	sxth	r3, r3
 800733a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800733e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007342:	f107 020c 	add.w	r2, r7, #12
 8007346:	18d1      	adds	r1, r2, r3
 8007348:	79fa      	ldrb	r2, [r7, #7]
 800734a:	4885      	ldr	r0, [pc, #532]	; (8007560 <Send_Service_Signal_Message+0x730>)
 800734c:	4613      	mov	r3, r2
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	4413      	add	r3, r2
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	4403      	add	r3, r0
 8007356:	3303      	adds	r3, #3
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800735e:	460a      	mov	r2, r1
 8007360:	2108      	movs	r1, #8
 8007362:	f7f9 f9e3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007366:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800736a:	3308      	adds	r3, #8
 800736c:	2b00      	cmp	r3, #0
 800736e:	da00      	bge.n	8007372 <Send_Service_Signal_Message+0x542>
 8007370:	3307      	adds	r3, #7
 8007372:	10db      	asrs	r3, r3, #3
 8007374:	b29a      	uxth	r2, r3
 8007376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800737a:	4413      	add	r3, r2
 800737c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007380:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007384:	3308      	adds	r3, #8
 8007386:	b29b      	uxth	r3, r3
 8007388:	b21b      	sxth	r3, r3
 800738a:	425a      	negs	r2, r3
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	f002 0207 	and.w	r2, r2, #7
 8007394:	bf58      	it	pl
 8007396:	4253      	negpl	r3, r2
 8007398:	b21b      	sxth	r3, r3
 800739a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 800739e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073a2:	f107 020c 	add.w	r2, r7, #12
 80073a6:	18d1      	adds	r1, r2, r3
 80073a8:	79fa      	ldrb	r2, [r7, #7]
 80073aa:	486d      	ldr	r0, [pc, #436]	; (8007560 <Send_Service_Signal_Message+0x730>)
 80073ac:	4613      	mov	r3, r2
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	4413      	add	r3, r2
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	4403      	add	r3, r0
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073bc:	460a      	mov	r2, r1
 80073be:	2108      	movs	r1, #8
 80073c0:	f7f9 f9b4 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80073c4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073c8:	3308      	adds	r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	da00      	bge.n	80073d0 <Send_Service_Signal_Message+0x5a0>
 80073ce:	3307      	adds	r3, #7
 80073d0:	10db      	asrs	r3, r3, #3
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073d8:	4413      	add	r3, r2
 80073da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80073de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073e2:	3308      	adds	r3, #8
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	b21b      	sxth	r3, r3
 80073e8:	425a      	negs	r2, r3
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	f002 0207 	and.w	r2, r2, #7
 80073f2:	bf58      	it	pl
 80073f4:	4253      	negpl	r3, r2
 80073f6:	b21b      	sxth	r3, r3
 80073f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80073fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007400:	f107 020c 	add.w	r2, r7, #12
 8007404:	18d1      	adds	r1, r2, r3
 8007406:	79fa      	ldrb	r2, [r7, #7]
 8007408:	4855      	ldr	r0, [pc, #340]	; (8007560 <Send_Service_Signal_Message+0x730>)
 800740a:	4613      	mov	r3, r2
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	4413      	add	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4403      	add	r3, r0
 8007414:	3301      	adds	r3, #1
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800741c:	460a      	mov	r2, r1
 800741e:	2108      	movs	r1, #8
 8007420:	f7f9 f984 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007424:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007428:	3308      	adds	r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	da00      	bge.n	8007430 <Send_Service_Signal_Message+0x600>
 800742e:	3307      	adds	r3, #7
 8007430:	10db      	asrs	r3, r3, #3
 8007432:	b29a      	uxth	r2, r3
 8007434:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007438:	4413      	add	r3, r2
 800743a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800743e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007442:	3308      	adds	r3, #8
 8007444:	b29b      	uxth	r3, r3
 8007446:	b21b      	sxth	r3, r3
 8007448:	425a      	negs	r2, r3
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	f002 0207 	and.w	r2, r2, #7
 8007452:	bf58      	it	pl
 8007454:	4253      	negpl	r3, r2
 8007456:	b21b      	sxth	r3, r3
 8007458:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 800745c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007460:	f107 020c 	add.w	r2, r7, #12
 8007464:	18d1      	adds	r1, r2, r3
 8007466:	79fa      	ldrb	r2, [r7, #7]
 8007468:	483d      	ldr	r0, [pc, #244]	; (8007560 <Send_Service_Signal_Message+0x730>)
 800746a:	4613      	mov	r3, r2
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	4413      	add	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4403      	add	r3, r0
 8007474:	3302      	adds	r3, #2
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800747c:	460a      	mov	r2, r1
 800747e:	2108      	movs	r1, #8
 8007480:	f7f9 f954 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007484:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007488:	3308      	adds	r3, #8
 800748a:	2b00      	cmp	r3, #0
 800748c:	da00      	bge.n	8007490 <Send_Service_Signal_Message+0x660>
 800748e:	3307      	adds	r3, #7
 8007490:	10db      	asrs	r3, r3, #3
 8007492:	b29a      	uxth	r2, r3
 8007494:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007498:	4413      	add	r3, r2
 800749a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800749e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074a2:	3308      	adds	r3, #8
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	b21b      	sxth	r3, r3
 80074a8:	425a      	negs	r2, r3
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	f002 0207 	and.w	r2, r2, #7
 80074b2:	bf58      	it	pl
 80074b4:	4253      	negpl	r3, r2
 80074b6:	b21b      	sxth	r3, r3
 80074b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 80074bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074c0:	f107 020c 	add.w	r2, r7, #12
 80074c4:	18d4      	adds	r4, r2, r3
 80074c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f00b fc65 	bl	8012da0 <CalculateDirectReverseCrc>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074dc:	4622      	mov	r2, r4
 80074de:	2120      	movs	r1, #32
 80074e0:	f7f9 f924 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 80074e4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80074e8:	3320      	adds	r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da00      	bge.n	80074f0 <Send_Service_Signal_Message+0x6c0>
 80074ee:	3307      	adds	r3, #7
 80074f0:	10db      	asrs	r3, r3, #3
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074f8:	4413      	add	r3, r2
 80074fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80074fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007502:	3320      	adds	r3, #32
 8007504:	b29b      	uxth	r3, r3
 8007506:	b21b      	sxth	r3, r3
 8007508:	425a      	negs	r2, r3
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	f002 0207 	and.w	r2, r2, #7
 8007512:	bf58      	it	pl
 8007514:	4253      	negpl	r3, r2
 8007516:	b21b      	sxth	r3, r3
 8007518:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800751c:	4b11      	ldr	r3, [pc, #68]	; (8007564 <Send_Service_Signal_Message+0x734>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	0a5b      	lsrs	r3, r3, #9
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00b      	beq.n	8007542 <Send_Service_Signal_Message+0x712>
 800752a:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <Send_Service_Signal_Message+0x734>)
 800752c:	791b      	ldrb	r3, [r3, #4]
 800752e:	79fa      	ldrb	r2, [r7, #7]
 8007530:	429a      	cmp	r2, r3
 8007532:	d106      	bne.n	8007542 <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007534:	480c      	ldr	r0, [pc, #48]	; (8007568 <Send_Service_Signal_Message+0x738>)
 8007536:	f01b f8b1 	bl	802269c <puts>
		printf("Not Sending Reply");
 800753a:	480c      	ldr	r0, [pc, #48]	; (800756c <Send_Service_Signal_Message+0x73c>)
 800753c:	f01b f812 	bl	8022564 <iprintf>
 8007540:	e009      	b.n	8007556 <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8007542:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007546:	b2d9      	uxtb	r1, r3
 8007548:	79fa      	ldrb	r2, [r7, #7]
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f80e 	bl	8007570 <Process_Sending_Reply>
	}
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop
 8007558:	3754      	adds	r7, #84	; 0x54
 800755a:	46bd      	mov	sp, r7
 800755c:	bd90      	pop	{r4, r7, pc}
 800755e:	bf00      	nop
 8007560:	20001188 	.word	0x20001188
 8007564:	2000195c 	.word	0x2000195c
 8007568:	080241e8 	.word	0x080241e8
 800756c:	08024200 	.word	0x08024200

08007570 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b09c      	sub	sp, #112	; 0x70
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
 800757c:	4613      	mov	r3, r2
 800757e:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 8007580:	2300      	movs	r3, #0
 8007582:	60bb      	str	r3, [r7, #8]
 8007584:	f107 030c 	add.w	r3, r7, #12
 8007588:	2260      	movs	r2, #96	; 0x60
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f01a ff01 	bl	8022394 <memset>
	uint8_t uc_index = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 800759e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80075a8:	4619      	mov	r1, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80075b2:	443b      	add	r3, r7
 80075b4:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80075be:	e03c      	b.n	800763a <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 80075c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4413      	add	r3, r2
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2bef      	cmp	r3, #239	; 0xef
 80075cc:	d922      	bls.n	8007614 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 80075ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4413      	add	r3, r2
 80075d6:	781a      	ldrb	r2, [r3, #0]
 80075d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80075dc:	1c59      	adds	r1, r3, #1
 80075de:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80075e2:	f022 020f 	bic.w	r2, r2, #15
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	3370      	adds	r3, #112	; 0x70
 80075ea:	443b      	add	r3, r7
 80075ec:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 80075f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4413      	add	r3, r2
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80075fe:	1c59      	adds	r1, r3, #1
 8007600:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007604:	f002 020f 	and.w	r2, r2, #15
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	3370      	adds	r3, #112	; 0x70
 800760c:	443b      	add	r3, r7
 800760e:	f803 2c68 	strb.w	r2, [r3, #-104]
 8007612:	e00d      	b.n	8007630 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 8007614:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	441a      	add	r2, r3
 800761c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007620:	1c59      	adds	r1, r3, #1
 8007622:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007626:	7812      	ldrb	r2, [r2, #0]
 8007628:	3370      	adds	r3, #112	; 0x70
 800762a:	443b      	add	r3, r7
 800762c:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007630:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007634:	3301      	adds	r3, #1
 8007636:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800763a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	429a      	cmp	r2, r3
 8007642:	d3bd      	bcc.n	80075c0 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8007644:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 800764e:	3370      	adds	r3, #112	; 0x70
 8007650:	443b      	add	r3, r7
 8007652:	22f6      	movs	r2, #246	; 0xf6
 8007654:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 8007658:	78bb      	ldrb	r3, [r7, #2]
 800765a:	4a37      	ldr	r2, [pc, #220]	; (8007738 <Process_Sending_Reply+0x1c8>)
 800765c:	5cd3      	ldrb	r3, [r2, r3]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d10b      	bne.n	800767a <Process_Sending_Reply+0x10a>
 8007662:	4b36      	ldr	r3, [pc, #216]	; (800773c <Process_Sending_Reply+0x1cc>)
 8007664:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007668:	2b00      	cmp	r3, #0
 800766a:	d106      	bne.n	800767a <Process_Sending_Reply+0x10a>
 800766c:	4b34      	ldr	r3, [pc, #208]	; (8007740 <Process_Sending_Reply+0x1d0>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d102      	bne.n	800767a <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8007674:	4833      	ldr	r0, [pc, #204]	; (8007744 <Process_Sending_Reply+0x1d4>)
 8007676:	f000 fe9f 	bl	80083b8 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 800767a:	78bb      	ldrb	r3, [r7, #2]
 800767c:	4a32      	ldr	r2, [pc, #200]	; (8007748 <Process_Sending_Reply+0x1d8>)
 800767e:	4413      	add	r3, r2
 8007680:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007684:	2b01      	cmp	r3, #1
 8007686:	d10d      	bne.n	80076a4 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 8007688:	78bb      	ldrb	r3, [r7, #2]
 800768a:	4a30      	ldr	r2, [pc, #192]	; (800774c <Process_Sending_Reply+0x1dc>)
 800768c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8007690:	f107 0008 	add.w	r0, r7, #8
 8007694:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007698:	f007 fce8 	bl	800f06c <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = CLEAR;
 800769c:	78bb      	ldrb	r3, [r7, #2]
 800769e:	4a26      	ldr	r2, [pc, #152]	; (8007738 <Process_Sending_Reply+0x1c8>)
 80076a0:	2100      	movs	r1, #0
 80076a2:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80076a4:	78bb      	ldrb	r3, [r7, #2]
 80076a6:	4a28      	ldr	r2, [pc, #160]	; (8007748 <Process_Sending_Reply+0x1d8>)
 80076a8:	4413      	add	r3, r2
 80076aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d119      	bne.n	80076e6 <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 80076b2:	2300      	movs	r3, #0
 80076b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80076b8:	e00e      	b.n	80076d8 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 80076ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076be:	3370      	adds	r3, #112	; 0x70
 80076c0:	443b      	add	r3, r7
 80076c2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80076c6:	4619      	mov	r1, r3
 80076c8:	2003      	movs	r0, #3
 80076ca:	f00d fce9 	bl	80150a0 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 80076ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076d2:	3301      	adds	r3, #1
 80076d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80076d8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d3e9      	bcc.n	80076ba <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 80076e6:	4b16      	ldr	r3, [pc, #88]	; (8007740 <Process_Sending_Reply+0x1d0>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d102      	bne.n	80076f4 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80076ee:	4815      	ldr	r0, [pc, #84]	; (8007744 <Process_Sending_Reply+0x1d4>)
 80076f0:	f000 fe62 	bl	80083b8 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 80076f4:	4b11      	ldr	r3, [pc, #68]	; (800773c <Process_Sending_Reply+0x1cc>)
 80076f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <Process_Sending_Reply+0x1cc>)
 8007700:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007704:	461a      	mov	r2, r3
 8007706:	2101      	movs	r1, #1
 8007708:	480c      	ldr	r0, [pc, #48]	; (800773c <Process_Sending_Reply+0x1cc>)
 800770a:	f000 fcaf 	bl	800806c <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 800770e:	4b0b      	ldr	r3, [pc, #44]	; (800773c <Process_Sending_Reply+0x1cc>)
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	461a      	mov	r2, r3
 800771a:	2100      	movs	r1, #0
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fca5 	bl	800806c <Print_EI_DATA>

	if(Debug_flag == 1)
 8007722:	4b07      	ldr	r3, [pc, #28]	; (8007740 <Process_Sending_Reply+0x1d0>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d102      	bne.n	8007730 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 800772a:	4809      	ldr	r0, [pc, #36]	; (8007750 <Process_Sending_Reply+0x1e0>)
 800772c:	f000 fe44 	bl	80083b8 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8007730:	bf00      	nop
 8007732:	3770      	adds	r7, #112	; 0x70
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	200010cc 	.word	0x200010cc
 800773c:	20001c10 	.word	0x20001c10
 8007740:	20000645 	.word	0x20000645
 8007744:	08024700 	.word	0x08024700
 8007748:	20000304 	.word	0x20000304
 800774c:	20001058 	.word	0x20001058
 8007750:	08024760 	.word	0x08024760

08007754 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 800775e:	f00d fef7 	bl	8015550 <HAL_GetTick>
 8007762:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	4a7c      	ldr	r2, [pc, #496]	; (8007958 <Check_Primary_r_Secondary+0x204>)
 8007768:	4413      	add	r3, r2
 800776a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800776e:	2b02      	cmp	r3, #2
 8007770:	f000 80ee 	beq.w	8007950 <Check_Primary_r_Secondary+0x1fc>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007774:	79fa      	ldrb	r2, [r7, #7]
 8007776:	4979      	ldr	r1, [pc, #484]	; (800795c <Check_Primary_r_Secondary+0x208>)
 8007778:	4613      	mov	r3, r2
 800777a:	005b      	lsls	r3, r3, #1
 800777c:	4413      	add	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	440b      	add	r3, r1
 8007782:	3303      	adds	r3, #3
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d12b      	bne.n	80077e2 <Check_Primary_r_Secondary+0x8e>
 800778a:	79fa      	ldrb	r2, [r7, #7]
 800778c:	4974      	ldr	r1, [pc, #464]	; (8007960 <Check_Primary_r_Secondary+0x20c>)
 800778e:	4613      	mov	r3, r2
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	4413      	add	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	440b      	add	r3, r1
 8007798:	3303      	adds	r3, #3
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d120      	bne.n	80077e2 <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80077a0:	79fa      	ldrb	r2, [r7, #7]
 80077a2:	496e      	ldr	r1, [pc, #440]	; (800795c <Check_Primary_r_Secondary+0x208>)
 80077a4:	4613      	mov	r3, r2
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	4413      	add	r3, r2
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	440b      	add	r3, r1
 80077ae:	3304      	adds	r3, #4
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80cd 	beq.w	8007952 <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80077b8:	79fb      	ldrb	r3, [r7, #7]
 80077ba:	4a67      	ldr	r2, [pc, #412]	; (8007958 <Check_Primary_r_Secondary+0x204>)
 80077bc:	3366      	adds	r3, #102	; 0x66
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	4619      	mov	r1, r3
 80077c6:	4867      	ldr	r0, [pc, #412]	; (8007964 <Check_Primary_r_Secondary+0x210>)
 80077c8:	f01a fecc 	bl	8022564 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80077cc:	79fa      	ldrb	r2, [r7, #7]
 80077ce:	4963      	ldr	r1, [pc, #396]	; (800795c <Check_Primary_r_Secondary+0x208>)
 80077d0:	4613      	mov	r3, r2
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	440b      	add	r3, r1
 80077da:	3304      	adds	r3, #4
 80077dc:	2200      	movs	r2, #0
 80077de:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80077e0:	e0b7      	b.n	8007952 <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80077e2:	79fa      	ldrb	r2, [r7, #7]
 80077e4:	495d      	ldr	r1, [pc, #372]	; (800795c <Check_Primary_r_Secondary+0x208>)
 80077e6:	4613      	mov	r3, r2
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4413      	add	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	440b      	add	r3, r1
 80077f0:	3303      	adds	r3, #3
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d12b      	bne.n	8007850 <Check_Primary_r_Secondary+0xfc>
 80077f8:	79fa      	ldrb	r2, [r7, #7]
 80077fa:	4959      	ldr	r1, [pc, #356]	; (8007960 <Check_Primary_r_Secondary+0x20c>)
 80077fc:	4613      	mov	r3, r2
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	4413      	add	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	440b      	add	r3, r1
 8007806:	3303      	adds	r3, #3
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d120      	bne.n	8007850 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800780e:	79fa      	ldrb	r2, [r7, #7]
 8007810:	4952      	ldr	r1, [pc, #328]	; (800795c <Check_Primary_r_Secondary+0x208>)
 8007812:	4613      	mov	r3, r2
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	4413      	add	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	440b      	add	r3, r1
 800781c:	3304      	adds	r3, #4
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8096 	beq.w	8007952 <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	4a4b      	ldr	r2, [pc, #300]	; (8007958 <Check_Primary_r_Secondary+0x204>)
 800782a:	3366      	adds	r3, #102	; 0x66
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	4619      	mov	r1, r3
 8007834:	484c      	ldr	r0, [pc, #304]	; (8007968 <Check_Primary_r_Secondary+0x214>)
 8007836:	f01a fe95 	bl	8022564 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800783a:	79fa      	ldrb	r2, [r7, #7]
 800783c:	4947      	ldr	r1, [pc, #284]	; (800795c <Check_Primary_r_Secondary+0x208>)
 800783e:	4613      	mov	r3, r2
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	4413      	add	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	440b      	add	r3, r1
 8007848:	3304      	adds	r3, #4
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800784e:	e080      	b.n	8007952 <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007850:	79fa      	ldrb	r2, [r7, #7]
 8007852:	4942      	ldr	r1, [pc, #264]	; (800795c <Check_Primary_r_Secondary+0x208>)
 8007854:	4613      	mov	r3, r2
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	4413      	add	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	440b      	add	r3, r1
 800785e:	3303      	adds	r3, #3
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d13e      	bne.n	80078e4 <Check_Primary_r_Secondary+0x190>
 8007866:	79fa      	ldrb	r2, [r7, #7]
 8007868:	493d      	ldr	r1, [pc, #244]	; (8007960 <Check_Primary_r_Secondary+0x20c>)
 800786a:	4613      	mov	r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	4413      	add	r3, r2
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	440b      	add	r3, r1
 8007874:	3303      	adds	r3, #3
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d133      	bne.n	80078e4 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 800787c:	79fa      	ldrb	r2, [r7, #7]
 800787e:	4937      	ldr	r1, [pc, #220]	; (800795c <Check_Primary_r_Secondary+0x208>)
 8007880:	4613      	mov	r3, r2
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	4413      	add	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	440b      	add	r3, r1
 800788a:	3304      	adds	r3, #4
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d05f      	beq.n	8007952 <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	4a30      	ldr	r2, [pc, #192]	; (8007958 <Check_Primary_r_Secondary+0x204>)
 8007896:	3366      	adds	r3, #102	; 0x66
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	4619      	mov	r1, r3
 80078a0:	4832      	ldr	r0, [pc, #200]	; (800796c <Check_Primary_r_Secondary+0x218>)
 80078a2:	f01a fe5f 	bl	8022564 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	4931      	ldr	r1, [pc, #196]	; (8007970 <Check_Primary_r_Secondary+0x21c>)
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	4930      	ldr	r1, [pc, #192]	; (8007974 <Check_Primary_r_Secondary+0x220>)
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 80078ba:	79fa      	ldrb	r2, [r7, #7]
 80078bc:	4927      	ldr	r1, [pc, #156]	; (800795c <Check_Primary_r_Secondary+0x208>)
 80078be:	4613      	mov	r3, r2
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	4413      	add	r3, r2
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	440b      	add	r3, r1
 80078c8:	3310      	adds	r3, #16
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80078ce:	79fa      	ldrb	r2, [r7, #7]
 80078d0:	4922      	ldr	r1, [pc, #136]	; (800795c <Check_Primary_r_Secondary+0x208>)
 80078d2:	4613      	mov	r3, r2
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	4413      	add	r3, r2
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	440b      	add	r3, r1
 80078dc:	3304      	adds	r3, #4
 80078de:	2201      	movs	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80078e2:	e036      	b.n	8007952 <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80078e4:	79fa      	ldrb	r2, [r7, #7]
 80078e6:	491d      	ldr	r1, [pc, #116]	; (800795c <Check_Primary_r_Secondary+0x208>)
 80078e8:	4613      	mov	r3, r2
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	4413      	add	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	440b      	add	r3, r1
 80078f2:	3303      	adds	r3, #3
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d12b      	bne.n	8007952 <Check_Primary_r_Secondary+0x1fe>
 80078fa:	79fa      	ldrb	r2, [r7, #7]
 80078fc:	4918      	ldr	r1, [pc, #96]	; (8007960 <Check_Primary_r_Secondary+0x20c>)
 80078fe:	4613      	mov	r3, r2
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	4413      	add	r3, r2
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	440b      	add	r3, r1
 8007908:	3303      	adds	r3, #3
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d120      	bne.n	8007952 <Check_Primary_r_Secondary+0x1fe>
			//				Link_Establish_Clock[Source_Index] = CurTicks;
			//			}
#endif

#ifdef EI_2
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007910:	79fa      	ldrb	r2, [r7, #7]
 8007912:	4912      	ldr	r1, [pc, #72]	; (800795c <Check_Primary_r_Secondary+0x208>)
 8007914:	4613      	mov	r3, r2
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	4413      	add	r3, r2
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	440b      	add	r3, r1
 800791e:	3304      	adds	r3, #4
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d015      	beq.n	8007952 <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards Receiving data,EiPC_2 Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	4a0b      	ldr	r2, [pc, #44]	; (8007958 <Check_Primary_r_Secondary+0x204>)
 800792a:	3366      	adds	r3, #102	; 0x66
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	4619      	mov	r1, r3
 8007934:	4810      	ldr	r0, [pc, #64]	; (8007978 <Check_Primary_r_Secondary+0x224>)
 8007936:	f01a fe15 	bl	8022564 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800793a:	79fa      	ldrb	r2, [r7, #7]
 800793c:	4907      	ldr	r1, [pc, #28]	; (800795c <Check_Primary_r_Secondary+0x208>)
 800793e:	4613      	mov	r3, r2
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	4413      	add	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	440b      	add	r3, r1
 8007948:	3304      	adds	r3, #4
 800794a:	2200      	movs	r2, #0
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	e000      	b.n	8007952 <Check_Primary_r_Secondary+0x1fe>
		return;
 8007950:	bf00      	nop
			//			}
#endif

		}
	}
}
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000304 	.word	0x20000304
 800795c:	20001674 	.word	0x20001674
 8007960:	20001764 	.word	0x20001764
 8007964:	08024918 	.word	0x08024918
 8007968:	08024954 	.word	0x08024954
 800796c:	08024990 	.word	0x08024990
 8007970:	20000fa4 	.word	0x20000fa4
 8007974:	20000fcc 	.word	0x20000fcc
 8007978:	080249c8 	.word	0x080249c8

0800797c <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	4aac      	ldr	r2, [pc, #688]	; (8007c3c <Check_Vital_CRC+0x2c0>)
 800798a:	4413      	add	r3, r2
 800798c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007990:	2b02      	cmp	r3, #2
 8007992:	f000 814f 	beq.w	8007c34 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007996:	79fa      	ldrb	r2, [r7, #7]
 8007998:	49a9      	ldr	r1, [pc, #676]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 800799a:	4613      	mov	r3, r2
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	4413      	add	r3, r2
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	440b      	add	r3, r1
 80079a4:	3308      	adds	r3, #8
 80079a6:	6819      	ldr	r1, [r3, #0]
 80079a8:	79fa      	ldrb	r2, [r7, #7]
 80079aa:	48a6      	ldr	r0, [pc, #664]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 80079ac:	4613      	mov	r3, r2
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	4413      	add	r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	4403      	add	r3, r0
 80079b6:	3308      	adds	r3, #8
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4299      	cmp	r1, r3
 80079bc:	f000 8092 	beq.w	8007ae4 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 80079c0:	79fa      	ldrb	r2, [r7, #7]
 80079c2:	49a0      	ldr	r1, [pc, #640]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 80079c4:	4613      	mov	r3, r2
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	4413      	add	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	440b      	add	r3, r1
 80079ce:	3308      	adds	r3, #8
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8086 	beq.w	8007ae4 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 80079d8:	79fa      	ldrb	r2, [r7, #7]
 80079da:	4999      	ldr	r1, [pc, #612]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 80079dc:	4613      	mov	r3, r2
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	4413      	add	r3, r2
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	440b      	add	r3, r1
 80079e6:	3304      	adds	r3, #4
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d104      	bne.n	80079f8 <Check_Vital_CRC+0x7c>
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	4a95      	ldr	r2, [pc, #596]	; (8007c48 <Check_Vital_CRC+0x2cc>)
 80079f2:	5cd3      	ldrb	r3, [r2, r3]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d175      	bne.n	8007ae4 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80079f8:	79fa      	ldrb	r2, [r7, #7]
 80079fa:	4991      	ldr	r1, [pc, #580]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 80079fc:	4613      	mov	r3, r2
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	4413      	add	r3, r2
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	440b      	add	r3, r1
 8007a06:	3308      	adds	r3, #8
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	79fa      	ldrb	r2, [r7, #7]
 8007a0c:	488d      	ldr	r0, [pc, #564]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007a0e:	4613      	mov	r3, r2
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	4413      	add	r3, r2
 8007a14:	00db      	lsls	r3, r3, #3
 8007a16:	4403      	add	r3, r0
 8007a18:	3308      	adds	r3, #8
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	1acb      	subs	r3, r1, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfb8      	it	lt
 8007a22:	425b      	neglt	r3, r3
 8007a24:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d104      	bne.n	8007a36 <Check_Vital_CRC+0xba>
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	4a87      	ldr	r2, [pc, #540]	; (8007c4c <Check_Vital_CRC+0x2d0>)
 8007a30:	5cd3      	ldrb	r3, [r2, r3]
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d14c      	bne.n	8007ad0 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	4a84      	ldr	r2, [pc, #528]	; (8007c4c <Check_Vital_CRC+0x2d0>)
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	4a7e      	ldr	r2, [pc, #504]	; (8007c3c <Check_Vital_CRC+0x2c0>)
 8007a42:	3366      	adds	r3, #102	; 0x66
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	4880      	ldr	r0, [pc, #512]	; (8007c50 <Check_Vital_CRC+0x2d4>)
 8007a4e:	f01a fd89 	bl	8022564 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007a52:	79fa      	ldrb	r2, [r7, #7]
 8007a54:	497a      	ldr	r1, [pc, #488]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 8007a56:	4613      	mov	r3, r2
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	4413      	add	r3, r2
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	440b      	add	r3, r1
 8007a60:	3308      	adds	r3, #8
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4619      	mov	r1, r3
 8007a66:	487b      	ldr	r0, [pc, #492]	; (8007c54 <Check_Vital_CRC+0x2d8>)
 8007a68:	f01a fd7c 	bl	8022564 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007a6c:	79fa      	ldrb	r2, [r7, #7]
 8007a6e:	4975      	ldr	r1, [pc, #468]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007a70:	4613      	mov	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	440b      	add	r3, r1
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4875      	ldr	r0, [pc, #468]	; (8007c58 <Check_Vital_CRC+0x2dc>)
 8007a82:	f01a fd6f 	bl	8022564 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007a86:	4875      	ldr	r0, [pc, #468]	; (8007c5c <Check_Vital_CRC+0x2e0>)
 8007a88:	f01a fe08 	bl	802269c <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007a8c:	79fa      	ldrb	r2, [r7, #7]
 8007a8e:	79f9      	ldrb	r1, [r7, #7]
 8007a90:	486c      	ldr	r0, [pc, #432]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007a92:	4613      	mov	r3, r2
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	4413      	add	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	4403      	add	r3, r0
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	486f      	ldr	r0, [pc, #444]	; (8007c60 <Check_Vital_CRC+0x2e4>)
 8007aa2:	010b      	lsls	r3, r1, #4
 8007aa4:	4403      	add	r3, r0
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007aaa:	79f9      	ldrb	r1, [r7, #7]
 8007aac:	79fa      	ldrb	r2, [r7, #7]
 8007aae:	4865      	ldr	r0, [pc, #404]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	440b      	add	r3, r1
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	4403      	add	r3, r0
 8007aba:	3308      	adds	r3, #8
 8007abc:	6819      	ldr	r1, [r3, #0]
 8007abe:	4860      	ldr	r0, [pc, #384]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	4403      	add	r3, r0
 8007aca:	3308      	adds	r3, #8
 8007acc:	6019      	str	r1, [r3, #0]
 8007ace:	e009      	b.n	8007ae4 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d106      	bne.n	8007ae4 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	4a5c      	ldr	r2, [pc, #368]	; (8007c4c <Check_Vital_CRC+0x2d0>)
 8007ada:	5cd2      	ldrb	r2, [r2, r3]
 8007adc:	3201      	adds	r2, #1
 8007ade:	b2d1      	uxtb	r1, r2
 8007ae0:	4a5a      	ldr	r2, [pc, #360]	; (8007c4c <Check_Vital_CRC+0x2d0>)
 8007ae2:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007ae4:	79fa      	ldrb	r2, [r7, #7]
 8007ae6:	4956      	ldr	r1, [pc, #344]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 8007ae8:	4613      	mov	r3, r2
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	4413      	add	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	440b      	add	r3, r1
 8007af2:	330c      	adds	r3, #12
 8007af4:	6819      	ldr	r1, [r3, #0]
 8007af6:	79fa      	ldrb	r2, [r7, #7]
 8007af8:	4852      	ldr	r0, [pc, #328]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007afa:	4613      	mov	r3, r2
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	4413      	add	r3, r2
 8007b00:	00db      	lsls	r3, r3, #3
 8007b02:	4403      	add	r3, r0
 8007b04:	330c      	adds	r3, #12
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4299      	cmp	r1, r3
 8007b0a:	f000 8094 	beq.w	8007c36 <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007b0e:	79fa      	ldrb	r2, [r7, #7]
 8007b10:	494c      	ldr	r1, [pc, #304]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007b12:	4613      	mov	r3, r2
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	4413      	add	r3, r2
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	440b      	add	r3, r1
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 8088 	beq.w	8007c36 <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007b26:	79fa      	ldrb	r2, [r7, #7]
 8007b28:	4945      	ldr	r1, [pc, #276]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	4413      	add	r3, r2
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	440b      	add	r3, r1
 8007b34:	3304      	adds	r3, #4
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d104      	bne.n	8007b46 <Check_Vital_CRC+0x1ca>
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	4a42      	ldr	r2, [pc, #264]	; (8007c48 <Check_Vital_CRC+0x2cc>)
 8007b40:	5cd3      	ldrb	r3, [r2, r3]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d177      	bne.n	8007c36 <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007b46:	79fa      	ldrb	r2, [r7, #7]
 8007b48:	493d      	ldr	r1, [pc, #244]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	4413      	add	r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	440b      	add	r3, r1
 8007b54:	330c      	adds	r3, #12
 8007b56:	6819      	ldr	r1, [r3, #0]
 8007b58:	79fa      	ldrb	r2, [r7, #7]
 8007b5a:	483a      	ldr	r0, [pc, #232]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	4413      	add	r3, r2
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	4403      	add	r3, r0
 8007b66:	330c      	adds	r3, #12
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	1acb      	subs	r3, r1, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bfb8      	it	lt
 8007b70:	425b      	neglt	r3, r3
 8007b72:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d104      	bne.n	8007b84 <Check_Vital_CRC+0x208>
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	4a39      	ldr	r2, [pc, #228]	; (8007c64 <Check_Vital_CRC+0x2e8>)
 8007b7e:	5cd3      	ldrb	r3, [r2, r3]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d14c      	bne.n	8007c1e <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	4a37      	ldr	r2, [pc, #220]	; (8007c64 <Check_Vital_CRC+0x2e8>)
 8007b88:	2100      	movs	r1, #0
 8007b8a:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	4a2b      	ldr	r2, [pc, #172]	; (8007c3c <Check_Vital_CRC+0x2c0>)
 8007b90:	3366      	adds	r3, #102	; 0x66
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4833      	ldr	r0, [pc, #204]	; (8007c68 <Check_Vital_CRC+0x2ec>)
 8007b9c:	f01a fce2 	bl	8022564 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007ba0:	79fa      	ldrb	r2, [r7, #7]
 8007ba2:	4927      	ldr	r1, [pc, #156]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	4413      	add	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	440b      	add	r3, r1
 8007bae:	330c      	adds	r3, #12
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	482d      	ldr	r0, [pc, #180]	; (8007c6c <Check_Vital_CRC+0x2f0>)
 8007bb6:	f01a fcd5 	bl	8022564 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007bba:	79fa      	ldrb	r2, [r7, #7]
 8007bbc:	4921      	ldr	r1, [pc, #132]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	4413      	add	r3, r2
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	440b      	add	r3, r1
 8007bc8:	330c      	adds	r3, #12
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4828      	ldr	r0, [pc, #160]	; (8007c70 <Check_Vital_CRC+0x2f4>)
 8007bd0:	f01a fcc8 	bl	8022564 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007bd4:	4827      	ldr	r0, [pc, #156]	; (8007c74 <Check_Vital_CRC+0x2f8>)
 8007bd6:	f01a fd61 	bl	802269c <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007bda:	79fa      	ldrb	r2, [r7, #7]
 8007bdc:	79f9      	ldrb	r1, [r7, #7]
 8007bde:	4819      	ldr	r0, [pc, #100]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007be0:	4613      	mov	r3, r2
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	4413      	add	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4403      	add	r3, r0
 8007bea:	330c      	adds	r3, #12
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	481c      	ldr	r0, [pc, #112]	; (8007c60 <Check_Vital_CRC+0x2e4>)
 8007bf0:	010b      	lsls	r3, r1, #4
 8007bf2:	4403      	add	r3, r0
 8007bf4:	330c      	adds	r3, #12
 8007bf6:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007bf8:	79f9      	ldrb	r1, [r7, #7]
 8007bfa:	79fa      	ldrb	r2, [r7, #7]
 8007bfc:	4811      	ldr	r0, [pc, #68]	; (8007c44 <Check_Vital_CRC+0x2c8>)
 8007bfe:	460b      	mov	r3, r1
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	440b      	add	r3, r1
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	4403      	add	r3, r0
 8007c08:	330c      	adds	r3, #12
 8007c0a:	6819      	ldr	r1, [r3, #0]
 8007c0c:	480c      	ldr	r0, [pc, #48]	; (8007c40 <Check_Vital_CRC+0x2c4>)
 8007c0e:	4613      	mov	r3, r2
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	4413      	add	r3, r2
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	4403      	add	r3, r0
 8007c18:	330c      	adds	r3, #12
 8007c1a:	6019      	str	r1, [r3, #0]
 8007c1c:	e00b      	b.n	8007c36 <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d108      	bne.n	8007c36 <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	4a0f      	ldr	r2, [pc, #60]	; (8007c64 <Check_Vital_CRC+0x2e8>)
 8007c28:	5cd2      	ldrb	r2, [r2, r3]
 8007c2a:	3201      	adds	r2, #1
 8007c2c:	b2d1      	uxtb	r1, r2
 8007c2e:	4a0d      	ldr	r2, [pc, #52]	; (8007c64 <Check_Vital_CRC+0x2e8>)
 8007c30:	54d1      	strb	r1, [r2, r3]
 8007c32:	e000      	b.n	8007c36 <Check_Vital_CRC+0x2ba>
		return;
 8007c34:	bf00      	nop
				}
			}
		}
	}
}
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000304 	.word	0x20000304
 8007c40:	20001674 	.word	0x20001674
 8007c44:	20001764 	.word	0x20001764
 8007c48:	20000ff4 	.word	0x20000ff4
 8007c4c:	20002038 	.word	0x20002038
 8007c50:	08024a04 	.word	0x08024a04
 8007c54:	08024a48 	.word	0x08024a48
 8007c58:	08024a6c 	.word	0x08024a6c
 8007c5c:	08024a90 	.word	0x08024a90
 8007c60:	200011c4 	.word	0x200011c4
 8007c64:	20002044 	.word	0x20002044
 8007c68:	08024ab8 	.word	0x08024ab8
 8007c6c:	08024afc 	.word	0x08024afc
 8007c70:	08024b20 	.word	0x08024b20
 8007c74:	08024b44 	.word	0x08024b44

08007c78 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	4a0a      	ldr	r2, [pc, #40]	; (8007cb0 <Check_Other_EiPC_Packet+0x38>)
 8007c86:	4413      	add	r3, r2
 8007c88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d007      	beq.n	8007ca0 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff fd5e 	bl	8007754 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff fe6e 	bl	800797c <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 ffd0 	bl	8008c48 <CheckOtherLinkStatus>
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20000304 	.word	0x20000304

08007cb4 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007cbe:	4930      	ldr	r1, [pc, #192]	; (8007d80 <CheckLinkEstablishTimeout+0xcc>)
 8007cc0:	4830      	ldr	r0, [pc, #192]	; (8007d84 <CheckLinkEstablishTimeout+0xd0>)
 8007cc2:	f7f8 fabd 	bl	8000240 <strcmp>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d055      	beq.n	8007d78 <CheckLinkEstablishTimeout+0xc4>
		return;
	}



	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	71fb      	strb	r3, [r7, #7]
 8007cd0:	e04b      	b.n	8007d6a <CheckLinkEstablishTimeout+0xb6>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	4a2c      	ldr	r2, [pc, #176]	; (8007d88 <CheckLinkEstablishTimeout+0xd4>)
 8007cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f006 fe56 	bl	800e98c <HAL_Elaps_Ticks>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	4929      	ldr	r1, [pc, #164]	; (8007d8c <CheckLinkEstablishTimeout+0xd8>)
 8007ce6:	339e      	adds	r3, #158	; 0x9e
 8007ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d939      	bls.n	8007d64 <CheckLinkEstablishTimeout+0xb0>
 8007cf0:	79fb      	ldrb	r3, [r7, #7]
 8007cf2:	4a27      	ldr	r2, [pc, #156]	; (8007d90 <CheckLinkEstablishTimeout+0xdc>)
 8007cf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	4923      	ldr	r1, [pc, #140]	; (8007d88 <CheckLinkEstablishTimeout+0xd4>)
 8007cfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d02f      	beq.n	8007d64 <CheckLinkEstablishTimeout+0xb0>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8007d04:	79fa      	ldrb	r2, [r7, #7]
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	491f      	ldr	r1, [pc, #124]	; (8007d88 <CheckLinkEstablishTimeout+0xd4>)
 8007d0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d0e:	4920      	ldr	r1, [pc, #128]	; (8007d90 <CheckLinkEstablishTimeout+0xdc>)
 8007d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	4a1d      	ldr	r2, [pc, #116]	; (8007d8c <CheckLinkEstablishTimeout+0xd8>)
 8007d18:	3366      	adds	r3, #102	; 0x66
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4619      	mov	r1, r3
 8007d22:	481c      	ldr	r0, [pc, #112]	; (8007d94 <CheckLinkEstablishTimeout+0xe0>)
 8007d24:	f01a fc1e 	bl	8022564 <iprintf>
			Link_Flag[Traverser] = CLEAR;
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	4a1b      	ldr	r2, [pc, #108]	; (8007d98 <CheckLinkEstablishTimeout+0xe4>)
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	54d1      	strb	r1, [r2, r3]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8007d30:	79fa      	ldrb	r2, [r7, #7]
 8007d32:	491a      	ldr	r1, [pc, #104]	; (8007d9c <CheckLinkEstablishTimeout+0xe8>)
 8007d34:	4613      	mov	r3, r2
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	4413      	add	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	440b      	add	r3, r1
 8007d3e:	3310      	adds	r3, #16
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	79fc      	ldrb	r4, [r7, #7]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f006 fe21 	bl	800e98c <HAL_Elaps_Ticks>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	4913      	ldr	r1, [pc, #76]	; (8007d9c <CheckLinkEstablishTimeout+0xe8>)
 8007d4e:	4623      	mov	r3, r4
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	4423      	add	r3, r4
 8007d54:	00db      	lsls	r3, r3, #3
 8007d56:	440b      	add	r3, r1
 8007d58:	3310      	adds	r3, #16
 8007d5a:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 ff72 	bl	8008c48 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	3301      	adds	r3, #1
 8007d68:	71fb      	strb	r3, [r7, #7]
 8007d6a:	4b08      	ldr	r3, [pc, #32]	; (8007d8c <CheckLinkEstablishTimeout+0xd8>)
 8007d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d70:	79fa      	ldrb	r2, [r7, #7]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d3ad      	bcc.n	8007cd2 <CheckLinkEstablishTimeout+0x1e>
 8007d76:	e000      	b.n	8007d7a <CheckLinkEstablishTimeout+0xc6>
		return;
 8007d78:	bf00      	nop
		}
	}
}
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd90      	pop	{r4, r7, pc}
 8007d80:	08023d10 	.word	0x08023d10
 8007d84:	20000305 	.word	0x20000305
 8007d88:	20000f14 	.word	0x20000f14
 8007d8c:	20000304 	.word	0x20000304
 8007d90:	20002050 	.word	0x20002050
 8007d94:	08024b6c 	.word	0x08024b6c
 8007d98:	20000f64 	.word	0x20000f64
 8007d9c:	20001674 	.word	0x20001674

08007da0 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 8007da0:	b590      	push	{r4, r7, lr}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007da6:	2300      	movs	r3, #0
 8007da8:	71fb      	strb	r3, [r7, #7]
 8007daa:	e049      	b.n	8007e40 <Send_Self_Sharing+0xa0>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	4a29      	ldr	r2, [pc, #164]	; (8007e54 <Send_Self_Sharing+0xb4>)
 8007db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f006 fde9 	bl	800e98c <HAL_Elaps_Ticks>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	4b26      	ldr	r3, [pc, #152]	; (8007e58 <Send_Self_Sharing+0xb8>)
 8007dbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d939      	bls.n	8007e3a <Send_Self_Sharing+0x9a>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8007dc6:	79fa      	ldrb	r2, [r7, #7]
 8007dc8:	4924      	ldr	r1, [pc, #144]	; (8007e5c <Send_Self_Sharing+0xbc>)
 8007dca:	4613      	mov	r3, r2
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	4413      	add	r3, r2
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	440b      	add	r3, r1
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8007dda:	79f9      	ldrb	r1, [r7, #7]
 8007ddc:	79fa      	ldrb	r2, [r7, #7]
 8007dde:	4820      	ldr	r0, [pc, #128]	; (8007e60 <Send_Self_Sharing+0xc0>)
 8007de0:	460b      	mov	r3, r1
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	440b      	add	r3, r1
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4403      	add	r3, r0
 8007dea:	3301      	adds	r3, #1
 8007dec:	7818      	ldrb	r0, [r3, #0]
 8007dee:	491b      	ldr	r1, [pc, #108]	; (8007e5c <Send_Self_Sharing+0xbc>)
 8007df0:	4613      	mov	r3, r2
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	4413      	add	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	440b      	add	r3, r1
 8007dfa:	3302      	adds	r3, #2
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007e00:	2218      	movs	r2, #24
 8007e02:	2100      	movs	r1, #0
 8007e04:	4817      	ldr	r0, [pc, #92]	; (8007e64 <Send_Self_Sharing+0xc4>)
 8007e06:	f01a fac5 	bl	8022394 <memset>
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8007e0a:	79fa      	ldrb	r2, [r7, #7]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	4413      	add	r3, r2
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4a11      	ldr	r2, [pc, #68]	; (8007e5c <Send_Self_Sharing+0xbc>)
 8007e16:	4413      	add	r3, r2
 8007e18:	2218      	movs	r2, #24
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4811      	ldr	r0, [pc, #68]	; (8007e64 <Send_Self_Sharing+0xc4>)
 8007e1e:	f01a fa91 	bl	8022344 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 8007e22:	f240 2002 	movw	r0, #514	; 0x202
 8007e26:	f007 fb2d 	bl	800f484 <TransmitCanPkt>
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8007e2a:	79fc      	ldrb	r4, [r7, #7]
 8007e2c:	f00d fb90 	bl	8015550 <HAL_GetTick>
 8007e30:	4603      	mov	r3, r0
 8007e32:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <Send_Self_Sharing+0xb4>)
 8007e34:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8007e38:	e008      	b.n	8007e4c <Send_Self_Sharing+0xac>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	71fb      	strb	r3, [r7, #7]
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <Send_Self_Sharing+0xb8>)
 8007e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e46:	79fa      	ldrb	r2, [r7, #7]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d3af      	bcc.n	8007dac <Send_Self_Sharing+0xc>
		}
	}
}
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd90      	pop	{r4, r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000e44 	.word	0x20000e44
 8007e58:	20000304 	.word	0x20000304
 8007e5c:	20001674 	.word	0x20001674
 8007e60:	20001cc8 	.word	0x20001cc8
 8007e64:	20001854 	.word	0x20001854

08007e68 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 8007e6c:	4b24      	ldr	r3, [pc, #144]	; (8007f00 <Detect_CAN_Xchange_Failure+0x98>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d101      	bne.n	8007e78 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8007e74:	f00b fa44 	bl	8013300 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007e78:	4922      	ldr	r1, [pc, #136]	; (8007f04 <Detect_CAN_Xchange_Failure+0x9c>)
 8007e7a:	4823      	ldr	r0, [pc, #140]	; (8007f08 <Detect_CAN_Xchange_Failure+0xa0>)
 8007e7c:	f7f8 f9e0 	bl	8000240 <strcmp>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8007e86:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <Detect_CAN_Xchange_Failure+0x98>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	701a      	strb	r2, [r3, #0]
		return;
 8007e8c:	e036      	b.n	8007efc <Detect_CAN_Xchange_Failure+0x94>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 8007e8e:	4b1f      	ldr	r3, [pc, #124]	; (8007f0c <Detect_CAN_Xchange_Failure+0xa4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f006 fd7a 	bl	800e98c <HAL_Elaps_Ticks>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	4b1d      	ldr	r3, [pc, #116]	; (8007f10 <Detect_CAN_Xchange_Failure+0xa8>)
 8007e9c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d32b      	bcc.n	8007efc <Detect_CAN_Xchange_Failure+0x94>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8007ea4:	4b1b      	ldr	r3, [pc, #108]	; (8007f14 <Detect_CAN_Xchange_Failure+0xac>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <Detect_CAN_Xchange_Failure+0xa4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d025      	beq.n	8007efc <Detect_CAN_Xchange_Failure+0x94>
		{
			Is_CAN_Exchange_happening = NO;
 8007eb0:	4b13      	ldr	r3, [pc, #76]	; (8007f00 <Detect_CAN_Xchange_Failure+0x98>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8007eb6:	4b15      	ldr	r3, [pc, #84]	; (8007f0c <Detect_CAN_Xchange_Failure+0xa4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a16      	ldr	r2, [pc, #88]	; (8007f14 <Detect_CAN_Xchange_Failure+0xac>)
 8007ebc:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8007ebe:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <Detect_CAN_Xchange_Failure+0xa4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f006 fd62 	bl	800e98c <HAL_Elaps_Ticks>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4a13      	ldr	r2, [pc, #76]	; (8007f18 <Detect_CAN_Xchange_Failure+0xb0>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	099b      	lsrs	r3, r3, #6
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4811      	ldr	r0, [pc, #68]	; (8007f1c <Detect_CAN_Xchange_Failure+0xb4>)
 8007ed6:	f01a fb45 	bl	8022564 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8007eda:	4811      	ldr	r0, [pc, #68]	; (8007f20 <Detect_CAN_Xchange_Failure+0xb8>)
 8007edc:	f01a fbde 	bl	802269c <puts>
			memset(&Rx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007ee0:	2218      	movs	r2, #24
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	480f      	ldr	r0, [pc, #60]	; (8007f24 <Detect_CAN_Xchange_Failure+0xbc>)
 8007ee6:	f01a fa55 	bl	8022394 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8007eea:	22a2      	movs	r2, #162	; 0xa2
 8007eec:	2100      	movs	r1, #0
 8007eee:	480e      	ldr	r0, [pc, #56]	; (8007f28 <Detect_CAN_Xchange_Failure+0xc0>)
 8007ef0:	f01a fa50 	bl	8022394 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8007ef4:	f240 1019 	movw	r0, #281	; 0x119
 8007ef8:	f007 fac4 	bl	800f484 <TransmitCanPkt>
		}
	}
}
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000108 	.word	0x20000108
 8007f04:	08023d10 	.word	0x08023d10
 8007f08:	20000305 	.word	0x20000305
 8007f0c:	20000e40 	.word	0x20000e40
 8007f10:	20000304 	.word	0x20000304
 8007f14:	20002078 	.word	0x20002078
 8007f18:	10624dd3 	.word	0x10624dd3
 8007f1c:	08024b8c 	.word	0x08024b8c
 8007f20:	08024bbc 	.word	0x08024bbc
 8007f24:	20001764 	.word	0x20001764
 8007f28:	200010e4 	.word	0x200010e4

08007f2c <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
	uint16_t Serial_Byte=0;
#endif

	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8007f32:	4b41      	ldr	r3, [pc, #260]	; (8008038 <Process_Send_Signals_2_MIE+0x10c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f006 fd28 	bl	800e98c <HAL_Elaps_Ticks>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	4b3f      	ldr	r3, [pc, #252]	; (800803c <Process_Send_Signals_2_MIE+0x110>)
 8007f40:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d973      	bls.n	8008030 <Process_Send_Signals_2_MIE+0x104>
	{
		uint8_t Traverser = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	71fb      	strb	r3, [r7, #7]
		uint8_t Choice = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	70fb      	strb	r3, [r7, #3]

#endif
#ifdef EI_2


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007f50:	493b      	ldr	r1, [pc, #236]	; (8008040 <Process_Send_Signals_2_MIE+0x114>)
 8007f52:	483c      	ldr	r0, [pc, #240]	; (8008044 <Process_Send_Signals_2_MIE+0x118>)
 8007f54:	f7f8 f974 	bl	8000240 <strcmp>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d102      	bne.n	8007f64 <Process_Send_Signals_2_MIE+0x38>
		{
			Is_CAN_Exchange_happening = YES;
 8007f5e:	4b3a      	ldr	r3, [pc, #232]	; (8008048 <Process_Send_Signals_2_MIE+0x11c>)
 8007f60:	2201      	movs	r2, #1
 8007f62:	701a      	strb	r2, [r3, #0]
		}
		if(Is_CAN_Exchange_happening == NO)
 8007f64:	4b38      	ldr	r3, [pc, #224]	; (8008048 <Process_Send_Signals_2_MIE+0x11c>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10f      	bne.n	8007f8c <Process_Send_Signals_2_MIE+0x60>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8007f6c:	4837      	ldr	r0, [pc, #220]	; (800804c <Process_Send_Signals_2_MIE+0x120>)
 8007f6e:	f01a fb95 	bl	802269c <puts>
			printf("Sending Blank Relay statuses\n");
 8007f72:	4837      	ldr	r0, [pc, #220]	; (8008050 <Process_Send_Signals_2_MIE+0x124>)
 8007f74:	f01a fb92 	bl	802269c <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8007f78:	22a2      	movs	r2, #162	; 0xa2
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4835      	ldr	r0, [pc, #212]	; (8008054 <Process_Send_Signals_2_MIE+0x128>)
 8007f7e:	f01a fa09 	bl	8022394 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8007f82:	f240 1019 	movw	r0, #281	; 0x119
 8007f86:	f007 fa7d 	bl	800f484 <TransmitCanPkt>
 8007f8a:	e01c      	b.n	8007fc6 <Process_Send_Signals_2_MIE+0x9a>
		}
		else
		{
			for(Traverser =0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	71fb      	strb	r3, [r7, #7]
 8007f90:	e013      	b.n	8007fba <Process_Send_Signals_2_MIE+0x8e>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	4a2f      	ldr	r2, [pc, #188]	; (8008054 <Process_Send_Signals_2_MIE+0x128>)
 8007f98:	4413      	add	r3, r2
 8007f9a:	1c98      	adds	r0, r3, #2
 8007f9c:	79fa      	ldrb	r2, [r7, #7]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4a2c      	ldr	r2, [pc, #176]	; (8008058 <Process_Send_Signals_2_MIE+0x12c>)
 8007fa8:	4413      	add	r3, r2
 8007faa:	3301      	adds	r3, #1
 8007fac:	2210      	movs	r2, #16
 8007fae:	4619      	mov	r1, r3
 8007fb0:	f01a f9c8 	bl	8022344 <memcpy>
			for(Traverser =0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	71fb      	strb	r3, [r7, #7]
 8007fba:	4b20      	ldr	r3, [pc, #128]	; (800803c <Process_Send_Signals_2_MIE+0x110>)
 8007fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fc0:	79fa      	ldrb	r2, [r7, #7]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d3e5      	bcc.n	8007f92 <Process_Send_Signals_2_MIE+0x66>
		//			{
		//				if()
		//			}
		//		}

		if(Debug_flag == 1)
 8007fc6:	4b25      	ldr	r3, [pc, #148]	; (800805c <Process_Send_Signals_2_MIE+0x130>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d12b      	bne.n	8008026 <Process_Send_Signals_2_MIE+0xfa>
		{
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 8007fce:	4b24      	ldr	r3, [pc, #144]	; (8008060 <Process_Send_Signals_2_MIE+0x134>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4b22      	ldr	r3, [pc, #136]	; (8008060 <Process_Send_Signals_2_MIE+0x134>)
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	4b21      	ldr	r3, [pc, #132]	; (8008060 <Process_Send_Signals_2_MIE+0x134>)
 8007fdc:	789b      	ldrb	r3, [r3, #2]
 8007fde:	4821      	ldr	r0, [pc, #132]	; (8008064 <Process_Send_Signals_2_MIE+0x138>)
 8007fe0:	f01a fac0 	bl	8022564 <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	80bb      	strh	r3, [r7, #4]
 8007fe8:	e013      	b.n	8008012 <Process_Send_Signals_2_MIE+0xe6>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 8007fea:	88bb      	ldrh	r3, [r7, #4]
 8007fec:	4a19      	ldr	r2, [pc, #100]	; (8008054 <Process_Send_Signals_2_MIE+0x128>)
 8007fee:	4413      	add	r3, r2
 8007ff0:	789b      	ldrb	r3, [r3, #2]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	481c      	ldr	r0, [pc, #112]	; (8008068 <Process_Send_Signals_2_MIE+0x13c>)
 8007ff6:	f01a fab5 	bl	8022564 <iprintf>
				if(((Byte+1)%16)==0)
 8007ffa:	88bb      	ldrh	r3, [r7, #4]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	f003 030f 	and.w	r3, r3, #15
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <Process_Send_Signals_2_MIE+0xe0>
				{
					printf("\n");
 8008006:	200a      	movs	r0, #10
 8008008:	f01a fac4 	bl	8022594 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 800800c:	88bb      	ldrh	r3, [r7, #4]
 800800e:	3301      	adds	r3, #1
 8008010:	80bb      	strh	r3, [r7, #4]
 8008012:	88ba      	ldrh	r2, [r7, #4]
 8008014:	4b09      	ldr	r3, [pc, #36]	; (800803c <Process_Send_Signals_2_MIE+0x110>)
 8008016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	429a      	cmp	r2, r3
 800801e:	dbe4      	blt.n	8007fea <Process_Send_Signals_2_MIE+0xbe>
				}
			}
			printf("\n");
 8008020:	200a      	movs	r0, #10
 8008022:	f01a fab7 	bl	8022594 <putchar>
		}

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 8008026:	f00d fa93 	bl	8015550 <HAL_GetTick>
 800802a:	4603      	mov	r3, r0
 800802c:	4a02      	ldr	r2, [pc, #8]	; (8008038 <Process_Send_Signals_2_MIE+0x10c>)
 800802e:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	20000e70 	.word	0x20000e70
 800803c:	20000304 	.word	0x20000304
 8008040:	08023d10 	.word	0x08023d10
 8008044:	20000305 	.word	0x20000305
 8008048:	20000108 	.word	0x20000108
 800804c:	08024be0 	.word	0x08024be0
 8008050:	08024c04 	.word	0x08024c04
 8008054:	200010e4 	.word	0x200010e4
 8008058:	20001e80 	.word	0x20001e80
 800805c:	20000645 	.word	0x20000645
 8008060:	200027e4 	.word	0x200027e4
 8008064:	08024c24 	.word	0x08024c24
 8008068:	08024c4c 	.word	0x08024c4c

0800806c <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 800806c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8008072:	af04      	add	r7, sp, #16
 8008074:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008078:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800807c:	6018      	str	r0, [r3, #0]
 800807e:	4608      	mov	r0, r1
 8008080:	4611      	mov	r1, r2
 8008082:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008086:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800808a:	4602      	mov	r2, r0
 800808c:	701a      	strb	r2, [r3, #0]
 800808e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008092:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008096:	460a      	mov	r2, r1
 8008098:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 800809a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800809e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	3304      	adds	r3, #4
 80080a8:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f01a f970 	bl	8022394 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 80080ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80080be:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <Print_EI_DATA+0x64>
 80080c8:	48a8      	ldr	r0, [pc, #672]	; (800836c <Print_EI_DATA+0x300>)
 80080ca:	f000 f975 	bl	80083b8 <Display>
 80080ce:	e002      	b.n	80080d6 <Print_EI_DATA+0x6a>
 80080d0:	48a7      	ldr	r0, [pc, #668]	; (8008370 <Print_EI_DATA+0x304>)
 80080d2:	f000 f971 	bl	80083b8 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 80080d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80080da:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3301      	adds	r3, #1
 80080e2:	461a      	mov	r2, r3
 80080e4:	2110      	movs	r1, #16
 80080e6:	2000      	movs	r0, #0
 80080e8:	f7f8 fa94 	bl	8000614 <ExtractBits>
 80080ec:	4602      	mov	r2, r0
 80080ee:	f107 030c 	add.w	r3, r7, #12
 80080f2:	49a0      	ldr	r1, [pc, #640]	; (8008374 <Print_EI_DATA+0x308>)
 80080f4:	4618      	mov	r0, r3
 80080f6:	f01a fbed 	bl	80228d4 <siprintf>
	Display(Print_buff);
 80080fa:	f107 030c 	add.w	r3, r7, #12
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 f95a 	bl	80083b8 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 8008104:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008108:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3303      	adds	r3, #3
 8008110:	461a      	mov	r2, r3
 8008112:	2110      	movs	r1, #16
 8008114:	2000      	movs	r0, #0
 8008116:	f7f8 fa7d 	bl	8000614 <ExtractBits>
 800811a:	4602      	mov	r2, r0
 800811c:	f107 030c 	add.w	r3, r7, #12
 8008120:	4995      	ldr	r1, [pc, #596]	; (8008378 <Print_EI_DATA+0x30c>)
 8008122:	4618      	mov	r0, r3
 8008124:	f01a fbd6 	bl	80228d4 <siprintf>
	Display(Print_buff);
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	4618      	mov	r0, r3
 800812e:	f000 f943 	bl	80083b8 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 8008132:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008136:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3307      	adds	r3, #7
 800813e:	461a      	mov	r2, r3
 8008140:	2108      	movs	r1, #8
 8008142:	2000      	movs	r0, #0
 8008144:	f7f8 fa66 	bl	8000614 <ExtractBits>
 8008148:	4603      	mov	r3, r0
 800814a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 800814e:	488b      	ldr	r0, [pc, #556]	; (800837c <Print_EI_DATA+0x310>)
 8008150:	f000 f932 	bl	80083b8 <Display>
	switch(Msg_type)
 8008154:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008158:	3b01      	subs	r3, #1
 800815a:	2b05      	cmp	r3, #5
 800815c:	d829      	bhi.n	80081b2 <Print_EI_DATA+0x146>
 800815e:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <Print_EI_DATA+0xf8>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	0800817d 	.word	0x0800817d
 8008168:	0800819b 	.word	0x0800819b
 800816c:	080081b3 	.word	0x080081b3
 8008170:	080081a3 	.word	0x080081a3
 8008174:	080081b3 	.word	0x080081b3
 8008178:	080081ab 	.word	0x080081ab
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 800817c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008180:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <Print_EI_DATA+0x126>
 800818a:	487d      	ldr	r0, [pc, #500]	; (8008380 <Print_EI_DATA+0x314>)
 800818c:	f000 f914 	bl	80083b8 <Display>
		//Display("INIT     ");
		break;
 8008190:	e012      	b.n	80081b8 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008192:	487c      	ldr	r0, [pc, #496]	; (8008384 <Print_EI_DATA+0x318>)
 8008194:	f000 f910 	bl	80083b8 <Display>
		break;
 8008198:	e00e      	b.n	80081b8 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 800819a:	487b      	ldr	r0, [pc, #492]	; (8008388 <Print_EI_DATA+0x31c>)
 800819c:	f000 f90c 	bl	80083b8 <Display>
		break;
 80081a0:	e00a      	b.n	80081b8 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 80081a2:	487a      	ldr	r0, [pc, #488]	; (800838c <Print_EI_DATA+0x320>)
 80081a4:	f000 f908 	bl	80083b8 <Display>
		break;
 80081a8:	e006      	b.n	80081b8 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 80081aa:	4879      	ldr	r0, [pc, #484]	; (8008390 <Print_EI_DATA+0x324>)
 80081ac:	f000 f904 	bl	80083b8 <Display>
		break;
 80081b0:	e002      	b.n	80081b8 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 80081b2:	4878      	ldr	r0, [pc, #480]	; (8008394 <Print_EI_DATA+0x328>)
 80081b4:	f000 f900 	bl	80083b8 <Display>
	}
	Display("|");
 80081b8:	4877      	ldr	r0, [pc, #476]	; (8008398 <Print_EI_DATA+0x32c>)
 80081ba:	f000 f8fd 	bl	80083b8 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 80081be:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80081c2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3305      	adds	r3, #5
 80081ca:	461a      	mov	r2, r3
 80081cc:	2108      	movs	r1, #8
 80081ce:	2000      	movs	r0, #0
 80081d0:	f7f8 fa20 	bl	8000614 <ExtractBits>
 80081d4:	4602      	mov	r2, r0
 80081d6:	f107 030c 	add.w	r3, r7, #12
 80081da:	4970      	ldr	r1, [pc, #448]	; (800839c <Print_EI_DATA+0x330>)
 80081dc:	4618      	mov	r0, r3
 80081de:	f01a fb79 	bl	80228d4 <siprintf>
	Display(Print_buff);
 80081e2:	f107 030c 	add.w	r3, r7, #12
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f8e6 	bl	80083b8 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 80081ec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80081f0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3306      	adds	r3, #6
 80081f8:	461a      	mov	r2, r3
 80081fa:	2108      	movs	r1, #8
 80081fc:	2000      	movs	r0, #0
 80081fe:	f7f8 fa09 	bl	8000614 <ExtractBits>
 8008202:	4602      	mov	r2, r0
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	4965      	ldr	r1, [pc, #404]	; (80083a0 <Print_EI_DATA+0x334>)
 800820a:	4618      	mov	r0, r3
 800820c:	f01a fb62 	bl	80228d4 <siprintf>
	Display(Print_buff);
 8008210:	f107 030c 	add.w	r3, r7, #12
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f8cf 	bl	80083b8 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 800821a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800821e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3308      	adds	r3, #8
 8008226:	461a      	mov	r2, r3
 8008228:	2110      	movs	r1, #16
 800822a:	2000      	movs	r0, #0
 800822c:	f7f8 f9f2 	bl	8000614 <ExtractBits>
 8008230:	4603      	mov	r3, r0
 8008232:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 8008236:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 800823a:	f107 030c 	add.w	r3, r7, #12
 800823e:	4959      	ldr	r1, [pc, #356]	; (80083a4 <Print_EI_DATA+0x338>)
 8008240:	4618      	mov	r0, r3
 8008242:	f01a fb47 	bl	80228d4 <siprintf>
	Display(Print_buff);
 8008246:	f107 030c 	add.w	r3, r7, #12
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f8b4 	bl	80083b8 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8008250:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	b29b      	uxth	r3, r3
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d03f      	beq.n	80082e0 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8008260:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008264:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330a      	adds	r3, #10
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	461d      	mov	r5, r3
 8008270:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008274:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	330b      	adds	r3, #11
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	461e      	mov	r6, r3
 8008280:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008284:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008294:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	330d      	adds	r3, #13
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	4619      	mov	r1, r3
 80082a0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80082a4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	330e      	adds	r3, #14
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	461c      	mov	r4, r3
 80082b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80082b4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	330f      	adds	r3, #15
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	f107 000c 	add.w	r0, r7, #12
 80082c2:	9303      	str	r3, [sp, #12]
 80082c4:	9402      	str	r4, [sp, #8]
 80082c6:	9101      	str	r1, [sp, #4]
 80082c8:	9200      	str	r2, [sp, #0]
 80082ca:	4633      	mov	r3, r6
 80082cc:	462a      	mov	r2, r5
 80082ce:	4936      	ldr	r1, [pc, #216]	; (80083a8 <Print_EI_DATA+0x33c>)
 80082d0:	f01a fb00 	bl	80228d4 <siprintf>
		Display(Print_buff);
 80082d4:	f107 030c 	add.w	r3, r7, #12
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f86d 	bl	80083b8 <Display>
 80082de:	e002      	b.n	80082e6 <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 80082e0:	4832      	ldr	r0, [pc, #200]	; (80083ac <Print_EI_DATA+0x340>)
 80082e2:	f000 f869 	bl	80083b8 <Display>
	}
	if(Debug_flag == 1)
 80082e6:	4b32      	ldr	r3, [pc, #200]	; (80083b0 <Print_EI_DATA+0x344>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d139      	bne.n	8008362 <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 80082ee:	2300      	movs	r3, #0
 80082f0:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80082f4:	e019      	b.n	800832a <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 80082f6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80082fa:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80082fe:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	4413      	add	r3, r2
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	f107 030c 	add.w	r3, r7, #12
 800830e:	4929      	ldr	r1, [pc, #164]	; (80083b4 <Print_EI_DATA+0x348>)
 8008310:	4618      	mov	r0, r3
 8008312:	f01a fadf 	bl	80228d4 <siprintf>
			Display(Print_buff);
 8008316:	f107 030c 	add.w	r3, r7, #12
 800831a:	4618      	mov	r0, r3
 800831c:	f000 f84c 	bl	80083b8 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008320:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008324:	3301      	adds	r3, #1
 8008326:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800832a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800832e:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008332:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	429a      	cmp	r2, r3
 800833a:	d3dc      	bcc.n	80082f6 <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 800833c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008340:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10b      	bne.n	8008362 <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 800834a:	f107 030c 	add.w	r3, r7, #12
 800834e:	22f6      	movs	r2, #246	; 0xf6
 8008350:	4918      	ldr	r1, [pc, #96]	; (80083b4 <Print_EI_DATA+0x348>)
 8008352:	4618      	mov	r0, r3
 8008354:	f01a fabe 	bl	80228d4 <siprintf>
			Display(Print_buff);
 8008358:	f107 030c 	add.w	r3, r7, #12
 800835c:	4618      	mov	r0, r3
 800835e:	f000 f82b 	bl	80083b8 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 8008362:	bf00      	nop
 8008364:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8008368:	46bd      	mov	sp, r7
 800836a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800836c:	08024c54 	.word	0x08024c54
 8008370:	08024c58 	.word	0x08024c58
 8008374:	08024c5c 	.word	0x08024c5c
 8008378:	08024c64 	.word	0x08024c64
 800837c:	08024c6c 	.word	0x08024c6c
 8008380:	08024c70 	.word	0x08024c70
 8008384:	08024c78 	.word	0x08024c78
 8008388:	08024c80 	.word	0x08024c80
 800838c:	08024c84 	.word	0x08024c84
 8008390:	08024c88 	.word	0x08024c88
 8008394:	08024c8c 	.word	0x08024c8c
 8008398:	08024ca0 	.word	0x08024ca0
 800839c:	08024ca4 	.word	0x08024ca4
 80083a0:	08024cb0 	.word	0x08024cb0
 80083a4:	08024cbc 	.word	0x08024cbc
 80083a8:	08024cc8 	.word	0x08024cc8
 80083ac:	08024cec 	.word	0x08024cec
 80083b0:	20000645 	.word	0x20000645
 80083b4:	08024c4c 	.word	0x08024c4c

080083b8 <Display>:

void Display(char *Data)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80083c4:	e00a      	b.n	80083dc <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	4413      	add	r3, r2
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	4619      	mov	r1, r3
 80083d0:	2000      	movs	r0, #0
 80083d2:	f00c fe65 	bl	80150a0 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	3301      	adds	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4413      	add	r3, r2
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1ee      	bne.n	80083c6 <Display+0xe>
	}
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <print_self_Details>:
	}

}

void print_self_Details(void)
{
 80083f4:	b5b0      	push	{r4, r5, r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 80083fe:	4890      	ldr	r0, [pc, #576]	; (8008640 <print_self_Details+0x24c>)
 8008400:	f01a f94c 	bl	802269c <puts>
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008404:	4b8f      	ldr	r3, [pc, #572]	; (8008644 <print_self_Details+0x250>)
 8008406:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800840a:	4619      	mov	r1, r3
 800840c:	488e      	ldr	r0, [pc, #568]	; (8008648 <print_self_Details+0x254>)
 800840e:	f01a f8a9 	bl	8022564 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 8008412:	4b8c      	ldr	r3, [pc, #560]	; (8008644 <print_self_Details+0x250>)
 8008414:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008418:	4619      	mov	r1, r3
 800841a:	488c      	ldr	r0, [pc, #560]	; (800864c <print_self_Details+0x258>)
 800841c:	f01a f8a2 	bl	8022564 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8008420:	4b88      	ldr	r3, [pc, #544]	; (8008644 <print_self_Details+0x250>)
 8008422:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008426:	4619      	mov	r1, r3
 8008428:	4889      	ldr	r0, [pc, #548]	; (8008650 <print_self_Details+0x25c>)
 800842a:	f01a f89b 	bl	8022564 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 800842e:	4b85      	ldr	r3, [pc, #532]	; (8008644 <print_self_Details+0x250>)
 8008430:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008434:	4619      	mov	r1, r3
 8008436:	4887      	ldr	r0, [pc, #540]	; (8008654 <print_self_Details+0x260>)
 8008438:	f01a f894 	bl	8022564 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 800843c:	4b81      	ldr	r3, [pc, #516]	; (8008644 <print_self_Details+0x250>)
 800843e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008442:	4619      	mov	r1, r3
 8008444:	4884      	ldr	r0, [pc, #528]	; (8008658 <print_self_Details+0x264>)
 8008446:	f01a f88d 	bl	8022564 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 800844a:	4b7e      	ldr	r3, [pc, #504]	; (8008644 <print_self_Details+0x250>)
 800844c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008450:	4619      	mov	r1, r3
 8008452:	4882      	ldr	r0, [pc, #520]	; (800865c <print_self_Details+0x268>)
 8008454:	f01a f886 	bl	8022564 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008458:	4b7a      	ldr	r3, [pc, #488]	; (8008644 <print_self_Details+0x250>)
 800845a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800845e:	4619      	mov	r1, r3
 8008460:	4879      	ldr	r0, [pc, #484]	; (8008648 <print_self_Details+0x254>)
 8008462:	f01a f87f 	bl	8022564 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8008466:	2300      	movs	r3, #0
 8008468:	71fb      	strb	r3, [r7, #7]
 800846a:	e03b      	b.n	80084e4 <print_self_Details+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800846c:	79f9      	ldrb	r1, [r7, #7]
 800846e:	79fb      	ldrb	r3, [r7, #7]
 8008470:	4a74      	ldr	r2, [pc, #464]	; (8008644 <print_self_Details+0x250>)
 8008472:	3326      	adds	r3, #38	; 0x26
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	78db      	ldrb	r3, [r3, #3]
 800847a:	461c      	mov	r4, r3
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	4a71      	ldr	r2, [pc, #452]	; (8008644 <print_self_Details+0x250>)
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8008488:	461d      	mov	r5, r3
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	4a6d      	ldr	r2, [pc, #436]	; (8008644 <print_self_Details+0x250>)
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008496:	4618      	mov	r0, r3
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	4a6a      	ldr	r2, [pc, #424]	; (8008644 <print_self_Details+0x250>)
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	9000      	str	r0, [sp, #0]
 80084a8:	462b      	mov	r3, r5
 80084aa:	4622      	mov	r2, r4
 80084ac:	486c      	ldr	r0, [pc, #432]	; (8008660 <print_self_Details+0x26c>)
 80084ae:	f01a f859 	bl	8022564 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80084b2:	79f9      	ldrb	r1, [r7, #7]
 80084b4:	79fb      	ldrb	r3, [r7, #7]
 80084b6:	4a63      	ldr	r2, [pc, #396]	; (8008644 <print_self_Details+0x250>)
 80084b8:	3352      	adds	r3, #82	; 0x52
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	885b      	ldrh	r3, [r3, #2]
 80084c0:	461a      	mov	r2, r3
 80084c2:	4868      	ldr	r0, [pc, #416]	; (8008664 <print_self_Details+0x270>)
 80084c4:	f01a f84e 	bl	8022564 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80084c8:	79f9      	ldrb	r1, [r7, #7]
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	4a5d      	ldr	r2, [pc, #372]	; (8008644 <print_self_Details+0x250>)
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 80084d6:	461a      	mov	r2, r3
 80084d8:	4863      	ldr	r0, [pc, #396]	; (8008668 <print_self_Details+0x274>)
 80084da:	f01a f843 	bl	8022564 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	3301      	adds	r3, #1
 80084e2:	71fb      	strb	r3, [r7, #7]
 80084e4:	4b57      	ldr	r3, [pc, #348]	; (8008644 <print_self_Details+0x250>)
 80084e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80084ea:	79fa      	ldrb	r2, [r7, #7]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d3bd      	bcc.n	800846c <print_self_Details+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 80084f0:	4b54      	ldr	r3, [pc, #336]	; (8008644 <print_self_Details+0x250>)
 80084f2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80084f6:	4619      	mov	r1, r3
 80084f8:	4b52      	ldr	r3, [pc, #328]	; (8008644 <print_self_Details+0x250>)
 80084fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084fe:	461a      	mov	r2, r3
 8008500:	4b50      	ldr	r3, [pc, #320]	; (8008644 <print_self_Details+0x250>)
 8008502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008506:	4618      	mov	r0, r3
 8008508:	4b4e      	ldr	r3, [pc, #312]	; (8008644 <print_self_Details+0x250>)
 800850a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	4603      	mov	r3, r0
 8008512:	4856      	ldr	r0, [pc, #344]	; (800866c <print_self_Details+0x278>)
 8008514:	f01a f826 	bl	8022564 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8008518:	4b4a      	ldr	r3, [pc, #296]	; (8008644 <print_self_Details+0x250>)
 800851a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800851e:	4618      	mov	r0, r3
 8008520:	4b48      	ldr	r3, [pc, #288]	; (8008644 <print_self_Details+0x250>)
 8008522:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008526:	461c      	mov	r4, r3
 8008528:	4b46      	ldr	r3, [pc, #280]	; (8008644 <print_self_Details+0x250>)
 800852a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800852e:	461d      	mov	r5, r3
 8008530:	4b44      	ldr	r3, [pc, #272]	; (8008644 <print_self_Details+0x250>)
 8008532:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008536:	461a      	mov	r2, r3
 8008538:	4b42      	ldr	r3, [pc, #264]	; (8008644 <print_self_Details+0x250>)
 800853a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800853e:	4619      	mov	r1, r3
 8008540:	4b40      	ldr	r3, [pc, #256]	; (8008644 <print_self_Details+0x250>)
 8008542:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	9101      	str	r1, [sp, #4]
 800854a:	9200      	str	r2, [sp, #0]
 800854c:	462b      	mov	r3, r5
 800854e:	4622      	mov	r2, r4
 8008550:	4601      	mov	r1, r0
 8008552:	4847      	ldr	r0, [pc, #284]	; (8008670 <print_self_Details+0x27c>)
 8008554:	f01a f806 	bl	8022564 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008558:	4b3a      	ldr	r3, [pc, #232]	; (8008644 <print_self_Details+0x250>)
 800855a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800855e:	4619      	mov	r1, r3
 8008560:	4844      	ldr	r0, [pc, #272]	; (8008674 <print_self_Details+0x280>)
 8008562:	f019 ffff 	bl	8022564 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008566:	2300      	movs	r3, #0
 8008568:	71fb      	strb	r3, [r7, #7]
 800856a:	e05c      	b.n	8008626 <print_self_Details+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 800856c:	79fb      	ldrb	r3, [r7, #7]
 800856e:	3301      	adds	r3, #1
 8008570:	4619      	mov	r1, r3
 8008572:	4841      	ldr	r0, [pc, #260]	; (8008678 <print_self_Details+0x284>)
 8008574:	f019 fff6 	bl	8022564 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008578:	79fb      	ldrb	r3, [r7, #7]
 800857a:	4a32      	ldr	r2, [pc, #200]	; (8008644 <print_self_Details+0x250>)
 800857c:	3366      	adds	r3, #102	; 0x66
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	4619      	mov	r1, r3
 8008586:	483d      	ldr	r0, [pc, #244]	; (800867c <print_self_Details+0x288>)
 8008588:	f019 ffec 	bl	8022564 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	4a2d      	ldr	r2, [pc, #180]	; (8008644 <print_self_Details+0x250>)
 8008590:	3370      	adds	r3, #112	; 0x70
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	4619      	mov	r1, r3
 800859a:	4839      	ldr	r0, [pc, #228]	; (8008680 <print_self_Details+0x28c>)
 800859c:	f019 ffe2 	bl	8022564 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 80085a0:	79fb      	ldrb	r3, [r7, #7]
 80085a2:	4a28      	ldr	r2, [pc, #160]	; (8008644 <print_self_Details+0x250>)
 80085a4:	33fe      	adds	r3, #254	; 0xfe
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	4413      	add	r3, r2
 80085aa:	889b      	ldrh	r3, [r3, #4]
 80085ac:	4619      	mov	r1, r3
 80085ae:	4835      	ldr	r0, [pc, #212]	; (8008684 <print_self_Details+0x290>)
 80085b0:	f019 ffd8 	bl	8022564 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	4a23      	ldr	r2, [pc, #140]	; (8008644 <print_self_Details+0x250>)
 80085b8:	4413      	add	r3, r2
 80085ba:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80085be:	4619      	mov	r1, r3
 80085c0:	4831      	ldr	r0, [pc, #196]	; (8008688 <print_self_Details+0x294>)
 80085c2:	f019 ffcf 	bl	8022564 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	4a1e      	ldr	r2, [pc, #120]	; (8008644 <print_self_Details+0x250>)
 80085ca:	4413      	add	r3, r2
 80085cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80085d0:	4619      	mov	r1, r3
 80085d2:	482e      	ldr	r0, [pc, #184]	; (800868c <print_self_Details+0x298>)
 80085d4:	f019 ffc6 	bl	8022564 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	4a1a      	ldr	r2, [pc, #104]	; (8008644 <print_self_Details+0x250>)
 80085dc:	4413      	add	r3, r2
 80085de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80085e2:	4619      	mov	r1, r3
 80085e4:	482a      	ldr	r0, [pc, #168]	; (8008690 <print_self_Details+0x29c>)
 80085e6:	f019 ffbd 	bl	8022564 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	4a15      	ldr	r2, [pc, #84]	; (8008644 <print_self_Details+0x250>)
 80085ee:	338a      	adds	r3, #138	; 0x8a
 80085f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f4:	4619      	mov	r1, r3
 80085f6:	4827      	ldr	r0, [pc, #156]	; (8008694 <print_self_Details+0x2a0>)
 80085f8:	f019 ffb4 	bl	8022564 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	4a11      	ldr	r2, [pc, #68]	; (8008644 <print_self_Details+0x250>)
 8008600:	3394      	adds	r3, #148	; 0x94
 8008602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008606:	4619      	mov	r1, r3
 8008608:	4823      	ldr	r0, [pc, #140]	; (8008698 <print_self_Details+0x2a4>)
 800860a:	f019 ffab 	bl	8022564 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	4a0c      	ldr	r2, [pc, #48]	; (8008644 <print_self_Details+0x250>)
 8008612:	339e      	adds	r3, #158	; 0x9e
 8008614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008618:	4619      	mov	r1, r3
 800861a:	4820      	ldr	r0, [pc, #128]	; (800869c <print_self_Details+0x2a8>)
 800861c:	f019 ffa2 	bl	8022564 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	3301      	adds	r3, #1
 8008624:	71fb      	strb	r3, [r7, #7]
 8008626:	4b07      	ldr	r3, [pc, #28]	; (8008644 <print_self_Details+0x250>)
 8008628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800862c:	79fa      	ldrb	r2, [r7, #7]
 800862e:	429a      	cmp	r2, r3
 8008630:	d39c      	bcc.n	800856c <print_self_Details+0x178>

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 8008632:	4803      	ldr	r0, [pc, #12]	; (8008640 <print_self_Details+0x24c>)
 8008634:	f01a f832 	bl	802269c <puts>
#endif
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bdb0      	pop	{r4, r5, r7, pc}
 8008640:	08024d60 	.word	0x08024d60
 8008644:	20000304 	.word	0x20000304
 8008648:	08024db4 	.word	0x08024db4
 800864c:	08024dd8 	.word	0x08024dd8
 8008650:	08024dfc 	.word	0x08024dfc
 8008654:	08024e28 	.word	0x08024e28
 8008658:	08024e54 	.word	0x08024e54
 800865c:	08024e80 	.word	0x08024e80
 8008660:	08024eac 	.word	0x08024eac
 8008664:	08024ecc 	.word	0x08024ecc
 8008668:	08024edc 	.word	0x08024edc
 800866c:	08024eec 	.word	0x08024eec
 8008670:	08024f08 	.word	0x08024f08
 8008674:	08024f38 	.word	0x08024f38
 8008678:	08024f4c 	.word	0x08024f4c
 800867c:	08024f60 	.word	0x08024f60
 8008680:	08024f7c 	.word	0x08024f7c
 8008684:	08024f98 	.word	0x08024f98
 8008688:	08024fb4 	.word	0x08024fb4
 800868c:	08024fcc 	.word	0x08024fcc
 8008690:	08024fe0 	.word	0x08024fe0
 8008694:	08024ff4 	.word	0x08024ff4
 8008698:	08025010 	.word	0x08025010
 800869c:	0802502c 	.word	0x0802502c

080086a0 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80086aa:	2300      	movs	r3, #0
 80086ac:	71fb      	strb	r3, [r7, #7]
 80086ae:	e058      	b.n	8008762 <Send_Init_After_Timeout+0xc2>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	4a31      	ldr	r2, [pc, #196]	; (8008778 <Send_Init_After_Timeout+0xd8>)
 80086b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d04f      	beq.n	800875c <Send_Init_After_Timeout+0xbc>
			}
#endif
#ifdef EI_2
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 80086bc:	79fb      	ldrb	r3, [r7, #7]
 80086be:	4a2e      	ldr	r2, [pc, #184]	; (8008778 <Send_Init_After_Timeout+0xd8>)
 80086c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f006 f961 	bl	800e98c <HAL_Elaps_Ticks>
 80086ca:	4602      	mov	r2, r0
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	492b      	ldr	r1, [pc, #172]	; (800877c <Send_Init_After_Timeout+0xdc>)
 80086d0:	3394      	adds	r3, #148	; 0x94
 80086d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80086d6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
			if(
 80086da:	429a      	cmp	r2, r3
 80086dc:	d93e      	bls.n	800875c <Send_Init_After_Timeout+0xbc>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	4a27      	ldr	r2, [pc, #156]	; (8008780 <Send_Init_After_Timeout+0xe0>)
 80086e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f006 f950 	bl	800e98c <HAL_Elaps_Ticks>
 80086ec:	4602      	mov	r2, r0
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	4922      	ldr	r1, [pc, #136]	; (800877c <Send_Init_After_Timeout+0xdc>)
 80086f2:	3394      	adds	r3, #148	; 0x94
 80086f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80086f8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d92d      	bls.n	800875c <Send_Init_After_Timeout+0xbc>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	4a20      	ldr	r2, [pc, #128]	; (8008784 <Send_Init_After_Timeout+0xe4>)
 8008704:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 8008706:	2b01      	cmp	r3, #1
 8008708:	d028      	beq.n	800875c <Send_Init_After_Timeout+0xbc>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	4a1e      	ldr	r2, [pc, #120]	; (8008788 <Send_Init_After_Timeout+0xe8>)
 800870e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008716:	d921      	bls.n	800875c <Send_Init_After_Timeout+0xbc>
			)
			{

				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	4a17      	ldr	r2, [pc, #92]	; (8008778 <Send_Init_After_Timeout+0xd8>)
 800871c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008720:	4618      	mov	r0, r3
 8008722:	f006 f933 	bl	800e98c <HAL_Elaps_Ticks>
 8008726:	4603      	mov	r3, r0
 8008728:	4a18      	ldr	r2, [pc, #96]	; (800878c <Send_Init_After_Timeout+0xec>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	099b      	lsrs	r3, r3, #6
 8008730:	4619      	mov	r1, r3
 8008732:	4817      	ldr	r0, [pc, #92]	; (8008790 <Send_Init_After_Timeout+0xf0>)
 8008734:	f019 ff16 	bl	8022564 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	4a16      	ldr	r2, [pc, #88]	; (8008794 <Send_Init_After_Timeout+0xf4>)
 800873c:	2101      	movs	r1, #1
 800873e:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008740:	79fa      	ldrb	r2, [r7, #7]
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7f9 fdc4 	bl	80022d4 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	4a0d      	ldr	r2, [pc, #52]	; (8008784 <Send_Init_After_Timeout+0xe4>)
 8008750:	2101      	movs	r1, #1
 8008752:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	4a10      	ldr	r2, [pc, #64]	; (8008798 <Send_Init_After_Timeout+0xf8>)
 8008758:	2101      	movs	r1, #1
 800875a:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	3301      	adds	r3, #1
 8008760:	71fb      	strb	r3, [r7, #7]
 8008762:	4b06      	ldr	r3, [pc, #24]	; (800877c <Send_Init_After_Timeout+0xdc>)
 8008764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008768:	79fa      	ldrb	r2, [r7, #7]
 800876a:	429a      	cmp	r2, r3
 800876c:	d3a0      	bcc.n	80086b0 <Send_Init_After_Timeout+0x10>
			}
#endif
		}
	}
}
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20000fa4 	.word	0x20000fa4
 800877c:	20000304 	.word	0x20000304
 8008780:	20000e9c 	.word	0x20000e9c
 8008784:	2000108c 	.word	0x2000108c
 8008788:	20001098 	.word	0x20001098
 800878c:	10624dd3 	.word	0x10624dd3
 8008790:	08025048 	.word	0x08025048
 8008794:	200010cc 	.word	0x200010cc
 8008798:	200010c0 	.word	0x200010c0

0800879c <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80087a6:	e037      	b.n	8008818 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80087a8:	79fa      	ldrb	r2, [r7, #7]
 80087aa:	4921      	ldr	r1, [pc, #132]	; (8008830 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 80087ac:	4613      	mov	r3, r2
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	4413      	add	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	440b      	add	r3, r1
 80087b6:	3304      	adds	r3, #4
 80087b8:	781b      	ldrb	r3, [r3, #0]
		if(
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d006      	beq.n	80087cc <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	4a1c      	ldr	r2, [pc, #112]	; (8008834 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 80087c2:	4413      	add	r3, r2
 80087c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d122      	bne.n	8008812 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	4a1a      	ldr	r2, [pc, #104]	; (8008838 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80087d0:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d11d      	bne.n	8008812 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	4a17      	ldr	r2, [pc, #92]	; (8008838 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80087da:	3302      	adds	r3, #2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f006 f8d2 	bl	800e98c <HAL_Elaps_Ticks>
 80087e8:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80087ea:	2b32      	cmp	r3, #50	; 0x32
 80087ec:	d911      	bls.n	8008812 <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 80087ee:	79fa      	ldrb	r2, [r7, #7]
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	4611      	mov	r1, r2
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fb fa95 	bl	8003d24 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	4a0e      	ldr	r2, [pc, #56]	; (8008838 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80087fe:	2100      	movs	r1, #0
 8008800:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	4a0c      	ldr	r2, [pc, #48]	; (8008838 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008806:	3302      	adds	r3, #2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	f04f 32ff 	mov.w	r2, #4294967295
 8008810:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	3301      	adds	r3, #1
 8008816:	71fb      	strb	r3, [r7, #7]
 8008818:	4b06      	ldr	r3, [pc, #24]	; (8008834 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 800881a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800881e:	79fa      	ldrb	r2, [r7, #7]
 8008820:	429a      	cmp	r2, r3
 8008822:	d3c1      	bcc.n	80087a8 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20001674 	.word	0x20001674
 8008834:	20000304 	.word	0x20000304
 8008838:	20001c94 	.word	0x20001c94

0800883c <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008842:	2300      	movs	r3, #0
 8008844:	71fb      	strb	r3, [r7, #7]
 8008846:	e04e      	b.n	80088e6 <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	4a2c      	ldr	r2, [pc, #176]	; (80088fc <Check_Recv_Status_fail+0xc0>)
 800884c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d045      	beq.n	80088e0 <Check_Recv_Status_fail+0xa4>
 8008854:	79fa      	ldrb	r2, [r7, #7]
 8008856:	492a      	ldr	r1, [pc, #168]	; (8008900 <Check_Recv_Status_fail+0xc4>)
 8008858:	4613      	mov	r3, r2
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	4413      	add	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	440b      	add	r3, r1
 8008862:	3303      	adds	r3, #3
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d03a      	beq.n	80088e0 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	4a23      	ldr	r2, [pc, #140]	; (80088fc <Check_Recv_Status_fail+0xc0>)
 800886e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008872:	4618      	mov	r0, r3
 8008874:	f006 f88a 	bl	800e98c <HAL_Elaps_Ticks>
 8008878:	4602      	mov	r2, r0
 800887a:	79fb      	ldrb	r3, [r7, #7]
 800887c:	4921      	ldr	r1, [pc, #132]	; (8008904 <Check_Recv_Status_fail+0xc8>)
 800887e:	338a      	adds	r3, #138	; 0x8a
 8008880:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008884:	429a      	cmp	r2, r3
 8008886:	d92b      	bls.n	80088e0 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	4a1e      	ldr	r2, [pc, #120]	; (8008904 <Check_Recv_Status_fail+0xc8>)
 800888c:	3366      	adds	r3, #102	; 0x66
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	6859      	ldr	r1, [r3, #4]
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	4a1b      	ldr	r2, [pc, #108]	; (8008904 <Check_Recv_Status_fail+0xc8>)
 8008898:	338a      	adds	r3, #138	; 0x8a
 800889a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800889e:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <Check_Recv_Status_fail+0xcc>)
 80088a0:	fba2 2303 	umull	r2, r3, r2, r3
 80088a4:	099b      	lsrs	r3, r3, #6
 80088a6:	461a      	mov	r2, r3
 80088a8:	4818      	ldr	r0, [pc, #96]	; (800890c <Check_Recv_Status_fail+0xd0>)
 80088aa:	f019 fe5b 	bl	8022564 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	4a12      	ldr	r2, [pc, #72]	; (80088fc <Check_Recv_Status_fail+0xc0>)
 80088b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b6:	4619      	mov	r1, r3
 80088b8:	4815      	ldr	r0, [pc, #84]	; (8008910 <Check_Recv_Status_fail+0xd4>)
 80088ba:	f019 fe53 	bl	8022564 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 80088be:	f00c fe47 	bl	8015550 <HAL_GetTick>
 80088c2:	4603      	mov	r3, r0
 80088c4:	4619      	mov	r1, r3
 80088c6:	4813      	ldr	r0, [pc, #76]	; (8008914 <Check_Recv_Status_fail+0xd8>)
 80088c8:	f019 fe4c 	bl	8022564 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 80088cc:	79fa      	ldrb	r2, [r7, #7]
 80088ce:	490c      	ldr	r1, [pc, #48]	; (8008900 <Check_Recv_Status_fail+0xc4>)
 80088d0:	4613      	mov	r3, r2
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	4413      	add	r3, r2
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	440b      	add	r3, r1
 80088da:	3303      	adds	r3, #3
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	3301      	adds	r3, #1
 80088e4:	71fb      	strb	r3, [r7, #7]
 80088e6:	4b07      	ldr	r3, [pc, #28]	; (8008904 <Check_Recv_Status_fail+0xc8>)
 80088e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088ec:	79fa      	ldrb	r2, [r7, #7]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d3aa      	bcc.n	8008848 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000fcc 	.word	0x20000fcc
 8008900:	20001674 	.word	0x20001674
 8008904:	20000304 	.word	0x20000304
 8008908:	10624dd3 	.word	0x10624dd3
 800890c:	08025074 	.word	0x08025074
 8008910:	080250a8 	.word	0x080250a8
 8008914:	080250d8 	.word	0x080250d8

08008918 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8008918:	b590      	push	{r4, r7, lr}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 800892a:	2301      	movs	r3, #1
 800892c:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	4a39      	ldr	r2, [pc, #228]	; (8008a18 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008932:	4413      	add	r3, r2
 8008934:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008938:	2b01      	cmp	r3, #1
 800893a:	d168      	bne.n	8008a0e <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 800893c:	4b37      	ldr	r3, [pc, #220]	; (8008a1c <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d164      	bne.n	8008a0e <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008944:	79fa      	ldrb	r2, [r7, #7]
 8008946:	4936      	ldr	r1, [pc, #216]	; (8008a20 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008948:	4613      	mov	r3, r2
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	4413      	add	r3, r2
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	440b      	add	r3, r1
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f002 fad3 	bl	800af00 <bcdToDec>
 800895a:	4603      	mov	r3, r0
 800895c:	461a      	mov	r2, r3
 800895e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008962:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008966:	79fa      	ldrb	r2, [r7, #7]
 8008968:	492d      	ldr	r1, [pc, #180]	; (8008a20 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 800896a:	4613      	mov	r3, r2
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	4413      	add	r3, r2
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	440b      	add	r3, r1
 8008974:	3301      	adds	r3, #1
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	4618      	mov	r0, r3
 800897a:	f002 fac1 	bl	800af00 <bcdToDec>
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	4613      	mov	r3, r2
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 800898a:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 800898c:	79fa      	ldrb	r2, [r7, #7]
 800898e:	4924      	ldr	r1, [pc, #144]	; (8008a20 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008990:	4613      	mov	r3, r2
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	4413      	add	r3, r2
 8008996:	005b      	lsls	r3, r3, #1
 8008998:	440b      	add	r3, r1
 800899a:	3302      	adds	r3, #2
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f002 faae 	bl	800af00 <bcdToDec>
 80089a4:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 80089a6:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 80089a8:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 80089aa:	613b      	str	r3, [r7, #16]

		Get_time();
 80089ac:	f002 fba4 	bl	800b0f8 <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80089b0:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80089ba:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 80089be:	4b19      	ldr	r3, [pc, #100]	; (8008a24 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80089c0:	785b      	ldrb	r3, [r3, #1]
 80089c2:	4619      	mov	r1, r3
 80089c4:	460b      	mov	r3, r1
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	1a5b      	subs	r3, r3, r1
 80089ca:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80089cc:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 80089ce:	4a15      	ldr	r2, [pc, #84]	; (8008a24 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80089d0:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 80089d2:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 80089d4:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80089d6:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfb8      	it	lt
 80089e2:	425b      	neglt	r3, r3
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	dd12      	ble.n	8008a0e <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80089f2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	4a07      	ldr	r2, [pc, #28]	; (8008a18 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 80089fa:	3366      	adds	r3, #102	; 0x66
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	461a      	mov	r2, r3
 8008a04:	4808      	ldr	r0, [pc, #32]	; (8008a28 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8008a06:	f019 fdad 	bl	8022564 <iprintf>
			Return_Value  = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	371c      	adds	r7, #28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd90      	pop	{r4, r7, pc}
 8008a18:	20000304 	.word	0x20000304
 8008a1c:	20000e6c 	.word	0x20000e6c
 8008a20:	20001188 	.word	0x20001188
 8008a24:	200027e4 	.word	0x200027e4
 8008a28:	080250e4 	.word	0x080250e4

08008a2c <Check_All_Peers>:

void Check_All_Peers(void)
{
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a32:	2300      	movs	r3, #0
 8008a34:	71fb      	strb	r3, [r7, #7]
 8008a36:	e045      	b.n	8008ac4 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fe ff9e 	bl	800797c <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008a40:	79fa      	ldrb	r2, [r7, #7]
 8008a42:	4926      	ldr	r1, [pc, #152]	; (8008adc <Check_All_Peers+0xb0>)
 8008a44:	4613      	mov	r3, r2
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	3304      	adds	r3, #4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f005 ff9a 	bl	800e98c <HAL_Elaps_Ticks>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	4920      	ldr	r1, [pc, #128]	; (8008ae0 <Check_All_Peers+0xb4>)
 8008a5e:	338a      	adds	r3, #138	; 0x8a
 8008a60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d92a      	bls.n	8008abe <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 8008a68:	79fa      	ldrb	r2, [r7, #7]
 8008a6a:	491c      	ldr	r1, [pc, #112]	; (8008adc <Check_All_Peers+0xb0>)
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	440b      	add	r3, r1
 8008a76:	3301      	adds	r3, #1
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d11f      	bne.n	8008abe <Check_All_Peers+0x92>
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	4a18      	ldr	r2, [pc, #96]	; (8008ae4 <Check_All_Peers+0xb8>)
 8008a82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008a86:	79fa      	ldrb	r2, [r7, #7]
 8008a88:	4814      	ldr	r0, [pc, #80]	; (8008adc <Check_All_Peers+0xb0>)
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4403      	add	r3, r0
 8008a94:	3304      	adds	r3, #4
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	d010      	beq.n	8008abe <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = CLEAR;
 8008a9c:	79fa      	ldrb	r2, [r7, #7]
 8008a9e:	490f      	ldr	r1, [pc, #60]	; (8008adc <Check_All_Peers+0xb0>)
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	3301      	adds	r3, #1
 8008aac:	2200      	movs	r2, #0
 8008aae:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8008ab0:	79fc      	ldrb	r4, [r7, #7]
 8008ab2:	f00c fd4d 	bl	8015550 <HAL_GetTick>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4a0a      	ldr	r2, [pc, #40]	; (8008ae4 <Check_All_Peers+0xb8>)
 8008aba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	71fb      	strb	r3, [r7, #7]
 8008ac4:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <Check_All_Peers+0xb4>)
 8008ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008aca:	79fa      	ldrb	r2, [r7, #7]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d3b3      	bcc.n	8008a38 <Check_All_Peers+0xc>
			}
		}
	}
}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd90      	pop	{r4, r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20001cc8 	.word	0x20001cc8
 8008ae0:	20000304 	.word	0x20000304
 8008ae4:	2000207c 	.word	0x2000207c

08008ae8 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk = 0;

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008aee:	4949      	ldr	r1, [pc, #292]	; (8008c14 <Check_for_RelayMisMatch+0x12c>)
 8008af0:	4849      	ldr	r0, [pc, #292]	; (8008c18 <Check_for_RelayMisMatch+0x130>)
 8008af2:	f7f7 fba5 	bl	8000240 <strcmp>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 8086 	beq.w	8008c0a <Check_for_RelayMisMatch+0x122>
	{
		return;
	}


	if(HAL_Elaps_Ticks(Check_Clk) > TWO_HUNDRED_MS )
 8008afe:	4b47      	ldr	r3, [pc, #284]	; (8008c1c <Check_for_RelayMisMatch+0x134>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f005 ff42 	bl	800e98c <HAL_Elaps_Ticks>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2bc8      	cmp	r3, #200	; 0xc8
 8008b0c:	d97e      	bls.n	8008c0c <Check_for_RelayMisMatch+0x124>
	{
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b0e:	2300      	movs	r3, #0
 8008b10:	71fb      	strb	r3, [r7, #7]
 8008b12:	e06e      	b.n	8008bf2 <Check_for_RelayMisMatch+0x10a>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (Link_Flag[Traverser] == CLEAR))
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	4a42      	ldr	r2, [pc, #264]	; (8008c20 <Check_for_RelayMisMatch+0x138>)
 8008b18:	5cd3      	ldrb	r3, [r2, r3]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d116      	bne.n	8008b4c <Check_for_RelayMisMatch+0x64>
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	4a40      	ldr	r2, [pc, #256]	; (8008c24 <Check_for_RelayMisMatch+0x13c>)
 8008b22:	5cd3      	ldrb	r3, [r2, r3]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d111      	bne.n	8008b4c <Check_for_RelayMisMatch+0x64>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8008b28:	79fa      	ldrb	r2, [r7, #7]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4a3d      	ldr	r2, [pc, #244]	; (8008c28 <Check_for_RelayMisMatch+0x140>)
 8008b34:	1898      	adds	r0, r3, r2
 8008b36:	79fa      	ldrb	r2, [r7, #7]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4a3a      	ldr	r2, [pc, #232]	; (8008c2c <Check_for_RelayMisMatch+0x144>)
 8008b42:	4413      	add	r3, r2
 8008b44:	2214      	movs	r2, #20
 8008b46:	4619      	mov	r1, r3
 8008b48:	f019 fbfc 	bl	8022344 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8008b4c:	79fa      	ldrb	r2, [r7, #7]
 8008b4e:	4936      	ldr	r1, [pc, #216]	; (8008c28 <Check_for_RelayMisMatch+0x140>)
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	3312      	adds	r3, #18
 8008b5c:	8819      	ldrh	r1, [r3, #0]
 8008b5e:	79fa      	ldrb	r2, [r7, #7]
 8008b60:	4832      	ldr	r0, [pc, #200]	; (8008c2c <Check_for_RelayMisMatch+0x144>)
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4403      	add	r3, r0
 8008b6c:	3312      	adds	r3, #18
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	4299      	cmp	r1, r3
 8008b72:	d034      	beq.n	8008bde <Check_for_RelayMisMatch+0xf6>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	4a2e      	ldr	r2, [pc, #184]	; (8008c30 <Check_for_RelayMisMatch+0x148>)
 8008b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f005 ff05 	bl	800e98c <HAL_Elaps_Ticks>
 8008b82:	4603      	mov	r3, r0
 8008b84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b88:	d32f      	bcc.n	8008bea <Check_for_RelayMisMatch+0x102>
				{
					continue;
				}
				else
				{
					printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	4a29      	ldr	r2, [pc, #164]	; (8008c34 <Check_for_RelayMisMatch+0x14c>)
 8008b8e:	3366      	adds	r3, #102	; 0x66
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	4619      	mov	r1, r3
 8008b98:	4827      	ldr	r0, [pc, #156]	; (8008c38 <Check_for_RelayMisMatch+0x150>)
 8008b9a:	f019 fce3 	bl	8022564 <iprintf>
					printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8008b9e:	79fa      	ldrb	r2, [r7, #7]
 8008ba0:	4921      	ldr	r1, [pc, #132]	; (8008c28 <Check_for_RelayMisMatch+0x140>)
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	3312      	adds	r3, #18
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4822      	ldr	r0, [pc, #136]	; (8008c3c <Check_for_RelayMisMatch+0x154>)
 8008bb4:	f019 fcd6 	bl	8022564 <iprintf>
					printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8008bb8:	79fa      	ldrb	r2, [r7, #7]
 8008bba:	491c      	ldr	r1, [pc, #112]	; (8008c2c <Check_for_RelayMisMatch+0x144>)
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	3312      	adds	r3, #18
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	481c      	ldr	r0, [pc, #112]	; (8008c40 <Check_for_RelayMisMatch+0x158>)
 8008bce:	f019 fcc9 	bl	8022564 <iprintf>

					MisMatchFlag[Traverser] = SET;
 8008bd2:	79fb      	ldrb	r3, [r7, #7]
 8008bd4:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <Check_for_RelayMisMatch+0x15c>)
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008bdc:	e006      	b.n	8008bec <Check_for_RelayMisMatch+0x104>
					//					Tx_Peer_Index_To_SignalReq = 0xff;
				}
			}
			else
			{
				MisMatchFlag[Traverser] = CLEAR; /* If both Relay CRC is Matching MisMatch will be CLEAR */
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	4a18      	ldr	r2, [pc, #96]	; (8008c44 <Check_for_RelayMisMatch+0x15c>)
 8008be2:	2100      	movs	r1, #0
 8008be4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008be8:	e000      	b.n	8008bec <Check_for_RelayMisMatch+0x104>
					continue;
 8008bea:	bf00      	nop
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	71fb      	strb	r3, [r7, #7]
 8008bf2:	4b10      	ldr	r3, [pc, #64]	; (8008c34 <Check_for_RelayMisMatch+0x14c>)
 8008bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bf8:	79fa      	ldrb	r2, [r7, #7]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d38a      	bcc.n	8008b14 <Check_for_RelayMisMatch+0x2c>
			}
		}
		Check_Clk = HAL_GetTick();
 8008bfe:	f00c fca7 	bl	8015550 <HAL_GetTick>
 8008c02:	4603      	mov	r3, r0
 8008c04:	4a05      	ldr	r2, [pc, #20]	; (8008c1c <Check_for_RelayMisMatch+0x134>)
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	e000      	b.n	8008c0c <Check_for_RelayMisMatch+0x124>
		return;
 8008c0a:	bf00      	nop
	}
}
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	08023d10 	.word	0x08023d10
 8008c18:	20000305 	.word	0x20000305
 8008c1c:	200020a4 	.word	0x200020a4
 8008c20:	20000f70 	.word	0x20000f70
 8008c24:	20000f64 	.word	0x20000f64
 8008c28:	20001e80 	.word	0x20001e80
 8008c2c:	20001f48 	.word	0x20001f48
 8008c30:	20000ed8 	.word	0x20000ed8
 8008c34:	20000304 	.word	0x20000304
 8008c38:	08025124 	.word	0x08025124
 8008c3c:	08025130 	.word	0x08025130
 8008c40:	08025140 	.word	0x08025140
 8008c44:	20000ec4 	.word	0x20000ec4

08008c48 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8008c52:	f00c fc7d 	bl	8015550 <HAL_GetTick>
 8008c56:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8008c58:	79fa      	ldrb	r2, [r7, #7]
 8008c5a:	492a      	ldr	r1, [pc, #168]	; (8008d04 <CheckOtherLinkStatus+0xbc>)
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	4413      	add	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	440b      	add	r3, r1
 8008c66:	3302      	adds	r3, #2
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d11d      	bne.n	8008caa <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8008c6e:	79fb      	ldrb	r3, [r7, #7]
 8008c70:	4925      	ldr	r1, [pc, #148]	; (8008d08 <CheckOtherLinkStatus+0xc0>)
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8008c78:	79fa      	ldrb	r2, [r7, #7]
 8008c7a:	4924      	ldr	r1, [pc, #144]	; (8008d0c <CheckOtherLinkStatus+0xc4>)
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	3304      	adds	r3, #4
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8008c8c:	79fa      	ldrb	r2, [r7, #7]
 8008c8e:	491f      	ldr	r1, [pc, #124]	; (8008d0c <CheckOtherLinkStatus+0xc4>)
 8008c90:	4613      	mov	r3, r2
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	4413      	add	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	4a1b      	ldr	r2, [pc, #108]	; (8008d10 <CheckOtherLinkStatus+0xc8>)
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	54d1      	strb	r1, [r2, r3]
 8008ca8:	e017      	b.n	8008cda <CheckOtherLinkStatus+0x92>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = CLEAR;
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	4a18      	ldr	r2, [pc, #96]	; (8008d10 <CheckOtherLinkStatus+0xc8>)
 8008cae:	2100      	movs	r1, #0
 8008cb0:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 8008cb2:	79fa      	ldrb	r2, [r7, #7]
 8008cb4:	4915      	ldr	r1, [pc, #84]	; (8008d0c <CheckOtherLinkStatus+0xc4>)
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = CLEAR;
 8008cc6:	79fa      	ldrb	r2, [r7, #7]
 8008cc8:	4910      	ldr	r1, [pc, #64]	; (8008d0c <CheckOtherLinkStatus+0xc4>)
 8008cca:	4613      	mov	r3, r2
 8008ccc:	005b      	lsls	r3, r3, #1
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	440b      	add	r3, r1
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]
	}


	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 8008cda:	79fa      	ldrb	r2, [r7, #7]
 8008cdc:	4909      	ldr	r1, [pc, #36]	; (8008d04 <CheckOtherLinkStatus+0xbc>)
 8008cde:	4613      	mov	r3, r2
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	4413      	add	r3, r2
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	440b      	add	r3, r1
 8008ce8:	3301      	adds	r3, #1
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d104      	bne.n	8008cfa <CheckOtherLinkStatus+0xb2>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	4908      	ldr	r1, [pc, #32]	; (8008d14 <CheckOtherLinkStatus+0xcc>)
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}


}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20001764 	.word	0x20001764
 8008d08:	20000f3c 	.word	0x20000f3c
 8008d0c:	20001d40 	.word	0x20001d40
 8008d10:	20000f70 	.word	0x20000f70
 8008d14:	20000e9c 	.word	0x20000e9c

08008d18 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8008d1c:	4b1a      	ldr	r3, [pc, #104]	; (8008d88 <SendRelay2_Other+0x70>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f005 fe33 	bl	800e98c <HAL_Elaps_Ticks>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d2c:	d92a      	bls.n	8008d84 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8008d2e:	2214      	movs	r2, #20
 8008d30:	2100      	movs	r1, #0
 8008d32:	4816      	ldr	r0, [pc, #88]	; (8008d8c <SendRelay2_Other+0x74>)
 8008d34:	f019 fb2e 	bl	8022394 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8008d38:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <SendRelay2_Other+0x78>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4a13      	ldr	r2, [pc, #76]	; (8008d94 <SendRelay2_Other+0x7c>)
 8008d46:	4413      	add	r3, r2
 8008d48:	2214      	movs	r2, #20
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	480f      	ldr	r0, [pc, #60]	; (8008d8c <SendRelay2_Other+0x74>)
 8008d4e:	f019 faf9 	bl	8022344 <memcpy>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8008d52:	f44f 7002 	mov.w	r0, #520	; 0x208
 8008d56:	f006 fb95 	bl	800f484 <TransmitCanPkt>
#endif

		++Traverser;
 8008d5a:	4b0d      	ldr	r3, [pc, #52]	; (8008d90 <SendRelay2_Other+0x78>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	4a0b      	ldr	r2, [pc, #44]	; (8008d90 <SendRelay2_Other+0x78>)
 8008d62:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8008d64:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <SendRelay2_Other+0x80>)
 8008d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <SendRelay2_Other+0x78>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d102      	bne.n	8008d7a <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8008d74:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <SendRelay2_Other+0x78>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8008d7a:	f00c fbe9 	bl	8015550 <HAL_GetTick>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4a01      	ldr	r2, [pc, #4]	; (8008d88 <SendRelay2_Other+0x70>)
 8008d82:	6013      	str	r3, [r2, #0]
	}
}
 8008d84:	bf00      	nop
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	200020a8 	.word	0x200020a8
 8008d8c:	20002010 	.word	0x20002010
 8008d90:	200020ac 	.word	0x200020ac
 8008d94:	20001e80 	.word	0x20001e80
 8008d98:	20000304 	.word	0x20000304

08008d9c <Process_HitachiEI>:

void Process_HitachiEI(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8008da0:	f013 fec4 	bl	801cb2c <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8008da4:	481a      	ldr	r0, [pc, #104]	; (8008e10 <Process_HitachiEI+0x74>)
 8008da6:	f00f ff39 	bl	8018c1c <HAL_IWDG_Refresh>

		Feed_wdt();
 8008daa:	f00a fa8d 	bl	80132c8 <Feed_wdt>

		readCanToStructs();
 8008dae:	f007 f80b 	bl	800fdc8 <readCanToStructs>

		Check_for_cmd();
 8008db2:	f7f7 fed1 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 8008db6:	f7f8 f8c9 	bl	8000f4c <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 8008dba:	f7f8 f935 	bl	8001028 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8008dbe:	f7ff f8b5 	bl	8007f2c <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 8008dc2:	f7fe ffed 	bl	8007da0 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 8008dc6:	f7ff f84f 	bl	8007e68 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 8008dca:	f7fe ff73 	bl	8007cb4 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8008dce:	f7ff fe2d 	bl	8008a2c <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 8008dd2:	f7ff fce3 	bl	800879c <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 8008dd6:	f7ff fc63 	bl	80086a0 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8008dda:	f7ff fd2f 	bl	800883c <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8008dde:	f002 f9ed 	bl	800b1bc <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 8008de2:	f7ff fe81 	bl	8008ae8 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 8008de6:	f7ff ff97 	bl	8008d18 <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 8008dea:	f00b fb7f 	bl	80144ec <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <Process_HitachiEI+0x78>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <Process_HitachiEI+0x62>
		{
			gucFlagUpdate = 3;
 8008df6:	4b08      	ldr	r3, [pc, #32]	; (8008e18 <Process_HitachiEI+0x7c>)
 8008df8:	2203      	movs	r2, #3
 8008dfa:	701a      	strb	r2, [r3, #0]
			break;
 8008dfc:	e002      	b.n	8008e04 <Process_HitachiEI+0x68>
		}

		Enable_UART_Interrupts();
 8008dfe:	f00c f995 	bl	801512c <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8008e02:	e7cd      	b.n	8008da0 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8008e04:	f00b fa70 	bl	80142e8 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8008e08:	4801      	ldr	r0, [pc, #4]	; (8008e10 <Process_HitachiEI+0x74>)
 8008e0a:	f00f ff07 	bl	8018c1c <HAL_IWDG_Refresh>
		Data_Processing();
 8008e0e:	e7f9      	b.n	8008e04 <Process_HitachiEI+0x68>
 8008e10:	20009c6c 	.word	0x20009c6c
 8008e14:	20000644 	.word	0x20000644
 8008e18:	20000a49 	.word	0x20000a49

08008e1c <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8008e22:	4b26      	ldr	r3, [pc, #152]	; (8008ebc <reset_cause_get+0xa0>)
 8008e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	da02      	bge.n	8008e30 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	71fb      	strb	r3, [r7, #7]
 8008e2e:	e037      	b.n	8008ea0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8008e30:	4b22      	ldr	r3, [pc, #136]	; (8008ebc <reset_cause_get+0xa0>)
 8008e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	71fb      	strb	r3, [r7, #7]
 8008e40:	e02e      	b.n	8008ea0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8008e42:	4b1e      	ldr	r3, [pc, #120]	; (8008ebc <reset_cause_get+0xa0>)
 8008e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	71fb      	strb	r3, [r7, #7]
 8008e52:	e025      	b.n	8008ea0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8008e54:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <reset_cause_get+0xa0>)
 8008e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 8008e60:	2304      	movs	r3, #4
 8008e62:	71fb      	strb	r3, [r7, #7]
 8008e64:	e01c      	b.n	8008ea0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8008e66:	4b15      	ldr	r3, [pc, #84]	; (8008ebc <reset_cause_get+0xa0>)
 8008e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8008e72:	2305      	movs	r3, #5
 8008e74:	71fb      	strb	r3, [r7, #7]
 8008e76:	e013      	b.n	8008ea0 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8008e78:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <reset_cause_get+0xa0>)
 8008e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8008e84:	2306      	movs	r3, #6
 8008e86:	71fb      	strb	r3, [r7, #7]
 8008e88:	e00a      	b.n	8008ea0 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8008e8a:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <reset_cause_get+0xa0>)
 8008e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 8008e96:	2307      	movs	r3, #7
 8008e98:	71fb      	strb	r3, [r7, #7]
 8008e9a:	e001      	b.n	8008ea0 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8008ea0:	4b06      	ldr	r3, [pc, #24]	; (8008ebc <reset_cause_get+0xa0>)
 8008ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ea4:	4a05      	ldr	r2, [pc, #20]	; (8008ebc <reset_cause_get+0xa0>)
 8008ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008eaa:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 8008eac:	79fb      	ldrb	r3, [r7, #7]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	40023800 	.word	0x40023800

08008ec0 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 8008eca:	4b1c      	ldr	r3, [pc, #112]	; (8008f3c <reset_cause_get_name+0x7c>)
 8008ecc:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	2b07      	cmp	r3, #7
 8008ed2:	d82b      	bhi.n	8008f2c <reset_cause_get_name+0x6c>
 8008ed4:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <reset_cause_get_name+0x1c>)
 8008ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eda:	bf00      	nop
 8008edc:	08008efd 	.word	0x08008efd
 8008ee0:	08008f03 	.word	0x08008f03
 8008ee4:	08008f09 	.word	0x08008f09
 8008ee8:	08008f0f 	.word	0x08008f0f
 8008eec:	08008f15 	.word	0x08008f15
 8008ef0:	08008f1b 	.word	0x08008f1b
 8008ef4:	08008f21 	.word	0x08008f21
 8008ef8:	08008f27 	.word	0x08008f27
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 8008efc:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <reset_cause_get_name+0x80>)
 8008efe:	60fb      	str	r3, [r7, #12]
            break;
 8008f00:	e014      	b.n	8008f2c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 8008f02:	4b10      	ldr	r3, [pc, #64]	; (8008f44 <reset_cause_get_name+0x84>)
 8008f04:	60fb      	str	r3, [r7, #12]
            break;
 8008f06:	e011      	b.n	8008f2c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8008f08:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <reset_cause_get_name+0x88>)
 8008f0a:	60fb      	str	r3, [r7, #12]
            break;
 8008f0c:	e00e      	b.n	8008f2c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <reset_cause_get_name+0x8c>)
 8008f10:	60fb      	str	r3, [r7, #12]
            break;
 8008f12:	e00b      	b.n	8008f2c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 8008f14:	4b0e      	ldr	r3, [pc, #56]	; (8008f50 <reset_cause_get_name+0x90>)
 8008f16:	60fb      	str	r3, [r7, #12]
            break;
 8008f18:	e008      	b.n	8008f2c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8008f1a:	4b0e      	ldr	r3, [pc, #56]	; (8008f54 <reset_cause_get_name+0x94>)
 8008f1c:	60fb      	str	r3, [r7, #12]
            break;
 8008f1e:	e005      	b.n	8008f2c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8008f20:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <reset_cause_get_name+0x98>)
 8008f22:	60fb      	str	r3, [r7, #12]
            break;
 8008f24:	e002      	b.n	8008f2c <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 8008f26:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <reset_cause_get_name+0x9c>)
 8008f28:	60fb      	str	r3, [r7, #12]
            break;
 8008f2a:	bf00      	nop
    }

    return reset_cause_name;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	08025150 	.word	0x08025150
 8008f40:	08025154 	.word	0x08025154
 8008f44:	0802515c 	.word	0x0802515c
 8008f48:	0802516c 	.word	0x0802516c
 8008f4c:	08025184 	.word	0x08025184
 8008f50:	080251a0 	.word	0x080251a0
 8008f54:	080251b0 	.word	0x080251b0
 8008f58:	080251e0 	.word	0x080251e0
 8008f5c:	080251fc 	.word	0x080251fc

08008f60 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 8008f64:	f00b fac2 	bl	80144ec <Print_BuildDat_Details>

		readCanToStructs();
 8008f68:	f006 ff2e 	bl	800fdc8 <readCanToStructs>

		Feed_wdt();
 8008f6c:	f00a f9ac 	bl	80132c8 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 8008f70:	480f      	ldr	r0, [pc, #60]	; (8008fb0 <Process_Medha_EI+0x50>)
 8008f72:	f00f fe53 	bl	8018c1c <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 8008f76:	f000 f91d 	bl	80091b4 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 8008f7a:	f000 fed5 	bl	8009d28 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 8008f7e:	f000 ff39 	bl	8009df4 <Process_Clear_Relays>

		Send_Data_to_Other();
 8008f82:	f001 f81d 	bl	8009fc0 <Send_Data_to_Other>

		Process_Data_from_Other();
 8008f86:	f001 f875 	bl	800a074 <Process_Data_from_Other>

		CheckforMedhaCMD();
 8008f8a:	f001 fa3b 	bl	800a404 <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <Process_Medha_EI+0x54>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 8008f96:	4b08      	ldr	r3, [pc, #32]	; (8008fb8 <Process_Medha_EI+0x58>)
 8008f98:	2203      	movs	r2, #3
 8008f9a:	701a      	strb	r2, [r3, #0]
			break;
 8008f9c:	e002      	b.n	8008fa4 <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 8008f9e:	f00c f8c5 	bl	801512c <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 8008fa2:	e7df      	b.n	8008f64 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8008fa4:	4802      	ldr	r0, [pc, #8]	; (8008fb0 <Process_Medha_EI+0x50>)
 8008fa6:	f00f fe39 	bl	8018c1c <HAL_IWDG_Refresh>
		Data_Processing();
 8008faa:	f00b f99d 	bl	80142e8 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8008fae:	e7f9      	b.n	8008fa4 <Process_Medha_EI+0x44>
 8008fb0:	20009c6c 	.word	0x20009c6c
 8008fb4:	20000644 	.word	0x20000644
 8008fb8:	20000a49 	.word	0x20000a49

08008fbc <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6039      	str	r1, [r7, #0]
 8008fc6:	71fb      	strb	r3, [r7, #7]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 8008fd4:	e0d0      	b.n	8009178 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f00b ff91 	bl	8014f00 <Com_Get_Byte>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	4b6c      	ldr	r3, [pc, #432]	; (8009194 <Get_Medha_EI_Message+0x1d8>)
 8008fe4:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 8008fe6:	4b6c      	ldr	r3, [pc, #432]	; (8009198 <Get_Medha_EI_Message+0x1dc>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	f200 80c2 	bhi.w	8009176 <Get_Medha_EI_Message+0x1ba>
 8008ff2:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <Get_Medha_EI_Message+0x3c>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	0800900d 	.word	0x0800900d
 8008ffc:	08009025 	.word	0x08009025
 8009000:	08009177 	.word	0x08009177
 8009004:	08009071 	.word	0x08009071
 8009008:	080090c9 	.word	0x080090c9
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 800900c:	4b61      	ldr	r3, [pc, #388]	; (8009194 <Get_Medha_EI_Message+0x1d8>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b53      	cmp	r3, #83	; 0x53
 8009012:	f040 80b1 	bne.w	8009178 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 8009016:	4b61      	ldr	r3, [pc, #388]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 8009018:	2201      	movs	r2, #1
 800901a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800901c:	4b5e      	ldr	r3, [pc, #376]	; (8009198 <Get_Medha_EI_Message+0x1dc>)
 800901e:	2202      	movs	r2, #2
 8009020:	701a      	strb	r2, [r3, #0]
			}
			break;
 8009022:	e0a9      	b.n	8009178 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 8009024:	4b5d      	ldr	r3, [pc, #372]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	2b08      	cmp	r3, #8
 800902a:	d111      	bne.n	8009050 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 800902c:	4b5b      	ldr	r3, [pc, #364]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	4413      	add	r3, r2
 8009036:	4a57      	ldr	r2, [pc, #348]	; (8009194 <Get_Medha_EI_Message+0x1d8>)
 8009038:	7812      	ldrb	r2, [r2, #0]
 800903a:	701a      	strb	r2, [r3, #0]
					i++;
 800903c:	4b57      	ldr	r3, [pc, #348]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	3301      	adds	r3, #1
 8009042:	b29a      	uxth	r2, r3
 8009044:	4b55      	ldr	r3, [pc, #340]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 8009046:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 8009048:	4b53      	ldr	r3, [pc, #332]	; (8009198 <Get_Medha_EI_Message+0x1dc>)
 800904a:	2204      	movs	r2, #4
 800904c:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800904e:	e00d      	b.n	800906c <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 8009050:	4b52      	ldr	r3, [pc, #328]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	4413      	add	r3, r2
 800905a:	4a4e      	ldr	r2, [pc, #312]	; (8009194 <Get_Medha_EI_Message+0x1d8>)
 800905c:	7812      	ldrb	r2, [r2, #0]
 800905e:	701a      	strb	r2, [r3, #0]
					i++;
 8009060:	4b4e      	ldr	r3, [pc, #312]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	b29a      	uxth	r2, r3
 8009068:	4b4c      	ldr	r3, [pc, #304]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 800906a:	801a      	strh	r2, [r3, #0]
				break;
 800906c:	bf00      	nop
			}
			break;
 800906e:	e083      	b.n	8009178 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 8009070:	4b4a      	ldr	r3, [pc, #296]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	3b02      	subs	r3, #2
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	4413      	add	r3, r2
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b29b      	uxth	r3, r3
 800907e:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 8009080:	4b47      	ldr	r3, [pc, #284]	; (80091a0 <Get_Medha_EI_Message+0x1e4>)
 8009082:	2200      	movs	r2, #0
 8009084:	801a      	strh	r2, [r3, #0]
				j=1;
 8009086:	4b47      	ldr	r3, [pc, #284]	; (80091a4 <Get_Medha_EI_Message+0x1e8>)
 8009088:	2201      	movs	r2, #1
 800908a:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 800908c:	4b43      	ldr	r3, [pc, #268]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	4413      	add	r3, r2
 8009096:	4a3f      	ldr	r2, [pc, #252]	; (8009194 <Get_Medha_EI_Message+0x1d8>)
 8009098:	7812      	ldrb	r2, [r2, #0]
 800909a:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 800909c:	4b40      	ldr	r3, [pc, #256]	; (80091a0 <Get_Medha_EI_Message+0x1e4>)
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	3301      	adds	r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	4b3e      	ldr	r3, [pc, #248]	; (80091a0 <Get_Medha_EI_Message+0x1e4>)
 80090a6:	801a      	strh	r2, [r3, #0]
				i++;
 80090a8:	4b3c      	ldr	r3, [pc, #240]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	3301      	adds	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	4b3a      	ldr	r3, [pc, #232]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 80090b2:	801a      	strh	r2, [r3, #0]
				j++;
 80090b4:	4b3b      	ldr	r3, [pc, #236]	; (80091a4 <Get_Medha_EI_Message+0x1e8>)
 80090b6:	881b      	ldrh	r3, [r3, #0]
 80090b8:	3301      	adds	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	4b39      	ldr	r3, [pc, #228]	; (80091a4 <Get_Medha_EI_Message+0x1e8>)
 80090be:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 80090c0:	4b35      	ldr	r3, [pc, #212]	; (8009198 <Get_Medha_EI_Message+0x1dc>)
 80090c2:	2205      	movs	r2, #5
 80090c4:	701a      	strb	r2, [r3, #0]
				break;
 80090c6:	e057      	b.n	8009178 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 80090c8:	4b34      	ldr	r3, [pc, #208]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	461a      	mov	r2, r3
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	4413      	add	r3, r2
 80090d2:	4a30      	ldr	r2, [pc, #192]	; (8009194 <Get_Medha_EI_Message+0x1d8>)
 80090d4:	7812      	ldrb	r2, [r2, #0]
 80090d6:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 80090d8:	89ba      	ldrh	r2, [r7, #12]
 80090da:	4b31      	ldr	r3, [pc, #196]	; (80091a0 <Get_Medha_EI_Message+0x1e4>)
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d940      	bls.n	8009164 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 80090e2:	4b2f      	ldr	r3, [pc, #188]	; (80091a0 <Get_Medha_EI_Message+0x1e4>)
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	3301      	adds	r3, #1
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	4b2d      	ldr	r3, [pc, #180]	; (80091a0 <Get_Medha_EI_Message+0x1e4>)
 80090ec:	801a      	strh	r2, [r3, #0]
					i++;
 80090ee:	4b2b      	ldr	r3, [pc, #172]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	4b29      	ldr	r3, [pc, #164]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 80090f8:	801a      	strh	r2, [r3, #0]
					j++;
 80090fa:	4b2a      	ldr	r3, [pc, #168]	; (80091a4 <Get_Medha_EI_Message+0x1e8>)
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	3301      	adds	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	4b28      	ldr	r3, [pc, #160]	; (80091a4 <Get_Medha_EI_Message+0x1e8>)
 8009104:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 8009106:	89ba      	ldrh	r2, [r7, #12]
 8009108:	4b25      	ldr	r3, [pc, #148]	; (80091a0 <Get_Medha_EI_Message+0x1e4>)
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d133      	bne.n	8009178 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 8009110:	4b22      	ldr	r3, [pc, #136]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	3b04      	subs	r3, #4
 8009116:	b29a      	uxth	r2, r3
 8009118:	4b23      	ldr	r3, [pc, #140]	; (80091a8 <Get_Medha_EI_Message+0x1ec>)
 800911a:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 800911c:	4b22      	ldr	r3, [pc, #136]	; (80091a8 <Get_Medha_EI_Message+0x1ec>)
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	81fb      	strh	r3, [r7, #14]
						i = 0;
 8009122:	4b1e      	ldr	r3, [pc, #120]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 8009124:	2200      	movs	r2, #0
 8009126:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 8009128:	4b1b      	ldr	r3, [pc, #108]	; (8009198 <Get_Medha_EI_Message+0x1dc>)
 800912a:	2201      	movs	r2, #1
 800912c:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 8009132:	89fb      	ldrh	r3, [r7, #14]
 8009134:	2b04      	cmp	r3, #4
 8009136:	d804      	bhi.n	8009142 <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 8009138:	481c      	ldr	r0, [pc, #112]	; (80091ac <Get_Medha_EI_Message+0x1f0>)
 800913a:	f019 faaf 	bl	802269c <puts>
							return ZERO;
 800913e:	2300      	movs	r3, #0
 8009140:	e023      	b.n	800918a <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 8009142:	4b19      	ldr	r3, [pc, #100]	; (80091a8 <Get_Medha_EI_Message+0x1ec>)
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	2000      	movs	r0, #0
 800914c:	f001 fc1c 	bl	800a988 <CheckCRC32>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 8009156:	89fb      	ldrh	r3, [r7, #14]
 8009158:	e017      	b.n	800918a <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800915a:	4815      	ldr	r0, [pc, #84]	; (80091b0 <Get_Medha_EI_Message+0x1f4>)
 800915c:	f019 fa9e 	bl	802269c <puts>
							return ZERO;
 8009160:	2300      	movs	r3, #0
 8009162:	e012      	b.n	800918a <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 8009164:	4b0d      	ldr	r3, [pc, #52]	; (800919c <Get_Medha_EI_Message+0x1e0>)
 8009166:	2200      	movs	r2, #0
 8009168:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800916a:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <Get_Medha_EI_Message+0x1dc>)
 800916c:	2201      	movs	r2, #1
 800916e:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	81bb      	strh	r3, [r7, #12]
				}
				break;
 8009174:	e000      	b.n	8009178 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 8009176:	bf00      	nop
	while(Com_DataReady(ComPort))
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	4618      	mov	r0, r3
 800917c:	f00b fe80 	bl	8014e80 <Com_DataReady>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	f47f af27 	bne.w	8008fd6 <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	200027b0 	.word	0x200027b0
 8009198:	20000116 	.word	0x20000116
 800919c:	200027b2 	.word	0x200027b2
 80091a0:	200027b4 	.word	0x200027b4
 80091a4:	200027b6 	.word	0x200027b6
 80091a8:	200027b8 	.word	0x200027b8
 80091ac:	08025214 	.word	0x08025214
 80091b0:	0802521c 	.word	0x0802521c

080091b4 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 80091b4:	b5b0      	push	{r4, r5, r7, lr}
 80091b6:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 80091ba:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 80091c2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80091c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	3304      	adds	r3, #4
 80091d0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80091d4:	2100      	movs	r1, #0
 80091d6:	4618      	mov	r0, r3
 80091d8:	f019 f8dc 	bl	8022394 <memset>
	uint16_t NoOfInputs 		= 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 80091e8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80091ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	3304      	adds	r3, #4
 80091f6:	227c      	movs	r2, #124	; 0x7c
 80091f8:	2100      	movs	r1, #0
 80091fa:	4618      	mov	r0, r3
 80091fc:	f019 f8ca 	bl	8022394 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 8009200:	2300      	movs	r3, #0
 8009202:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 8009206:	2300      	movs	r3, #0
 8009208:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 800920c:	4bc1      	ldr	r3, [pc, #772]	; (8009514 <Medha_EI_Analyser+0x360>)
 800920e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009212:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff fece 	bl	8008fbc <Get_Medha_EI_Message>
 8009220:	4603      	mov	r3, r0
 8009222:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 8009226:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800922a:	2b05      	cmp	r3, #5
 800922c:	d939      	bls.n	80092a2 <Medha_EI_Analyser+0xee>
	{
		HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 800922e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009232:	48b9      	ldr	r0, [pc, #740]	; (8009518 <Medha_EI_Analyser+0x364>)
 8009234:	f00e fe75 	bl	8017f22 <HAL_GPIO_TogglePin>
		printf("Raw Data:\n");
 8009238:	48b8      	ldr	r0, [pc, #736]	; (800951c <Medha_EI_Analyser+0x368>)
 800923a:	f019 fa2f 	bl	802269c <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800923e:	2300      	movs	r3, #0
 8009240:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009244:	e024      	b.n	8009290 <Medha_EI_Analyser+0xdc>
		{

			if((i!=0) && ((i%10)==0))
 8009246:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800924a:	2b00      	cmp	r3, #0
 800924c:	d010      	beq.n	8009270 <Medha_EI_Analyser+0xbc>
 800924e:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009252:	4bb3      	ldr	r3, [pc, #716]	; (8009520 <Medha_EI_Analyser+0x36c>)
 8009254:	fba3 1302 	umull	r1, r3, r3, r2
 8009258:	08d9      	lsrs	r1, r3, #3
 800925a:	460b      	mov	r3, r1
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	b29b      	uxth	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d102      	bne.n	8009270 <Medha_EI_Analyser+0xbc>
			{
				printf("\n");
 800926a:	200a      	movs	r0, #10
 800926c:	f019 f992 	bl	8022594 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 8009270:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009274:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009278:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800927c:	5cd3      	ldrb	r3, [r2, r3]
 800927e:	4619      	mov	r1, r3
 8009280:	48a8      	ldr	r0, [pc, #672]	; (8009524 <Medha_EI_Analyser+0x370>)
 8009282:	f019 f96f 	bl	8022564 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009286:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800928a:	3301      	adds	r3, #1
 800928c:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009290:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009294:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009298:	429a      	cmp	r2, r3
 800929a:	d3d4      	bcc.n	8009246 <Medha_EI_Analyser+0x92>
		}
		printf("\n");
 800929c:	200a      	movs	r0, #10
 800929e:	f019 f979 	bl	8022594 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 80092a2:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 83b7 	beq.w	8009a1a <Medha_EI_Analyser+0x866>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 80092ac:	463b      	mov	r3, r7
 80092ae:	f44f 7292 	mov.w	r2, #292	; 0x124
 80092b2:	2100      	movs	r1, #0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f019 f86d 	bl	8022394 <memset>

		BYTEINIT(0);
 80092ba:	2300      	movs	r3, #0
 80092bc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 80092c0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80092c4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80092c8:	4413      	add	r3, r2
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80092d0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80092d4:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 80092d6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80092da:	3301      	adds	r3, #1
 80092dc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 80092e0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80092e4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80092e8:	4413      	add	r3, r2
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80092f2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80092f6:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 80092f8:	4b86      	ldr	r3, [pc, #536]	; (8009514 <Medha_EI_Analyser+0x360>)
 80092fa:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 80092fe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009302:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009306:	889b      	ldrh	r3, [r3, #4]
 8009308:	429a      	cmp	r2, r3
 800930a:	d010      	beq.n	800932e <Medha_EI_Analyser+0x17a>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 800930c:	4886      	ldr	r0, [pc, #536]	; (8009528 <Medha_EI_Analyser+0x374>)
 800930e:	f019 f9c5 	bl	802269c <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 8009312:	4b80      	ldr	r3, [pc, #512]	; (8009514 <Medha_EI_Analyser+0x360>)
 8009314:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8009318:	4619      	mov	r1, r3
 800931a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800931e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009322:	889b      	ldrh	r3, [r3, #4]
 8009324:	461a      	mov	r2, r3
 8009326:	4881      	ldr	r0, [pc, #516]	; (800952c <Medha_EI_Analyser+0x378>)
 8009328:	f019 f91c 	bl	8022564 <iprintf>
			return;
 800932c:	e378      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
		}
		BYTEINC(2);
 800932e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009332:	3302      	adds	r3, #2
 8009334:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 8009338:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800933c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009340:	4413      	add	r3, r2
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	b29a      	uxth	r2, r3
 8009346:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800934a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800934e:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 8009350:	4b70      	ldr	r3, [pc, #448]	; (8009514 <Medha_EI_Analyser+0x360>)
 8009352:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8009356:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800935a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800935e:	885b      	ldrh	r3, [r3, #2]
 8009360:	429a      	cmp	r2, r3
 8009362:	d010      	beq.n	8009386 <Medha_EI_Analyser+0x1d2>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 8009364:	4872      	ldr	r0, [pc, #456]	; (8009530 <Medha_EI_Analyser+0x37c>)
 8009366:	f019 f999 	bl	802269c <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800936a:	4b6a      	ldr	r3, [pc, #424]	; (8009514 <Medha_EI_Analyser+0x360>)
 800936c:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8009370:	4619      	mov	r1, r3
 8009372:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009376:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800937a:	885b      	ldrh	r3, [r3, #2]
 800937c:	461a      	mov	r2, r3
 800937e:	486b      	ldr	r0, [pc, #428]	; (800952c <Medha_EI_Analyser+0x378>)
 8009380:	f019 f8f0 	bl	8022564 <iprintf>
			return;
 8009384:	e34c      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
		}
		BYTEINC(2);
 8009386:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800938a:	3302      	adds	r3, #2
 800938c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 8009390:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009394:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009398:	4413      	add	r3, r2
 800939a:	781a      	ldrb	r2, [r3, #0]
 800939c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093a0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093a4:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 80093a6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093aa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093ae:	799b      	ldrb	r3, [r3, #6]
 80093b0:	2baa      	cmp	r3, #170	; 0xaa
 80093b2:	d010      	beq.n	80093d6 <Medha_EI_Analyser+0x222>
 80093b4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093b8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093bc:	799b      	ldrb	r3, [r3, #6]
 80093be:	2bbb      	cmp	r3, #187	; 0xbb
 80093c0:	d009      	beq.n	80093d6 <Medha_EI_Analyser+0x222>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 80093c2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093c6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093ca:	799b      	ldrb	r3, [r3, #6]
 80093cc:	4619      	mov	r1, r3
 80093ce:	4859      	ldr	r0, [pc, #356]	; (8009534 <Medha_EI_Analyser+0x380>)
 80093d0:	f019 f8c8 	bl	8022564 <iprintf>
			return;
 80093d4:	e324      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
		}
		BYTEINC(1);
 80093d6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093da:	3301      	adds	r3, #1
 80093dc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 80093e0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093e4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80093e8:	4413      	add	r3, r2
 80093ea:	781a      	ldrb	r2, [r3, #0]
 80093ec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093f0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093f4:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 80093f6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093fa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093fe:	79db      	ldrb	r3, [r3, #7]
 8009400:	2be1      	cmp	r3, #225	; 0xe1
 8009402:	d009      	beq.n	8009418 <Medha_EI_Analyser+0x264>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 8009404:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009408:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800940c:	79db      	ldrb	r3, [r3, #7]
 800940e:	4619      	mov	r1, r3
 8009410:	4849      	ldr	r0, [pc, #292]	; (8009538 <Medha_EI_Analyser+0x384>)
 8009412:	f019 f8a7 	bl	8022564 <iprintf>
			return;
 8009416:	e303      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
		}

		BYTEINC(1);
 8009418:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800941c:	3301      	adds	r3, #1
 800941e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 8009422:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009426:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800942a:	4413      	add	r3, r2
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	b29a      	uxth	r2, r3
 8009430:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009434:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009438:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800943a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800943e:	3302      	adds	r3, #2
 8009440:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 8009444:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009448:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800944c:	4413      	add	r3, r2
 800944e:	781a      	ldrb	r2, [r3, #0]
 8009450:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009454:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009458:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800945a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800945e:	3301      	adds	r3, #1
 8009460:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 8009464:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009468:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800946c:	441a      	add	r2, r3
 800946e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009472:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009476:	330b      	adds	r3, #11
 8009478:	6811      	ldr	r1, [r2, #0]
 800947a:	6019      	str	r1, [r3, #0]
 800947c:	8891      	ldrh	r1, [r2, #4]
 800947e:	7992      	ldrb	r2, [r2, #6]
 8009480:	8099      	strh	r1, [r3, #4]
 8009482:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 8009484:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009488:	3307      	adds	r3, #7
 800948a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 800948e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009492:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009496:	4413      	add	r3, r2
 8009498:	781a      	ldrb	r2, [r3, #0]
 800949a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800949e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094a2:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 80094a4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094a8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094ac:	7c9b      	ldrb	r3, [r3, #18]
 80094ae:	2b11      	cmp	r3, #17
 80094b0:	d009      	beq.n	80094c6 <Medha_EI_Analyser+0x312>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 80094b2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094b6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094ba:	7c9b      	ldrb	r3, [r3, #18]
 80094bc:	4619      	mov	r1, r3
 80094be:	481f      	ldr	r0, [pc, #124]	; (800953c <Medha_EI_Analyser+0x388>)
 80094c0:	f019 f850 	bl	8022564 <iprintf>
			return;
 80094c4:	e2ac      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
		}

		BYTEINC(1);
 80094c6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80094ca:	3301      	adds	r3, #1
 80094cc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 80094d0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80094d4:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 80094d8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80094dc:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80094e0:	4413      	add	r3, r2
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094ea:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094ee:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 80094f0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094f4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094f8:	8a9b      	ldrh	r3, [r3, #20]
 80094fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094fe:	d921      	bls.n	8009544 <Medha_EI_Analyser+0x390>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%u\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009500:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009504:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009508:	8a9b      	ldrh	r3, [r3, #20]
 800950a:	4619      	mov	r1, r3
 800950c:	480c      	ldr	r0, [pc, #48]	; (8009540 <Medha_EI_Analyser+0x38c>)
 800950e:	f019 f829 	bl	8022564 <iprintf>
			return;
 8009512:	e285      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
 8009514:	20000304 	.word	0x20000304
 8009518:	40021c00 	.word	0x40021c00
 800951c:	08025224 	.word	0x08025224
 8009520:	cccccccd 	.word	0xcccccccd
 8009524:	08025230 	.word	0x08025230
 8009528:	08025238 	.word	0x08025238
 800952c:	0802526c 	.word	0x0802526c
 8009530:	08025290 	.word	0x08025290
 8009534:	080252c0 	.word	0x080252c0
 8009538:	080252f8 	.word	0x080252f8
 800953c:	08025330 	.word	0x08025330
 8009540:	08025374 	.word	0x08025374
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 8009544:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009548:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800954c:	8a9a      	ldrh	r2, [r3, #20]
 800954e:	4ba6      	ldr	r3, [pc, #664]	; (80097e8 <Medha_EI_Analyser+0x634>)
 8009550:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009554:	429a      	cmp	r2, r3
 8009556:	d014      	beq.n	8009582 <Medha_EI_Analyser+0x3ce>
		{
			printf("No of Relays Not Matching...\nConfigured:%u - Received:%u\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 8009558:	4ba3      	ldr	r3, [pc, #652]	; (80097e8 <Medha_EI_Analyser+0x634>)
 800955a:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800955e:	4619      	mov	r1, r3
 8009560:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009564:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009568:	8a9b      	ldrh	r3, [r3, #20]
 800956a:	461a      	mov	r2, r3
 800956c:	489f      	ldr	r0, [pc, #636]	; (80097ec <Medha_EI_Analyser+0x638>)
 800956e:	f018 fff9 	bl	8022564 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009572:	499f      	ldr	r1, [pc, #636]	; (80097f0 <Medha_EI_Analyser+0x63c>)
 8009574:	489f      	ldr	r0, [pc, #636]	; (80097f4 <Medha_EI_Analyser+0x640>)
 8009576:	f7f6 fe63 	bl	8000240 <strcmp>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 824e 	beq.w	8009a1e <Medha_EI_Analyser+0x86a>
			{
				return;
			}
		}

		BYTEINC(2);
 8009582:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009586:	3302      	adds	r3, #2
 8009588:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 800958c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009590:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009594:	8a9b      	ldrh	r3, [r3, #20]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 800959e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00a      	beq.n	80095bc <Medha_EI_Analyser+0x408>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 80095a6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80095aa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80095ae:	8a9b      	ldrh	r3, [r3, #20]
 80095b0:	08db      	lsrs	r3, r3, #3
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	3301      	adds	r3, #1
 80095b6:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 80095ba:	e007      	b.n	80095cc <Medha_EI_Analyser+0x418>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 80095bc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80095c0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80095c4:	8a9b      	ldrh	r3, [r3, #20]
 80095c6:	08db      	lsrs	r3, r3, #3
 80095c8:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80095cc:	2300      	movs	r3, #0
 80095ce:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80095d2:	e02a      	b.n	800962a <Medha_EI_Analyser+0x476>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 80095d4:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 80095d8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80095dc:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 80095e0:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80095e4:	5c89      	ldrb	r1, [r1, r2]
 80095e6:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80095ea:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 80095ee:	4413      	add	r3, r2
 80095f0:	460a      	mov	r2, r1
 80095f2:	759a      	strb	r2, [r3, #22]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 80095f4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80095f8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80095fc:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009600:	4413      	add	r3, r2
 8009602:	7d9a      	ldrb	r2, [r3, #22]
 8009604:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009608:	43d2      	mvns	r2, r2
 800960a:	b2d1      	uxtb	r1, r2
 800960c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009610:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009614:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 8009616:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800961a:	3301      	adds	r3, #1
 800961c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009620:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009624:	3301      	adds	r3, #1
 8009626:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800962a:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800962e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009632:	429a      	cmp	r2, r3
 8009634:	d3ce      	bcc.n	80095d4 <Medha_EI_Analyser+0x420>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009636:	2300      	movs	r3, #0
 8009638:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800963c:	e01a      	b.n	8009674 <Medha_EI_Analyser+0x4c0>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 800963e:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009642:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009646:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800964a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800964e:	5c89      	ldrb	r1, [r1, r2]
 8009650:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009654:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009658:	4413      	add	r3, r2
 800965a:	460a      	mov	r2, r1
 800965c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			BYTEINC(1);
 8009660:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009664:	3301      	adds	r3, #1
 8009666:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800966a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800966e:	3301      	adds	r3, #1
 8009670:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009674:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009678:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800967c:	429a      	cmp	r2, r3
 800967e:	d3de      	bcc.n	800963e <Medha_EI_Analyser+0x48a>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 8009680:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009684:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8009688:	463b      	mov	r3, r7
 800968a:	3396      	adds	r3, #150	; 0x96
 800968c:	4618      	mov	r0, r3
 800968e:	f018 fe49 	bl	8022324 <memcmp>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d03f      	beq.n	8009718 <Medha_EI_Analyser+0x564>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 8009698:	4857      	ldr	r0, [pc, #348]	; (80097f8 <Medha_EI_Analyser+0x644>)
 800969a:	f018 ffff 	bl	802269c <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800969e:	2300      	movs	r3, #0
 80096a0:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80096a4:	e011      	b.n	80096ca <Medha_EI_Analyser+0x516>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 80096a6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80096aa:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80096ae:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 80096b2:	4413      	add	r3, r2
 80096b4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80096b8:	4619      	mov	r1, r3
 80096ba:	4850      	ldr	r0, [pc, #320]	; (80097fc <Medha_EI_Analyser+0x648>)
 80096bc:	f018 ff52 	bl	8022564 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 80096c0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80096c4:	3301      	adds	r3, #1
 80096c6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80096ca:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 80096ce:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d3e7      	bcc.n	80096a6 <Medha_EI_Analyser+0x4f2>
			}

			printf("\nExpected Compliment Relay Status:\n");
 80096d6:	484a      	ldr	r0, [pc, #296]	; (8009800 <Medha_EI_Analyser+0x64c>)
 80096d8:	f018 ffe0 	bl	802269c <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 80096dc:	2300      	movs	r3, #0
 80096de:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80096e2:	e00f      	b.n	8009704 <Medha_EI_Analyser+0x550>
			{
				printf("%02X ",TempCompliment[Traverser]);
 80096e4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80096e8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80096ec:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 80096f0:	5cd3      	ldrb	r3, [r2, r3]
 80096f2:	4619      	mov	r1, r3
 80096f4:	4841      	ldr	r0, [pc, #260]	; (80097fc <Medha_EI_Analyser+0x648>)
 80096f6:	f018 ff35 	bl	8022564 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 80096fa:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80096fe:	3301      	adds	r3, #1
 8009700:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009704:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009708:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800970c:	429a      	cmp	r2, r3
 800970e:	d3e9      	bcc.n	80096e4 <Medha_EI_Analyser+0x530>
			}

			printf("\nPACKET Rejected\n");
 8009710:	483c      	ldr	r0, [pc, #240]	; (8009804 <Medha_EI_Analyser+0x650>)
 8009712:	f018 ffc3 	bl	802269c <puts>
			return;
 8009716:	e183      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 8009718:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800971c:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009720:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 8009724:	4618      	mov	r0, r3
 8009726:	f001 f8fb 	bl	800a920 <GetCRC32>
 800972a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 800972e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009732:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009736:	4413      	add	r3, r2
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009740:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009744:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 8009748:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800974c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009750:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009754:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009758:	429a      	cmp	r2, r3
 800975a:	d00c      	beq.n	8009776 <Medha_EI_Analyser+0x5c2>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 800975c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009760:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009764:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009768:	461a      	mov	r2, r3
 800976a:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800976e:	4826      	ldr	r0, [pc, #152]	; (8009808 <Medha_EI_Analyser+0x654>)
 8009770:	f018 fef8 	bl	8022564 <iprintf>
			return;
 8009774:	e154      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
		}
		BYTEINC(4);
 8009776:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800977a:	3304      	adds	r3, #4
 800977c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 8009780:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009784:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29a      	uxth	r2, r3
 800978e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009792:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009796:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 800979a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800979e:	3302      	adds	r3, #2
 80097a0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 80097a4:	f00b fed4 	bl	8015550 <HAL_GetTick>
 80097a8:	4603      	mov	r3, r0
 80097aa:	4a18      	ldr	r2, [pc, #96]	; (800980c <Medha_EI_Analyser+0x658>)
 80097ac:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 80097ae:	4a18      	ldr	r2, [pc, #96]	; (8009810 <Medha_EI_Analyser+0x65c>)
 80097b0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097b4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097b8:	4610      	mov	r0, r2
 80097ba:	4619      	mov	r1, r3
 80097bc:	f44f 7392 	mov.w	r3, #292	; 0x124
 80097c0:	461a      	mov	r2, r3
 80097c2:	f018 fdbf 	bl	8022344 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 80097c6:	4b13      	ldr	r3, [pc, #76]	; (8009814 <Medha_EI_Analyser+0x660>)
 80097c8:	2201      	movs	r2, #1
 80097ca:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 80097cc:	4b10      	ldr	r3, [pc, #64]	; (8009810 <Medha_EI_Analyser+0x65c>)
 80097ce:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80097d2:	4a10      	ldr	r2, [pc, #64]	; (8009814 <Medha_EI_Analyser+0x660>)
 80097d4:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 80097d6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f950 	bl	8009a80 <Send_Medha_EI_Reply>


		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80097e6:	e028      	b.n	800983a <Medha_EI_Analyser+0x686>
 80097e8:	20000304 	.word	0x20000304
 80097ec:	080253c4 	.word	0x080253c4
 80097f0:	08025400 	.word	0x08025400
 80097f4:	20000305 	.word	0x20000305
 80097f8:	0802540c 	.word	0x0802540c
 80097fc:	08025230 	.word	0x08025230
 8009800:	08025458 	.word	0x08025458
 8009804:	0802547c 	.word	0x0802547c
 8009808:	08025490 	.word	0x08025490
 800980c:	200025fc 	.word	0x200025fc
 8009810:	200024a4 	.word	0x200024a4
 8009814:	2000260c 	.word	0x2000260c
		{
			//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
			Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009818:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800981c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009820:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009824:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8009828:	440a      	add	r2, r1
 800982a:	7d91      	ldrb	r1, [r2, #22]
 800982c:	4a7e      	ldr	r2, [pc, #504]	; (8009a28 <Medha_EI_Analyser+0x874>)
 800982e:	54d1      	strb	r1, [r2, r3]
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009830:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009834:	3301      	adds	r3, #1
 8009836:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800983a:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800983e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009842:	429a      	cmp	r2, r3
 8009844:	d3e8      	bcc.n	8009818 <Medha_EI_Analyser+0x664>
		}
		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009846:	4b79      	ldr	r3, [pc, #484]	; (8009a2c <Medha_EI_Analyser+0x878>)
 8009848:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800984c:	4a76      	ldr	r2, [pc, #472]	; (8009a28 <Medha_EI_Analyser+0x874>)
 800984e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 8009852:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009856:	461a      	mov	r2, r3
 8009858:	4973      	ldr	r1, [pc, #460]	; (8009a28 <Medha_EI_Analyser+0x874>)
 800985a:	4875      	ldr	r0, [pc, #468]	; (8009a30 <Medha_EI_Analyser+0x87c>)
 800985c:	f018 fd62 	bl	8022324 <memcmp>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d02c      	beq.n	80098c0 <Medha_EI_Analyser+0x70c>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009866:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800986a:	461a      	mov	r2, r3
 800986c:	496e      	ldr	r1, [pc, #440]	; (8009a28 <Medha_EI_Analyser+0x874>)
 800986e:	4870      	ldr	r0, [pc, #448]	; (8009a30 <Medha_EI_Analyser+0x87c>)
 8009870:	f018 fd68 	bl	8022344 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 8009874:	4b6c      	ldr	r3, [pc, #432]	; (8009a28 <Medha_EI_Analyser+0x874>)
 8009876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800987a:	4a6d      	ldr	r2, [pc, #436]	; (8009a30 <Medha_EI_Analyser+0x87c>)
 800987c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(Medha_Relay_Sts_st.Relay_Sts));
 8009880:	2230      	movs	r2, #48	; 0x30
 8009882:	2100      	movs	r1, #0
 8009884:	486b      	ldr	r0, [pc, #428]	; (8009a34 <Medha_EI_Analyser+0x880>)
 8009886:	f018 fd85 	bl	8022394 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800988a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800988e:	461a      	mov	r2, r3
 8009890:	4965      	ldr	r1, [pc, #404]	; (8009a28 <Medha_EI_Analyser+0x874>)
 8009892:	4868      	ldr	r0, [pc, #416]	; (8009a34 <Medha_EI_Analyser+0x880>)
 8009894:	f018 fd56 	bl	8022344 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009898:	f00b fe5a 	bl	8015550 <HAL_GetTick>
 800989c:	4603      	mov	r3, r0
 800989e:	4a66      	ldr	r2, [pc, #408]	; (8009a38 <Medha_EI_Analyser+0x884>)
 80098a0:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 80098a2:	4866      	ldr	r0, [pc, #408]	; (8009a3c <Medha_EI_Analyser+0x888>)
 80098a4:	f018 fefa 	bl	802269c <puts>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 80098a8:	f240 2002 	movw	r0, #514	; 0x202
 80098ac:	f005 fdea 	bl	800f484 <TransmitCanPkt>
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 80098b0:	4b63      	ldr	r3, [pc, #396]	; (8009a40 <Medha_EI_Analyser+0x88c>)
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d103      	bne.n	80098c0 <Medha_EI_Analyser+0x70c>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 80098b8:	f44f 7002 	mov.w	r0, #520	; 0x208
 80098bc:	f005 fde2 	bl	800f484 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 80098c0:	4860      	ldr	r0, [pc, #384]	; (8009a44 <Medha_EI_Analyser+0x890>)
 80098c2:	f018 feeb 	bl	802269c <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 80098c6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098ca:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098ce:	889b      	ldrh	r3, [r3, #4]
 80098d0:	4619      	mov	r1, r3
 80098d2:	485d      	ldr	r0, [pc, #372]	; (8009a48 <Medha_EI_Analyser+0x894>)
 80098d4:	f018 fe46 	bl	8022564 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 80098d8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098dc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098e0:	885b      	ldrh	r3, [r3, #2]
 80098e2:	4619      	mov	r1, r3
 80098e4:	4859      	ldr	r0, [pc, #356]	; (8009a4c <Medha_EI_Analyser+0x898>)
 80098e6:	f018 fe3d 	bl	8022564 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 80098ea:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098ee:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098f2:	799b      	ldrb	r3, [r3, #6]
 80098f4:	4619      	mov	r1, r3
 80098f6:	4856      	ldr	r0, [pc, #344]	; (8009a50 <Medha_EI_Analyser+0x89c>)
 80098f8:	f018 fe34 	bl	8022564 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 80098fc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009900:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009904:	79db      	ldrb	r3, [r3, #7]
 8009906:	4619      	mov	r1, r3
 8009908:	4852      	ldr	r0, [pc, #328]	; (8009a54 <Medha_EI_Analyser+0x8a0>)
 800990a:	f018 fe2b 	bl	8022564 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 800990e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009912:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009916:	891b      	ldrh	r3, [r3, #8]
 8009918:	4619      	mov	r1, r3
 800991a:	484f      	ldr	r0, [pc, #316]	; (8009a58 <Medha_EI_Analyser+0x8a4>)
 800991c:	f018 fe22 	bl	8022564 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 8009920:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009924:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009928:	7a9b      	ldrb	r3, [r3, #10]
 800992a:	4619      	mov	r1, r3
 800992c:	484b      	ldr	r0, [pc, #300]	; (8009a5c <Medha_EI_Analyser+0x8a8>)
 800992e:	f018 fe19 	bl	8022564 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 8009932:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009936:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800993a:	7b9b      	ldrb	r3, [r3, #14]
 800993c:	4618      	mov	r0, r3
 800993e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009942:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009946:	7b5b      	ldrb	r3, [r3, #13]
 8009948:	461c      	mov	r4, r3
 800994a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800994e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009952:	7b1b      	ldrb	r3, [r3, #12]
 8009954:	461d      	mov	r5, r3
 8009956:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800995a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800995e:	7bdb      	ldrb	r3, [r3, #15]
 8009960:	461a      	mov	r2, r3
 8009962:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009966:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800996a:	7c1b      	ldrb	r3, [r3, #16]
 800996c:	4619      	mov	r1, r3
 800996e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009972:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009976:	7c5b      	ldrb	r3, [r3, #17]
 8009978:	9302      	str	r3, [sp, #8]
 800997a:	9101      	str	r1, [sp, #4]
 800997c:	9200      	str	r2, [sp, #0]
 800997e:	462b      	mov	r3, r5
 8009980:	4622      	mov	r2, r4
 8009982:	4601      	mov	r1, r0
 8009984:	4836      	ldr	r0, [pc, #216]	; (8009a60 <Medha_EI_Analyser+0x8ac>)
 8009986:	f018 fded 	bl	8022564 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 800998a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800998e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009992:	7c9b      	ldrb	r3, [r3, #18]
 8009994:	4619      	mov	r1, r3
 8009996:	4833      	ldr	r0, [pc, #204]	; (8009a64 <Medha_EI_Analyser+0x8b0>)
 8009998:	f018 fde4 	bl	8022564 <iprintf>
		printf("RC:%5u\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800999c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099a0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099a4:	8a9b      	ldrh	r3, [r3, #20]
 80099a6:	4619      	mov	r1, r3
 80099a8:	482f      	ldr	r0, [pc, #188]	; (8009a68 <Medha_EI_Analyser+0x8b4>)
 80099aa:	f018 fddb 	bl	8022564 <iprintf>
		printf("SIGNAL DATA       :");
 80099ae:	482f      	ldr	r0, [pc, #188]	; (8009a6c <Medha_EI_Analyser+0x8b8>)
 80099b0:	f018 fdd8 	bl	8022564 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80099b4:	2300      	movs	r3, #0
 80099b6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80099ba:	e021      	b.n	8009a00 <Medha_EI_Analyser+0x84c>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 80099bc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d010      	beq.n	80099e6 <Medha_EI_Analyser+0x832>
 80099c4:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 80099c8:	4b29      	ldr	r3, [pc, #164]	; (8009a70 <Medha_EI_Analyser+0x8bc>)
 80099ca:	fba3 1302 	umull	r1, r3, r3, r2
 80099ce:	08d9      	lsrs	r1, r3, #3
 80099d0:	460b      	mov	r3, r1
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	440b      	add	r3, r1
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d102      	bne.n	80099e6 <Medha_EI_Analyser+0x832>
			{
				printf("\n                   ");
 80099e0:	4824      	ldr	r0, [pc, #144]	; (8009a74 <Medha_EI_Analyser+0x8c0>)
 80099e2:	f018 fdbf 	bl	8022564 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 80099e6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80099ea:	4a0f      	ldr	r2, [pc, #60]	; (8009a28 <Medha_EI_Analyser+0x874>)
 80099ec:	5cd3      	ldrb	r3, [r2, r3]
 80099ee:	4619      	mov	r1, r3
 80099f0:	4821      	ldr	r0, [pc, #132]	; (8009a78 <Medha_EI_Analyser+0x8c4>)
 80099f2:	f018 fdb7 	bl	8022564 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80099f6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80099fa:	3301      	adds	r3, #1
 80099fc:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009a00:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009a04:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d3d7      	bcc.n	80099bc <Medha_EI_Analyser+0x808>
		}
		printf("\n");
 8009a0c:	200a      	movs	r0, #10
 8009a0e:	f018 fdc1 	bl	8022594 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 8009a12:	481a      	ldr	r0, [pc, #104]	; (8009a7c <Medha_EI_Analyser+0x8c8>)
 8009a14:	f018 fe42 	bl	802269c <puts>
		return;
 8009a18:	e002      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
	}
	else
	{
		return;
 8009a1a:	bf00      	nop
 8009a1c:	e000      	b.n	8009a20 <Medha_EI_Analyser+0x86c>
				return;
 8009a1e:	bf00      	nop
	}
}
 8009a20:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bdb0      	pop	{r4, r5, r7, pc}
 8009a28:	20002624 	.word	0x20002624
 8009a2c:	200024a4 	.word	0x200024a4
 8009a30:	2000272c 	.word	0x2000272c
 8009a34:	200025ca 	.word	0x200025ca
 8009a38:	200025fc 	.word	0x200025fc
 8009a3c:	080254d0 	.word	0x080254d0
 8009a40:	20002614 	.word	0x20002614
 8009a44:	080254e8 	.word	0x080254e8
 8009a48:	08025510 	.word	0x08025510
 8009a4c:	08025518 	.word	0x08025518
 8009a50:	08025520 	.word	0x08025520
 8009a54:	0802552c 	.word	0x0802552c
 8009a58:	08025538 	.word	0x08025538
 8009a5c:	08025540 	.word	0x08025540
 8009a60:	08025548 	.word	0x08025548
 8009a64:	0802556c 	.word	0x0802556c
 8009a68:	08025578 	.word	0x08025578
 8009a6c:	08025580 	.word	0x08025580
 8009a70:	cccccccd 	.word	0xcccccccd
 8009a74:	08025594 	.word	0x08025594
 8009a78:	08025230 	.word	0x08025230
 8009a7c:	080255ac 	.word	0x080255ac

08009a80 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b0d2      	sub	sp, #328	; 0x148
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4602      	mov	r2, r0
 8009a88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009a8c:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009a90:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 8009a92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009a96:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f018 fc74 	bl	8022394 <memset>
	uint32_t Cal_Crc =0;
 8009aac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ab0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 8009abe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ac2:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 8009aca:	2300      	movs	r3, #0
 8009acc:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 8009ad0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ad4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009ad8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009adc:	2153      	movs	r1, #83	; 0x53
 8009ade:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009ae0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 8009aea:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009aee:	f107 0214 	add.w	r2, r7, #20
 8009af2:	4413      	add	r3, r2
 8009af4:	4a88      	ldr	r2, [pc, #544]	; (8009d18 <Send_Medha_EI_Reply+0x298>)
 8009af6:	8852      	ldrh	r2, [r2, #2]
 8009af8:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009afa:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009afe:	3302      	adds	r3, #2
 8009b00:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 8009b04:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b08:	f107 0214 	add.w	r2, r7, #20
 8009b0c:	4413      	add	r3, r2
 8009b0e:	4a82      	ldr	r2, [pc, #520]	; (8009d18 <Send_Medha_EI_Reply+0x298>)
 8009b10:	8892      	ldrh	r2, [r2, #4]
 8009b12:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009b14:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b18:	3302      	adds	r3, #2
 8009b1a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 8009b1e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b22:	f107 0214 	add.w	r2, r7, #20
 8009b26:	4413      	add	r3, r2
 8009b28:	4a7b      	ldr	r2, [pc, #492]	; (8009d18 <Send_Medha_EI_Reply+0x298>)
 8009b2a:	7992      	ldrb	r2, [r2, #6]
 8009b2c:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009b2e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b32:	3301      	adds	r3, #1
 8009b34:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 8009b38:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b3c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009b40:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009b44:	21e2      	movs	r1, #226	; 0xe2
 8009b46:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009b48:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 8009b52:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b56:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 8009b5a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b5e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009b62:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009b66:	2100      	movs	r1, #0
 8009b68:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 8009b6a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b6e:	3301      	adds	r3, #1
 8009b70:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009b74:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009b78:	2100      	movs	r1, #0
 8009b7a:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 8009b7c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b80:	3302      	adds	r3, #2
 8009b82:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 8009b86:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b8a:	f107 0214 	add.w	r2, r7, #20
 8009b8e:	4413      	add	r3, r2
 8009b90:	4a61      	ldr	r2, [pc, #388]	; (8009d18 <Send_Medha_EI_Reply+0x298>)
 8009b92:	7a92      	ldrb	r2, [r2, #10]
 8009b94:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009b96:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 8009ba0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ba4:	f107 0214 	add.w	r2, r7, #20
 8009ba8:	441a      	add	r2, r3
 8009baa:	4b5b      	ldr	r3, [pc, #364]	; (8009d18 <Send_Medha_EI_Reply+0x298>)
 8009bac:	330b      	adds	r3, #11
 8009bae:	6819      	ldr	r1, [r3, #0]
 8009bb0:	6011      	str	r1, [r2, #0]
 8009bb2:	8899      	ldrh	r1, [r3, #4]
 8009bb4:	799b      	ldrb	r3, [r3, #6]
 8009bb6:	8091      	strh	r1, [r2, #4]
 8009bb8:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 8009bba:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bbe:	3307      	adds	r3, #7
 8009bc0:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 8009bc4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bc8:	f107 0214 	add.w	r2, r7, #20
 8009bcc:	4413      	add	r3, r2
 8009bce:	4a52      	ldr	r2, [pc, #328]	; (8009d18 <Send_Medha_EI_Reply+0x298>)
 8009bd0:	8a92      	ldrh	r2, [r2, #20]
 8009bd2:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009bd4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bd8:	3302      	adds	r3, #2
 8009bda:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 8009bde:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009be2:	f107 0214 	add.w	r2, r7, #20
 8009be6:	18d0      	adds	r0, r2, r3
 8009be8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009bec:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	4949      	ldr	r1, [pc, #292]	; (8009d1c <Send_Medha_EI_Reply+0x29c>)
 8009bf6:	f018 fba5 	bl	8022344 <memcpy>
	BYTEINC(Outputs);
 8009bfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009bfe:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009c02:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 8009c0e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c12:	f107 0214 	add.w	r2, r7, #20
 8009c16:	18d0      	adds	r0, r2, r3
 8009c18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009c1c:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	493e      	ldr	r1, [pc, #248]	; (8009d20 <Send_Medha_EI_Reply+0x2a0>)
 8009c26:	f018 fb8d 	bl	8022344 <memcpy>
	BYTEINC(Outputs);
 8009c2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009c2e:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009c32:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 8009c3e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c42:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009c46:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 8009c4e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c52:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009c56:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 8009c5e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c62:	3302      	adds	r3, #2
 8009c64:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 8009c68:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3302      	adds	r3, #2
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009c7e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009c82:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 8009c84:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8009c88:	f107 0214 	add.w	r2, r7, #20
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009c92:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009c96:	8812      	ldrh	r2, [r2, #0]
 8009c98:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 8009c9a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009c9e:	f107 0314 	add.w	r3, r7, #20
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	f000 fe3b 	bl	800a920 <GetCRC32>
 8009caa:	4602      	mov	r2, r0
 8009cac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009cb0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009cb4:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 8009cb6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009cba:	f107 0214 	add.w	r2, r7, #20
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009cc4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8009cc8:	6812      	ldr	r2, [r2, #0]
 8009cca:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 8009ccc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8009cdc:	e011      	b.n	8009d02 <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 8009cde:	4b11      	ldr	r3, [pc, #68]	; (8009d24 <Send_Medha_EI_Reply+0x2a4>)
 8009ce0:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 8009ce4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8009ce8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009cec:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009cf0:	5cd3      	ldrb	r3, [r2, r3]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	f00b f9d4 	bl	80150a0 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 8009cf8:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8009d02:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8009d06:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d3e7      	bcc.n	8009cde <Send_Medha_EI_Reply+0x25e>
	}
	return;
 8009d0e:	bf00      	nop
}
 8009d10:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	200024a4 	.word	0x200024a4
 8009d1c:	200024ba 	.word	0x200024ba
 8009d20:	2000253a 	.word	0x2000253a
 8009d24:	20000304 	.word	0x20000304

08009d28 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 8009d2e:	4b2b      	ldr	r3, [pc, #172]	; (8009ddc <Send_Relay_Statuses_2_MIE+0xb4>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f004 fe2a 	bl	800e98c <HAL_Elaps_Ticks>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	4b29      	ldr	r3, [pc, #164]	; (8009de0 <Send_Relay_Statuses_2_MIE+0xb8>)
 8009d3c:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d346      	bcc.n	8009dd2 <Send_Relay_Statuses_2_MIE+0xaa>
	{
		uint16_t NoOfInputs = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 8009d48:	4b25      	ldr	r3, [pc, #148]	; (8009de0 <Send_Relay_Statuses_2_MIE+0xb8>)
 8009d4a:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <Send_Relay_Statuses_2_MIE+0x40>
 8009d58:	4b21      	ldr	r3, [pc, #132]	; (8009de0 <Send_Relay_Statuses_2_MIE+0xb8>)
 8009d5a:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009d5e:	08db      	lsrs	r3, r3, #3
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	3301      	adds	r3, #1
 8009d64:	80fb      	strh	r3, [r7, #6]
 8009d66:	e004      	b.n	8009d72 <Send_Relay_Statuses_2_MIE+0x4a>
 8009d68:	4b1d      	ldr	r3, [pc, #116]	; (8009de0 <Send_Relay_Statuses_2_MIE+0xb8>)
 8009d6a:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009d6e:	08db      	lsrs	r3, r3, #3
 8009d70:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009d72:	f00b fbed 	bl	8015550 <HAL_GetTick>
 8009d76:	4603      	mov	r3, r0
 8009d78:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <Send_Relay_Statuses_2_MIE+0xb4>)
 8009d7a:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 8009d7c:	4819      	ldr	r0, [pc, #100]	; (8009de4 <Send_Relay_Statuses_2_MIE+0xbc>)
 8009d7e:	f018 fc8d 	bl	802269c <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 8009d82:	2300      	movs	r3, #0
 8009d84:	603b      	str	r3, [r7, #0]
 8009d86:	e01d      	b.n	8009dc4 <Send_Relay_Statuses_2_MIE+0x9c>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00e      	beq.n	8009dac <Send_Relay_Statuses_2_MIE+0x84>
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	4b15      	ldr	r3, [pc, #84]	; (8009de8 <Send_Relay_Statuses_2_MIE+0xc0>)
 8009d92:	fba3 2301 	umull	r2, r3, r3, r1
 8009d96:	091a      	lsrs	r2, r3, #4
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	1aca      	subs	r2, r1, r3
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	d102      	bne.n	8009dac <Send_Relay_Statuses_2_MIE+0x84>
			{
				printf("\n");
 8009da6:	200a      	movs	r0, #10
 8009da8:	f018 fbf4 	bl	8022594 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 8009dac:	4a0f      	ldr	r2, [pc, #60]	; (8009dec <Send_Relay_Statuses_2_MIE+0xc4>)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	4413      	add	r3, r2
 8009db2:	3302      	adds	r3, #2
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	4619      	mov	r1, r3
 8009db8:	480d      	ldr	r0, [pc, #52]	; (8009df0 <Send_Relay_Statuses_2_MIE+0xc8>)
 8009dba:	f018 fbd3 	bl	8022564 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	603b      	str	r3, [r7, #0]
 8009dc4:	88fb      	ldrh	r3, [r7, #6]
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d3dd      	bcc.n	8009d88 <Send_Relay_Statuses_2_MIE+0x60>
		}
		printf("\n");
 8009dcc:	200a      	movs	r0, #10
 8009dce:	f018 fbe1 	bl	8022594 <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
#endif
	}
}
 8009dd2:	bf00      	nop
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	200025fc 	.word	0x200025fc
 8009de0:	20000304 	.word	0x20000304
 8009de4:	080255d4 	.word	0x080255d4
 8009de8:	cccccccd 	.word	0xcccccccd
 8009dec:	200025c8 	.word	0x200025c8
 8009df0:	08025230 	.word	0x08025230

08009df4 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 8009dfa:	4b61      	ldr	r3, [pc, #388]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f004 fdc4 	bl	800e98c <HAL_Elaps_Ticks>
 8009e04:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 8009e06:	4b5f      	ldr	r3, [pc, #380]	; (8009f84 <Process_Clear_Relays+0x190>)
 8009e08:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8009e0c:	4a5d      	ldr	r2, [pc, #372]	; (8009f84 <Process_Clear_Relays+0x190>)
 8009e0e:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 8009e12:	fb02 f303 	mul.w	r3, r2, r3
 8009e16:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009e18:	495b      	ldr	r1, [pc, #364]	; (8009f88 <Process_Clear_Relays+0x194>)
 8009e1a:	485c      	ldr	r0, [pc, #368]	; (8009f8c <Process_Clear_Relays+0x198>)
 8009e1c:	f7f6 fa10 	bl	8000240 <strcmp>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 80a7 	beq.w	8009f76 <Process_Clear_Relays+0x182>
	{
		return;
	}

	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d30c      	bcc.n	8009e4a <Process_Clear_Relays+0x56>
 8009e30:	4b53      	ldr	r3, [pc, #332]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	4b56      	ldr	r3, [pc, #344]	; (8009f90 <Process_Clear_Relays+0x19c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d006      	beq.n	8009e4a <Process_Clear_Relays+0x56>
 8009e3c:	4b55      	ldr	r3, [pc, #340]	; (8009f94 <Process_Clear_Relays+0x1a0>)
 8009e3e:	785a      	ldrb	r2, [r3, #1]
 8009e40:	4b50      	ldr	r3, [pc, #320]	; (8009f84 <Process_Clear_Relays+0x190>)
 8009e42:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d808      	bhi.n	8009e5c <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 8009e4a:	4b4d      	ldr	r3, [pc, #308]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d049      	beq.n	8009ee6 <Process_Clear_Relays+0xf2>
 8009e52:	4b51      	ldr	r3, [pc, #324]	; (8009f98 <Process_Clear_Relays+0x1a4>)
 8009e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d044      	beq.n	8009ee6 <Process_Clear_Relays+0xf2>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 8009e5c:	4b48      	ldr	r3, [pc, #288]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	4619      	mov	r1, r3
 8009e62:	484e      	ldr	r0, [pc, #312]	; (8009f9c <Process_Clear_Relays+0x1a8>)
 8009e64:	f018 fb7e 	bl	8022564 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 8009e68:	4b45      	ldr	r3, [pc, #276]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d006      	beq.n	8009e82 <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 8009e74:	4b42      	ldr	r3, [pc, #264]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f023 0301 	bic.w	r3, r3, #1
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	4b40      	ldr	r3, [pc, #256]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009e80:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 8009e82:	4b3f      	ldr	r3, [pc, #252]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	f003 0302 	and.w	r3, r3, #2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d006      	beq.n	8009e9c <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 8009e8e:	4b3c      	ldr	r3, [pc, #240]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	f023 0302 	bic.w	r3, r3, #2
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	4b39      	ldr	r3, [pc, #228]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009e9a:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 8009e9c:	2284      	movs	r2, #132	; 0x84
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	483d      	ldr	r0, [pc, #244]	; (8009f98 <Process_Clear_Relays+0x1a4>)
 8009ea2:	f018 fa77 	bl	8022394 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 8009ea6:	2232      	movs	r2, #50	; 0x32
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	483d      	ldr	r0, [pc, #244]	; (8009fa0 <Process_Clear_Relays+0x1ac>)
 8009eac:	f018 fa72 	bl	8022394 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 8009eb0:	2284      	movs	r2, #132	; 0x84
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	483b      	ldr	r0, [pc, #236]	; (8009fa4 <Process_Clear_Relays+0x1b0>)
 8009eb6:	f018 fa6d 	bl	8022394 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009eba:	2208      	movs	r2, #8
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	483a      	ldr	r0, [pc, #232]	; (8009fa8 <Process_Clear_Relays+0x1b4>)
 8009ec0:	f018 fa68 	bl	8022394 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009ec4:	2208      	movs	r2, #8
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	4832      	ldr	r0, [pc, #200]	; (8009f94 <Process_Clear_Relays+0x1a0>)
 8009eca:	f018 fa63 	bl	8022394 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009ece:	2208      	movs	r2, #8
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4836      	ldr	r0, [pc, #216]	; (8009fac <Process_Clear_Relays+0x1b8>)
 8009ed4:	f018 fa5e 	bl	8022394 <memset>
		printf("Cleared Relay Statuses\n");
 8009ed8:	4835      	ldr	r0, [pc, #212]	; (8009fb0 <Process_Clear_Relays+0x1bc>)
 8009eda:	f018 fbdf 	bl	802269c <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 8009ede:	4b28      	ldr	r3, [pc, #160]	; (8009f80 <Process_Clear_Relays+0x18c>)
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	4a2b      	ldr	r2, [pc, #172]	; (8009f90 <Process_Clear_Relays+0x19c>)
 8009ee4:	6013      	str	r3, [r2, #0]
	}


	if((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > (EI_data.Medha_Prms_st.CAN_Xchange_Tout)) && (Medha_CAN_Xchanging_Happening == SET))
 8009ee6:	4b33      	ldr	r3, [pc, #204]	; (8009fb4 <Process_Clear_Relays+0x1c0>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f004 fd4e 	bl	800e98c <HAL_Elaps_Ticks>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	4b24      	ldr	r3, [pc, #144]	; (8009f84 <Process_Clear_Relays+0x190>)
 8009ef4:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d92a      	bls.n	8009f52 <Process_Clear_Relays+0x15e>
 8009efc:	4b2e      	ldr	r3, [pc, #184]	; (8009fb8 <Process_Clear_Relays+0x1c4>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d126      	bne.n	8009f52 <Process_Clear_Relays+0x15e>
	{
		printf("CAN Exchanging not Happening\n");
 8009f04:	482d      	ldr	r0, [pc, #180]	; (8009fbc <Process_Clear_Relays+0x1c8>)
 8009f06:	f018 fbc9 	bl	802269c <puts>
		Medha_CAN_Xchanging_Happening = RESET;
 8009f0a:	4b2b      	ldr	r3, [pc, #172]	; (8009fb8 <Process_Clear_Relays+0x1c4>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	701a      	strb	r2, [r3, #0]
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 8009f10:	2284      	movs	r2, #132	; 0x84
 8009f12:	2100      	movs	r1, #0
 8009f14:	4820      	ldr	r0, [pc, #128]	; (8009f98 <Process_Clear_Relays+0x1a4>)
 8009f16:	f018 fa3d 	bl	8022394 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 8009f1a:	2232      	movs	r2, #50	; 0x32
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	4820      	ldr	r0, [pc, #128]	; (8009fa0 <Process_Clear_Relays+0x1ac>)
 8009f20:	f018 fa38 	bl	8022394 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 8009f24:	2284      	movs	r2, #132	; 0x84
 8009f26:	2100      	movs	r1, #0
 8009f28:	481e      	ldr	r0, [pc, #120]	; (8009fa4 <Process_Clear_Relays+0x1b0>)
 8009f2a:	f018 fa33 	bl	8022394 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009f2e:	2208      	movs	r2, #8
 8009f30:	2100      	movs	r1, #0
 8009f32:	481d      	ldr	r0, [pc, #116]	; (8009fa8 <Process_Clear_Relays+0x1b4>)
 8009f34:	f018 fa2e 	bl	8022394 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009f38:	2208      	movs	r2, #8
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4815      	ldr	r0, [pc, #84]	; (8009f94 <Process_Clear_Relays+0x1a0>)
 8009f3e:	f018 fa29 	bl	8022394 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009f42:	2208      	movs	r2, #8
 8009f44:	2100      	movs	r1, #0
 8009f46:	4819      	ldr	r0, [pc, #100]	; (8009fac <Process_Clear_Relays+0x1b8>)
 8009f48:	f018 fa24 	bl	8022394 <memset>
		printf("Cleared Relay Statuses\n");
 8009f4c:	4818      	ldr	r0, [pc, #96]	; (8009fb0 <Process_Clear_Relays+0x1bc>)
 8009f4e:	f018 fba5 	bl	802269c <puts>
	}


	if( ((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) < (EI_data.Medha_Prms_st.CAN_Xchange_Tout))) && (Medha_CAN_Xchanging_Happening == SET))
 8009f52:	4b18      	ldr	r3, [pc, #96]	; (8009fb4 <Process_Clear_Relays+0x1c0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f004 fd18 	bl	800e98c <HAL_Elaps_Ticks>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <Process_Clear_Relays+0x190>)
 8009f60:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d207      	bcs.n	8009f78 <Process_Clear_Relays+0x184>
 8009f68:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <Process_Clear_Relays+0x1c4>)
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d103      	bne.n	8009f78 <Process_Clear_Relays+0x184>
	{
		Blink_S2();
 8009f70:	f009 f9c6 	bl	8013300 <Blink_S2>
 8009f74:	e000      	b.n	8009f78 <Process_Clear_Relays+0x184>
		return;
 8009f76:	bf00      	nop
	}


}
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	200025fc 	.word	0x200025fc
 8009f84:	20000304 	.word	0x20000304
 8009f88:	08025400 	.word	0x08025400
 8009f8c:	20000305 	.word	0x20000305
 8009f90:	200027bc 	.word	0x200027bc
 8009f94:	20002614 	.word	0x20002614
 8009f98:	20002624 	.word	0x20002624
 8009f9c:	080255e8 	.word	0x080255e8
 8009fa0:	200025c8 	.word	0x200025c8
 8009fa4:	2000272c 	.word	0x2000272c
 8009fa8:	2000260c 	.word	0x2000260c
 8009fac:	2000261c 	.word	0x2000261c
 8009fb0:	08025618 	.word	0x08025618
 8009fb4:	200020b4 	.word	0x200020b4
 8009fb8:	200020b0 	.word	0x200020b0
 8009fbc:	08025630 	.word	0x08025630

08009fc0 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 8009fc4:	4b26      	ldr	r3, [pc, #152]	; (800a060 <Send_Data_to_Other+0xa0>)
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f004 fcdf 	bl	800e98c <HAL_Elaps_Ticks>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	4b24      	ldr	r3, [pc, #144]	; (800a064 <Send_Data_to_Other+0xa4>)
 8009fd2:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8009fd6:	4923      	ldr	r1, [pc, #140]	; (800a064 <Send_Data_to_Other+0xa4>)
 8009fd8:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 8009fdc:	fb01 f303 	mul.w	r3, r1, r3
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d306      	bcc.n	8009ff2 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 8009fe4:	4b20      	ldr	r3, [pc, #128]	; (800a068 <Send_Data_to_Other+0xa8>)
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 8009fec:	4b1e      	ldr	r3, [pc, #120]	; (800a068 <Send_Data_to_Other+0xa8>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 8009ff2:	4b1b      	ldr	r3, [pc, #108]	; (800a060 <Send_Data_to_Other+0xa0>)
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f004 fcc8 	bl	800e98c <HAL_Elaps_Ticks>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	4b19      	ldr	r3, [pc, #100]	; (800a064 <Send_Data_to_Other+0xa4>)
 800a000:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a004:	429a      	cmp	r2, r3
 800a006:	d90e      	bls.n	800a026 <Send_Data_to_Other+0x66>
 800a008:	4b15      	ldr	r3, [pc, #84]	; (800a060 <Send_Data_to_Other+0xa0>)
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	4b17      	ldr	r3, [pc, #92]	; (800a06c <Send_Data_to_Other+0xac>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d008      	beq.n	800a026 <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a014:	4b12      	ldr	r3, [pc, #72]	; (800a060 <Send_Data_to_Other+0xa0>)
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	4a14      	ldr	r2, [pc, #80]	; (800a06c <Send_Data_to_Other+0xac>)
 800a01a:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 800a01c:	f240 2002 	movw	r0, #514	; 0x202
 800a020:	f005 fa30 	bl	800f484 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800a024:	e01a      	b.n	800a05c <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800a026:	4b12      	ldr	r3, [pc, #72]	; (800a070 <Send_Data_to_Other+0xb0>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f004 fcae 	bl	800e98c <HAL_Elaps_Ticks>
 800a030:	4603      	mov	r3, r0
 800a032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a036:	d911      	bls.n	800a05c <Send_Data_to_Other+0x9c>
 800a038:	4b09      	ldr	r3, [pc, #36]	; (800a060 <Send_Data_to_Other+0xa0>)
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f004 fca5 	bl	800e98c <HAL_Elaps_Ticks>
 800a042:	4603      	mov	r3, r0
 800a044:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a048:	d908      	bls.n	800a05c <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800a04a:	f00b fa81 	bl	8015550 <HAL_GetTick>
 800a04e:	4603      	mov	r3, r0
 800a050:	4a07      	ldr	r2, [pc, #28]	; (800a070 <Send_Data_to_Other+0xb0>)
 800a052:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_2_SELF_SHARING);
 800a054:	f240 2002 	movw	r0, #514	; 0x202
 800a058:	f005 fa14 	bl	800f484 <TransmitCanPkt>
}
 800a05c:	bf00      	nop
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	200025fc 	.word	0x200025fc
 800a064:	20000304 	.word	0x20000304
 800a068:	2000260c 	.word	0x2000260c
 800a06c:	200027c0 	.word	0x200027c0
 800a070:	200027c4 	.word	0x200027c4

0800a074 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800a074:	b5b0      	push	{r4, r5, r7, lr}
 800a076:	af00      	add	r7, sp, #0
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800a078:	4b95      	ldr	r3, [pc, #596]	; (800a2d0 <Process_Data_from_Other+0x25c>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	4b95      	ldr	r3, [pc, #596]	; (800a2d4 <Process_Data_from_Other+0x260>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	429a      	cmp	r2, r3
 800a082:	d109      	bne.n	800a098 <Process_Data_from_Other+0x24>
 800a084:	4b92      	ldr	r3, [pc, #584]	; (800a2d0 <Process_Data_from_Other+0x25c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4618      	mov	r0, r3
 800a08a:	f004 fc7f 	bl	800e98c <HAL_Elaps_Ticks>
 800a08e:	4603      	mov	r3, r0
 800a090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a094:	f0c0 80e4 	bcc.w	800a260 <Process_Data_from_Other+0x1ec>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800a098:	f00b fa5a 	bl	8015550 <HAL_GetTick>
 800a09c:	4603      	mov	r3, r0
 800a09e:	4a8c      	ldr	r2, [pc, #560]	; (800a2d0 <Process_Data_from_Other+0x25c>)
 800a0a0:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800a0a2:	4b8d      	ldr	r3, [pc, #564]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d007      	beq.n	800a0ba <Process_Data_from_Other+0x46>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800a0aa:	4b8c      	ldr	r3, [pc, #560]	; (800a2dc <Process_Data_from_Other+0x268>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f043 0301 	orr.w	r3, r3, #1
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	4b89      	ldr	r3, [pc, #548]	; (800a2dc <Process_Data_from_Other+0x268>)
 800a0b6:	701a      	strb	r2, [r3, #0]
 800a0b8:	e006      	b.n	800a0c8 <Process_Data_from_Other+0x54>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800a0ba:	4b88      	ldr	r3, [pc, #544]	; (800a2dc <Process_Data_from_Other+0x268>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	f023 0301 	bic.w	r3, r3, #1
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	4b85      	ldr	r3, [pc, #532]	; (800a2dc <Process_Data_from_Other+0x268>)
 800a0c6:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800a0c8:	4b85      	ldr	r3, [pc, #532]	; (800a2e0 <Process_Data_from_Other+0x26c>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d007      	beq.n	800a0e0 <Process_Data_from_Other+0x6c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800a0d0:	4b82      	ldr	r3, [pc, #520]	; (800a2dc <Process_Data_from_Other+0x268>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	f043 0302 	orr.w	r3, r3, #2
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	4b80      	ldr	r3, [pc, #512]	; (800a2dc <Process_Data_from_Other+0x268>)
 800a0dc:	701a      	strb	r2, [r3, #0]
 800a0de:	e006      	b.n	800a0ee <Process_Data_from_Other+0x7a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800a0e0:	4b7e      	ldr	r3, [pc, #504]	; (800a2dc <Process_Data_from_Other+0x268>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	f023 0302 	bic.w	r3, r3, #2
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	4b7c      	ldr	r3, [pc, #496]	; (800a2dc <Process_Data_from_Other+0x268>)
 800a0ec:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800a0ee:	4b7b      	ldr	r3, [pc, #492]	; (800a2dc <Process_Data_from_Other+0x268>)
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	f200 809a 	bhi.w	800a22c <Process_Data_from_Other+0x1b8>
 800a0f8:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <Process_Data_from_Other+0x8c>)
 800a0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fe:	bf00      	nop
 800a100:	0800a111 	.word	0x0800a111
 800a104:	0800a1a1 	.word	0x0800a1a1
 800a108:	0800a11f 	.word	0x0800a11f
 800a10c:	0800a1f1 	.word	0x0800a1f1
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a110:	4b71      	ldr	r3, [pc, #452]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a112:	785b      	ldrb	r3, [r3, #1]
 800a114:	3301      	adds	r3, #1
 800a116:	b2da      	uxtb	r2, r3
 800a118:	4b6f      	ldr	r3, [pc, #444]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a11a:	705a      	strb	r2, [r3, #1]
			break;
 800a11c:	e086      	b.n	800a22c <Process_Data_from_Other+0x1b8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a11e:	4b70      	ldr	r3, [pc, #448]	; (800a2e0 <Process_Data_from_Other+0x26c>)
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	4b6d      	ldr	r3, [pc, #436]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	429a      	cmp	r2, r3
 800a128:	d02f      	beq.n	800a18a <Process_Data_from_Other+0x116>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800a12a:	4b6e      	ldr	r3, [pc, #440]	; (800a2e4 <Process_Data_from_Other+0x270>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d179      	bne.n	800a226 <Process_Data_from_Other+0x1b2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800a132:	4b69      	ldr	r3, [pc, #420]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	4619      	mov	r1, r3
 800a138:	486b      	ldr	r0, [pc, #428]	; (800a2e8 <Process_Data_from_Other+0x274>)
 800a13a:	f018 fa13 	bl	8022564 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800a13e:	4b68      	ldr	r3, [pc, #416]	; (800a2e0 <Process_Data_from_Other+0x26c>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	4619      	mov	r1, r3
 800a144:	4869      	ldr	r0, [pc, #420]	; (800a2ec <Process_Data_from_Other+0x278>)
 800a146:	f018 fa0d 	bl	8022564 <iprintf>
					Received_CAN_Relay_Status=NO;
 800a14a:	4b66      	ldr	r3, [pc, #408]	; (800a2e4 <Process_Data_from_Other+0x270>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800a150:	4867      	ldr	r0, [pc, #412]	; (800a2f0 <Process_Data_from_Other+0x27c>)
 800a152:	f018 faa3 	bl	802269c <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a156:	4a67      	ldr	r2, [pc, #412]	; (800a2f4 <Process_Data_from_Other+0x280>)
 800a158:	4b67      	ldr	r3, [pc, #412]	; (800a2f8 <Process_Data_from_Other+0x284>)
 800a15a:	4610      	mov	r0, r2
 800a15c:	4619      	mov	r1, r3
 800a15e:	2384      	movs	r3, #132	; 0x84
 800a160:	461a      	mov	r2, r3
 800a162:	f018 f8ef 	bl	8022344 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800a166:	4a65      	ldr	r2, [pc, #404]	; (800a2fc <Process_Data_from_Other+0x288>)
 800a168:	4b62      	ldr	r3, [pc, #392]	; (800a2f4 <Process_Data_from_Other+0x280>)
 800a16a:	4614      	mov	r4, r2
 800a16c:	461d      	mov	r5, r3
 800a16e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	8023      	strh	r3, [r4, #0]
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800a17e:	4b5d      	ldr	r3, [pc, #372]	; (800a2f4 <Process_Data_from_Other+0x280>)
 800a180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a184:	4a54      	ldr	r2, [pc, #336]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a186:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800a188:	e04d      	b.n	800a226 <Process_Data_from_Other+0x1b2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a18a:	4b53      	ldr	r3, [pc, #332]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a190:	4b5b      	ldr	r3, [pc, #364]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f023 0301 	bic.w	r3, r3, #1
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	4b59      	ldr	r3, [pc, #356]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a19c:	701a      	strb	r2, [r3, #0]
			break;
 800a19e:	e042      	b.n	800a226 <Process_Data_from_Other+0x1b2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a1a0:	4b4f      	ldr	r3, [pc, #316]	; (800a2e0 <Process_Data_from_Other+0x26c>)
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	4b4c      	ldr	r3, [pc, #304]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d016      	beq.n	800a1da <Process_Data_from_Other+0x166>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a1ac:	4855      	ldr	r0, [pc, #340]	; (800a304 <Process_Data_from_Other+0x290>)
 800a1ae:	f018 fa75 	bl	802269c <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a1b2:	4b49      	ldr	r3, [pc, #292]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a1b4:	785b      	ldrb	r3, [r3, #1]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	4b47      	ldr	r3, [pc, #284]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a1bc:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800a1be:	4b46      	ldr	r3, [pc, #280]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a1c0:	785b      	ldrb	r3, [r3, #1]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d931      	bls.n	800a22a <Process_Data_from_Other+0x1b6>
 800a1c6:	4b4b      	ldr	r3, [pc, #300]	; (800a2f4 <Process_Data_from_Other+0x280>)
 800a1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d02c      	beq.n	800a22a <Process_Data_from_Other+0x1b6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
					TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800a1d0:	f44f 7002 	mov.w	r0, #520	; 0x208
 800a1d4:	f005 f956 	bl	800f484 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a1d8:	e027      	b.n	800a22a <Process_Data_from_Other+0x1b6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a1da:	4b49      	ldr	r3, [pc, #292]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	f023 0301 	bic.w	r3, r3, #1
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	4b46      	ldr	r3, [pc, #280]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a1e6:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a1e8:	4b3b      	ldr	r3, [pc, #236]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	705a      	strb	r2, [r3, #1]
			break;
 800a1ee:	e01c      	b.n	800a22a <Process_Data_from_Other+0x1b6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a1f0:	4b3b      	ldr	r3, [pc, #236]	; (800a2e0 <Process_Data_from_Other+0x26c>)
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	4b38      	ldr	r3, [pc, #224]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d009      	beq.n	800a210 <Process_Data_from_Other+0x19c>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a1fc:	4841      	ldr	r0, [pc, #260]	; (800a304 <Process_Data_from_Other+0x290>)
 800a1fe:	f018 fa4d 	bl	802269c <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a202:	4b35      	ldr	r3, [pc, #212]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	3301      	adds	r3, #1
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	4b33      	ldr	r3, [pc, #204]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a20c:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a20e:	e00d      	b.n	800a22c <Process_Data_from_Other+0x1b8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a210:	4b3b      	ldr	r3, [pc, #236]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	f023 0301 	bic.w	r3, r3, #1
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	4b39      	ldr	r3, [pc, #228]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a21c:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a21e:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a220:	2200      	movs	r2, #0
 800a222:	705a      	strb	r2, [r3, #1]
			break;
 800a224:	e002      	b.n	800a22c <Process_Data_from_Other+0x1b8>
			break;
 800a226:	bf00      	nop
 800a228:	e000      	b.n	800a22c <Process_Data_from_Other+0x1b8>
			break;
 800a22a:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800a22c:	4b2a      	ldr	r3, [pc, #168]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a22e:	785a      	ldrb	r2, [r3, #1]
 800a230:	4b35      	ldr	r3, [pc, #212]	; (800a308 <Process_Data_from_Other+0x294>)
 800a232:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a236:	429a      	cmp	r2, r3
 800a238:	d312      	bcc.n	800a260 <Process_Data_from_Other+0x1ec>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a23a:	4b31      	ldr	r3, [pc, #196]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10c      	bne.n	800a260 <Process_Data_from_Other+0x1ec>
			{
				printf("MisMatch Count Reached\n");
 800a246:	4831      	ldr	r0, [pc, #196]	; (800a30c <Process_Data_from_Other+0x298>)
 800a248:	f018 fa28 	bl	802269c <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a24c:	4b22      	ldr	r3, [pc, #136]	; (800a2d8 <Process_Data_from_Other+0x264>)
 800a24e:	2200      	movs	r2, #0
 800a250:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a252:	4b2b      	ldr	r3, [pc, #172]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	f043 0301 	orr.w	r3, r3, #1
 800a25a:	b2da      	uxtb	r2, r3
 800a25c:	4b28      	ldr	r3, [pc, #160]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a25e:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800a260:	4b1c      	ldr	r3, [pc, #112]	; (800a2d4 <Process_Data_from_Other+0x260>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4618      	mov	r0, r3
 800a266:	f004 fb91 	bl	800e98c <HAL_Elaps_Ticks>
 800a26a:	4602      	mov	r2, r0
 800a26c:	4b26      	ldr	r3, [pc, #152]	; (800a308 <Process_Data_from_Other+0x294>)
 800a26e:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a272:	429a      	cmp	r2, r3
 800a274:	d92a      	bls.n	800a2cc <Process_Data_from_Other+0x258>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800a276:	4b26      	ldr	r3, [pc, #152]	; (800a310 <Process_Data_from_Other+0x29c>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	4b16      	ldr	r3, [pc, #88]	; (800a2d4 <Process_Data_from_Other+0x260>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d024      	beq.n	800a2cc <Process_Data_from_Other+0x258>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800a282:	4b14      	ldr	r3, [pc, #80]	; (800a2d4 <Process_Data_from_Other+0x260>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a22      	ldr	r2, [pc, #136]	; (800a310 <Process_Data_from_Other+0x29c>)
 800a288:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800a28a:	4b12      	ldr	r3, [pc, #72]	; (800a2d4 <Process_Data_from_Other+0x260>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4618      	mov	r0, r3
 800a290:	f004 fb7c 	bl	800e98c <HAL_Elaps_Ticks>
 800a294:	4603      	mov	r3, r0
 800a296:	4a1f      	ldr	r2, [pc, #124]	; (800a314 <Process_Data_from_Other+0x2a0>)
 800a298:	fba2 2303 	umull	r2, r3, r2, r3
 800a29c:	099b      	lsrs	r3, r3, #6
 800a29e:	4619      	mov	r1, r3
 800a2a0:	481d      	ldr	r0, [pc, #116]	; (800a318 <Process_Data_from_Other+0x2a4>)
 800a2a2:	f018 f95f 	bl	8022564 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <Process_Data_from_Other+0x260>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	481b      	ldr	r0, [pc, #108]	; (800a31c <Process_Data_from_Other+0x2a8>)
 800a2ae:	f018 f959 	bl	8022564 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a2b2:	4b13      	ldr	r3, [pc, #76]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	f003 0302 	and.w	r3, r3, #2
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d106      	bne.n	800a2cc <Process_Data_from_Other+0x258>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a2be:	4b10      	ldr	r3, [pc, #64]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	f043 0302 	orr.w	r3, r3, #2
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <Process_Data_from_Other+0x28c>)
 800a2ca:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800a2cc:	bf00      	nop
 800a2ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a2d0:	200027c8 	.word	0x200027c8
 800a2d4:	200020b4 	.word	0x200020b4
 800a2d8:	2000260c 	.word	0x2000260c
 800a2dc:	200020b2 	.word	0x200020b2
 800a2e0:	20002614 	.word	0x20002614
 800a2e4:	200020b1 	.word	0x200020b1
 800a2e8:	08025650 	.word	0x08025650
 800a2ec:	08025668 	.word	0x08025668
 800a2f0:	08025680 	.word	0x08025680
 800a2f4:	20002624 	.word	0x20002624
 800a2f8:	200026a8 	.word	0x200026a8
 800a2fc:	200025c8 	.word	0x200025c8
 800a300:	200025fc 	.word	0x200025fc
 800a304:	080256b4 	.word	0x080256b4
 800a308:	20000304 	.word	0x20000304
 800a30c:	080256d8 	.word	0x080256d8
 800a310:	200027cc 	.word	0x200027cc
 800a314:	10624dd3 	.word	0x10624dd3
 800a318:	080256f0 	.word	0x080256f0
 800a31c:	08025720 	.word	0x08025720

0800a320 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800a324:	482a      	ldr	r0, [pc, #168]	; (800a3d0 <Print_Medha_Self_Details+0xb0>)
 800a326:	f018 f9b9 	bl	802269c <puts>
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800a32a:	4b2a      	ldr	r3, [pc, #168]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a32c:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a330:	4619      	mov	r1, r3
 800a332:	4829      	ldr	r0, [pc, #164]	; (800a3d8 <Print_Medha_Self_Details+0xb8>)
 800a334:	f018 f916 	bl	8022564 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800a338:	4b26      	ldr	r3, [pc, #152]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a33a:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a33e:	4619      	mov	r1, r3
 800a340:	4826      	ldr	r0, [pc, #152]	; (800a3dc <Print_Medha_Self_Details+0xbc>)
 800a342:	f018 f90f 	bl	8022564 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800a346:	4b23      	ldr	r3, [pc, #140]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a348:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a34c:	4619      	mov	r1, r3
 800a34e:	4824      	ldr	r0, [pc, #144]	; (800a3e0 <Print_Medha_Self_Details+0xc0>)
 800a350:	f018 f908 	bl	8022564 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800a354:	4b1f      	ldr	r3, [pc, #124]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a356:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800a35a:	4619      	mov	r1, r3
 800a35c:	4821      	ldr	r0, [pc, #132]	; (800a3e4 <Print_Medha_Self_Details+0xc4>)
 800a35e:	f018 f901 	bl	8022564 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800a362:	4b1c      	ldr	r3, [pc, #112]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a364:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a368:	4619      	mov	r1, r3
 800a36a:	481f      	ldr	r0, [pc, #124]	; (800a3e8 <Print_Medha_Self_Details+0xc8>)
 800a36c:	f018 f8fa 	bl	8022564 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800a370:	4b18      	ldr	r3, [pc, #96]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a372:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a376:	4619      	mov	r1, r3
 800a378:	481c      	ldr	r0, [pc, #112]	; (800a3ec <Print_Medha_Self_Details+0xcc>)
 800a37a:	f018 f8f3 	bl	8022564 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800a37e:	4b15      	ldr	r3, [pc, #84]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a380:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a384:	4619      	mov	r1, r3
 800a386:	481a      	ldr	r0, [pc, #104]	; (800a3f0 <Print_Medha_Self_Details+0xd0>)
 800a388:	f018 f8ec 	bl	8022564 <iprintf>
	printf("NoofRelays                    :%u\n",EI_data.Medha_Prms_st.NoofRelays);
 800a38c:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a38e:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a392:	4619      	mov	r1, r3
 800a394:	4817      	ldr	r0, [pc, #92]	; (800a3f4 <Print_Medha_Self_Details+0xd4>)
 800a396:	f018 f8e5 	bl	8022564 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800a39a:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a39c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4815      	ldr	r0, [pc, #84]	; (800a3f8 <Print_Medha_Self_Details+0xd8>)
 800a3a4:	f018 f8de 	bl	8022564 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a3a8:	4b0a      	ldr	r3, [pc, #40]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a3aa:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4812      	ldr	r0, [pc, #72]	; (800a3fc <Print_Medha_Self_Details+0xdc>)
 800a3b2:	f018 f8d7 	bl	8022564 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800a3b6:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <Print_Medha_Self_Details+0xb4>)
 800a3b8:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4810      	ldr	r0, [pc, #64]	; (800a400 <Print_Medha_Self_Details+0xe0>)
 800a3c0:	f018 f8d0 	bl	8022564 <iprintf>

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800a3c4:	4802      	ldr	r0, [pc, #8]	; (800a3d0 <Print_Medha_Self_Details+0xb0>)
 800a3c6:	f018 f969 	bl	802269c <puts>
#endif
}
 800a3ca:	bf00      	nop
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	08025748 	.word	0x08025748
 800a3d4:	20000304 	.word	0x20000304
 800a3d8:	0802579c 	.word	0x0802579c
 800a3dc:	080257c0 	.word	0x080257c0
 800a3e0:	080257e4 	.word	0x080257e4
 800a3e4:	08025808 	.word	0x08025808
 800a3e8:	0802582c 	.word	0x0802582c
 800a3ec:	08025850 	.word	0x08025850
 800a3f0:	08025874 	.word	0x08025874
 800a3f4:	08025898 	.word	0x08025898
 800a3f8:	080258bc 	.word	0x080258bc
 800a3fc:	080258e0 	.word	0x080258e0
 800a400:	08025904 	.word	0x08025904

0800a404 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b09a      	sub	sp, #104	; 0x68
 800a408:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800a40a:	2300      	movs	r3, #0
 800a40c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800a41c:	2300      	movs	r3, #0
 800a41e:	603b      	str	r3, [r7, #0]
 800a420:	1d3b      	adds	r3, r7, #4
 800a422:	2260      	movs	r2, #96	; 0x60
 800a424:	2100      	movs	r1, #0
 800a426:	4618      	mov	r0, r3
 800a428:	f017 ffb4 	bl	8022394 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800a42c:	4bb9      	ldr	r3, [pc, #740]	; (800a714 <CheckforMedhaCMD+0x310>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4618      	mov	r0, r3
 800a432:	f004 faab 	bl	800e98c <HAL_Elaps_Ticks>
 800a436:	4603      	mov	r3, r0
 800a438:	2b09      	cmp	r3, #9
 800a43a:	f240 81ad 	bls.w	800a798 <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800a43e:	e010      	b.n	800a462 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800a440:	2000      	movs	r0, #0
 800a442:	f00a fd5d 	bl	8014f00 <Com_Get_Byte>
 800a446:	4603      	mov	r3, r0
 800a448:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800a44c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a450:	1c5a      	adds	r2, r3, #1
 800a452:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800a456:	3368      	adds	r3, #104	; 0x68
 800a458:	443b      	add	r3, r7
 800a45a:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800a45e:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800a462:	2000      	movs	r0, #0
 800a464:	f00a fd0c 	bl	8014e80 <Com_DataReady>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e8      	bne.n	800a440 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800a46e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 8144 	beq.w	800a700 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800a478:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a47c:	3368      	adds	r3, #104	; 0x68
 800a47e:	443b      	add	r3, r7
 800a480:	2200      	movs	r2, #0
 800a482:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800a486:	463b      	mov	r3, r7
 800a488:	4619      	mov	r1, r3
 800a48a:	48a3      	ldr	r0, [pc, #652]	; (800a718 <CheckforMedhaCMD+0x314>)
 800a48c:	f018 f86a 	bl	8022564 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800a490:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800a494:	463b      	mov	r3, r7
 800a496:	4611      	mov	r1, r2
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 fa0d 	bl	800a8b8 <Is_MedhaCommand_Valid>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b0c      	cmp	r3, #12
 800a4a2:	f200 8129 	bhi.w	800a6f8 <CheckforMedhaCMD+0x2f4>
 800a4a6:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <CheckforMedhaCMD+0xa8>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a4e1 	.word	0x0800a4e1
 800a4b0:	0800a4ef 	.word	0x0800a4ef
 800a4b4:	0800a553 	.word	0x0800a553
 800a4b8:	0800a575 	.word	0x0800a575
 800a4bc:	0800a59d 	.word	0x0800a59d
 800a4c0:	0800a5c5 	.word	0x0800a5c5
 800a4c4:	0800a5ed 	.word	0x0800a5ed
 800a4c8:	0800a615 	.word	0x0800a615
 800a4cc:	0800a63d 	.word	0x0800a63d
 800a4d0:	0800a665 	.word	0x0800a665
 800a4d4:	0800a68d 	.word	0x0800a68d
 800a4d8:	0800a6b5 	.word	0x0800a6b5
 800a4dc:	0800a6dd 	.word	0x0800a6dd
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800a4e0:	4b8e      	ldr	r3, [pc, #568]	; (800a71c <CheckforMedhaCMD+0x318>)
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800a4e6:	488e      	ldr	r0, [pc, #568]	; (800a720 <CheckforMedhaCMD+0x31c>)
 800a4e8:	f018 f8d8 	bl	802269c <puts>
				break;
 800a4ec:	e109      	b.n	800a702 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800a4ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	3368      	adds	r3, #104	; 0x68
 800a4f6:	443b      	add	r3, r7
 800a4f8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a4fc:	3b30      	subs	r3, #48	; 0x30
 800a4fe:	461a      	mov	r2, r3
 800a500:	4988      	ldr	r1, [pc, #544]	; (800a724 <CheckforMedhaCMD+0x320>)
 800a502:	4889      	ldr	r0, [pc, #548]	; (800a728 <CheckforMedhaCMD+0x324>)
 800a504:	f018 f82e 	bl	8022564 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800a508:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a50c:	3b01      	subs	r3, #1
 800a50e:	3368      	adds	r3, #104	; 0x68
 800a510:	443b      	add	r3, r7
 800a512:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a516:	2b2f      	cmp	r3, #47	; 0x2f
 800a518:	d914      	bls.n	800a544 <CheckforMedhaCMD+0x140>
 800a51a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a51e:	3b01      	subs	r3, #1
 800a520:	3368      	adds	r3, #104	; 0x68
 800a522:	443b      	add	r3, r7
 800a524:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a528:	2b32      	cmp	r3, #50	; 0x32
 800a52a:	d80b      	bhi.n	800a544 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800a52c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a530:	3b01      	subs	r3, #1
 800a532:	3368      	adds	r3, #104	; 0x68
 800a534:	443b      	add	r3, r7
 800a536:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a53a:	3b30      	subs	r3, #48	; 0x30
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	4b7b      	ldr	r3, [pc, #492]	; (800a72c <CheckforMedhaCMD+0x328>)
 800a540:	701a      	strb	r2, [r3, #0]
 800a542:	e002      	b.n	800a54a <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800a544:	487a      	ldr	r0, [pc, #488]	; (800a730 <CheckforMedhaCMD+0x32c>)
 800a546:	f018 f8a9 	bl	802269c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800a54a:	2301      	movs	r3, #1
 800a54c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a550:	e0d7      	b.n	800a702 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800a552:	4978      	ldr	r1, [pc, #480]	; (800a734 <CheckforMedhaCMD+0x330>)
 800a554:	4878      	ldr	r0, [pc, #480]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a556:	f018 f805 	bl	8022564 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800a55a:	4878      	ldr	r0, [pc, #480]	; (800a73c <CheckforMedhaCMD+0x338>)
 800a55c:	f018 f89e 	bl	802269c <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a560:	4b77      	ldr	r3, [pc, #476]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f043 0301 	orr.w	r3, r3, #1
 800a568:	4a75      	ldr	r2, [pc, #468]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a56a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a56c:	2301      	movs	r3, #1
 800a56e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a572:	e0c6      	b.n	800a702 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800a574:	4973      	ldr	r1, [pc, #460]	; (800a744 <CheckforMedhaCMD+0x340>)
 800a576:	4870      	ldr	r0, [pc, #448]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a578:	f017 fff4 	bl	8022564 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800a57c:	4872      	ldr	r0, [pc, #456]	; (800a748 <CheckforMedhaCMD+0x344>)
 800a57e:	f018 f88d 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a582:	4b6f      	ldr	r3, [pc, #444]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a584:	2200      	movs	r2, #0
 800a586:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a588:	4b6d      	ldr	r3, [pc, #436]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f043 0302 	orr.w	r3, r3, #2
 800a590:	4a6b      	ldr	r2, [pc, #428]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a592:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a594:	2301      	movs	r3, #1
 800a596:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a59a:	e0b2      	b.n	800a702 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800a59c:	496b      	ldr	r1, [pc, #428]	; (800a74c <CheckforMedhaCMD+0x348>)
 800a59e:	4866      	ldr	r0, [pc, #408]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a5a0:	f017 ffe0 	bl	8022564 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800a5a4:	486a      	ldr	r0, [pc, #424]	; (800a750 <CheckforMedhaCMD+0x34c>)
 800a5a6:	f018 f879 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a5aa:	4b65      	ldr	r3, [pc, #404]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a5b0:	4b63      	ldr	r3, [pc, #396]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f043 0304 	orr.w	r3, r3, #4
 800a5b8:	4a61      	ldr	r2, [pc, #388]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a5ba:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a5c2:	e09e      	b.n	800a702 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800a5c4:	4963      	ldr	r1, [pc, #396]	; (800a754 <CheckforMedhaCMD+0x350>)
 800a5c6:	485c      	ldr	r0, [pc, #368]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a5c8:	f017 ffcc 	bl	8022564 <iprintf>
				printf("INVALID_DES_PORT\n");
 800a5cc:	4862      	ldr	r0, [pc, #392]	; (800a758 <CheckforMedhaCMD+0x354>)
 800a5ce:	f018 f865 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a5d2:	4b5b      	ldr	r3, [pc, #364]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a5d8:	4b59      	ldr	r3, [pc, #356]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f043 0308 	orr.w	r3, r3, #8
 800a5e0:	4a57      	ldr	r2, [pc, #348]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a5e2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a5ea:	e08a      	b.n	800a702 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800a5ec:	495b      	ldr	r1, [pc, #364]	; (800a75c <CheckforMedhaCMD+0x358>)
 800a5ee:	4852      	ldr	r0, [pc, #328]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a5f0:	f017 ffb8 	bl	8022564 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800a5f4:	485a      	ldr	r0, [pc, #360]	; (800a760 <CheckforMedhaCMD+0x35c>)
 800a5f6:	f018 f851 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a5fa:	4b51      	ldr	r3, [pc, #324]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a600:	4b4f      	ldr	r3, [pc, #316]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f043 0310 	orr.w	r3, r3, #16
 800a608:	4a4d      	ldr	r2, [pc, #308]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a60a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a60c:	2301      	movs	r3, #1
 800a60e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a612:	e076      	b.n	800a702 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800a614:	4953      	ldr	r1, [pc, #332]	; (800a764 <CheckforMedhaCMD+0x360>)
 800a616:	4848      	ldr	r0, [pc, #288]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a618:	f017 ffa4 	bl	8022564 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800a61c:	4852      	ldr	r0, [pc, #328]	; (800a768 <CheckforMedhaCMD+0x364>)
 800a61e:	f018 f83d 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a622:	4b47      	ldr	r3, [pc, #284]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a628:	4b45      	ldr	r3, [pc, #276]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f043 0320 	orr.w	r3, r3, #32
 800a630:	4a43      	ldr	r2, [pc, #268]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a632:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a634:	2301      	movs	r3, #1
 800a636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a63a:	e062      	b.n	800a702 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800a63c:	494b      	ldr	r1, [pc, #300]	; (800a76c <CheckforMedhaCMD+0x368>)
 800a63e:	484c      	ldr	r0, [pc, #304]	; (800a770 <CheckforMedhaCMD+0x36c>)
 800a640:	f017 ff90 	bl	8022564 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800a644:	484b      	ldr	r0, [pc, #300]	; (800a774 <CheckforMedhaCMD+0x370>)
 800a646:	f018 f829 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a64a:	4b3d      	ldr	r3, [pc, #244]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a650:	4b3b      	ldr	r3, [pc, #236]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a658:	4a39      	ldr	r2, [pc, #228]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a65a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a65c:	2301      	movs	r3, #1
 800a65e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a662:	e04e      	b.n	800a702 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800a664:	4944      	ldr	r1, [pc, #272]	; (800a778 <CheckforMedhaCMD+0x374>)
 800a666:	4834      	ldr	r0, [pc, #208]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a668:	f017 ff7c 	bl	8022564 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800a66c:	4843      	ldr	r0, [pc, #268]	; (800a77c <CheckforMedhaCMD+0x378>)
 800a66e:	f018 f815 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a672:	4b33      	ldr	r3, [pc, #204]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a678:	4b31      	ldr	r3, [pc, #196]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a680:	4a2f      	ldr	r2, [pc, #188]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a682:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a684:	2301      	movs	r3, #1
 800a686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a68a:	e03a      	b.n	800a702 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800a68c:	493c      	ldr	r1, [pc, #240]	; (800a780 <CheckforMedhaCMD+0x37c>)
 800a68e:	482a      	ldr	r0, [pc, #168]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a690:	f017 ff68 	bl	8022564 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800a694:	483b      	ldr	r0, [pc, #236]	; (800a784 <CheckforMedhaCMD+0x380>)
 800a696:	f018 f801 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a69a:	4b29      	ldr	r3, [pc, #164]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a6a0:	4b27      	ldr	r3, [pc, #156]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6a8:	4a25      	ldr	r2, [pc, #148]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a6aa:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a6b2:	e026      	b.n	800a702 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800a6b4:	4934      	ldr	r1, [pc, #208]	; (800a788 <CheckforMedhaCMD+0x384>)
 800a6b6:	4820      	ldr	r0, [pc, #128]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a6b8:	f017 ff54 	bl	8022564 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800a6bc:	4833      	ldr	r0, [pc, #204]	; (800a78c <CheckforMedhaCMD+0x388>)
 800a6be:	f017 ffed 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a6c2:	4b1f      	ldr	r3, [pc, #124]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a6c8:	4b1d      	ldr	r3, [pc, #116]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a6d0:	4a1b      	ldr	r2, [pc, #108]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a6d2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a6da:	e012      	b.n	800a702 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800a6dc:	492c      	ldr	r1, [pc, #176]	; (800a790 <CheckforMedhaCMD+0x38c>)
 800a6de:	4816      	ldr	r0, [pc, #88]	; (800a738 <CheckforMedhaCMD+0x334>)
 800a6e0:	f017 ff40 	bl	8022564 <iprintf>
				printf("CLEAR ALL\n");
 800a6e4:	482b      	ldr	r0, [pc, #172]	; (800a794 <CheckforMedhaCMD+0x390>)
 800a6e6:	f017 ffd9 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a6ea:	4b15      	ldr	r3, [pc, #84]	; (800a740 <CheckforMedhaCMD+0x33c>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a6f6:	e004      	b.n	800a702 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800a6f8:	480d      	ldr	r0, [pc, #52]	; (800a730 <CheckforMedhaCMD+0x32c>)
 800a6fa:	f017 ffcf 	bl	802269c <puts>
 800a6fe:	e000      	b.n	800a702 <CheckforMedhaCMD+0x2fe>
			}
		}
 800a700:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800a702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a706:	2b01      	cmp	r3, #1
 800a708:	d147      	bne.n	800a79a <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800a70a:	f240 2005 	movw	r0, #517	; 0x205
 800a70e:	f004 feb9 	bl	800f484 <TransmitCanPkt>
 800a712:	e042      	b.n	800a79a <CheckforMedhaCMD+0x396>
 800a714:	2000a004 	.word	0x2000a004
 800a718:	08025928 	.word	0x08025928
 800a71c:	20000644 	.word	0x20000644
 800a720:	08025940 	.word	0x08025940
 800a724:	200020ea 	.word	0x200020ea
 800a728:	08025980 	.word	0x08025980
 800a72c:	20000645 	.word	0x20000645
 800a730:	08025994 	.word	0x08025994
 800a734:	2000211c 	.word	0x2000211c
 800a738:	080259b0 	.word	0x080259b0
 800a73c:	080259c0 	.word	0x080259c0
 800a740:	20003474 	.word	0x20003474
 800a744:	2000214e 	.word	0x2000214e
 800a748:	080259d8 	.word	0x080259d8
 800a74c:	20002180 	.word	0x20002180
 800a750:	080259f0 	.word	0x080259f0
 800a754:	200021b2 	.word	0x200021b2
 800a758:	08025a04 	.word	0x08025a04
 800a75c:	200021e4 	.word	0x200021e4
 800a760:	08025a18 	.word	0x08025a18
 800a764:	20002216 	.word	0x20002216
 800a768:	08025a2c 	.word	0x08025a2c
 800a76c:	20002248 	.word	0x20002248
 800a770:	08025a48 	.word	0x08025a48
 800a774:	08025a60 	.word	0x08025a60
 800a778:	2000227a 	.word	0x2000227a
 800a77c:	08025a74 	.word	0x08025a74
 800a780:	200022ac 	.word	0x200022ac
 800a784:	08025a8c 	.word	0x08025a8c
 800a788:	200022de 	.word	0x200022de
 800a78c:	08025aac 	.word	0x08025aac
 800a790:	20002310 	.word	0x20002310
 800a794:	08025acc 	.word	0x08025acc
		return;
 800a798:	bf00      	nop
		}
	}
}
 800a79a:	3768      	adds	r7, #104	; 0x68
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800a7aa:	79fb      	ldrb	r3, [r7, #7]
 800a7ac:	4a3d      	ldr	r2, [pc, #244]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a7ae:	2132      	movs	r1, #50	; 0x32
 800a7b0:	fb01 f303 	mul.w	r3, r1, r3
 800a7b4:	4413      	add	r3, r2
 800a7b6:	2224      	movs	r2, #36	; 0x24
 800a7b8:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	4a39      	ldr	r2, [pc, #228]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a7be:	2132      	movs	r1, #50	; 0x32
 800a7c0:	fb01 f303 	mul.w	r3, r1, r3
 800a7c4:	4413      	add	r3, r2
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	4a35      	ldr	r2, [pc, #212]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a7d0:	2132      	movs	r1, #50	; 0x32
 800a7d2:	fb01 f303 	mul.w	r3, r1, r3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	3302      	adds	r3, #2
 800a7da:	2230      	movs	r2, #48	; 0x30
 800a7dc:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	4a30      	ldr	r2, [pc, #192]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a7e2:	2132      	movs	r1, #50	; 0x32
 800a7e4:	fb01 f303 	mul.w	r3, r1, r3
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3303      	adds	r3, #3
 800a7ec:	2240      	movs	r2, #64	; 0x40
 800a7ee:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	4a2c      	ldr	r2, [pc, #176]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a7f4:	2132      	movs	r1, #50	; 0x32
 800a7f6:	fb01 f303 	mul.w	r3, r1, r3
 800a7fa:	4413      	add	r3, r2
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	22c0      	movs	r2, #192	; 0xc0
 800a800:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	4a27      	ldr	r2, [pc, #156]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a806:	2132      	movs	r1, #50	; 0x32
 800a808:	fb01 f303 	mul.w	r3, r1, r3
 800a80c:	4413      	add	r3, r2
 800a80e:	3305      	adds	r3, #5
 800a810:	224e      	movs	r2, #78	; 0x4e
 800a812:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800a814:	79fb      	ldrb	r3, [r7, #7]
 800a816:	4a23      	ldr	r2, [pc, #140]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a818:	2132      	movs	r1, #50	; 0x32
 800a81a:	fb01 f303 	mul.w	r3, r1, r3
 800a81e:	4413      	add	r3, r2
 800a820:	3306      	adds	r3, #6
 800a822:	2226      	movs	r2, #38	; 0x26
 800a824:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	3301      	adds	r3, #1
 800a82a:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	71fa      	strb	r2, [r7, #7]
 800a832:	461a      	mov	r2, r3
 800a834:	2332      	movs	r3, #50	; 0x32
 800a836:	fb02 f303 	mul.w	r3, r2, r3
 800a83a:	4a1a      	ldr	r2, [pc, #104]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a83c:	4413      	add	r3, r2
 800a83e:	491a      	ldr	r1, [pc, #104]	; (800a8a8 <Update_MedhaCommands+0x108>)
 800a840:	461a      	mov	r2, r3
 800a842:	460b      	mov	r3, r1
 800a844:	cb03      	ldmia	r3!, {r0, r1}
 800a846:	6010      	str	r0, [r2, #0]
 800a848:	6051      	str	r1, [r2, #4]
 800a84a:	8819      	ldrh	r1, [r3, #0]
 800a84c:	789b      	ldrb	r3, [r3, #2]
 800a84e:	8111      	strh	r1, [r2, #8]
 800a850:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	71fa      	strb	r2, [r7, #7]
 800a858:	461a      	mov	r2, r3
 800a85a:	2332      	movs	r3, #50	; 0x32
 800a85c:	fb02 f303 	mul.w	r3, r2, r3
 800a860:	4a10      	ldr	r2, [pc, #64]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a862:	4413      	add	r3, r2
 800a864:	4911      	ldr	r1, [pc, #68]	; (800a8ac <Update_MedhaCommands+0x10c>)
 800a866:	461a      	mov	r2, r3
 800a868:	460b      	mov	r3, r1
 800a86a:	cb03      	ldmia	r3!, {r0, r1}
 800a86c:	6010      	str	r0, [r2, #0]
 800a86e:	6051      	str	r1, [r2, #4]
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	71fa      	strb	r2, [r7, #7]
 800a87a:	461a      	mov	r2, r3
 800a87c:	2332      	movs	r3, #50	; 0x32
 800a87e:	fb02 f303 	mul.w	r3, r2, r3
 800a882:	4a08      	ldr	r2, [pc, #32]	; (800a8a4 <Update_MedhaCommands+0x104>)
 800a884:	4413      	add	r3, r2
 800a886:	4a0a      	ldr	r2, [pc, #40]	; (800a8b0 <Update_MedhaCommands+0x110>)
 800a888:	6810      	ldr	r0, [r2, #0]
 800a88a:	6018      	str	r0, [r3, #0]
 800a88c:	7912      	ldrb	r2, [r2, #4]
 800a88e:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800a890:	4a08      	ldr	r2, [pc, #32]	; (800a8b4 <Update_MedhaCommands+0x114>)
 800a892:	79fb      	ldrb	r3, [r7, #7]
 800a894:	7013      	strb	r3, [r2, #0]
}
 800a896:	bf00      	nop
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	200020b8 	.word	0x200020b8
 800a8a8:	08025ad8 	.word	0x08025ad8
 800a8ac:	08025ae4 	.word	0x08025ae4
 800a8b0:	08025af0 	.word	0x08025af0
 800a8b4:	200024a0 	.word	0x200024a0

0800a8b8 <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	73fb      	strb	r3, [r7, #15]
 800a8c8:	e01c      	b.n	800a904 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	2232      	movs	r2, #50	; 0x32
 800a8ce:	fb02 f303 	mul.w	r3, r2, r3
 800a8d2:	4a11      	ldr	r2, [pc, #68]	; (800a918 <Is_MedhaCommand_Valid+0x60>)
 800a8d4:	189c      	adds	r4, r3, r2
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2232      	movs	r2, #50	; 0x32
 800a8da:	fb02 f303 	mul.w	r3, r2, r3
 800a8de:	4a0e      	ldr	r2, [pc, #56]	; (800a918 <Is_MedhaCommand_Valid+0x60>)
 800a8e0:	4413      	add	r3, r2
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7f5 fcb6 	bl	8000254 <strlen>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f017 fd18 	bl	8022324 <memcmp>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
 800a8fc:	e008      	b.n	800a910 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
 800a900:	3301      	adds	r3, #1
 800a902:	73fb      	strb	r3, [r7, #15]
 800a904:	4b05      	ldr	r3, [pc, #20]	; (800a91c <Is_MedhaCommand_Valid+0x64>)
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	7bfa      	ldrb	r2, [r7, #15]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d3dd      	bcc.n	800a8ca <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800a90e:	23ff      	movs	r3, #255	; 0xff
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	bd90      	pop	{r4, r7, pc}
 800a918:	200020b8 	.word	0x200020b8
 800a91c:	200024a0 	.word	0x200024a0

0800a920 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	4603      	mov	r3, r0
 800a928:	6039      	str	r1, [r7, #0]
 800a92a:	80fb      	strh	r3, [r7, #6]
 800a92c:	4613      	mov	r3, r2
 800a92e:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800a93c:	88fb      	ldrh	r3, [r7, #6]
 800a93e:	613b      	str	r3, [r7, #16]
 800a940:	e015      	b.n	800a96e <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	b2da      	uxtb	r2, r3
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	440b      	add	r3, r1
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	4053      	eors	r3, r2
 800a950:	b2db      	uxtb	r3, r3
 800a952:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	0a1b      	lsrs	r3, r3, #8
 800a958:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800a95a:	4a0a      	ldr	r2, [pc, #40]	; (800a984 <GetCRC32+0x64>)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	4053      	eors	r3, r2
 800a966:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	3301      	adds	r3, #1
 800a96c:	613b      	str	r3, [r7, #16]
 800a96e:	88bb      	ldrh	r3, [r7, #4]
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	429a      	cmp	r2, r3
 800a974:	d3e5      	bcc.n	800a942 <GetCRC32+0x22>
	}

	return Crc;
 800a976:	697b      	ldr	r3, [r7, #20]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	08028b80 	.word	0x08028b80

0800a988 <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	4603      	mov	r3, r0
 800a990:	6039      	str	r1, [r7, #0]
 800a992:	80fb      	strh	r3, [r7, #6]
 800a994:	4613      	mov	r3, r2
 800a996:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800a998:	2300      	movs	r3, #0
 800a99a:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800a9a0:	88ba      	ldrh	r2, [r7, #4]
 800a9a2:	88fb      	ldrh	r3, [r7, #6]
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff ffba 	bl	800a920 <GetCRC32>
 800a9ac:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800a9ae:	88bb      	ldrh	r3, [r7, #4]
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d101      	bne.n	800a9c4 <CheckCRC32+0x3c>
	{
		return OK;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e009      	b.n	800a9d8 <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4805      	ldr	r0, [pc, #20]	; (800a9e0 <CheckCRC32+0x58>)
 800a9ca:	f017 fdcb 	bl	8022564 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800a9ce:	68f9      	ldr	r1, [r7, #12]
 800a9d0:	4804      	ldr	r0, [pc, #16]	; (800a9e4 <CheckCRC32+0x5c>)
 800a9d2:	f017 fdc7 	bl	8022564 <iprintf>
		return NOT_OK;
 800a9d6:	2300      	movs	r3, #0
	}

}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	08025af8 	.word	0x08025af8
 800a9e4:	08025b10 	.word	0x08025b10

0800a9e8 <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
 800a9f6:	f107 0310 	add.w	r3, r7, #16
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]
 800a9fe:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800aa00:	79fb      	ldrb	r3, [r7, #7]
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	f107 010c 	add.w	r1, r7, #12
 800aa08:	220a      	movs	r2, #10
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 f846 	bl	800aa9c <ReadAndFormMsg>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dd34      	ble.n	800aa80 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800aa16:	7b7b      	ldrb	r3, [r7, #13]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d115      	bne.n	800aa48 <CheckForRqst+0x60>
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d112      	bne.n	800aa48 <CheckForRqst+0x60>
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d10f      	bne.n	800aa48 <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800aa28:	4818      	ldr	r0, [pc, #96]	; (800aa8c <CheckForRqst+0xa4>)
 800aa2a:	f017 fe37 	bl	802269c <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800aa2e:	79fb      	ldrb	r3, [r7, #7]
 800aa30:	2202      	movs	r2, #2
 800aa32:	2101      	movs	r1, #1
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 f933 	bl	800aca0 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800aa3a:	f00a fd89 	bl	8015550 <HAL_GetTick>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	4a13      	ldr	r2, [pc, #76]	; (800aa90 <CheckForRqst+0xa8>)
 800aa42:	6013      	str	r3, [r2, #0]
			return 0x01;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e01c      	b.n	800aa82 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800aa48:	7b7b      	ldrb	r3, [r7, #13]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d115      	bne.n	800aa7a <CheckForRqst+0x92>
 800aa4e:	7bbb      	ldrb	r3, [r7, #14]
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d112      	bne.n	800aa7a <CheckForRqst+0x92>
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d10f      	bne.n	800aa7a <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800aa5a:	480e      	ldr	r0, [pc, #56]	; (800aa94 <CheckForRqst+0xac>)
 800aa5c:	f017 fe1e 	bl	802269c <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	2202      	movs	r2, #2
 800aa64:	2102      	movs	r1, #2
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 f91a 	bl	800aca0 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800aa6c:	f00a fd70 	bl	8015550 <HAL_GetTick>
 800aa70:	4603      	mov	r3, r0
 800aa72:	4a07      	ldr	r2, [pc, #28]	; (800aa90 <CheckForRqst+0xa8>)
 800aa74:	6013      	str	r3, [r2, #0]
			return 0x02;
 800aa76:	2302      	movs	r3, #2
 800aa78:	e003      	b.n	800aa82 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800aa7a:	4807      	ldr	r0, [pc, #28]	; (800aa98 <CheckForRqst+0xb0>)
 800aa7c:	f017 fe0e 	bl	802269c <puts>
	}
	return 0x00;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	08025b28 	.word	0x08025b28
 800aa90:	20000a4c 	.word	0x20000a4c
 800aa94:	08025b40 	.word	0x08025b40
 800aa98:	08025b58 	.word	0x08025b58

0800aa9c <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800aa9c:	b590      	push	{r4, r7, lr}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af02      	add	r7, sp, #8
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	6039      	str	r1, [r7, #0]
 800aaa6:	80fb      	strh	r3, [r7, #6]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800aaac:	2300      	movs	r3, #0
 800aaae:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800aab0:	2300      	movs	r3, #0
 800aab2:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800aab4:	2300      	movs	r3, #0
 800aab6:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800aab8:	e0d4      	b.n	800ac64 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800aaba:	4b71      	ldr	r3, [pc, #452]	; (800ac80 <ReadAndFormMsg+0x1e4>)
 800aabc:	2201      	movs	r2, #1
 800aabe:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800aac0:	4870      	ldr	r0, [pc, #448]	; (800ac84 <ReadAndFormMsg+0x1e8>)
 800aac2:	f00e f8ab 	bl	8018c1c <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800aac6:	88fb      	ldrh	r3, [r7, #6]
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	4618      	mov	r0, r3
 800aacc:	f00a fa18 	bl	8014f00 <Com_Get_Byte>
 800aad0:	4603      	mov	r3, r0
 800aad2:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800aad4:	f00a fb2a 	bl	801512c <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800aad8:	4b6b      	ldr	r3, [pc, #428]	; (800ac88 <ReadAndFormMsg+0x1ec>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	2b03      	cmp	r3, #3
 800aade:	f000 8099 	beq.w	800ac14 <ReadAndFormMsg+0x178>
 800aae2:	2b03      	cmp	r3, #3
 800aae4:	f300 80b0 	bgt.w	800ac48 <ReadAndFormMsg+0x1ac>
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d002      	beq.n	800aaf2 <ReadAndFormMsg+0x56>
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d00e      	beq.n	800ab0e <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800aaf0:	e0aa      	b.n	800ac48 <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
 800aaf4:	2b24      	cmp	r3, #36	; 0x24
 800aaf6:	f040 80a9 	bne.w	800ac4c <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	7bfa      	ldrb	r2, [r7, #15]
 800aafe:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800ab00:	4b62      	ldr	r3, [pc, #392]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ab02:	2201      	movs	r2, #1
 800ab04:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ab06:	4b60      	ldr	r3, [pc, #384]	; (800ac88 <ReadAndFormMsg+0x1ec>)
 800ab08:	2202      	movs	r2, #2
 800ab0a:	701a      	strb	r2, [r3, #0]
			break;
 800ab0c:	e09e      	b.n	800ac4c <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	2b26      	cmp	r3, #38	; 0x26
 800ab12:	d006      	beq.n	800ab22 <ReadAndFormMsg+0x86>
 800ab14:	2b26      	cmp	r3, #38	; 0x26
 800ab16:	dc6e      	bgt.n	800abf6 <ReadAndFormMsg+0x15a>
 800ab18:	2b05      	cmp	r3, #5
 800ab1a:	d068      	beq.n	800abee <ReadAndFormMsg+0x152>
 800ab1c:	2b24      	cmp	r3, #36	; 0x24
 800ab1e:	d05c      	beq.n	800abda <ReadAndFormMsg+0x13e>
 800ab20:	e069      	b.n	800abf6 <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800ab22:	4b5a      	ldr	r3, [pc, #360]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	3b02      	subs	r3, #2
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800ab2c:	4b57      	ldr	r3, [pc, #348]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ab2e:	881b      	ldrh	r3, [r3, #0]
 800ab30:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800ab32:	4b56      	ldr	r3, [pc, #344]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800ab38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	da01      	bge.n	800ab44 <ReadAndFormMsg+0xa8>
					return 0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	e099      	b.n	800ac78 <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800ab44:	4b50      	ldr	r3, [pc, #320]	; (800ac88 <ReadAndFormMsg+0x1ec>)
 800ab46:	2201      	movs	r2, #1
 800ab48:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800ab4a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800ab4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	4413      	add	r3, r2
 800ab56:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800ab58:	461c      	mov	r4, r3
 800ab5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab5e:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800ab60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab64:	3301      	adds	r3, #1
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	4413      	add	r3, r2
 800ab6a:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	4603      	mov	r3, r0
 800ab70:	4622      	mov	r2, r4
 800ab72:	4847      	ldr	r0, [pc, #284]	; (800ac90 <ReadAndFormMsg+0x1f4>)
 800ab74:	f017 fcf6 	bl	8022564 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800ab78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	6838      	ldr	r0, [r7, #0]
 800ab80:	f008 f800 	bl	8012b84 <CheckCRC>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d012      	beq.n	800abb0 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800ab8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	4413      	add	r3, r2
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	4619      	mov	r1, r3
 800ab96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	4413      	add	r3, r2
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	461a      	mov	r2, r3
 800aba4:	483b      	ldr	r0, [pc, #236]	; (800ac94 <ReadAndFormMsg+0x1f8>)
 800aba6:	f017 fcdd 	bl	8022564 <iprintf>
					return us_ReturnBytes;
 800abaa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800abae:	e063      	b.n	800ac78 <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800abb0:	4839      	ldr	r0, [pc, #228]	; (800ac98 <ReadAndFormMsg+0x1fc>)
 800abb2:	f017 fcd7 	bl	8022564 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800abb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800abba:	683a      	ldr	r2, [r7, #0]
 800abbc:	4413      	add	r3, r2
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	4619      	mov	r1, r3
 800abc2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800abc6:	3301      	adds	r3, #1
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	4413      	add	r3, r2
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	461a      	mov	r2, r3
 800abd0:	4832      	ldr	r0, [pc, #200]	; (800ac9c <ReadAndFormMsg+0x200>)
 800abd2:	f017 fcc7 	bl	8022564 <iprintf>
					return 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	e04e      	b.n	800ac78 <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	7bfa      	ldrb	r2, [r7, #15]
 800abde:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800abe0:	4b2a      	ldr	r3, [pc, #168]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800abe2:	2201      	movs	r2, #1
 800abe4:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800abe6:	4b28      	ldr	r3, [pc, #160]	; (800ac88 <ReadAndFormMsg+0x1ec>)
 800abe8:	2202      	movs	r2, #2
 800abea:	701a      	strb	r2, [r3, #0]
				break;
 800abec:	e011      	b.n	800ac12 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800abee:	4b26      	ldr	r3, [pc, #152]	; (800ac88 <ReadAndFormMsg+0x1ec>)
 800abf0:	2203      	movs	r2, #3
 800abf2:	701a      	strb	r2, [r3, #0]
				break;
 800abf4:	e00d      	b.n	800ac12 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800abf6:	4b25      	ldr	r3, [pc, #148]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	4413      	add	r3, r2
 800ac00:	7bfa      	ldrb	r2, [r7, #15]
 800ac02:	701a      	strb	r2, [r3, #0]
				j++;
 800ac04:	4b21      	ldr	r3, [pc, #132]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	4b1f      	ldr	r3, [pc, #124]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ac0e:	801a      	strh	r2, [r3, #0]
				break;
 800ac10:	bf00      	nop
			break;
 800ac12:	e01c      	b.n	800ac4e <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
 800ac16:	2b24      	cmp	r3, #36	; 0x24
 800ac18:	d005      	beq.n	800ac26 <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	2b26      	cmp	r3, #38	; 0x26
 800ac1e:	d002      	beq.n	800ac26 <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800ac20:	7bfb      	ldrb	r3, [r7, #15]
 800ac22:	2b05      	cmp	r3, #5
 800ac24:	d10c      	bne.n	800ac40 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800ac26:	4b19      	ldr	r3, [pc, #100]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	4413      	add	r3, r2
 800ac30:	7bfa      	ldrb	r2, [r7, #15]
 800ac32:	701a      	strb	r2, [r3, #0]
					j++;
 800ac34:	4b15      	ldr	r3, [pc, #84]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	4b13      	ldr	r3, [pc, #76]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ac3e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ac40:	4b11      	ldr	r3, [pc, #68]	; (800ac88 <ReadAndFormMsg+0x1ec>)
 800ac42:	2202      	movs	r2, #2
 800ac44:	701a      	strb	r2, [r3, #0]
				break;
 800ac46:	e002      	b.n	800ac4e <ReadAndFormMsg+0x1b2>
				break;
 800ac48:	bf00      	nop
 800ac4a:	e000      	b.n	800ac4e <ReadAndFormMsg+0x1b2>
			break;
 800ac4c:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800ac4e:	4b0f      	ldr	r3, [pc, #60]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ac50:	881b      	ldrh	r3, [r3, #0]
 800ac52:	88ba      	ldrh	r2, [r7, #4]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d805      	bhi.n	800ac64 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800ac58:	4b0b      	ldr	r3, [pc, #44]	; (800ac88 <ReadAndFormMsg+0x1ec>)
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800ac5e:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <ReadAndFormMsg+0x1f0>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800ac64:	88fb      	ldrh	r3, [r7, #6]
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f00a f909 	bl	8014e80 <Com_DataReady>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f47f af22 	bne.w	800aaba <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd90      	pop	{r4, r7, pc}
 800ac80:	20000a4a 	.word	0x20000a4a
 800ac84:	20009c6c 	.word	0x20009c6c
 800ac88:	20000117 	.word	0x20000117
 800ac8c:	200027d0 	.word	0x200027d0
 800ac90:	08025b68 	.word	0x08025b68
 800ac94:	08025b90 	.word	0x08025b90
 800ac98:	08025ba4 	.word	0x08025ba4
 800ac9c:	08025bb0 	.word	0x08025bb0

0800aca0 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	4603      	mov	r3, r0
 800aca8:	71fb      	strb	r3, [r7, #7]
 800acaa:	460b      	mov	r3, r1
 800acac:	71bb      	strb	r3, [r7, #6]
 800acae:	4613      	mov	r3, r2
 800acb0:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800acb6:	2300      	movs	r3, #0
 800acb8:	60bb      	str	r3, [r7, #8]
 800acba:	f107 030c 	add.w	r3, r7, #12
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800acc4:	2324      	movs	r3, #36	; 0x24
 800acc6:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800acc8:	79bb      	ldrb	r3, [r7, #6]
 800acca:	121b      	asrs	r3, r3, #8
 800accc:	b2db      	uxtb	r3, r3
 800acce:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800acd0:	79bb      	ldrb	r3, [r7, #6]
 800acd2:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800acd4:	797b      	ldrb	r3, [r7, #5]
 800acd6:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800acd8:	f107 0308 	add.w	r3, r7, #8
 800acdc:	2104      	movs	r1, #4
 800acde:	4618      	mov	r0, r3
 800ace0:	f007 fffa 	bl	8012cd8 <ComputeCRC>
	puc_Message[6]= '&';
 800ace4:	2326      	movs	r3, #38	; 0x26
 800ace6:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800ace8:	7b3b      	ldrb	r3, [r7, #12]
 800acea:	4619      	mov	r1, r3
 800acec:	7b7b      	ldrb	r3, [r7, #13]
 800acee:	461a      	mov	r2, r3
 800acf0:	480f      	ldr	r0, [pc, #60]	; (800ad30 <SendAck+0x90>)
 800acf2:	f017 fc37 	bl	8022564 <iprintf>

	AckTim=HAL_GetTick();
 800acf6:	f00a fc2b 	bl	8015550 <HAL_GetTick>
 800acfa:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800acfc:	e002      	b.n	800ad04 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800acfe:	480d      	ldr	r0, [pc, #52]	; (800ad34 <SendAck+0x94>)
 800ad00:	f00d ff8c 	bl	8018c1c <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800ad04:	6978      	ldr	r0, [r7, #20]
 800ad06:	f003 fe41 	bl	800e98c <HAL_Elaps_Ticks>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	f240 52db 	movw	r2, #1499	; 0x5db
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d9f4      	bls.n	800acfe <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800ad14:	f107 0108 	add.w	r1, r7, #8
 800ad18:	79fb      	ldrb	r3, [r7, #7]
 800ad1a:	2206      	movs	r2, #6
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f00a f96f 	bl	8015000 <CommTransmitMessage>

	AckTim = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
}
 800ad26:	bf00      	nop
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	08025bbc 	.word	0x08025bbc
 800ad34:	20009c6c 	.word	0x20009c6c

0800ad38 <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	6039      	str	r1, [r7, #0]
 800ad42:	80fb      	strh	r3, [r7, #6]
 800ad44:	4613      	mov	r3, r2
 800ad46:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800ad50:	2300      	movs	r3, #0
 800ad52:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800ad54:	e0ba      	b.n	800aecc <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800ad56:	88fb      	ldrh	r3, [r7, #6]
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f00a f8d0 	bl	8014f00 <Com_Get_Byte>
 800ad60:	4603      	mov	r3, r0
 800ad62:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800ad64:	f00a f9e2 	bl	801512c <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800ad68:	485f      	ldr	r0, [pc, #380]	; (800aee8 <ReadAndFormConfig+0x1b0>)
 800ad6a:	f00d ff57 	bl	8018c1c <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800ad6e:	4b5f      	ldr	r3, [pc, #380]	; (800aeec <ReadAndFormConfig+0x1b4>)
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	f000 8082 	beq.w	800ae7c <ReadAndFormConfig+0x144>
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	f300 8099 	bgt.w	800aeb0 <ReadAndFormConfig+0x178>
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d002      	beq.n	800ad88 <ReadAndFormConfig+0x50>
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d00e      	beq.n	800ada4 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800ad86:	e093      	b.n	800aeb0 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	2b24      	cmp	r3, #36	; 0x24
 800ad8c:	f040 8092 	bne.w	800aeb4 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	7bfa      	ldrb	r2, [r7, #15]
 800ad94:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800ad96:	4b56      	ldr	r3, [pc, #344]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800ad98:	2201      	movs	r2, #1
 800ad9a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ad9c:	4b53      	ldr	r3, [pc, #332]	; (800aeec <ReadAndFormConfig+0x1b4>)
 800ad9e:	2202      	movs	r2, #2
 800ada0:	701a      	strb	r2, [r3, #0]
			break;
 800ada2:	e087      	b.n	800aeb4 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	2b26      	cmp	r3, #38	; 0x26
 800ada8:	d006      	beq.n	800adb8 <ReadAndFormConfig+0x80>
 800adaa:	2b26      	cmp	r3, #38	; 0x26
 800adac:	dc57      	bgt.n	800ae5e <ReadAndFormConfig+0x126>
 800adae:	2b05      	cmp	r3, #5
 800adb0:	d051      	beq.n	800ae56 <ReadAndFormConfig+0x11e>
 800adb2:	2b24      	cmp	r3, #36	; 0x24
 800adb4:	d045      	beq.n	800ae42 <ReadAndFormConfig+0x10a>
 800adb6:	e052      	b.n	800ae5e <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800adb8:	4b4d      	ldr	r3, [pc, #308]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	3b02      	subs	r3, #2
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800adc2:	4b4b      	ldr	r3, [pc, #300]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800adc8:	4b49      	ldr	r3, [pc, #292]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800adca:	2200      	movs	r2, #0
 800adcc:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800adce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	da01      	bge.n	800adda <ReadAndFormConfig+0xa2>
					return 0;
 800add6:	2300      	movs	r3, #0
 800add8:	e082      	b.n	800aee0 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800adda:	4b44      	ldr	r3, [pc, #272]	; (800aeec <ReadAndFormConfig+0x1b4>)
 800addc:	2201      	movs	r2, #1
 800adde:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800ade0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ade4:	4619      	mov	r1, r3
 800ade6:	6838      	ldr	r0, [r7, #0]
 800ade8:	f007 fecc 	bl	8012b84 <CheckCRC>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d012      	beq.n	800ae18 <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800adf2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	4413      	add	r3, r2
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	4619      	mov	r1, r3
 800adfe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae02:	3301      	adds	r3, #1
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	4413      	add	r3, r2
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	4839      	ldr	r0, [pc, #228]	; (800aef4 <ReadAndFormConfig+0x1bc>)
 800ae0e:	f017 fba9 	bl	8022564 <iprintf>
					return us_ReturnBytes;
 800ae12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ae16:	e063      	b.n	800aee0 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800ae18:	4837      	ldr	r0, [pc, #220]	; (800aef8 <ReadAndFormConfig+0x1c0>)
 800ae1a:	f017 fba3 	bl	8022564 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800ae1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	4413      	add	r3, r2
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	4413      	add	r3, r2
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	4830      	ldr	r0, [pc, #192]	; (800aefc <ReadAndFormConfig+0x1c4>)
 800ae3a:	f017 fb93 	bl	8022564 <iprintf>
					return 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e04e      	b.n	800aee0 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	7bfa      	ldrb	r2, [r7, #15]
 800ae46:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800ae48:	4b29      	ldr	r3, [pc, #164]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ae4e:	4b27      	ldr	r3, [pc, #156]	; (800aeec <ReadAndFormConfig+0x1b4>)
 800ae50:	2202      	movs	r2, #2
 800ae52:	701a      	strb	r2, [r3, #0]
				break;
 800ae54:	e011      	b.n	800ae7a <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800ae56:	4b25      	ldr	r3, [pc, #148]	; (800aeec <ReadAndFormConfig+0x1b4>)
 800ae58:	2203      	movs	r2, #3
 800ae5a:	701a      	strb	r2, [r3, #0]
				break;
 800ae5c:	e00d      	b.n	800ae7a <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800ae5e:	4b24      	ldr	r3, [pc, #144]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	4413      	add	r3, r2
 800ae68:	7bfa      	ldrb	r2, [r7, #15]
 800ae6a:	701a      	strb	r2, [r3, #0]
				i++;
 800ae6c:	4b20      	ldr	r3, [pc, #128]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	3301      	adds	r3, #1
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	4b1e      	ldr	r3, [pc, #120]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800ae76:	801a      	strh	r2, [r3, #0]
				break;
 800ae78:	bf00      	nop
			break;
 800ae7a:	e01c      	b.n	800aeb6 <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
 800ae7e:	2b24      	cmp	r3, #36	; 0x24
 800ae80:	d005      	beq.n	800ae8e <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
 800ae84:	2b26      	cmp	r3, #38	; 0x26
 800ae86:	d002      	beq.n	800ae8e <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	2b05      	cmp	r3, #5
 800ae8c:	d10c      	bne.n	800aea8 <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800ae8e:	4b18      	ldr	r3, [pc, #96]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	4413      	add	r3, r2
 800ae98:	7bfa      	ldrb	r2, [r7, #15]
 800ae9a:	701a      	strb	r2, [r3, #0]
					i++;
 800ae9c:	4b14      	ldr	r3, [pc, #80]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	3301      	adds	r3, #1
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	4b12      	ldr	r3, [pc, #72]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800aea6:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800aea8:	4b10      	ldr	r3, [pc, #64]	; (800aeec <ReadAndFormConfig+0x1b4>)
 800aeaa:	2202      	movs	r2, #2
 800aeac:	701a      	strb	r2, [r3, #0]
				break;
 800aeae:	e002      	b.n	800aeb6 <ReadAndFormConfig+0x17e>
				break;
 800aeb0:	bf00      	nop
 800aeb2:	e000      	b.n	800aeb6 <ReadAndFormConfig+0x17e>
			break;
 800aeb4:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800aeb6:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	88ba      	ldrh	r2, [r7, #4]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d805      	bhi.n	800aecc <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800aec0:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <ReadAndFormConfig+0x1b4>)
 800aec2:	2201      	movs	r2, #1
 800aec4:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800aec6:	4b0a      	ldr	r3, [pc, #40]	; (800aef0 <ReadAndFormConfig+0x1b8>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800aecc:	88fb      	ldrh	r3, [r7, #6]
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	4618      	mov	r0, r3
 800aed2:	f009 ffd5 	bl	8014e80 <Com_DataReady>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f47f af3c 	bne.w	800ad56 <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20009c6c 	.word	0x20009c6c
 800aeec:	20000118 	.word	0x20000118
 800aef0:	200027d2 	.word	0x200027d2
 800aef4:	08025bd8 	.word	0x08025bd8
 800aef8:	08025ba4 	.word	0x08025ba4
 800aefc:	08025bec 	.word	0x08025bec

0800af00 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800af0a:	79fb      	ldrb	r3, [r7, #7]
 800af0c:	091b      	lsrs	r3, r3, #4
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	461a      	mov	r2, r3
 800af12:	0092      	lsls	r2, r2, #2
 800af14:	4413      	add	r3, r2
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	f003 030f 	and.w	r3, r3, #15
 800af20:	b2db      	uxtb	r3, r3
 800af22:	4413      	add	r3, r2
 800af24:	b2db      	uxtb	r3, r3
}
 800af26:	4618      	mov	r0, r3
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
	...

0800af34 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	4a0d      	ldr	r2, [pc, #52]	; (800af78 <Dec_to_BCD+0x44>)
 800af42:	fba2 2303 	umull	r2, r3, r2, r3
 800af46:	08db      	lsrs	r3, r3, #3
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	011b      	lsls	r3, r3, #4
 800af4c:	b2d8      	uxtb	r0, r3
 800af4e:	79fa      	ldrb	r2, [r7, #7]
 800af50:	4b09      	ldr	r3, [pc, #36]	; (800af78 <Dec_to_BCD+0x44>)
 800af52:	fba3 1302 	umull	r1, r3, r3, r2
 800af56:	08d9      	lsrs	r1, r3, #3
 800af58:	460b      	mov	r3, r1
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	440b      	add	r3, r1
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	1ad3      	subs	r3, r2, r3
 800af62:	b2db      	uxtb	r3, r3
 800af64:	4403      	add	r3, r0
 800af66:	71fb      	strb	r3, [r7, #7]
	return c;
 800af68:	79fb      	ldrb	r3, [r7, #7]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	cccccccd 	.word	0xcccccccd

0800af7c <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800af80:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <Is_GPS_Valid+0x34>)
 800af82:	795b      	ldrb	r3, [r3, #5]
 800af84:	2b09      	cmp	r3, #9
 800af86:	d801      	bhi.n	800af8c <Is_GPS_Valid+0x10>
	{
		return 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	e00c      	b.n	800afa6 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800af8c:	4b08      	ldr	r3, [pc, #32]	; (800afb0 <Is_GPS_Valid+0x34>)
 800af8e:	791b      	ldrb	r3, [r3, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <Is_GPS_Valid+0x1c>
	{
		return 0;
 800af94:	2300      	movs	r3, #0
 800af96:	e006      	b.n	800afa6 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800af98:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <Is_GPS_Valid+0x34>)
 800af9a:	78db      	ldrb	r3, [r3, #3]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <Is_GPS_Valid+0x28>
	{
		return 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	e000      	b.n	800afa6 <Is_GPS_Valid+0x2a>
	}
	return 1;
 800afa4:	2301      	movs	r3, #1
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	200027d4 	.word	0x200027d4

0800afb4 <Write_RTC>:


void Write_RTC(void)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800afba:	2300      	movs	r3, #0
 800afbc:	603b      	str	r3, [r7, #0]
 800afbe:	1d3b      	adds	r3, r7, #4
 800afc0:	2100      	movs	r1, #0
 800afc2:	460a      	mov	r2, r1
 800afc4:	801a      	strh	r2, [r3, #0]
 800afc6:	460a      	mov	r2, r1
 800afc8:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800afca:	f7ff ffd7 	bl	800af7c <Is_GPS_Valid>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d103      	bne.n	800afdc <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800afd4:	4844      	ldr	r0, [pc, #272]	; (800b0e8 <Write_RTC+0x134>)
 800afd6:	f017 fb61 	bl	802269c <puts>
 800afda:	e081      	b.n	800b0e0 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800afdc:	4b43      	ldr	r3, [pc, #268]	; (800b0ec <Write_RTC+0x138>)
 800afde:	2201      	movs	r2, #1
 800afe0:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800afe2:	4b43      	ldr	r3, [pc, #268]	; (800b0f0 <Write_RTC+0x13c>)
 800afe4:	789b      	ldrb	r3, [r3, #2]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff ffa4 	bl	800af34 <Dec_to_BCD>
 800afec:	4603      	mov	r3, r0
 800afee:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800aff0:	4b3f      	ldr	r3, [pc, #252]	; (800b0f0 <Write_RTC+0x13c>)
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff ff9d 	bl	800af34 <Dec_to_BCD>
 800affa:	4603      	mov	r3, r0
 800affc:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800affe:	4b3c      	ldr	r3, [pc, #240]	; (800b0f0 <Write_RTC+0x13c>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	4618      	mov	r0, r3
 800b004:	f7ff ff96 	bl	800af34 <Dec_to_BCD>
 800b008:	4603      	mov	r3, r0
 800b00a:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800b00c:	4b38      	ldr	r3, [pc, #224]	; (800b0f0 <Write_RTC+0x13c>)
 800b00e:	78db      	ldrb	r3, [r3, #3]
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff ff8f 	bl	800af34 <Dec_to_BCD>
 800b016:	4603      	mov	r3, r0
 800b018:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800b01a:	4b35      	ldr	r3, [pc, #212]	; (800b0f0 <Write_RTC+0x13c>)
 800b01c:	791b      	ldrb	r3, [r3, #4]
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff ff88 	bl	800af34 <Dec_to_BCD>
 800b024:	4603      	mov	r3, r0
 800b026:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800b028:	4b31      	ldr	r3, [pc, #196]	; (800b0f0 <Write_RTC+0x13c>)
 800b02a:	795b      	ldrb	r3, [r3, #5]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7ff ff81 	bl	800af34 <Dec_to_BCD>
 800b032:	4603      	mov	r3, r0
 800b034:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800b036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b03a:	9302      	str	r3, [sp, #8]
 800b03c:	2301      	movs	r3, #1
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	463b      	mov	r3, r7
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	2301      	movs	r3, #1
 800b046:	2200      	movs	r2, #0
 800b048:	21d0      	movs	r1, #208	; 0xd0
 800b04a:	482a      	ldr	r0, [pc, #168]	; (800b0f4 <Write_RTC+0x140>)
 800b04c:	f00d f838 	bl	80180c0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800b050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b054:	9302      	str	r3, [sp, #8]
 800b056:	2301      	movs	r3, #1
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	463b      	mov	r3, r7
 800b05c:	3301      	adds	r3, #1
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	2301      	movs	r3, #1
 800b062:	2201      	movs	r2, #1
 800b064:	21d0      	movs	r1, #208	; 0xd0
 800b066:	4823      	ldr	r0, [pc, #140]	; (800b0f4 <Write_RTC+0x140>)
 800b068:	f00d f82a 	bl	80180c0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800b06c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b070:	9302      	str	r3, [sp, #8]
 800b072:	2301      	movs	r3, #1
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	463b      	mov	r3, r7
 800b078:	3302      	adds	r3, #2
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	2301      	movs	r3, #1
 800b07e:	2202      	movs	r2, #2
 800b080:	21d0      	movs	r1, #208	; 0xd0
 800b082:	481c      	ldr	r0, [pc, #112]	; (800b0f4 <Write_RTC+0x140>)
 800b084:	f00d f81c 	bl	80180c0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800b088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b08c:	9302      	str	r3, [sp, #8]
 800b08e:	2301      	movs	r3, #1
 800b090:	9301      	str	r3, [sp, #4]
 800b092:	463b      	mov	r3, r7
 800b094:	3303      	adds	r3, #3
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	2301      	movs	r3, #1
 800b09a:	2204      	movs	r2, #4
 800b09c:	21d0      	movs	r1, #208	; 0xd0
 800b09e:	4815      	ldr	r0, [pc, #84]	; (800b0f4 <Write_RTC+0x140>)
 800b0a0:	f00d f80e 	bl	80180c0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800b0a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0a8:	9302      	str	r3, [sp, #8]
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	2205      	movs	r2, #5
 800b0b8:	21d0      	movs	r1, #208	; 0xd0
 800b0ba:	480e      	ldr	r0, [pc, #56]	; (800b0f4 <Write_RTC+0x140>)
 800b0bc:	f00d f800 	bl	80180c0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800b0c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0c4:	9302      	str	r3, [sp, #8]
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	463b      	mov	r3, r7
 800b0cc:	3305      	adds	r3, #5
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	2206      	movs	r2, #6
 800b0d4:	21d0      	movs	r1, #208	; 0xd0
 800b0d6:	4807      	ldr	r0, [pc, #28]	; (800b0f4 <Write_RTC+0x140>)
 800b0d8:	f00c fff2 	bl	80180c0 <HAL_I2C_Mem_Write>

	Get_time();
 800b0dc:	f000 f80c 	bl	800b0f8 <Get_time>

}
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	08025c4c 	.word	0x08025c4c
 800b0ec:	20000e6c 	.word	0x20000e6c
 800b0f0:	200027d4 	.word	0x200027d4
 800b0f4:	20009bc4 	.word	0x20009bc4

0800b0f8 <Get_time>:


void Get_time(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800b0fe:	463b      	mov	r3, r7
 800b100:	2207      	movs	r2, #7
 800b102:	2100      	movs	r1, #0
 800b104:	4618      	mov	r0, r3
 800b106:	f017 f945 	bl	8022394 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800b10a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b10e:	9302      	str	r3, [sp, #8]
 800b110:	2307      	movs	r3, #7
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	463b      	mov	r3, r7
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	2301      	movs	r3, #1
 800b11a:	2200      	movs	r2, #0
 800b11c:	21d0      	movs	r1, #208	; 0xd0
 800b11e:	4824      	ldr	r0, [pc, #144]	; (800b1b0 <Get_time+0xb8>)
 800b120:	f00d f8e2 	bl	80182e8 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800b124:	783b      	ldrb	r3, [r7, #0]
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff feea 	bl	800af00 <bcdToDec>
 800b12c:	4603      	mov	r3, r0
 800b12e:	461a      	mov	r2, r3
 800b130:	4b20      	ldr	r3, [pc, #128]	; (800b1b4 <Get_time+0xbc>)
 800b132:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800b134:	787b      	ldrb	r3, [r7, #1]
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff fee2 	bl	800af00 <bcdToDec>
 800b13c:	4603      	mov	r3, r0
 800b13e:	461a      	mov	r2, r3
 800b140:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <Get_time+0xbc>)
 800b142:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800b144:	78bb      	ldrb	r3, [r7, #2]
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff feda 	bl	800af00 <bcdToDec>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461a      	mov	r2, r3
 800b150:	4b18      	ldr	r3, [pc, #96]	; (800b1b4 <Get_time+0xbc>)
 800b152:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800b154:	793b      	ldrb	r3, [r7, #4]
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fed2 	bl	800af00 <bcdToDec>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	4b14      	ldr	r3, [pc, #80]	; (800b1b4 <Get_time+0xbc>)
 800b162:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800b164:	797b      	ldrb	r3, [r7, #5]
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff feca 	bl	800af00 <bcdToDec>
 800b16c:	4603      	mov	r3, r0
 800b16e:	461a      	mov	r2, r3
 800b170:	4b10      	ldr	r3, [pc, #64]	; (800b1b4 <Get_time+0xbc>)
 800b172:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800b174:	79bb      	ldrb	r3, [r7, #6]
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fec2 	bl	800af00 <bcdToDec>
 800b17c:	4603      	mov	r3, r0
 800b17e:	461a      	mov	r2, r3
 800b180:	4b0c      	ldr	r3, [pc, #48]	; (800b1b4 <Get_time+0xbc>)
 800b182:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800b184:	783a      	ldrb	r2, [r7, #0]
 800b186:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <Get_time+0xc0>)
 800b188:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800b18a:	787a      	ldrb	r2, [r7, #1]
 800b18c:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <Get_time+0xc0>)
 800b18e:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800b190:	78ba      	ldrb	r2, [r7, #2]
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <Get_time+0xc0>)
 800b194:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800b196:	793a      	ldrb	r2, [r7, #4]
 800b198:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <Get_time+0xc0>)
 800b19a:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800b19c:	797a      	ldrb	r2, [r7, #5]
 800b19e:	4b06      	ldr	r3, [pc, #24]	; (800b1b8 <Get_time+0xc0>)
 800b1a0:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800b1a2:	79ba      	ldrb	r2, [r7, #6]
 800b1a4:	4b04      	ldr	r3, [pc, #16]	; (800b1b8 <Get_time+0xc0>)
 800b1a6:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800b1a8:	bf00      	nop
}
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20009bc4 	.word	0x20009bc4
 800b1b4:	200027e4 	.word	0x200027e4
 800b1b8:	200027ec 	.word	0x200027ec

0800b1bc <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800b1c0:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <Update_Time_Every_Sec+0x2c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f003 fbe1 	bl	800e98c <HAL_Elaps_Ticks>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1d0:	d307      	bcc.n	800b1e2 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800b1d2:	f7ff ff91 	bl	800b0f8 <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800b1d6:	f00a f9bb 	bl	8015550 <HAL_GetTick>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	4a02      	ldr	r2, [pc, #8]	; (800b1e8 <Update_Time_Every_Sec+0x2c>)
 800b1de:	6013      	str	r3, [r2, #0]
	}
	return;
 800b1e0:	bf00      	nop
 800b1e2:	bf00      	nop
}
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	200027f4 	.word	0x200027f4

0800b1ec <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800b1f0:	f011 fc9c 	bl	801cb2c <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800b1f4:	4813      	ldr	r0, [pc, #76]	; (800b244 <Process_SiemensEI+0x58>)
 800b1f6:	f00d fd11 	bl	8018c1c <HAL_IWDG_Refresh>

		Feed_wdt();
 800b1fa:	f008 f865 	bl	80132c8 <Feed_wdt>

		readCanToStructs();
 800b1fe:	f004 fde3 	bl	800fdc8 <readCanToStructs>

		Chech_forSiemensCMD();
 800b202:	f001 fded 	bl	800cde0 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800b206:	f001 fb7d 	bl	800c904 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800b20a:	f001 fc31 	bl	800ca70 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800b20e:	f000 f81f 	bl	800b250 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800b212:	f001 fc4f 	bl	800cab4 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800b216:	f001 fc91 	bl	800cb3c <SendRelays2Other>

		CheckRelayMisMatch();
 800b21a:	f001 fca7 	bl	800cb6c <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800b21e:	f001 fcdf 	bl	800cbe0 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800b222:	f009 f963 	bl	80144ec <Print_BuildDat_Details>

		GetTimeStamp();
 800b226:	f002 fd65 	bl	800dcf4 <GetTimeStamp>

		if(Dats_Request_Flag > 0)
 800b22a:	4b07      	ldr	r3, [pc, #28]	; (800b248 <Process_SiemensEI+0x5c>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d0de      	beq.n	800b1f0 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800b232:	4b06      	ldr	r3, [pc, #24]	; (800b24c <Process_SiemensEI+0x60>)
 800b234:	2203      	movs	r2, #3
 800b236:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800b238:	f009 f856 	bl	80142e8 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <Process_SiemensEI+0x58>)
 800b23e:	f00d fced 	bl	8018c1c <HAL_IWDG_Refresh>
		Data_Processing();
 800b242:	e7f9      	b.n	800b238 <Process_SiemensEI+0x4c>
 800b244:	20009c6c 	.word	0x20009c6c
 800b248:	20000644 	.word	0x20000644
 800b24c:	20000a49 	.word	0x20000a49

0800b250 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800b256:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800b258:	2300      	movs	r3, #0
 800b25a:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800b25e:	2300      	movs	r3, #0
 800b260:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800b264:	2300      	movs	r3, #0
 800b266:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800b270:	2300      	movs	r3, #0
 800b272:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800b276:	2300      	movs	r3, #0
 800b278:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800b27c:	2300      	movs	r3, #0
 800b27e:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800b282:	2300      	movs	r3, #0
 800b284:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800b2a6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b2aa:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f017 f86a 	bl	8022394 <memset>
	uint16_t Size = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800b2cc:	4b7c      	ldr	r3, [pc, #496]	; (800b4c0 <Siemens_Data_Analyser+0x270>)
 800b2ce:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b2d2:	2b0a      	cmp	r3, #10
 800b2d4:	f240 86d4 	bls.w	800c080 <Siemens_Data_Analyser+0xe30>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800b2d8:	4b79      	ldr	r3, [pc, #484]	; (800b4c0 <Siemens_Data_Analyser+0x270>)
 800b2da:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f107 030c 	add.w	r3, r7, #12
 800b2e4:	4976      	ldr	r1, [pc, #472]	; (800b4c0 <Siemens_Data_Analyser+0x270>)
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f017 f82c 	bl	8022344 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800b2ec:	4b74      	ldr	r3, [pc, #464]	; (800b4c0 <Siemens_Data_Analyser+0x270>)
 800b2ee:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b2f2:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800b2f6:	f240 6204 	movw	r2, #1540	; 0x604
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4870      	ldr	r0, [pc, #448]	; (800b4c0 <Siemens_Data_Analyser+0x270>)
 800b2fe:	f017 f849 	bl	8022394 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800b302:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800b306:	f44f 720a 	mov.w	r2, #552	; 0x228
 800b30a:	2100      	movs	r1, #0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f017 f841 	bl	8022394 <memset>


	BITSTUFFINIT(0,0);
 800b312:	2300      	movs	r3, #0
 800b314:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b318:	2300      	movs	r3, #0
 800b31a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800b31e:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b322:	085b      	lsrs	r3, r3, #1
 800b324:	b29b      	uxth	r3, r3
 800b326:	3b02      	subs	r3, #2
 800b328:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800b32c:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b330:	085b      	lsrs	r3, r3, #1
 800b332:	b29b      	uxth	r3, r3
 800b334:	3b02      	subs	r3, #2
 800b336:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800b33a:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b33e:	3b02      	subs	r3, #2
 800b340:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800b344:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b348:	085b      	lsrs	r3, r3, #1
 800b34a:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800b34e:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800b352:	f107 030c 	add.w	r3, r7, #12
 800b356:	2200      	movs	r2, #0
 800b358:	4618      	mov	r0, r3
 800b35a:	f002 fbb1 	bl	800dac0 <Data_Compliment>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b01      	cmp	r3, #1
 800b362:	d004      	beq.n	800b36e <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800b364:	4857      	ldr	r0, [pc, #348]	; (800b4c4 <Siemens_Data_Analyser+0x274>)
 800b366:	f017 f999 	bl	802269c <puts>
		return ;
 800b36a:	f000 be8c 	b.w	800c086 <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800b36e:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800b372:	f107 020c 	add.w	r2, r7, #12
 800b376:	4413      	add	r3, r2
 800b378:	461a      	mov	r2, r3
 800b37a:	2110      	movs	r1, #16
 800b37c:	2000      	movs	r0, #0
 800b37e:	f7f5 f949 	bl	8000614 <ExtractBits>
 800b382:	4603      	mov	r3, r0
 800b384:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800b388:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800b38c:	f107 030c 	add.w	r3, r7, #12
 800b390:	4611      	mov	r1, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f002 f898 	bl	800d4c8 <Siemens_CRC>
 800b398:	4603      	mov	r3, r0
 800b39a:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b39e:	4b4a      	ldr	r3, [pc, #296]	; (800b4c8 <Siemens_Data_Analyser+0x278>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	095b      	lsrs	r3, r3, #5
 800b3a4:	f003 0301 	and.w	r3, r3, #1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d01c      	beq.n	800b3e6 <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800b3ac:	4847      	ldr	r0, [pc, #284]	; (800b4cc <Siemens_Data_Analyser+0x27c>)
 800b3ae:	f017 f975 	bl	802269c <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b3b2:	4847      	ldr	r0, [pc, #284]	; (800b4d0 <Siemens_Data_Analyser+0x280>)
 800b3b4:	f00e fd7e 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800b3b8:	4601      	mov	r1, r0
 800b3ba:	4b46      	ldr	r3, [pc, #280]	; (800b4d4 <Siemens_Data_Analyser+0x284>)
 800b3bc:	fba3 2301 	umull	r2, r3, r3, r1
 800b3c0:	0bda      	lsrs	r2, r3, #15
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	041b      	lsls	r3, r3, #16
 800b3c6:	1a9b      	subs	r3, r3, r2
 800b3c8:	1aca      	subs	r2, r1, r3
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800b3d0:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800b3d4:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d104      	bne.n	800b3e6 <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800b3dc:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800b3e6:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800b3ea:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d010      	beq.n	800b414 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800b3f2:	4839      	ldr	r0, [pc, #228]	; (800b4d8 <Siemens_Data_Analyser+0x288>)
 800b3f4:	f017 f952 	bl	802269c <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800b3f8:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4837      	ldr	r0, [pc, #220]	; (800b4dc <Siemens_Data_Analyser+0x28c>)
 800b400:	f017 f8b0 	bl	8022564 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800b404:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b408:	4619      	mov	r1, r3
 800b40a:	4835      	ldr	r0, [pc, #212]	; (800b4e0 <Siemens_Data_Analyser+0x290>)
 800b40c:	f017 f8aa 	bl	8022564 <iprintf>
		return;
 800b410:	f000 be39 	b.w	800c086 <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800b414:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800b418:	f107 020c 	add.w	r2, r7, #12
 800b41c:	4413      	add	r3, r2
 800b41e:	461a      	mov	r2, r3
 800b420:	2110      	movs	r1, #16
 800b422:	2000      	movs	r0, #0
 800b424:	f7f5 f8f6 	bl	8000614 <ExtractBits>
 800b428:	4603      	mov	r3, r0
 800b42a:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800b42e:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800b432:	f107 020c 	add.w	r2, r7, #12
 800b436:	4413      	add	r3, r2
 800b438:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800b43c:	4611      	mov	r1, r2
 800b43e:	4618      	mov	r0, r3
 800b440:	f002 f842 	bl	800d4c8 <Siemens_CRC>
 800b444:	4603      	mov	r3, r0
 800b446:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b44a:	4b1f      	ldr	r3, [pc, #124]	; (800b4c8 <Siemens_Data_Analyser+0x278>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	0a1b      	lsrs	r3, r3, #8
 800b450:	f003 0301 	and.w	r3, r3, #1
 800b454:	2b00      	cmp	r3, #0
 800b456:	d01c      	beq.n	800b492 <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800b458:	4822      	ldr	r0, [pc, #136]	; (800b4e4 <Siemens_Data_Analyser+0x294>)
 800b45a:	f017 f91f 	bl	802269c <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b45e:	481c      	ldr	r0, [pc, #112]	; (800b4d0 <Siemens_Data_Analyser+0x280>)
 800b460:	f00e fd28 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800b464:	4601      	mov	r1, r0
 800b466:	4b1b      	ldr	r3, [pc, #108]	; (800b4d4 <Siemens_Data_Analyser+0x284>)
 800b468:	fba3 2301 	umull	r2, r3, r3, r1
 800b46c:	0bda      	lsrs	r2, r3, #15
 800b46e:	4613      	mov	r3, r2
 800b470:	041b      	lsls	r3, r3, #16
 800b472:	1a9b      	subs	r3, r3, r2
 800b474:	1aca      	subs	r2, r1, r3
 800b476:	4613      	mov	r3, r2
 800b478:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800b47c:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800b480:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b484:	429a      	cmp	r2, r3
 800b486:	d104      	bne.n	800b492 <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800b488:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b48c:	3304      	adds	r3, #4
 800b48e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800b492:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800b496:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d02a      	beq.n	800b4f4 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800b49e:	4812      	ldr	r0, [pc, #72]	; (800b4e8 <Siemens_Data_Analyser+0x298>)
 800b4a0:	f017 f8fc 	bl	802269c <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800b4a4:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4810      	ldr	r0, [pc, #64]	; (800b4ec <Siemens_Data_Analyser+0x29c>)
 800b4ac:	f017 f85a 	bl	8022564 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800b4b0:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	480e      	ldr	r0, [pc, #56]	; (800b4f0 <Siemens_Data_Analyser+0x2a0>)
 800b4b8:	f017 f854 	bl	8022564 <iprintf>
		return;
 800b4bc:	f000 bde3 	b.w	800c086 <Siemens_Data_Analyser+0xe36>
 800b4c0:	20004bb0 	.word	0x20004bb0
 800b4c4:	08025c6c 	.word	0x08025c6c
 800b4c8:	20003474 	.word	0x20003474
 800b4cc:	08025c8c 	.word	0x08025c8c
 800b4d0:	20009c7c 	.word	0x20009c7c
 800b4d4:	80008001 	.word	0x80008001
 800b4d8:	08025cb4 	.word	0x08025cb4
 800b4dc:	08025cc4 	.word	0x08025cc4
 800b4e0:	08025cd8 	.word	0x08025cd8
 800b4e4:	08025cec 	.word	0x08025cec
 800b4e8:	08025d18 	.word	0x08025d18
 800b4ec:	08025d28 	.word	0x08025d28
 800b4f0:	08025d44 	.word	0x08025d44
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b4f4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b4f8:	b2d8      	uxtb	r0, r3
 800b4fa:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b4fe:	f107 020c 	add.w	r2, r7, #12
 800b502:	441a      	add	r2, r3
 800b504:	2301      	movs	r3, #1
 800b506:	2108      	movs	r1, #8
 800b508:	f002 f832 	bl	800d570 <Extract_Parity_Data>
 800b50c:	4603      	mov	r3, r0
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b514:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b518:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b51a:	4b56      	ldr	r3, [pc, #344]	; (800b674 <Siemens_Data_Analyser+0x424>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d02a      	beq.n	800b57c <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800b526:	4854      	ldr	r0, [pc, #336]	; (800b678 <Siemens_Data_Analyser+0x428>)
 800b528:	f017 f8b8 	bl	802269c <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b52c:	4853      	ldr	r0, [pc, #332]	; (800b67c <Siemens_Data_Analyser+0x42c>)
 800b52e:	f00e fcc1 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800b532:	4601      	mov	r1, r0
 800b534:	4b52      	ldr	r3, [pc, #328]	; (800b680 <Siemens_Data_Analyser+0x430>)
 800b536:	fba3 2301 	umull	r2, r3, r3, r1
 800b53a:	09da      	lsrs	r2, r3, #7
 800b53c:	4613      	mov	r3, r2
 800b53e:	021b      	lsls	r3, r3, #8
 800b540:	1a9b      	subs	r3, r3, r2
 800b542:	1aca      	subs	r2, r1, r3
 800b544:	b2d2      	uxtb	r2, r2
 800b546:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b54a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b54e:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800b550:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b554:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b558:	781a      	ldrb	r2, [r3, #0]
 800b55a:	4b4a      	ldr	r3, [pc, #296]	; (800b684 <Siemens_Data_Analyser+0x434>)
 800b55c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b560:	429a      	cmp	r2, r3
 800b562:	d10b      	bne.n	800b57c <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800b564:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b568:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	3304      	adds	r3, #4
 800b570:	b2da      	uxtb	r2, r3
 800b572:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b576:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b57a:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800b57c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b580:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b584:	781a      	ldrb	r2, [r3, #0]
 800b586:	4b3f      	ldr	r3, [pc, #252]	; (800b684 <Siemens_Data_Analyser+0x434>)
 800b588:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d015      	beq.n	800b5bc <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800b590:	483d      	ldr	r0, [pc, #244]	; (800b688 <Siemens_Data_Analyser+0x438>)
 800b592:	f017 f883 	bl	802269c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800b596:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b59a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	483a      	ldr	r0, [pc, #232]	; (800b68c <Siemens_Data_Analyser+0x43c>)
 800b5a4:	f016 ffde 	bl	8022564 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800b5a8:	4b36      	ldr	r3, [pc, #216]	; (800b684 <Siemens_Data_Analyser+0x434>)
 800b5aa:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	4837      	ldr	r0, [pc, #220]	; (800b690 <Siemens_Data_Analyser+0x440>)
 800b5b2:	f016 ffd7 	bl	8022564 <iprintf>
		RejectPacketFlag = 1;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800b5bc:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	da00      	bge.n	800b5c8 <Siemens_Data_Analyser+0x378>
 800b5c6:	3307      	adds	r3, #7
 800b5c8:	10db      	asrs	r3, r3, #3
 800b5ca:	b29a      	uxth	r2, r3
 800b5cc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b5d6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b5da:	3308      	adds	r3, #8
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	b21b      	sxth	r3, r3
 800b5e0:	425a      	negs	r2, r3
 800b5e2:	f003 0307 	and.w	r3, r3, #7
 800b5e6:	f002 0207 	and.w	r2, r2, #7
 800b5ea:	bf58      	it	pl
 800b5ec:	4253      	negpl	r3, r2
 800b5ee:	b21b      	sxth	r3, r3
 800b5f0:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800b5f4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b5f8:	b2d8      	uxtb	r0, r3
 800b5fa:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b5fe:	f107 020c 	add.w	r2, r7, #12
 800b602:	441a      	add	r2, r3
 800b604:	2300      	movs	r3, #0
 800b606:	2118      	movs	r1, #24
 800b608:	f001 ffb2 	bl	800d570 <Extract_Parity_Data>
 800b60c:	4603      	mov	r3, r0
 800b60e:	461a      	mov	r2, r3
 800b610:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b614:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b618:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800b61a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b61e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b628:	d036      	beq.n	800b698 <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800b62a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b62e:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800b632:	4a18      	ldr	r2, [pc, #96]	; (800b694 <Siemens_Data_Analyser+0x444>)
 800b634:	8812      	ldrh	r2, [r2, #0]
 800b636:	801a      	strh	r2, [r3, #0]
 800b638:	2200      	movs	r2, #0
 800b63a:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800b63c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b640:	f107 020c 	add.w	r2, r7, #12
 800b644:	4413      	add	r3, r2
 800b646:	f107 0208 	add.w	r2, r7, #8
 800b64a:	2103      	movs	r1, #3
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fd45 	bl	800c0dc <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800b652:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b656:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b65a:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b65e:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800b662:	3308      	adds	r3, #8
 800b664:	6812      	ldr	r2, [r2, #0]
 800b666:	4611      	mov	r1, r2
 800b668:	8019      	strh	r1, [r3, #0]
 800b66a:	3302      	adds	r3, #2
 800b66c:	0c12      	lsrs	r2, r2, #16
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	e015      	b.n	800b69e <Siemens_Data_Analyser+0x44e>
 800b672:	bf00      	nop
 800b674:	20003474 	.word	0x20003474
 800b678:	08025d60 	.word	0x08025d60
 800b67c:	20009c7c 	.word	0x20009c7c
 800b680:	80808081 	.word	0x80808081
 800b684:	20000304 	.word	0x20000304
 800b688:	08025d80 	.word	0x08025d80
 800b68c:	08025da4 	.word	0x08025da4
 800b690:	08025db4 	.word	0x08025db4
 800b694:	08025f38 	.word	0x08025f38
	}
	else
	{
		RejectPacketFlag = 1;
 800b698:	2301      	movs	r3, #1
 800b69a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800b69e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6a2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b6a6:	689a      	ldr	r2, [r3, #8]
 800b6a8:	4bbf      	ldr	r3, [pc, #764]	; (800b9a8 <Siemens_Data_Analyser+0x758>)
 800b6aa:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d015      	beq.n	800b6de <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800b6b2:	48be      	ldr	r0, [pc, #760]	; (800b9ac <Siemens_Data_Analyser+0x75c>)
 800b6b4:	f016 fff2 	bl	802269c <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800b6b8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6bc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	48ba      	ldr	r0, [pc, #744]	; (800b9b0 <Siemens_Data_Analyser+0x760>)
 800b6c6:	f016 ff4d 	bl	8022564 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800b6ca:	4bb7      	ldr	r3, [pc, #732]	; (800b9a8 <Siemens_Data_Analyser+0x758>)
 800b6cc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	48b8      	ldr	r0, [pc, #736]	; (800b9b4 <Siemens_Data_Analyser+0x764>)
 800b6d4:	f016 ff46 	bl	8022564 <iprintf>
		RejectPacketFlag = 1;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800b6de:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b6e2:	3318      	adds	r3, #24
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	da00      	bge.n	800b6ea <Siemens_Data_Analyser+0x49a>
 800b6e8:	3307      	adds	r3, #7
 800b6ea:	10db      	asrs	r3, r3, #3
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b6f8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b6fc:	3318      	adds	r3, #24
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	b21b      	sxth	r3, r3
 800b702:	425a      	negs	r2, r3
 800b704:	f003 0307 	and.w	r3, r3, #7
 800b708:	f002 0207 	and.w	r2, r2, #7
 800b70c:	bf58      	it	pl
 800b70e:	4253      	negpl	r3, r2
 800b710:	b21b      	sxth	r3, r3
 800b712:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b716:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b71a:	b2d8      	uxtb	r0, r3
 800b71c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b720:	f107 020c 	add.w	r2, r7, #12
 800b724:	441a      	add	r2, r3
 800b726:	2301      	movs	r3, #1
 800b728:	2108      	movs	r1, #8
 800b72a:	f001 ff21 	bl	800d570 <Extract_Parity_Data>
 800b72e:	4603      	mov	r3, r0
 800b730:	b2da      	uxtb	r2, r3
 800b732:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b736:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b73a:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b73c:	4b9e      	ldr	r3, [pc, #632]	; (800b9b8 <Siemens_Data_Analyser+0x768>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	085b      	lsrs	r3, r3, #1
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	2b00      	cmp	r3, #0
 800b748:	d02a      	beq.n	800b7a0 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800b74a:	489c      	ldr	r0, [pc, #624]	; (800b9bc <Siemens_Data_Analyser+0x76c>)
 800b74c:	f016 ffa6 	bl	802269c <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b750:	489b      	ldr	r0, [pc, #620]	; (800b9c0 <Siemens_Data_Analyser+0x770>)
 800b752:	f00e fbaf 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800b756:	4601      	mov	r1, r0
 800b758:	4b9a      	ldr	r3, [pc, #616]	; (800b9c4 <Siemens_Data_Analyser+0x774>)
 800b75a:	fba3 2301 	umull	r2, r3, r3, r1
 800b75e:	09da      	lsrs	r2, r3, #7
 800b760:	4613      	mov	r3, r2
 800b762:	021b      	lsls	r3, r3, #8
 800b764:	1a9b      	subs	r3, r3, r2
 800b766:	1aca      	subs	r2, r1, r3
 800b768:	b2d2      	uxtb	r2, r2
 800b76a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b76e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b772:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800b774:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b778:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b77c:	7b1a      	ldrb	r2, [r3, #12]
 800b77e:	4b8a      	ldr	r3, [pc, #552]	; (800b9a8 <Siemens_Data_Analyser+0x758>)
 800b780:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800b784:	429a      	cmp	r2, r3
 800b786:	d10b      	bne.n	800b7a0 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800b788:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b78c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b790:	7b1b      	ldrb	r3, [r3, #12]
 800b792:	3304      	adds	r3, #4
 800b794:	b2da      	uxtb	r2, r3
 800b796:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b79a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b79e:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800b7a0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7a4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b7a8:	7b1a      	ldrb	r2, [r3, #12]
 800b7aa:	4b7f      	ldr	r3, [pc, #508]	; (800b9a8 <Siemens_Data_Analyser+0x758>)
 800b7ac:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d015      	beq.n	800b7e0 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800b7b4:	4884      	ldr	r0, [pc, #528]	; (800b9c8 <Siemens_Data_Analyser+0x778>)
 800b7b6:	f016 ff71 	bl	802269c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800b7ba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7be:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b7c2:	7b1b      	ldrb	r3, [r3, #12]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4881      	ldr	r0, [pc, #516]	; (800b9cc <Siemens_Data_Analyser+0x77c>)
 800b7c8:	f016 fecc 	bl	8022564 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800b7cc:	4b76      	ldr	r3, [pc, #472]	; (800b9a8 <Siemens_Data_Analyser+0x758>)
 800b7ce:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	487e      	ldr	r0, [pc, #504]	; (800b9d0 <Siemens_Data_Analyser+0x780>)
 800b7d6:	f016 fec5 	bl	8022564 <iprintf>
		RejectPacketFlag = 1;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800b7e0:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	da00      	bge.n	800b7ec <Siemens_Data_Analyser+0x59c>
 800b7ea:	3307      	adds	r3, #7
 800b7ec:	10db      	asrs	r3, r3, #3
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b7f4:	4413      	add	r3, r2
 800b7f6:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b7fa:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b7fe:	3308      	adds	r3, #8
 800b800:	b29b      	uxth	r3, r3
 800b802:	b21b      	sxth	r3, r3
 800b804:	425a      	negs	r2, r3
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	f002 0207 	and.w	r2, r2, #7
 800b80e:	bf58      	it	pl
 800b810:	4253      	negpl	r3, r2
 800b812:	b21b      	sxth	r3, r3
 800b814:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800b818:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b81c:	b2d8      	uxtb	r0, r3
 800b81e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b822:	f107 020c 	add.w	r2, r7, #12
 800b826:	441a      	add	r2, r3
 800b828:	2300      	movs	r3, #0
 800b82a:	2118      	movs	r1, #24
 800b82c:	f001 fea0 	bl	800d570 <Extract_Parity_Data>
 800b830:	4603      	mov	r3, r0
 800b832:	461a      	mov	r2, r3
 800b834:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b838:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b83c:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800b83e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b842:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84c:	d021      	beq.n	800b892 <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800b84e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b852:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800b856:	4a5f      	ldr	r2, [pc, #380]	; (800b9d4 <Siemens_Data_Analyser+0x784>)
 800b858:	8812      	ldrh	r2, [r2, #0]
 800b85a:	801a      	strh	r2, [r3, #0]
 800b85c:	2200      	movs	r2, #0
 800b85e:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800b860:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b864:	f107 020c 	add.w	r2, r7, #12
 800b868:	4413      	add	r3, r2
 800b86a:	1d3a      	adds	r2, r7, #4
 800b86c:	2103      	movs	r1, #3
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 fc34 	bl	800c0dc <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800b874:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b878:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b87c:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b880:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800b884:	3314      	adds	r3, #20
 800b886:	6812      	ldr	r2, [r2, #0]
 800b888:	4611      	mov	r1, r2
 800b88a:	8019      	strh	r1, [r3, #0]
 800b88c:	3302      	adds	r3, #2
 800b88e:	0c12      	lsrs	r2, r2, #16
 800b890:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b892:	4b49      	ldr	r3, [pc, #292]	; (800b9b8 <Siemens_Data_Analyser+0x768>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	089b      	lsrs	r3, r3, #2
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d02c      	beq.n	800b8fa <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800b8a0:	484d      	ldr	r0, [pc, #308]	; (800b9d8 <Siemens_Data_Analyser+0x788>)
 800b8a2:	f016 fefb 	bl	802269c <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800b8a6:	4846      	ldr	r0, [pc, #280]	; (800b9c0 <Siemens_Data_Analyser+0x770>)
 800b8a8:	f00e fb04 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800b8ac:	4601      	mov	r1, r0
 800b8ae:	f240 1301 	movw	r3, #257	; 0x101
 800b8b2:	fba3 2301 	umull	r2, r3, r3, r1
 800b8b6:	1aca      	subs	r2, r1, r3
 800b8b8:	0852      	lsrs	r2, r2, #1
 800b8ba:	4413      	add	r3, r2
 800b8bc:	0dda      	lsrs	r2, r3, #23
 800b8be:	4613      	mov	r3, r2
 800b8c0:	061b      	lsls	r3, r3, #24
 800b8c2:	1a9b      	subs	r3, r3, r2
 800b8c4:	1aca      	subs	r2, r1, r3
 800b8c6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8ca:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b8ce:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800b8d0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8d4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b8d8:	695a      	ldr	r2, [r3, #20]
 800b8da:	4b33      	ldr	r3, [pc, #204]	; (800b9a8 <Siemens_Data_Analyser+0x758>)
 800b8dc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d10a      	bne.n	800b8fa <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800b8e4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8e8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	1d1a      	adds	r2, r3, #4
 800b8f0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8f4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b8f8:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800b8fa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8fe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b902:	695a      	ldr	r2, [r3, #20]
 800b904:	4b28      	ldr	r3, [pc, #160]	; (800b9a8 <Siemens_Data_Analyser+0x758>)
 800b906:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d015      	beq.n	800b93a <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800b90e:	4833      	ldr	r0, [pc, #204]	; (800b9dc <Siemens_Data_Analyser+0x78c>)
 800b910:	f016 fec4 	bl	802269c <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800b914:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b918:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	4619      	mov	r1, r3
 800b920:	4823      	ldr	r0, [pc, #140]	; (800b9b0 <Siemens_Data_Analyser+0x760>)
 800b922:	f016 fe1f 	bl	8022564 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800b926:	4b20      	ldr	r3, [pc, #128]	; (800b9a8 <Siemens_Data_Analyser+0x758>)
 800b928:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b92c:	4619      	mov	r1, r3
 800b92e:	4821      	ldr	r0, [pc, #132]	; (800b9b4 <Siemens_Data_Analyser+0x764>)
 800b930:	f016 fe18 	bl	8022564 <iprintf>
		RejectPacketFlag = 1;
 800b934:	2301      	movs	r3, #1
 800b936:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800b93a:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b93e:	3318      	adds	r3, #24
 800b940:	2b00      	cmp	r3, #0
 800b942:	da00      	bge.n	800b946 <Siemens_Data_Analyser+0x6f6>
 800b944:	3307      	adds	r3, #7
 800b946:	10db      	asrs	r3, r3, #3
 800b948:	b29a      	uxth	r2, r3
 800b94a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b94e:	4413      	add	r3, r2
 800b950:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b954:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b958:	3318      	adds	r3, #24
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	b21b      	sxth	r3, r3
 800b95e:	425a      	negs	r2, r3
 800b960:	f003 0307 	and.w	r3, r3, #7
 800b964:	f002 0207 	and.w	r2, r2, #7
 800b968:	bf58      	it	pl
 800b96a:	4253      	negpl	r3, r2
 800b96c:	b21b      	sxth	r3, r3
 800b96e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800b972:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b976:	b2d8      	uxtb	r0, r3
 800b978:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b97c:	f107 020c 	add.w	r2, r7, #12
 800b980:	441a      	add	r2, r3
 800b982:	2300      	movs	r3, #0
 800b984:	2108      	movs	r1, #8
 800b986:	f001 fdf3 	bl	800d570 <Extract_Parity_Data>
 800b98a:	4603      	mov	r3, r0
 800b98c:	b2da      	uxtb	r2, r3
 800b98e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b992:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b996:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800b998:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b99c:	3308      	adds	r3, #8
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	da1e      	bge.n	800b9e0 <Siemens_Data_Analyser+0x790>
 800b9a2:	3307      	adds	r3, #7
 800b9a4:	e01c      	b.n	800b9e0 <Siemens_Data_Analyser+0x790>
 800b9a6:	bf00      	nop
 800b9a8:	20000304 	.word	0x20000304
 800b9ac:	08025dc4 	.word	0x08025dc4
 800b9b0:	08025de4 	.word	0x08025de4
 800b9b4:	08025df4 	.word	0x08025df4
 800b9b8:	20003474 	.word	0x20003474
 800b9bc:	08025e04 	.word	0x08025e04
 800b9c0:	20009c7c 	.word	0x20009c7c
 800b9c4:	80808081 	.word	0x80808081
 800b9c8:	08025e24 	.word	0x08025e24
 800b9cc:	08025da4 	.word	0x08025da4
 800b9d0:	08025db4 	.word	0x08025db4
 800b9d4:	08025f38 	.word	0x08025f38
 800b9d8:	08025e44 	.word	0x08025e44
 800b9dc:	08025e60 	.word	0x08025e60
 800b9e0:	10db      	asrs	r3, r3, #3
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b9ee:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	b21b      	sxth	r3, r3
 800b9f8:	425a      	negs	r2, r3
 800b9fa:	f003 0307 	and.w	r3, r3, #7
 800b9fe:	f002 0207 	and.w	r2, r2, #7
 800ba02:	bf58      	it	pl
 800ba04:	4253      	negpl	r3, r2
 800ba06:	b21b      	sxth	r3, r3
 800ba08:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800ba0c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba10:	b2d8      	uxtb	r0, r3
 800ba12:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba16:	f107 020c 	add.w	r2, r7, #12
 800ba1a:	441a      	add	r2, r3
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	2108      	movs	r1, #8
 800ba20:	f001 fda6 	bl	800d570 <Extract_Parity_Data>
 800ba24:	4603      	mov	r3, r0
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba2c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba30:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800ba32:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800ba36:	3308      	adds	r3, #8
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	da00      	bge.n	800ba3e <Siemens_Data_Analyser+0x7ee>
 800ba3c:	3307      	adds	r3, #7
 800ba3e:	10db      	asrs	r3, r3, #3
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba46:	4413      	add	r3, r2
 800ba48:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800ba4c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba50:	3308      	adds	r3, #8
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	b21b      	sxth	r3, r3
 800ba56:	425a      	negs	r2, r3
 800ba58:	f003 0307 	and.w	r3, r3, #7
 800ba5c:	f002 0207 	and.w	r2, r2, #7
 800ba60:	bf58      	it	pl
 800ba62:	4253      	negpl	r3, r2
 800ba64:	b21b      	sxth	r3, r3
 800ba66:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800ba6a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba6e:	b2d8      	uxtb	r0, r3
 800ba70:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba74:	f107 020c 	add.w	r2, r7, #12
 800ba78:	441a      	add	r2, r3
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	2108      	movs	r1, #8
 800ba7e:	f001 fd77 	bl	800d570 <Extract_Parity_Data>
 800ba82:	4603      	mov	r3, r0
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba8a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba8e:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ba90:	4bab      	ldr	r3, [pc, #684]	; (800bd40 <Siemens_Data_Analyser+0xaf0>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	08db      	lsrs	r3, r3, #3
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d02a      	beq.n	800baf4 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800ba9e:	48a9      	ldr	r0, [pc, #676]	; (800bd44 <Siemens_Data_Analyser+0xaf4>)
 800baa0:	f016 fdfc 	bl	802269c <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800baa4:	48a8      	ldr	r0, [pc, #672]	; (800bd48 <Siemens_Data_Analyser+0xaf8>)
 800baa6:	f00e fa05 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800baaa:	4601      	mov	r1, r0
 800baac:	4ba7      	ldr	r3, [pc, #668]	; (800bd4c <Siemens_Data_Analyser+0xafc>)
 800baae:	fba3 2301 	umull	r2, r3, r3, r1
 800bab2:	09da      	lsrs	r2, r3, #7
 800bab4:	4613      	mov	r3, r2
 800bab6:	021b      	lsls	r3, r3, #8
 800bab8:	1a9b      	subs	r3, r3, r2
 800baba:	1aca      	subs	r2, r1, r3
 800babc:	b2d2      	uxtb	r2, r2
 800babe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bac2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bac6:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800bac8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bacc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bad0:	7e9a      	ldrb	r2, [r3, #26]
 800bad2:	4b9f      	ldr	r3, [pc, #636]	; (800bd50 <Siemens_Data_Analyser+0xb00>)
 800bad4:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bad8:	429a      	cmp	r2, r3
 800bada:	d10b      	bne.n	800baf4 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800badc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bae0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bae4:	7e9b      	ldrb	r3, [r3, #26]
 800bae6:	3304      	adds	r3, #4
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800baee:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800baf2:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800baf4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800baf8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bafc:	7e9a      	ldrb	r2, [r3, #26]
 800bafe:	4b94      	ldr	r3, [pc, #592]	; (800bd50 <Siemens_Data_Analyser+0xb00>)
 800bb00:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d015      	beq.n	800bb34 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800bb08:	4892      	ldr	r0, [pc, #584]	; (800bd54 <Siemens_Data_Analyser+0xb04>)
 800bb0a:	f016 fdc7 	bl	802269c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800bb0e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb12:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb16:	7e9b      	ldrb	r3, [r3, #26]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	488f      	ldr	r0, [pc, #572]	; (800bd58 <Siemens_Data_Analyser+0xb08>)
 800bb1c:	f016 fd22 	bl	8022564 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800bb20:	4b8b      	ldr	r3, [pc, #556]	; (800bd50 <Siemens_Data_Analyser+0xb00>)
 800bb22:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bb26:	4619      	mov	r1, r3
 800bb28:	488c      	ldr	r0, [pc, #560]	; (800bd5c <Siemens_Data_Analyser+0xb0c>)
 800bb2a:	f016 fd1b 	bl	8022564 <iprintf>
		RejectPacketFlag = 1;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800bb34:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bb38:	3308      	adds	r3, #8
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	da00      	bge.n	800bb40 <Siemens_Data_Analyser+0x8f0>
 800bb3e:	3307      	adds	r3, #7
 800bb40:	10db      	asrs	r3, r3, #3
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb48:	4413      	add	r3, r2
 800bb4a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bb4e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb52:	3308      	adds	r3, #8
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	b21b      	sxth	r3, r3
 800bb58:	425a      	negs	r2, r3
 800bb5a:	f003 0307 	and.w	r3, r3, #7
 800bb5e:	f002 0207 	and.w	r2, r2, #7
 800bb62:	bf58      	it	pl
 800bb64:	4253      	negpl	r3, r2
 800bb66:	b21b      	sxth	r3, r3
 800bb68:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800bb6c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb70:	b2d8      	uxtb	r0, r3
 800bb72:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb76:	f107 020c 	add.w	r2, r7, #12
 800bb7a:	441a      	add	r2, r3
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	2108      	movs	r1, #8
 800bb80:	f001 fcf6 	bl	800d570 <Extract_Parity_Data>
 800bb84:	4603      	mov	r3, r0
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb8c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb90:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bb92:	4b6b      	ldr	r3, [pc, #428]	; (800bd40 <Siemens_Data_Analyser+0xaf0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	091b      	lsrs	r3, r3, #4
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d02a      	beq.n	800bbf6 <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800bba0:	486f      	ldr	r0, [pc, #444]	; (800bd60 <Siemens_Data_Analyser+0xb10>)
 800bba2:	f016 fd7b 	bl	802269c <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bba6:	4868      	ldr	r0, [pc, #416]	; (800bd48 <Siemens_Data_Analyser+0xaf8>)
 800bba8:	f00e f984 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800bbac:	4601      	mov	r1, r0
 800bbae:	4b67      	ldr	r3, [pc, #412]	; (800bd4c <Siemens_Data_Analyser+0xafc>)
 800bbb0:	fba3 2301 	umull	r2, r3, r3, r1
 800bbb4:	09da      	lsrs	r2, r3, #7
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	021b      	lsls	r3, r3, #8
 800bbba:	1a9b      	subs	r3, r3, r2
 800bbbc:	1aca      	subs	r2, r1, r3
 800bbbe:	b2d2      	uxtb	r2, r2
 800bbc0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbc4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbc8:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800bbca:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbce:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbd2:	7eda      	ldrb	r2, [r3, #27]
 800bbd4:	4b5e      	ldr	r3, [pc, #376]	; (800bd50 <Siemens_Data_Analyser+0xb00>)
 800bbd6:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d10b      	bne.n	800bbf6 <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800bbde:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbe2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbe6:	7edb      	ldrb	r3, [r3, #27]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbf0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbf4:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800bbf6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbfa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbfe:	7eda      	ldrb	r2, [r3, #27]
 800bc00:	4b53      	ldr	r3, [pc, #332]	; (800bd50 <Siemens_Data_Analyser+0xb00>)
 800bc02:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d015      	beq.n	800bc36 <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800bc0a:	4856      	ldr	r0, [pc, #344]	; (800bd64 <Siemens_Data_Analyser+0xb14>)
 800bc0c:	f016 fd46 	bl	802269c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800bc10:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc14:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc18:	7edb      	ldrb	r3, [r3, #27]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	484e      	ldr	r0, [pc, #312]	; (800bd58 <Siemens_Data_Analyser+0xb08>)
 800bc1e:	f016 fca1 	bl	8022564 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800bc22:	4b4b      	ldr	r3, [pc, #300]	; (800bd50 <Siemens_Data_Analyser+0xb00>)
 800bc24:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bc28:	4619      	mov	r1, r3
 800bc2a:	484c      	ldr	r0, [pc, #304]	; (800bd5c <Siemens_Data_Analyser+0xb0c>)
 800bc2c:	f016 fc9a 	bl	8022564 <iprintf>
		RejectPacketFlag = 1;
 800bc30:	2301      	movs	r3, #1
 800bc32:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800bc36:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	da00      	bge.n	800bc42 <Siemens_Data_Analyser+0x9f2>
 800bc40:	3307      	adds	r3, #7
 800bc42:	10db      	asrs	r3, r3, #3
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bc50:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc54:	3308      	adds	r3, #8
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	b21b      	sxth	r3, r3
 800bc5a:	425a      	negs	r2, r3
 800bc5c:	f003 0307 	and.w	r3, r3, #7
 800bc60:	f002 0207 	and.w	r2, r2, #7
 800bc64:	bf58      	it	pl
 800bc66:	4253      	negpl	r3, r2
 800bc68:	b21b      	sxth	r3, r3
 800bc6a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800bc6e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc72:	b2d8      	uxtb	r0, r3
 800bc74:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc78:	f107 020c 	add.w	r2, r7, #12
 800bc7c:	441a      	add	r2, r3
 800bc7e:	2302      	movs	r3, #2
 800bc80:	2120      	movs	r1, #32
 800bc82:	f001 fc75 	bl	800d570 <Extract_Parity_Data>
 800bc86:	4603      	mov	r3, r0
 800bc88:	461a      	mov	r2, r3
 800bc8a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc8e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc92:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800bc94:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bc98:	3320      	adds	r3, #32
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	da00      	bge.n	800bca0 <Siemens_Data_Analyser+0xa50>
 800bc9e:	3307      	adds	r3, #7
 800bca0:	10db      	asrs	r3, r3, #3
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bca8:	4413      	add	r3, r2
 800bcaa:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bcae:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bcb2:	3320      	adds	r3, #32
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	b21b      	sxth	r3, r3
 800bcb8:	425a      	negs	r2, r3
 800bcba:	f003 0307 	and.w	r3, r3, #7
 800bcbe:	f002 0207 	and.w	r2, r2, #7
 800bcc2:	bf58      	it	pl
 800bcc4:	4253      	negpl	r3, r2
 800bcc6:	b21b      	sxth	r3, r3
 800bcc8:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800bccc:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bcd0:	b2d8      	uxtb	r0, r3
 800bcd2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bcd6:	f107 020c 	add.w	r2, r7, #12
 800bcda:	441a      	add	r2, r3
 800bcdc:	2302      	movs	r3, #2
 800bcde:	2120      	movs	r1, #32
 800bce0:	f001 fc46 	bl	800d570 <Extract_Parity_Data>
 800bce4:	4603      	mov	r3, r0
 800bce6:	461a      	mov	r2, r3
 800bce8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcec:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcf0:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800bcf2:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bcf6:	3320      	adds	r3, #32
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	da00      	bge.n	800bcfe <Siemens_Data_Analyser+0xaae>
 800bcfc:	3307      	adds	r3, #7
 800bcfe:	10db      	asrs	r3, r3, #3
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd06:	4413      	add	r3, r2
 800bd08:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bd0c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd10:	3320      	adds	r3, #32
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	b21b      	sxth	r3, r3
 800bd16:	425a      	negs	r2, r3
 800bd18:	f003 0307 	and.w	r3, r3, #7
 800bd1c:	f002 0207 	and.w	r2, r2, #7
 800bd20:	bf58      	it	pl
 800bd22:	4253      	negpl	r3, r2
 800bd24:	b21b      	sxth	r3, r3
 800bd26:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800bd30:	200a      	movs	r0, #10
 800bd32:	f016 fc2f 	bl	8022594 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800bd36:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd3a:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800bd3e:	e052      	b.n	800bde6 <Siemens_Data_Analyser+0xb96>
 800bd40:	20003474 	.word	0x20003474
 800bd44:	08025e7c 	.word	0x08025e7c
 800bd48:	20009c7c 	.word	0x20009c7c
 800bd4c:	80808081 	.word	0x80808081
 800bd50:	20000304 	.word	0x20000304
 800bd54:	08025e98 	.word	0x08025e98
 800bd58:	08025da4 	.word	0x08025da4
 800bd5c:	08025db4 	.word	0x08025db4
 800bd60:	08025eb8 	.word	0x08025eb8
 800bd64:	08025ed4 	.word	0x08025ed4
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800bd68:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd6c:	b2d8      	uxtb	r0, r3
 800bd6e:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800bd72:	f107 020c 	add.w	r2, r7, #12
 800bd76:	441a      	add	r2, r3
 800bd78:	2300      	movs	r3, #0
 800bd7a:	2108      	movs	r1, #8
 800bd7c:	f001 fbf8 	bl	800d570 <Extract_Parity_Data>
 800bd80:	4601      	mov	r1, r0
 800bd82:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	b2c9      	uxtb	r1, r1
 800bd90:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd94:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800bd98:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800bd9a:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800bd9e:	3301      	adds	r3, #1
 800bda0:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800bda4:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bda8:	3308      	adds	r3, #8
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	da00      	bge.n	800bdb0 <Siemens_Data_Analyser+0xb60>
 800bdae:	3307      	adds	r3, #7
 800bdb0:	10db      	asrs	r3, r3, #3
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bdb8:	4413      	add	r3, r2
 800bdba:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bdbe:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	b21b      	sxth	r3, r3
 800bdc8:	425a      	negs	r2, r3
 800bdca:	f003 0307 	and.w	r3, r3, #7
 800bdce:	f002 0207 	and.w	r2, r2, #7
 800bdd2:	bf58      	it	pl
 800bdd4:	4253      	negpl	r3, r2
 800bdd6:	b21b      	sxth	r3, r3
 800bdd8:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800bddc:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800bde0:	3301      	adds	r3, #1
 800bde2:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800bde6:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d8b9      	bhi.n	800bd68 <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800bdf4:	200a      	movs	r0, #10
 800bdf6:	f016 fbcd 	bl	8022594 <putchar>



	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800bdfa:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800bdfe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800be02:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800be06:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 f966 	bl	800c0dc <ExtractAppData>
 800be10:	4603      	mov	r3, r0
 800be12:	461a      	mov	r2, r3
 800be14:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be18:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be1c:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800be1e:	4b9c      	ldr	r3, [pc, #624]	; (800c090 <Siemens_Data_Analyser+0xe40>)
 800be20:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800be24:	f003 0307 	and.w	r3, r3, #7
 800be28:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800be2c:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800be30:	2b00      	cmp	r3, #0
 800be32:	d008      	beq.n	800be46 <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800be34:	4b96      	ldr	r3, [pc, #600]	; (800c090 <Siemens_Data_Analyser+0xe40>)
 800be36:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800be3a:	08db      	lsrs	r3, r3, #3
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	3301      	adds	r3, #1
 800be40:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800be44:	e005      	b.n	800be52 <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800be46:	4b92      	ldr	r3, [pc, #584]	; (800c090 <Siemens_Data_Analyser+0xe40>)
 800be48:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800be4c:	08db      	lsrs	r3, r3, #3
 800be4e:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800be52:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be56:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be5c:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800be60:	429a      	cmp	r2, r3
 800be62:	d02c      	beq.n	800bebe <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800be64:	488b      	ldr	r0, [pc, #556]	; (800c094 <Siemens_Data_Analyser+0xe44>)
 800be66:	f016 fc19 	bl	802269c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800be6a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be6e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be74:	4619      	mov	r1, r3
 800be76:	4888      	ldr	r0, [pc, #544]	; (800c098 <Siemens_Data_Analyser+0xe48>)
 800be78:	f016 fb74 	bl	8022564 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800be7c:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800be80:	4619      	mov	r1, r3
 800be82:	4886      	ldr	r0, [pc, #536]	; (800c09c <Siemens_Data_Analyser+0xe4c>)
 800be84:	f016 fb6e 	bl	8022564 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800be88:	4985      	ldr	r1, [pc, #532]	; (800c0a0 <Siemens_Data_Analyser+0xe50>)
 800be8a:	4886      	ldr	r0, [pc, #536]	; (800c0a4 <Siemens_Data_Analyser+0xe54>)
 800be8c:	f7f4 f9d8 	bl	8000240 <strcmp>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d002      	beq.n	800be9c <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800be96:	2301      	movs	r3, #1
 800be98:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800be9c:	4980      	ldr	r1, [pc, #512]	; (800c0a0 <Siemens_Data_Analyser+0xe50>)
 800be9e:	4881      	ldr	r0, [pc, #516]	; (800c0a4 <Siemens_Data_Analyser+0xe54>)
 800bea0:	f7f4 f9ce 	bl	8000240 <strcmp>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d109      	bne.n	800bebe <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800beaa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800beae:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800beb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	4b75      	ldr	r3, [pc, #468]	; (800c090 <Siemens_Data_Analyser+0xe40>)
 800beba:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800bebe:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	f000 80de 	beq.w	800c084 <Siemens_Data_Analyser+0xe34>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800bec8:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800becc:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800bed0:	3326      	adds	r3, #38	; 0x26
 800bed2:	4619      	mov	r1, r3
 800bed4:	2000      	movs	r0, #0
 800bed6:	f006 fea9 	bl	8012c2c <GetCRC16>
 800beda:	4603      	mov	r3, r0
 800bedc:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800bee0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bee4:	f107 020c 	add.w	r2, r7, #12
 800bee8:	4413      	add	r3, r2
 800beea:	461a      	mov	r2, r3
 800beec:	2110      	movs	r1, #16
 800beee:	2000      	movs	r0, #0
 800bef0:	f7f4 fb90 	bl	8000614 <ExtractBits>
 800bef4:	4603      	mov	r3, r0
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800befc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf00:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800bf04:	f44f 720a 	mov.w	r2, #552	; 0x228
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4867      	ldr	r0, [pc, #412]	; (800c0a8 <Siemens_Data_Analyser+0xe58>)
 800bf0c:	f016 fa42 	bl	8022394 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800bf10:	4a65      	ldr	r2, [pc, #404]	; (800c0a8 <Siemens_Data_Analyser+0xe58>)
 800bf12:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf16:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf1a:	4610      	mov	r0, r2
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	f44f 730a 	mov.w	r3, #552	; 0x228
 800bf22:	461a      	mov	r2, r3
 800bf24:	f016 fa0e 	bl	8022344 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800bf28:	f000 f92e 	bl	800c188 <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800bf2c:	4b5f      	ldr	r3, [pc, #380]	; (800c0ac <Siemens_Data_Analyser+0xe5c>)
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	461a      	mov	r2, r3
 800bf32:	4b57      	ldr	r3, [pc, #348]	; (800c090 <Siemens_Data_Analyser+0xe40>)
 800bf34:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	bfb8      	it	lt
 800bf3e:	425b      	neglt	r3, r3
 800bf40:	461a      	mov	r2, r3
 800bf42:	4b53      	ldr	r3, [pc, #332]	; (800c090 <Siemens_Data_Analyser+0xe40>)
 800bf44:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d869      	bhi.n	800c020 <Siemens_Data_Analyser+0xdd0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800bf4c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf50:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf54:	69da      	ldr	r2, [r3, #28]
 800bf56:	4b56      	ldr	r3, [pc, #344]	; (800c0b0 <Siemens_Data_Analyser+0xe60>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d044      	beq.n	800bfe8 <Siemens_Data_Analyser+0xd98>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800bf5e:	f009 faf7 	bl	8015550 <HAL_GetTick>
 800bf62:	4603      	mov	r3, r0
 800bf64:	4a53      	ldr	r2, [pc, #332]	; (800c0b4 <Siemens_Data_Analyser+0xe64>)
 800bf66:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800bf68:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf6c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	4a4f      	ldr	r2, [pc, #316]	; (800c0b0 <Siemens_Data_Analyser+0xe60>)
 800bf74:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800bf76:	4b4d      	ldr	r3, [pc, #308]	; (800c0ac <Siemens_Data_Analyser+0xe5c>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800bf7c:	4b4e      	ldr	r3, [pc, #312]	; (800c0b8 <Siemens_Data_Analyser+0xe68>)
 800bf7e:	885b      	ldrh	r3, [r3, #2]
 800bf80:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d04b      	beq.n	800c020 <Siemens_Data_Analyser+0xdd0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800bf88:	f44f 7201 	mov.w	r2, #516	; 0x204
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	484a      	ldr	r0, [pc, #296]	; (800c0b8 <Siemens_Data_Analyser+0xe68>)
 800bf90:	f016 fa00 	bl	8022394 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800bf94:	f240 2202 	movw	r2, #514	; 0x202
 800bf98:	2100      	movs	r1, #0
 800bf9a:	4848      	ldr	r0, [pc, #288]	; (800c0bc <Siemens_Data_Analyser+0xe6c>)
 800bf9c:	f016 f9fa 	bl	8022394 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800bfa0:	4a45      	ldr	r2, [pc, #276]	; (800c0b8 <Siemens_Data_Analyser+0xe68>)
 800bfa2:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800bfa6:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800bfa8:	4b3f      	ldr	r3, [pc, #252]	; (800c0a8 <Siemens_Data_Analyser+0xe58>)
 800bfaa:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800bfac:	4b42      	ldr	r3, [pc, #264]	; (800c0b8 <Siemens_Data_Analyser+0xe68>)
 800bfae:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800bfb0:	4b3d      	ldr	r3, [pc, #244]	; (800c0a8 <Siemens_Data_Analyser+0xe58>)
 800bfb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	4942      	ldr	r1, [pc, #264]	; (800c0c0 <Siemens_Data_Analyser+0xe70>)
 800bfb8:	4842      	ldr	r0, [pc, #264]	; (800c0c4 <Siemens_Data_Analyser+0xe74>)
 800bfba:	f016 f9c3 	bl	8022344 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800bfbe:	4b3a      	ldr	r3, [pc, #232]	; (800c0a8 <Siemens_Data_Analyser+0xe58>)
 800bfc0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800bfc2:	4b3e      	ldr	r3, [pc, #248]	; (800c0bc <Siemens_Data_Analyser+0xe6c>)
 800bfc4:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800bfc6:	4b38      	ldr	r3, [pc, #224]	; (800c0a8 <Siemens_Data_Analyser+0xe58>)
 800bfc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bfca:	461a      	mov	r2, r3
 800bfcc:	493c      	ldr	r1, [pc, #240]	; (800c0c0 <Siemens_Data_Analyser+0xe70>)
 800bfce:	483e      	ldr	r0, [pc, #248]	; (800c0c8 <Siemens_Data_Analyser+0xe78>)
 800bfd0:	f016 f9b8 	bl	8022344 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);

#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800bfd4:	f44f 7002 	mov.w	r0, #520	; 0x208
 800bfd8:	f003 fa54 	bl	800f484 <TransmitCanPkt>
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800bfdc:	f009 fab8 	bl	8015550 <HAL_GetTick>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	4a34      	ldr	r2, [pc, #208]	; (800c0b4 <Siemens_Data_Analyser+0xe64>)
 800bfe4:	6113      	str	r3, [r2, #16]
 800bfe6:	e01b      	b.n	800c020 <Siemens_Data_Analyser+0xdd0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800bfe8:	4b30      	ldr	r3, [pc, #192]	; (800c0ac <Siemens_Data_Analyser+0xe5c>)
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	3301      	adds	r3, #1
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	4b2e      	ldr	r3, [pc, #184]	; (800c0ac <Siemens_Data_Analyser+0xe5c>)
 800bff2:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800bff4:	4b2d      	ldr	r3, [pc, #180]	; (800c0ac <Siemens_Data_Analyser+0xe5c>)
 800bff6:	881b      	ldrh	r3, [r3, #0]
 800bff8:	461a      	mov	r2, r3
 800bffa:	4b25      	ldr	r3, [pc, #148]	; (800c090 <Siemens_Data_Analyser+0xe40>)
 800bffc:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c000:	429a      	cmp	r2, r3
 800c002:	d90d      	bls.n	800c020 <Siemens_Data_Analyser+0xdd0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800c004:	4b29      	ldr	r3, [pc, #164]	; (800c0ac <Siemens_Data_Analyser+0xe5c>)
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	4619      	mov	r1, r3
 800c00a:	4830      	ldr	r0, [pc, #192]	; (800c0cc <Siemens_Data_Analyser+0xe7c>)
 800c00c:	f016 faaa 	bl	8022564 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800c010:	4b1f      	ldr	r3, [pc, #124]	; (800c090 <Siemens_Data_Analyser+0xe40>)
 800c012:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c016:	b29b      	uxth	r3, r3
 800c018:	3301      	adds	r3, #1
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	4b23      	ldr	r3, [pc, #140]	; (800c0ac <Siemens_Data_Analyser+0xe5c>)
 800c01e:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800c020:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800c024:	f107 010c 	add.w	r1, r7, #12
 800c028:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800c02c:	2302      	movs	r3, #2
 800c02e:	f000 fe11 	bl	800cc54 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800c032:	4b27      	ldr	r3, [pc, #156]	; (800c0d0 <Siemens_Data_Analyser+0xe80>)
 800c034:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00d      	beq.n	800c058 <Siemens_Data_Analyser+0xe08>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800c03c:	4b24      	ldr	r3, [pc, #144]	; (800c0d0 <Siemens_Data_Analyser+0xe80>)
 800c03e:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800c042:	2301      	movs	r3, #1
 800c044:	4922      	ldr	r1, [pc, #136]	; (800c0d0 <Siemens_Data_Analyser+0xe80>)
 800c046:	4823      	ldr	r0, [pc, #140]	; (800c0d4 <Siemens_Data_Analyser+0xe84>)
 800c048:	f000 fe04 	bl	800cc54 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800c04c:	f240 6202 	movw	r2, #1538	; 0x602
 800c050:	2100      	movs	r1, #0
 800c052:	481f      	ldr	r0, [pc, #124]	; (800c0d0 <Siemens_Data_Analyser+0xe80>)
 800c054:	f016 f99e 	bl	8022394 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800c058:	4b14      	ldr	r3, [pc, #80]	; (800c0ac <Siemens_Data_Analyser+0xe5c>)
 800c05a:	881a      	ldrh	r2, [r3, #0]
 800c05c:	4b1e      	ldr	r3, [pc, #120]	; (800c0d8 <Siemens_Data_Analyser+0xe88>)
 800c05e:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800c060:	4b1d      	ldr	r3, [pc, #116]	; (800c0d8 <Siemens_Data_Analyser+0xe88>)
 800c062:	2201      	movs	r2, #1
 800c064:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800c066:	4b1c      	ldr	r3, [pc, #112]	; (800c0d8 <Siemens_Data_Analyser+0xe88>)
 800c068:	2201      	movs	r2, #1
 800c06a:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 800c06c:	f240 2002 	movw	r0, #514	; 0x202
 800c070:	f003 fa08 	bl	800f484 <TransmitCanPkt>
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800c074:	f009 fa6c 	bl	8015550 <HAL_GetTick>
 800c078:	4603      	mov	r3, r0
 800c07a:	4a0e      	ldr	r2, [pc, #56]	; (800c0b4 <Siemens_Data_Analyser+0xe64>)
 800c07c:	6093      	str	r3, [r2, #8]

	return;
 800c07e:	e002      	b.n	800c086 <Siemens_Data_Analyser+0xe36>
		return;
 800c080:	bf00      	nop
 800c082:	e000      	b.n	800c086 <Siemens_Data_Analyser+0xe36>
		return;
 800c084:	bf00      	nop
}
 800c086:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	20000304 	.word	0x20000304
 800c094:	08025eec 	.word	0x08025eec
 800c098:	08025da4 	.word	0x08025da4
 800c09c:	08025db4 	.word	0x08025db4
 800c0a0:	08025f0c 	.word	0x08025f0c
 800c0a4:	20000305 	.word	0x20000305
 800c0a8:	200027f8 	.word	0x200027f8
 800c0ac:	20003cb8 	.word	0x20003cb8
 800c0b0:	20003cb4 	.word	0x20003cb4
 800c0b4:	20003488 	.word	0x20003488
 800c0b8:	200036a8 	.word	0x200036a8
 800c0bc:	200034a4 	.word	0x200034a4
 800c0c0:	2000281e 	.word	0x2000281e
 800c0c4:	200036ac 	.word	0x200036ac
 800c0c8:	200034a6 	.word	0x200034a6
 800c0cc:	08025f18 	.word	0x08025f18
 800c0d0:	20002e70 	.word	0x20002e70
 800c0d4:	20002c48 	.word	0x20002c48
 800c0d8:	2000347c 	.word	0x2000347c

0800c0dc <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b089      	sub	sp, #36	; 0x24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800c0f2:	897b      	ldrh	r3, [r7, #10]
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	837b      	strh	r3, [r7, #26]
 800c0fc:	e039      	b.n	800c172 <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800c0fe:	8b7b      	ldrh	r3, [r7, #26]
 800c100:	08db      	lsrs	r3, r3, #3
 800c102:	b29b      	uxth	r3, r3
 800c104:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800c106:	8b7b      	ldrh	r3, [r7, #26]
 800c108:	f003 0307 	and.w	r3, r3, #7
 800c10c:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2b07      	cmp	r3, #7
 800c112:	d02a      	beq.n	800c16a <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	4413      	add	r3, r2
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	461a      	mov	r2, r3
 800c11e:	8b7b      	ldrh	r3, [r7, #26]
 800c120:	f003 0307 	and.w	r3, r3, #7
 800c124:	fa42 f303 	asr.w	r3, r2, r3
 800c128:	f003 0301 	and.w	r3, r3, #1
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d010      	beq.n	800c152 <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800c130:	8bfb      	ldrh	r3, [r7, #30]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	4413      	add	r3, r2
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	b25a      	sxtb	r2, r3
 800c13a:	7f7b      	ldrb	r3, [r7, #29]
 800c13c:	2101      	movs	r1, #1
 800c13e:	fa01 f303 	lsl.w	r3, r1, r3
 800c142:	b25b      	sxtb	r3, r3
 800c144:	4313      	orrs	r3, r2
 800c146:	b259      	sxtb	r1, r3
 800c148:	8bfb      	ldrh	r3, [r7, #30]
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	4413      	add	r3, r2
 800c14e:	b2ca      	uxtb	r2, r1
 800c150:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800c152:	7f7b      	ldrb	r3, [r7, #29]
 800c154:	3301      	adds	r3, #1
 800c156:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800c158:	7f7b      	ldrb	r3, [r7, #29]
 800c15a:	2b08      	cmp	r3, #8
 800c15c:	d106      	bne.n	800c16c <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800c162:	8bfb      	ldrh	r3, [r7, #30]
 800c164:	3301      	adds	r3, #1
 800c166:	83fb      	strh	r3, [r7, #30]
 800c168:	e000      	b.n	800c16c <ExtractAppData+0x90>
			continue;
 800c16a:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c16c:	8b7b      	ldrh	r3, [r7, #26]
 800c16e:	3301      	adds	r3, #1
 800c170:	837b      	strh	r3, [r7, #26]
 800c172:	8b7a      	ldrh	r2, [r7, #26]
 800c174:	8b3b      	ldrh	r3, [r7, #24]
 800c176:	429a      	cmp	r2, r3
 800c178:	d3c1      	bcc.n	800c0fe <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800c17a:	8bfb      	ldrh	r3, [r7, #30]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3724      	adds	r7, #36	; 0x24
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800c188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c18c:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800c190:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800c192:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800c196:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800c19a:	2300      	movs	r3, #0
 800c19c:	6013      	str	r3, [r2, #0]
 800c19e:	1d10      	adds	r0, r2, #4
 800c1a0:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	f016 f8f4 	bl	8022394 <memset>
	uint16_t App_data_Traverser = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800c1d0:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	48ba      	ldr	r0, [pc, #744]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c1d8:	f016 f8dc 	bl	8022394 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800c1dc:	4bb9      	ldr	r3, [pc, #740]	; (800c4c4 <Form_Siemens_Reply+0x33c>)
 800c1de:	7b1b      	ldrb	r3, [r3, #12]
 800c1e0:	4ab7      	ldr	r2, [pc, #732]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c1e2:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800c1e4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c1e8:	b2d8      	uxtb	r0, r3
 800c1ea:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c1ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c1f2:	1899      	adds	r1, r3, r2
 800c1f4:	4bb2      	ldr	r3, [pc, #712]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	461c      	mov	r4, r3
 800c1fe:	4615      	mov	r5, r2
 800c200:	2301      	movs	r3, #1
 800c202:	9302      	str	r3, [sp, #8]
 800c204:	e9cd 4500 	strd	r4, r5, [sp]
 800c208:	460a      	mov	r2, r1
 800c20a:	2108      	movs	r1, #8
 800c20c:	f001 faf2 	bl	800d7f4 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c210:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c214:	3308      	adds	r3, #8
 800c216:	2b00      	cmp	r3, #0
 800c218:	da00      	bge.n	800c21c <Form_Siemens_Reply+0x94>
 800c21a:	3307      	adds	r3, #7
 800c21c:	10db      	asrs	r3, r3, #3
 800c21e:	b29a      	uxth	r2, r3
 800c220:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c224:	4413      	add	r3, r2
 800c226:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c22a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c22e:	3308      	adds	r3, #8
 800c230:	b29b      	uxth	r3, r3
 800c232:	b21b      	sxth	r3, r3
 800c234:	425a      	negs	r2, r3
 800c236:	f003 0107 	and.w	r1, r3, #7
 800c23a:	f002 0307 	and.w	r3, r2, #7
 800c23e:	bf58      	it	pl
 800c240:	4259      	negpl	r1, r3
 800c242:	b20b      	sxth	r3, r1
 800c244:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800c248:	4b9e      	ldr	r3, [pc, #632]	; (800c4c4 <Form_Siemens_Reply+0x33c>)
 800c24a:	691a      	ldr	r2, [r3, #16]
 800c24c:	4b9c      	ldr	r3, [pc, #624]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c24e:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800c250:	4b9c      	ldr	r3, [pc, #624]	; (800c4c4 <Form_Siemens_Reply+0x33c>)
 800c252:	695a      	ldr	r2, [r3, #20]
 800c254:	4b9a      	ldr	r3, [pc, #616]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c256:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800c258:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c25c:	b2d8      	uxtb	r0, r3
 800c25e:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c262:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c266:	1899      	adds	r1, r3, r2
 800c268:	4b95      	ldr	r3, [pc, #596]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	4698      	mov	r8, r3
 800c270:	4691      	mov	r9, r2
 800c272:	2300      	movs	r3, #0
 800c274:	9302      	str	r3, [sp, #8]
 800c276:	e9cd 8900 	strd	r8, r9, [sp]
 800c27a:	460a      	mov	r2, r1
 800c27c:	2118      	movs	r1, #24
 800c27e:	f001 fab9 	bl	800d7f4 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800c282:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c286:	3318      	adds	r3, #24
 800c288:	2b00      	cmp	r3, #0
 800c28a:	da00      	bge.n	800c28e <Form_Siemens_Reply+0x106>
 800c28c:	3307      	adds	r3, #7
 800c28e:	10db      	asrs	r3, r3, #3
 800c290:	b29a      	uxth	r2, r3
 800c292:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c296:	4413      	add	r3, r2
 800c298:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c29c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c2a0:	3318      	adds	r3, #24
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	b21b      	sxth	r3, r3
 800c2a6:	425a      	negs	r2, r3
 800c2a8:	f003 0107 	and.w	r1, r3, #7
 800c2ac:	f002 0307 	and.w	r3, r2, #7
 800c2b0:	bf58      	it	pl
 800c2b2:	4259      	negpl	r1, r3
 800c2b4:	b20b      	sxth	r3, r1
 800c2b6:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800c2ba:	4b82      	ldr	r3, [pc, #520]	; (800c4c4 <Form_Siemens_Reply+0x33c>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	4a80      	ldr	r2, [pc, #512]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c2c0:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800c2c2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c2c6:	b2d8      	uxtb	r0, r3
 800c2c8:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c2cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c2d0:	1899      	adds	r1, r3, r2
 800c2d2:	4b7b      	ldr	r3, [pc, #492]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c2d4:	7b1b      	ldrb	r3, [r3, #12]
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	2200      	movs	r2, #0
 800c2da:	469a      	mov	sl, r3
 800c2dc:	4693      	mov	fp, r2
 800c2de:	2301      	movs	r3, #1
 800c2e0:	9302      	str	r3, [sp, #8]
 800c2e2:	e9cd ab00 	strd	sl, fp, [sp]
 800c2e6:	460a      	mov	r2, r1
 800c2e8:	2108      	movs	r1, #8
 800c2ea:	f001 fa83 	bl	800d7f4 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c2ee:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da00      	bge.n	800c2fa <Form_Siemens_Reply+0x172>
 800c2f8:	3307      	adds	r3, #7
 800c2fa:	10db      	asrs	r3, r3, #3
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c302:	4413      	add	r3, r2
 800c304:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c308:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c30c:	3308      	adds	r3, #8
 800c30e:	b29b      	uxth	r3, r3
 800c310:	b21b      	sxth	r3, r3
 800c312:	425a      	negs	r2, r3
 800c314:	f003 0107 	and.w	r1, r3, #7
 800c318:	f002 0307 	and.w	r3, r2, #7
 800c31c:	bf58      	it	pl
 800c31e:	4259      	negpl	r1, r3
 800c320:	b20b      	sxth	r3, r1
 800c322:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800c326:	4b67      	ldr	r3, [pc, #412]	; (800c4c4 <Form_Siemens_Reply+0x33c>)
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	4b65      	ldr	r3, [pc, #404]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c32c:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800c32e:	4b65      	ldr	r3, [pc, #404]	; (800c4c4 <Form_Siemens_Reply+0x33c>)
 800c330:	689a      	ldr	r2, [r3, #8]
 800c332:	4b63      	ldr	r3, [pc, #396]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c334:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800c336:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c33a:	b2d8      	uxtb	r0, r3
 800c33c:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c340:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c344:	1899      	adds	r1, r3, r2
 800c346:	4b5e      	ldr	r3, [pc, #376]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	2200      	movs	r2, #0
 800c34c:	643b      	str	r3, [r7, #64]	; 0x40
 800c34e:	647a      	str	r2, [r7, #68]	; 0x44
 800c350:	2300      	movs	r3, #0
 800c352:	9302      	str	r3, [sp, #8]
 800c354:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c358:	e9cd 3400 	strd	r3, r4, [sp]
 800c35c:	460a      	mov	r2, r1
 800c35e:	2118      	movs	r1, #24
 800c360:	f001 fa48 	bl	800d7f4 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800c364:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c368:	3318      	adds	r3, #24
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	da00      	bge.n	800c370 <Form_Siemens_Reply+0x1e8>
 800c36e:	3307      	adds	r3, #7
 800c370:	10db      	asrs	r3, r3, #3
 800c372:	b29a      	uxth	r2, r3
 800c374:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c378:	4413      	add	r3, r2
 800c37a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c37e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c382:	3318      	adds	r3, #24
 800c384:	b29b      	uxth	r3, r3
 800c386:	b21b      	sxth	r3, r3
 800c388:	425a      	negs	r2, r3
 800c38a:	f003 0107 	and.w	r1, r3, #7
 800c38e:	f002 0307 	and.w	r3, r2, #7
 800c392:	bf58      	it	pl
 800c394:	4259      	negpl	r1, r3
 800c396:	b20b      	sxth	r3, r1
 800c398:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
 800c39c:	4a48      	ldr	r2, [pc, #288]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c39e:	230a      	movs	r3, #10
 800c3a0:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800c3a2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c3a6:	b2d8      	uxtb	r0, r3
 800c3a8:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c3ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c3b0:	1899      	adds	r1, r3, r2
 800c3b2:	4b43      	ldr	r3, [pc, #268]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c3b4:	7e1b      	ldrb	r3, [r3, #24]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9302      	str	r3, [sp, #8]
 800c3c2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c3c6:	e9cd 3400 	strd	r3, r4, [sp]
 800c3ca:	460a      	mov	r2, r1
 800c3cc:	2108      	movs	r1, #8
 800c3ce:	f001 fa11 	bl	800d7f4 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c3d2:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	da00      	bge.n	800c3de <Form_Siemens_Reply+0x256>
 800c3dc:	3307      	adds	r3, #7
 800c3de:	10db      	asrs	r3, r3, #3
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c3e6:	4413      	add	r3, r2
 800c3e8:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c3ec:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c3f0:	3308      	adds	r3, #8
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	b21b      	sxth	r3, r3
 800c3f6:	425a      	negs	r2, r3
 800c3f8:	f003 0107 	and.w	r1, r3, #7
 800c3fc:	f002 0307 	and.w	r3, r2, #7
 800c400:	bf58      	it	pl
 800c402:	4259      	negpl	r1, r3
 800c404:	b20b      	sxth	r3, r1
 800c406:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800c40a:	4a2d      	ldr	r2, [pc, #180]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c40c:	2301      	movs	r3, #1
 800c40e:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800c410:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c414:	b2d8      	uxtb	r0, r3
 800c416:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c41a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c41e:	1899      	adds	r1, r3, r2
 800c420:	4b27      	ldr	r3, [pc, #156]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c422:	7e5b      	ldrb	r3, [r3, #25]
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2200      	movs	r2, #0
 800c428:	633b      	str	r3, [r7, #48]	; 0x30
 800c42a:	637a      	str	r2, [r7, #52]	; 0x34
 800c42c:	2301      	movs	r3, #1
 800c42e:	9302      	str	r3, [sp, #8]
 800c430:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c434:	e9cd 3400 	strd	r3, r4, [sp]
 800c438:	460a      	mov	r2, r1
 800c43a:	2108      	movs	r1, #8
 800c43c:	f001 f9da 	bl	800d7f4 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c440:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c444:	3308      	adds	r3, #8
 800c446:	2b00      	cmp	r3, #0
 800c448:	da00      	bge.n	800c44c <Form_Siemens_Reply+0x2c4>
 800c44a:	3307      	adds	r3, #7
 800c44c:	10db      	asrs	r3, r3, #3
 800c44e:	b29a      	uxth	r2, r3
 800c450:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c454:	4413      	add	r3, r2
 800c456:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c45a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c45e:	3308      	adds	r3, #8
 800c460:	b29b      	uxth	r3, r3
 800c462:	b21b      	sxth	r3, r3
 800c464:	425a      	negs	r2, r3
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	f002 0207 	and.w	r2, r2, #7
 800c46e:	bf58      	it	pl
 800c470:	4253      	negpl	r3, r2
 800c472:	b21b      	sxth	r3, r3
 800c474:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800c478:	4b12      	ldr	r3, [pc, #72]	; (800c4c4 <Form_Siemens_Reply+0x33c>)
 800c47a:	7edb      	ldrb	r3, [r3, #27]
 800c47c:	4a10      	ldr	r2, [pc, #64]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c47e:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800c480:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c484:	b2d8      	uxtb	r0, r3
 800c486:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c48a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c48e:	1899      	adds	r1, r3, r2
 800c490:	4b0b      	ldr	r3, [pc, #44]	; (800c4c0 <Form_Siemens_Reply+0x338>)
 800c492:	7e9b      	ldrb	r3, [r3, #26]
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2200      	movs	r2, #0
 800c498:	62bb      	str	r3, [r7, #40]	; 0x28
 800c49a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c49c:	2302      	movs	r3, #2
 800c49e:	9302      	str	r3, [sp, #8]
 800c4a0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c4a4:	e9cd 3400 	strd	r3, r4, [sp]
 800c4a8:	460a      	mov	r2, r1
 800c4aa:	2108      	movs	r1, #8
 800c4ac:	f001 f9a2 	bl	800d7f4 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c4b0:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c4b4:	3308      	adds	r3, #8
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	da06      	bge.n	800c4c8 <Form_Siemens_Reply+0x340>
 800c4ba:	3307      	adds	r3, #7
 800c4bc:	e004      	b.n	800c4c8 <Form_Siemens_Reply+0x340>
 800c4be:	bf00      	nop
 800c4c0:	20002a20 	.word	0x20002a20
 800c4c4:	200027f8 	.word	0x200027f8
 800c4c8:	10db      	asrs	r3, r3, #3
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c4d0:	4413      	add	r3, r2
 800c4d2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c4d6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c4da:	3308      	adds	r3, #8
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	b21b      	sxth	r3, r3
 800c4e0:	425a      	negs	r2, r3
 800c4e2:	f003 0307 	and.w	r3, r3, #7
 800c4e6:	f002 0207 	and.w	r2, r2, #7
 800c4ea:	bf58      	it	pl
 800c4ec:	4253      	negpl	r3, r2
 800c4ee:	b21b      	sxth	r3, r3
 800c4f0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800c4f4:	4bc4      	ldr	r3, [pc, #784]	; (800c808 <Form_Siemens_Reply+0x680>)
 800c4f6:	7e9a      	ldrb	r2, [r3, #26]
 800c4f8:	4bc4      	ldr	r3, [pc, #784]	; (800c80c <Form_Siemens_Reply+0x684>)
 800c4fa:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800c4fc:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c500:	b2d8      	uxtb	r0, r3
 800c502:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c506:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c50a:	441a      	add	r2, r3
 800c50c:	4bbf      	ldr	r3, [pc, #764]	; (800c80c <Form_Siemens_Reply+0x684>)
 800c50e:	7edb      	ldrb	r3, [r3, #27]
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2100      	movs	r1, #0
 800c514:	623b      	str	r3, [r7, #32]
 800c516:	6279      	str	r1, [r7, #36]	; 0x24
 800c518:	2302      	movs	r3, #2
 800c51a:	9302      	str	r3, [sp, #8]
 800c51c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c520:	e9cd 3400 	strd	r3, r4, [sp]
 800c524:	2108      	movs	r1, #8
 800c526:	f001 f965 	bl	800d7f4 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c52a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c52e:	3308      	adds	r3, #8
 800c530:	2b00      	cmp	r3, #0
 800c532:	da00      	bge.n	800c536 <Form_Siemens_Reply+0x3ae>
 800c534:	3307      	adds	r3, #7
 800c536:	10db      	asrs	r3, r3, #3
 800c538:	b29a      	uxth	r2, r3
 800c53a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c53e:	4413      	add	r3, r2
 800c540:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c544:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c548:	3308      	adds	r3, #8
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	b21b      	sxth	r3, r3
 800c54e:	425a      	negs	r2, r3
 800c550:	f003 0307 	and.w	r3, r3, #7
 800c554:	f002 0207 	and.w	r2, r2, #7
 800c558:	bf58      	it	pl
 800c55a:	4253      	negpl	r3, r2
 800c55c:	b21b      	sxth	r3, r3
 800c55e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800c562:	4ba9      	ldr	r3, [pc, #676]	; (800c808 <Form_Siemens_Reply+0x680>)
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	4aa9      	ldr	r2, [pc, #676]	; (800c80c <Form_Siemens_Reply+0x684>)
 800c568:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800c56a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c56e:	b2d8      	uxtb	r0, r3
 800c570:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c574:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c578:	4413      	add	r3, r2
 800c57a:	4aa4      	ldr	r2, [pc, #656]	; (800c80c <Form_Siemens_Reply+0x684>)
 800c57c:	69d2      	ldr	r2, [r2, #28]
 800c57e:	2100      	movs	r1, #0
 800c580:	61ba      	str	r2, [r7, #24]
 800c582:	61f9      	str	r1, [r7, #28]
 800c584:	2202      	movs	r2, #2
 800c586:	9202      	str	r2, [sp, #8]
 800c588:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c58c:	e9cd 1200 	strd	r1, r2, [sp]
 800c590:	461a      	mov	r2, r3
 800c592:	2120      	movs	r1, #32
 800c594:	f001 f92e 	bl	800d7f4 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800c598:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c59c:	3320      	adds	r3, #32
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	da00      	bge.n	800c5a4 <Form_Siemens_Reply+0x41c>
 800c5a2:	3307      	adds	r3, #7
 800c5a4:	10db      	asrs	r3, r3, #3
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c5ac:	4413      	add	r3, r2
 800c5ae:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c5b2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c5b6:	3320      	adds	r3, #32
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	b21b      	sxth	r3, r3
 800c5bc:	425a      	negs	r2, r3
 800c5be:	f003 0307 	and.w	r3, r3, #7
 800c5c2:	f002 0207 	and.w	r2, r2, #7
 800c5c6:	bf58      	it	pl
 800c5c8:	4253      	negpl	r3, r2
 800c5ca:	b21b      	sxth	r3, r3
 800c5cc:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800c5d0:	4b8f      	ldr	r3, [pc, #572]	; (800c810 <Form_Siemens_Reply+0x688>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a8d      	ldr	r2, [pc, #564]	; (800c80c <Form_Siemens_Reply+0x684>)
 800c5d6:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800c5d8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c5dc:	b2d8      	uxtb	r0, r3
 800c5de:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c5e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c5e6:	4413      	add	r3, r2
 800c5e8:	4a88      	ldr	r2, [pc, #544]	; (800c80c <Form_Siemens_Reply+0x684>)
 800c5ea:	6a12      	ldr	r2, [r2, #32]
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	613a      	str	r2, [r7, #16]
 800c5f0:	6179      	str	r1, [r7, #20]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	9202      	str	r2, [sp, #8]
 800c5f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c5fa:	e9cd 1200 	strd	r1, r2, [sp]
 800c5fe:	461a      	mov	r2, r3
 800c600:	2120      	movs	r1, #32
 800c602:	f001 f8f7 	bl	800d7f4 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800c606:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c60a:	3320      	adds	r3, #32
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	da00      	bge.n	800c612 <Form_Siemens_Reply+0x48a>
 800c610:	3307      	adds	r3, #7
 800c612:	10db      	asrs	r3, r3, #3
 800c614:	b29a      	uxth	r2, r3
 800c616:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c61a:	4413      	add	r3, r2
 800c61c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c620:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c624:	3320      	adds	r3, #32
 800c626:	b29b      	uxth	r3, r3
 800c628:	b21b      	sxth	r3, r3
 800c62a:	425a      	negs	r2, r3
 800c62c:	f003 0307 	and.w	r3, r3, #7
 800c630:	f002 0207 	and.w	r2, r2, #7
 800c634:	bf58      	it	pl
 800c636:	4253      	negpl	r3, r2
 800c638:	b21b      	sxth	r3, r3
 800c63a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800c63e:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800c642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c646:	2201      	movs	r2, #1
 800c648:	4618      	mov	r0, r3
 800c64a:	f001 fa39 	bl	800dac0 <Data_Compliment>
 800c64e:	4603      	mov	r3, r0
 800c650:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800c654:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c658:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c65c:	4611      	mov	r1, r2
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 ff32 	bl	800d4c8 <Siemens_CRC>
 800c664:	4603      	mov	r3, r0
 800c666:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c66a:	4b6a      	ldr	r3, [pc, #424]	; (800c814 <Form_Siemens_Reply+0x68c>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	09db      	lsrs	r3, r3, #7
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	2b00      	cmp	r3, #0
 800c676:	d02c      	beq.n	800c6d2 <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800c678:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c67c:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c680:	4865      	ldr	r0, [pc, #404]	; (800c818 <Form_Siemens_Reply+0x690>)
 800c682:	f016 f80b 	bl	802269c <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800c686:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c68a:	4619      	mov	r1, r3
 800c68c:	4863      	ldr	r0, [pc, #396]	; (800c81c <Form_Siemens_Reply+0x694>)
 800c68e:	f015 ff69 	bl	8022564 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c692:	4863      	ldr	r0, [pc, #396]	; (800c820 <Form_Siemens_Reply+0x698>)
 800c694:	f00d fc0e 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800c698:	4601      	mov	r1, r0
 800c69a:	4b62      	ldr	r3, [pc, #392]	; (800c824 <Form_Siemens_Reply+0x69c>)
 800c69c:	fba3 2301 	umull	r2, r3, r3, r1
 800c6a0:	0bda      	lsrs	r2, r3, #15
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	041b      	lsls	r3, r3, #16
 800c6a6:	1a9b      	subs	r3, r3, r2
 800c6a8:	1aca      	subs	r2, r1, r3
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800c6b0:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800c6b4:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d104      	bne.n	800c6c6 <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800c6bc:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800c6c6:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	4856      	ldr	r0, [pc, #344]	; (800c828 <Form_Siemens_Reply+0x6a0>)
 800c6ce:	f015 ff49 	bl	8022564 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800c6d2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6d6:	b2d8      	uxtb	r0, r3
 800c6d8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c6dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c6e0:	4413      	add	r3, r2
 800c6e2:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	60ba      	str	r2, [r7, #8]
 800c6ea:	60f9      	str	r1, [r7, #12]
 800c6ec:	2202      	movs	r2, #2
 800c6ee:	9202      	str	r2, [sp, #8]
 800c6f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c6f4:	e9cd 1200 	strd	r1, r2, [sp]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	2110      	movs	r1, #16
 800c6fc:	f001 f87a 	bl	800d7f4 <Insert_cal_parity>
	BITSTUFFINC(16);
 800c700:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c704:	3310      	adds	r3, #16
 800c706:	2b00      	cmp	r3, #0
 800c708:	da00      	bge.n	800c70c <Form_Siemens_Reply+0x584>
 800c70a:	3307      	adds	r3, #7
 800c70c:	10db      	asrs	r3, r3, #3
 800c70e:	b29a      	uxth	r2, r3
 800c710:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c714:	4413      	add	r3, r2
 800c716:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c71a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c71e:	3310      	adds	r3, #16
 800c720:	b29b      	uxth	r3, r3
 800c722:	b21b      	sxth	r3, r3
 800c724:	425a      	negs	r2, r3
 800c726:	f003 0307 	and.w	r3, r3, #7
 800c72a:	f002 0207 	and.w	r2, r2, #7
 800c72e:	bf58      	it	pl
 800c730:	4253      	negpl	r3, r2
 800c732:	b21b      	sxth	r3, r3
 800c734:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800c738:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c73c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c740:	441a      	add	r2, r3
 800c742:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c746:	3b02      	subs	r3, #2
 800c748:	b29b      	uxth	r3, r3
 800c74a:	4619      	mov	r1, r3
 800c74c:	4610      	mov	r0, r2
 800c74e:	f000 febb 	bl	800d4c8 <Siemens_CRC>
 800c752:	4603      	mov	r3, r0
 800c754:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c758:	4b2e      	ldr	r3, [pc, #184]	; (800c814 <Form_Siemens_Reply+0x68c>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	0a5b      	lsrs	r3, r3, #9
 800c75e:	f003 0301 	and.w	r3, r3, #1
 800c762:	2b00      	cmp	r3, #0
 800c764:	d02c      	beq.n	800c7c0 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800c766:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c76a:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c76e:	482a      	ldr	r0, [pc, #168]	; (800c818 <Form_Siemens_Reply+0x690>)
 800c770:	f015 ff94 	bl	802269c <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800c774:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c778:	4619      	mov	r1, r3
 800c77a:	482c      	ldr	r0, [pc, #176]	; (800c82c <Form_Siemens_Reply+0x6a4>)
 800c77c:	f015 fef2 	bl	8022564 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c780:	4827      	ldr	r0, [pc, #156]	; (800c820 <Form_Siemens_Reply+0x698>)
 800c782:	f00d fb97 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 800c786:	4601      	mov	r1, r0
 800c788:	4b26      	ldr	r3, [pc, #152]	; (800c824 <Form_Siemens_Reply+0x69c>)
 800c78a:	fba3 2301 	umull	r2, r3, r3, r1
 800c78e:	0bda      	lsrs	r2, r3, #15
 800c790:	4613      	mov	r3, r2
 800c792:	041b      	lsls	r3, r3, #16
 800c794:	1a9b      	subs	r3, r3, r2
 800c796:	1aca      	subs	r2, r1, r3
 800c798:	4613      	mov	r3, r2
 800c79a:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800c79e:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800c7a2:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d104      	bne.n	800c7b4 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800c7aa:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800c7b4:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	481d      	ldr	r0, [pc, #116]	; (800c830 <Form_Siemens_Reply+0x6a8>)
 800c7bc:	f015 fed2 	bl	8022564 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800c7c0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800c7ca:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c7ce:	b2d8      	uxtb	r0, r3
 800c7d0:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c7d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c7d8:	4413      	add	r3, r2
 800c7da:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800c7de:	2100      	movs	r1, #0
 800c7e0:	603a      	str	r2, [r7, #0]
 800c7e2:	6079      	str	r1, [r7, #4]
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	9202      	str	r2, [sp, #8]
 800c7e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c7ec:	e9cd 1200 	strd	r1, r2, [sp]
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	2110      	movs	r1, #16
 800c7f4:	f000 fffe 	bl	800d7f4 <Insert_cal_parity>
	BITSTUFFINC(16);
 800c7f8:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c7fc:	3310      	adds	r3, #16
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	da18      	bge.n	800c834 <Form_Siemens_Reply+0x6ac>
 800c802:	3307      	adds	r3, #7
 800c804:	e016      	b.n	800c834 <Form_Siemens_Reply+0x6ac>
 800c806:	bf00      	nop
 800c808:	200027f8 	.word	0x200027f8
 800c80c:	20002a20 	.word	0x20002a20
 800c810:	20003cbc 	.word	0x20003cbc
 800c814:	20003474 	.word	0x20003474
 800c818:	08025c8c 	.word	0x08025c8c
 800c81c:	08025f3c 	.word	0x08025f3c
 800c820:	20009c7c 	.word	0x20009c7c
 800c824:	80008001 	.word	0x80008001
 800c828:	08025f50 	.word	0x08025f50
 800c82c:	08025f64 	.word	0x08025f64
 800c830:	08025f80 	.word	0x08025f80
 800c834:	10db      	asrs	r3, r3, #3
 800c836:	b29a      	uxth	r2, r3
 800c838:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c83c:	4413      	add	r3, r2
 800c83e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c842:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c846:	3310      	adds	r3, #16
 800c848:	b29b      	uxth	r3, r3
 800c84a:	b21b      	sxth	r3, r3
 800c84c:	425a      	negs	r2, r3
 800c84e:	f003 0307 	and.w	r3, r3, #7
 800c852:	f002 0207 	and.w	r2, r2, #7
 800c856:	bf58      	it	pl
 800c858:	4253      	negpl	r3, r2
 800c85a:	b21b      	sxth	r3, r3
 800c85c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800c860:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c864:	3302      	adds	r3, #2
 800c866:	461a      	mov	r2, r3
 800c868:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c86c:	4619      	mov	r1, r3
 800c86e:	481e      	ldr	r0, [pc, #120]	; (800c8e8 <Form_Siemens_Reply+0x760>)
 800c870:	f015 fd68 	bl	8022344 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800c874:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c878:	3302      	adds	r3, #2
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	4b1a      	ldr	r3, [pc, #104]	; (800c8e8 <Form_Siemens_Reply+0x760>)
 800c87e:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800c882:	f001 f989 	bl	800db98 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c886:	4b19      	ldr	r3, [pc, #100]	; (800c8ec <Form_Siemens_Reply+0x764>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	099b      	lsrs	r3, r3, #6
 800c88c:	f003 0301 	and.w	r3, r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	d003      	beq.n	800c89c <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800c894:	4816      	ldr	r0, [pc, #88]	; (800c8f0 <Form_Siemens_Reply+0x768>)
 800c896:	f015 ff01 	bl	802269c <puts>
 800c89a:	e00f      	b.n	800c8bc <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800c89c:	4b15      	ldr	r3, [pc, #84]	; (800c8f4 <Form_Siemens_Reply+0x76c>)
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d10b      	bne.n	800c8bc <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800c8a4:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	3302      	adds	r3, #2
 800c8ac:	b2d9      	uxtb	r1, r3
 800c8ae:	4a12      	ldr	r2, [pc, #72]	; (800c8f8 <Form_Siemens_Reply+0x770>)
 800c8b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8b4:	6812      	ldr	r2, [r2, #0]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f002 fbd8 	bl	800f06c <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800c8bc:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	480e      	ldr	r0, [pc, #56]	; (800c8fc <Form_Siemens_Reply+0x774>)
 800c8c4:	f015 fd66 	bl	8022394 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800c8c8:	4a0c      	ldr	r2, [pc, #48]	; (800c8fc <Form_Siemens_Reply+0x774>)
 800c8ca:	4b0d      	ldr	r3, [pc, #52]	; (800c900 <Form_Siemens_Reply+0x778>)
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	f44f 730a 	mov.w	r3, #552	; 0x228
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	f015 fd35 	bl	8022344 <memcpy>
	UNUSED(App_data_Traverser);
}
 800c8da:	bf00      	nop
 800c8dc:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20002e70 	.word	0x20002e70
 800c8ec:	20003474 	.word	0x20003474
 800c8f0:	08025fa0 	.word	0x08025fa0
 800c8f4:	20004b9d 	.word	0x20004b9d
 800c8f8:	20005204 	.word	0x20005204
 800c8fc:	20002c48 	.word	0x20002c48
 800c900:	20002a20 	.word	0x20002a20

0800c904 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800c908:	4b4d      	ldr	r3, [pc, #308]	; (800ca40 <ProcessSendingSignals2MIE+0x13c>)
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f002 f83d 	bl	800e98c <HAL_Elaps_Ticks>
 800c912:	4602      	mov	r2, r0
 800c914:	4b4b      	ldr	r3, [pc, #300]	; (800ca44 <ProcessSendingSignals2MIE+0x140>)
 800c916:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c91a:	429a      	cmp	r2, r3
 800c91c:	f240 808d 	bls.w	800ca3a <ProcessSendingSignals2MIE+0x136>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800c920:	4b47      	ldr	r3, [pc, #284]	; (800ca40 <ProcessSendingSignals2MIE+0x13c>)
 800c922:	781b      	ldrb	r3, [r3, #0]
		if(
 800c924:	2b00      	cmp	r3, #0
 800c926:	d113      	bne.n	800c950 <ProcessSendingSignals2MIE+0x4c>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800c928:	4b45      	ldr	r3, [pc, #276]	; (800ca40 <ProcessSendingSignals2MIE+0x13c>)
 800c92a:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d10f      	bne.n	800c950 <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800c930:	4b45      	ldr	r3, [pc, #276]	; (800ca48 <ProcessSendingSignals2MIE+0x144>)
 800c932:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800c934:	2b01      	cmp	r3, #1
 800c936:	d10b      	bne.n	800c950 <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800c938:	4b44      	ldr	r3, [pc, #272]	; (800ca4c <ProcessSendingSignals2MIE+0x148>)
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d107      	bne.n	800c950 <ProcessSendingSignals2MIE+0x4c>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800c940:	4b43      	ldr	r3, [pc, #268]	; (800ca50 <ProcessSendingSignals2MIE+0x14c>)
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	461a      	mov	r2, r3
 800c946:	4943      	ldr	r1, [pc, #268]	; (800ca54 <ProcessSendingSignals2MIE+0x150>)
 800c948:	4843      	ldr	r0, [pc, #268]	; (800ca58 <ProcessSendingSignals2MIE+0x154>)
 800c94a:	f015 fcfb 	bl	8022344 <memcpy>
 800c94e:	e02d      	b.n	800c9ac <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800c950:	4b3d      	ldr	r3, [pc, #244]	; (800ca48 <ProcessSendingSignals2MIE+0x144>)
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d10f      	bne.n	800c978 <ProcessSendingSignals2MIE+0x74>
 800c958:	4b3c      	ldr	r3, [pc, #240]	; (800ca4c <ProcessSendingSignals2MIE+0x148>)
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10b      	bne.n	800c978 <ProcessSendingSignals2MIE+0x74>
 800c960:	4b37      	ldr	r3, [pc, #220]	; (800ca40 <ProcessSendingSignals2MIE+0x13c>)
 800c962:	785b      	ldrb	r3, [r3, #1]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d107      	bne.n	800c978 <ProcessSendingSignals2MIE+0x74>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800c968:	4b3c      	ldr	r3, [pc, #240]	; (800ca5c <ProcessSendingSignals2MIE+0x158>)
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	461a      	mov	r2, r3
 800c96e:	493c      	ldr	r1, [pc, #240]	; (800ca60 <ProcessSendingSignals2MIE+0x15c>)
 800c970:	4839      	ldr	r0, [pc, #228]	; (800ca58 <ProcessSendingSignals2MIE+0x154>)
 800c972:	f015 fce7 	bl	8022344 <memcpy>
 800c976:	e019      	b.n	800c9ac <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800c978:	4b34      	ldr	r3, [pc, #208]	; (800ca4c <ProcessSendingSignals2MIE+0x148>)
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d10f      	bne.n	800c9a0 <ProcessSendingSignals2MIE+0x9c>
 800c980:	4b31      	ldr	r3, [pc, #196]	; (800ca48 <ProcessSendingSignals2MIE+0x144>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10b      	bne.n	800c9a0 <ProcessSendingSignals2MIE+0x9c>
 800c988:	4b2d      	ldr	r3, [pc, #180]	; (800ca40 <ProcessSendingSignals2MIE+0x13c>)
 800c98a:	785b      	ldrb	r3, [r3, #1]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d107      	bne.n	800c9a0 <ProcessSendingSignals2MIE+0x9c>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800c990:	4b2f      	ldr	r3, [pc, #188]	; (800ca50 <ProcessSendingSignals2MIE+0x14c>)
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	461a      	mov	r2, r3
 800c996:	492f      	ldr	r1, [pc, #188]	; (800ca54 <ProcessSendingSignals2MIE+0x150>)
 800c998:	482f      	ldr	r0, [pc, #188]	; (800ca58 <ProcessSendingSignals2MIE+0x154>)
 800c99a:	f015 fcd3 	bl	8022344 <memcpy>
 800c99e:	e005      	b.n	800c9ac <ProcessSendingSignals2MIE+0xa8>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800c9a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	482c      	ldr	r0, [pc, #176]	; (800ca58 <ProcessSendingSignals2MIE+0x154>)
 800c9a8:	f015 fcf4 	bl	8022394 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800c9ac:	4b27      	ldr	r3, [pc, #156]	; (800ca4c <ProcessSendingSignals2MIE+0x148>)
 800c9ae:	885b      	ldrh	r3, [r3, #2]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	4b24      	ldr	r3, [pc, #144]	; (800ca44 <ProcessSendingSignals2MIE+0x140>)
 800c9b4:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d30d      	bcc.n	800c9d8 <ProcessSendingSignals2MIE+0xd4>
 800c9bc:	4b22      	ldr	r3, [pc, #136]	; (800ca48 <ProcessSendingSignals2MIE+0x144>)
 800c9be:	885b      	ldrh	r3, [r3, #2]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	4b20      	ldr	r3, [pc, #128]	; (800ca44 <ProcessSendingSignals2MIE+0x140>)
 800c9c4:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d305      	bcc.n	800c9d8 <ProcessSendingSignals2MIE+0xd4>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800c9cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	4821      	ldr	r0, [pc, #132]	; (800ca58 <ProcessSendingSignals2MIE+0x154>)
 800c9d4:	f015 fcde 	bl	8022394 <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800c9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ca44 <ProcessSendingSignals2MIE+0x140>)
 800c9da:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	4b1f      	ldr	r3, [pc, #124]	; (800ca64 <ProcessSendingSignals2MIE+0x160>)
 800c9e6:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800c9e8:	4b1e      	ldr	r3, [pc, #120]	; (800ca64 <ProcessSendingSignals2MIE+0x160>)
 800c9ea:	881b      	ldrh	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d009      	beq.n	800ca04 <ProcessSendingSignals2MIE+0x100>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800c9f0:	4b14      	ldr	r3, [pc, #80]	; (800ca44 <ProcessSendingSignals2MIE+0x140>)
 800c9f2:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c9f6:	08db      	lsrs	r3, r3, #3
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <ProcessSendingSignals2MIE+0x160>)
 800ca00:	801a      	strh	r2, [r3, #0]
 800ca02:	e006      	b.n	800ca12 <ProcessSendingSignals2MIE+0x10e>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800ca04:	4b0f      	ldr	r3, [pc, #60]	; (800ca44 <ProcessSendingSignals2MIE+0x140>)
 800ca06:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ca0a:	08db      	lsrs	r3, r3, #3
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	4b15      	ldr	r3, [pc, #84]	; (800ca64 <ProcessSendingSignals2MIE+0x160>)
 800ca10:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800ca12:	4915      	ldr	r1, [pc, #84]	; (800ca68 <ProcessSendingSignals2MIE+0x164>)
 800ca14:	4815      	ldr	r0, [pc, #84]	; (800ca6c <ProcessSendingSignals2MIE+0x168>)
 800ca16:	f7f3 fc13 	bl	8000240 <strcmp>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d007      	beq.n	800ca30 <ProcessSendingSignals2MIE+0x12c>
 800ca20:	4b07      	ldr	r3, [pc, #28]	; (800ca40 <ProcessSendingSignals2MIE+0x13c>)
 800ca22:	785b      	ldrb	r3, [r3, #1]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d103      	bne.n	800ca30 <ProcessSendingSignals2MIE+0x12c>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800ca28:	f240 1019 	movw	r0, #281	; 0x119
 800ca2c:	f002 fd2a 	bl	800f484 <TransmitCanPkt>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800ca30:	f008 fd8e 	bl	8015550 <HAL_GetTick>
 800ca34:	4603      	mov	r3, r0
 800ca36:	4a02      	ldr	r2, [pc, #8]	; (800ca40 <ProcessSendingSignals2MIE+0x13c>)
 800ca38:	6053      	str	r3, [r2, #4]
	}
}
 800ca3a:	bf00      	nop
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20003488 	.word	0x20003488
 800ca44:	20000304 	.word	0x20000304
 800ca48:	20003480 	.word	0x20003480
 800ca4c:	2000347c 	.word	0x2000347c
 800ca50:	200036a8 	.word	0x200036a8
 800ca54:	200036ac 	.word	0x200036ac
 800ca58:	200034a6 	.word	0x200034a6
 800ca5c:	200038ac 	.word	0x200038ac
 800ca60:	200038b0 	.word	0x200038b0
 800ca64:	200034a4 	.word	0x200034a4
 800ca68:	08025f0c 	.word	0x08025f0c
 800ca6c:	20000305 	.word	0x20000305

0800ca70 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800ca74:	4b0c      	ldr	r3, [pc, #48]	; (800caa8 <ProcessSelfSharing+0x38>)
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f001 ff87 	bl	800e98c <HAL_Elaps_Ticks>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	4b0a      	ldr	r3, [pc, #40]	; (800caac <ProcessSelfSharing+0x3c>)
 800ca82:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d90b      	bls.n	800caa2 <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800ca8a:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <ProcessSelfSharing+0x40>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 800ca90:	f240 2002 	movw	r0, #514	; 0x202
 800ca94:	f002 fcf6 	bl	800f484 <TransmitCanPkt>
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800ca98:	f008 fd5a 	bl	8015550 <HAL_GetTick>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	4a02      	ldr	r2, [pc, #8]	; (800caa8 <ProcessSelfSharing+0x38>)
 800caa0:	6093      	str	r3, [r2, #8]
	}
}
 800caa2:	bf00      	nop
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20003488 	.word	0x20003488
 800caac:	20000304 	.word	0x20000304
 800cab0:	2000347c 	.word	0x2000347c

0800cab4 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800cab8:	4b1a      	ldr	r3, [pc, #104]	; (800cb24 <ProcessDetectNoValidDataReceive+0x70>)
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d014      	beq.n	800caea <ProcessDetectNoValidDataReceive+0x36>
 800cac0:	4b18      	ldr	r3, [pc, #96]	; (800cb24 <ProcessDetectNoValidDataReceive+0x70>)
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f001 ff61 	bl	800e98c <HAL_Elaps_Ticks>
 800caca:	4602      	mov	r2, r0
 800cacc:	4b16      	ldr	r3, [pc, #88]	; (800cb28 <ProcessDetectNoValidDataReceive+0x74>)
 800cace:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d909      	bls.n	800caea <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800cad6:	4b15      	ldr	r3, [pc, #84]	; (800cb2c <ProcessDetectNoValidDataReceive+0x78>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d005      	beq.n	800caea <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800cade:	4814      	ldr	r0, [pc, #80]	; (800cb30 <ProcessDetectNoValidDataReceive+0x7c>)
 800cae0:	f015 fddc 	bl	802269c <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800cae4:	4b11      	ldr	r3, [pc, #68]	; (800cb2c <ProcessDetectNoValidDataReceive+0x78>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(
			(Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) &&
 800caea:	4b10      	ldr	r3, [pc, #64]	; (800cb2c <ProcessDetectNoValidDataReceive+0x78>)
 800caec:	885b      	ldrh	r3, [r3, #2]
 800caee:	461a      	mov	r2, r3
 800caf0:	4b0d      	ldr	r3, [pc, #52]	; (800cb28 <ProcessDetectNoValidDataReceive+0x74>)
 800caf2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
	if(
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d911      	bls.n	800cb1e <ProcessDetectNoValidDataReceive+0x6a>
			(Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800cafa:	4b0e      	ldr	r3, [pc, #56]	; (800cb34 <ProcessDetectNoValidDataReceive+0x80>)
 800cafc:	885b      	ldrh	r3, [r3, #2]
 800cafe:	461a      	mov	r2, r3
 800cb00:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <ProcessDetectNoValidDataReceive+0x74>)
 800cb02:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
			(Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) &&
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d909      	bls.n	800cb1e <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800cb0a:	4b08      	ldr	r3, [pc, #32]	; (800cb2c <ProcessDetectNoValidDataReceive+0x78>)
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d005      	beq.n	800cb1e <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800cb12:	4809      	ldr	r0, [pc, #36]	; (800cb38 <ProcessDetectNoValidDataReceive+0x84>)
 800cb14:	f015 fdc2 	bl	802269c <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800cb18:	4b04      	ldr	r3, [pc, #16]	; (800cb2c <ProcessDetectNoValidDataReceive+0x78>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800cb1e:	bf00      	nop
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	20003488 	.word	0x20003488
 800cb28:	20000304 	.word	0x20000304
 800cb2c:	2000347c 	.word	0x2000347c
 800cb30:	08025fc8 	.word	0x08025fc8
 800cb34:	20003480 	.word	0x20003480
 800cb38:	08025fe8 	.word	0x08025fe8

0800cb3c <SendRelays2Other>:

void SendRelays2Other(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800cb40:	4b09      	ldr	r3, [pc, #36]	; (800cb68 <SendRelays2Other+0x2c>)
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f001 ff21 	bl	800e98c <HAL_Elaps_Ticks>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb50:	d908      	bls.n	800cb64 <SendRelays2Other+0x28>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800cb52:	f44f 7002 	mov.w	r0, #520	; 0x208
 800cb56:	f002 fc95 	bl	800f484 <TransmitCanPkt>
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800cb5a:	f008 fcf9 	bl	8015550 <HAL_GetTick>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	4a01      	ldr	r2, [pc, #4]	; (800cb68 <SendRelays2Other+0x2c>)
 800cb62:	6113      	str	r3, [r2, #16]

	}
}
 800cb64:	bf00      	nop
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	20003488 	.word	0x20003488

0800cb6c <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800cb70:	4b16      	ldr	r3, [pc, #88]	; (800cbcc <CheckRelayMisMatch+0x60>)
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f001 ff09 	bl	800e98c <HAL_Elaps_Ticks>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cb80:	d922      	bls.n	800cbc8 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800cb82:	4b13      	ldr	r3, [pc, #76]	; (800cbd0 <CheckRelayMisMatch+0x64>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d10c      	bne.n	800cba4 <CheckRelayMisMatch+0x38>
 800cb8a:	4b12      	ldr	r3, [pc, #72]	; (800cbd4 <CheckRelayMisMatch+0x68>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d108      	bne.n	800cba4 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800cb92:	4a11      	ldr	r2, [pc, #68]	; (800cbd8 <CheckRelayMisMatch+0x6c>)
 800cb94:	4b11      	ldr	r3, [pc, #68]	; (800cbdc <CheckRelayMisMatch+0x70>)
 800cb96:	4610      	mov	r0, r2
 800cb98:	4619      	mov	r1, r3
 800cb9a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800cb9e:	461a      	mov	r2, r3
 800cba0:	f015 fbd0 	bl	8022344 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800cba4:	4b0d      	ldr	r3, [pc, #52]	; (800cbdc <CheckRelayMisMatch+0x70>)
 800cba6:	885a      	ldrh	r2, [r3, #2]
 800cba8:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <CheckRelayMisMatch+0x6c>)
 800cbaa:	885b      	ldrh	r3, [r3, #2]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d003      	beq.n	800cbb8 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800cbb0:	4b06      	ldr	r3, [pc, #24]	; (800cbcc <CheckRelayMisMatch+0x60>)
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	701a      	strb	r2, [r3, #0]
 800cbb6:	e002      	b.n	800cbbe <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = CLEAR;
 800cbb8:	4b04      	ldr	r3, [pc, #16]	; (800cbcc <CheckRelayMisMatch+0x60>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800cbbe:	f008 fcc7 	bl	8015550 <HAL_GetTick>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	4a01      	ldr	r2, [pc, #4]	; (800cbcc <CheckRelayMisMatch+0x60>)
 800cbc6:	6153      	str	r3, [r2, #20]
	}
}
 800cbc8:	bf00      	nop
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	20003488 	.word	0x20003488
 800cbd0:	2000347c 	.word	0x2000347c
 800cbd4:	20003480 	.word	0x20003480
 800cbd8:	200036a8 	.word	0x200036a8
 800cbdc:	200038ac 	.word	0x200038ac

0800cbe0 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800cbe4:	4b16      	ldr	r3, [pc, #88]	; (800cc40 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cbe6:	785b      	ldrb	r3, [r3, #1]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d101      	bne.n	800cbf0 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800cbec:	f006 fb88 	bl	8013300 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800cbf0:	4b13      	ldr	r3, [pc, #76]	; (800cc40 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cbf2:	699b      	ldr	r3, [r3, #24]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f001 fec9 	bl	800e98c <HAL_Elaps_Ticks>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	4b11      	ldr	r3, [pc, #68]	; (800cc44 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800cbfe:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d31a      	bcc.n	800cc3c <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800cc06:	4b0e      	ldr	r3, [pc, #56]	; (800cc40 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cc08:	699a      	ldr	r2, [r3, #24]
 800cc0a:	4b0f      	ldr	r3, [pc, #60]	; (800cc48 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d014      	beq.n	800cc3c <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800cc12:	4b0b      	ldr	r3, [pc, #44]	; (800cc40 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800cc18:	4b09      	ldr	r3, [pc, #36]	; (800cc40 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	4a0a      	ldr	r2, [pc, #40]	; (800cc48 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800cc1e:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800cc20:	4b07      	ldr	r3, [pc, #28]	; (800cc40 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f001 feb1 	bl	800e98c <HAL_Elaps_Ticks>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	4a07      	ldr	r2, [pc, #28]	; (800cc4c <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800cc2e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc32:	099b      	lsrs	r3, r3, #6
 800cc34:	4619      	mov	r1, r3
 800cc36:	4806      	ldr	r0, [pc, #24]	; (800cc50 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800cc38:	f015 fc94 	bl	8022564 <iprintf>
		}
	}
}
 800cc3c:	bf00      	nop
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	20003488 	.word	0x20003488
 800cc44:	20000304 	.word	0x20000304
 800cc48:	20004ba0 	.word	0x20004ba0
 800cc4c:	10624dd3 	.word	0x10624dd3
 800cc50:	0802600c 	.word	0x0802600c

0800cc54 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	4611      	mov	r1, r2
 800cc60:	461a      	mov	r2, r3
 800cc62:	460b      	mov	r3, r1
 800cc64:	80fb      	strh	r3, [r7, #6]
 800cc66:	4613      	mov	r3, r2
 800cc68:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800cc6a:	484d      	ldr	r0, [pc, #308]	; (800cda0 <Print_Siemens_MSG+0x14c>)
 800cc6c:	f015 fc7a 	bl	8022564 <iprintf>
	if(TX_RX == TX)
 800cc70:	797b      	ldrb	r3, [r7, #5]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d103      	bne.n	800cc7e <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800cc76:	484b      	ldr	r0, [pc, #300]	; (800cda4 <Print_Siemens_MSG+0x150>)
 800cc78:	f015 fc74 	bl	8022564 <iprintf>
 800cc7c:	e005      	b.n	800cc8a <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800cc7e:	797b      	ldrb	r3, [r7, #5]
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d102      	bne.n	800cc8a <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800cc84:	4848      	ldr	r0, [pc, #288]	; (800cda8 <Print_Siemens_MSG+0x154>)
 800cc86:	f015 fc6d 	bl	8022564 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4846      	ldr	r0, [pc, #280]	; (800cdac <Print_Siemens_MSG+0x158>)
 800cc92:	f015 fc67 	bl	8022564 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	4844      	ldr	r0, [pc, #272]	; (800cdb0 <Print_Siemens_MSG+0x15c>)
 800cc9e:	f015 fc61 	bl	8022564 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	7b1b      	ldrb	r3, [r3, #12]
 800cca6:	4619      	mov	r1, r3
 800cca8:	4842      	ldr	r0, [pc, #264]	; (800cdb4 <Print_Siemens_MSG+0x160>)
 800ccaa:	f015 fc5b 	bl	8022564 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	4840      	ldr	r0, [pc, #256]	; (800cdb8 <Print_Siemens_MSG+0x164>)
 800ccb6:	f015 fc55 	bl	8022564 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	7e1b      	ldrb	r3, [r3, #24]
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	483e      	ldr	r0, [pc, #248]	; (800cdbc <Print_Siemens_MSG+0x168>)
 800ccc2:	f015 fc4f 	bl	8022564 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	7e5b      	ldrb	r3, [r3, #25]
 800ccca:	4619      	mov	r1, r3
 800cccc:	483c      	ldr	r0, [pc, #240]	; (800cdc0 <Print_Siemens_MSG+0x16c>)
 800ccce:	f015 fc49 	bl	8022564 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	7e9b      	ldrb	r3, [r3, #26]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	483a      	ldr	r0, [pc, #232]	; (800cdc4 <Print_Siemens_MSG+0x170>)
 800ccda:	f015 fc43 	bl	8022564 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	7edb      	ldrb	r3, [r3, #27]
 800cce2:	4619      	mov	r1, r3
 800cce4:	4838      	ldr	r0, [pc, #224]	; (800cdc8 <Print_Siemens_MSG+0x174>)
 800cce6:	f015 fc3d 	bl	8022564 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	69db      	ldr	r3, [r3, #28]
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4836      	ldr	r0, [pc, #216]	; (800cdcc <Print_Siemens_MSG+0x178>)
 800ccf2:	f015 fc37 	bl	8022564 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6a1b      	ldr	r3, [r3, #32]
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	4834      	ldr	r0, [pc, #208]	; (800cdd0 <Print_Siemens_MSG+0x17c>)
 800ccfe:	f015 fc31 	bl	8022564 <iprintf>
	if(TX_RX == RX)
 800cd02:	797b      	ldrb	r3, [r7, #5]
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d122      	bne.n	800cd4e <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	4831      	ldr	r0, [pc, #196]	; (800cdd4 <Print_Siemens_MSG+0x180>)
 800cd10:	f015 fc28 	bl	8022564 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800cd14:	2300      	movs	r3, #0
 800cd16:	82fb      	strh	r3, [r7, #22]
 800cd18:	e00b      	b.n	800cd32 <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800cd1a:	8afb      	ldrh	r3, [r7, #22]
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	4413      	add	r3, r2
 800cd20:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800cd24:	4619      	mov	r1, r3
 800cd26:	482c      	ldr	r0, [pc, #176]	; (800cdd8 <Print_Siemens_MSG+0x184>)
 800cd28:	f015 fc1c 	bl	8022564 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800cd2c:	8afb      	ldrh	r3, [r7, #22]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	82fb      	strh	r3, [r7, #22]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd36:	8afa      	ldrh	r2, [r7, #22]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d3ee      	bcc.n	800cd1a <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800cd3c:	200a      	movs	r0, #10
 800cd3e:	f015 fc29 	bl	8022594 <putchar>

		if(Debug_flag == 2)
 800cd42:	4b26      	ldr	r3, [pc, #152]	; (800cddc <Print_Siemens_MSG+0x188>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	d101      	bne.n	800cd4e <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800cd4a:	f000 ff65 	bl	800dc18 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800cd4e:	4b23      	ldr	r3, [pc, #140]	; (800cddc <Print_Siemens_MSG+0x188>)
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d120      	bne.n	800cd98 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800cd56:	2300      	movs	r3, #0
 800cd58:	82bb      	strh	r3, [r7, #20]
 800cd5a:	e016      	b.n	800cd8a <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800cd5c:	8abb      	ldrh	r3, [r7, #20]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d008      	beq.n	800cd74 <Print_Siemens_MSG+0x120>
 800cd62:	8abb      	ldrh	r3, [r7, #20]
 800cd64:	f003 031f 	and.w	r3, r3, #31
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d102      	bne.n	800cd74 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800cd6e:	200a      	movs	r0, #10
 800cd70:	f015 fc10 	bl	8022594 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800cd74:	8abb      	ldrh	r3, [r7, #20]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	4413      	add	r3, r2
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	4816      	ldr	r0, [pc, #88]	; (800cdd8 <Print_Siemens_MSG+0x184>)
 800cd80:	f015 fbf0 	bl	8022564 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800cd84:	8abb      	ldrh	r3, [r7, #20]
 800cd86:	3301      	adds	r3, #1
 800cd88:	82bb      	strh	r3, [r7, #20]
 800cd8a:	8aba      	ldrh	r2, [r7, #20]
 800cd8c:	88fb      	ldrh	r3, [r7, #6]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d3e4      	bcc.n	800cd5c <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800cd92:	200a      	movs	r0, #10
 800cd94:	f015 fbfe 	bl	8022594 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800cd98:	bf00      	nop
 800cd9a:	3718      	adds	r7, #24
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	0802603c 	.word	0x0802603c
 800cda4:	08026044 	.word	0x08026044
 800cda8:	08026048 	.word	0x08026048
 800cdac:	0802604c 	.word	0x0802604c
 800cdb0:	08026054 	.word	0x08026054
 800cdb4:	0802605c 	.word	0x0802605c
 800cdb8:	08026064 	.word	0x08026064
 800cdbc:	0802606c 	.word	0x0802606c
 800cdc0:	08026078 	.word	0x08026078
 800cdc4:	08026080 	.word	0x08026080
 800cdc8:	08026088 	.word	0x08026088
 800cdcc:	08026090 	.word	0x08026090
 800cdd0:	0802609c 	.word	0x0802609c
 800cdd4:	080260a8 	.word	0x080260a8
 800cdd8:	080260b0 	.word	0x080260b0
 800cddc:	20000645 	.word	0x20000645

0800cde0 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b09a      	sub	sp, #104	; 0x68
 800cde4:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800cde6:	2300      	movs	r3, #0
 800cde8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	603b      	str	r3, [r7, #0]
 800cdfc:	1d3b      	adds	r3, r7, #4
 800cdfe:	2260      	movs	r2, #96	; 0x60
 800ce00:	2100      	movs	r1, #0
 800ce02:	4618      	mov	r0, r3
 800ce04:	f015 fac6 	bl	8022394 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800ce08:	4bb9      	ldr	r3, [pc, #740]	; (800d0f0 <Chech_forSiemensCMD+0x310>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f001 fdbd 	bl	800e98c <HAL_Elaps_Ticks>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b09      	cmp	r3, #9
 800ce16:	f240 81ad 	bls.w	800d174 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800ce1a:	e010      	b.n	800ce3e <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	f008 f86f 	bl	8014f00 <Com_Get_Byte>
 800ce22:	4603      	mov	r3, r0
 800ce24:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800ce28:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800ce32:	3368      	adds	r3, #104	; 0x68
 800ce34:	443b      	add	r3, r7
 800ce36:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ce3a:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800ce3e:	2000      	movs	r0, #0
 800ce40:	f008 f81e 	bl	8014e80 <Com_DataReady>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1e8      	bne.n	800ce1c <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800ce4a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 8144 	beq.w	800d0dc <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800ce54:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ce58:	3368      	adds	r3, #104	; 0x68
 800ce5a:	443b      	add	r3, r7
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800ce62:	463b      	mov	r3, r7
 800ce64:	4619      	mov	r1, r3
 800ce66:	48a3      	ldr	r0, [pc, #652]	; (800d0f4 <Chech_forSiemensCMD+0x314>)
 800ce68:	f015 fb7c 	bl	8022564 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800ce6c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800ce70:	463b      	mov	r3, r7
 800ce72:	4611      	mov	r1, r2
 800ce74:	4618      	mov	r0, r3
 800ce76:	f000 faf3 	bl	800d460 <Is_SiemensCommand_Valid>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b0c      	cmp	r3, #12
 800ce7e:	f200 8129 	bhi.w	800d0d4 <Chech_forSiemensCMD+0x2f4>
 800ce82:	a201      	add	r2, pc, #4	; (adr r2, 800ce88 <Chech_forSiemensCMD+0xa8>)
 800ce84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce88:	0800cebd 	.word	0x0800cebd
 800ce8c:	0800cecb 	.word	0x0800cecb
 800ce90:	0800cf2f 	.word	0x0800cf2f
 800ce94:	0800cf51 	.word	0x0800cf51
 800ce98:	0800cf79 	.word	0x0800cf79
 800ce9c:	0800cfa1 	.word	0x0800cfa1
 800cea0:	0800cfc9 	.word	0x0800cfc9
 800cea4:	0800cff1 	.word	0x0800cff1
 800cea8:	0800d019 	.word	0x0800d019
 800ceac:	0800d041 	.word	0x0800d041
 800ceb0:	0800d069 	.word	0x0800d069
 800ceb4:	0800d091 	.word	0x0800d091
 800ceb8:	0800d0b9 	.word	0x0800d0b9
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800cebc:	4b8e      	ldr	r3, [pc, #568]	; (800d0f8 <Chech_forSiemensCMD+0x318>)
 800cebe:	2201      	movs	r2, #1
 800cec0:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800cec2:	488e      	ldr	r0, [pc, #568]	; (800d0fc <Chech_forSiemensCMD+0x31c>)
 800cec4:	f015 fbea 	bl	802269c <puts>
				break;
 800cec8:	e109      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800ceca:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cece:	3b01      	subs	r3, #1
 800ced0:	3368      	adds	r3, #104	; 0x68
 800ced2:	443b      	add	r3, r7
 800ced4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800ced8:	3b30      	subs	r3, #48	; 0x30
 800ceda:	461a      	mov	r2, r3
 800cedc:	4988      	ldr	r1, [pc, #544]	; (800d100 <Chech_forSiemensCMD+0x320>)
 800cede:	4889      	ldr	r0, [pc, #548]	; (800d104 <Chech_forSiemensCMD+0x324>)
 800cee0:	f015 fb40 	bl	8022564 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800cee4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cee8:	3b01      	subs	r3, #1
 800ceea:	3368      	adds	r3, #104	; 0x68
 800ceec:	443b      	add	r3, r7
 800ceee:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cef2:	2b2f      	cmp	r3, #47	; 0x2f
 800cef4:	d914      	bls.n	800cf20 <Chech_forSiemensCMD+0x140>
 800cef6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cefa:	3b01      	subs	r3, #1
 800cefc:	3368      	adds	r3, #104	; 0x68
 800cefe:	443b      	add	r3, r7
 800cf00:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cf04:	2b32      	cmp	r3, #50	; 0x32
 800cf06:	d80b      	bhi.n	800cf20 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800cf08:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	3368      	adds	r3, #104	; 0x68
 800cf10:	443b      	add	r3, r7
 800cf12:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cf16:	3b30      	subs	r3, #48	; 0x30
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	4b7b      	ldr	r3, [pc, #492]	; (800d108 <Chech_forSiemensCMD+0x328>)
 800cf1c:	701a      	strb	r2, [r3, #0]
 800cf1e:	e002      	b.n	800cf26 <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800cf20:	487a      	ldr	r0, [pc, #488]	; (800d10c <Chech_forSiemensCMD+0x32c>)
 800cf22:	f015 fbbb 	bl	802269c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800cf26:	2301      	movs	r3, #1
 800cf28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cf2c:	e0d7      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800cf2e:	4978      	ldr	r1, [pc, #480]	; (800d110 <Chech_forSiemensCMD+0x330>)
 800cf30:	4878      	ldr	r0, [pc, #480]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800cf32:	f015 fb17 	bl	8022564 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800cf36:	4878      	ldr	r0, [pc, #480]	; (800d118 <Chech_forSiemensCMD+0x338>)
 800cf38:	f015 fbb0 	bl	802269c <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cf3c:	4b77      	ldr	r3, [pc, #476]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f043 0301 	orr.w	r3, r3, #1
 800cf44:	4a75      	ldr	r2, [pc, #468]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cf46:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cf4e:	e0c6      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800cf50:	4973      	ldr	r1, [pc, #460]	; (800d120 <Chech_forSiemensCMD+0x340>)
 800cf52:	4870      	ldr	r0, [pc, #448]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800cf54:	f015 fb06 	bl	8022564 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800cf58:	4872      	ldr	r0, [pc, #456]	; (800d124 <Chech_forSiemensCMD+0x344>)
 800cf5a:	f015 fb9f 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800cf5e:	4b6f      	ldr	r3, [pc, #444]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cf60:	2200      	movs	r2, #0
 800cf62:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cf64:	4b6d      	ldr	r3, [pc, #436]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f043 0302 	orr.w	r3, r3, #2
 800cf6c:	4a6b      	ldr	r2, [pc, #428]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cf6e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cf70:	2301      	movs	r3, #1
 800cf72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cf76:	e0b2      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800cf78:	496b      	ldr	r1, [pc, #428]	; (800d128 <Chech_forSiemensCMD+0x348>)
 800cf7a:	4866      	ldr	r0, [pc, #408]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800cf7c:	f015 faf2 	bl	8022564 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800cf80:	486a      	ldr	r0, [pc, #424]	; (800d12c <Chech_forSiemensCMD+0x34c>)
 800cf82:	f015 fb8b 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800cf86:	4b65      	ldr	r3, [pc, #404]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cf8c:	4b63      	ldr	r3, [pc, #396]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f043 0304 	orr.w	r3, r3, #4
 800cf94:	4a61      	ldr	r2, [pc, #388]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cf96:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cf9e:	e09e      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800cfa0:	4963      	ldr	r1, [pc, #396]	; (800d130 <Chech_forSiemensCMD+0x350>)
 800cfa2:	485c      	ldr	r0, [pc, #368]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800cfa4:	f015 fade 	bl	8022564 <iprintf>
				printf("INVALID_DES_PORT\n");
 800cfa8:	4862      	ldr	r0, [pc, #392]	; (800d134 <Chech_forSiemensCMD+0x354>)
 800cfaa:	f015 fb77 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800cfae:	4b5b      	ldr	r3, [pc, #364]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cfb4:	4b59      	ldr	r3, [pc, #356]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f043 0308 	orr.w	r3, r3, #8
 800cfbc:	4a57      	ldr	r2, [pc, #348]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cfbe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cfc6:	e08a      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800cfc8:	495b      	ldr	r1, [pc, #364]	; (800d138 <Chech_forSiemensCMD+0x358>)
 800cfca:	4852      	ldr	r0, [pc, #328]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800cfcc:	f015 faca 	bl	8022564 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800cfd0:	485a      	ldr	r0, [pc, #360]	; (800d13c <Chech_forSiemensCMD+0x35c>)
 800cfd2:	f015 fb63 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800cfd6:	4b51      	ldr	r3, [pc, #324]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cfdc:	4b4f      	ldr	r3, [pc, #316]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f043 0310 	orr.w	r3, r3, #16
 800cfe4:	4a4d      	ldr	r2, [pc, #308]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800cfe6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cfee:	e076      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800cff0:	4953      	ldr	r1, [pc, #332]	; (800d140 <Chech_forSiemensCMD+0x360>)
 800cff2:	4848      	ldr	r0, [pc, #288]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800cff4:	f015 fab6 	bl	8022564 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800cff8:	4852      	ldr	r0, [pc, #328]	; (800d144 <Chech_forSiemensCMD+0x364>)
 800cffa:	f015 fb4f 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800cffe:	4b47      	ldr	r3, [pc, #284]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d004:	4b45      	ldr	r3, [pc, #276]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f043 0320 	orr.w	r3, r3, #32
 800d00c:	4a43      	ldr	r2, [pc, #268]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d00e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d010:	2301      	movs	r3, #1
 800d012:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d016:	e062      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800d018:	494b      	ldr	r1, [pc, #300]	; (800d148 <Chech_forSiemensCMD+0x368>)
 800d01a:	484c      	ldr	r0, [pc, #304]	; (800d14c <Chech_forSiemensCMD+0x36c>)
 800d01c:	f015 faa2 	bl	8022564 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800d020:	484b      	ldr	r0, [pc, #300]	; (800d150 <Chech_forSiemensCMD+0x370>)
 800d022:	f015 fb3b 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d026:	4b3d      	ldr	r3, [pc, #244]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d02c:	4b3b      	ldr	r3, [pc, #236]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d034:	4a39      	ldr	r2, [pc, #228]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d036:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d038:	2301      	movs	r3, #1
 800d03a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d03e:	e04e      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800d040:	4944      	ldr	r1, [pc, #272]	; (800d154 <Chech_forSiemensCMD+0x374>)
 800d042:	4834      	ldr	r0, [pc, #208]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800d044:	f015 fa8e 	bl	8022564 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800d048:	4843      	ldr	r0, [pc, #268]	; (800d158 <Chech_forSiemensCMD+0x378>)
 800d04a:	f015 fb27 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d04e:	4b33      	ldr	r3, [pc, #204]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d050:	2200      	movs	r2, #0
 800d052:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d054:	4b31      	ldr	r3, [pc, #196]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d05c:	4a2f      	ldr	r2, [pc, #188]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d05e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d060:	2301      	movs	r3, #1
 800d062:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d066:	e03a      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800d068:	493c      	ldr	r1, [pc, #240]	; (800d15c <Chech_forSiemensCMD+0x37c>)
 800d06a:	482a      	ldr	r0, [pc, #168]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800d06c:	f015 fa7a 	bl	8022564 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800d070:	483b      	ldr	r0, [pc, #236]	; (800d160 <Chech_forSiemensCMD+0x380>)
 800d072:	f015 fb13 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d076:	4b29      	ldr	r3, [pc, #164]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d078:	2200      	movs	r2, #0
 800d07a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d07c:	4b27      	ldr	r3, [pc, #156]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d084:	4a25      	ldr	r2, [pc, #148]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d086:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d088:	2301      	movs	r3, #1
 800d08a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d08e:	e026      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800d090:	4934      	ldr	r1, [pc, #208]	; (800d164 <Chech_forSiemensCMD+0x384>)
 800d092:	4820      	ldr	r0, [pc, #128]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800d094:	f015 fa66 	bl	8022564 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800d098:	4833      	ldr	r0, [pc, #204]	; (800d168 <Chech_forSiemensCMD+0x388>)
 800d09a:	f015 faff 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d09e:	4b1f      	ldr	r3, [pc, #124]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d0a4:	4b1d      	ldr	r3, [pc, #116]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d0ac:	4a1b      	ldr	r2, [pc, #108]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d0ae:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d0b6:	e012      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800d0b8:	492c      	ldr	r1, [pc, #176]	; (800d16c <Chech_forSiemensCMD+0x38c>)
 800d0ba:	4816      	ldr	r0, [pc, #88]	; (800d114 <Chech_forSiemensCMD+0x334>)
 800d0bc:	f015 fa52 	bl	8022564 <iprintf>
				printf("CLEAR ALL\n");
 800d0c0:	482b      	ldr	r0, [pc, #172]	; (800d170 <Chech_forSiemensCMD+0x390>)
 800d0c2:	f015 faeb 	bl	802269c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d0c6:	4b15      	ldr	r3, [pc, #84]	; (800d11c <Chech_forSiemensCMD+0x33c>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d0d2:	e004      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800d0d4:	480d      	ldr	r0, [pc, #52]	; (800d10c <Chech_forSiemensCMD+0x32c>)
 800d0d6:	f015 fae1 	bl	802269c <puts>
 800d0da:	e000      	b.n	800d0de <Chech_forSiemensCMD+0x2fe>
			}
		}
 800d0dc:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800d0de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d147      	bne.n	800d176 <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800d0e6:	f240 2005 	movw	r0, #517	; 0x205
 800d0ea:	f002 f9cb 	bl	800f484 <TransmitCanPkt>
 800d0ee:	e042      	b.n	800d176 <Chech_forSiemensCMD+0x396>
 800d0f0:	2000a004 	.word	0x2000a004
 800d0f4:	080260b8 	.word	0x080260b8
 800d0f8:	20000644 	.word	0x20000644
 800d0fc:	080260d0 	.word	0x080260d0
 800d100:	200047e6 	.word	0x200047e6
 800d104:	08026110 	.word	0x08026110
 800d108:	20000645 	.word	0x20000645
 800d10c:	08026124 	.word	0x08026124
 800d110:	20004818 	.word	0x20004818
 800d114:	08026140 	.word	0x08026140
 800d118:	08026150 	.word	0x08026150
 800d11c:	20003474 	.word	0x20003474
 800d120:	2000484a 	.word	0x2000484a
 800d124:	08026168 	.word	0x08026168
 800d128:	2000487c 	.word	0x2000487c
 800d12c:	08026180 	.word	0x08026180
 800d130:	200048ae 	.word	0x200048ae
 800d134:	08026194 	.word	0x08026194
 800d138:	200048e0 	.word	0x200048e0
 800d13c:	080261a8 	.word	0x080261a8
 800d140:	20004912 	.word	0x20004912
 800d144:	080261bc 	.word	0x080261bc
 800d148:	20004944 	.word	0x20004944
 800d14c:	080261d8 	.word	0x080261d8
 800d150:	080261f0 	.word	0x080261f0
 800d154:	20004976 	.word	0x20004976
 800d158:	08026204 	.word	0x08026204
 800d15c:	200049a8 	.word	0x200049a8
 800d160:	0802621c 	.word	0x0802621c
 800d164:	200049da 	.word	0x200049da
 800d168:	0802623c 	.word	0x0802623c
 800d16c:	20004a0c 	.word	0x20004a0c
 800d170:	0802625c 	.word	0x0802625c
		return;
 800d174:	bf00      	nop
		}
	}
}
 800d176:	3768      	adds	r7, #104	; 0x68
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800d17c:	b4b0      	push	{r4, r5, r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800d186:	79fb      	ldrb	r3, [r7, #7]
 800d188:	4aa6      	ldr	r2, [pc, #664]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d18a:	2132      	movs	r1, #50	; 0x32
 800d18c:	fb01 f303 	mul.w	r3, r1, r3
 800d190:	4413      	add	r3, r2
 800d192:	2224      	movs	r2, #36	; 0x24
 800d194:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800d196:	79fb      	ldrb	r3, [r7, #7]
 800d198:	4aa2      	ldr	r2, [pc, #648]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d19a:	2132      	movs	r1, #50	; 0x32
 800d19c:	fb01 f303 	mul.w	r3, r1, r3
 800d1a0:	4413      	add	r3, r2
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800d1a8:	79fb      	ldrb	r3, [r7, #7]
 800d1aa:	4a9e      	ldr	r2, [pc, #632]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d1ac:	2132      	movs	r1, #50	; 0x32
 800d1ae:	fb01 f303 	mul.w	r3, r1, r3
 800d1b2:	4413      	add	r3, r2
 800d1b4:	3302      	adds	r3, #2
 800d1b6:	2230      	movs	r2, #48	; 0x30
 800d1b8:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800d1ba:	79fb      	ldrb	r3, [r7, #7]
 800d1bc:	4a99      	ldr	r2, [pc, #612]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d1be:	2132      	movs	r1, #50	; 0x32
 800d1c0:	fb01 f303 	mul.w	r3, r1, r3
 800d1c4:	4413      	add	r3, r2
 800d1c6:	3303      	adds	r3, #3
 800d1c8:	2240      	movs	r2, #64	; 0x40
 800d1ca:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800d1cc:	79fb      	ldrb	r3, [r7, #7]
 800d1ce:	4a95      	ldr	r2, [pc, #596]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d1d0:	2132      	movs	r1, #50	; 0x32
 800d1d2:	fb01 f303 	mul.w	r3, r1, r3
 800d1d6:	4413      	add	r3, r2
 800d1d8:	3304      	adds	r3, #4
 800d1da:	22c0      	movs	r2, #192	; 0xc0
 800d1dc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800d1de:	79fb      	ldrb	r3, [r7, #7]
 800d1e0:	4a90      	ldr	r2, [pc, #576]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d1e2:	2132      	movs	r1, #50	; 0x32
 800d1e4:	fb01 f303 	mul.w	r3, r1, r3
 800d1e8:	4413      	add	r3, r2
 800d1ea:	3305      	adds	r3, #5
 800d1ec:	224e      	movs	r2, #78	; 0x4e
 800d1ee:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800d1f0:	79fb      	ldrb	r3, [r7, #7]
 800d1f2:	4a8c      	ldr	r2, [pc, #560]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d1f4:	2132      	movs	r1, #50	; 0x32
 800d1f6:	fb01 f303 	mul.w	r3, r1, r3
 800d1fa:	4413      	add	r3, r2
 800d1fc:	3306      	adds	r3, #6
 800d1fe:	2226      	movs	r2, #38	; 0x26
 800d200:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800d202:	79fb      	ldrb	r3, [r7, #7]
 800d204:	3301      	adds	r3, #1
 800d206:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800d208:	79fb      	ldrb	r3, [r7, #7]
 800d20a:	1c5a      	adds	r2, r3, #1
 800d20c:	71fa      	strb	r2, [r7, #7]
 800d20e:	461a      	mov	r2, r3
 800d210:	2332      	movs	r3, #50	; 0x32
 800d212:	fb02 f303 	mul.w	r3, r2, r3
 800d216:	4a83      	ldr	r2, [pc, #524]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d218:	4413      	add	r3, r2
 800d21a:	4983      	ldr	r1, [pc, #524]	; (800d428 <Update_SiemensCommands+0x2ac>)
 800d21c:	461a      	mov	r2, r3
 800d21e:	460b      	mov	r3, r1
 800d220:	cb03      	ldmia	r3!, {r0, r1}
 800d222:	6010      	str	r0, [r2, #0]
 800d224:	6051      	str	r1, [r2, #4]
 800d226:	8819      	ldrh	r1, [r3, #0]
 800d228:	789b      	ldrb	r3, [r3, #2]
 800d22a:	8111      	strh	r1, [r2, #8]
 800d22c:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	71fa      	strb	r2, [r7, #7]
 800d234:	461a      	mov	r2, r3
 800d236:	2332      	movs	r3, #50	; 0x32
 800d238:	fb02 f303 	mul.w	r3, r2, r3
 800d23c:	4a79      	ldr	r2, [pc, #484]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d23e:	4413      	add	r3, r2
 800d240:	4a7a      	ldr	r2, [pc, #488]	; (800d42c <Update_SiemensCommands+0x2b0>)
 800d242:	461d      	mov	r5, r3
 800d244:	4614      	mov	r4, r2
 800d246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d248:	6028      	str	r0, [r5, #0]
 800d24a:	6069      	str	r1, [r5, #4]
 800d24c:	60aa      	str	r2, [r5, #8]
 800d24e:	60eb      	str	r3, [r5, #12]
 800d250:	6820      	ldr	r0, [r4, #0]
 800d252:	6128      	str	r0, [r5, #16]
 800d254:	7923      	ldrb	r3, [r4, #4]
 800d256:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	71fa      	strb	r2, [r7, #7]
 800d25e:	461a      	mov	r2, r3
 800d260:	2332      	movs	r3, #50	; 0x32
 800d262:	fb02 f303 	mul.w	r3, r2, r3
 800d266:	4a6f      	ldr	r2, [pc, #444]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d268:	4413      	add	r3, r2
 800d26a:	4a71      	ldr	r2, [pc, #452]	; (800d430 <Update_SiemensCommands+0x2b4>)
 800d26c:	461d      	mov	r5, r3
 800d26e:	4614      	mov	r4, r2
 800d270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d272:	6028      	str	r0, [r5, #0]
 800d274:	6069      	str	r1, [r5, #4]
 800d276:	60aa      	str	r2, [r5, #8]
 800d278:	60eb      	str	r3, [r5, #12]
 800d27a:	6820      	ldr	r0, [r4, #0]
 800d27c:	6128      	str	r0, [r5, #16]
 800d27e:	7923      	ldrb	r3, [r4, #4]
 800d280:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800d282:	79fb      	ldrb	r3, [r7, #7]
 800d284:	1c5a      	adds	r2, r3, #1
 800d286:	71fa      	strb	r2, [r7, #7]
 800d288:	461a      	mov	r2, r3
 800d28a:	2332      	movs	r3, #50	; 0x32
 800d28c:	fb02 f303 	mul.w	r3, r2, r3
 800d290:	4a64      	ldr	r2, [pc, #400]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d292:	4413      	add	r3, r2
 800d294:	4a67      	ldr	r2, [pc, #412]	; (800d434 <Update_SiemensCommands+0x2b8>)
 800d296:	461d      	mov	r5, r3
 800d298:	4614      	mov	r4, r2
 800d29a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d29c:	6028      	str	r0, [r5, #0]
 800d29e:	6069      	str	r1, [r5, #4]
 800d2a0:	60aa      	str	r2, [r5, #8]
 800d2a2:	60eb      	str	r3, [r5, #12]
 800d2a4:	7823      	ldrb	r3, [r4, #0]
 800d2a6:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800d2a8:	79fb      	ldrb	r3, [r7, #7]
 800d2aa:	1c5a      	adds	r2, r3, #1
 800d2ac:	71fa      	strb	r2, [r7, #7]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	2332      	movs	r3, #50	; 0x32
 800d2b2:	fb02 f303 	mul.w	r3, r2, r3
 800d2b6:	4a5b      	ldr	r2, [pc, #364]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d2b8:	4413      	add	r3, r2
 800d2ba:	4a5f      	ldr	r2, [pc, #380]	; (800d438 <Update_SiemensCommands+0x2bc>)
 800d2bc:	461d      	mov	r5, r3
 800d2be:	4614      	mov	r4, r2
 800d2c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2c2:	6028      	str	r0, [r5, #0]
 800d2c4:	6069      	str	r1, [r5, #4]
 800d2c6:	60aa      	str	r2, [r5, #8]
 800d2c8:	60eb      	str	r3, [r5, #12]
 800d2ca:	7823      	ldrb	r3, [r4, #0]
 800d2cc:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	1c5a      	adds	r2, r3, #1
 800d2d2:	71fa      	strb	r2, [r7, #7]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	2332      	movs	r3, #50	; 0x32
 800d2d8:	fb02 f303 	mul.w	r3, r2, r3
 800d2dc:	4a51      	ldr	r2, [pc, #324]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d2de:	4413      	add	r3, r2
 800d2e0:	4a56      	ldr	r2, [pc, #344]	; (800d43c <Update_SiemensCommands+0x2c0>)
 800d2e2:	461d      	mov	r5, r3
 800d2e4:	4614      	mov	r4, r2
 800d2e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2e8:	6028      	str	r0, [r5, #0]
 800d2ea:	6069      	str	r1, [r5, #4]
 800d2ec:	60aa      	str	r2, [r5, #8]
 800d2ee:	60eb      	str	r3, [r5, #12]
 800d2f0:	7823      	ldrb	r3, [r4, #0]
 800d2f2:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800d2f4:	79fb      	ldrb	r3, [r7, #7]
 800d2f6:	1c5a      	adds	r2, r3, #1
 800d2f8:	71fa      	strb	r2, [r7, #7]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	2332      	movs	r3, #50	; 0x32
 800d2fe:	fb02 f303 	mul.w	r3, r2, r3
 800d302:	4a48      	ldr	r2, [pc, #288]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d304:	4413      	add	r3, r2
 800d306:	4a4e      	ldr	r2, [pc, #312]	; (800d440 <Update_SiemensCommands+0x2c4>)
 800d308:	461d      	mov	r5, r3
 800d30a:	4614      	mov	r4, r2
 800d30c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d30e:	6028      	str	r0, [r5, #0]
 800d310:	6069      	str	r1, [r5, #4]
 800d312:	60aa      	str	r2, [r5, #8]
 800d314:	60eb      	str	r3, [r5, #12]
 800d316:	cc03      	ldmia	r4!, {r0, r1}
 800d318:	6128      	str	r0, [r5, #16]
 800d31a:	6169      	str	r1, [r5, #20]
 800d31c:	8823      	ldrh	r3, [r4, #0]
 800d31e:	78a2      	ldrb	r2, [r4, #2]
 800d320:	832b      	strh	r3, [r5, #24]
 800d322:	4613      	mov	r3, r2
 800d324:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800d326:	79fb      	ldrb	r3, [r7, #7]
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	71fa      	strb	r2, [r7, #7]
 800d32c:	461a      	mov	r2, r3
 800d32e:	2332      	movs	r3, #50	; 0x32
 800d330:	fb02 f303 	mul.w	r3, r2, r3
 800d334:	4a3b      	ldr	r2, [pc, #236]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d336:	4413      	add	r3, r2
 800d338:	4a42      	ldr	r2, [pc, #264]	; (800d444 <Update_SiemensCommands+0x2c8>)
 800d33a:	461d      	mov	r5, r3
 800d33c:	4614      	mov	r4, r2
 800d33e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d340:	6028      	str	r0, [r5, #0]
 800d342:	6069      	str	r1, [r5, #4]
 800d344:	60aa      	str	r2, [r5, #8]
 800d346:	60eb      	str	r3, [r5, #12]
 800d348:	8823      	ldrh	r3, [r4, #0]
 800d34a:	78a2      	ldrb	r2, [r4, #2]
 800d34c:	822b      	strh	r3, [r5, #16]
 800d34e:	4613      	mov	r3, r2
 800d350:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800d352:	79fb      	ldrb	r3, [r7, #7]
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	71fa      	strb	r2, [r7, #7]
 800d358:	461a      	mov	r2, r3
 800d35a:	2332      	movs	r3, #50	; 0x32
 800d35c:	fb02 f303 	mul.w	r3, r2, r3
 800d360:	4a30      	ldr	r2, [pc, #192]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d362:	4413      	add	r3, r2
 800d364:	4a38      	ldr	r2, [pc, #224]	; (800d448 <Update_SiemensCommands+0x2cc>)
 800d366:	461d      	mov	r5, r3
 800d368:	4614      	mov	r4, r2
 800d36a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d36c:	6028      	str	r0, [r5, #0]
 800d36e:	6069      	str	r1, [r5, #4]
 800d370:	60aa      	str	r2, [r5, #8]
 800d372:	60eb      	str	r3, [r5, #12]
 800d374:	cc03      	ldmia	r4!, {r0, r1}
 800d376:	6128      	str	r0, [r5, #16]
 800d378:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800d37a:	79fb      	ldrb	r3, [r7, #7]
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	71fa      	strb	r2, [r7, #7]
 800d380:	461a      	mov	r2, r3
 800d382:	2332      	movs	r3, #50	; 0x32
 800d384:	fb02 f303 	mul.w	r3, r2, r3
 800d388:	4a26      	ldr	r2, [pc, #152]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d38a:	4413      	add	r3, r2
 800d38c:	4a2f      	ldr	r2, [pc, #188]	; (800d44c <Update_SiemensCommands+0x2d0>)
 800d38e:	461c      	mov	r4, r3
 800d390:	4615      	mov	r5, r2
 800d392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d394:	6020      	str	r0, [r4, #0]
 800d396:	6061      	str	r1, [r4, #4]
 800d398:	60a2      	str	r2, [r4, #8]
 800d39a:	60e3      	str	r3, [r4, #12]
 800d39c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d39e:	6120      	str	r0, [r4, #16]
 800d3a0:	6161      	str	r1, [r4, #20]
 800d3a2:	61a2      	str	r2, [r4, #24]
 800d3a4:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800d3a6:	79fb      	ldrb	r3, [r7, #7]
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	71fa      	strb	r2, [r7, #7]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	2332      	movs	r3, #50	; 0x32
 800d3b0:	fb02 f303 	mul.w	r3, r2, r3
 800d3b4:	4a1b      	ldr	r2, [pc, #108]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d3b6:	4413      	add	r3, r2
 800d3b8:	4a25      	ldr	r2, [pc, #148]	; (800d450 <Update_SiemensCommands+0x2d4>)
 800d3ba:	461d      	mov	r5, r3
 800d3bc:	4614      	mov	r4, r2
 800d3be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3c0:	6028      	str	r0, [r5, #0]
 800d3c2:	6069      	str	r1, [r5, #4]
 800d3c4:	60aa      	str	r2, [r5, #8]
 800d3c6:	60eb      	str	r3, [r5, #12]
 800d3c8:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d3ca:	6128      	str	r0, [r5, #16]
 800d3cc:	6169      	str	r1, [r5, #20]
 800d3ce:	61aa      	str	r2, [r5, #24]
 800d3d0:	7823      	ldrb	r3, [r4, #0]
 800d3d2:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800d3d4:	79fb      	ldrb	r3, [r7, #7]
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	71fa      	strb	r2, [r7, #7]
 800d3da:	461a      	mov	r2, r3
 800d3dc:	2332      	movs	r3, #50	; 0x32
 800d3de:	fb02 f303 	mul.w	r3, r2, r3
 800d3e2:	4a10      	ldr	r2, [pc, #64]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d3e4:	4413      	add	r3, r2
 800d3e6:	491b      	ldr	r1, [pc, #108]	; (800d454 <Update_SiemensCommands+0x2d8>)
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	cb03      	ldmia	r3!, {r0, r1}
 800d3ee:	6010      	str	r0, [r2, #0]
 800d3f0:	6051      	str	r1, [r2, #4]
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	1c5a      	adds	r2, r3, #1
 800d3fa:	71fa      	strb	r2, [r7, #7]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	2332      	movs	r3, #50	; 0x32
 800d400:	fb02 f303 	mul.w	r3, r2, r3
 800d404:	4a07      	ldr	r2, [pc, #28]	; (800d424 <Update_SiemensCommands+0x2a8>)
 800d406:	4413      	add	r3, r2
 800d408:	4a13      	ldr	r2, [pc, #76]	; (800d458 <Update_SiemensCommands+0x2dc>)
 800d40a:	6810      	ldr	r0, [r2, #0]
 800d40c:	6018      	str	r0, [r3, #0]
 800d40e:	7912      	ldrb	r2, [r2, #4]
 800d410:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800d412:	4a12      	ldr	r2, [pc, #72]	; (800d45c <Update_SiemensCommands+0x2e0>)
 800d414:	79fb      	ldrb	r3, [r7, #7]
 800d416:	7013      	strb	r3, [r2, #0]
}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bcb0      	pop	{r4, r5, r7}
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	200047b4 	.word	0x200047b4
 800d428:	08026268 	.word	0x08026268
 800d42c:	08026150 	.word	0x08026150
 800d430:	08026168 	.word	0x08026168
 800d434:	08026180 	.word	0x08026180
 800d438:	08026194 	.word	0x08026194
 800d43c:	080261a8 	.word	0x080261a8
 800d440:	08026274 	.word	0x08026274
 800d444:	080261f0 	.word	0x080261f0
 800d448:	08026204 	.word	0x08026204
 800d44c:	0802621c 	.word	0x0802621c
 800d450:	0802623c 	.word	0x0802623c
 800d454:	08026290 	.word	0x08026290
 800d458:	0802629c 	.word	0x0802629c
 800d45c:	20004b9c 	.word	0x20004b9c

0800d460 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800d460:	b590      	push	{r4, r7, lr}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d46c:	2300      	movs	r3, #0
 800d46e:	73fb      	strb	r3, [r7, #15]
 800d470:	e01c      	b.n	800d4ac <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800d472:	7bfb      	ldrb	r3, [r7, #15]
 800d474:	2232      	movs	r2, #50	; 0x32
 800d476:	fb02 f303 	mul.w	r3, r2, r3
 800d47a:	4a11      	ldr	r2, [pc, #68]	; (800d4c0 <Is_SiemensCommand_Valid+0x60>)
 800d47c:	189c      	adds	r4, r3, r2
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
 800d480:	2232      	movs	r2, #50	; 0x32
 800d482:	fb02 f303 	mul.w	r3, r2, r3
 800d486:	4a0e      	ldr	r2, [pc, #56]	; (800d4c0 <Is_SiemensCommand_Valid+0x60>)
 800d488:	4413      	add	r3, r2
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7f2 fee2 	bl	8000254 <strlen>
 800d490:	4603      	mov	r3, r0
 800d492:	461a      	mov	r2, r3
 800d494:	4621      	mov	r1, r4
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f014 ff44 	bl	8022324 <memcmp>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d101      	bne.n	800d4a6 <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
 800d4a4:	e008      	b.n	800d4b8 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d4a6:	7bfb      	ldrb	r3, [r7, #15]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	73fb      	strb	r3, [r7, #15]
 800d4ac:	4b05      	ldr	r3, [pc, #20]	; (800d4c4 <Is_SiemensCommand_Valid+0x64>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	7bfa      	ldrb	r2, [r7, #15]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d3dd      	bcc.n	800d472 <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800d4b6:	23ff      	movs	r3, #255	; 0xff
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd90      	pop	{r4, r7, pc}
 800d4c0:	200047b4 	.word	0x200047b4
 800d4c4:	20004b9c 	.word	0x20004b9c

0800d4c8 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b087      	sub	sp, #28
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800d4d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4d8:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	82bb      	strh	r3, [r7, #20]
 800d4e6:	e022      	b.n	800d52e <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800d4e8:	8abb      	ldrh	r3, [r7, #20]
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	8afb      	ldrh	r3, [r7, #22]
 800d4f4:	4053      	eors	r3, r2
 800d4f6:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	613b      	str	r3, [r7, #16]
 800d4fc:	e011      	b.n	800d522 <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800d4fe:	8afb      	ldrh	r3, [r7, #22]
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	2b00      	cmp	r3, #0
 800d506:	d006      	beq.n	800d516 <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800d508:	8afb      	ldrh	r3, [r7, #22]
 800d50a:	085b      	lsrs	r3, r3, #1
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	4b17      	ldr	r3, [pc, #92]	; (800d56c <Siemens_CRC+0xa4>)
 800d510:	4053      	eors	r3, r2
 800d512:	82fb      	strh	r3, [r7, #22]
 800d514:	e002      	b.n	800d51c <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800d516:	8afb      	ldrh	r3, [r7, #22]
 800d518:	085b      	lsrs	r3, r3, #1
 800d51a:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	3301      	adds	r3, #1
 800d520:	613b      	str	r3, [r7, #16]
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	2b07      	cmp	r3, #7
 800d526:	ddea      	ble.n	800d4fe <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800d528:	8abb      	ldrh	r3, [r7, #20]
 800d52a:	3301      	adds	r3, #1
 800d52c:	82bb      	strh	r3, [r7, #20]
 800d52e:	8aba      	ldrh	r2, [r7, #20]
 800d530:	887b      	ldrh	r3, [r7, #2]
 800d532:	429a      	cmp	r2, r3
 800d534:	d3d8      	bcc.n	800d4e8 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800d536:	8afb      	ldrh	r3, [r7, #22]
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800d53c:	8afb      	ldrh	r3, [r7, #22]
 800d53e:	0a1b      	lsrs	r3, r3, #8
 800d540:	b29b      	uxth	r3, r3
 800d542:	b2db      	uxtb	r3, r3
 800d544:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800d546:	7b3b      	ldrb	r3, [r7, #12]
 800d548:	021b      	lsls	r3, r3, #8
 800d54a:	b21a      	sxth	r2, r3
 800d54c:	7b7b      	ldrb	r3, [r7, #13]
 800d54e:	b21b      	sxth	r3, r3
 800d550:	4313      	orrs	r3, r2
 800d552:	b21b      	sxth	r3, r3
 800d554:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800d556:	8afb      	ldrh	r3, [r7, #22]
 800d558:	43db      	mvns	r3, r3
 800d55a:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800d55c:	8afb      	ldrh	r3, [r7, #22]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	371c      	adds	r7, #28
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	ffff8408 	.word	0xffff8408

0800d570 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	af00      	add	r7, sp, #0
 800d576:	603a      	str	r2, [r7, #0]
 800d578:	461a      	mov	r2, r3
 800d57a:	4603      	mov	r3, r0
 800d57c:	71fb      	strb	r3, [r7, #7]
 800d57e:	460b      	mov	r3, r1
 800d580:	71bb      	strb	r3, [r7, #6]
 800d582:	4613      	mov	r3, r2
 800d584:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800d586:	2300      	movs	r3, #0
 800d588:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800d58e:	797b      	ldrb	r3, [r7, #5]
 800d590:	2b02      	cmp	r3, #2
 800d592:	d010      	beq.n	800d5b6 <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800d594:	79bb      	ldrb	r3, [r7, #6]
 800d596:	08db      	lsrs	r3, r3, #3
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	797a      	ldrb	r2, [r7, #5]
 800d59c:	4619      	mov	r1, r3
 800d59e:	6838      	ldr	r0, [r7, #0]
 800d5a0:	f000 f8d0 	bl	800d744 <Verify_parity>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d110      	bne.n	800d5cc <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800d5aa:	4840      	ldr	r0, [pc, #256]	; (800d6ac <Extract_Parity_Data+0x13c>)
 800d5ac:	f015 f876 	bl	802269c <puts>
			return -1;
 800d5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5b4:	e075      	b.n	800d6a2 <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800d5b6:	79fb      	ldrb	r3, [r7, #7]
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	79ba      	ldrb	r2, [r7, #6]
 800d5bc:	b291      	uxth	r1, r2
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7f3 f827 	bl	8000614 <ExtractBits>
 800d5c6:	6138      	str	r0, [r7, #16]
		return Return_value;
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	e06a      	b.n	800d6a2 <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800d5cc:	79bb      	ldrb	r3, [r7, #6]
 800d5ce:	2b08      	cmp	r3, #8
 800d5d0:	d108      	bne.n	800d5e4 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800d5d8:	7dfb      	ldrb	r3, [r7, #23]
 800d5da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5de:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800d5e0:	7dfb      	ldrb	r3, [r7, #23]
 800d5e2:	e05e      	b.n	800d6a2 <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800d5e4:	79bb      	ldrb	r3, [r7, #6]
 800d5e6:	2b18      	cmp	r3, #24
 800d5e8:	d15a      	bne.n	800d6a0 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800d5f0:	7dfb      	ldrb	r3, [r7, #23]
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
 800d5fa:	085b      	lsrs	r3, r3, #1
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800d604:	7dfb      	ldrb	r3, [r7, #23]
 800d606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d60a:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800d60c:	7dfb      	ldrb	r3, [r7, #23]
 800d60e:	089b      	lsrs	r3, r3, #2
 800d610:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	785b      	ldrb	r3, [r3, #1]
 800d61a:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800d61c:	7dfb      	ldrb	r3, [r7, #23]
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800d624:	7dfb      	ldrb	r3, [r7, #23]
 800d626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d62a:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800d62c:	7dfb      	ldrb	r3, [r7, #23]
 800d62e:	085b      	lsrs	r3, r3, #1
 800d630:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800d632:	7bbb      	ldrb	r3, [r7, #14]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d104      	bne.n	800d642 <Extract_Parity_Data+0xd2>
 800d638:	7dfb      	ldrb	r3, [r7, #23]
 800d63a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d63e:	75fb      	strb	r3, [r7, #23]
 800d640:	e003      	b.n	800d64a <Extract_Parity_Data+0xda>
 800d642:	7dfb      	ldrb	r3, [r7, #23]
 800d644:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d648:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800d64a:	7bfb      	ldrb	r3, [r7, #15]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d104      	bne.n	800d65a <Extract_Parity_Data+0xea>
 800d650:	7dfb      	ldrb	r3, [r7, #23]
 800d652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d656:	75fb      	strb	r3, [r7, #23]
 800d658:	e003      	b.n	800d662 <Extract_Parity_Data+0xf2>
 800d65a:	7dfb      	ldrb	r3, [r7, #23]
 800d65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d660:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	021b      	lsls	r3, r3, #8
 800d666:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800d668:	7dfb      	ldrb	r3, [r7, #23]
 800d66a:	693a      	ldr	r2, [r7, #16]
 800d66c:	4413      	add	r3, r2
 800d66e:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	789b      	ldrb	r3, [r3, #2]
 800d674:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800d676:	7b7b      	ldrb	r3, [r7, #13]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d104      	bne.n	800d686 <Extract_Parity_Data+0x116>
 800d67c:	7dfb      	ldrb	r3, [r7, #23]
 800d67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d682:	75fb      	strb	r3, [r7, #23]
 800d684:	e003      	b.n	800d68e <Extract_Parity_Data+0x11e>
 800d686:	7dfb      	ldrb	r3, [r7, #23]
 800d688:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d68c:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	021b      	lsls	r3, r3, #8
 800d692:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800d694:	7dfb      	ldrb	r3, [r7, #23]
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	4413      	add	r3, r2
 800d69a:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	e000      	b.n	800d6a2 <Extract_Parity_Data+0x132>
	}
	return 0;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3718      	adds	r7, #24
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	080262a4 	.word	0x080262a4

0800d6b0 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	460a      	mov	r2, r1
 800d6ba:	71fb      	strb	r3, [r7, #7]
 800d6bc:	4613      	mov	r3, r2
 800d6be:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800d6c8:	2306      	movs	r3, #6
 800d6ca:	73fb      	strb	r3, [r7, #15]
 800d6cc:	e014      	b.n	800d6f8 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800d6ce:	79fa      	ldrb	r2, [r7, #7]
 800d6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6d4:	fa42 f303 	asr.w	r3, r2, r3
 800d6d8:	f003 0301 	and.w	r3, r3, #1
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d005      	beq.n	800d6ec <Calculate_Parity+0x3c>
		{
			count++;
 800d6e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800d6ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	73fb      	strb	r3, [r7, #15]
 800d6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	dae6      	bge.n	800d6ce <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800d700:	79bb      	ldrb	r3, [r7, #6]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d109      	bne.n	800d71a <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800d706:	7bbb      	ldrb	r3, [r7, #14]
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d101      	bne.n	800d716 <Calculate_Parity+0x66>
		{
			return 0;
 800d712:	2300      	movs	r3, #0
 800d714:	e00f      	b.n	800d736 <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800d716:	2301      	movs	r3, #1
 800d718:	e00d      	b.n	800d736 <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800d71a:	79bb      	ldrb	r3, [r7, #6]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d109      	bne.n	800d734 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800d720:	7bbb      	ldrb	r3, [r7, #14]
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d101      	bne.n	800d730 <Calculate_Parity+0x80>
		{
			return 1;
 800d72c:	2301      	movs	r3, #1
 800d72e:	e002      	b.n	800d736 <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800d730:	2300      	movs	r3, #0
 800d732:	e000      	b.n	800d736 <Calculate_Parity+0x86>
		}
	}
	return 0;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
	...

0800d744 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
 800d750:	4613      	mov	r3, r2
 800d752:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800d758:	2300      	movs	r3, #0
 800d75a:	73fb      	strb	r3, [r7, #15]
 800d75c:	e03b      	b.n	800d7d6 <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	4413      	add	r3, r2
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	78ba      	ldrb	r2, [r7, #2]
 800d768:	4611      	mov	r1, r2
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7ff ffa0 	bl	800d6b0 <Calculate_Parity>
 800d770:	4603      	mov	r3, r0
 800d772:	4619      	mov	r1, r3
 800d774:	7bfb      	ldrb	r3, [r7, #15]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	4413      	add	r3, r2
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	09db      	lsrs	r3, r3, #7
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	f003 0301 	and.w	r3, r3, #1
 800d784:	4299      	cmp	r1, r3
 800d786:	d023      	beq.n	800d7d0 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800d788:	7bfb      	ldrb	r3, [r7, #15]
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	4413      	add	r3, r2
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	4619      	mov	r1, r3
 800d792:	4815      	ldr	r0, [pc, #84]	; (800d7e8 <Verify_parity+0xa4>)
 800d794:	f014 fee6 	bl	8022564 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800d798:	7bfb      	ldrb	r3, [r7, #15]
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	78ba      	ldrb	r2, [r7, #2]
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7ff ff83 	bl	800d6b0 <Calculate_Parity>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	480f      	ldr	r0, [pc, #60]	; (800d7ec <Verify_parity+0xa8>)
 800d7b0:	f014 fed8 	bl	8022564 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800d7b4:	7bfb      	ldrb	r3, [r7, #15]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	09db      	lsrs	r3, r3, #7
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	f003 0301 	and.w	r3, r3, #1
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	480a      	ldr	r0, [pc, #40]	; (800d7f0 <Verify_parity+0xac>)
 800d7c8:	f014 fecc 	bl	8022564 <iprintf>
			return 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	e007      	b.n	800d7e0 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800d7d0:	7bfb      	ldrb	r3, [r7, #15]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	73fb      	strb	r3, [r7, #15]
 800d7d6:	7bfa      	ldrb	r2, [r7, #15]
 800d7d8:	78fb      	ldrb	r3, [r7, #3]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d3bf      	bcc.n	800d75e <Verify_parity+0x1a>
		}
	}
	return 1;
 800d7de:	2301      	movs	r3, #1
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	080262c0 	.word	0x080262c0
 800d7ec:	080262d8 	.word	0x080262d8
 800d7f0:	080262ec 	.word	0x080262ec

0800d7f4 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800d7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f8:	b089      	sub	sp, #36	; 0x24
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	60ba      	str	r2, [r7, #8]
 800d800:	73fb      	strb	r3, [r7, #15]
 800d802:	460b      	mov	r3, r1
 800d804:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	83fb      	strh	r3, [r7, #30]
 800d80a:	2300      	movs	r3, #0
 800d80c:	83bb      	strh	r3, [r7, #28]
 800d80e:	2300      	movs	r3, #0
 800d810:	833b      	strh	r3, [r7, #24]
 800d812:	2300      	movs	r3, #0
 800d814:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800d816:	2300      	movs	r3, #0
 800d818:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800d81a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d81e:	2b02      	cmp	r3, #2
 800d820:	d108      	bne.n	800d834 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800d822:	7bfb      	ldrb	r3, [r7, #15]
 800d824:	b298      	uxth	r0, r3
 800d826:	7bbb      	ldrb	r3, [r7, #14]
 800d828:	b299      	uxth	r1, r3
 800d82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	f7f2 ff7d 	bl	800072c <InsertBits>
		return;
 800d832:	e13b      	b.n	800daac <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800d834:	7bbb      	ldrb	r3, [r7, #14]
 800d836:	2b08      	cmp	r3, #8
 800d838:	d12c      	bne.n	800d894 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800d83a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d83e:	2a80      	cmp	r2, #128	; 0x80
 800d840:	f173 0300 	sbcs.w	r3, r3, #0
 800d844:	d303      	bcc.n	800d84e <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800d846:	489b      	ldr	r0, [pc, #620]	; (800dab4 <Insert_cal_parity+0x2c0>)
 800d848:	f014 ff28 	bl	802269c <puts>
			return;
 800d84c:	e12e      	b.n	800daac <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800d84e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d852:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d856:	4611      	mov	r1, r2
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff ff29 	bl	800d6b0 <Calculate_Parity>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b01      	cmp	r3, #1
 800d862:	d10b      	bne.n	800d87c <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800d864:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d874:	b2da      	uxtb	r2, r3
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	701a      	strb	r2, [r3, #0]
 800d87a:	e117      	b.n	800daac <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800d87c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	701a      	strb	r2, [r3, #0]
 800d892:	e10b      	b.n	800daac <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800d894:	7bbb      	ldrb	r3, [r7, #14]
 800d896:	2b18      	cmp	r3, #24
 800d898:	f040 8104 	bne.w	800daa4 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800d89c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d8a0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800d8a4:	f173 0300 	sbcs.w	r3, r3, #0
 800d8a8:	d303      	bcc.n	800d8b2 <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800d8aa:	4883      	ldr	r0, [pc, #524]	; (800dab8 <Insert_cal_parity+0x2c4>)
 800d8ac:	f014 fef6 	bl	802269c <puts>
			return;
 800d8b0:	e0fc      	b.n	800daac <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	76bb      	strb	r3, [r7, #26]
 800d8ba:	e0ee      	b.n	800da9a <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800d8bc:	7ebb      	ldrb	r3, [r7, #26]
 800d8be:	00d9      	lsls	r1, r3, #3
 800d8c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d8c4:	f1c1 0620 	rsb	r6, r1, #32
 800d8c8:	f1a1 0c20 	sub.w	ip, r1, #32
 800d8cc:	fa22 f001 	lsr.w	r0, r2, r1
 800d8d0:	6038      	str	r0, [r7, #0]
 800d8d2:	fa03 f606 	lsl.w	r6, r3, r6
 800d8d6:	6838      	ldr	r0, [r7, #0]
 800d8d8:	4330      	orrs	r0, r6
 800d8da:	6038      	str	r0, [r7, #0]
 800d8dc:	fa23 fc0c 	lsr.w	ip, r3, ip
 800d8e0:	6838      	ldr	r0, [r7, #0]
 800d8e2:	ea40 000c 	orr.w	r0, r0, ip
 800d8e6:	6038      	str	r0, [r7, #0]
 800d8e8:	40cb      	lsrs	r3, r1
 800d8ea:	607b      	str	r3, [r7, #4]
 800d8ec:	783b      	ldrb	r3, [r7, #0]
 800d8ee:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800d8f0:	7ebb      	ldrb	r3, [r7, #26]
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d07a      	beq.n	800d9ec <Insert_cal_parity+0x1f8>
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	f300 8094 	bgt.w	800da24 <Insert_cal_parity+0x230>
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <Insert_cal_parity+0x112>
 800d900:	2b01      	cmp	r3, #1
 800d902:	d01f      	beq.n	800d944 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800d904:	e08e      	b.n	800da24 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800d906:	7ebb      	ldrb	r3, [r7, #26]
 800d908:	00d9      	lsls	r1, r3, #3
 800d90a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d90e:	f1c1 0620 	rsb	r6, r1, #32
 800d912:	f1a1 0020 	sub.w	r0, r1, #32
 800d916:	fa22 f401 	lsr.w	r4, r2, r1
 800d91a:	fa03 f606 	lsl.w	r6, r3, r6
 800d91e:	4334      	orrs	r4, r6
 800d920:	fa23 f000 	lsr.w	r0, r3, r0
 800d924:	4304      	orrs	r4, r0
 800d926:	fa23 f501 	lsr.w	r5, r3, r1
 800d92a:	f04f 0200 	mov.w	r2, #0
 800d92e:	f04f 0300 	mov.w	r3, #0
 800d932:	09e2      	lsrs	r2, r4, #7
 800d934:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800d938:	09eb      	lsrs	r3, r5, #7
 800d93a:	b293      	uxth	r3, r2
 800d93c:	f003 0301 	and.w	r3, r3, #1
 800d940:	83fb      	strh	r3, [r7, #30]
					break;
 800d942:	e070      	b.n	800da26 <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800d944:	7efb      	ldrb	r3, [r7, #27]
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800d94a:	8bfb      	ldrh	r3, [r7, #30]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d104      	bne.n	800d95a <Insert_cal_parity+0x166>
 800d950:	7efb      	ldrb	r3, [r7, #27]
 800d952:	f023 0301 	bic.w	r3, r3, #1
 800d956:	76fb      	strb	r3, [r7, #27]
 800d958:	e003      	b.n	800d962 <Insert_cal_parity+0x16e>
 800d95a:	7efb      	ldrb	r3, [r7, #27]
 800d95c:	f043 0301 	orr.w	r3, r3, #1
 800d960:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800d962:	7ebb      	ldrb	r3, [r7, #26]
 800d964:	00d9      	lsls	r1, r3, #3
 800d966:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d96a:	f1c1 0620 	rsb	r6, r1, #32
 800d96e:	f1a1 0020 	sub.w	r0, r1, #32
 800d972:	fa22 f801 	lsr.w	r8, r2, r1
 800d976:	fa03 f606 	lsl.w	r6, r3, r6
 800d97a:	ea48 0806 	orr.w	r8, r8, r6
 800d97e:	fa23 f000 	lsr.w	r0, r3, r0
 800d982:	ea48 0800 	orr.w	r8, r8, r0
 800d986:	fa23 f901 	lsr.w	r9, r3, r1
 800d98a:	f04f 0200 	mov.w	r2, #0
 800d98e:	f04f 0300 	mov.w	r3, #0
 800d992:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800d996:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800d99a:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800d99e:	b293      	uxth	r3, r2
 800d9a0:	f003 0301 	and.w	r3, r3, #1
 800d9a4:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800d9a6:	7ebb      	ldrb	r3, [r7, #26]
 800d9a8:	00d9      	lsls	r1, r3, #3
 800d9aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d9ae:	f1c1 0620 	rsb	r6, r1, #32
 800d9b2:	f1a1 0020 	sub.w	r0, r1, #32
 800d9b6:	fa22 fa01 	lsr.w	sl, r2, r1
 800d9ba:	fa03 f606 	lsl.w	r6, r3, r6
 800d9be:	ea4a 0a06 	orr.w	sl, sl, r6
 800d9c2:	fa23 f000 	lsr.w	r0, r3, r0
 800d9c6:	ea4a 0a00 	orr.w	sl, sl, r0
 800d9ca:	fa23 fb01 	lsr.w	fp, r3, r1
 800d9ce:	f04f 0200 	mov.w	r2, #0
 800d9d2:	f04f 0300 	mov.w	r3, #0
 800d9d6:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800d9da:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800d9de:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800d9e2:	b293      	uxth	r3, r2
 800d9e4:	f003 0301 	and.w	r3, r3, #1
 800d9e8:	83bb      	strh	r3, [r7, #28]
					break;
 800d9ea:	e01c      	b.n	800da26 <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800d9ec:	7efb      	ldrb	r3, [r7, #27]
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800d9f2:	8bbb      	ldrh	r3, [r7, #28]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d104      	bne.n	800da02 <Insert_cal_parity+0x20e>
 800d9f8:	7efb      	ldrb	r3, [r7, #27]
 800d9fa:	f023 0301 	bic.w	r3, r3, #1
 800d9fe:	76fb      	strb	r3, [r7, #27]
 800da00:	e003      	b.n	800da0a <Insert_cal_parity+0x216>
 800da02:	7efb      	ldrb	r3, [r7, #27]
 800da04:	f043 0301 	orr.w	r3, r3, #1
 800da08:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800da0a:	8bfb      	ldrh	r3, [r7, #30]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d104      	bne.n	800da1a <Insert_cal_parity+0x226>
 800da10:	7efb      	ldrb	r3, [r7, #27]
 800da12:	f023 0302 	bic.w	r3, r3, #2
 800da16:	76fb      	strb	r3, [r7, #27]
					break;
 800da18:	e005      	b.n	800da26 <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800da1a:	7efb      	ldrb	r3, [r7, #27]
 800da1c:	f043 0302 	orr.w	r3, r3, #2
 800da20:	76fb      	strb	r3, [r7, #27]
					break;
 800da22:	e000      	b.n	800da26 <Insert_cal_parity+0x232>
					break;
 800da24:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800da26:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800da2a:	7efb      	ldrb	r3, [r7, #27]
 800da2c:	4611      	mov	r1, r2
 800da2e:	4618      	mov	r0, r3
 800da30:	f7ff fe3e 	bl	800d6b0 <Calculate_Parity>
 800da34:	4603      	mov	r3, r0
 800da36:	2b01      	cmp	r3, #1
 800da38:	d116      	bne.n	800da68 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800da3a:	7ebb      	ldrb	r3, [r7, #26]
 800da3c:	f1c3 0302 	rsb	r3, r3, #2
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	4413      	add	r3, r2
 800da44:	7efa      	ldrb	r2, [r7, #27]
 800da46:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800da48:	7ebb      	ldrb	r3, [r7, #26]
 800da4a:	f1c3 0302 	rsb	r3, r3, #2
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	4413      	add	r3, r2
 800da52:	781a      	ldrb	r2, [r3, #0]
 800da54:	7ebb      	ldrb	r3, [r7, #26]
 800da56:	f1c3 0302 	rsb	r3, r3, #2
 800da5a:	68b9      	ldr	r1, [r7, #8]
 800da5c:	440b      	add	r3, r1
 800da5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800da62:	b2d2      	uxtb	r2, r2
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	e015      	b.n	800da94 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800da68:	7ebb      	ldrb	r3, [r7, #26]
 800da6a:	f1c3 0302 	rsb	r3, r3, #2
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	4413      	add	r3, r2
 800da72:	7efa      	ldrb	r2, [r7, #27]
 800da74:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800da76:	7ebb      	ldrb	r3, [r7, #26]
 800da78:	f1c3 0302 	rsb	r3, r3, #2
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	4413      	add	r3, r2
 800da80:	781a      	ldrb	r2, [r3, #0]
 800da82:	7ebb      	ldrb	r3, [r7, #26]
 800da84:	f1c3 0302 	rsb	r3, r3, #2
 800da88:	68b9      	ldr	r1, [r7, #8]
 800da8a:	440b      	add	r3, r1
 800da8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800da90:	b2d2      	uxtb	r2, r2
 800da92:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800da94:	7ebb      	ldrb	r3, [r7, #26]
 800da96:	3301      	adds	r3, #1
 800da98:	76bb      	strb	r3, [r7, #26]
 800da9a:	7ebb      	ldrb	r3, [r7, #26]
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	f67f af0d 	bls.w	800d8bc <Insert_cal_parity+0xc8>
 800daa2:	e003      	b.n	800daac <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800daa4:	4805      	ldr	r0, [pc, #20]	; (800dabc <Insert_cal_parity+0x2c8>)
 800daa6:	f014 fdf9 	bl	802269c <puts>
		return;
 800daaa:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800daac:	3724      	adds	r7, #36	; 0x24
 800daae:	46bd      	mov	sp, r7
 800dab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab4:	08026304 	.word	0x08026304
 800dab8:	08026338 	.word	0x08026338
 800dabc:	0802636c 	.word	0x0802636c

0800dac0 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	460b      	mov	r3, r1
 800daca:	807b      	strh	r3, [r7, #2]
 800dacc:	4613      	mov	r3, r2
 800dace:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800dad0:	2300      	movs	r3, #0
 800dad2:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800dad4:	2300      	movs	r3, #0
 800dad6:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800dad8:	787b      	ldrb	r3, [r7, #1]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d133      	bne.n	800db46 <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800dade:	887b      	ldrh	r3, [r7, #2]
 800dae0:	085b      	lsrs	r3, r3, #1
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	3b02      	subs	r3, #2
 800dae6:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800dae8:	2300      	movs	r3, #0
 800daea:	81fb      	strh	r3, [r7, #14]
 800daec:	e025      	b.n	800db3a <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800daee:	89fb      	ldrh	r3, [r7, #14]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	4413      	add	r3, r2
 800daf4:	781a      	ldrb	r2, [r3, #0]
 800daf6:	89f9      	ldrh	r1, [r7, #14]
 800daf8:	89bb      	ldrh	r3, [r7, #12]
 800dafa:	440b      	add	r3, r1
 800dafc:	3302      	adds	r3, #2
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	440b      	add	r3, r1
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	43db      	mvns	r3, r3
 800db06:	b2db      	uxtb	r3, r3
 800db08:	429a      	cmp	r2, r3
 800db0a:	d013      	beq.n	800db34 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800db0c:	89fb      	ldrh	r3, [r7, #14]
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	4413      	add	r3, r2
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	4619      	mov	r1, r3
 800db16:	89fa      	ldrh	r2, [r7, #14]
 800db18:	89bb      	ldrh	r3, [r7, #12]
 800db1a:	4413      	add	r3, r2
 800db1c:	3302      	adds	r3, #2
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	4413      	add	r3, r2
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	43db      	mvns	r3, r3
 800db26:	b2db      	uxtb	r3, r3
 800db28:	461a      	mov	r2, r3
 800db2a:	481a      	ldr	r0, [pc, #104]	; (800db94 <Data_Compliment+0xd4>)
 800db2c:	f014 fd1a 	bl	8022564 <iprintf>
				return 0;
 800db30:	2300      	movs	r3, #0
 800db32:	e02b      	b.n	800db8c <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800db34:	89fb      	ldrh	r3, [r7, #14]
 800db36:	3301      	adds	r3, #1
 800db38:	81fb      	strh	r3, [r7, #14]
 800db3a:	89fa      	ldrh	r2, [r7, #14]
 800db3c:	89bb      	ldrh	r3, [r7, #12]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d3d5      	bcc.n	800daee <Data_Compliment+0x2e>
			}
		}
		return 1;
 800db42:	2301      	movs	r3, #1
 800db44:	e022      	b.n	800db8c <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800db46:	787b      	ldrb	r3, [r7, #1]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d11e      	bne.n	800db8a <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800db4c:	2300      	movs	r3, #0
 800db4e:	81fb      	strh	r3, [r7, #14]
 800db50:	e010      	b.n	800db74 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800db52:	89fb      	ldrh	r3, [r7, #14]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	4413      	add	r3, r2
 800db58:	781a      	ldrb	r2, [r3, #0]
 800db5a:	89fb      	ldrh	r3, [r7, #14]
 800db5c:	1c99      	adds	r1, r3, #2
 800db5e:	887b      	ldrh	r3, [r7, #2]
 800db60:	440b      	add	r3, r1
 800db62:	4619      	mov	r1, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	440b      	add	r3, r1
 800db68:	43d2      	mvns	r2, r2
 800db6a:	b2d2      	uxtb	r2, r2
 800db6c:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800db6e:	89fb      	ldrh	r3, [r7, #14]
 800db70:	3301      	adds	r3, #1
 800db72:	81fb      	strh	r3, [r7, #14]
 800db74:	89fa      	ldrh	r2, [r7, #14]
 800db76:	887b      	ldrh	r3, [r7, #2]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d3ea      	bcc.n	800db52 <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800db7c:	89fa      	ldrh	r2, [r7, #14]
 800db7e:	887b      	ldrh	r3, [r7, #2]
 800db80:	4413      	add	r3, r2
 800db82:	b29b      	uxth	r3, r3
 800db84:	3302      	adds	r3, #2
 800db86:	b29b      	uxth	r3, r3
 800db88:	e000      	b.n	800db8c <Data_Compliment+0xcc>
	}
	return 0;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	0802637c 	.word	0x0802637c

0800db98 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800dba2:	4b1a      	ldr	r3, [pc, #104]	; (800dc0c <CheckToSendReplyorNot+0x74>)
 800dba4:	785b      	ldrb	r3, [r3, #1]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d104      	bne.n	800dbb4 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800dbaa:	79fb      	ldrb	r3, [r7, #7]
 800dbac:	f043 0301 	orr.w	r3, r3, #1
 800dbb0:	71fb      	strb	r3, [r7, #7]
 800dbb2:	e003      	b.n	800dbbc <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800dbb4:	79fb      	ldrb	r3, [r7, #7]
 800dbb6:	f023 0301 	bic.w	r3, r3, #1
 800dbba:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800dbbc:	4b14      	ldr	r3, [pc, #80]	; (800dc10 <CheckToSendReplyorNot+0x78>)
 800dbbe:	785b      	ldrb	r3, [r3, #1]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d104      	bne.n	800dbce <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800dbc4:	79fb      	ldrb	r3, [r7, #7]
 800dbc6:	f043 0302 	orr.w	r3, r3, #2
 800dbca:	71fb      	strb	r3, [r7, #7]
 800dbcc:	e003      	b.n	800dbd6 <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	f023 0302 	bic.w	r3, r3, #2
 800dbd4:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800dbd6:	79fb      	ldrb	r3, [r7, #7]
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	dc02      	bgt.n	800dbe2 <CheckToSendReplyorNot+0x4a>
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	da03      	bge.n	800dbe8 <CheckToSendReplyorNot+0x50>
 800dbe0:	e00a      	b.n	800dbf8 <CheckToSendReplyorNot+0x60>
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d004      	beq.n	800dbf0 <CheckToSendReplyorNot+0x58>
 800dbe6:	e007      	b.n	800dbf8 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800dbe8:	4b0a      	ldr	r3, [pc, #40]	; (800dc14 <CheckToSendReplyorNot+0x7c>)
 800dbea:	2201      	movs	r2, #1
 800dbec:	701a      	strb	r2, [r3, #0]
		break;
 800dbee:	e007      	b.n	800dc00 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
#endif
#ifdef EI_2
		SendReply = 0;
 800dbf0:	4b08      	ldr	r3, [pc, #32]	; (800dc14 <CheckToSendReplyorNot+0x7c>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	701a      	strb	r2, [r3, #0]
#endif
		break;
 800dbf6:	e003      	b.n	800dc00 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800dbf8:	4b06      	ldr	r3, [pc, #24]	; (800dc14 <CheckToSendReplyorNot+0x7c>)
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	701a      	strb	r2, [r3, #0]
		break;
 800dbfe:	bf00      	nop
	}

}
 800dc00:	bf00      	nop
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	2000347c 	.word	0x2000347c
 800dc10:	20003480 	.word	0x20003480
 800dc14:	20004b9d 	.word	0x20004b9d

0800dc18 <PrintSignals>:



void PrintSignals(void)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800dc1e:	4b2d      	ldr	r3, [pc, #180]	; (800dcd4 <PrintSignals+0xbc>)
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	461a      	mov	r2, r3
 800dc24:	492c      	ldr	r1, [pc, #176]	; (800dcd8 <PrintSignals+0xc0>)
 800dc26:	482d      	ldr	r0, [pc, #180]	; (800dcdc <PrintSignals+0xc4>)
 800dc28:	f014 fb8c 	bl	8022344 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	80fb      	strh	r3, [r7, #6]
 800dc30:	e045      	b.n	800dcbe <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800dc32:	4b2b      	ldr	r3, [pc, #172]	; (800dce0 <PrintSignals+0xc8>)
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	88fa      	ldrh	r2, [r7, #6]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d83c      	bhi.n	800dcb6 <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800dc3c:	88fb      	ldrh	r3, [r7, #6]
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	da00      	bge.n	800dc46 <PrintSignals+0x2e>
 800dc44:	3307      	adds	r3, #7
 800dc46:	10db      	asrs	r3, r3, #3
 800dc48:	461a      	mov	r2, r3
 800dc4a:	4b26      	ldr	r3, [pc, #152]	; (800dce4 <PrintSignals+0xcc>)
 800dc4c:	4413      	add	r3, r2
 800dc4e:	789b      	ldrb	r3, [r3, #2]
 800dc50:	4619      	mov	r1, r3
 800dc52:	88fb      	ldrh	r3, [r7, #6]
 800dc54:	3b01      	subs	r3, #1
 800dc56:	425a      	negs	r2, r3
 800dc58:	f003 0307 	and.w	r3, r3, #7
 800dc5c:	f002 0207 	and.w	r2, r2, #7
 800dc60:	bf58      	it	pl
 800dc62:	4253      	negpl	r3, r2
 800dc64:	2201      	movs	r2, #1
 800dc66:	fa02 f303 	lsl.w	r3, r2, r3
 800dc6a:	400b      	ands	r3, r1
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	dd0c      	ble.n	800dc8a <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800dc70:	88fb      	ldrh	r3, [r7, #6]
 800dc72:	1e5a      	subs	r2, r3, #1
 800dc74:	4613      	mov	r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4413      	add	r3, r2
 800dc7a:	00db      	lsls	r3, r3, #3
 800dc7c:	4a1a      	ldr	r2, [pc, #104]	; (800dce8 <PrintSignals+0xd0>)
 800dc7e:	4413      	add	r3, r2
 800dc80:	4619      	mov	r1, r3
 800dc82:	481a      	ldr	r0, [pc, #104]	; (800dcec <PrintSignals+0xd4>)
 800dc84:	f014 fc6e 	bl	8022564 <iprintf>
 800dc88:	e00b      	b.n	800dca2 <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800dc8a:	88fb      	ldrh	r3, [r7, #6]
 800dc8c:	1e5a      	subs	r2, r3, #1
 800dc8e:	4613      	mov	r3, r2
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	4413      	add	r3, r2
 800dc94:	00db      	lsls	r3, r3, #3
 800dc96:	4a14      	ldr	r2, [pc, #80]	; (800dce8 <PrintSignals+0xd0>)
 800dc98:	4413      	add	r3, r2
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	4814      	ldr	r0, [pc, #80]	; (800dcf0 <PrintSignals+0xd8>)
 800dc9e:	f014 fc61 	bl	8022564 <iprintf>
		}

		if( (Traverser%2) == 0)
 800dca2:	88fb      	ldrh	r3, [r7, #6]
 800dca4:	f003 0301 	and.w	r3, r3, #1
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d104      	bne.n	800dcb8 <PrintSignals+0xa0>
		{
			printf("\n");
 800dcae:	200a      	movs	r0, #10
 800dcb0:	f014 fc70 	bl	8022594 <putchar>
 800dcb4:	e000      	b.n	800dcb8 <PrintSignals+0xa0>
			continue;
 800dcb6:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800dcb8:	88fb      	ldrh	r3, [r7, #6]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	80fb      	strh	r3, [r7, #6]
 800dcbe:	88fa      	ldrh	r2, [r7, #6]
 800dcc0:	4b08      	ldr	r3, [pc, #32]	; (800dce4 <PrintSignals+0xcc>)
 800dcc2:	881b      	ldrh	r3, [r3, #0]
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	ddb3      	ble.n	800dc32 <PrintSignals+0x1a>
		}
	}
}
 800dcca:	bf00      	nop
 800dccc:	bf00      	nop
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	200036a8 	.word	0x200036a8
 800dcd8:	200036ac 	.word	0x200036ac
 800dcdc:	200034a6 	.word	0x200034a6
 800dce0:	200047b0 	.word	0x200047b0
 800dce4:	200034a4 	.word	0x200034a4
 800dce8:	20003cc0 	.word	0x20003cc0
 800dcec:	080263b4 	.word	0x080263b4
 800dcf0:	080263c4 	.word	0x080263c4

0800dcf4 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	607b      	str	r3, [r7, #4]

	Get_time();
 800dd06:	f7fd f9f7 	bl	800b0f8 <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800dd0a:	4b21      	ldr	r3, [pc, #132]	; (800dd90 <GetTimeStamp+0x9c>)
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800dd14:	fb03 f202 	mul.w	r2, r3, r2
 800dd18:	4b1d      	ldr	r3, [pc, #116]	; (800dd90 <GetTimeStamp+0x9c>)
 800dd1a:	785b      	ldrb	r3, [r3, #1]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	460b      	mov	r3, r1
 800dd20:	011b      	lsls	r3, r3, #4
 800dd22:	1a5b      	subs	r3, r3, r1
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4413      	add	r3, r2
 800dd28:	4a19      	ldr	r2, [pc, #100]	; (800dd90 <GetTimeStamp+0x9c>)
 800dd2a:	7892      	ldrb	r2, [r2, #2]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800dd30:	4b18      	ldr	r3, [pc, #96]	; (800dd94 <GetTimeStamp+0xa0>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d007      	beq.n	800dd4a <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800dd3a:	4a16      	ldr	r2, [pc, #88]	; (800dd94 <GetTimeStamp+0xa0>)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800dd40:	f007 fc06 	bl	8015550 <HAL_GetTick>
 800dd44:	4603      	mov	r3, r0
 800dd46:	4a14      	ldr	r2, [pc, #80]	; (800dd98 <GetTimeStamp+0xa4>)
 800dd48:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800dd4a:	4b13      	ldr	r3, [pc, #76]	; (800dd98 <GetTimeStamp+0xa4>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 fe1c 	bl	800e98c <HAL_Elaps_Ticks>
 800dd54:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	4613      	mov	r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	4413      	add	r3, r2
 800dd5e:	005b      	lsls	r3, r3, #1
 800dd60:	4619      	mov	r1, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4a0d      	ldr	r2, [pc, #52]	; (800dd9c <GetTimeStamp+0xa8>)
 800dd66:	fba2 2303 	umull	r2, r3, r2, r3
 800dd6a:	095b      	lsrs	r3, r3, #5
 800dd6c:	440b      	add	r3, r1
 800dd6e:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800dd70:	4b0b      	ldr	r3, [pc, #44]	; (800dda0 <GetTimeStamp+0xac>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d005      	beq.n	800dd86 <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800dd7a:	4a09      	ldr	r2, [pc, #36]	; (800dda0 <GetTimeStamp+0xac>)
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800dd80:	4a08      	ldr	r2, [pc, #32]	; (800dda4 <GetTimeStamp+0xb0>)
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800dd86:	bf00      	nop
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	200027e4 	.word	0x200027e4
 800dd94:	20004ba4 	.word	0x20004ba4
 800dd98:	20004ba8 	.word	0x20004ba8
 800dd9c:	51eb851f 	.word	0x51eb851f
 800dda0:	20004bac 	.word	0x20004bac
 800dda4:	20003cbc 	.word	0x20003cbc

0800dda8 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800dda8:	b490      	push	{r4, r7}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800ddb2:	79fb      	ldrb	r3, [r7, #7]
 800ddb4:	1c5a      	adds	r2, r3, #1
 800ddb6:	71fa      	strb	r2, [r7, #7]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	4613      	mov	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	4413      	add	r3, r2
 800ddc0:	00db      	lsls	r3, r3, #3
 800ddc2:	4acd      	ldr	r2, [pc, #820]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800ddc4:	4413      	add	r3, r2
 800ddc6:	4acd      	ldr	r2, [pc, #820]	; (800e0fc <UpdateSIGNALSNames+0x354>)
 800ddc8:	6810      	ldr	r0, [r2, #0]
 800ddca:	6018      	str	r0, [r3, #0]
 800ddcc:	8892      	ldrh	r2, [r2, #4]
 800ddce:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800ddd0:	79fb      	ldrb	r3, [r7, #7]
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	71fa      	strb	r2, [r7, #7]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	4613      	mov	r3, r2
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4413      	add	r3, r2
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	4ac5      	ldr	r2, [pc, #788]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800dde2:	4413      	add	r3, r2
 800dde4:	4ac6      	ldr	r2, [pc, #792]	; (800e100 <UpdateSIGNALSNames+0x358>)
 800dde6:	6810      	ldr	r0, [r2, #0]
 800dde8:	6018      	str	r0, [r3, #0]
 800ddea:	8892      	ldrh	r2, [r2, #4]
 800ddec:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800ddee:	79fb      	ldrb	r3, [r7, #7]
 800ddf0:	1c5a      	adds	r2, r3, #1
 800ddf2:	71fa      	strb	r2, [r7, #7]
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4413      	add	r3, r2
 800ddfc:	00db      	lsls	r3, r3, #3
 800ddfe:	4abe      	ldr	r2, [pc, #760]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800de00:	4413      	add	r3, r2
 800de02:	4ac0      	ldr	r2, [pc, #768]	; (800e104 <UpdateSIGNALSNames+0x35c>)
 800de04:	6810      	ldr	r0, [r2, #0]
 800de06:	6018      	str	r0, [r3, #0]
 800de08:	8892      	ldrh	r2, [r2, #4]
 800de0a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800de0c:	79fb      	ldrb	r3, [r7, #7]
 800de0e:	1c5a      	adds	r2, r3, #1
 800de10:	71fa      	strb	r2, [r7, #7]
 800de12:	461a      	mov	r2, r3
 800de14:	4613      	mov	r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4413      	add	r3, r2
 800de1a:	00db      	lsls	r3, r3, #3
 800de1c:	4ab6      	ldr	r2, [pc, #728]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800de1e:	4413      	add	r3, r2
 800de20:	4ab9      	ldr	r2, [pc, #740]	; (800e108 <UpdateSIGNALSNames+0x360>)
 800de22:	6810      	ldr	r0, [r2, #0]
 800de24:	6018      	str	r0, [r3, #0]
 800de26:	8892      	ldrh	r2, [r2, #4]
 800de28:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800de2a:	79fb      	ldrb	r3, [r7, #7]
 800de2c:	1c5a      	adds	r2, r3, #1
 800de2e:	71fa      	strb	r2, [r7, #7]
 800de30:	461a      	mov	r2, r3
 800de32:	4613      	mov	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4413      	add	r3, r2
 800de38:	00db      	lsls	r3, r3, #3
 800de3a:	4aaf      	ldr	r2, [pc, #700]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800de3c:	4413      	add	r3, r2
 800de3e:	4ab3      	ldr	r2, [pc, #716]	; (800e10c <UpdateSIGNALSNames+0x364>)
 800de40:	6810      	ldr	r0, [r2, #0]
 800de42:	6018      	str	r0, [r3, #0]
 800de44:	8892      	ldrh	r2, [r2, #4]
 800de46:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800de48:	79fb      	ldrb	r3, [r7, #7]
 800de4a:	1c5a      	adds	r2, r3, #1
 800de4c:	71fa      	strb	r2, [r7, #7]
 800de4e:	461a      	mov	r2, r3
 800de50:	4613      	mov	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4413      	add	r3, r2
 800de56:	00db      	lsls	r3, r3, #3
 800de58:	4aa7      	ldr	r2, [pc, #668]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800de5a:	4413      	add	r3, r2
 800de5c:	4aac      	ldr	r2, [pc, #688]	; (800e110 <UpdateSIGNALSNames+0x368>)
 800de5e:	6810      	ldr	r0, [r2, #0]
 800de60:	6018      	str	r0, [r3, #0]
 800de62:	8891      	ldrh	r1, [r2, #4]
 800de64:	7992      	ldrb	r2, [r2, #6]
 800de66:	8099      	strh	r1, [r3, #4]
 800de68:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800de6a:	79fb      	ldrb	r3, [r7, #7]
 800de6c:	1c5a      	adds	r2, r3, #1
 800de6e:	71fa      	strb	r2, [r7, #7]
 800de70:	461a      	mov	r2, r3
 800de72:	4613      	mov	r3, r2
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	4413      	add	r3, r2
 800de78:	00db      	lsls	r3, r3, #3
 800de7a:	4a9f      	ldr	r2, [pc, #636]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800de7c:	4413      	add	r3, r2
 800de7e:	4aa5      	ldr	r2, [pc, #660]	; (800e114 <UpdateSIGNALSNames+0x36c>)
 800de80:	6810      	ldr	r0, [r2, #0]
 800de82:	6018      	str	r0, [r3, #0]
 800de84:	8891      	ldrh	r1, [r2, #4]
 800de86:	7992      	ldrb	r2, [r2, #6]
 800de88:	8099      	strh	r1, [r3, #4]
 800de8a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800de8c:	79fb      	ldrb	r3, [r7, #7]
 800de8e:	1c5a      	adds	r2, r3, #1
 800de90:	71fa      	strb	r2, [r7, #7]
 800de92:	461a      	mov	r2, r3
 800de94:	4613      	mov	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4413      	add	r3, r2
 800de9a:	00db      	lsls	r3, r3, #3
 800de9c:	4a96      	ldr	r2, [pc, #600]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800de9e:	4413      	add	r3, r2
 800dea0:	4a9d      	ldr	r2, [pc, #628]	; (800e118 <UpdateSIGNALSNames+0x370>)
 800dea2:	6810      	ldr	r0, [r2, #0]
 800dea4:	6018      	str	r0, [r3, #0]
 800dea6:	7912      	ldrb	r2, [r2, #4]
 800dea8:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	1c5a      	adds	r2, r3, #1
 800deae:	71fa      	strb	r2, [r7, #7]
 800deb0:	461a      	mov	r2, r3
 800deb2:	4613      	mov	r3, r2
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	00db      	lsls	r3, r3, #3
 800deba:	4a8f      	ldr	r2, [pc, #572]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800debc:	4413      	add	r3, r2
 800debe:	4997      	ldr	r1, [pc, #604]	; (800e11c <UpdateSIGNALSNames+0x374>)
 800dec0:	461a      	mov	r2, r3
 800dec2:	460b      	mov	r3, r1
 800dec4:	cb03      	ldmia	r3!, {r0, r1}
 800dec6:	6010      	str	r0, [r2, #0]
 800dec8:	6051      	str	r1, [r2, #4]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800dece:	79fb      	ldrb	r3, [r7, #7]
 800ded0:	1c5a      	adds	r2, r3, #1
 800ded2:	71fa      	strb	r2, [r7, #7]
 800ded4:	461a      	mov	r2, r3
 800ded6:	4613      	mov	r3, r2
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	00db      	lsls	r3, r3, #3
 800dede:	4a86      	ldr	r2, [pc, #536]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800dee0:	4413      	add	r3, r2
 800dee2:	4a8f      	ldr	r2, [pc, #572]	; (800e120 <UpdateSIGNALSNames+0x378>)
 800dee4:	6810      	ldr	r0, [r2, #0]
 800dee6:	6018      	str	r0, [r3, #0]
 800dee8:	8892      	ldrh	r2, [r2, #4]
 800deea:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800deec:	79fb      	ldrb	r3, [r7, #7]
 800deee:	1c5a      	adds	r2, r3, #1
 800def0:	71fa      	strb	r2, [r7, #7]
 800def2:	461a      	mov	r2, r3
 800def4:	4613      	mov	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4413      	add	r3, r2
 800defa:	00db      	lsls	r3, r3, #3
 800defc:	4a7e      	ldr	r2, [pc, #504]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800defe:	4413      	add	r3, r2
 800df00:	4988      	ldr	r1, [pc, #544]	; (800e124 <UpdateSIGNALSNames+0x37c>)
 800df02:	461a      	mov	r2, r3
 800df04:	460b      	mov	r3, r1
 800df06:	cb03      	ldmia	r3!, {r0, r1}
 800df08:	6010      	str	r0, [r2, #0]
 800df0a:	6051      	str	r1, [r2, #4]
 800df0c:	881b      	ldrh	r3, [r3, #0]
 800df0e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800df10:	79fb      	ldrb	r3, [r7, #7]
 800df12:	1c5a      	adds	r2, r3, #1
 800df14:	71fa      	strb	r2, [r7, #7]
 800df16:	461a      	mov	r2, r3
 800df18:	4613      	mov	r3, r2
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	4413      	add	r3, r2
 800df1e:	00db      	lsls	r3, r3, #3
 800df20:	4a75      	ldr	r2, [pc, #468]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800df22:	4413      	add	r3, r2
 800df24:	4980      	ldr	r1, [pc, #512]	; (800e128 <UpdateSIGNALSNames+0x380>)
 800df26:	461a      	mov	r2, r3
 800df28:	460b      	mov	r3, r1
 800df2a:	cb03      	ldmia	r3!, {r0, r1}
 800df2c:	6010      	str	r0, [r2, #0]
 800df2e:	6051      	str	r1, [r2, #4]
 800df30:	8819      	ldrh	r1, [r3, #0]
 800df32:	789b      	ldrb	r3, [r3, #2]
 800df34:	8111      	strh	r1, [r2, #8]
 800df36:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800df38:	79fb      	ldrb	r3, [r7, #7]
 800df3a:	1c5a      	adds	r2, r3, #1
 800df3c:	71fa      	strb	r2, [r7, #7]
 800df3e:	461a      	mov	r2, r3
 800df40:	4613      	mov	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	00db      	lsls	r3, r3, #3
 800df48:	4a6b      	ldr	r2, [pc, #428]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800df4a:	4413      	add	r3, r2
 800df4c:	4977      	ldr	r1, [pc, #476]	; (800e12c <UpdateSIGNALSNames+0x384>)
 800df4e:	461a      	mov	r2, r3
 800df50:	460b      	mov	r3, r1
 800df52:	cb03      	ldmia	r3!, {r0, r1}
 800df54:	6010      	str	r0, [r2, #0]
 800df56:	6051      	str	r1, [r2, #4]
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800df5c:	79fb      	ldrb	r3, [r7, #7]
 800df5e:	1c5a      	adds	r2, r3, #1
 800df60:	71fa      	strb	r2, [r7, #7]
 800df62:	461a      	mov	r2, r3
 800df64:	4613      	mov	r3, r2
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	4413      	add	r3, r2
 800df6a:	00db      	lsls	r3, r3, #3
 800df6c:	4a62      	ldr	r2, [pc, #392]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800df6e:	4413      	add	r3, r2
 800df70:	496f      	ldr	r1, [pc, #444]	; (800e130 <UpdateSIGNALSNames+0x388>)
 800df72:	461a      	mov	r2, r3
 800df74:	460b      	mov	r3, r1
 800df76:	cb03      	ldmia	r3!, {r0, r1}
 800df78:	6010      	str	r0, [r2, #0]
 800df7a:	6051      	str	r1, [r2, #4]
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800df80:	79fb      	ldrb	r3, [r7, #7]
 800df82:	1c5a      	adds	r2, r3, #1
 800df84:	71fa      	strb	r2, [r7, #7]
 800df86:	461a      	mov	r2, r3
 800df88:	4613      	mov	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	4413      	add	r3, r2
 800df8e:	00db      	lsls	r3, r3, #3
 800df90:	4a59      	ldr	r2, [pc, #356]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800df92:	4413      	add	r3, r2
 800df94:	4967      	ldr	r1, [pc, #412]	; (800e134 <UpdateSIGNALSNames+0x38c>)
 800df96:	461a      	mov	r2, r3
 800df98:	460b      	mov	r3, r1
 800df9a:	cb03      	ldmia	r3!, {r0, r1}
 800df9c:	6010      	str	r0, [r2, #0]
 800df9e:	6051      	str	r1, [r2, #4]
 800dfa0:	8819      	ldrh	r1, [r3, #0]
 800dfa2:	789b      	ldrb	r3, [r3, #2]
 800dfa4:	8111      	strh	r1, [r2, #8]
 800dfa6:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800dfa8:	79fb      	ldrb	r3, [r7, #7]
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	71fa      	strb	r2, [r7, #7]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4413      	add	r3, r2
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	4a4f      	ldr	r2, [pc, #316]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800dfba:	4413      	add	r3, r2
 800dfbc:	495e      	ldr	r1, [pc, #376]	; (800e138 <UpdateSIGNALSNames+0x390>)
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	460b      	mov	r3, r1
 800dfc2:	cb03      	ldmia	r3!, {r0, r1}
 800dfc4:	6010      	str	r0, [r2, #0]
 800dfc6:	6051      	str	r1, [r2, #4]
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800dfcc:	79fb      	ldrb	r3, [r7, #7]
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	71fa      	strb	r2, [r7, #7]
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4413      	add	r3, r2
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	4a46      	ldr	r2, [pc, #280]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800dfde:	4413      	add	r3, r2
 800dfe0:	4a56      	ldr	r2, [pc, #344]	; (800e13c <UpdateSIGNALSNames+0x394>)
 800dfe2:	6810      	ldr	r0, [r2, #0]
 800dfe4:	6018      	str	r0, [r3, #0]
 800dfe6:	8891      	ldrh	r1, [r2, #4]
 800dfe8:	7992      	ldrb	r2, [r2, #6]
 800dfea:	8099      	strh	r1, [r3, #4]
 800dfec:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800dfee:	79fb      	ldrb	r3, [r7, #7]
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	71fa      	strb	r2, [r7, #7]
 800dff4:	461a      	mov	r2, r3
 800dff6:	4613      	mov	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	4413      	add	r3, r2
 800dffc:	00db      	lsls	r3, r3, #3
 800dffe:	4a3e      	ldr	r2, [pc, #248]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800e000:	4413      	add	r3, r2
 800e002:	4a4f      	ldr	r2, [pc, #316]	; (800e140 <UpdateSIGNALSNames+0x398>)
 800e004:	6810      	ldr	r0, [r2, #0]
 800e006:	6018      	str	r0, [r3, #0]
 800e008:	8891      	ldrh	r1, [r2, #4]
 800e00a:	7992      	ldrb	r2, [r2, #6]
 800e00c:	8099      	strh	r1, [r3, #4]
 800e00e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	1c5a      	adds	r2, r3, #1
 800e014:	71fa      	strb	r2, [r7, #7]
 800e016:	461a      	mov	r2, r3
 800e018:	4613      	mov	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	4a35      	ldr	r2, [pc, #212]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800e022:	4413      	add	r3, r2
 800e024:	4a47      	ldr	r2, [pc, #284]	; (800e144 <UpdateSIGNALSNames+0x39c>)
 800e026:	6810      	ldr	r0, [r2, #0]
 800e028:	6018      	str	r0, [r3, #0]
 800e02a:	8891      	ldrh	r1, [r2, #4]
 800e02c:	7992      	ldrb	r2, [r2, #6]
 800e02e:	8099      	strh	r1, [r3, #4]
 800e030:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800e032:	79fb      	ldrb	r3, [r7, #7]
 800e034:	1c5a      	adds	r2, r3, #1
 800e036:	71fa      	strb	r2, [r7, #7]
 800e038:	461a      	mov	r2, r3
 800e03a:	4613      	mov	r3, r2
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	4413      	add	r3, r2
 800e040:	00db      	lsls	r3, r3, #3
 800e042:	4a2d      	ldr	r2, [pc, #180]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800e044:	4413      	add	r3, r2
 800e046:	4a40      	ldr	r2, [pc, #256]	; (800e148 <UpdateSIGNALSNames+0x3a0>)
 800e048:	6810      	ldr	r0, [r2, #0]
 800e04a:	6018      	str	r0, [r3, #0]
 800e04c:	8891      	ldrh	r1, [r2, #4]
 800e04e:	7992      	ldrb	r2, [r2, #6]
 800e050:	8099      	strh	r1, [r3, #4]
 800e052:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800e054:	79fb      	ldrb	r3, [r7, #7]
 800e056:	1c5a      	adds	r2, r3, #1
 800e058:	71fa      	strb	r2, [r7, #7]
 800e05a:	461a      	mov	r2, r3
 800e05c:	4613      	mov	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4413      	add	r3, r2
 800e062:	00db      	lsls	r3, r3, #3
 800e064:	4a24      	ldr	r2, [pc, #144]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800e066:	4413      	add	r3, r2
 800e068:	4938      	ldr	r1, [pc, #224]	; (800e14c <UpdateSIGNALSNames+0x3a4>)
 800e06a:	461a      	mov	r2, r3
 800e06c:	460b      	mov	r3, r1
 800e06e:	cb03      	ldmia	r3!, {r0, r1}
 800e070:	6010      	str	r0, [r2, #0]
 800e072:	6051      	str	r1, [r2, #4]
 800e074:	8819      	ldrh	r1, [r3, #0]
 800e076:	789b      	ldrb	r3, [r3, #2]
 800e078:	8111      	strh	r1, [r2, #8]
 800e07a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800e07c:	79fb      	ldrb	r3, [r7, #7]
 800e07e:	1c5a      	adds	r2, r3, #1
 800e080:	71fa      	strb	r2, [r7, #7]
 800e082:	461a      	mov	r2, r3
 800e084:	4613      	mov	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	4a1a      	ldr	r2, [pc, #104]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800e08e:	4413      	add	r3, r2
 800e090:	4a2f      	ldr	r2, [pc, #188]	; (800e150 <UpdateSIGNALSNames+0x3a8>)
 800e092:	6810      	ldr	r0, [r2, #0]
 800e094:	6018      	str	r0, [r3, #0]
 800e096:	8891      	ldrh	r1, [r2, #4]
 800e098:	7992      	ldrb	r2, [r2, #6]
 800e09a:	8099      	strh	r1, [r3, #4]
 800e09c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800e09e:	79fb      	ldrb	r3, [r7, #7]
 800e0a0:	1c5a      	adds	r2, r3, #1
 800e0a2:	71fa      	strb	r2, [r7, #7]
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	00db      	lsls	r3, r3, #3
 800e0ae:	4a12      	ldr	r2, [pc, #72]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800e0b0:	4413      	add	r3, r2
 800e0b2:	4a28      	ldr	r2, [pc, #160]	; (800e154 <UpdateSIGNALSNames+0x3ac>)
 800e0b4:	6810      	ldr	r0, [r2, #0]
 800e0b6:	6018      	str	r0, [r3, #0]
 800e0b8:	8891      	ldrh	r1, [r2, #4]
 800e0ba:	7992      	ldrb	r2, [r2, #6]
 800e0bc:	8099      	strh	r1, [r3, #4]
 800e0be:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800e0c0:	79fb      	ldrb	r3, [r7, #7]
 800e0c2:	1c5a      	adds	r2, r3, #1
 800e0c4:	71fa      	strb	r2, [r7, #7]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	4a09      	ldr	r2, [pc, #36]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800e0d2:	4413      	add	r3, r2
 800e0d4:	4a20      	ldr	r2, [pc, #128]	; (800e158 <UpdateSIGNALSNames+0x3b0>)
 800e0d6:	6810      	ldr	r0, [r2, #0]
 800e0d8:	6018      	str	r0, [r3, #0]
 800e0da:	8891      	ldrh	r1, [r2, #4]
 800e0dc:	7992      	ldrb	r2, [r2, #6]
 800e0de:	8099      	strh	r1, [r3, #4]
 800e0e0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	1c5a      	adds	r2, r3, #1
 800e0e6:	71fa      	strb	r2, [r7, #7]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4613      	mov	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4413      	add	r3, r2
 800e0f0:	00db      	lsls	r3, r3, #3
 800e0f2:	4a01      	ldr	r2, [pc, #4]	; (800e0f8 <UpdateSIGNALSNames+0x350>)
 800e0f4:	4413      	add	r3, r2
 800e0f6:	e031      	b.n	800e15c <UpdateSIGNALSNames+0x3b4>
 800e0f8:	20003cc0 	.word	0x20003cc0
 800e0fc:	080263d4 	.word	0x080263d4
 800e100:	080263dc 	.word	0x080263dc
 800e104:	080263e4 	.word	0x080263e4
 800e108:	080263ec 	.word	0x080263ec
 800e10c:	080263f4 	.word	0x080263f4
 800e110:	080263fc 	.word	0x080263fc
 800e114:	08026404 	.word	0x08026404
 800e118:	0802640c 	.word	0x0802640c
 800e11c:	08026414 	.word	0x08026414
 800e120:	08026420 	.word	0x08026420
 800e124:	08026428 	.word	0x08026428
 800e128:	08026434 	.word	0x08026434
 800e12c:	08026440 	.word	0x08026440
 800e130:	0802644c 	.word	0x0802644c
 800e134:	08026458 	.word	0x08026458
 800e138:	08026464 	.word	0x08026464
 800e13c:	08026470 	.word	0x08026470
 800e140:	08026478 	.word	0x08026478
 800e144:	08026480 	.word	0x08026480
 800e148:	08026488 	.word	0x08026488
 800e14c:	08026490 	.word	0x08026490
 800e150:	0802649c 	.word	0x0802649c
 800e154:	080264a4 	.word	0x080264a4
 800e158:	080264ac 	.word	0x080264ac
 800e15c:	4acd      	ldr	r2, [pc, #820]	; (800e494 <UpdateSIGNALSNames+0x6ec>)
 800e15e:	6810      	ldr	r0, [r2, #0]
 800e160:	6018      	str	r0, [r3, #0]
 800e162:	8891      	ldrh	r1, [r2, #4]
 800e164:	7992      	ldrb	r2, [r2, #6]
 800e166:	8099      	strh	r1, [r3, #4]
 800e168:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800e16a:	79fb      	ldrb	r3, [r7, #7]
 800e16c:	1c5a      	adds	r2, r3, #1
 800e16e:	71fa      	strb	r2, [r7, #7]
 800e170:	461a      	mov	r2, r3
 800e172:	4613      	mov	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	4413      	add	r3, r2
 800e178:	00db      	lsls	r3, r3, #3
 800e17a:	4ac7      	ldr	r2, [pc, #796]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e17c:	4413      	add	r3, r2
 800e17e:	4ac7      	ldr	r2, [pc, #796]	; (800e49c <UpdateSIGNALSNames+0x6f4>)
 800e180:	6810      	ldr	r0, [r2, #0]
 800e182:	6018      	str	r0, [r3, #0]
 800e184:	8891      	ldrh	r1, [r2, #4]
 800e186:	7992      	ldrb	r2, [r2, #6]
 800e188:	8099      	strh	r1, [r3, #4]
 800e18a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800e18c:	79fb      	ldrb	r3, [r7, #7]
 800e18e:	1c5a      	adds	r2, r3, #1
 800e190:	71fa      	strb	r2, [r7, #7]
 800e192:	461a      	mov	r2, r3
 800e194:	4613      	mov	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	4abe      	ldr	r2, [pc, #760]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e19e:	4413      	add	r3, r2
 800e1a0:	4abf      	ldr	r2, [pc, #764]	; (800e4a0 <UpdateSIGNALSNames+0x6f8>)
 800e1a2:	6810      	ldr	r0, [r2, #0]
 800e1a4:	6018      	str	r0, [r3, #0]
 800e1a6:	8891      	ldrh	r1, [r2, #4]
 800e1a8:	7992      	ldrb	r2, [r2, #6]
 800e1aa:	8099      	strh	r1, [r3, #4]
 800e1ac:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800e1ae:	79fb      	ldrb	r3, [r7, #7]
 800e1b0:	1c5a      	adds	r2, r3, #1
 800e1b2:	71fa      	strb	r2, [r7, #7]
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4413      	add	r3, r2
 800e1bc:	00db      	lsls	r3, r3, #3
 800e1be:	4ab6      	ldr	r2, [pc, #728]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e1c0:	4413      	add	r3, r2
 800e1c2:	4ab8      	ldr	r2, [pc, #736]	; (800e4a4 <UpdateSIGNALSNames+0x6fc>)
 800e1c4:	6810      	ldr	r0, [r2, #0]
 800e1c6:	6018      	str	r0, [r3, #0]
 800e1c8:	8891      	ldrh	r1, [r2, #4]
 800e1ca:	7992      	ldrb	r2, [r2, #6]
 800e1cc:	8099      	strh	r1, [r3, #4]
 800e1ce:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	71fa      	strb	r2, [r7, #7]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	4613      	mov	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4413      	add	r3, r2
 800e1de:	00db      	lsls	r3, r3, #3
 800e1e0:	4aad      	ldr	r2, [pc, #692]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e1e2:	4413      	add	r3, r2
 800e1e4:	49b0      	ldr	r1, [pc, #704]	; (800e4a8 <UpdateSIGNALSNames+0x700>)
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	cb03      	ldmia	r3!, {r0, r1}
 800e1ec:	6010      	str	r0, [r2, #0]
 800e1ee:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800e1f0:	79fb      	ldrb	r3, [r7, #7]
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	71fa      	strb	r2, [r7, #7]
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	4413      	add	r3, r2
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	4aa5      	ldr	r2, [pc, #660]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e202:	4413      	add	r3, r2
 800e204:	49a9      	ldr	r1, [pc, #676]	; (800e4ac <UpdateSIGNALSNames+0x704>)
 800e206:	461a      	mov	r2, r3
 800e208:	460b      	mov	r3, r1
 800e20a:	cb03      	ldmia	r3!, {r0, r1}
 800e20c:	6010      	str	r0, [r2, #0]
 800e20e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800e210:	79fb      	ldrb	r3, [r7, #7]
 800e212:	1c5a      	adds	r2, r3, #1
 800e214:	71fa      	strb	r2, [r7, #7]
 800e216:	461a      	mov	r2, r3
 800e218:	4613      	mov	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	00db      	lsls	r3, r3, #3
 800e220:	4a9d      	ldr	r2, [pc, #628]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e222:	4413      	add	r3, r2
 800e224:	49a2      	ldr	r1, [pc, #648]	; (800e4b0 <UpdateSIGNALSNames+0x708>)
 800e226:	461a      	mov	r2, r3
 800e228:	460b      	mov	r3, r1
 800e22a:	cb03      	ldmia	r3!, {r0, r1}
 800e22c:	6010      	str	r0, [r2, #0]
 800e22e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800e230:	79fb      	ldrb	r3, [r7, #7]
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	71fa      	strb	r2, [r7, #7]
 800e236:	461a      	mov	r2, r3
 800e238:	4613      	mov	r3, r2
 800e23a:	009b      	lsls	r3, r3, #2
 800e23c:	4413      	add	r3, r2
 800e23e:	00db      	lsls	r3, r3, #3
 800e240:	4a95      	ldr	r2, [pc, #596]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e242:	4413      	add	r3, r2
 800e244:	499b      	ldr	r1, [pc, #620]	; (800e4b4 <UpdateSIGNALSNames+0x70c>)
 800e246:	461a      	mov	r2, r3
 800e248:	460b      	mov	r3, r1
 800e24a:	cb03      	ldmia	r3!, {r0, r1}
 800e24c:	6010      	str	r0, [r2, #0]
 800e24e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800e250:	79fb      	ldrb	r3, [r7, #7]
 800e252:	1c5a      	adds	r2, r3, #1
 800e254:	71fa      	strb	r2, [r7, #7]
 800e256:	461a      	mov	r2, r3
 800e258:	4613      	mov	r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4413      	add	r3, r2
 800e25e:	00db      	lsls	r3, r3, #3
 800e260:	4a8d      	ldr	r2, [pc, #564]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e262:	4413      	add	r3, r2
 800e264:	4994      	ldr	r1, [pc, #592]	; (800e4b8 <UpdateSIGNALSNames+0x710>)
 800e266:	461a      	mov	r2, r3
 800e268:	460b      	mov	r3, r1
 800e26a:	cb03      	ldmia	r3!, {r0, r1}
 800e26c:	6010      	str	r0, [r2, #0]
 800e26e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800e270:	79fb      	ldrb	r3, [r7, #7]
 800e272:	1c5a      	adds	r2, r3, #1
 800e274:	71fa      	strb	r2, [r7, #7]
 800e276:	461a      	mov	r2, r3
 800e278:	4613      	mov	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	00db      	lsls	r3, r3, #3
 800e280:	4a85      	ldr	r2, [pc, #532]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e282:	4413      	add	r3, r2
 800e284:	498d      	ldr	r1, [pc, #564]	; (800e4bc <UpdateSIGNALSNames+0x714>)
 800e286:	461a      	mov	r2, r3
 800e288:	460b      	mov	r3, r1
 800e28a:	cb03      	ldmia	r3!, {r0, r1}
 800e28c:	6010      	str	r0, [r2, #0]
 800e28e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800e290:	79fb      	ldrb	r3, [r7, #7]
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	71fa      	strb	r2, [r7, #7]
 800e296:	461a      	mov	r2, r3
 800e298:	4613      	mov	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4413      	add	r3, r2
 800e29e:	00db      	lsls	r3, r3, #3
 800e2a0:	4a7d      	ldr	r2, [pc, #500]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e2a2:	4413      	add	r3, r2
 800e2a4:	4986      	ldr	r1, [pc, #536]	; (800e4c0 <UpdateSIGNALSNames+0x718>)
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	cb03      	ldmia	r3!, {r0, r1}
 800e2ac:	6010      	str	r0, [r2, #0]
 800e2ae:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800e2b0:	79fb      	ldrb	r3, [r7, #7]
 800e2b2:	1c5a      	adds	r2, r3, #1
 800e2b4:	71fa      	strb	r2, [r7, #7]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	00db      	lsls	r3, r3, #3
 800e2c0:	4a75      	ldr	r2, [pc, #468]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e2c2:	4413      	add	r3, r2
 800e2c4:	497f      	ldr	r1, [pc, #508]	; (800e4c4 <UpdateSIGNALSNames+0x71c>)
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	cb03      	ldmia	r3!, {r0, r1}
 800e2cc:	6010      	str	r0, [r2, #0]
 800e2ce:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800e2d0:	79fb      	ldrb	r3, [r7, #7]
 800e2d2:	1c5a      	adds	r2, r3, #1
 800e2d4:	71fa      	strb	r2, [r7, #7]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	00db      	lsls	r3, r3, #3
 800e2e0:	4a6d      	ldr	r2, [pc, #436]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e2e2:	4413      	add	r3, r2
 800e2e4:	4978      	ldr	r1, [pc, #480]	; (800e4c8 <UpdateSIGNALSNames+0x720>)
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	cb03      	ldmia	r3!, {r0, r1}
 800e2ec:	6010      	str	r0, [r2, #0]
 800e2ee:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800e2f0:	79fb      	ldrb	r3, [r7, #7]
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	71fa      	strb	r2, [r7, #7]
 800e2f6:	461a      	mov	r2, r3
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	4413      	add	r3, r2
 800e2fe:	00db      	lsls	r3, r3, #3
 800e300:	4a65      	ldr	r2, [pc, #404]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e302:	4413      	add	r3, r2
 800e304:	4971      	ldr	r1, [pc, #452]	; (800e4cc <UpdateSIGNALSNames+0x724>)
 800e306:	461a      	mov	r2, r3
 800e308:	460b      	mov	r3, r1
 800e30a:	cb03      	ldmia	r3!, {r0, r1}
 800e30c:	6010      	str	r0, [r2, #0]
 800e30e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800e310:	79fb      	ldrb	r3, [r7, #7]
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	71fa      	strb	r2, [r7, #7]
 800e316:	461a      	mov	r2, r3
 800e318:	4613      	mov	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	00db      	lsls	r3, r3, #3
 800e320:	4a5d      	ldr	r2, [pc, #372]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e322:	4413      	add	r3, r2
 800e324:	496a      	ldr	r1, [pc, #424]	; (800e4d0 <UpdateSIGNALSNames+0x728>)
 800e326:	461a      	mov	r2, r3
 800e328:	460b      	mov	r3, r1
 800e32a:	cb03      	ldmia	r3!, {r0, r1}
 800e32c:	6010      	str	r0, [r2, #0]
 800e32e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	1c5a      	adds	r2, r3, #1
 800e334:	71fa      	strb	r2, [r7, #7]
 800e336:	461a      	mov	r2, r3
 800e338:	4613      	mov	r3, r2
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	4413      	add	r3, r2
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	4a55      	ldr	r2, [pc, #340]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e342:	4413      	add	r3, r2
 800e344:	4963      	ldr	r1, [pc, #396]	; (800e4d4 <UpdateSIGNALSNames+0x72c>)
 800e346:	461a      	mov	r2, r3
 800e348:	460b      	mov	r3, r1
 800e34a:	cb03      	ldmia	r3!, {r0, r1}
 800e34c:	6010      	str	r0, [r2, #0]
 800e34e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800e350:	79fb      	ldrb	r3, [r7, #7]
 800e352:	1c5a      	adds	r2, r3, #1
 800e354:	71fa      	strb	r2, [r7, #7]
 800e356:	461a      	mov	r2, r3
 800e358:	4613      	mov	r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	4413      	add	r3, r2
 800e35e:	00db      	lsls	r3, r3, #3
 800e360:	4a4d      	ldr	r2, [pc, #308]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e362:	4413      	add	r3, r2
 800e364:	495c      	ldr	r1, [pc, #368]	; (800e4d8 <UpdateSIGNALSNames+0x730>)
 800e366:	461a      	mov	r2, r3
 800e368:	460b      	mov	r3, r1
 800e36a:	cb03      	ldmia	r3!, {r0, r1}
 800e36c:	6010      	str	r0, [r2, #0]
 800e36e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800e370:	79fb      	ldrb	r3, [r7, #7]
 800e372:	1c5a      	adds	r2, r3, #1
 800e374:	71fa      	strb	r2, [r7, #7]
 800e376:	461a      	mov	r2, r3
 800e378:	4613      	mov	r3, r2
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	4a45      	ldr	r2, [pc, #276]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e382:	4413      	add	r3, r2
 800e384:	4a55      	ldr	r2, [pc, #340]	; (800e4dc <UpdateSIGNALSNames+0x734>)
 800e386:	461c      	mov	r4, r3
 800e388:	4613      	mov	r3, r2
 800e38a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e38c:	6020      	str	r0, [r4, #0]
 800e38e:	6061      	str	r1, [r4, #4]
 800e390:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800e392:	79fb      	ldrb	r3, [r7, #7]
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	71fa      	strb	r2, [r7, #7]
 800e398:	461a      	mov	r2, r3
 800e39a:	4613      	mov	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	4413      	add	r3, r2
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	4a3d      	ldr	r2, [pc, #244]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e3a4:	4413      	add	r3, r2
 800e3a6:	494e      	ldr	r1, [pc, #312]	; (800e4e0 <UpdateSIGNALSNames+0x738>)
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	cb03      	ldmia	r3!, {r0, r1}
 800e3ae:	6010      	str	r0, [r2, #0]
 800e3b0:	6051      	str	r1, [r2, #4]
 800e3b2:	8819      	ldrh	r1, [r3, #0]
 800e3b4:	789b      	ldrb	r3, [r3, #2]
 800e3b6:	8111      	strh	r1, [r2, #8]
 800e3b8:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800e3ba:	79fb      	ldrb	r3, [r7, #7]
 800e3bc:	1c5a      	adds	r2, r3, #1
 800e3be:	71fa      	strb	r2, [r7, #7]
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	4a33      	ldr	r2, [pc, #204]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e3cc:	4413      	add	r3, r2
 800e3ce:	4a45      	ldr	r2, [pc, #276]	; (800e4e4 <UpdateSIGNALSNames+0x73c>)
 800e3d0:	461c      	mov	r4, r3
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e3d6:	6020      	str	r0, [r4, #0]
 800e3d8:	6061      	str	r1, [r4, #4]
 800e3da:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800e3dc:	79fb      	ldrb	r3, [r7, #7]
 800e3de:	1c5a      	adds	r2, r3, #1
 800e3e0:	71fa      	strb	r2, [r7, #7]
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	4413      	add	r3, r2
 800e3ea:	00db      	lsls	r3, r3, #3
 800e3ec:	4a2a      	ldr	r2, [pc, #168]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e3ee:	4413      	add	r3, r2
 800e3f0:	493d      	ldr	r1, [pc, #244]	; (800e4e8 <UpdateSIGNALSNames+0x740>)
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	cb03      	ldmia	r3!, {r0, r1}
 800e3f8:	6010      	str	r0, [r2, #0]
 800e3fa:	6051      	str	r1, [r2, #4]
 800e3fc:	8819      	ldrh	r1, [r3, #0]
 800e3fe:	789b      	ldrb	r3, [r3, #2]
 800e400:	8111      	strh	r1, [r2, #8]
 800e402:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800e404:	79fb      	ldrb	r3, [r7, #7]
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	71fa      	strb	r2, [r7, #7]
 800e40a:	461a      	mov	r2, r3
 800e40c:	4613      	mov	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	4413      	add	r3, r2
 800e412:	00db      	lsls	r3, r3, #3
 800e414:	4a20      	ldr	r2, [pc, #128]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e416:	4413      	add	r3, r2
 800e418:	4934      	ldr	r1, [pc, #208]	; (800e4ec <UpdateSIGNALSNames+0x744>)
 800e41a:	461a      	mov	r2, r3
 800e41c:	460b      	mov	r3, r1
 800e41e:	cb03      	ldmia	r3!, {r0, r1}
 800e420:	6010      	str	r0, [r2, #0]
 800e422:	6051      	str	r1, [r2, #4]
 800e424:	8819      	ldrh	r1, [r3, #0]
 800e426:	789b      	ldrb	r3, [r3, #2]
 800e428:	8111      	strh	r1, [r2, #8]
 800e42a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800e42c:	79fb      	ldrb	r3, [r7, #7]
 800e42e:	1c5a      	adds	r2, r3, #1
 800e430:	71fa      	strb	r2, [r7, #7]
 800e432:	461a      	mov	r2, r3
 800e434:	4613      	mov	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4413      	add	r3, r2
 800e43a:	00db      	lsls	r3, r3, #3
 800e43c:	4a16      	ldr	r2, [pc, #88]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e43e:	4413      	add	r3, r2
 800e440:	4a2b      	ldr	r2, [pc, #172]	; (800e4f0 <UpdateSIGNALSNames+0x748>)
 800e442:	461c      	mov	r4, r3
 800e444:	4613      	mov	r3, r2
 800e446:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e448:	6020      	str	r0, [r4, #0]
 800e44a:	6061      	str	r1, [r4, #4]
 800e44c:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800e44e:	79fb      	ldrb	r3, [r7, #7]
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	71fa      	strb	r2, [r7, #7]
 800e454:	461a      	mov	r2, r3
 800e456:	4613      	mov	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4413      	add	r3, r2
 800e45c:	00db      	lsls	r3, r3, #3
 800e45e:	4a0e      	ldr	r2, [pc, #56]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e460:	4413      	add	r3, r2
 800e462:	4924      	ldr	r1, [pc, #144]	; (800e4f4 <UpdateSIGNALSNames+0x74c>)
 800e464:	461a      	mov	r2, r3
 800e466:	460b      	mov	r3, r1
 800e468:	cb03      	ldmia	r3!, {r0, r1}
 800e46a:	6010      	str	r0, [r2, #0]
 800e46c:	6051      	str	r1, [r2, #4]
 800e46e:	8819      	ldrh	r1, [r3, #0]
 800e470:	789b      	ldrb	r3, [r3, #2]
 800e472:	8111      	strh	r1, [r2, #8]
 800e474:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800e476:	79fb      	ldrb	r3, [r7, #7]
 800e478:	1c5a      	adds	r2, r3, #1
 800e47a:	71fa      	strb	r2, [r7, #7]
 800e47c:	461a      	mov	r2, r3
 800e47e:	4613      	mov	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	00db      	lsls	r3, r3, #3
 800e486:	4a04      	ldr	r2, [pc, #16]	; (800e498 <UpdateSIGNALSNames+0x6f0>)
 800e488:	4413      	add	r3, r2
 800e48a:	4a1b      	ldr	r2, [pc, #108]	; (800e4f8 <UpdateSIGNALSNames+0x750>)
 800e48c:	6810      	ldr	r0, [r2, #0]
 800e48e:	6018      	str	r0, [r3, #0]
 800e490:	e034      	b.n	800e4fc <UpdateSIGNALSNames+0x754>
 800e492:	bf00      	nop
 800e494:	080264b4 	.word	0x080264b4
 800e498:	20003cc0 	.word	0x20003cc0
 800e49c:	080264bc 	.word	0x080264bc
 800e4a0:	080264c4 	.word	0x080264c4
 800e4a4:	080264cc 	.word	0x080264cc
 800e4a8:	080264d4 	.word	0x080264d4
 800e4ac:	080264dc 	.word	0x080264dc
 800e4b0:	080264e4 	.word	0x080264e4
 800e4b4:	080264ec 	.word	0x080264ec
 800e4b8:	080264f4 	.word	0x080264f4
 800e4bc:	080264fc 	.word	0x080264fc
 800e4c0:	08026504 	.word	0x08026504
 800e4c4:	0802650c 	.word	0x0802650c
 800e4c8:	08026514 	.word	0x08026514
 800e4cc:	0802651c 	.word	0x0802651c
 800e4d0:	08026524 	.word	0x08026524
 800e4d4:	0802652c 	.word	0x0802652c
 800e4d8:	08026534 	.word	0x08026534
 800e4dc:	0802653c 	.word	0x0802653c
 800e4e0:	08026548 	.word	0x08026548
 800e4e4:	08026554 	.word	0x08026554
 800e4e8:	08026560 	.word	0x08026560
 800e4ec:	0802656c 	.word	0x0802656c
 800e4f0:	08026578 	.word	0x08026578
 800e4f4:	08026584 	.word	0x08026584
 800e4f8:	08026590 	.word	0x08026590
 800e4fc:	8891      	ldrh	r1, [r2, #4]
 800e4fe:	7992      	ldrb	r2, [r2, #6]
 800e500:	8099      	strh	r1, [r3, #4]
 800e502:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	1c5a      	adds	r2, r3, #1
 800e508:	71fa      	strb	r2, [r7, #7]
 800e50a:	461a      	mov	r2, r3
 800e50c:	4613      	mov	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4413      	add	r3, r2
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	4a82      	ldr	r2, [pc, #520]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e516:	4413      	add	r3, r2
 800e518:	4a82      	ldr	r2, [pc, #520]	; (800e724 <UpdateSIGNALSNames+0x97c>)
 800e51a:	6810      	ldr	r0, [r2, #0]
 800e51c:	6018      	str	r0, [r3, #0]
 800e51e:	8891      	ldrh	r1, [r2, #4]
 800e520:	7992      	ldrb	r2, [r2, #6]
 800e522:	8099      	strh	r1, [r3, #4]
 800e524:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800e526:	79fb      	ldrb	r3, [r7, #7]
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	71fa      	strb	r2, [r7, #7]
 800e52c:	461a      	mov	r2, r3
 800e52e:	4613      	mov	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	00db      	lsls	r3, r3, #3
 800e536:	4a7a      	ldr	r2, [pc, #488]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e538:	4413      	add	r3, r2
 800e53a:	4a7b      	ldr	r2, [pc, #492]	; (800e728 <UpdateSIGNALSNames+0x980>)
 800e53c:	6810      	ldr	r0, [r2, #0]
 800e53e:	6018      	str	r0, [r3, #0]
 800e540:	8891      	ldrh	r1, [r2, #4]
 800e542:	7992      	ldrb	r2, [r2, #6]
 800e544:	8099      	strh	r1, [r3, #4]
 800e546:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800e548:	79fb      	ldrb	r3, [r7, #7]
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	71fa      	strb	r2, [r7, #7]
 800e54e:	461a      	mov	r2, r3
 800e550:	4613      	mov	r3, r2
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	4413      	add	r3, r2
 800e556:	00db      	lsls	r3, r3, #3
 800e558:	4a71      	ldr	r2, [pc, #452]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e55a:	4413      	add	r3, r2
 800e55c:	4a73      	ldr	r2, [pc, #460]	; (800e72c <UpdateSIGNALSNames+0x984>)
 800e55e:	6810      	ldr	r0, [r2, #0]
 800e560:	6018      	str	r0, [r3, #0]
 800e562:	8891      	ldrh	r1, [r2, #4]
 800e564:	7992      	ldrb	r2, [r2, #6]
 800e566:	8099      	strh	r1, [r3, #4]
 800e568:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800e56a:	79fb      	ldrb	r3, [r7, #7]
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	71fa      	strb	r2, [r7, #7]
 800e570:	461a      	mov	r2, r3
 800e572:	4613      	mov	r3, r2
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4413      	add	r3, r2
 800e578:	00db      	lsls	r3, r3, #3
 800e57a:	4a69      	ldr	r2, [pc, #420]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e57c:	4413      	add	r3, r2
 800e57e:	4a6c      	ldr	r2, [pc, #432]	; (800e730 <UpdateSIGNALSNames+0x988>)
 800e580:	6810      	ldr	r0, [r2, #0]
 800e582:	6018      	str	r0, [r3, #0]
 800e584:	8891      	ldrh	r1, [r2, #4]
 800e586:	7992      	ldrb	r2, [r2, #6]
 800e588:	8099      	strh	r1, [r3, #4]
 800e58a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800e58c:	79fb      	ldrb	r3, [r7, #7]
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	71fa      	strb	r2, [r7, #7]
 800e592:	461a      	mov	r2, r3
 800e594:	4613      	mov	r3, r2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4413      	add	r3, r2
 800e59a:	00db      	lsls	r3, r3, #3
 800e59c:	4a60      	ldr	r2, [pc, #384]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e59e:	4413      	add	r3, r2
 800e5a0:	4a64      	ldr	r2, [pc, #400]	; (800e734 <UpdateSIGNALSNames+0x98c>)
 800e5a2:	6810      	ldr	r0, [r2, #0]
 800e5a4:	6018      	str	r0, [r3, #0]
 800e5a6:	8891      	ldrh	r1, [r2, #4]
 800e5a8:	7992      	ldrb	r2, [r2, #6]
 800e5aa:	8099      	strh	r1, [r3, #4]
 800e5ac:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800e5ae:	79fb      	ldrb	r3, [r7, #7]
 800e5b0:	1c5a      	adds	r2, r3, #1
 800e5b2:	71fa      	strb	r2, [r7, #7]
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	4413      	add	r3, r2
 800e5bc:	00db      	lsls	r3, r3, #3
 800e5be:	4a58      	ldr	r2, [pc, #352]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e5c0:	4413      	add	r3, r2
 800e5c2:	4a5d      	ldr	r2, [pc, #372]	; (800e738 <UpdateSIGNALSNames+0x990>)
 800e5c4:	6810      	ldr	r0, [r2, #0]
 800e5c6:	6018      	str	r0, [r3, #0]
 800e5c8:	8891      	ldrh	r1, [r2, #4]
 800e5ca:	7992      	ldrb	r2, [r2, #6]
 800e5cc:	8099      	strh	r1, [r3, #4]
 800e5ce:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800e5d0:	79fb      	ldrb	r3, [r7, #7]
 800e5d2:	1c5a      	adds	r2, r3, #1
 800e5d4:	71fa      	strb	r2, [r7, #7]
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	4613      	mov	r3, r2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	4413      	add	r3, r2
 800e5de:	00db      	lsls	r3, r3, #3
 800e5e0:	4a4f      	ldr	r2, [pc, #316]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e5e2:	4413      	add	r3, r2
 800e5e4:	4a55      	ldr	r2, [pc, #340]	; (800e73c <UpdateSIGNALSNames+0x994>)
 800e5e6:	6810      	ldr	r0, [r2, #0]
 800e5e8:	6018      	str	r0, [r3, #0]
 800e5ea:	8891      	ldrh	r1, [r2, #4]
 800e5ec:	7992      	ldrb	r2, [r2, #6]
 800e5ee:	8099      	strh	r1, [r3, #4]
 800e5f0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800e5f2:	79fb      	ldrb	r3, [r7, #7]
 800e5f4:	1c5a      	adds	r2, r3, #1
 800e5f6:	71fa      	strb	r2, [r7, #7]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	00db      	lsls	r3, r3, #3
 800e602:	4a47      	ldr	r2, [pc, #284]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e604:	4413      	add	r3, r2
 800e606:	4a4e      	ldr	r2, [pc, #312]	; (800e740 <UpdateSIGNALSNames+0x998>)
 800e608:	6810      	ldr	r0, [r2, #0]
 800e60a:	6018      	str	r0, [r3, #0]
 800e60c:	8891      	ldrh	r1, [r2, #4]
 800e60e:	7992      	ldrb	r2, [r2, #6]
 800e610:	8099      	strh	r1, [r3, #4]
 800e612:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800e614:	79fb      	ldrb	r3, [r7, #7]
 800e616:	1c5a      	adds	r2, r3, #1
 800e618:	71fa      	strb	r2, [r7, #7]
 800e61a:	461a      	mov	r2, r3
 800e61c:	4613      	mov	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4413      	add	r3, r2
 800e622:	00db      	lsls	r3, r3, #3
 800e624:	4a3e      	ldr	r2, [pc, #248]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e626:	4413      	add	r3, r2
 800e628:	4a46      	ldr	r2, [pc, #280]	; (800e744 <UpdateSIGNALSNames+0x99c>)
 800e62a:	6810      	ldr	r0, [r2, #0]
 800e62c:	6018      	str	r0, [r3, #0]
 800e62e:	8891      	ldrh	r1, [r2, #4]
 800e630:	7992      	ldrb	r2, [r2, #6]
 800e632:	8099      	strh	r1, [r3, #4]
 800e634:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800e636:	79fb      	ldrb	r3, [r7, #7]
 800e638:	1c5a      	adds	r2, r3, #1
 800e63a:	71fa      	strb	r2, [r7, #7]
 800e63c:	461a      	mov	r2, r3
 800e63e:	4613      	mov	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4413      	add	r3, r2
 800e644:	00db      	lsls	r3, r3, #3
 800e646:	4a36      	ldr	r2, [pc, #216]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e648:	4413      	add	r3, r2
 800e64a:	4a3f      	ldr	r2, [pc, #252]	; (800e748 <UpdateSIGNALSNames+0x9a0>)
 800e64c:	6810      	ldr	r0, [r2, #0]
 800e64e:	6018      	str	r0, [r3, #0]
 800e650:	8891      	ldrh	r1, [r2, #4]
 800e652:	7992      	ldrb	r2, [r2, #6]
 800e654:	8099      	strh	r1, [r3, #4]
 800e656:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800e658:	79fb      	ldrb	r3, [r7, #7]
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	71fa      	strb	r2, [r7, #7]
 800e65e:	461a      	mov	r2, r3
 800e660:	4613      	mov	r3, r2
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	4413      	add	r3, r2
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	4a2d      	ldr	r2, [pc, #180]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e66a:	4413      	add	r3, r2
 800e66c:	4a37      	ldr	r2, [pc, #220]	; (800e74c <UpdateSIGNALSNames+0x9a4>)
 800e66e:	6810      	ldr	r0, [r2, #0]
 800e670:	6018      	str	r0, [r3, #0]
 800e672:	8891      	ldrh	r1, [r2, #4]
 800e674:	7992      	ldrb	r2, [r2, #6]
 800e676:	8099      	strh	r1, [r3, #4]
 800e678:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800e67a:	79fb      	ldrb	r3, [r7, #7]
 800e67c:	1c5a      	adds	r2, r3, #1
 800e67e:	71fa      	strb	r2, [r7, #7]
 800e680:	461a      	mov	r2, r3
 800e682:	4613      	mov	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	4413      	add	r3, r2
 800e688:	00db      	lsls	r3, r3, #3
 800e68a:	4a25      	ldr	r2, [pc, #148]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e68c:	4413      	add	r3, r2
 800e68e:	4930      	ldr	r1, [pc, #192]	; (800e750 <UpdateSIGNALSNames+0x9a8>)
 800e690:	461a      	mov	r2, r3
 800e692:	460b      	mov	r3, r1
 800e694:	cb03      	ldmia	r3!, {r0, r1}
 800e696:	6010      	str	r0, [r2, #0]
 800e698:	6051      	str	r1, [r2, #4]
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800e69e:	79fb      	ldrb	r3, [r7, #7]
 800e6a0:	1c5a      	adds	r2, r3, #1
 800e6a2:	71fa      	strb	r2, [r7, #7]
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	00db      	lsls	r3, r3, #3
 800e6ae:	4a1c      	ldr	r2, [pc, #112]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e6b0:	4413      	add	r3, r2
 800e6b2:	4a28      	ldr	r2, [pc, #160]	; (800e754 <UpdateSIGNALSNames+0x9ac>)
 800e6b4:	6810      	ldr	r0, [r2, #0]
 800e6b6:	6018      	str	r0, [r3, #0]
 800e6b8:	8891      	ldrh	r1, [r2, #4]
 800e6ba:	7992      	ldrb	r2, [r2, #6]
 800e6bc:	8099      	strh	r1, [r3, #4]
 800e6be:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800e6c0:	79fb      	ldrb	r3, [r7, #7]
 800e6c2:	1c5a      	adds	r2, r3, #1
 800e6c4:	71fa      	strb	r2, [r7, #7]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	00db      	lsls	r3, r3, #3
 800e6d0:	4a13      	ldr	r2, [pc, #76]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e6d2:	4413      	add	r3, r2
 800e6d4:	4a20      	ldr	r2, [pc, #128]	; (800e758 <UpdateSIGNALSNames+0x9b0>)
 800e6d6:	461c      	mov	r4, r3
 800e6d8:	4613      	mov	r3, r2
 800e6da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6dc:	6020      	str	r0, [r4, #0]
 800e6de:	6061      	str	r1, [r4, #4]
 800e6e0:	60a2      	str	r2, [r4, #8]
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	1c5a      	adds	r2, r3, #1
 800e6ea:	71fa      	strb	r2, [r7, #7]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	00db      	lsls	r3, r3, #3
 800e6f6:	4a0a      	ldr	r2, [pc, #40]	; (800e720 <UpdateSIGNALSNames+0x978>)
 800e6f8:	4413      	add	r3, r2
 800e6fa:	4a18      	ldr	r2, [pc, #96]	; (800e75c <UpdateSIGNALSNames+0x9b4>)
 800e6fc:	461c      	mov	r4, r3
 800e6fe:	4613      	mov	r3, r2
 800e700:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e702:	6020      	str	r0, [r4, #0]
 800e704:	6061      	str	r1, [r4, #4]
 800e706:	60a2      	str	r2, [r4, #8]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800e70c:	79fb      	ldrb	r3, [r7, #7]
 800e70e:	b29a      	uxth	r2, r3
 800e710:	4b13      	ldr	r3, [pc, #76]	; (800e760 <UpdateSIGNALSNames+0x9b8>)
 800e712:	801a      	strh	r2, [r3, #0]


}
 800e714:	bf00      	nop
 800e716:	3708      	adds	r7, #8
 800e718:	46bd      	mov	sp, r7
 800e71a:	bc90      	pop	{r4, r7}
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop
 800e720:	20003cc0 	.word	0x20003cc0
 800e724:	08026598 	.word	0x08026598
 800e728:	080265a0 	.word	0x080265a0
 800e72c:	080265a8 	.word	0x080265a8
 800e730:	080265b0 	.word	0x080265b0
 800e734:	080265b8 	.word	0x080265b8
 800e738:	080265c0 	.word	0x080265c0
 800e73c:	080265c8 	.word	0x080265c8
 800e740:	080265d0 	.word	0x080265d0
 800e744:	080265d8 	.word	0x080265d8
 800e748:	080265e0 	.word	0x080265e0
 800e74c:	080265e8 	.word	0x080265e8
 800e750:	080265f0 	.word	0x080265f0
 800e754:	080265fc 	.word	0x080265fc
 800e758:	08026604 	.word	0x08026604
 800e75c:	08026614 	.word	0x08026614
 800e760:	200047b0 	.word	0x200047b0

0800e764 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800e764:	b5b0      	push	{r4, r5, r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800e76a:	4974      	ldr	r1, [pc, #464]	; (800e93c <print_self_DetailsSiemens+0x1d8>)
 800e76c:	4874      	ldr	r0, [pc, #464]	; (800e940 <print_self_DetailsSiemens+0x1dc>)
 800e76e:	f013 fef9 	bl	8022564 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800e772:	4b74      	ldr	r3, [pc, #464]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e774:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e778:	4619      	mov	r1, r3
 800e77a:	4873      	ldr	r0, [pc, #460]	; (800e948 <print_self_DetailsSiemens+0x1e4>)
 800e77c:	f013 fef2 	bl	8022564 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800e780:	4b70      	ldr	r3, [pc, #448]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e782:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e786:	4619      	mov	r1, r3
 800e788:	4b6e      	ldr	r3, [pc, #440]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e78a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e78e:	461a      	mov	r2, r3
 800e790:	4b6c      	ldr	r3, [pc, #432]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e792:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800e796:	4618      	mov	r0, r3
 800e798:	4b6a      	ldr	r3, [pc, #424]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e79a:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800e79e:	9300      	str	r3, [sp, #0]
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	486a      	ldr	r0, [pc, #424]	; (800e94c <print_self_DetailsSiemens+0x1e8>)
 800e7a4:	f013 fede 	bl	8022564 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800e7a8:	4b66      	ldr	r3, [pc, #408]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e7aa:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	4b64      	ldr	r3, [pc, #400]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e7b2:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800e7b6:	461c      	mov	r4, r3
 800e7b8:	4b62      	ldr	r3, [pc, #392]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e7ba:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800e7be:	461d      	mov	r5, r3
 800e7c0:	4b60      	ldr	r3, [pc, #384]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e7c2:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	4b5e      	ldr	r3, [pc, #376]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e7ca:	f893 32b7 	ldrb.w	r3, [r3, #695]	; 0x2b7
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	4b5c      	ldr	r3, [pc, #368]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e7d2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800e7d6:	9302      	str	r3, [sp, #8]
 800e7d8:	9101      	str	r1, [sp, #4]
 800e7da:	9200      	str	r2, [sp, #0]
 800e7dc:	462b      	mov	r3, r5
 800e7de:	4622      	mov	r2, r4
 800e7e0:	4601      	mov	r1, r0
 800e7e2:	485b      	ldr	r0, [pc, #364]	; (800e950 <print_self_DetailsSiemens+0x1ec>)
 800e7e4:	f013 febe 	bl	8022564 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800e7e8:	4b56      	ldr	r3, [pc, #344]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e7ea:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	4858      	ldr	r0, [pc, #352]	; (800e954 <print_self_DetailsSiemens+0x1f0>)
 800e7f2:	f013 feb7 	bl	8022564 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	71fb      	strb	r3, [r7, #7]
 800e7fa:	e037      	b.n	800e86c <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800e7fc:	79fb      	ldrb	r3, [r7, #7]
 800e7fe:	1c59      	adds	r1, r3, #1
 800e800:	79fb      	ldrb	r3, [r7, #7]
 800e802:	4a50      	ldr	r2, [pc, #320]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e804:	33b2      	adds	r3, #178	; 0xb2
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	4413      	add	r3, r2
 800e80a:	785b      	ldrb	r3, [r3, #1]
 800e80c:	461c      	mov	r4, r3
 800e80e:	79fb      	ldrb	r3, [r7, #7]
 800e810:	4a4c      	ldr	r2, [pc, #304]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	4413      	add	r3, r2
 800e816:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800e81a:	461d      	mov	r5, r3
 800e81c:	79fb      	ldrb	r3, [r7, #7]
 800e81e:	4a49      	ldr	r2, [pc, #292]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e820:	009b      	lsls	r3, r3, #2
 800e822:	4413      	add	r3, r2
 800e824:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800e828:	4618      	mov	r0, r3
 800e82a:	79fb      	ldrb	r3, [r7, #7]
 800e82c:	4a45      	ldr	r2, [pc, #276]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	4413      	add	r3, r2
 800e832:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800e836:	9301      	str	r3, [sp, #4]
 800e838:	9000      	str	r0, [sp, #0]
 800e83a:	462b      	mov	r3, r5
 800e83c:	4622      	mov	r2, r4
 800e83e:	4846      	ldr	r0, [pc, #280]	; (800e958 <print_self_DetailsSiemens+0x1f4>)
 800e840:	f013 fe90 	bl	8022564 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800e844:	79fb      	ldrb	r3, [r7, #7]
 800e846:	4a3f      	ldr	r2, [pc, #252]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e848:	33ba      	adds	r3, #186	; 0xba
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	4413      	add	r3, r2
 800e84e:	88db      	ldrh	r3, [r3, #6]
 800e850:	4619      	mov	r1, r3
 800e852:	79fb      	ldrb	r3, [r7, #7]
 800e854:	4a3b      	ldr	r2, [pc, #236]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800e85e:	461a      	mov	r2, r3
 800e860:	483e      	ldr	r0, [pc, #248]	; (800e95c <print_self_DetailsSiemens+0x1f8>)
 800e862:	f013 fe7f 	bl	8022564 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800e866:	79fb      	ldrb	r3, [r7, #7]
 800e868:	3301      	adds	r3, #1
 800e86a:	71fb      	strb	r3, [r7, #7]
 800e86c:	4b35      	ldr	r3, [pc, #212]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e86e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e872:	79fa      	ldrb	r2, [r7, #7]
 800e874:	429a      	cmp	r2, r3
 800e876:	d3c1      	bcc.n	800e7fc <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800e878:	4b32      	ldr	r3, [pc, #200]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e87a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800e87e:	4619      	mov	r1, r3
 800e880:	4837      	ldr	r0, [pc, #220]	; (800e960 <print_self_DetailsSiemens+0x1fc>)
 800e882:	f013 fe6f 	bl	8022564 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800e886:	4b2f      	ldr	r3, [pc, #188]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e888:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800e88c:	4619      	mov	r1, r3
 800e88e:	4835      	ldr	r0, [pc, #212]	; (800e964 <print_self_DetailsSiemens+0x200>)
 800e890:	f013 fe68 	bl	8022564 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800e894:	4b2b      	ldr	r3, [pc, #172]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e896:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e89a:	4619      	mov	r1, r3
 800e89c:	4832      	ldr	r0, [pc, #200]	; (800e968 <print_self_DetailsSiemens+0x204>)
 800e89e:	f013 fe61 	bl	8022564 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800e8a2:	4b28      	ldr	r3, [pc, #160]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e8a4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	482f      	ldr	r0, [pc, #188]	; (800e968 <print_self_DetailsSiemens+0x204>)
 800e8ac:	f013 fe5a 	bl	8022564 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800e8b0:	4b24      	ldr	r3, [pc, #144]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e8b2:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	482c      	ldr	r0, [pc, #176]	; (800e96c <print_self_DetailsSiemens+0x208>)
 800e8ba:	f013 fe53 	bl	8022564 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800e8be:	4b21      	ldr	r3, [pc, #132]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e8c0:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	482a      	ldr	r0, [pc, #168]	; (800e970 <print_self_DetailsSiemens+0x20c>)
 800e8c8:	f013 fe4c 	bl	8022564 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800e8cc:	4b1d      	ldr	r3, [pc, #116]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e8ce:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	4827      	ldr	r0, [pc, #156]	; (800e974 <print_self_DetailsSiemens+0x210>)
 800e8d6:	f013 fe45 	bl	8022564 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800e8da:	4b1a      	ldr	r3, [pc, #104]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e8dc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	4825      	ldr	r0, [pc, #148]	; (800e978 <print_self_DetailsSiemens+0x214>)
 800e8e4:	f013 fe3e 	bl	8022564 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800e8e8:	4b16      	ldr	r3, [pc, #88]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e8ea:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4822      	ldr	r0, [pc, #136]	; (800e97c <print_self_DetailsSiemens+0x218>)
 800e8f2:	f013 fe37 	bl	8022564 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800e8f6:	4b13      	ldr	r3, [pc, #76]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e8f8:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	4820      	ldr	r0, [pc, #128]	; (800e980 <print_self_DetailsSiemens+0x21c>)
 800e900:	f013 fe30 	bl	8022564 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800e904:	4b0f      	ldr	r3, [pc, #60]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e906:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800e90a:	4619      	mov	r1, r3
 800e90c:	481d      	ldr	r0, [pc, #116]	; (800e984 <print_self_DetailsSiemens+0x220>)
 800e90e:	f013 fe29 	bl	8022564 <iprintf>

	if(EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount == 0)
 800e912:	4b0c      	ldr	r3, [pc, #48]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e914:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d103      	bne.n	800e924 <print_self_DetailsSiemens+0x1c0>
	{
		EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount = 50;
 800e91c:	4b09      	ldr	r3, [pc, #36]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e91e:	2232      	movs	r2, #50	; 0x32
 800e920:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	}
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800e924:	4b07      	ldr	r3, [pc, #28]	; (800e944 <print_self_DetailsSiemens+0x1e0>)
 800e926:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e92a:	4619      	mov	r1, r3
 800e92c:	4816      	ldr	r0, [pc, #88]	; (800e988 <print_self_DetailsSiemens+0x224>)
 800e92e:	f013 fe19 	bl	8022564 <iprintf>

}
 800e932:	bf00      	nop
 800e934:	3708      	adds	r7, #8
 800e936:	46bd      	mov	sp, r7
 800e938:	bdb0      	pop	{r4, r5, r7, pc}
 800e93a:	bf00      	nop
 800e93c:	20000305 	.word	0x20000305
 800e940:	08026624 	.word	0x08026624
 800e944:	20000304 	.word	0x20000304
 800e948:	08026638 	.word	0x08026638
 800e94c:	08026648 	.word	0x08026648
 800e950:	08026660 	.word	0x08026660
 800e954:	08026688 	.word	0x08026688
 800e958:	080266a0 	.word	0x080266a0
 800e95c:	080266b4 	.word	0x080266b4
 800e960:	080266cc 	.word	0x080266cc
 800e964:	080266dc 	.word	0x080266dc
 800e968:	080266f0 	.word	0x080266f0
 800e96c:	08026704 	.word	0x08026704
 800e970:	08026714 	.word	0x08026714
 800e974:	08026724 	.word	0x08026724
 800e978:	08026738 	.word	0x08026738
 800e97c:	08026750 	.word	0x08026750
 800e980:	08026768 	.word	0x08026768
 800e984:	08026784 	.word	0x08026784
 800e988:	080267a0 	.word	0x080267a0

0800e98c <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800e994:	f006 fddc 	bl	8015550 <HAL_GetTick>
 800e998:	4602      	mov	r2, r0
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	bfb8      	it	lt
 800e9a2:	425b      	neglt	r3, r3
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800e9b2:	23f3      	movs	r3, #243	; 0xf3
 800e9b4:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800e9b6:	f011 f8df 	bl	801fb78 <udp_new>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	4a7a      	ldr	r2, [pc, #488]	; (800eba8 <udpServer_init+0x1fc>)
 800e9be:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800e9c0:	4b7a      	ldr	r3, [pc, #488]	; (800ebac <udpServer_init+0x200>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d002      	beq.n	800e9ce <udpServer_init+0x22>
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d074      	beq.n	800eab6 <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800e9cc:	e0e9      	b.n	800eba2 <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800e9ce:	4b77      	ldr	r3, [pc, #476]	; (800ebac <udpServer_init+0x200>)
 800e9d0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800e9d4:	061a      	lsls	r2, r3, #24
 800e9d6:	4b75      	ldr	r3, [pc, #468]	; (800ebac <udpServer_init+0x200>)
 800e9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9dc:	041b      	lsls	r3, r3, #16
 800e9de:	431a      	orrs	r2, r3
 800e9e0:	4b72      	ldr	r3, [pc, #456]	; (800ebac <udpServer_init+0x200>)
 800e9e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9e6:	021b      	lsls	r3, r3, #8
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	4a70      	ldr	r2, [pc, #448]	; (800ebac <udpServer_init+0x200>)
 800e9ec:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	061a      	lsls	r2, r3, #24
 800e9f4:	4b6d      	ldr	r3, [pc, #436]	; (800ebac <udpServer_init+0x200>)
 800e9f6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800e9fa:	0619      	lsls	r1, r3, #24
 800e9fc:	4b6b      	ldr	r3, [pc, #428]	; (800ebac <udpServer_init+0x200>)
 800e9fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea02:	041b      	lsls	r3, r3, #16
 800ea04:	4319      	orrs	r1, r3
 800ea06:	4b69      	ldr	r3, [pc, #420]	; (800ebac <udpServer_init+0x200>)
 800ea08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea0c:	021b      	lsls	r3, r3, #8
 800ea0e:	430b      	orrs	r3, r1
 800ea10:	4966      	ldr	r1, [pc, #408]	; (800ebac <udpServer_init+0x200>)
 800ea12:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 800ea16:	430b      	orrs	r3, r1
 800ea18:	021b      	lsls	r3, r3, #8
 800ea1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea1e:	431a      	orrs	r2, r3
 800ea20:	4b62      	ldr	r3, [pc, #392]	; (800ebac <udpServer_init+0x200>)
 800ea22:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ea26:	0619      	lsls	r1, r3, #24
 800ea28:	4b60      	ldr	r3, [pc, #384]	; (800ebac <udpServer_init+0x200>)
 800ea2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea2e:	041b      	lsls	r3, r3, #16
 800ea30:	4319      	orrs	r1, r3
 800ea32:	4b5e      	ldr	r3, [pc, #376]	; (800ebac <udpServer_init+0x200>)
 800ea34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea38:	021b      	lsls	r3, r3, #8
 800ea3a:	430b      	orrs	r3, r1
 800ea3c:	495b      	ldr	r1, [pc, #364]	; (800ebac <udpServer_init+0x200>)
 800ea3e:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 800ea42:	430b      	orrs	r3, r1
 800ea44:	0a1b      	lsrs	r3, r3, #8
 800ea46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ea4a:	431a      	orrs	r2, r3
 800ea4c:	4b57      	ldr	r3, [pc, #348]	; (800ebac <udpServer_init+0x200>)
 800ea4e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ea52:	0619      	lsls	r1, r3, #24
 800ea54:	4b55      	ldr	r3, [pc, #340]	; (800ebac <udpServer_init+0x200>)
 800ea56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea5a:	041b      	lsls	r3, r3, #16
 800ea5c:	4319      	orrs	r1, r3
 800ea5e:	4b53      	ldr	r3, [pc, #332]	; (800ebac <udpServer_init+0x200>)
 800ea60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea64:	021b      	lsls	r3, r3, #8
 800ea66:	430b      	orrs	r3, r1
 800ea68:	4950      	ldr	r1, [pc, #320]	; (800ebac <udpServer_init+0x200>)
 800ea6a:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 800ea6e:	430b      	orrs	r3, r1
 800ea70:	0e1b      	lsrs	r3, r3, #24
 800ea72:	4313      	orrs	r3, r2
 800ea74:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800ea76:	4b4c      	ldr	r3, [pc, #304]	; (800eba8 <udpServer_init+0x1fc>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4a4c      	ldr	r2, [pc, #304]	; (800ebac <udpServer_init+0x200>)
 800ea7c:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800ea80:	4639      	mov	r1, r7
 800ea82:	4618      	mov	r0, r3
 800ea84:	f010 ff8e 	bl	801f9a4 <udp_bind>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800ea8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d107      	bne.n	800eaa4 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800ea94:	4b44      	ldr	r3, [pc, #272]	; (800eba8 <udpServer_init+0x1fc>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	4945      	ldr	r1, [pc, #276]	; (800ebb0 <udpServer_init+0x204>)
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f011 f809 	bl	801fab4 <udp_recv>
		break;
 800eaa2:	e07c      	b.n	800eb9e <udpServer_init+0x1f2>
			printf("N-OK\n");
 800eaa4:	4843      	ldr	r0, [pc, #268]	; (800ebb4 <udpServer_init+0x208>)
 800eaa6:	f013 fdf9 	bl	802269c <puts>
			udp_remove(upcb);
 800eaaa:	4b3f      	ldr	r3, [pc, #252]	; (800eba8 <udpServer_init+0x1fc>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f011 f820 	bl	801faf4 <udp_remove>
		break;
 800eab4:	e073      	b.n	800eb9e <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800eab6:	4b3d      	ldr	r3, [pc, #244]	; (800ebac <udpServer_init+0x200>)
 800eab8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800eabc:	061a      	lsls	r2, r3, #24
 800eabe:	4b3b      	ldr	r3, [pc, #236]	; (800ebac <udpServer_init+0x200>)
 800eac0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eac4:	041b      	lsls	r3, r3, #16
 800eac6:	431a      	orrs	r2, r3
 800eac8:	4b38      	ldr	r3, [pc, #224]	; (800ebac <udpServer_init+0x200>)
 800eaca:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800eace:	021b      	lsls	r3, r3, #8
 800ead0:	4313      	orrs	r3, r2
 800ead2:	4a36      	ldr	r2, [pc, #216]	; (800ebac <udpServer_init+0x200>)
 800ead4:	f892 22ac 	ldrb.w	r2, [r2, #684]	; 0x2ac
 800ead8:	4313      	orrs	r3, r2
 800eada:	061a      	lsls	r2, r3, #24
 800eadc:	4b33      	ldr	r3, [pc, #204]	; (800ebac <udpServer_init+0x200>)
 800eade:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800eae2:	0619      	lsls	r1, r3, #24
 800eae4:	4b31      	ldr	r3, [pc, #196]	; (800ebac <udpServer_init+0x200>)
 800eae6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eaea:	041b      	lsls	r3, r3, #16
 800eaec:	4319      	orrs	r1, r3
 800eaee:	4b2f      	ldr	r3, [pc, #188]	; (800ebac <udpServer_init+0x200>)
 800eaf0:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800eaf4:	021b      	lsls	r3, r3, #8
 800eaf6:	430b      	orrs	r3, r1
 800eaf8:	492c      	ldr	r1, [pc, #176]	; (800ebac <udpServer_init+0x200>)
 800eafa:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 800eafe:	430b      	orrs	r3, r1
 800eb00:	021b      	lsls	r3, r3, #8
 800eb02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb06:	431a      	orrs	r2, r3
 800eb08:	4b28      	ldr	r3, [pc, #160]	; (800ebac <udpServer_init+0x200>)
 800eb0a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800eb0e:	0619      	lsls	r1, r3, #24
 800eb10:	4b26      	ldr	r3, [pc, #152]	; (800ebac <udpServer_init+0x200>)
 800eb12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb16:	041b      	lsls	r3, r3, #16
 800eb18:	4319      	orrs	r1, r3
 800eb1a:	4b24      	ldr	r3, [pc, #144]	; (800ebac <udpServer_init+0x200>)
 800eb1c:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800eb20:	021b      	lsls	r3, r3, #8
 800eb22:	430b      	orrs	r3, r1
 800eb24:	4921      	ldr	r1, [pc, #132]	; (800ebac <udpServer_init+0x200>)
 800eb26:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 800eb2a:	430b      	orrs	r3, r1
 800eb2c:	0a1b      	lsrs	r3, r3, #8
 800eb2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb32:	431a      	orrs	r2, r3
 800eb34:	4b1d      	ldr	r3, [pc, #116]	; (800ebac <udpServer_init+0x200>)
 800eb36:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800eb3a:	0619      	lsls	r1, r3, #24
 800eb3c:	4b1b      	ldr	r3, [pc, #108]	; (800ebac <udpServer_init+0x200>)
 800eb3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb42:	041b      	lsls	r3, r3, #16
 800eb44:	4319      	orrs	r1, r3
 800eb46:	4b19      	ldr	r3, [pc, #100]	; (800ebac <udpServer_init+0x200>)
 800eb48:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800eb4c:	021b      	lsls	r3, r3, #8
 800eb4e:	430b      	orrs	r3, r1
 800eb50:	4916      	ldr	r1, [pc, #88]	; (800ebac <udpServer_init+0x200>)
 800eb52:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 800eb56:	430b      	orrs	r3, r1
 800eb58:	0e1b      	lsrs	r3, r3, #24
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800eb5e:	4b12      	ldr	r3, [pc, #72]	; (800eba8 <udpServer_init+0x1fc>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a12      	ldr	r2, [pc, #72]	; (800ebac <udpServer_init+0x200>)
 800eb64:	f8b2 22dc 	ldrh.w	r2, [r2, #732]	; 0x2dc
 800eb68:	4639      	mov	r1, r7
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f010 ff1a 	bl	801f9a4 <udp_bind>
 800eb70:	4603      	mov	r3, r0
 800eb72:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800eb74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d107      	bne.n	800eb8c <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800eb7c:	4b0a      	ldr	r3, [pc, #40]	; (800eba8 <udpServer_init+0x1fc>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2200      	movs	r2, #0
 800eb82:	490b      	ldr	r1, [pc, #44]	; (800ebb0 <udpServer_init+0x204>)
 800eb84:	4618      	mov	r0, r3
 800eb86:	f010 ff95 	bl	801fab4 <udp_recv>
		break;
 800eb8a:	e007      	b.n	800eb9c <udpServer_init+0x1f0>
			printf("N-OK\n");
 800eb8c:	4809      	ldr	r0, [pc, #36]	; (800ebb4 <udpServer_init+0x208>)
 800eb8e:	f013 fd85 	bl	802269c <puts>
			udp_remove(upcb);
 800eb92:	4b05      	ldr	r3, [pc, #20]	; (800eba8 <udpServer_init+0x1fc>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4618      	mov	r0, r3
 800eb98:	f010 ffac 	bl	801faf4 <udp_remove>
		break;
 800eb9c:	bf00      	nop
	}

	udpClient_connect();
 800eb9e:	f000 f90d 	bl	800edbc <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	20005230 	.word	0x20005230
 800ebac:	20000304 	.word	0x20000304
 800ebb0:	0800ebb9 	.word	0x0800ebb9
 800ebb4:	080267c0 	.word	0x080267c0

0800ebb8 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
 800ebc4:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800ebd2:	4a70      	ldr	r2, [pc, #448]	; (800ed94 <UDP_Receive_Callback+0x1dc>)
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	895b      	ldrh	r3, [r3, #10]
 800ebde:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 800ebe0:	4b6d      	ldr	r3, [pc, #436]	; (800ed98 <UDP_Receive_Callback+0x1e0>)
 800ebe2:	781b      	ldrb	r3, [r3, #0]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d02e      	beq.n	800ec46 <UDP_Receive_Callback+0x8e>
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d045      	beq.n	800ec78 <UDP_Receive_Callback+0xc0>
 800ebec:	e069      	b.n	800ecc2 <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800ebee:	4b69      	ldr	r3, [pc, #420]	; (800ed94 <UDP_Receive_Callback+0x1dc>)
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	7dfb      	ldrb	r3, [r7, #23]
 800ebf4:	4969      	ldr	r1, [pc, #420]	; (800ed9c <UDP_Receive_Callback+0x1e4>)
 800ebf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d120      	bne.n	800ec40 <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 800ebfe:	7dbb      	ldrb	r3, [r7, #22]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d109      	bne.n	800ec18 <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800ec04:	6838      	ldr	r0, [r7, #0]
 800ec06:	f012 fbb5 	bl	8021374 <ip4addr_ntoa>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	4864      	ldr	r0, [pc, #400]	; (800eda0 <UDP_Receive_Callback+0x1e8>)
 800ec10:	f013 fca8 	bl	8022564 <iprintf>
					IpMatched = 1;
 800ec14:	2301      	movs	r3, #1
 800ec16:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 800ec18:	7dfb      	ldrb	r3, [r7, #23]
 800ec1a:	085b      	lsrs	r3, r3, #1
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4a60      	ldr	r2, [pc, #384]	; (800eda4 <UDP_Receive_Callback+0x1ec>)
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800ec2a:	7dfb      	ldrb	r3, [r7, #23]
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	7dfa      	ldrb	r2, [r7, #23]
 800ec34:	0852      	lsrs	r2, r2, #1
 800ec36:	b2d2      	uxtb	r2, r2
 800ec38:	3301      	adds	r3, #1
 800ec3a:	b2d9      	uxtb	r1, r3
 800ec3c:	4b5a      	ldr	r3, [pc, #360]	; (800eda8 <UDP_Receive_Callback+0x1f0>)
 800ec3e:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800ec40:	7dfb      	ldrb	r3, [r7, #23]
 800ec42:	3301      	adds	r3, #1
 800ec44:	75fb      	strb	r3, [r7, #23]
 800ec46:	4b54      	ldr	r3, [pc, #336]	; (800ed98 <UDP_Receive_Callback+0x1e0>)
 800ec48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ec4c:	7dfa      	ldrb	r2, [r7, #23]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d3cd      	bcc.n	800ebee <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 800ec52:	4b51      	ldr	r3, [pc, #324]	; (800ed98 <UDP_Receive_Callback+0x1e0>)
 800ec54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ec58:	7dfa      	ldrb	r2, [r7, #23]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d935      	bls.n	800ecca <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f00f ff48 	bl	801eaf4 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800ec64:	6838      	ldr	r0, [r7, #0]
 800ec66:	f012 fb85 	bl	8021374 <ip4addr_ntoa>
 800ec6a:	4601      	mov	r1, r0
 800ec6c:	7dfb      	ldrb	r3, [r7, #23]
 800ec6e:	461a      	mov	r2, r3
 800ec70:	484e      	ldr	r0, [pc, #312]	; (800edac <UDP_Receive_Callback+0x1f4>)
 800ec72:	f013 fc77 	bl	8022564 <iprintf>
			return;
 800ec76:	e08a      	b.n	800ed8e <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800ec78:	2300      	movs	r3, #0
 800ec7a:	75fb      	strb	r3, [r7, #23]
 800ec7c:	e00a      	b.n	800ec94 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800ec7e:	4b45      	ldr	r3, [pc, #276]	; (800ed94 <UDP_Receive_Callback+0x1dc>)
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	7dfb      	ldrb	r3, [r7, #23]
 800ec84:	4945      	ldr	r1, [pc, #276]	; (800ed9c <UDP_Receive_Callback+0x1e4>)
 800ec86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d009      	beq.n	800eca2 <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800ec8e:	7dfb      	ldrb	r3, [r7, #23]
 800ec90:	3301      	adds	r3, #1
 800ec92:	75fb      	strb	r3, [r7, #23]
 800ec94:	4b40      	ldr	r3, [pc, #256]	; (800ed98 <UDP_Receive_Callback+0x1e0>)
 800ec96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ec9a:	7dfa      	ldrb	r2, [r7, #23]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d3ee      	bcc.n	800ec7e <UDP_Receive_Callback+0xc6>
 800eca0:	e000      	b.n	800eca4 <UDP_Receive_Callback+0xec>
			{
				break;
 800eca2:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800eca4:	4b3c      	ldr	r3, [pc, #240]	; (800ed98 <UDP_Receive_Callback+0x1e0>)
 800eca6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ecaa:	7dfa      	ldrb	r2, [r7, #23]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d90e      	bls.n	800ecce <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f00f ff1f 	bl	801eaf4 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	483d      	ldr	r0, [pc, #244]	; (800edb0 <UDP_Receive_Callback+0x1f8>)
 800ecbc:	f013 fc52 	bl	8022564 <iprintf>
			return;
 800ecc0:	e065      	b.n	800ed8e <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f00f ff16 	bl	801eaf4 <pbuf_free>
		return;
 800ecc8:	e061      	b.n	800ed8e <UDP_Receive_Callback+0x1d6>
		break;
 800ecca:	bf00      	nop
 800eccc:	e000      	b.n	800ecd0 <UDP_Receive_Callback+0x118>
		break;
 800ecce:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800ecd0:	4b31      	ldr	r3, [pc, #196]	; (800ed98 <UDP_Receive_Callback+0x1e0>)
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d002      	beq.n	800ecde <UDP_Receive_Callback+0x126>
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d049      	beq.n	800ed70 <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 800ecdc:	e054      	b.n	800ed88 <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 800ecde:	f006 fc37 	bl	8015550 <HAL_GetTick>
 800ece2:	4603      	mov	r3, r0
 800ece4:	4a33      	ldr	r2, [pc, #204]	; (800edb4 <UDP_Receive_Callback+0x1fc>)
 800ece6:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800ece8:	4b33      	ldr	r3, [pc, #204]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ecea:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ecee:	461a      	mov	r2, r3
 800ecf0:	8abb      	ldrh	r3, [r7, #20]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ecf8:	dd24      	ble.n	800ed44 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800ecfa:	4b2f      	ldr	r3, [pc, #188]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ecfc:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ed00:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800ed04:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800ed06:	4b2c      	ldr	r3, [pc, #176]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed08:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	4b2a      	ldr	r3, [pc, #168]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed10:	18d0      	adds	r0, r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	8a7a      	ldrh	r2, [r7, #18]
 800ed18:	4619      	mov	r1, r3
 800ed1a:	f013 fb13 	bl	8022344 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	685a      	ldr	r2, [r3, #4]
 800ed22:	8a7b      	ldrh	r3, [r7, #18]
 800ed24:	18d1      	adds	r1, r2, r3
 800ed26:	8aba      	ldrh	r2, [r7, #20]
 800ed28:	8a7b      	ldrh	r3, [r7, #18]
 800ed2a:	1ad3      	subs	r3, r2, r3
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	4822      	ldr	r0, [pc, #136]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed30:	f013 fb08 	bl	8022344 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 800ed34:	8aba      	ldrh	r2, [r7, #20]
 800ed36:	8a7b      	ldrh	r3, [r7, #18]
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	4b1e      	ldr	r3, [pc, #120]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed3e:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800ed42:	e021      	b.n	800ed88 <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 800ed44:	4b1c      	ldr	r3, [pc, #112]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed46:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	4b1a      	ldr	r3, [pc, #104]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed4e:	18d0      	adds	r0, r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	8aba      	ldrh	r2, [r7, #20]
 800ed56:	4619      	mov	r1, r3
 800ed58:	f013 faf4 	bl	8022344 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 800ed5c:	4b16      	ldr	r3, [pc, #88]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed5e:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 800ed62:	8abb      	ldrh	r3, [r7, #20]
 800ed64:	4413      	add	r3, r2
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	4b13      	ldr	r3, [pc, #76]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed6a:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800ed6e:	e00b      	b.n	800ed88 <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	8aba      	ldrh	r2, [r7, #20]
 800ed76:	4619      	mov	r1, r3
 800ed78:	480f      	ldr	r0, [pc, #60]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed7a:	f013 fae3 	bl	8022344 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 800ed7e:	4a0e      	ldr	r2, [pc, #56]	; (800edb8 <UDP_Receive_Callback+0x200>)
 800ed80:	8abb      	ldrh	r3, [r7, #20]
 800ed82:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 800ed86:	bf00      	nop
	}


	pbuf_free(p);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f00f feb3 	bl	801eaf4 <pbuf_free>
}
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	20005204 	.word	0x20005204
 800ed98:	20000304 	.word	0x20000304
 800ed9c:	200051b4 	.word	0x200051b4
 800eda0:	080267c8 	.word	0x080267c8
 800eda4:	20001058 	.word	0x20001058
 800eda8:	20001080 	.word	0x20001080
 800edac:	080267d4 	.word	0x080267d4
 800edb0:	08026800 	.word	0x08026800
 800edb4:	20000e3c 	.word	0x20000e3c
 800edb8:	20004bb0 	.word	0x20004bb0

0800edbc <udpClient_connect>:
void udpClient_connect(void)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
	err_t err;
	uint8_t Traverser = 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 800edc6:	4ba6      	ldr	r3, [pc, #664]	; (800f060 <udpClient_connect+0x2a4>)
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	2b01      	cmp	r3, #1
 800edcc:	d003      	beq.n	800edd6 <udpClient_connect+0x1a>
 800edce:	2b02      	cmp	r3, #2
 800edd0:	f000 80a1 	beq.w	800ef16 <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 800edd4:	e13f      	b.n	800f056 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800edd6:	2300      	movs	r3, #0
 800edd8:	71fb      	strb	r3, [r7, #7]
 800edda:	e094      	b.n	800ef06 <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800eddc:	79fb      	ldrb	r3, [r7, #7]
 800edde:	4aa0      	ldr	r2, [pc, #640]	; (800f060 <udpClient_connect+0x2a4>)
 800ede0:	3326      	adds	r3, #38	; 0x26
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	4413      	add	r3, r2
 800ede6:	78db      	ldrb	r3, [r3, #3]
 800ede8:	061a      	lsls	r2, r3, #24
 800edea:	79fb      	ldrb	r3, [r7, #7]
 800edec:	499c      	ldr	r1, [pc, #624]	; (800f060 <udpClient_connect+0x2a4>)
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	440b      	add	r3, r1
 800edf2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800edf6:	041b      	lsls	r3, r3, #16
 800edf8:	431a      	orrs	r2, r3
 800edfa:	79fb      	ldrb	r3, [r7, #7]
 800edfc:	4998      	ldr	r1, [pc, #608]	; (800f060 <udpClient_connect+0x2a4>)
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	440b      	add	r3, r1
 800ee02:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ee06:	021b      	lsls	r3, r3, #8
 800ee08:	431a      	orrs	r2, r3
 800ee0a:	79fb      	ldrb	r3, [r7, #7]
 800ee0c:	4994      	ldr	r1, [pc, #592]	; (800f060 <udpClient_connect+0x2a4>)
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	440b      	add	r3, r1
 800ee12:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ee16:	4313      	orrs	r3, r2
 800ee18:	061a      	lsls	r2, r3, #24
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	4990      	ldr	r1, [pc, #576]	; (800f060 <udpClient_connect+0x2a4>)
 800ee1e:	3326      	adds	r3, #38	; 0x26
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	440b      	add	r3, r1
 800ee24:	78db      	ldrb	r3, [r3, #3]
 800ee26:	0619      	lsls	r1, r3, #24
 800ee28:	79fb      	ldrb	r3, [r7, #7]
 800ee2a:	488d      	ldr	r0, [pc, #564]	; (800f060 <udpClient_connect+0x2a4>)
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	4403      	add	r3, r0
 800ee30:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ee34:	041b      	lsls	r3, r3, #16
 800ee36:	4319      	orrs	r1, r3
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	4889      	ldr	r0, [pc, #548]	; (800f060 <udpClient_connect+0x2a4>)
 800ee3c:	009b      	lsls	r3, r3, #2
 800ee3e:	4403      	add	r3, r0
 800ee40:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ee44:	021b      	lsls	r3, r3, #8
 800ee46:	4319      	orrs	r1, r3
 800ee48:	79fb      	ldrb	r3, [r7, #7]
 800ee4a:	4885      	ldr	r0, [pc, #532]	; (800f060 <udpClient_connect+0x2a4>)
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4403      	add	r3, r0
 800ee50:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ee54:	430b      	orrs	r3, r1
 800ee56:	021b      	lsls	r3, r3, #8
 800ee58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ee5c:	431a      	orrs	r2, r3
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	497f      	ldr	r1, [pc, #508]	; (800f060 <udpClient_connect+0x2a4>)
 800ee62:	3326      	adds	r3, #38	; 0x26
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	440b      	add	r3, r1
 800ee68:	78db      	ldrb	r3, [r3, #3]
 800ee6a:	0619      	lsls	r1, r3, #24
 800ee6c:	79fb      	ldrb	r3, [r7, #7]
 800ee6e:	487c      	ldr	r0, [pc, #496]	; (800f060 <udpClient_connect+0x2a4>)
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4403      	add	r3, r0
 800ee74:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ee78:	041b      	lsls	r3, r3, #16
 800ee7a:	4319      	orrs	r1, r3
 800ee7c:	79fb      	ldrb	r3, [r7, #7]
 800ee7e:	4878      	ldr	r0, [pc, #480]	; (800f060 <udpClient_connect+0x2a4>)
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4403      	add	r3, r0
 800ee84:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ee88:	021b      	lsls	r3, r3, #8
 800ee8a:	4319      	orrs	r1, r3
 800ee8c:	79fb      	ldrb	r3, [r7, #7]
 800ee8e:	4874      	ldr	r0, [pc, #464]	; (800f060 <udpClient_connect+0x2a4>)
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	4403      	add	r3, r0
 800ee94:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ee98:	430b      	orrs	r3, r1
 800ee9a:	0a1b      	lsrs	r3, r3, #8
 800ee9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eea0:	ea42 0103 	orr.w	r1, r2, r3
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	4a6e      	ldr	r2, [pc, #440]	; (800f060 <udpClient_connect+0x2a4>)
 800eea8:	3326      	adds	r3, #38	; 0x26
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	78db      	ldrb	r3, [r3, #3]
 800eeb0:	061a      	lsls	r2, r3, #24
 800eeb2:	79fb      	ldrb	r3, [r7, #7]
 800eeb4:	486a      	ldr	r0, [pc, #424]	; (800f060 <udpClient_connect+0x2a4>)
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4403      	add	r3, r0
 800eeba:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800eebe:	041b      	lsls	r3, r3, #16
 800eec0:	431a      	orrs	r2, r3
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	4866      	ldr	r0, [pc, #408]	; (800f060 <udpClient_connect+0x2a4>)
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4403      	add	r3, r0
 800eeca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800eece:	021b      	lsls	r3, r3, #8
 800eed0:	431a      	orrs	r2, r3
 800eed2:	79fb      	ldrb	r3, [r7, #7]
 800eed4:	4862      	ldr	r0, [pc, #392]	; (800f060 <udpClient_connect+0x2a4>)
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4403      	add	r3, r0
 800eeda:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800eede:	4313      	orrs	r3, r2
 800eee0:	0e1a      	lsrs	r2, r3, #24
 800eee2:	79fb      	ldrb	r3, [r7, #7]
 800eee4:	430a      	orrs	r2, r1
 800eee6:	495f      	ldr	r1, [pc, #380]	; (800f064 <udpClient_connect+0x2a8>)
 800eee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800eeec:	79fb      	ldrb	r3, [r7, #7]
 800eeee:	79fa      	ldrb	r2, [r7, #7]
 800eef0:	495b      	ldr	r1, [pc, #364]	; (800f060 <udpClient_connect+0x2a4>)
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	440b      	add	r3, r1
 800eef6:	f8b3 114c 	ldrh.w	r1, [r3, #332]	; 0x14c
 800eefa:	4b5b      	ldr	r3, [pc, #364]	; (800f068 <udpClient_connect+0x2ac>)
 800eefc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800ef00:	79fb      	ldrb	r3, [r7, #7]
 800ef02:	3301      	adds	r3, #1
 800ef04:	71fb      	strb	r3, [r7, #7]
 800ef06:	4b56      	ldr	r3, [pc, #344]	; (800f060 <udpClient_connect+0x2a4>)
 800ef08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ef0c:	79fa      	ldrb	r2, [r7, #7]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	f4ff af64 	bcc.w	800eddc <udpClient_connect+0x20>
		break;
 800ef14:	e09f      	b.n	800f056 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800ef16:	2300      	movs	r3, #0
 800ef18:	71fb      	strb	r3, [r7, #7]
 800ef1a:	e094      	b.n	800f046 <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 800ef1c:	79fb      	ldrb	r3, [r7, #7]
 800ef1e:	4a50      	ldr	r2, [pc, #320]	; (800f060 <udpClient_connect+0x2a4>)
 800ef20:	33b2      	adds	r3, #178	; 0xb2
 800ef22:	009b      	lsls	r3, r3, #2
 800ef24:	4413      	add	r3, r2
 800ef26:	785b      	ldrb	r3, [r3, #1]
 800ef28:	061a      	lsls	r2, r3, #24
 800ef2a:	79fb      	ldrb	r3, [r7, #7]
 800ef2c:	494c      	ldr	r1, [pc, #304]	; (800f060 <udpClient_connect+0x2a4>)
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	440b      	add	r3, r1
 800ef32:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800ef36:	041b      	lsls	r3, r3, #16
 800ef38:	431a      	orrs	r2, r3
 800ef3a:	79fb      	ldrb	r3, [r7, #7]
 800ef3c:	4948      	ldr	r1, [pc, #288]	; (800f060 <udpClient_connect+0x2a4>)
 800ef3e:	009b      	lsls	r3, r3, #2
 800ef40:	440b      	add	r3, r1
 800ef42:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800ef46:	021b      	lsls	r3, r3, #8
 800ef48:	431a      	orrs	r2, r3
 800ef4a:	79fb      	ldrb	r3, [r7, #7]
 800ef4c:	4944      	ldr	r1, [pc, #272]	; (800f060 <udpClient_connect+0x2a4>)
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	440b      	add	r3, r1
 800ef52:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800ef56:	4313      	orrs	r3, r2
 800ef58:	061a      	lsls	r2, r3, #24
 800ef5a:	79fb      	ldrb	r3, [r7, #7]
 800ef5c:	4940      	ldr	r1, [pc, #256]	; (800f060 <udpClient_connect+0x2a4>)
 800ef5e:	33b2      	adds	r3, #178	; 0xb2
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	440b      	add	r3, r1
 800ef64:	785b      	ldrb	r3, [r3, #1]
 800ef66:	0619      	lsls	r1, r3, #24
 800ef68:	79fb      	ldrb	r3, [r7, #7]
 800ef6a:	483d      	ldr	r0, [pc, #244]	; (800f060 <udpClient_connect+0x2a4>)
 800ef6c:	009b      	lsls	r3, r3, #2
 800ef6e:	4403      	add	r3, r0
 800ef70:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800ef74:	041b      	lsls	r3, r3, #16
 800ef76:	4319      	orrs	r1, r3
 800ef78:	79fb      	ldrb	r3, [r7, #7]
 800ef7a:	4839      	ldr	r0, [pc, #228]	; (800f060 <udpClient_connect+0x2a4>)
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	4403      	add	r3, r0
 800ef80:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800ef84:	021b      	lsls	r3, r3, #8
 800ef86:	4319      	orrs	r1, r3
 800ef88:	79fb      	ldrb	r3, [r7, #7]
 800ef8a:	4835      	ldr	r0, [pc, #212]	; (800f060 <udpClient_connect+0x2a4>)
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	4403      	add	r3, r0
 800ef90:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800ef94:	430b      	orrs	r3, r1
 800ef96:	021b      	lsls	r3, r3, #8
 800ef98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef9c:	431a      	orrs	r2, r3
 800ef9e:	79fb      	ldrb	r3, [r7, #7]
 800efa0:	492f      	ldr	r1, [pc, #188]	; (800f060 <udpClient_connect+0x2a4>)
 800efa2:	33b2      	adds	r3, #178	; 0xb2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	440b      	add	r3, r1
 800efa8:	785b      	ldrb	r3, [r3, #1]
 800efaa:	0619      	lsls	r1, r3, #24
 800efac:	79fb      	ldrb	r3, [r7, #7]
 800efae:	482c      	ldr	r0, [pc, #176]	; (800f060 <udpClient_connect+0x2a4>)
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	4403      	add	r3, r0
 800efb4:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800efb8:	041b      	lsls	r3, r3, #16
 800efba:	4319      	orrs	r1, r3
 800efbc:	79fb      	ldrb	r3, [r7, #7]
 800efbe:	4828      	ldr	r0, [pc, #160]	; (800f060 <udpClient_connect+0x2a4>)
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	4403      	add	r3, r0
 800efc4:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800efc8:	021b      	lsls	r3, r3, #8
 800efca:	4319      	orrs	r1, r3
 800efcc:	79fb      	ldrb	r3, [r7, #7]
 800efce:	4824      	ldr	r0, [pc, #144]	; (800f060 <udpClient_connect+0x2a4>)
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	4403      	add	r3, r0
 800efd4:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800efd8:	430b      	orrs	r3, r1
 800efda:	0a1b      	lsrs	r3, r3, #8
 800efdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800efe0:	ea42 0103 	orr.w	r1, r2, r3
 800efe4:	79fb      	ldrb	r3, [r7, #7]
 800efe6:	4a1e      	ldr	r2, [pc, #120]	; (800f060 <udpClient_connect+0x2a4>)
 800efe8:	33b2      	adds	r3, #178	; 0xb2
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	4413      	add	r3, r2
 800efee:	785b      	ldrb	r3, [r3, #1]
 800eff0:	061a      	lsls	r2, r3, #24
 800eff2:	79fb      	ldrb	r3, [r7, #7]
 800eff4:	481a      	ldr	r0, [pc, #104]	; (800f060 <udpClient_connect+0x2a4>)
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4403      	add	r3, r0
 800effa:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800effe:	041b      	lsls	r3, r3, #16
 800f000:	431a      	orrs	r2, r3
 800f002:	79fb      	ldrb	r3, [r7, #7]
 800f004:	4816      	ldr	r0, [pc, #88]	; (800f060 <udpClient_connect+0x2a4>)
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	4403      	add	r3, r0
 800f00a:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800f00e:	021b      	lsls	r3, r3, #8
 800f010:	431a      	orrs	r2, r3
 800f012:	79fb      	ldrb	r3, [r7, #7]
 800f014:	4812      	ldr	r0, [pc, #72]	; (800f060 <udpClient_connect+0x2a4>)
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	4403      	add	r3, r0
 800f01a:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800f01e:	4313      	orrs	r3, r2
 800f020:	0e1a      	lsrs	r2, r3, #24
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	430a      	orrs	r2, r1
 800f026:	490f      	ldr	r1, [pc, #60]	; (800f064 <udpClient_connect+0x2a8>)
 800f028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f02c:	79fb      	ldrb	r3, [r7, #7]
 800f02e:	79fa      	ldrb	r2, [r7, #7]
 800f030:	490b      	ldr	r1, [pc, #44]	; (800f060 <udpClient_connect+0x2a4>)
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	440b      	add	r3, r1
 800f036:	f8b3 12f0 	ldrh.w	r1, [r3, #752]	; 0x2f0
 800f03a:	4b0b      	ldr	r3, [pc, #44]	; (800f068 <udpClient_connect+0x2ac>)
 800f03c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f040:	79fb      	ldrb	r3, [r7, #7]
 800f042:	3301      	adds	r3, #1
 800f044:	71fb      	strb	r3, [r7, #7]
 800f046:	4b06      	ldr	r3, [pc, #24]	; (800f060 <udpClient_connect+0x2a4>)
 800f048:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f04c:	79fa      	ldrb	r2, [r7, #7]
 800f04e:	429a      	cmp	r2, r3
 800f050:	f4ff af64 	bcc.w	800ef1c <udpClient_connect+0x160>
		break;
 800f054:	bf00      	nop
	}
}
 800f056:	370c      	adds	r7, #12
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	20000304 	.word	0x20000304
 800f064:	200051b4 	.word	0x200051b4
 800f068:	20005208 	.word	0x20005208

0800f06c <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	460b      	mov	r3, r1
 800f076:	607a      	str	r2, [r7, #4]
 800f078:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f07e:	7afb      	ldrb	r3, [r7, #11]
 800f080:	b29b      	uxth	r3, r3
 800f082:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f086:	4619      	mov	r1, r3
 800f088:	2036      	movs	r0, #54	; 0x36
 800f08a:	f00f fa51 	bl	801e530 <pbuf_alloc>
 800f08e:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d01d      	beq.n	800f0d2 <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 800f096:	7afb      	ldrb	r3, [r7, #11]
 800f098:	b29b      	uxth	r3, r3
 800f09a:	461a      	mov	r2, r3
 800f09c:	68f9      	ldr	r1, [r7, #12]
 800f09e:	6938      	ldr	r0, [r7, #16]
 800f0a0:	f00f ff22 	bl	801eee8 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 800f0a4:	4b0d      	ldr	r3, [pc, #52]	; (800f0dc <udpClient_send+0x70>)
 800f0a6:	6818      	ldr	r0, [r3, #0]
 800f0a8:	4b0d      	ldr	r3, [pc, #52]	; (800f0e0 <udpClient_send+0x74>)
 800f0aa:	881b      	ldrh	r3, [r3, #0]
 800f0ac:	1d3a      	adds	r2, r7, #4
 800f0ae:	6939      	ldr	r1, [r7, #16]
 800f0b0:	f010 fac2 	bl	801f638 <udp_sendto>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f0b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d005      	beq.n	800f0cc <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 800f0c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	4807      	ldr	r0, [pc, #28]	; (800f0e4 <udpClient_send+0x78>)
 800f0c8:	f013 fa4c 	bl	8022564 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 800f0cc:	6938      	ldr	r0, [r7, #16]
 800f0ce:	f00f fd11 	bl	801eaf4 <pbuf_free>
	}
}
 800f0d2:	bf00      	nop
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	20005230 	.word	0x20005230
 800f0e0:	20005208 	.word	0x20005208
 800f0e4:	08026828 	.word	0x08026828

0800f0e8 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 800f0ec:	4b07      	ldr	r3, [pc, #28]	; (800f10c <Is_There_EI_Data+0x24>)
 800f0ee:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800f0f2:	4b06      	ldr	r3, [pc, #24]	; (800f10c <Is_There_EI_Data+0x24>)
 800f0f4:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d001      	beq.n	800f100 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	e000      	b.n	800f102 <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 800f100:	2300      	movs	r3, #0
	}
}
 800f102:	4618      	mov	r0, r3
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	20004bb0 	.word	0x20004bb0

0800f110 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 800f116:	4b15      	ldr	r3, [pc, #84]	; (800f16c <Get_Eth_Byte+0x5c>)
 800f118:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f11c:	1c5a      	adds	r2, r3, #1
 800f11e:	b291      	uxth	r1, r2
 800f120:	4a12      	ldr	r2, [pc, #72]	; (800f16c <Get_Eth_Byte+0x5c>)
 800f122:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 800f126:	461a      	mov	r2, r3
 800f128:	4b10      	ldr	r3, [pc, #64]	; (800f16c <Get_Eth_Byte+0x5c>)
 800f12a:	5c9b      	ldrb	r3, [r3, r2]
 800f12c:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 800f12e:	4b0f      	ldr	r3, [pc, #60]	; (800f16c <Get_Eth_Byte+0x5c>)
 800f130:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f134:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f138:	d313      	bcc.n	800f162 <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 800f13a:	4b0c      	ldr	r3, [pc, #48]	; (800f16c <Get_Eth_Byte+0x5c>)
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 800f142:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <Get_Eth_Byte+0x5c>)
 800f144:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f148:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f14c:	d109      	bne.n	800f162 <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 800f14e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f152:	2100      	movs	r1, #0
 800f154:	4805      	ldr	r0, [pc, #20]	; (800f16c <Get_Eth_Byte+0x5c>)
 800f156:	f013 f91d 	bl	8022394 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 800f15a:	4b04      	ldr	r3, [pc, #16]	; (800f16c <Get_Eth_Byte+0x5c>)
 800f15c:	2200      	movs	r2, #0
 800f15e:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 800f162:	79fb      	ldrb	r3, [r7, #7]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	20004bb0 	.word	0x20004bb0

0800f170 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b094      	sub	sp, #80	; 0x50
 800f174:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800f176:	4b38      	ldr	r3, [pc, #224]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f178:	4a38      	ldr	r2, [pc, #224]	; (800f25c <MX_CAN2_Init+0xec>)
 800f17a:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 800f17c:	4b36      	ldr	r3, [pc, #216]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f17e:	2212      	movs	r2, #18
 800f180:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800f182:	4b35      	ldr	r3, [pc, #212]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f184:	2200      	movs	r2, #0
 800f186:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f188:	4b33      	ldr	r3, [pc, #204]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f18a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f18e:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f190:	4b31      	ldr	r3, [pc, #196]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f192:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f196:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f198:	4b2f      	ldr	r3, [pc, #188]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f19a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f19e:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800f1a0:	4b2d      	ldr	r3, [pc, #180]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800f1a6:	4b2c      	ldr	r3, [pc, #176]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800f1ac:	4b2a      	ldr	r3, [pc, #168]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 800f1b2:	4b29      	ldr	r3, [pc, #164]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800f1b8:	4b27      	ldr	r3, [pc, #156]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800f1be:	4b26      	ldr	r3, [pc, #152]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800f1c4:	4824      	ldr	r0, [pc, #144]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f1c6:	f006 f9f3 	bl	80155b0 <HAL_CAN_Init>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d001      	beq.n	800f1d4 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 800f1d0:	f004 fc32 	bl	8013a38 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 800f1d8:	2304      	movs	r3, #4
 800f1da:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f1e0:	f242 0360 	movw	r3, #8288	; 0x2060
 800f1e4:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 800f1ea:	f242 0360 	movw	r3, #8288	; 0x2060
 800f1ee:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 800f1fc:	2302      	movs	r3, #2
 800f1fe:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 800f200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f204:	4619      	mov	r1, r3
 800f206:	4814      	ldr	r0, [pc, #80]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f208:	f006 fb18 	bl	801583c <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 800f20c:	2301      	movs	r3, #1
 800f20e:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 800f210:	2305      	movs	r3, #5
 800f212:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f214:	2301      	movs	r3, #1
 800f216:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f218:	f242 1320 	movw	r3, #8480	; 0x2120
 800f21c:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 800f21e:	2300      	movs	r3, #0
 800f220:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 800f222:	f242 1320 	movw	r3, #8480	; 0x2120
 800f226:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 800f228:	2300      	movs	r3, #0
 800f22a:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 800f22c:	2301      	movs	r3, #1
 800f22e:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 800f230:	2301      	movs	r3, #1
 800f232:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 800f234:	2302      	movs	r3, #2
 800f236:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 800f238:	463b      	mov	r3, r7
 800f23a:	4619      	mov	r1, r3
 800f23c:	4806      	ldr	r0, [pc, #24]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f23e:	f006 fafd 	bl	801583c <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 800f242:	4805      	ldr	r0, [pc, #20]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f244:	f006 fbe6 	bl	8015a14 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 800f248:	2110      	movs	r1, #16
 800f24a:	4803      	ldr	r0, [pc, #12]	; (800f258 <MX_CAN2_Init+0xe8>)
 800f24c:	f006 fe2c 	bl	8015ea8 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 800f250:	bf00      	nop
 800f252:	3750      	adds	r7, #80	; 0x50
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	20009ae8 	.word	0x20009ae8
 800f25c:	40006800 	.word	0x40006800

0800f260 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b08a      	sub	sp, #40	; 0x28
 800f264:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 800f266:	4b34      	ldr	r3, [pc, #208]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f268:	4a34      	ldr	r2, [pc, #208]	; (800f33c <MX_CAN3_Init+0xdc>)
 800f26a:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 800f26c:	4b32      	ldr	r3, [pc, #200]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f26e:	2205      	movs	r2, #5
 800f270:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f272:	4b31      	ldr	r3, [pc, #196]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f274:	2200      	movs	r2, #0
 800f276:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f278:	4b2f      	ldr	r3, [pc, #188]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f27a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f27e:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 800f280:	4b2d      	ldr	r3, [pc, #180]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f282:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800f286:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800f288:	4b2b      	ldr	r3, [pc, #172]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f28a:	2200      	movs	r2, #0
 800f28c:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 800f28e:	4b2a      	ldr	r3, [pc, #168]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f290:	4a2a      	ldr	r2, [pc, #168]	; (800f33c <MX_CAN3_Init+0xdc>)
 800f292:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 800f294:	4b28      	ldr	r3, [pc, #160]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f296:	2212      	movs	r2, #18
 800f298:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f29a:	4b27      	ldr	r3, [pc, #156]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f29c:	2200      	movs	r2, #0
 800f29e:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f2a0:	4b25      	ldr	r3, [pc, #148]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f2a6:	4b24      	ldr	r3, [pc, #144]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f2ac:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f2ae:	4b22      	ldr	r3, [pc, #136]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f2b4:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 800f2b6:	4b20      	ldr	r3, [pc, #128]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 800f2bc:	4b1e      	ldr	r3, [pc, #120]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 800f2c2:	4b1d      	ldr	r3, [pc, #116]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 800f2c8:	4b1b      	ldr	r3, [pc, #108]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 800f2ce:	4b1a      	ldr	r3, [pc, #104]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 800f2d4:	4b18      	ldr	r3, [pc, #96]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800f2da:	4817      	ldr	r0, [pc, #92]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f2dc:	f006 f968 	bl	80155b0 <HAL_CAN_Init>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d001      	beq.n	800f2ea <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 800f2e6:	f004 fba7 	bl	8013a38 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 800f2f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f2fa:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 800f300:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f304:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f306:	2300      	movs	r3, #0
 800f308:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 800f30a:	2300      	movs	r3, #0
 800f30c:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f30e:	2301      	movs	r3, #1
 800f310:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 800f312:	2306      	movs	r3, #6
 800f314:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 800f316:	463b      	mov	r3, r7
 800f318:	4619      	mov	r1, r3
 800f31a:	4807      	ldr	r0, [pc, #28]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f31c:	f006 fa8e 	bl	801583c <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 800f320:	4805      	ldr	r0, [pc, #20]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f322:	f006 fb77 	bl	8015a14 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 800f326:	2102      	movs	r1, #2
 800f328:	4803      	ldr	r0, [pc, #12]	; (800f338 <MX_CAN3_Init+0xd8>)
 800f32a:	f006 fdbd 	bl	8015ea8 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 800f32e:	bf00      	nop
 800f330:	3728      	adds	r7, #40	; 0x28
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	20009b4c 	.word	0x20009b4c
 800f33c:	40003400 	.word	0x40003400

0800f340 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b08c      	sub	sp, #48	; 0x30
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f348:	f107 031c 	add.w	r3, r7, #28
 800f34c:	2200      	movs	r2, #0
 800f34e:	601a      	str	r2, [r3, #0]
 800f350:	605a      	str	r2, [r3, #4]
 800f352:	609a      	str	r2, [r3, #8]
 800f354:	60da      	str	r2, [r3, #12]
 800f356:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a44      	ldr	r2, [pc, #272]	; (800f470 <HAL_CAN_MspInit+0x130>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d144      	bne.n	800f3ec <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 800f362:	4b44      	ldr	r3, [pc, #272]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f366:	4a43      	ldr	r2, [pc, #268]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f368:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f36c:	6413      	str	r3, [r2, #64]	; 0x40
 800f36e:	4b41      	ldr	r3, [pc, #260]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f372:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f376:	61bb      	str	r3, [r7, #24]
 800f378:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 800f37a:	4b3e      	ldr	r3, [pc, #248]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f37e:	4a3d      	ldr	r2, [pc, #244]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f384:	6413      	str	r3, [r2, #64]	; 0x40
 800f386:	4b3b      	ldr	r3, [pc, #236]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f38a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f38e:	617b      	str	r3, [r7, #20]
 800f390:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800f392:	4b38      	ldr	r3, [pc, #224]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f396:	4a37      	ldr	r2, [pc, #220]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f398:	f043 0302 	orr.w	r3, r3, #2
 800f39c:	6313      	str	r3, [r2, #48]	; 0x30
 800f39e:	4b35      	ldr	r3, [pc, #212]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a2:	f003 0302 	and.w	r3, r3, #2
 800f3a6:	613b      	str	r3, [r7, #16]
 800f3a8:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800f3aa:	2360      	movs	r3, #96	; 0x60
 800f3ac:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3ae:	2302      	movs	r3, #2
 800f3b0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3b6:	2303      	movs	r3, #3
 800f3b8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f3ba:	2309      	movs	r3, #9
 800f3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f3be:	f107 031c 	add.w	r3, r7, #28
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	482c      	ldr	r0, [pc, #176]	; (800f478 <HAL_CAN_MspInit+0x138>)
 800f3c6:	f008 fbcf 	bl	8017b68 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	2104      	movs	r1, #4
 800f3ce:	2040      	movs	r0, #64	; 0x40
 800f3d0:	f007 f89f 	bl	8016512 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f3d4:	2040      	movs	r0, #64	; 0x40
 800f3d6:	f007 f8b8 	bl	801654a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 800f3da:	2201      	movs	r2, #1
 800f3dc:	2104      	movs	r1, #4
 800f3de:	2041      	movs	r0, #65	; 0x41
 800f3e0:	f007 f897 	bl	8016512 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f3e4:	2041      	movs	r0, #65	; 0x41
 800f3e6:	f007 f8b0 	bl	801654a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 800f3ea:	e03d      	b.n	800f468 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	4a22      	ldr	r2, [pc, #136]	; (800f47c <HAL_CAN_MspInit+0x13c>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d138      	bne.n	800f468 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800f3f6:	4b1f      	ldr	r3, [pc, #124]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3fa:	4a1e      	ldr	r2, [pc, #120]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f3fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f400:	6413      	str	r3, [r2, #64]	; 0x40
 800f402:	4b1c      	ldr	r3, [pc, #112]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f40a:	60fb      	str	r3, [r7, #12]
 800f40c:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800f40e:	4b19      	ldr	r3, [pc, #100]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f412:	4a18      	ldr	r2, [pc, #96]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f414:	f043 0301 	orr.w	r3, r3, #1
 800f418:	6313      	str	r3, [r2, #48]	; 0x30
 800f41a:	4b16      	ldr	r3, [pc, #88]	; (800f474 <HAL_CAN_MspInit+0x134>)
 800f41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f41e:	f003 0301 	and.w	r3, r3, #1
 800f422:	60bb      	str	r3, [r7, #8]
 800f424:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 800f426:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800f42a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f42c:	2302      	movs	r3, #2
 800f42e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f430:	2300      	movs	r3, #0
 800f432:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f434:	2303      	movs	r3, #3
 800f436:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800f438:	230b      	movs	r3, #11
 800f43a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f43c:	f107 031c 	add.w	r3, r7, #28
 800f440:	4619      	mov	r1, r3
 800f442:	480f      	ldr	r0, [pc, #60]	; (800f480 <HAL_CAN_MspInit+0x140>)
 800f444:	f008 fb90 	bl	8017b68 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800f448:	2200      	movs	r2, #0
 800f44a:	2100      	movs	r1, #0
 800f44c:	2069      	movs	r0, #105	; 0x69
 800f44e:	f007 f860 	bl	8016512 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800f452:	2069      	movs	r0, #105	; 0x69
 800f454:	f007 f879 	bl	801654a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800f458:	2200      	movs	r2, #0
 800f45a:	2100      	movs	r1, #0
 800f45c:	206a      	movs	r0, #106	; 0x6a
 800f45e:	f007 f858 	bl	8016512 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800f462:	206a      	movs	r0, #106	; 0x6a
 800f464:	f007 f871 	bl	801654a <HAL_NVIC_EnableIRQ>
}
 800f468:	bf00      	nop
 800f46a:	3730      	adds	r7, #48	; 0x30
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	40006800 	.word	0x40006800
 800f474:	40023800 	.word	0x40023800
 800f478:	40020400 	.word	0x40020400
 800f47c:	40003400 	.word	0x40003400
 800f480:	40020000 	.word	0x40020000

0800f484 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b086      	sub	sp, #24
 800f488:	af00      	add	r7, sp, #0
 800f48a:	4603      	mov	r3, r0
 800f48c:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 800f48e:	2300      	movs	r3, #0
 800f490:	827b      	strh	r3, [r7, #18]
	uint16_t uc_size = 0;
 800f492:	2300      	movs	r3, #0
 800f494:	82fb      	strh	r3, [r7, #22]



	switch(EI_data.ProtocolType)
 800f496:	4b9c      	ldr	r3, [pc, #624]	; (800f708 <TransmitCanPkt+0x284>)
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	2b03      	cmp	r3, #3
 800f49c:	f000 816b 	beq.w	800f776 <TransmitCanPkt+0x2f2>
 800f4a0:	2b03      	cmp	r3, #3
 800f4a2:	f300 8207 	bgt.w	800f8b4 <TransmitCanPkt+0x430>
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	d003      	beq.n	800f4b2 <TransmitCanPkt+0x2e>
 800f4aa:	2b02      	cmp	r3, #2
 800f4ac:	f000 80b9 	beq.w	800f622 <TransmitCanPkt+0x19e>
 800f4b0:	e200      	b.n	800f8b4 <TransmitCanPkt+0x430>
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800f4b2:	4b96      	ldr	r3, [pc, #600]	; (800f70c <TransmitCanPkt+0x288>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	0a1b      	lsrs	r3, r3, #8
 800f4b8:	f003 0301 	and.w	r3, r3, #1
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d003      	beq.n	800f4c8 <TransmitCanPkt+0x44>
		{
			printf("Stopping CAN Transmission\n");
 800f4c0:	4893      	ldr	r0, [pc, #588]	; (800f710 <TransmitCanPkt+0x28c>)
 800f4c2:	f013 f8eb 	bl	802269c <puts>
			return;
 800f4c6:	e1f5      	b.n	800f8b4 <TransmitCanPkt+0x430>
		}

		switch((int)Ken_idetifier)
 800f4c8:	88fb      	ldrh	r3, [r7, #6]
 800f4ca:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f4ce:	f300 80a2 	bgt.w	800f616 <TransmitCanPkt+0x192>
 800f4d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4d6:	dc0d      	bgt.n	800f4f4 <TransmitCanPkt+0x70>
 800f4d8:	f240 1219 	movw	r2, #281	; 0x119
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d021      	beq.n	800f524 <TransmitCanPkt+0xa0>
 800f4e0:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f4e4:	f340 8097 	ble.w	800f616 <TransmitCanPkt+0x192>
 800f4e8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	f200 8092 	bhi.w	800f616 <TransmitCanPkt+0x192>
 800f4f2:	e033      	b.n	800f55c <TransmitCanPkt+0xd8>
 800f4f4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800f4f8:	2b07      	cmp	r3, #7
 800f4fa:	f200 808c 	bhi.w	800f616 <TransmitCanPkt+0x192>
 800f4fe:	a201      	add	r2, pc, #4	; (adr r2, 800f504 <TransmitCanPkt+0x80>)
 800f500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f504:	0800f581 	.word	0x0800f581
 800f508:	0800f581 	.word	0x0800f581
 800f50c:	0800f5ab 	.word	0x0800f5ab
 800f510:	0800f5ab 	.word	0x0800f5ab
 800f514:	0800f5cf 	.word	0x0800f5cf
 800f518:	0800f617 	.word	0x0800f617
 800f51c:	0800f5f3 	.word	0x0800f5f3
 800f520:	0800f5f3 	.word	0x0800f5f3
		{
		case EI_PROCESS_DATA:
			vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 800f524:	4b78      	ldr	r3, [pc, #480]	; (800f708 <TransmitCanPkt+0x284>)
 800f526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	011b      	lsls	r3, r3, #4
 800f52e:	b29a      	uxth	r2, r3
 800f530:	4b78      	ldr	r3, [pc, #480]	; (800f714 <TransmitCanPkt+0x290>)
 800f532:	801a      	strh	r2, [r3, #0]
			pp_ptr = &vEI_Transver_EI_To_MIE;
 800f534:	4b77      	ldr	r3, [pc, #476]	; (800f714 <TransmitCanPkt+0x290>)
 800f536:	60fb      	str	r3, [r7, #12]
			uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 800f538:	4b76      	ldr	r3, [pc, #472]	; (800f714 <TransmitCanPkt+0x290>)
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	3302      	adds	r3, #2
 800f53e:	82fb      	strh	r3, [r7, #22]
			//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f540:	8afb      	ldrh	r3, [r7, #22]
 800f542:	88fa      	ldrh	r2, [r7, #6]
 800f544:	4619      	mov	r1, r3
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f000 f9d2 	bl	800f8f0 <sendCanPkts>
			if(Debug_flag == 1)
 800f54c:	4b72      	ldr	r3, [pc, #456]	; (800f718 <TransmitCanPkt+0x294>)
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	2b01      	cmp	r3, #1
 800f552:	d162      	bne.n	800f61a <TransmitCanPkt+0x196>
			{
				printf("SENT SIGNAL DATA TO MIE\n");
 800f554:	4871      	ldr	r0, [pc, #452]	; (800f71c <TransmitCanPkt+0x298>)
 800f556:	f013 f8a1 	bl	802269c <puts>
			}
			break;
 800f55a:	e05e      	b.n	800f61a <TransmitCanPkt+0x196>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800f55c:	4b70      	ldr	r3, [pc, #448]	; (800f720 <TransmitCanPkt+0x29c>)
 800f55e:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800f560:	2316      	movs	r3, #22
 800f562:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800f564:	4b6c      	ldr	r3, [pc, #432]	; (800f718 <TransmitCanPkt+0x294>)
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d102      	bne.n	800f572 <TransmitCanPkt+0xee>
			{
				printf("\nHealth 2 MIE\n");
 800f56c:	486d      	ldr	r0, [pc, #436]	; (800f724 <TransmitCanPkt+0x2a0>)
 800f56e:	f013 f895 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f572:	8afb      	ldrh	r3, [r7, #22]
 800f574:	88fa      	ldrh	r2, [r7, #6]
 800f576:	4619      	mov	r1, r3
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f000 f9b9 	bl	800f8f0 <sendCanPkts>
			break;
 800f57e:	e04f      	b.n	800f620 <TransmitCanPkt+0x19c>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 800f580:	4b69      	ldr	r3, [pc, #420]	; (800f728 <TransmitCanPkt+0x2a4>)
 800f582:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(EI_SELF_SHARING_t);
 800f584:	2318      	movs	r3, #24
 800f586:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f588:	8afb      	ldrh	r3, [r7, #22]
 800f58a:	88fa      	ldrh	r2, [r7, #6]
 800f58c:	4619      	mov	r1, r3
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f000 f9ae 	bl	800f8f0 <sendCanPkts>
			if(Debug_flag == 1)
 800f594:	4b60      	ldr	r3, [pc, #384]	; (800f718 <TransmitCanPkt+0x294>)
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d140      	bne.n	800f61e <TransmitCanPkt+0x19a>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 800f59c:	4b62      	ldr	r3, [pc, #392]	; (800f728 <TransmitCanPkt+0x2a4>)
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	4862      	ldr	r0, [pc, #392]	; (800f72c <TransmitCanPkt+0x2a8>)
 800f5a4:	f012 ffde 	bl	8022564 <iprintf>
			}
			break;
 800f5a8:	e039      	b.n	800f61e <TransmitCanPkt+0x19a>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 800f5aa:	4b61      	ldr	r3, [pc, #388]	; (800f730 <TransmitCanPkt+0x2ac>)
 800f5ac:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 800f5ae:	2346      	movs	r3, #70	; 0x46
 800f5b0:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800f5b2:	4b59      	ldr	r3, [pc, #356]	; (800f718 <TransmitCanPkt+0x294>)
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d102      	bne.n	800f5c0 <TransmitCanPkt+0x13c>
			{
				printf("\nSending V-Message 2-O\n");
 800f5ba:	485e      	ldr	r0, [pc, #376]	; (800f734 <TransmitCanPkt+0x2b0>)
 800f5bc:	f013 f86e 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f5c0:	8afb      	ldrh	r3, [r7, #22]
 800f5c2:	88fa      	ldrh	r2, [r7, #6]
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f000 f992 	bl	800f8f0 <sendCanPkts>
			break;
 800f5cc:	e028      	b.n	800f620 <TransmitCanPkt+0x19c>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 800f5ce:	4b4f      	ldr	r3, [pc, #316]	; (800f70c <TransmitCanPkt+0x288>)
 800f5d0:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 800f5d2:	2308      	movs	r3, #8
 800f5d4:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800f5d6:	4b50      	ldr	r3, [pc, #320]	; (800f718 <TransmitCanPkt+0x294>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d102      	bne.n	800f5e4 <TransmitCanPkt+0x160>
			{
				printf("\nSending Fault Injection data 2-O\n");
 800f5de:	4856      	ldr	r0, [pc, #344]	; (800f738 <TransmitCanPkt+0x2b4>)
 800f5e0:	f013 f85c 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f5e4:	8afb      	ldrh	r3, [r7, #22]
 800f5e6:	88fa      	ldrh	r2, [r7, #6]
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	f000 f980 	bl	800f8f0 <sendCanPkts>
			break;
 800f5f0:	e016      	b.n	800f620 <TransmitCanPkt+0x19c>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 800f5f2:	4b52      	ldr	r3, [pc, #328]	; (800f73c <TransmitCanPkt+0x2b8>)
 800f5f4:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(RELAYS_t);
 800f5f6:	2314      	movs	r3, #20
 800f5f8:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800f5fa:	4b47      	ldr	r3, [pc, #284]	; (800f718 <TransmitCanPkt+0x294>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d102      	bne.n	800f608 <TransmitCanPkt+0x184>
			{
				printf("Sending Relays-O\n");
 800f602:	484f      	ldr	r0, [pc, #316]	; (800f740 <TransmitCanPkt+0x2bc>)
 800f604:	f013 f84a 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f608:	8afb      	ldrh	r3, [r7, #22]
 800f60a:	88fa      	ldrh	r2, [r7, #6]
 800f60c:	4619      	mov	r1, r3
 800f60e:	68f8      	ldr	r0, [r7, #12]
 800f610:	f000 f96e 	bl	800f8f0 <sendCanPkts>
			break;
 800f614:	e004      	b.n	800f620 <TransmitCanPkt+0x19c>
		default:
			break;
 800f616:	bf00      	nop
 800f618:	e14c      	b.n	800f8b4 <TransmitCanPkt+0x430>
			break;
 800f61a:	bf00      	nop
 800f61c:	e14a      	b.n	800f8b4 <TransmitCanPkt+0x430>
			break;
 800f61e:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 800f620:	e148      	b.n	800f8b4 <TransmitCanPkt+0x430>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 800f622:	88fb      	ldrh	r3, [r7, #6]
 800f624:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f628:	f300 8141 	bgt.w	800f8ae <TransmitCanPkt+0x42a>
 800f62c:	f240 2207 	movw	r2, #519	; 0x207
 800f630:	4293      	cmp	r3, r2
 800f632:	da3d      	bge.n	800f6b0 <TransmitCanPkt+0x22c>
 800f634:	f240 2205 	movw	r2, #517	; 0x205
 800f638:	4293      	cmp	r3, r2
 800f63a:	f000 808d 	beq.w	800f758 <TransmitCanPkt+0x2d4>
 800f63e:	f240 2205 	movw	r2, #517	; 0x205
 800f642:	4293      	cmp	r3, r2
 800f644:	f300 8133 	bgt.w	800f8ae <TransmitCanPkt+0x42a>
 800f648:	f240 1219 	movw	r2, #281	; 0x119
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d009      	beq.n	800f664 <TransmitCanPkt+0x1e0>
 800f650:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f654:	f340 812b 	ble.w	800f8ae <TransmitCanPkt+0x42a>
 800f658:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	f200 8126 	bhi.w	800f8ae <TransmitCanPkt+0x42a>
 800f662:	e013      	b.n	800f68c <TransmitCanPkt+0x208>
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 800f664:	4b37      	ldr	r3, [pc, #220]	; (800f744 <TransmitCanPkt+0x2c0>)
 800f666:	60fb      	str	r3, [r7, #12]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 800f668:	4b36      	ldr	r3, [pc, #216]	; (800f744 <TransmitCanPkt+0x2c0>)
 800f66a:	881b      	ldrh	r3, [r3, #0]
 800f66c:	3302      	adds	r3, #2
 800f66e:	82fb      	strh	r3, [r7, #22]

			if(Debug_flag == 1)
 800f670:	4b29      	ldr	r3, [pc, #164]	; (800f718 <TransmitCanPkt+0x294>)
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b01      	cmp	r3, #1
 800f676:	d102      	bne.n	800f67e <TransmitCanPkt+0x1fa>
			{
				printf("Sending Signals 2 MIE\n");
 800f678:	4833      	ldr	r0, [pc, #204]	; (800f748 <TransmitCanPkt+0x2c4>)
 800f67a:	f013 f80f 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f67e:	8afb      	ldrh	r3, [r7, #22]
 800f680:	88fa      	ldrh	r2, [r7, #6]
 800f682:	4619      	mov	r1, r3
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 f933 	bl	800f8f0 <sendCanPkts>
			break;
 800f68a:	e073      	b.n	800f774 <TransmitCanPkt+0x2f0>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 800f68c:	4b2f      	ldr	r3, [pc, #188]	; (800f74c <TransmitCanPkt+0x2c8>)
 800f68e:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 800f690:	2304      	movs	r3, #4
 800f692:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800f694:	4b20      	ldr	r3, [pc, #128]	; (800f718 <TransmitCanPkt+0x294>)
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d102      	bne.n	800f6a2 <TransmitCanPkt+0x21e>
			{
				printf("Sending Signals 2 MIE\n");
 800f69c:	482a      	ldr	r0, [pc, #168]	; (800f748 <TransmitCanPkt+0x2c4>)
 800f69e:	f012 fffd 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f6a2:	8afb      	ldrh	r3, [r7, #22]
 800f6a4:	88fa      	ldrh	r2, [r7, #6]
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	f000 f921 	bl	800f8f0 <sendCanPkts>
			break;
 800f6ae:	e061      	b.n	800f774 <TransmitCanPkt+0x2f0>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 800f6b0:	4b27      	ldr	r3, [pc, #156]	; (800f750 <TransmitCanPkt+0x2cc>)
 800f6b2:	60fb      	str	r3, [r7, #12]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 800f6b4:	4b14      	ldr	r3, [pc, #80]	; (800f708 <TransmitCanPkt+0x284>)
 800f6b6:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f6ba:	f003 0307 	and.w	r3, r3, #7
 800f6be:	82fb      	strh	r3, [r7, #22]
			if (uc_size != 0)
 800f6c0:	8afb      	ldrh	r3, [r7, #22]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d007      	beq.n	800f6d6 <TransmitCanPkt+0x252>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 800f6c6:	4b10      	ldr	r3, [pc, #64]	; (800f708 <TransmitCanPkt+0x284>)
 800f6c8:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f6cc:	08db      	lsrs	r3, r3, #3
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	82fb      	strh	r3, [r7, #22]
 800f6d4:	e004      	b.n	800f6e0 <TransmitCanPkt+0x25c>
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 800f6d6:	4b0c      	ldr	r3, [pc, #48]	; (800f708 <TransmitCanPkt+0x284>)
 800f6d8:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f6dc:	08db      	lsrs	r3, r3, #3
 800f6de:	82fb      	strh	r3, [r7, #22]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 800f6e0:	4a1b      	ldr	r2, [pc, #108]	; (800f750 <TransmitCanPkt+0x2cc>)
 800f6e2:	8afb      	ldrh	r3, [r7, #22]
 800f6e4:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 800f6e6:	8afb      	ldrh	r3, [r7, #22]
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	82fb      	strh	r3, [r7, #22]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 800f6ec:	4b0a      	ldr	r3, [pc, #40]	; (800f718 <TransmitCanPkt+0x294>)
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d102      	bne.n	800f6fa <TransmitCanPkt+0x276>
			{
				printf("Sending Relays 2 Other\n");
 800f6f4:	4817      	ldr	r0, [pc, #92]	; (800f754 <TransmitCanPkt+0x2d0>)
 800f6f6:	f012 ffd1 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f6fa:	8afb      	ldrh	r3, [r7, #22]
 800f6fc:	88fa      	ldrh	r2, [r7, #6]
 800f6fe:	4619      	mov	r1, r3
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f000 f8f5 	bl	800f8f0 <sendCanPkts>
			break;
 800f706:	e035      	b.n	800f774 <TransmitCanPkt+0x2f0>
 800f708:	20000304 	.word	0x20000304
 800f70c:	2000195c 	.word	0x2000195c
 800f710:	08026864 	.word	0x08026864
 800f714:	200010e4 	.word	0x200010e4
 800f718:	20000645 	.word	0x20000645
 800f71c:	08026880 	.word	0x08026880
 800f720:	20001964 	.word	0x20001964
 800f724:	08026898 	.word	0x08026898
 800f728:	20001854 	.word	0x20001854
 800f72c:	080268a8 	.word	0x080268a8
 800f730:	20001884 	.word	0x20001884
 800f734:	080268b4 	.word	0x080268b4
 800f738:	080268cc 	.word	0x080268cc
 800f73c:	20002010 	.word	0x20002010
 800f740:	080268f0 	.word	0x080268f0
 800f744:	200034a4 	.word	0x200034a4
 800f748:	08026904 	.word	0x08026904
 800f74c:	2000347c 	.word	0x2000347c
 800f750:	200036a8 	.word	0x200036a8
 800f754:	0802691c 	.word	0x0802691c

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 800f758:	4b58      	ldr	r3, [pc, #352]	; (800f8bc <TransmitCanPkt+0x438>)
 800f75a:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 800f75c:	2308      	movs	r3, #8
 800f75e:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 800f760:	4857      	ldr	r0, [pc, #348]	; (800f8c0 <TransmitCanPkt+0x43c>)
 800f762:	f012 ff9b 	bl	802269c <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f766:	8afb      	ldrh	r3, [r7, #22]
 800f768:	88fa      	ldrh	r2, [r7, #6]
 800f76a:	4619      	mov	r1, r3
 800f76c:	68f8      	ldr	r0, [r7, #12]
 800f76e:	f000 f8bf 	bl	800f8f0 <sendCanPkts>
			break;
 800f772:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 800f774:	e09b      	b.n	800f8ae <TransmitCanPkt+0x42a>

	case MEDHA:
	{

		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 800f776:	88fb      	ldrh	r3, [r7, #6]
 800f778:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f77c:	f300 8099 	bgt.w	800f8b2 <TransmitCanPkt+0x42e>
 800f780:	f240 2207 	movw	r2, #519	; 0x207
 800f784:	4293      	cmp	r3, r2
 800f786:	da7e      	bge.n	800f886 <TransmitCanPkt+0x402>
 800f788:	f240 2205 	movw	r2, #517	; 0x205
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d06c      	beq.n	800f86a <TransmitCanPkt+0x3e6>
 800f790:	f240 2205 	movw	r2, #517	; 0x205
 800f794:	4293      	cmp	r3, r2
 800f796:	f300 808c 	bgt.w	800f8b2 <TransmitCanPkt+0x42e>
 800f79a:	f240 2202 	movw	r2, #514	; 0x202
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	f300 8087 	bgt.w	800f8b2 <TransmitCanPkt+0x42e>
 800f7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7a8:	dc3b      	bgt.n	800f822 <TransmitCanPkt+0x39e>
 800f7aa:	f240 1219 	movw	r2, #281	; 0x119
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d007      	beq.n	800f7c2 <TransmitCanPkt+0x33e>
 800f7b2:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f7b6:	dd7c      	ble.n	800f8b2 <TransmitCanPkt+0x42e>
 800f7b8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d878      	bhi.n	800f8b2 <TransmitCanPkt+0x42e>
 800f7c0:	e041      	b.n	800f846 <TransmitCanPkt+0x3c2>
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 800f7c2:	4b40      	ldr	r3, [pc, #256]	; (800f8c4 <TransmitCanPkt+0x440>)
 800f7c4:	60fb      	str	r3, [r7, #12]

			uint16_t Length =  EI_data.Medha_Prms_st.NoofRelays%8;
 800f7c6:	4b40      	ldr	r3, [pc, #256]	; (800f8c8 <TransmitCanPkt+0x444>)
 800f7c8:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800f7cc:	f003 0307 	and.w	r3, r3, #7
 800f7d0:	82bb      	strh	r3, [r7, #20]

			if(Length != 0)
 800f7d2:	8abb      	ldrh	r3, [r7, #20]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d007      	beq.n	800f7e8 <TransmitCanPkt+0x364>
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8) + 1;
 800f7d8:	4b3b      	ldr	r3, [pc, #236]	; (800f8c8 <TransmitCanPkt+0x444>)
 800f7da:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800f7de:	08db      	lsrs	r3, r3, #3
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	82bb      	strh	r3, [r7, #20]
 800f7e6:	e004      	b.n	800f7f2 <TransmitCanPkt+0x36e>
			}
			else
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8);
 800f7e8:	4b37      	ldr	r3, [pc, #220]	; (800f8c8 <TransmitCanPkt+0x444>)
 800f7ea:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800f7ee:	08db      	lsrs	r3, r3, #3
 800f7f0:	82bb      	strh	r3, [r7, #20]
			}

			Medha_Relay_Sts_st.ActualDataBytes =  Length;
 800f7f2:	4a34      	ldr	r2, [pc, #208]	; (800f8c4 <TransmitCanPkt+0x440>)
 800f7f4:	8abb      	ldrh	r3, [r7, #20]
 800f7f6:	8013      	strh	r3, [r2, #0]
			uc_size =(Length + sizeof(Length)); /* +2 is by Considering */
 800f7f8:	8abb      	ldrh	r3, [r7, #20]
 800f7fa:	3302      	adds	r3, #2
 800f7fc:	82fb      	strh	r3, [r7, #22]

			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f7fe:	8afb      	ldrh	r3, [r7, #22]
 800f800:	88fa      	ldrh	r2, [r7, #6]
 800f802:	4619      	mov	r1, r3
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f000 f873 	bl	800f8f0 <sendCanPkts>
			if(Debug_flag == 1)
 800f80a:	4b30      	ldr	r3, [pc, #192]	; (800f8cc <TransmitCanPkt+0x448>)
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d14b      	bne.n	800f8aa <TransmitCanPkt+0x426>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 800f812:	f005 fe9d 	bl	8015550 <HAL_GetTick>
 800f816:	4603      	mov	r3, r0
 800f818:	4619      	mov	r1, r3
 800f81a:	482d      	ldr	r0, [pc, #180]	; (800f8d0 <TransmitCanPkt+0x44c>)
 800f81c:	f012 fea2 	bl	8022564 <iprintf>
			}
			break;
 800f820:	e043      	b.n	800f8aa <TransmitCanPkt+0x426>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 800f822:	4b2c      	ldr	r3, [pc, #176]	; (800f8d4 <TransmitCanPkt+0x450>)
 800f824:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 800f826:	2308      	movs	r3, #8
 800f828:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800f82a:	4b28      	ldr	r3, [pc, #160]	; (800f8cc <TransmitCanPkt+0x448>)
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d102      	bne.n	800f838 <TransmitCanPkt+0x3b4>
			{
				printf("\nSending_2_O\n");
 800f832:	4829      	ldr	r0, [pc, #164]	; (800f8d8 <TransmitCanPkt+0x454>)
 800f834:	f012 ff32 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f838:	8afb      	ldrh	r3, [r7, #22]
 800f83a:	88fa      	ldrh	r2, [r7, #6]
 800f83c:	4619      	mov	r1, r3
 800f83e:	68f8      	ldr	r0, [r7, #12]
 800f840:	f000 f856 	bl	800f8f0 <sendCanPkts>
			break;
 800f844:	e032      	b.n	800f8ac <TransmitCanPkt+0x428>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800f846:	4b25      	ldr	r3, [pc, #148]	; (800f8dc <TransmitCanPkt+0x458>)
 800f848:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800f84a:	2316      	movs	r3, #22
 800f84c:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800f84e:	4b1f      	ldr	r3, [pc, #124]	; (800f8cc <TransmitCanPkt+0x448>)
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	2b01      	cmp	r3, #1
 800f854:	d102      	bne.n	800f85c <TransmitCanPkt+0x3d8>
			{
				printf("\nHealth 2 MIE\n");
 800f856:	4822      	ldr	r0, [pc, #136]	; (800f8e0 <TransmitCanPkt+0x45c>)
 800f858:	f012 ff20 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f85c:	8afb      	ldrh	r3, [r7, #22]
 800f85e:	88fa      	ldrh	r2, [r7, #6]
 800f860:	4619      	mov	r1, r3
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f000 f844 	bl	800f8f0 <sendCanPkts>
			break;
 800f868:	e020      	b.n	800f8ac <TransmitCanPkt+0x428>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 800f86a:	4b1e      	ldr	r3, [pc, #120]	; (800f8e4 <TransmitCanPkt+0x460>)
 800f86c:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 800f86e:	2304      	movs	r3, #4
 800f870:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 800f872:	4813      	ldr	r0, [pc, #76]	; (800f8c0 <TransmitCanPkt+0x43c>)
 800f874:	f012 ff12 	bl	802269c <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f878:	8afb      	ldrh	r3, [r7, #22]
 800f87a:	88fa      	ldrh	r2, [r7, #6]
 800f87c:	4619      	mov	r1, r3
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f000 f836 	bl	800f8f0 <sendCanPkts>
			break;
 800f884:	e012      	b.n	800f8ac <TransmitCanPkt+0x428>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 800f886:	4b18      	ldr	r3, [pc, #96]	; (800f8e8 <TransmitCanPkt+0x464>)
 800f888:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 800f88a:	2384      	movs	r3, #132	; 0x84
 800f88c:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 800f88e:	4b0f      	ldr	r3, [pc, #60]	; (800f8cc <TransmitCanPkt+0x448>)
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d102      	bne.n	800f89c <TransmitCanPkt+0x418>
			{
				printf("\nRelay Data 2-O\n");
 800f896:	4815      	ldr	r0, [pc, #84]	; (800f8ec <TransmitCanPkt+0x468>)
 800f898:	f012 ff00 	bl	802269c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f89c:	8afb      	ldrh	r3, [r7, #22]
 800f89e:	88fa      	ldrh	r2, [r7, #6]
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	68f8      	ldr	r0, [r7, #12]
 800f8a4:	f000 f824 	bl	800f8f0 <sendCanPkts>
			break;
 800f8a8:	e000      	b.n	800f8ac <TransmitCanPkt+0x428>
			break;
 800f8aa:	bf00      	nop
		}

		break;
 800f8ac:	e001      	b.n	800f8b2 <TransmitCanPkt+0x42e>
		break; /* case SIEMENS: break */
 800f8ae:	bf00      	nop
 800f8b0:	e000      	b.n	800f8b4 <TransmitCanPkt+0x430>
		break;
 800f8b2:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 800f8b4:	3718      	adds	r7, #24
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	20003474 	.word	0x20003474
 800f8c0:	080268cc 	.word	0x080268cc
 800f8c4:	200025c8 	.word	0x200025c8
 800f8c8:	20000304 	.word	0x20000304
 800f8cc:	20000645 	.word	0x20000645
 800f8d0:	08026934 	.word	0x08026934
 800f8d4:	2000260c 	.word	0x2000260c
 800f8d8:	08026958 	.word	0x08026958
 800f8dc:	20001964 	.word	0x20001964
 800f8e0:	08026898 	.word	0x08026898
 800f8e4:	20002608 	.word	0x20002608
 800f8e8:	20002624 	.word	0x20002624
 800f8ec:	08026968 	.word	0x08026968

0800f8f0 <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b088      	sub	sp, #32
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	60b9      	str	r1, [r7, #8]
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	61fb      	str	r3, [r7, #28]
 800f902:	2300      	movs	r3, #0
 800f904:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	617b      	str	r3, [r7, #20]
	while(j > 0)
 800f90a:	e019      	b.n	800f940 <sendCanPkts+0x50>
	{
		if(j < 7)
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	2b06      	cmp	r3, #6
 800f910:	dc07      	bgt.n	800f922 <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 800f912:	88f8      	ldrh	r0, [r7, #6]
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	1c5a      	adds	r2, r3, #1
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	6979      	ldr	r1, [r7, #20]
 800f91c:	f000 f818 	bl	800f950 <CAN_transmit>
 800f920:	e005      	b.n	800f92e <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 800f922:	88f8      	ldrh	r0, [r7, #6]
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	2208      	movs	r2, #8
 800f928:	6979      	ldr	r1, [r7, #20]
 800f92a:	f000 f811 	bl	800f950 <CAN_transmit>
		}
		cptr += 7;
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	3307      	adds	r3, #7
 800f932:	617b      	str	r3, [r7, #20]
		j-=7;
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	3b07      	subs	r3, #7
 800f938:	61fb      	str	r3, [r7, #28]
		seqNo++;
 800f93a:	69bb      	ldr	r3, [r7, #24]
 800f93c:	3301      	adds	r3, #1
 800f93e:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	2b00      	cmp	r3, #0
 800f944:	dce2      	bgt.n	800f90c <sendCanPkts+0x1c>
	}
}
 800f946:	bf00      	nop
 800f948:	bf00      	nop
 800f94a:	3720      	adds	r7, #32
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b088      	sub	sp, #32
 800f954:	af00      	add	r7, sp, #0
 800f956:	60f8      	str	r0, [r7, #12]
 800f958:	60b9      	str	r1, [r7, #8]
 800f95a:	607a      	str	r2, [r7, #4]
 800f95c:	603b      	str	r3, [r7, #0]
	char i=0;
 800f95e:	2300      	movs	r3, #0
 800f960:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 800f962:	f005 fdf5 	bl	8015550 <HAL_GetTick>
 800f966:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	b2da      	uxtb	r2, r3
 800f96c:	4b4d      	ldr	r3, [pc, #308]	; (800faa4 <CAN_transmit+0x154>)
 800f96e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 800f970:	2300      	movs	r3, #0
 800f972:	77fb      	strb	r3, [r7, #31]
 800f974:	e00a      	b.n	800f98c <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 800f976:	7ffb      	ldrb	r3, [r7, #31]
 800f978:	68ba      	ldr	r2, [r7, #8]
 800f97a:	441a      	add	r2, r3
 800f97c:	7ffb      	ldrb	r3, [r7, #31]
 800f97e:	3301      	adds	r3, #1
 800f980:	7811      	ldrb	r1, [r2, #0]
 800f982:	4a48      	ldr	r2, [pc, #288]	; (800faa4 <CAN_transmit+0x154>)
 800f984:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 800f986:	7ffb      	ldrb	r3, [r7, #31]
 800f988:	3301      	adds	r3, #1
 800f98a:	77fb      	strb	r3, [r7, #31]
 800f98c:	7ffa      	ldrb	r2, [r7, #31]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	3b01      	subs	r3, #1
 800f992:	429a      	cmp	r2, r3
 800f994:	dbef      	blt.n	800f976 <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f99c:	da3b      	bge.n	800fa16 <CAN_transmit+0xc6>
	{
		while(len!=0)
 800f99e:	e036      	b.n	800fa0e <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 800f9a0:	4b41      	ldr	r3, [pc, #260]	; (800faa8 <CAN_transmit+0x158>)
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	4a3f      	ldr	r2, [pc, #252]	; (800faa8 <CAN_transmit+0x158>)
 800f9aa:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 800f9ac:	4b3e      	ldr	r3, [pc, #248]	; (800faa8 <CAN_transmit+0x158>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	4a3c      	ldr	r2, [pc, #240]	; (800faa8 <CAN_transmit+0x158>)
 800f9b6:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 800f9bc:	4b3b      	ldr	r3, [pc, #236]	; (800faac <CAN_transmit+0x15c>)
 800f9be:	4a39      	ldr	r2, [pc, #228]	; (800faa4 <CAN_transmit+0x154>)
 800f9c0:	4939      	ldr	r1, [pc, #228]	; (800faa8 <CAN_transmit+0x158>)
 800f9c2:	483b      	ldr	r0, [pc, #236]	; (800fab0 <CAN_transmit+0x160>)
 800f9c4:	f006 f86a 	bl	8015a9c <HAL_CAN_AddTxMessage>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	4b39      	ldr	r3, [pc, #228]	; (800fab4 <CAN_transmit+0x164>)
 800f9ce:	701a      	strb	r2, [r3, #0]
 800f9d0:	4b38      	ldr	r3, [pc, #224]	; (800fab4 <CAN_transmit+0x164>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00d      	beq.n	800f9f4 <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 800f9d8:	4837      	ldr	r0, [pc, #220]	; (800fab8 <CAN_transmit+0x168>)
 800f9da:	f012 fe5f 	bl	802269c <puts>
				return;
 800f9de:	e05e      	b.n	800fa9e <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800f9e0:	69b8      	ldr	r0, [r7, #24]
 800f9e2:	f7fe ffd3 	bl	800e98c <HAL_Elaps_Ticks>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b64      	cmp	r3, #100	; 0x64
 800f9ea:	d903      	bls.n	800f9f4 <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 800f9ec:	4832      	ldr	r0, [pc, #200]	; (800fab8 <CAN_transmit+0x168>)
 800f9ee:	f012 fe55 	bl	802269c <puts>
					return;
 800f9f2:	e054      	b.n	800fa9e <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 800f9f4:	4b2d      	ldr	r3, [pc, #180]	; (800faac <CAN_transmit+0x15c>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	482d      	ldr	r0, [pc, #180]	; (800fab0 <CAN_transmit+0x160>)
 800f9fc:	f006 f91e 	bl	8015c3c <HAL_CAN_IsTxMessagePending>
 800fa00:	4603      	mov	r3, r0
 800fa02:	75bb      	strb	r3, [r7, #22]
 800fa04:	7dbb      	ldrb	r3, [r7, #22]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1ea      	bne.n	800f9e0 <CAN_transmit+0x90>
				}
			}

			len=0;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d1c5      	bne.n	800f9a0 <CAN_transmit+0x50>
 800fa14:	e043      	b.n	800fa9e <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800fa16:	4929      	ldr	r1, [pc, #164]	; (800fabc <CAN_transmit+0x16c>)
 800fa18:	4829      	ldr	r0, [pc, #164]	; (800fac0 <CAN_transmit+0x170>)
 800fa1a:	f7f0 fc11 	bl	8000240 <strcmp>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d03b      	beq.n	800fa9c <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 800fa24:	e036      	b.n	800fa94 <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 800fa26:	4b27      	ldr	r3, [pc, #156]	; (800fac4 <CAN_transmit+0x174>)
 800fa28:	2200      	movs	r2, #0
 800fa2a:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	4a25      	ldr	r2, [pc, #148]	; (800fac4 <CAN_transmit+0x174>)
 800fa30:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 800fa32:	4b24      	ldr	r3, [pc, #144]	; (800fac4 <CAN_transmit+0x174>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4a22      	ldr	r2, [pc, #136]	; (800fac4 <CAN_transmit+0x174>)
 800fa3c:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 800fa42:	4b21      	ldr	r3, [pc, #132]	; (800fac8 <CAN_transmit+0x178>)
 800fa44:	4a17      	ldr	r2, [pc, #92]	; (800faa4 <CAN_transmit+0x154>)
 800fa46:	491f      	ldr	r1, [pc, #124]	; (800fac4 <CAN_transmit+0x174>)
 800fa48:	4820      	ldr	r0, [pc, #128]	; (800facc <CAN_transmit+0x17c>)
 800fa4a:	f006 f827 	bl	8015a9c <HAL_CAN_AddTxMessage>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	461a      	mov	r2, r3
 800fa52:	4b18      	ldr	r3, [pc, #96]	; (800fab4 <CAN_transmit+0x164>)
 800fa54:	701a      	strb	r2, [r3, #0]
 800fa56:	4b17      	ldr	r3, [pc, #92]	; (800fab4 <CAN_transmit+0x164>)
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00d      	beq.n	800fa7a <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 800fa5e:	481c      	ldr	r0, [pc, #112]	; (800fad0 <CAN_transmit+0x180>)
 800fa60:	f012 fe1c 	bl	802269c <puts>
				return;
 800fa64:	e01b      	b.n	800fa9e <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800fa66:	69b8      	ldr	r0, [r7, #24]
 800fa68:	f7fe ff90 	bl	800e98c <HAL_Elaps_Ticks>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b64      	cmp	r3, #100	; 0x64
 800fa70:	d903      	bls.n	800fa7a <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 800fa72:	4817      	ldr	r0, [pc, #92]	; (800fad0 <CAN_transmit+0x180>)
 800fa74:	f012 fe12 	bl	802269c <puts>
					return;
 800fa78:	e011      	b.n	800fa9e <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 800fa7a:	4b13      	ldr	r3, [pc, #76]	; (800fac8 <CAN_transmit+0x178>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	4619      	mov	r1, r3
 800fa80:	4812      	ldr	r0, [pc, #72]	; (800facc <CAN_transmit+0x17c>)
 800fa82:	f006 f8db 	bl	8015c3c <HAL_CAN_IsTxMessagePending>
 800fa86:	4603      	mov	r3, r0
 800fa88:	75fb      	strb	r3, [r7, #23]
 800fa8a:	7dfb      	ldrb	r3, [r7, #23]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d1ea      	bne.n	800fa66 <CAN_transmit+0x116>
				}
			}
			len=0;
 800fa90:	2300      	movs	r3, #0
 800fa92:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d1c5      	bne.n	800fa26 <CAN_transmit+0xd6>
 800fa9a:	e000      	b.n	800fa9e <CAN_transmit+0x14e>
			return;
 800fa9c:	bf00      	nop
		}
	}
}
 800fa9e:	3720      	adds	r7, #32
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	20009adc 	.word	0x20009adc
 800faa8:	20009a5c 	.word	0x20009a5c
 800faac:	20009a8c 	.word	0x20009a8c
 800fab0:	20009ae8 	.word	0x20009ae8
 800fab4:	20009ae4 	.word	0x20009ae4
 800fab8:	08026978 	.word	0x08026978
 800fabc:	08026988 	.word	0x08026988
 800fac0:	20000305 	.word	0x20000305
 800fac4:	20009a74 	.word	0x20009a74
 800fac8:	20009a90 	.word	0x20009a90
 800facc:	20009b4c 	.word	0x20009b4c
 800fad0:	08026994 	.word	0x08026994

0800fad4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a3e      	ldr	r2, [pc, #248]	; (800fbdc <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d175      	bne.n	800fbd2 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 800fae6:	4b3e      	ldr	r3, [pc, #248]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fae8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800faec:	881b      	ldrh	r3, [r3, #0]
 800faee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800faf2:	d104      	bne.n	800fafe <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 800faf4:	4b3a      	ldr	r3, [pc, #232]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800faf6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fafa:	2200      	movs	r2, #0
 800fafc:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 800fafe:	4b39      	ldr	r3, [pc, #228]	; (800fbe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800fb00:	4a39      	ldr	r2, [pc, #228]	; (800fbe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fb02:	2100      	movs	r1, #0
 800fb04:	4839      	ldr	r0, [pc, #228]	; (800fbec <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800fb06:	f006 f8bd 	bl	8015c84 <HAL_CAN_GetRxMessage>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d001      	beq.n	800fb14 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 800fb10:	f003 ff92 	bl	8013a38 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 800fb14:	4b32      	ldr	r3, [pc, #200]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb1a:	881b      	ldrh	r3, [r3, #0]
 800fb1c:	4a30      	ldr	r2, [pc, #192]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb1e:	011b      	lsls	r3, r3, #4
 800fb20:	4413      	add	r3, r2
 800fb22:	330f      	adds	r3, #15
 800fb24:	2203      	movs	r2, #3
 800fb26:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 800fb28:	4b2f      	ldr	r3, [pc, #188]	; (800fbe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fb2a:	691a      	ldr	r2, [r3, #16]
 800fb2c:	4b2c      	ldr	r3, [pc, #176]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	b2d1      	uxtb	r1, r2
 800fb36:	4a2a      	ldr	r2, [pc, #168]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb38:	011b      	lsls	r3, r3, #4
 800fb3a:	4413      	add	r3, r2
 800fb3c:	330c      	adds	r3, #12
 800fb3e:	460a      	mov	r2, r1
 800fb40:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 800fb42:	4b29      	ldr	r3, [pc, #164]	; (800fbe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fb44:	689a      	ldr	r2, [r3, #8]
 800fb46:	4b26      	ldr	r3, [pc, #152]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb4c:	881b      	ldrh	r3, [r3, #0]
 800fb4e:	b2d1      	uxtb	r1, r2
 800fb50:	4a23      	ldr	r2, [pc, #140]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb52:	011b      	lsls	r3, r3, #4
 800fb54:	4413      	add	r3, r2
 800fb56:	330d      	adds	r3, #13
 800fb58:	460a      	mov	r2, r1
 800fb5a:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 800fb5c:	4b22      	ldr	r3, [pc, #136]	; (800fbe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fb5e:	68da      	ldr	r2, [r3, #12]
 800fb60:	4b1f      	ldr	r3, [pc, #124]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	b2d1      	uxtb	r1, r2
 800fb6a:	4a1d      	ldr	r2, [pc, #116]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb6c:	011b      	lsls	r3, r3, #4
 800fb6e:	4413      	add	r3, r2
 800fb70:	330e      	adds	r3, #14
 800fb72:	460a      	mov	r2, r1
 800fb74:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 800fb76:	4b1a      	ldr	r3, [pc, #104]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	4b19      	ldr	r3, [pc, #100]	; (800fbe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	4916      	ldr	r1, [pc, #88]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb86:	0103      	lsls	r3, r0, #4
 800fb88:	440b      	add	r3, r1
 800fb8a:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 800fb8c:	4b14      	ldr	r3, [pc, #80]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb8e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb92:	881b      	ldrh	r3, [r3, #0]
 800fb94:	4a12      	ldr	r2, [pc, #72]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fb96:	011b      	lsls	r3, r3, #4
 800fb98:	4413      	add	r3, r2
 800fb9a:	330e      	adds	r3, #14
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d117      	bne.n	800fbd2 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 800fba2:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fba4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	011b      	lsls	r3, r3, #4
 800fbac:	4a0c      	ldr	r2, [pc, #48]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fbae:	4413      	add	r3, r2
 800fbb0:	3304      	adds	r3, #4
 800fbb2:	490c      	ldr	r1, [pc, #48]	; (800fbe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	cb03      	ldmia	r3!, {r0, r1}
 800fbba:	6010      	str	r0, [r2, #0]
 800fbbc:	6051      	str	r1, [r2, #4]
			canRead.In++;
 800fbbe:	4b08      	ldr	r3, [pc, #32]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fbc0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fbc4:	881b      	ldrh	r3, [r3, #0]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	4b05      	ldr	r3, [pc, #20]	; (800fbe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fbcc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fbd0:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800fbd2:	bf00      	nop
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	40003400 	.word	0x40003400
 800fbe0:	20005a58 	.word	0x20005a58
 800fbe4:	20009ad4 	.word	0x20009ad4
 800fbe8:	20009ab0 	.word	0x20009ab0
 800fbec:	20009b4c 	.word	0x20009b4c

0800fbf0 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 800fbf8:	4b42      	ldr	r3, [pc, #264]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fbfa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc04:	d104      	bne.n	800fc10 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 800fc06:	4b3f      	ldr	r3, [pc, #252]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 800fc10:	4b3d      	ldr	r3, [pc, #244]	; (800fd08 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800fc12:	4a3e      	ldr	r2, [pc, #248]	; (800fd0c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fc14:	2101      	movs	r1, #1
 800fc16:	483e      	ldr	r0, [pc, #248]	; (800fd10 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 800fc18:	f006 f834 	bl	8015c84 <HAL_CAN_GetRxMessage>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	461a      	mov	r2, r3
 800fc20:	4b3c      	ldr	r3, [pc, #240]	; (800fd14 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fc22:	701a      	strb	r2, [r3, #0]
 800fc24:	4b3b      	ldr	r3, [pc, #236]	; (800fd14 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d007      	beq.n	800fc3c <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 800fc2c:	4b39      	ldr	r3, [pc, #228]	; (800fd14 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	4619      	mov	r1, r3
 800fc32:	4839      	ldr	r0, [pc, #228]	; (800fd18 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800fc34:	f012 fc96 	bl	8022564 <iprintf>
		Error_Handler();
 800fc38:	f003 fefe 	bl	8013a38 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 800fc3c:	4b31      	ldr	r3, [pc, #196]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc42:	881b      	ldrh	r3, [r3, #0]
 800fc44:	4a2f      	ldr	r2, [pc, #188]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc46:	011b      	lsls	r3, r3, #4
 800fc48:	4413      	add	r3, r2
 800fc4a:	330f      	adds	r3, #15
 800fc4c:	2202      	movs	r2, #2
 800fc4e:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 800fc50:	4b2e      	ldr	r3, [pc, #184]	; (800fd0c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fc52:	691a      	ldr	r2, [r3, #16]
 800fc54:	4b2b      	ldr	r3, [pc, #172]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc56:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc5a:	881b      	ldrh	r3, [r3, #0]
 800fc5c:	b2d1      	uxtb	r1, r2
 800fc5e:	4a29      	ldr	r2, [pc, #164]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc60:	011b      	lsls	r3, r3, #4
 800fc62:	4413      	add	r3, r2
 800fc64:	330c      	adds	r3, #12
 800fc66:	460a      	mov	r2, r1
 800fc68:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 800fc6a:	4b28      	ldr	r3, [pc, #160]	; (800fd0c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fc6c:	689a      	ldr	r2, [r3, #8]
 800fc6e:	4b25      	ldr	r3, [pc, #148]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc74:	881b      	ldrh	r3, [r3, #0]
 800fc76:	b2d1      	uxtb	r1, r2
 800fc78:	4a22      	ldr	r2, [pc, #136]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc7a:	011b      	lsls	r3, r3, #4
 800fc7c:	4413      	add	r3, r2
 800fc7e:	330d      	adds	r3, #13
 800fc80:	460a      	mov	r2, r1
 800fc82:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 800fc84:	4b21      	ldr	r3, [pc, #132]	; (800fd0c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fc86:	68da      	ldr	r2, [r3, #12]
 800fc88:	4b1e      	ldr	r3, [pc, #120]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc8a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc8e:	881b      	ldrh	r3, [r3, #0]
 800fc90:	b2d1      	uxtb	r1, r2
 800fc92:	4a1c      	ldr	r2, [pc, #112]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fc94:	011b      	lsls	r3, r3, #4
 800fc96:	4413      	add	r3, r2
 800fc98:	330e      	adds	r3, #14
 800fc9a:	460a      	mov	r2, r1
 800fc9c:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 800fc9e:	4b19      	ldr	r3, [pc, #100]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fca0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	4618      	mov	r0, r3
 800fca8:	4b18      	ldr	r3, [pc, #96]	; (800fd0c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fcaa:	681a      	ldr	r2, [r3, #0]
 800fcac:	4915      	ldr	r1, [pc, #84]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fcae:	0103      	lsls	r3, r0, #4
 800fcb0:	440b      	add	r3, r1
 800fcb2:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 800fcb4:	4b13      	ldr	r3, [pc, #76]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fcb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcba:	881b      	ldrh	r3, [r3, #0]
 800fcbc:	4a11      	ldr	r2, [pc, #68]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fcbe:	011b      	lsls	r3, r3, #4
 800fcc0:	4413      	add	r3, r2
 800fcc2:	330e      	adds	r3, #14
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d117      	bne.n	800fcfa <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 800fcca:	4b0e      	ldr	r3, [pc, #56]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fccc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcd0:	881b      	ldrh	r3, [r3, #0]
 800fcd2:	011b      	lsls	r3, r3, #4
 800fcd4:	4a0b      	ldr	r2, [pc, #44]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fcd6:	4413      	add	r3, r2
 800fcd8:	3304      	adds	r3, #4
 800fcda:	490b      	ldr	r1, [pc, #44]	; (800fd08 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800fcdc:	461a      	mov	r2, r3
 800fcde:	460b      	mov	r3, r1
 800fce0:	cb03      	ldmia	r3!, {r0, r1}
 800fce2:	6010      	str	r0, [r2, #0]
 800fce4:	6051      	str	r1, [r2, #4]
		canRead.In++;
 800fce6:	4b07      	ldr	r3, [pc, #28]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fce8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcec:	881b      	ldrh	r3, [r3, #0]
 800fcee:	3301      	adds	r3, #1
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	4b04      	ldr	r3, [pc, #16]	; (800fd04 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fcf4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcf8:	801a      	strh	r2, [r3, #0]
	}
}
 800fcfa:	bf00      	nop
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	20005a58 	.word	0x20005a58
 800fd08:	20009acc 	.word	0x20009acc
 800fd0c:	20009a94 	.word	0x20009a94
 800fd10:	20009ae8 	.word	0x20009ae8
 800fd14:	20009ae4 	.word	0x20009ae4
 800fd18:	080269a4 	.word	0x080269a4

0800fd1c <canDataReady>:


unsigned char canDataReady()
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 800fd22:	2300      	movs	r3, #0
 800fd24:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 800fd26:	4b27      	ldr	r3, [pc, #156]	; (800fdc4 <canDataReady+0xa8>)
 800fd28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd2c:	881a      	ldrh	r2, [r3, #0]
 800fd2e:	4b25      	ldr	r3, [pc, #148]	; (800fdc4 <canDataReady+0xa8>)
 800fd30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd34:	885b      	ldrh	r3, [r3, #2]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d101      	bne.n	800fd3e <canDataReady+0x22>
	{
		return 0;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	e03e      	b.n	800fdbc <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800fd3e:	4b21      	ldr	r3, [pc, #132]	; (800fdc4 <canDataReady+0xa8>)
 800fd40:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd44:	885b      	ldrh	r3, [r3, #2]
 800fd46:	3301      	adds	r3, #1
 800fd48:	607b      	str	r3, [r7, #4]
 800fd4a:	e02e      	b.n	800fdaa <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 800fd4c:	4b1d      	ldr	r3, [pc, #116]	; (800fdc4 <canDataReady+0xa8>)
 800fd4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd52:	885b      	ldrh	r3, [r3, #2]
 800fd54:	011b      	lsls	r3, r3, #4
 800fd56:	4a1b      	ldr	r2, [pc, #108]	; (800fdc4 <canDataReady+0xa8>)
 800fd58:	1898      	adds	r0, r3, r2
 800fd5a:	4b1a      	ldr	r3, [pc, #104]	; (800fdc4 <canDataReady+0xa8>)
 800fd5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	011b      	lsls	r3, r3, #4
 800fd64:	4a17      	ldr	r2, [pc, #92]	; (800fdc4 <canDataReady+0xa8>)
 800fd66:	4413      	add	r3, r2
 800fd68:	2210      	movs	r2, #16
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	f012 fada 	bl	8022324 <memcmp>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d116      	bne.n	800fda4 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 800fd76:	4b13      	ldr	r3, [pc, #76]	; (800fdc4 <canDataReady+0xa8>)
 800fd78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd7c:	885b      	ldrh	r3, [r3, #2]
 800fd7e:	011b      	lsls	r3, r3, #4
 800fd80:	4a10      	ldr	r2, [pc, #64]	; (800fdc4 <canDataReady+0xa8>)
 800fd82:	4413      	add	r3, r2
 800fd84:	2210      	movs	r2, #16
 800fd86:	2100      	movs	r1, #0
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f012 fb03 	bl	8022394 <memset>
			canRead.Out++;
 800fd8e:	4b0d      	ldr	r3, [pc, #52]	; (800fdc4 <canDataReady+0xa8>)
 800fd90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd94:	885b      	ldrh	r3, [r3, #2]
 800fd96:	3301      	adds	r3, #1
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	4b0a      	ldr	r3, [pc, #40]	; (800fdc4 <canDataReady+0xa8>)
 800fd9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fda0:	805a      	strh	r2, [r3, #2]
			break;
 800fda2:	e00a      	b.n	800fdba <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	3301      	adds	r3, #1
 800fda8:	607b      	str	r3, [r7, #4]
 800fdaa:	4b06      	ldr	r3, [pc, #24]	; (800fdc4 <canDataReady+0xa8>)
 800fdac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fdb0:	881b      	ldrh	r3, [r3, #0]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d3c8      	bcc.n	800fd4c <canDataReady+0x30>
		}
	}
	return 1;
 800fdba:	2301      	movs	r3, #1
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	20005a58 	.word	0x20005a58

0800fdc8 <readCanToStructs>:

void readCanToStructs(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b08e      	sub	sp, #56	; 0x38
 800fdcc:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fdda:	2300      	movs	r3, #0
 800fddc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 800fde0:	2300      	movs	r3, #0
 800fde2:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 800fde4:	4bc0      	ldr	r3, [pc, #768]	; (80100e8 <readCanToStructs+0x320>)
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	f002 86ab 	beq.w	8012b44 <readCanToStructs+0x2d7c>
 800fdee:	2b03      	cmp	r3, #3
 800fdf0:	f302 86af 	bgt.w	8012b52 <readCanToStructs+0x2d8a>
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d004      	beq.n	800fe02 <readCanToStructs+0x3a>
 800fdf8:	2b02      	cmp	r3, #2
 800fdfa:	f001 87f4 	beq.w	8011de6 <readCanToStructs+0x201e>
		/* __________ MEDHA _________ */
	}
	break;

	default:
		break;
 800fdfe:	f002 bea8 	b.w	8012b52 <readCanToStructs+0x2d8a>
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800fe02:	4bba      	ldr	r3, [pc, #744]	; (80100ec <readCanToStructs+0x324>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	09db      	lsrs	r3, r3, #7
 800fe08:	f003 0301 	and.w	r3, r3, #1
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	f042 86a2 	bne.w	8012b56 <readCanToStructs+0x2d8e>
		while(canDataReady())
 800fe12:	f001 b92f 	b.w	8011074 <readCanToStructs+0x12ac>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 800fe16:	4bb6      	ldr	r3, [pc, #728]	; (80100f0 <readCanToStructs+0x328>)
 800fe18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe1c:	885b      	ldrh	r3, [r3, #2]
 800fe1e:	4ab4      	ldr	r2, [pc, #720]	; (80100f0 <readCanToStructs+0x328>)
 800fe20:	011b      	lsls	r3, r3, #4
 800fe22:	4413      	add	r3, r2
 800fe24:	330f      	adds	r3, #15
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 800fe2e:	4bb0      	ldr	r3, [pc, #704]	; (80100f0 <readCanToStructs+0x328>)
 800fe30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe34:	885b      	ldrh	r3, [r3, #2]
 800fe36:	4aae      	ldr	r2, [pc, #696]	; (80100f0 <readCanToStructs+0x328>)
 800fe38:	011b      	lsls	r3, r3, #4
 800fe3a:	4413      	add	r3, r2
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fe42:	f201 80f4 	bhi.w	801102e <readCanToStructs+0x1266>
 800fe46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe4a:	d80a      	bhi.n	800fe62 <readCanToStructs+0x9a>
 800fe4c:	f240 1203 	movw	r2, #259	; 0x103
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d01f      	beq.n	800fe94 <readCanToStructs+0xcc>
 800fe54:	f240 1209 	movw	r2, #265	; 0x109
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	f000 80f1 	beq.w	8010040 <readCanToStructs+0x278>
				break;
 800fe5e:	f001 b8e6 	b.w	801102e <readCanToStructs+0x1266>
 800fe62:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800fe66:	2b07      	cmp	r3, #7
 800fe68:	f201 80e1 	bhi.w	801102e <readCanToStructs+0x1266>
 800fe6c:	a201      	add	r2, pc, #4	; (adr r2, 800fe74 <readCanToStructs+0xac>)
 800fe6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe72:	bf00      	nop
 800fe74:	08010215 	.word	0x08010215
 800fe78:	0801041d 	.word	0x0801041d
 800fe7c:	080105f5 	.word	0x080105f5
 800fe80:	0801080f 	.word	0x0801080f
 800fe84:	08010a25 	.word	0x08010a25
 800fe88:	0801102f 	.word	0x0801102f
 800fe8c:	08010bb9 	.word	0x08010bb9
 800fe90:	08010df3 	.word	0x08010df3
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800fe94:	4b97      	ldr	r3, [pc, #604]	; (80100f4 <readCanToStructs+0x32c>)
 800fe96:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800fe98:	4b95      	ldr	r3, [pc, #596]	; (80100f0 <readCanToStructs+0x328>)
 800fe9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe9e:	885b      	ldrh	r3, [r3, #2]
 800fea0:	4a93      	ldr	r2, [pc, #588]	; (80100f0 <readCanToStructs+0x328>)
 800fea2:	011b      	lsls	r3, r3, #4
 800fea4:	4413      	add	r3, r2
 800fea6:	3304      	adds	r3, #4
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800feae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d110      	bne.n	800fed8 <readCanToStructs+0x110>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800feb6:	2206      	movs	r2, #6
 800feb8:	2100      	movs	r1, #0
 800feba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800febc:	f012 fa6a 	bl	8022394 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800fec0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fec4:	4a8c      	ldr	r2, [pc, #560]	; (80100f8 <readCanToStructs+0x330>)
 800fec6:	f240 4112 	movw	r1, #1042	; 0x412
 800feca:	fb01 f303 	mul.w	r3, r1, r3
 800fece:	4413      	add	r3, r2
 800fed0:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fed4:	2200      	movs	r2, #0
 800fed6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 800fed8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fedc:	4a86      	ldr	r2, [pc, #536]	; (80100f8 <readCanToStructs+0x330>)
 800fede:	f240 4112 	movw	r1, #1042	; 0x412
 800fee2:	fb01 f303 	mul.w	r3, r1, r3
 800fee6:	4413      	add	r3, r2
 800fee8:	f203 2307 	addw	r3, r3, #519	; 0x207
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d015      	beq.n	800ff22 <readCanToStructs+0x15a>
					printf("GPS Packet Seq no MisMatch\n");
 800fef6:	4881      	ldr	r0, [pc, #516]	; (80100fc <readCanToStructs+0x334>)
 800fef8:	f012 fbd0 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fefc:	2206      	movs	r2, #6
 800fefe:	2100      	movs	r1, #0
 800ff00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff02:	f012 fa47 	bl	8022394 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800ff06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff0a:	4a7b      	ldr	r2, [pc, #492]	; (80100f8 <readCanToStructs+0x330>)
 800ff0c:	f240 4112 	movw	r1, #1042	; 0x412
 800ff10:	fb01 f303 	mul.w	r3, r1, r3
 800ff14:	4413      	add	r3, r2
 800ff16:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	701a      	strb	r2, [r3, #0]
					break;
 800ff1e:	f001 b887 	b.w	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800ff22:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ff26:	4613      	mov	r3, r2
 800ff28:	00db      	lsls	r3, r3, #3
 800ff2a:	1a9b      	subs	r3, r3, r2
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff30:	4413      	add	r3, r2
 800ff32:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ff34:	2301      	movs	r3, #1
 800ff36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ff3a:	e016      	b.n	800ff6a <readCanToStructs+0x1a2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800ff3c:	4b6c      	ldr	r3, [pc, #432]	; (80100f0 <readCanToStructs+0x328>)
 800ff3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff42:	885b      	ldrh	r3, [r3, #2]
 800ff44:	461a      	mov	r2, r3
 800ff46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff4a:	4969      	ldr	r1, [pc, #420]	; (80100f0 <readCanToStructs+0x328>)
 800ff4c:	0112      	lsls	r2, r2, #4
 800ff4e:	440a      	add	r2, r1
 800ff50:	4413      	add	r3, r2
 800ff52:	3304      	adds	r3, #4
 800ff54:	781a      	ldrb	r2, [r3, #0]
 800ff56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff58:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ff60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff64:	3301      	adds	r3, #1
 800ff66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ff6a:	4b61      	ldr	r3, [pc, #388]	; (80100f0 <readCanToStructs+0x328>)
 800ff6c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff70:	885b      	ldrh	r3, [r3, #2]
 800ff72:	4a5f      	ldr	r2, [pc, #380]	; (80100f0 <readCanToStructs+0x328>)
 800ff74:	011b      	lsls	r3, r3, #4
 800ff76:	4413      	add	r3, r2
 800ff78:	330c      	adds	r3, #12
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d3db      	bcc.n	800ff3c <readCanToStructs+0x174>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800ff84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff88:	4a5b      	ldr	r2, [pc, #364]	; (80100f8 <readCanToStructs+0x330>)
 800ff8a:	f240 4112 	movw	r1, #1042	; 0x412
 800ff8e:	fb01 f303 	mul.w	r3, r1, r3
 800ff92:	4413      	add	r3, r2
 800ff94:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	00db      	lsls	r3, r3, #3
 800ffa0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800ffa2:	4b53      	ldr	r3, [pc, #332]	; (80100f0 <readCanToStructs+0x328>)
 800ffa4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ffa8:	885b      	ldrh	r3, [r3, #2]
 800ffaa:	4951      	ldr	r1, [pc, #324]	; (80100f0 <readCanToStructs+0x328>)
 800ffac:	011b      	lsls	r3, r3, #4
 800ffae:	440b      	add	r3, r1
 800ffb0:	330c      	adds	r3, #12
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	3b01      	subs	r3, #1
 800ffb6:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800ffb8:	2b05      	cmp	r3, #5
 800ffba:	d91c      	bls.n	800fff6 <readCanToStructs+0x22e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800ffbc:	4b50      	ldr	r3, [pc, #320]	; (8010100 <readCanToStructs+0x338>)
 800ffbe:	4a4d      	ldr	r2, [pc, #308]	; (80100f4 <readCanToStructs+0x32c>)
 800ffc0:	6811      	ldr	r1, [r2, #0]
 800ffc2:	6019      	str	r1, [r3, #0]
 800ffc4:	8892      	ldrh	r2, [r2, #4]
 800ffc6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800ffc8:	4b4e      	ldr	r3, [pc, #312]	; (8010104 <readCanToStructs+0x33c>)
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d102      	bne.n	800ffd6 <readCanToStructs+0x20e>
						printf("GPS_PACKET_RECEIVED\n");
 800ffd0:	484d      	ldr	r0, [pc, #308]	; (8010108 <readCanToStructs+0x340>)
 800ffd2:	f012 fb63 	bl	802269c <puts>
					Write_RTC();
 800ffd6:	f7fa ffed 	bl	800afb4 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800ffda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffde:	4a46      	ldr	r2, [pc, #280]	; (80100f8 <readCanToStructs+0x330>)
 800ffe0:	f240 4112 	movw	r1, #1042	; 0x412
 800ffe4:	fb01 f303 	mul.w	r3, r1, r3
 800ffe8:	4413      	add	r3, r2
 800ffea:	f203 2307 	addw	r3, r3, #519	; 0x207
 800ffee:	2200      	movs	r2, #0
 800fff0:	701a      	strb	r2, [r3, #0]
				break;
 800fff2:	f001 b81d 	b.w	8011030 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 800fff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fffa:	4a3f      	ldr	r2, [pc, #252]	; (80100f8 <readCanToStructs+0x330>)
 800fffc:	f240 4112 	movw	r1, #1042	; 0x412
 8010000:	fb01 f303 	mul.w	r3, r1, r3
 8010004:	4413      	add	r3, r2
 8010006:	f203 2306 	addw	r3, r3, #518	; 0x206
 801000a:	2201      	movs	r2, #1
 801000c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801000e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010012:	4939      	ldr	r1, [pc, #228]	; (80100f8 <readCanToStructs+0x330>)
 8010014:	f240 4212 	movw	r2, #1042	; 0x412
 8010018:	fb03 f202 	mul.w	r2, r3, r2
 801001c:	440a      	add	r2, r1
 801001e:	f202 2207 	addw	r2, r2, #519	; 0x207
 8010022:	7812      	ldrb	r2, [r2, #0]
 8010024:	3201      	adds	r2, #1
 8010026:	b2d0      	uxtb	r0, r2
 8010028:	4a33      	ldr	r2, [pc, #204]	; (80100f8 <readCanToStructs+0x330>)
 801002a:	f240 4112 	movw	r1, #1042	; 0x412
 801002e:	fb01 f303 	mul.w	r3, r1, r3
 8010032:	4413      	add	r3, r2
 8010034:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010038:	4602      	mov	r2, r0
 801003a:	701a      	strb	r2, [r3, #0]
				break;
 801003c:	f000 bff8 	b.w	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010040:	4b2c      	ldr	r3, [pc, #176]	; (80100f4 <readCanToStructs+0x32c>)
 8010042:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010044:	4b2a      	ldr	r3, [pc, #168]	; (80100f0 <readCanToStructs+0x328>)
 8010046:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801004a:	885b      	ldrh	r3, [r3, #2]
 801004c:	4a28      	ldr	r2, [pc, #160]	; (80100f0 <readCanToStructs+0x328>)
 801004e:	011b      	lsls	r3, r3, #4
 8010050:	4413      	add	r3, r2
 8010052:	3304      	adds	r3, #4
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801005a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801005e:	2b00      	cmp	r3, #0
 8010060:	d110      	bne.n	8010084 <readCanToStructs+0x2bc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010062:	2206      	movs	r2, #6
 8010064:	2100      	movs	r1, #0
 8010066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010068:	f012 f994 	bl	8022394 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801006c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010070:	4a21      	ldr	r2, [pc, #132]	; (80100f8 <readCanToStructs+0x330>)
 8010072:	f240 4112 	movw	r1, #1042	; 0x412
 8010076:	fb01 f303 	mul.w	r3, r1, r3
 801007a:	4413      	add	r3, r2
 801007c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010080:	2200      	movs	r2, #0
 8010082:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8010084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010088:	4a1b      	ldr	r2, [pc, #108]	; (80100f8 <readCanToStructs+0x330>)
 801008a:	f240 4112 	movw	r1, #1042	; 0x412
 801008e:	fb01 f303 	mul.w	r3, r1, r3
 8010092:	4413      	add	r3, r2
 8010094:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801009e:	429a      	cmp	r2, r3
 80100a0:	d015      	beq.n	80100ce <readCanToStructs+0x306>
					printf("GPS2 Packet Seq no MisMatch\n");
 80100a2:	481a      	ldr	r0, [pc, #104]	; (801010c <readCanToStructs+0x344>)
 80100a4:	f012 fafa 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80100a8:	2206      	movs	r2, #6
 80100aa:	2100      	movs	r1, #0
 80100ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100ae:	f012 f971 	bl	8022394 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80100b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100b6:	4a10      	ldr	r2, [pc, #64]	; (80100f8 <readCanToStructs+0x330>)
 80100b8:	f240 4112 	movw	r1, #1042	; 0x412
 80100bc:	fb01 f303 	mul.w	r3, r1, r3
 80100c0:	4413      	add	r3, r2
 80100c2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80100c6:	2200      	movs	r2, #0
 80100c8:	701a      	strb	r2, [r3, #0]
					break;
 80100ca:	f000 bfb1 	b.w	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80100ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80100d2:	4613      	mov	r3, r2
 80100d4:	00db      	lsls	r3, r3, #3
 80100d6:	1a9b      	subs	r3, r3, r2
 80100d8:	461a      	mov	r2, r3
 80100da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100dc:	4413      	add	r3, r2
 80100de:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80100e0:	2301      	movs	r3, #1
 80100e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100e6:	e02a      	b.n	801013e <readCanToStructs+0x376>
 80100e8:	20000304 	.word	0x20000304
 80100ec:	2000195c 	.word	0x2000195c
 80100f0:	20005a58 	.word	0x20005a58
 80100f4:	200027dc 	.word	0x200027dc
 80100f8:	20005234 	.word	0x20005234
 80100fc:	080269cc 	.word	0x080269cc
 8010100:	200027d4 	.word	0x200027d4
 8010104:	20000645 	.word	0x20000645
 8010108:	080269e8 	.word	0x080269e8
 801010c:	080269fc 	.word	0x080269fc
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010110:	4bb6      	ldr	r3, [pc, #728]	; (80103ec <readCanToStructs+0x624>)
 8010112:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010116:	885b      	ldrh	r3, [r3, #2]
 8010118:	461a      	mov	r2, r3
 801011a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801011e:	49b3      	ldr	r1, [pc, #716]	; (80103ec <readCanToStructs+0x624>)
 8010120:	0112      	lsls	r2, r2, #4
 8010122:	440a      	add	r2, r1
 8010124:	4413      	add	r3, r2
 8010126:	3304      	adds	r3, #4
 8010128:	781a      	ldrb	r2, [r3, #0]
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801012e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010130:	3301      	adds	r3, #1
 8010132:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010138:	3301      	adds	r3, #1
 801013a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801013e:	4bab      	ldr	r3, [pc, #684]	; (80103ec <readCanToStructs+0x624>)
 8010140:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010144:	885b      	ldrh	r3, [r3, #2]
 8010146:	4aa9      	ldr	r2, [pc, #676]	; (80103ec <readCanToStructs+0x624>)
 8010148:	011b      	lsls	r3, r3, #4
 801014a:	4413      	add	r3, r2
 801014c:	330c      	adds	r3, #12
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010154:	429a      	cmp	r2, r3
 8010156:	d3db      	bcc.n	8010110 <readCanToStructs+0x348>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8010158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801015c:	4aa4      	ldr	r2, [pc, #656]	; (80103f0 <readCanToStructs+0x628>)
 801015e:	f240 4112 	movw	r1, #1042	; 0x412
 8010162:	fb01 f303 	mul.w	r3, r1, r3
 8010166:	4413      	add	r3, r2
 8010168:	f203 2313 	addw	r3, r3, #531	; 0x213
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	461a      	mov	r2, r3
 8010170:	4613      	mov	r3, r2
 8010172:	00db      	lsls	r3, r3, #3
 8010174:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8010176:	4b9d      	ldr	r3, [pc, #628]	; (80103ec <readCanToStructs+0x624>)
 8010178:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801017c:	885b      	ldrh	r3, [r3, #2]
 801017e:	499b      	ldr	r1, [pc, #620]	; (80103ec <readCanToStructs+0x624>)
 8010180:	011b      	lsls	r3, r3, #4
 8010182:	440b      	add	r3, r1
 8010184:	330c      	adds	r3, #12
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	3b01      	subs	r3, #1
 801018a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801018c:	2b05      	cmp	r3, #5
 801018e:	d91c      	bls.n	80101ca <readCanToStructs+0x402>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8010190:	4b98      	ldr	r3, [pc, #608]	; (80103f4 <readCanToStructs+0x62c>)
 8010192:	4a99      	ldr	r2, [pc, #612]	; (80103f8 <readCanToStructs+0x630>)
 8010194:	6811      	ldr	r1, [r2, #0]
 8010196:	6019      	str	r1, [r3, #0]
 8010198:	8892      	ldrh	r2, [r2, #4]
 801019a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 801019c:	4b97      	ldr	r3, [pc, #604]	; (80103fc <readCanToStructs+0x634>)
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d102      	bne.n	80101aa <readCanToStructs+0x3e2>
						printf("GPS2_PACKET_RECEIVED\n");
 80101a4:	4896      	ldr	r0, [pc, #600]	; (8010400 <readCanToStructs+0x638>)
 80101a6:	f012 fa79 	bl	802269c <puts>
					Write_RTC();
 80101aa:	f7fa ff03 	bl	800afb4 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80101ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101b2:	4a8f      	ldr	r2, [pc, #572]	; (80103f0 <readCanToStructs+0x628>)
 80101b4:	f240 4112 	movw	r1, #1042	; 0x412
 80101b8:	fb01 f303 	mul.w	r3, r1, r3
 80101bc:	4413      	add	r3, r2
 80101be:	f203 2313 	addw	r3, r3, #531	; 0x213
 80101c2:	2200      	movs	r2, #0
 80101c4:	701a      	strb	r2, [r3, #0]
				break;
 80101c6:	f000 bf33 	b.w	8011030 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80101ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101ce:	4a88      	ldr	r2, [pc, #544]	; (80103f0 <readCanToStructs+0x628>)
 80101d0:	f240 4112 	movw	r1, #1042	; 0x412
 80101d4:	fb01 f303 	mul.w	r3, r1, r3
 80101d8:	4413      	add	r3, r2
 80101da:	f203 2312 	addw	r3, r3, #530	; 0x212
 80101de:	2201      	movs	r2, #1
 80101e0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80101e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101e6:	4982      	ldr	r1, [pc, #520]	; (80103f0 <readCanToStructs+0x628>)
 80101e8:	f240 4212 	movw	r2, #1042	; 0x412
 80101ec:	fb03 f202 	mul.w	r2, r3, r2
 80101f0:	440a      	add	r2, r1
 80101f2:	f202 2213 	addw	r2, r2, #531	; 0x213
 80101f6:	7812      	ldrb	r2, [r2, #0]
 80101f8:	3201      	adds	r2, #1
 80101fa:	b2d0      	uxtb	r0, r2
 80101fc:	4a7c      	ldr	r2, [pc, #496]	; (80103f0 <readCanToStructs+0x628>)
 80101fe:	f240 4112 	movw	r1, #1042	; 0x412
 8010202:	fb01 f303 	mul.w	r3, r1, r3
 8010206:	4413      	add	r3, r2
 8010208:	f203 2313 	addw	r3, r3, #531	; 0x213
 801020c:	4602      	mov	r2, r0
 801020e:	701a      	strb	r2, [r3, #0]
				break;
 8010210:	f000 bf0e 	b.w	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8010214:	4b7b      	ldr	r3, [pc, #492]	; (8010404 <readCanToStructs+0x63c>)
 8010216:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010218:	4b74      	ldr	r3, [pc, #464]	; (80103ec <readCanToStructs+0x624>)
 801021a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801021e:	885b      	ldrh	r3, [r3, #2]
 8010220:	4a72      	ldr	r2, [pc, #456]	; (80103ec <readCanToStructs+0x624>)
 8010222:	011b      	lsls	r3, r3, #4
 8010224:	4413      	add	r3, r2
 8010226:	3304      	adds	r3, #4
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801022e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010232:	2b00      	cmp	r3, #0
 8010234:	d110      	bne.n	8010258 <readCanToStructs+0x490>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010236:	2218      	movs	r2, #24
 8010238:	2100      	movs	r1, #0
 801023a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801023c:	f012 f8aa 	bl	8022394 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010244:	4a6a      	ldr	r2, [pc, #424]	; (80103f0 <readCanToStructs+0x628>)
 8010246:	f240 4112 	movw	r1, #1042	; 0x412
 801024a:	fb01 f303 	mul.w	r3, r1, r3
 801024e:	4413      	add	r3, r2
 8010250:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010254:	2200      	movs	r2, #0
 8010256:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8010258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801025c:	4a64      	ldr	r2, [pc, #400]	; (80103f0 <readCanToStructs+0x628>)
 801025e:	f240 4112 	movw	r1, #1042	; 0x412
 8010262:	fb01 f303 	mul.w	r3, r1, r3
 8010266:	4413      	add	r3, r2
 8010268:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010272:	429a      	cmp	r2, r3
 8010274:	d015      	beq.n	80102a2 <readCanToStructs+0x4da>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8010276:	4864      	ldr	r0, [pc, #400]	; (8010408 <readCanToStructs+0x640>)
 8010278:	f012 fa10 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801027c:	2218      	movs	r2, #24
 801027e:	2100      	movs	r1, #0
 8010280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010282:	f012 f887 	bl	8022394 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801028a:	4a59      	ldr	r2, [pc, #356]	; (80103f0 <readCanToStructs+0x628>)
 801028c:	f240 4112 	movw	r1, #1042	; 0x412
 8010290:	fb01 f303 	mul.w	r3, r1, r3
 8010294:	4413      	add	r3, r2
 8010296:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801029a:	2200      	movs	r2, #0
 801029c:	701a      	strb	r2, [r3, #0]
					break;
 801029e:	f000 bec7 	b.w	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80102a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80102a6:	4613      	mov	r3, r2
 80102a8:	00db      	lsls	r3, r3, #3
 80102aa:	1a9b      	subs	r3, r3, r2
 80102ac:	461a      	mov	r2, r3
 80102ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b0:	4413      	add	r3, r2
 80102b2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80102b4:	2301      	movs	r3, #1
 80102b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80102ba:	e016      	b.n	80102ea <readCanToStructs+0x522>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80102bc:	4b4b      	ldr	r3, [pc, #300]	; (80103ec <readCanToStructs+0x624>)
 80102be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102c2:	885b      	ldrh	r3, [r3, #2]
 80102c4:	461a      	mov	r2, r3
 80102c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102ca:	4948      	ldr	r1, [pc, #288]	; (80103ec <readCanToStructs+0x624>)
 80102cc:	0112      	lsls	r2, r2, #4
 80102ce:	440a      	add	r2, r1
 80102d0:	4413      	add	r3, r2
 80102d2:	3304      	adds	r3, #4
 80102d4:	781a      	ldrb	r2, [r3, #0]
 80102d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80102da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102dc:	3301      	adds	r3, #1
 80102de:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80102e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102e4:	3301      	adds	r3, #1
 80102e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80102ea:	4b40      	ldr	r3, [pc, #256]	; (80103ec <readCanToStructs+0x624>)
 80102ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102f0:	885b      	ldrh	r3, [r3, #2]
 80102f2:	4a3e      	ldr	r2, [pc, #248]	; (80103ec <readCanToStructs+0x624>)
 80102f4:	011b      	lsls	r3, r3, #4
 80102f6:	4413      	add	r3, r2
 80102f8:	330c      	adds	r3, #12
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010300:	429a      	cmp	r2, r3
 8010302:	d3db      	bcc.n	80102bc <readCanToStructs+0x4f4>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8010304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010308:	4a39      	ldr	r2, [pc, #228]	; (80103f0 <readCanToStructs+0x628>)
 801030a:	f240 4112 	movw	r1, #1042	; 0x412
 801030e:	fb01 f303 	mul.w	r3, r1, r3
 8010312:	4413      	add	r3, r2
 8010314:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	461a      	mov	r2, r3
 801031c:	4613      	mov	r3, r2
 801031e:	00db      	lsls	r3, r3, #3
 8010320:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8010322:	4b32      	ldr	r3, [pc, #200]	; (80103ec <readCanToStructs+0x624>)
 8010324:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010328:	885b      	ldrh	r3, [r3, #2]
 801032a:	4930      	ldr	r1, [pc, #192]	; (80103ec <readCanToStructs+0x624>)
 801032c:	011b      	lsls	r3, r3, #4
 801032e:	440b      	add	r3, r1
 8010330:	330c      	adds	r3, #12
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	3b01      	subs	r3, #1
 8010336:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8010338:	2b17      	cmp	r3, #23
 801033a:	d932      	bls.n	80103a2 <readCanToStructs+0x5da>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 801033c:	4b31      	ldr	r3, [pc, #196]	; (8010404 <readCanToStructs+0x63c>)
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	461a      	mov	r2, r3
 8010342:	4613      	mov	r3, r2
 8010344:	005b      	lsls	r3, r3, #1
 8010346:	4413      	add	r3, r2
 8010348:	00db      	lsls	r3, r3, #3
 801034a:	4a30      	ldr	r2, [pc, #192]	; (801040c <readCanToStructs+0x644>)
 801034c:	4413      	add	r3, r2
 801034e:	2218      	movs	r2, #24
 8010350:	492c      	ldr	r1, [pc, #176]	; (8010404 <readCanToStructs+0x63c>)
 8010352:	4618      	mov	r0, r3
 8010354:	f011 fff6 	bl	8022344 <memcpy>
					if(Debug_flag == 1)
 8010358:	4b28      	ldr	r3, [pc, #160]	; (80103fc <readCanToStructs+0x634>)
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	2b01      	cmp	r3, #1
 801035e:	d105      	bne.n	801036c <readCanToStructs+0x5a4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010360:	4b28      	ldr	r3, [pc, #160]	; (8010404 <readCanToStructs+0x63c>)
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	4619      	mov	r1, r3
 8010366:	482a      	ldr	r0, [pc, #168]	; (8010410 <readCanToStructs+0x648>)
 8010368:	f012 f8fc 	bl	8022564 <iprintf>
					Is_CAN_Exchange_happening = YES;
 801036c:	4b29      	ldr	r3, [pc, #164]	; (8010414 <readCanToStructs+0x64c>)
 801036e:	2201      	movs	r2, #1
 8010370:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010372:	f005 f8ed 	bl	8015550 <HAL_GetTick>
 8010376:	4603      	mov	r3, r0
 8010378:	4a27      	ldr	r2, [pc, #156]	; (8010418 <readCanToStructs+0x650>)
 801037a:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 801037c:	4b21      	ldr	r3, [pc, #132]	; (8010404 <readCanToStructs+0x63c>)
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	4618      	mov	r0, r3
 8010382:	f7f7 fc79 	bl	8007c78 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801038a:	4a19      	ldr	r2, [pc, #100]	; (80103f0 <readCanToStructs+0x628>)
 801038c:	f240 4112 	movw	r1, #1042	; 0x412
 8010390:	fb01 f303 	mul.w	r3, r1, r3
 8010394:	4413      	add	r3, r2
 8010396:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801039a:	2200      	movs	r2, #0
 801039c:	701a      	strb	r2, [r3, #0]
				break;
 801039e:	f000 be47 	b.w	8011030 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80103a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103a6:	4a12      	ldr	r2, [pc, #72]	; (80103f0 <readCanToStructs+0x628>)
 80103a8:	f240 4112 	movw	r1, #1042	; 0x412
 80103ac:	fb01 f303 	mul.w	r3, r1, r3
 80103b0:	4413      	add	r3, r2
 80103b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80103b6:	2201      	movs	r2, #1
 80103b8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80103ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103be:	490c      	ldr	r1, [pc, #48]	; (80103f0 <readCanToStructs+0x628>)
 80103c0:	f240 4212 	movw	r2, #1042	; 0x412
 80103c4:	fb03 f202 	mul.w	r2, r3, r2
 80103c8:	440a      	add	r2, r1
 80103ca:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80103ce:	7812      	ldrb	r2, [r2, #0]
 80103d0:	3201      	adds	r2, #1
 80103d2:	b2d0      	uxtb	r0, r2
 80103d4:	4a06      	ldr	r2, [pc, #24]	; (80103f0 <readCanToStructs+0x628>)
 80103d6:	f240 4112 	movw	r1, #1042	; 0x412
 80103da:	fb01 f303 	mul.w	r3, r1, r3
 80103de:	4413      	add	r3, r2
 80103e0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80103e4:	4602      	mov	r2, r0
 80103e6:	701a      	strb	r2, [r3, #0]
				break;
 80103e8:	f000 be22 	b.w	8011030 <readCanToStructs+0x1268>
 80103ec:	20005a58 	.word	0x20005a58
 80103f0:	20005234 	.word	0x20005234
 80103f4:	200027d4 	.word	0x200027d4
 80103f8:	200027dc 	.word	0x200027dc
 80103fc:	20000645 	.word	0x20000645
 8010400:	08026a18 	.word	0x08026a18
 8010404:	2000186c 	.word	0x2000186c
 8010408:	08026a30 	.word	0x08026a30
 801040c:	20001764 	.word	0x20001764
 8010410:	08026a54 	.word	0x08026a54
 8010414:	20000108 	.word	0x20000108
 8010418:	20000e40 	.word	0x20000e40
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 801041c:	4b9f      	ldr	r3, [pc, #636]	; (801069c <readCanToStructs+0x8d4>)
 801041e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010420:	4b9f      	ldr	r3, [pc, #636]	; (80106a0 <readCanToStructs+0x8d8>)
 8010422:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010426:	885b      	ldrh	r3, [r3, #2]
 8010428:	4a9d      	ldr	r2, [pc, #628]	; (80106a0 <readCanToStructs+0x8d8>)
 801042a:	011b      	lsls	r3, r3, #4
 801042c:	4413      	add	r3, r2
 801042e:	3304      	adds	r3, #4
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010436:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801043a:	2b00      	cmp	r3, #0
 801043c:	d110      	bne.n	8010460 <readCanToStructs+0x698>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801043e:	2218      	movs	r2, #24
 8010440:	2100      	movs	r1, #0
 8010442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010444:	f011 ffa6 	bl	8022394 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801044c:	4a95      	ldr	r2, [pc, #596]	; (80106a4 <readCanToStructs+0x8dc>)
 801044e:	f240 4112 	movw	r1, #1042	; 0x412
 8010452:	fb01 f303 	mul.w	r3, r1, r3
 8010456:	4413      	add	r3, r2
 8010458:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801045c:	2200      	movs	r2, #0
 801045e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8010460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010464:	4a8f      	ldr	r2, [pc, #572]	; (80106a4 <readCanToStructs+0x8dc>)
 8010466:	f240 4112 	movw	r1, #1042	; 0x412
 801046a:	fb01 f303 	mul.w	r3, r1, r3
 801046e:	4413      	add	r3, r2
 8010470:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801047a:	429a      	cmp	r2, r3
 801047c:	d015      	beq.n	80104aa <readCanToStructs+0x6e2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 801047e:	488a      	ldr	r0, [pc, #552]	; (80106a8 <readCanToStructs+0x8e0>)
 8010480:	f012 f90c 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010484:	2218      	movs	r2, #24
 8010486:	2100      	movs	r1, #0
 8010488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801048a:	f011 ff83 	bl	8022394 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801048e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010492:	4a84      	ldr	r2, [pc, #528]	; (80106a4 <readCanToStructs+0x8dc>)
 8010494:	f240 4112 	movw	r1, #1042	; 0x412
 8010498:	fb01 f303 	mul.w	r3, r1, r3
 801049c:	4413      	add	r3, r2
 801049e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80104a2:	2200      	movs	r2, #0
 80104a4:	701a      	strb	r2, [r3, #0]
					break;
 80104a6:	f000 bdc3 	b.w	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80104aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80104ae:	4613      	mov	r3, r2
 80104b0:	00db      	lsls	r3, r3, #3
 80104b2:	1a9b      	subs	r3, r3, r2
 80104b4:	461a      	mov	r2, r3
 80104b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b8:	4413      	add	r3, r2
 80104ba:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80104bc:	2301      	movs	r3, #1
 80104be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80104c2:	e016      	b.n	80104f2 <readCanToStructs+0x72a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80104c4:	4b76      	ldr	r3, [pc, #472]	; (80106a0 <readCanToStructs+0x8d8>)
 80104c6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104ca:	885b      	ldrh	r3, [r3, #2]
 80104cc:	461a      	mov	r2, r3
 80104ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104d2:	4973      	ldr	r1, [pc, #460]	; (80106a0 <readCanToStructs+0x8d8>)
 80104d4:	0112      	lsls	r2, r2, #4
 80104d6:	440a      	add	r2, r1
 80104d8:	4413      	add	r3, r2
 80104da:	3304      	adds	r3, #4
 80104dc:	781a      	ldrb	r2, [r3, #0]
 80104de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80104e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e4:	3301      	adds	r3, #1
 80104e6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80104e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104ec:	3301      	adds	r3, #1
 80104ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80104f2:	4b6b      	ldr	r3, [pc, #428]	; (80106a0 <readCanToStructs+0x8d8>)
 80104f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104f8:	885b      	ldrh	r3, [r3, #2]
 80104fa:	4a69      	ldr	r2, [pc, #420]	; (80106a0 <readCanToStructs+0x8d8>)
 80104fc:	011b      	lsls	r3, r3, #4
 80104fe:	4413      	add	r3, r2
 8010500:	330c      	adds	r3, #12
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010508:	429a      	cmp	r2, r3
 801050a:	d3db      	bcc.n	80104c4 <readCanToStructs+0x6fc>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801050c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010510:	4a64      	ldr	r2, [pc, #400]	; (80106a4 <readCanToStructs+0x8dc>)
 8010512:	f240 4112 	movw	r1, #1042	; 0x412
 8010516:	fb01 f303 	mul.w	r3, r1, r3
 801051a:	4413      	add	r3, r2
 801051c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	461a      	mov	r2, r3
 8010524:	4613      	mov	r3, r2
 8010526:	00db      	lsls	r3, r3, #3
 8010528:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 801052a:	4b5d      	ldr	r3, [pc, #372]	; (80106a0 <readCanToStructs+0x8d8>)
 801052c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010530:	885b      	ldrh	r3, [r3, #2]
 8010532:	495b      	ldr	r1, [pc, #364]	; (80106a0 <readCanToStructs+0x8d8>)
 8010534:	011b      	lsls	r3, r3, #4
 8010536:	440b      	add	r3, r1
 8010538:	330c      	adds	r3, #12
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	3b01      	subs	r3, #1
 801053e:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010540:	2b17      	cmp	r3, #23
 8010542:	d932      	bls.n	80105aa <readCanToStructs+0x7e2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8010544:	4b55      	ldr	r3, [pc, #340]	; (801069c <readCanToStructs+0x8d4>)
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	461a      	mov	r2, r3
 801054a:	4613      	mov	r3, r2
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	4413      	add	r3, r2
 8010550:	00db      	lsls	r3, r3, #3
 8010552:	4a56      	ldr	r2, [pc, #344]	; (80106ac <readCanToStructs+0x8e4>)
 8010554:	4413      	add	r3, r2
 8010556:	2218      	movs	r2, #24
 8010558:	4950      	ldr	r1, [pc, #320]	; (801069c <readCanToStructs+0x8d4>)
 801055a:	4618      	mov	r0, r3
 801055c:	f011 fef2 	bl	8022344 <memcpy>
					if(Debug_flag == 1)
 8010560:	4b53      	ldr	r3, [pc, #332]	; (80106b0 <readCanToStructs+0x8e8>)
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	2b01      	cmp	r3, #1
 8010566:	d105      	bne.n	8010574 <readCanToStructs+0x7ac>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010568:	4b4c      	ldr	r3, [pc, #304]	; (801069c <readCanToStructs+0x8d4>)
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	4619      	mov	r1, r3
 801056e:	4851      	ldr	r0, [pc, #324]	; (80106b4 <readCanToStructs+0x8ec>)
 8010570:	f011 fff8 	bl	8022564 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010574:	f004 ffec 	bl	8015550 <HAL_GetTick>
 8010578:	4603      	mov	r3, r0
 801057a:	4a4f      	ldr	r2, [pc, #316]	; (80106b8 <readCanToStructs+0x8f0>)
 801057c:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 801057e:	4b4f      	ldr	r3, [pc, #316]	; (80106bc <readCanToStructs+0x8f4>)
 8010580:	2201      	movs	r2, #1
 8010582:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010584:	4b45      	ldr	r3, [pc, #276]	; (801069c <readCanToStructs+0x8d4>)
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	4618      	mov	r0, r3
 801058a:	f7f7 fb75 	bl	8007c78 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801058e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010592:	4a44      	ldr	r2, [pc, #272]	; (80106a4 <readCanToStructs+0x8dc>)
 8010594:	f240 4112 	movw	r1, #1042	; 0x412
 8010598:	fb01 f303 	mul.w	r3, r1, r3
 801059c:	4413      	add	r3, r2
 801059e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80105a2:	2200      	movs	r2, #0
 80105a4:	701a      	strb	r2, [r3, #0]
				break;
 80105a6:	f000 bd43 	b.w	8011030 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80105aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105ae:	4a3d      	ldr	r2, [pc, #244]	; (80106a4 <readCanToStructs+0x8dc>)
 80105b0:	f240 4112 	movw	r1, #1042	; 0x412
 80105b4:	fb01 f303 	mul.w	r3, r1, r3
 80105b8:	4413      	add	r3, r2
 80105ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80105be:	2201      	movs	r2, #1
 80105c0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80105c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105c6:	4937      	ldr	r1, [pc, #220]	; (80106a4 <readCanToStructs+0x8dc>)
 80105c8:	f240 4212 	movw	r2, #1042	; 0x412
 80105cc:	fb03 f202 	mul.w	r2, r3, r2
 80105d0:	440a      	add	r2, r1
 80105d2:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80105d6:	7812      	ldrb	r2, [r2, #0]
 80105d8:	3201      	adds	r2, #1
 80105da:	b2d0      	uxtb	r0, r2
 80105dc:	4a31      	ldr	r2, [pc, #196]	; (80106a4 <readCanToStructs+0x8dc>)
 80105de:	f240 4112 	movw	r1, #1042	; 0x412
 80105e2:	fb01 f303 	mul.w	r3, r1, r3
 80105e6:	4413      	add	r3, r2
 80105e8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80105ec:	4602      	mov	r2, r0
 80105ee:	701a      	strb	r2, [r3, #0]
				break;
 80105f0:	f000 bd1e 	b.w	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 80105f4:	4b32      	ldr	r3, [pc, #200]	; (80106c0 <readCanToStructs+0x8f8>)
 80105f6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80105f8:	4b29      	ldr	r3, [pc, #164]	; (80106a0 <readCanToStructs+0x8d8>)
 80105fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105fe:	885b      	ldrh	r3, [r3, #2]
 8010600:	4a27      	ldr	r2, [pc, #156]	; (80106a0 <readCanToStructs+0x8d8>)
 8010602:	011b      	lsls	r3, r3, #4
 8010604:	4413      	add	r3, r2
 8010606:	3304      	adds	r3, #4
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801060e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010612:	2b00      	cmp	r3, #0
 8010614:	d110      	bne.n	8010638 <readCanToStructs+0x870>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010616:	2246      	movs	r2, #70	; 0x46
 8010618:	2100      	movs	r1, #0
 801061a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801061c:	f011 feba 	bl	8022394 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010624:	4a1f      	ldr	r2, [pc, #124]	; (80106a4 <readCanToStructs+0x8dc>)
 8010626:	f240 4112 	movw	r1, #1042	; 0x412
 801062a:	fb01 f303 	mul.w	r3, r1, r3
 801062e:	4413      	add	r3, r2
 8010630:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010634:	2200      	movs	r2, #0
 8010636:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8010638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801063c:	4a19      	ldr	r2, [pc, #100]	; (80106a4 <readCanToStructs+0x8dc>)
 801063e:	f240 4112 	movw	r1, #1042	; 0x412
 8010642:	fb01 f303 	mul.w	r3, r1, r3
 8010646:	4413      	add	r3, r2
 8010648:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010652:	429a      	cmp	r2, r3
 8010654:	d015      	beq.n	8010682 <readCanToStructs+0x8ba>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8010656:	481b      	ldr	r0, [pc, #108]	; (80106c4 <readCanToStructs+0x8fc>)
 8010658:	f012 f820 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801065c:	2246      	movs	r2, #70	; 0x46
 801065e:	2100      	movs	r1, #0
 8010660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010662:	f011 fe97 	bl	8022394 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801066a:	4a0e      	ldr	r2, [pc, #56]	; (80106a4 <readCanToStructs+0x8dc>)
 801066c:	f240 4112 	movw	r1, #1042	; 0x412
 8010670:	fb01 f303 	mul.w	r3, r1, r3
 8010674:	4413      	add	r3, r2
 8010676:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801067a:	2200      	movs	r2, #0
 801067c:	701a      	strb	r2, [r3, #0]
					break;
 801067e:	f000 bcd7 	b.w	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010682:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010686:	4613      	mov	r3, r2
 8010688:	00db      	lsls	r3, r3, #3
 801068a:	1a9b      	subs	r3, r3, r2
 801068c:	461a      	mov	r2, r3
 801068e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010690:	4413      	add	r3, r2
 8010692:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010694:	2301      	movs	r3, #1
 8010696:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801069a:	e02c      	b.n	80106f6 <readCanToStructs+0x92e>
 801069c:	2000186c 	.word	0x2000186c
 80106a0:	20005a58 	.word	0x20005a58
 80106a4:	20005234 	.word	0x20005234
 80106a8:	08026a64 	.word	0x08026a64
 80106ac:	20001764 	.word	0x20001764
 80106b0:	20000645 	.word	0x20000645
 80106b4:	08026a88 	.word	0x08026a88
 80106b8:	20000e40 	.word	0x20000e40
 80106bc:	20000108 	.word	0x20000108
 80106c0:	20001914 	.word	0x20001914
 80106c4:	08026a98 	.word	0x08026a98
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80106c8:	4bb9      	ldr	r3, [pc, #740]	; (80109b0 <readCanToStructs+0xbe8>)
 80106ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106ce:	885b      	ldrh	r3, [r3, #2]
 80106d0:	461a      	mov	r2, r3
 80106d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106d6:	49b6      	ldr	r1, [pc, #728]	; (80109b0 <readCanToStructs+0xbe8>)
 80106d8:	0112      	lsls	r2, r2, #4
 80106da:	440a      	add	r2, r1
 80106dc:	4413      	add	r3, r2
 80106de:	3304      	adds	r3, #4
 80106e0:	781a      	ldrb	r2, [r3, #0]
 80106e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	3301      	adds	r3, #1
 80106ea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80106ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106f0:	3301      	adds	r3, #1
 80106f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80106f6:	4bae      	ldr	r3, [pc, #696]	; (80109b0 <readCanToStructs+0xbe8>)
 80106f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106fc:	885b      	ldrh	r3, [r3, #2]
 80106fe:	4aac      	ldr	r2, [pc, #688]	; (80109b0 <readCanToStructs+0xbe8>)
 8010700:	011b      	lsls	r3, r3, #4
 8010702:	4413      	add	r3, r2
 8010704:	330c      	adds	r3, #12
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801070c:	429a      	cmp	r2, r3
 801070e:	d3db      	bcc.n	80106c8 <readCanToStructs+0x900>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010714:	4aa7      	ldr	r2, [pc, #668]	; (80109b4 <readCanToStructs+0xbec>)
 8010716:	f240 4112 	movw	r1, #1042	; 0x412
 801071a:	fb01 f303 	mul.w	r3, r1, r3
 801071e:	4413      	add	r3, r2
 8010720:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	461a      	mov	r2, r3
 8010728:	4613      	mov	r3, r2
 801072a:	00db      	lsls	r3, r3, #3
 801072c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 801072e:	4ba0      	ldr	r3, [pc, #640]	; (80109b0 <readCanToStructs+0xbe8>)
 8010730:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010734:	885b      	ldrh	r3, [r3, #2]
 8010736:	499e      	ldr	r1, [pc, #632]	; (80109b0 <readCanToStructs+0xbe8>)
 8010738:	011b      	lsls	r3, r3, #4
 801073a:	440b      	add	r3, r1
 801073c:	330c      	adds	r3, #12
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	3b01      	subs	r3, #1
 8010742:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010744:	2b45      	cmp	r3, #69	; 0x45
 8010746:	d93d      	bls.n	80107c4 <readCanToStructs+0x9fc>
					if(Debug_flag == 1)
 8010748:	4b9b      	ldr	r3, [pc, #620]	; (80109b8 <readCanToStructs+0xbf0>)
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	2b01      	cmp	r3, #1
 801074e:	d102      	bne.n	8010756 <readCanToStructs+0x98e>
						printf("RCV V-Message-1\n");
 8010750:	489a      	ldr	r0, [pc, #616]	; (80109bc <readCanToStructs+0xbf4>)
 8010752:	f011 ffa3 	bl	802269c <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010756:	2246      	movs	r2, #70	; 0x46
 8010758:	2100      	movs	r1, #0
 801075a:	4899      	ldr	r0, [pc, #612]	; (80109c0 <readCanToStructs+0xbf8>)
 801075c:	f011 fe1a 	bl	8022394 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010760:	4a97      	ldr	r2, [pc, #604]	; (80109c0 <readCanToStructs+0xbf8>)
 8010762:	4b98      	ldr	r3, [pc, #608]	; (80109c4 <readCanToStructs+0xbfc>)
 8010764:	4610      	mov	r0, r2
 8010766:	4619      	mov	r1, r3
 8010768:	2346      	movs	r3, #70	; 0x46
 801076a:	461a      	mov	r2, r3
 801076c:	f011 fdea 	bl	8022344 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010770:	4b95      	ldr	r3, [pc, #596]	; (80109c8 <readCanToStructs+0xc00>)
 8010772:	2201      	movs	r2, #1
 8010774:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8010776:	4b92      	ldr	r3, [pc, #584]	; (80109c0 <readCanToStructs+0xbf8>)
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	4619      	mov	r1, r3
 801077c:	4a93      	ldr	r2, [pc, #588]	; (80109cc <readCanToStructs+0xc04>)
 801077e:	460b      	mov	r3, r1
 8010780:	005b      	lsls	r3, r3, #1
 8010782:	440b      	add	r3, r1
 8010784:	00db      	lsls	r3, r3, #3
 8010786:	4413      	add	r3, r2
 8010788:	3304      	adds	r3, #4
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	2b01      	cmp	r3, #1
 801078e:	d00b      	beq.n	80107a8 <readCanToStructs+0x9e0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8010790:	4b8b      	ldr	r3, [pc, #556]	; (80109c0 <readCanToStructs+0xbf8>)
 8010792:	889b      	ldrh	r3, [r3, #4]
 8010794:	b2d9      	uxtb	r1, r3
 8010796:	4b8a      	ldr	r3, [pc, #552]	; (80109c0 <readCanToStructs+0xbf8>)
 8010798:	881b      	ldrh	r3, [r3, #0]
 801079a:	b2da      	uxtb	r2, r3
 801079c:	4b88      	ldr	r3, [pc, #544]	; (80109c0 <readCanToStructs+0xbf8>)
 801079e:	885b      	ldrh	r3, [r3, #2]
 80107a0:	b2db      	uxtb	r3, r3
 80107a2:	488b      	ldr	r0, [pc, #556]	; (80109d0 <readCanToStructs+0xc08>)
 80107a4:	f7f3 ff3c 	bl	8004620 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 80107a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107ac:	4a81      	ldr	r2, [pc, #516]	; (80109b4 <readCanToStructs+0xbec>)
 80107ae:	f240 4112 	movw	r1, #1042	; 0x412
 80107b2:	fb01 f303 	mul.w	r3, r1, r3
 80107b6:	4413      	add	r3, r2
 80107b8:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80107bc:	2200      	movs	r2, #0
 80107be:	701a      	strb	r2, [r3, #0]
				break;
 80107c0:	f000 bc36 	b.w	8011030 <readCanToStructs+0x1268>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 80107c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107c8:	4a7a      	ldr	r2, [pc, #488]	; (80109b4 <readCanToStructs+0xbec>)
 80107ca:	f240 4112 	movw	r1, #1042	; 0x412
 80107ce:	fb01 f303 	mul.w	r3, r1, r3
 80107d2:	4413      	add	r3, r2
 80107d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80107d8:	2201      	movs	r2, #1
 80107da:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 80107dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107e0:	4974      	ldr	r1, [pc, #464]	; (80109b4 <readCanToStructs+0xbec>)
 80107e2:	f240 4212 	movw	r2, #1042	; 0x412
 80107e6:	fb03 f202 	mul.w	r2, r3, r2
 80107ea:	440a      	add	r2, r1
 80107ec:	f202 4207 	addw	r2, r2, #1031	; 0x407
 80107f0:	7812      	ldrb	r2, [r2, #0]
 80107f2:	3201      	adds	r2, #1
 80107f4:	b2d0      	uxtb	r0, r2
 80107f6:	4a6f      	ldr	r2, [pc, #444]	; (80109b4 <readCanToStructs+0xbec>)
 80107f8:	f240 4112 	movw	r1, #1042	; 0x412
 80107fc:	fb01 f303 	mul.w	r3, r1, r3
 8010800:	4413      	add	r3, r2
 8010802:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010806:	4602      	mov	r2, r0
 8010808:	701a      	strb	r2, [r3, #0]
				break;
 801080a:	f000 bc11 	b.w	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 801080e:	4b6d      	ldr	r3, [pc, #436]	; (80109c4 <readCanToStructs+0xbfc>)
 8010810:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010812:	4b67      	ldr	r3, [pc, #412]	; (80109b0 <readCanToStructs+0xbe8>)
 8010814:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010818:	885b      	ldrh	r3, [r3, #2]
 801081a:	4a65      	ldr	r2, [pc, #404]	; (80109b0 <readCanToStructs+0xbe8>)
 801081c:	011b      	lsls	r3, r3, #4
 801081e:	4413      	add	r3, r2
 8010820:	3304      	adds	r3, #4
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010828:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801082c:	2b00      	cmp	r3, #0
 801082e:	d110      	bne.n	8010852 <readCanToStructs+0xa8a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010830:	2246      	movs	r2, #70	; 0x46
 8010832:	2100      	movs	r1, #0
 8010834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010836:	f011 fdad 	bl	8022394 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 801083a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801083e:	4a5d      	ldr	r2, [pc, #372]	; (80109b4 <readCanToStructs+0xbec>)
 8010840:	f240 4112 	movw	r1, #1042	; 0x412
 8010844:	fb01 f303 	mul.w	r3, r1, r3
 8010848:	4413      	add	r3, r2
 801084a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801084e:	2200      	movs	r2, #0
 8010850:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8010852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010856:	4a57      	ldr	r2, [pc, #348]	; (80109b4 <readCanToStructs+0xbec>)
 8010858:	f240 4112 	movw	r1, #1042	; 0x412
 801085c:	fb01 f303 	mul.w	r3, r1, r3
 8010860:	4413      	add	r3, r2
 8010862:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801086c:	429a      	cmp	r2, r3
 801086e:	d014      	beq.n	801089a <readCanToStructs+0xad2>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8010870:	4858      	ldr	r0, [pc, #352]	; (80109d4 <readCanToStructs+0xc0c>)
 8010872:	f011 ff13 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010876:	2246      	movs	r2, #70	; 0x46
 8010878:	2100      	movs	r1, #0
 801087a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801087c:	f011 fd8a 	bl	8022394 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010884:	4a4b      	ldr	r2, [pc, #300]	; (80109b4 <readCanToStructs+0xbec>)
 8010886:	f240 4112 	movw	r1, #1042	; 0x412
 801088a:	fb01 f303 	mul.w	r3, r1, r3
 801088e:	4413      	add	r3, r2
 8010890:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010894:	2200      	movs	r2, #0
 8010896:	701a      	strb	r2, [r3, #0]
					break;
 8010898:	e3ca      	b.n	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 801089a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801089e:	4613      	mov	r3, r2
 80108a0:	00db      	lsls	r3, r3, #3
 80108a2:	1a9b      	subs	r3, r3, r2
 80108a4:	461a      	mov	r2, r3
 80108a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a8:	4413      	add	r3, r2
 80108aa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80108ac:	2301      	movs	r3, #1
 80108ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80108b2:	e016      	b.n	80108e2 <readCanToStructs+0xb1a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80108b4:	4b3e      	ldr	r3, [pc, #248]	; (80109b0 <readCanToStructs+0xbe8>)
 80108b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80108ba:	885b      	ldrh	r3, [r3, #2]
 80108bc:	461a      	mov	r2, r3
 80108be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80108c2:	493b      	ldr	r1, [pc, #236]	; (80109b0 <readCanToStructs+0xbe8>)
 80108c4:	0112      	lsls	r2, r2, #4
 80108c6:	440a      	add	r2, r1
 80108c8:	4413      	add	r3, r2
 80108ca:	3304      	adds	r3, #4
 80108cc:	781a      	ldrb	r2, [r3, #0]
 80108ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80108d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d4:	3301      	adds	r3, #1
 80108d6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80108d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80108dc:	3301      	adds	r3, #1
 80108de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80108e2:	4b33      	ldr	r3, [pc, #204]	; (80109b0 <readCanToStructs+0xbe8>)
 80108e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80108e8:	885b      	ldrh	r3, [r3, #2]
 80108ea:	4a31      	ldr	r2, [pc, #196]	; (80109b0 <readCanToStructs+0xbe8>)
 80108ec:	011b      	lsls	r3, r3, #4
 80108ee:	4413      	add	r3, r2
 80108f0:	330c      	adds	r3, #12
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d3db      	bcc.n	80108b4 <readCanToStructs+0xaec>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 80108fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010900:	4a2c      	ldr	r2, [pc, #176]	; (80109b4 <readCanToStructs+0xbec>)
 8010902:	f240 4112 	movw	r1, #1042	; 0x412
 8010906:	fb01 f303 	mul.w	r3, r1, r3
 801090a:	4413      	add	r3, r2
 801090c:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	461a      	mov	r2, r3
 8010914:	4613      	mov	r3, r2
 8010916:	00db      	lsls	r3, r3, #3
 8010918:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 801091a:	4b25      	ldr	r3, [pc, #148]	; (80109b0 <readCanToStructs+0xbe8>)
 801091c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010920:	885b      	ldrh	r3, [r3, #2]
 8010922:	4923      	ldr	r1, [pc, #140]	; (80109b0 <readCanToStructs+0xbe8>)
 8010924:	011b      	lsls	r3, r3, #4
 8010926:	440b      	add	r3, r1
 8010928:	330c      	adds	r3, #12
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	3b01      	subs	r3, #1
 801092e:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010930:	2b45      	cmp	r3, #69	; 0x45
 8010932:	d953      	bls.n	80109dc <readCanToStructs+0xc14>
					if(Debug_flag == 1)
 8010934:	4b20      	ldr	r3, [pc, #128]	; (80109b8 <readCanToStructs+0xbf0>)
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	2b01      	cmp	r3, #1
 801093a:	d102      	bne.n	8010942 <readCanToStructs+0xb7a>
						printf("RCV V-Message-2\n");
 801093c:	4826      	ldr	r0, [pc, #152]	; (80109d8 <readCanToStructs+0xc10>)
 801093e:	f011 fead 	bl	802269c <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010942:	2246      	movs	r2, #70	; 0x46
 8010944:	2100      	movs	r1, #0
 8010946:	481e      	ldr	r0, [pc, #120]	; (80109c0 <readCanToStructs+0xbf8>)
 8010948:	f011 fd24 	bl	8022394 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801094c:	4a1c      	ldr	r2, [pc, #112]	; (80109c0 <readCanToStructs+0xbf8>)
 801094e:	4b1d      	ldr	r3, [pc, #116]	; (80109c4 <readCanToStructs+0xbfc>)
 8010950:	4610      	mov	r0, r2
 8010952:	4619      	mov	r1, r3
 8010954:	2346      	movs	r3, #70	; 0x46
 8010956:	461a      	mov	r2, r3
 8010958:	f011 fcf4 	bl	8022344 <memcpy>
					Is_CAN_Exchange_happening = YES;
 801095c:	4b1a      	ldr	r3, [pc, #104]	; (80109c8 <readCanToStructs+0xc00>)
 801095e:	2201      	movs	r2, #1
 8010960:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8010962:	4b17      	ldr	r3, [pc, #92]	; (80109c0 <readCanToStructs+0xbf8>)
 8010964:	881b      	ldrh	r3, [r3, #0]
 8010966:	4619      	mov	r1, r3
 8010968:	4a18      	ldr	r2, [pc, #96]	; (80109cc <readCanToStructs+0xc04>)
 801096a:	460b      	mov	r3, r1
 801096c:	005b      	lsls	r3, r3, #1
 801096e:	440b      	add	r3, r1
 8010970:	00db      	lsls	r3, r3, #3
 8010972:	4413      	add	r3, r2
 8010974:	3303      	adds	r3, #3
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	2b01      	cmp	r3, #1
 801097a:	d00b      	beq.n	8010994 <readCanToStructs+0xbcc>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 801097c:	4b10      	ldr	r3, [pc, #64]	; (80109c0 <readCanToStructs+0xbf8>)
 801097e:	889b      	ldrh	r3, [r3, #4]
 8010980:	b2d9      	uxtb	r1, r3
 8010982:	4b0f      	ldr	r3, [pc, #60]	; (80109c0 <readCanToStructs+0xbf8>)
 8010984:	881b      	ldrh	r3, [r3, #0]
 8010986:	b2da      	uxtb	r2, r3
 8010988:	4b0d      	ldr	r3, [pc, #52]	; (80109c0 <readCanToStructs+0xbf8>)
 801098a:	885b      	ldrh	r3, [r3, #2]
 801098c:	b2db      	uxtb	r3, r3
 801098e:	4810      	ldr	r0, [pc, #64]	; (80109d0 <readCanToStructs+0xc08>)
 8010990:	f7f3 fe46 	bl	8004620 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010998:	4a06      	ldr	r2, [pc, #24]	; (80109b4 <readCanToStructs+0xbec>)
 801099a:	f240 4112 	movw	r1, #1042	; 0x412
 801099e:	fb01 f303 	mul.w	r3, r1, r3
 80109a2:	4413      	add	r3, r2
 80109a4:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80109a8:	2200      	movs	r2, #0
 80109aa:	701a      	strb	r2, [r3, #0]
				break;
 80109ac:	e340      	b.n	8011030 <readCanToStructs+0x1268>
 80109ae:	bf00      	nop
 80109b0:	20005a58 	.word	0x20005a58
 80109b4:	20005234 	.word	0x20005234
 80109b8:	20000645 	.word	0x20000645
 80109bc:	08026abc 	.word	0x08026abc
 80109c0:	200018cc 	.word	0x200018cc
 80109c4:	20001914 	.word	0x20001914
 80109c8:	20000108 	.word	0x20000108
 80109cc:	20001674 	.word	0x20001674
 80109d0:	200018d2 	.word	0x200018d2
 80109d4:	08026acc 	.word	0x08026acc
 80109d8:	08026af0 	.word	0x08026af0
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 80109dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109e0:	4a9f      	ldr	r2, [pc, #636]	; (8010c60 <readCanToStructs+0xe98>)
 80109e2:	f240 4112 	movw	r1, #1042	; 0x412
 80109e6:	fb01 f303 	mul.w	r3, r1, r3
 80109ea:	4413      	add	r3, r2
 80109ec:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80109f0:	2201      	movs	r2, #1
 80109f2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 80109f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109f8:	4999      	ldr	r1, [pc, #612]	; (8010c60 <readCanToStructs+0xe98>)
 80109fa:	f240 4212 	movw	r2, #1042	; 0x412
 80109fe:	fb03 f202 	mul.w	r2, r3, r2
 8010a02:	440a      	add	r2, r1
 8010a04:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8010a08:	7812      	ldrb	r2, [r2, #0]
 8010a0a:	3201      	adds	r2, #1
 8010a0c:	b2d0      	uxtb	r0, r2
 8010a0e:	4a94      	ldr	r2, [pc, #592]	; (8010c60 <readCanToStructs+0xe98>)
 8010a10:	f240 4112 	movw	r1, #1042	; 0x412
 8010a14:	fb01 f303 	mul.w	r3, r1, r3
 8010a18:	4413      	add	r3, r2
 8010a1a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010a1e:	4602      	mov	r2, r0
 8010a20:	701a      	strb	r2, [r3, #0]
				break;
 8010a22:	e305      	b.n	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8010a24:	4b8f      	ldr	r3, [pc, #572]	; (8010c64 <readCanToStructs+0xe9c>)
 8010a26:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010a28:	4b8f      	ldr	r3, [pc, #572]	; (8010c68 <readCanToStructs+0xea0>)
 8010a2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010a2e:	885b      	ldrh	r3, [r3, #2]
 8010a30:	4a8d      	ldr	r2, [pc, #564]	; (8010c68 <readCanToStructs+0xea0>)
 8010a32:	011b      	lsls	r3, r3, #4
 8010a34:	4413      	add	r3, r2
 8010a36:	3304      	adds	r3, #4
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010a3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d110      	bne.n	8010a68 <readCanToStructs+0xca0>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010a46:	2208      	movs	r2, #8
 8010a48:	2100      	movs	r1, #0
 8010a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a4c:	f011 fca2 	bl	8022394 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a54:	4a82      	ldr	r2, [pc, #520]	; (8010c60 <readCanToStructs+0xe98>)
 8010a56:	f240 4112 	movw	r1, #1042	; 0x412
 8010a5a:	fb01 f303 	mul.w	r3, r1, r3
 8010a5e:	4413      	add	r3, r2
 8010a60:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010a64:	2200      	movs	r2, #0
 8010a66:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8010a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a6c:	4a7c      	ldr	r2, [pc, #496]	; (8010c60 <readCanToStructs+0xe98>)
 8010a6e:	f240 4112 	movw	r1, #1042	; 0x412
 8010a72:	fb01 f303 	mul.w	r3, r1, r3
 8010a76:	4413      	add	r3, r2
 8010a78:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d014      	beq.n	8010ab0 <readCanToStructs+0xce8>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8010a86:	4879      	ldr	r0, [pc, #484]	; (8010c6c <readCanToStructs+0xea4>)
 8010a88:	f011 fe08 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010a8c:	2208      	movs	r2, #8
 8010a8e:	2100      	movs	r1, #0
 8010a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a92:	f011 fc7f 	bl	8022394 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a9a:	4a71      	ldr	r2, [pc, #452]	; (8010c60 <readCanToStructs+0xe98>)
 8010a9c:	f240 4112 	movw	r1, #1042	; 0x412
 8010aa0:	fb01 f303 	mul.w	r3, r1, r3
 8010aa4:	4413      	add	r3, r2
 8010aa6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010aaa:	2200      	movs	r2, #0
 8010aac:	701a      	strb	r2, [r3, #0]
					break;
 8010aae:	e2bf      	b.n	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010ab0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	00db      	lsls	r3, r3, #3
 8010ab8:	1a9b      	subs	r3, r3, r2
 8010aba:	461a      	mov	r2, r3
 8010abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abe:	4413      	add	r3, r2
 8010ac0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010ac8:	e016      	b.n	8010af8 <readCanToStructs+0xd30>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010aca:	4b67      	ldr	r3, [pc, #412]	; (8010c68 <readCanToStructs+0xea0>)
 8010acc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ad0:	885b      	ldrh	r3, [r3, #2]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ad8:	4963      	ldr	r1, [pc, #396]	; (8010c68 <readCanToStructs+0xea0>)
 8010ada:	0112      	lsls	r2, r2, #4
 8010adc:	440a      	add	r2, r1
 8010ade:	4413      	add	r3, r2
 8010ae0:	3304      	adds	r3, #4
 8010ae2:	781a      	ldrb	r2, [r3, #0]
 8010ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae6:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aea:	3301      	adds	r3, #1
 8010aec:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010aee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010af2:	3301      	adds	r3, #1
 8010af4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010af8:	4b5b      	ldr	r3, [pc, #364]	; (8010c68 <readCanToStructs+0xea0>)
 8010afa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010afe:	885b      	ldrh	r3, [r3, #2]
 8010b00:	4a59      	ldr	r2, [pc, #356]	; (8010c68 <readCanToStructs+0xea0>)
 8010b02:	011b      	lsls	r3, r3, #4
 8010b04:	4413      	add	r3, r2
 8010b06:	330c      	adds	r3, #12
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d3db      	bcc.n	8010aca <readCanToStructs+0xd02>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8010b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b16:	4a52      	ldr	r2, [pc, #328]	; (8010c60 <readCanToStructs+0xe98>)
 8010b18:	f240 4112 	movw	r1, #1042	; 0x412
 8010b1c:	fb01 f303 	mul.w	r3, r1, r3
 8010b20:	4413      	add	r3, r2
 8010b22:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	461a      	mov	r2, r3
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	1a9a      	subs	r2, r3, r2
 8010b30:	4b4d      	ldr	r3, [pc, #308]	; (8010c68 <readCanToStructs+0xea0>)
 8010b32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b36:	885b      	ldrh	r3, [r3, #2]
 8010b38:	494b      	ldr	r1, [pc, #300]	; (8010c68 <readCanToStructs+0xea0>)
 8010b3a:	011b      	lsls	r3, r3, #4
 8010b3c:	440b      	add	r3, r1
 8010b3e:	330c      	adds	r3, #12
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	3b01      	subs	r3, #1
 8010b44:	4413      	add	r3, r2
 8010b46:	2b07      	cmp	r3, #7
 8010b48:	d912      	bls.n	8010b70 <readCanToStructs+0xda8>
					printf("Received Fault Injection Data\n");
 8010b4a:	4849      	ldr	r0, [pc, #292]	; (8010c70 <readCanToStructs+0xea8>)
 8010b4c:	f011 fda6 	bl	802269c <puts>
					Is_CAN_Exchange_happening = YES;
 8010b50:	4b48      	ldr	r3, [pc, #288]	; (8010c74 <readCanToStructs+0xeac>)
 8010b52:	2201      	movs	r2, #1
 8010b54:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b5a:	4a41      	ldr	r2, [pc, #260]	; (8010c60 <readCanToStructs+0xe98>)
 8010b5c:	f240 4112 	movw	r1, #1042	; 0x412
 8010b60:	fb01 f303 	mul.w	r3, r1, r3
 8010b64:	4413      	add	r3, r2
 8010b66:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	701a      	strb	r2, [r3, #0]
				break;
 8010b6e:	e25f      	b.n	8011030 <readCanToStructs+0x1268>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8010b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b74:	4a3a      	ldr	r2, [pc, #232]	; (8010c60 <readCanToStructs+0xe98>)
 8010b76:	f240 4112 	movw	r1, #1042	; 0x412
 8010b7a:	fb01 f303 	mul.w	r3, r1, r3
 8010b7e:	4413      	add	r3, r2
 8010b80:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8010b84:	2201      	movs	r2, #1
 8010b86:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8010b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b8c:	4934      	ldr	r1, [pc, #208]	; (8010c60 <readCanToStructs+0xe98>)
 8010b8e:	f240 4212 	movw	r2, #1042	; 0x412
 8010b92:	fb03 f202 	mul.w	r2, r3, r2
 8010b96:	440a      	add	r2, r1
 8010b98:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8010b9c:	7812      	ldrb	r2, [r2, #0]
 8010b9e:	3201      	adds	r2, #1
 8010ba0:	b2d0      	uxtb	r0, r2
 8010ba2:	4a2f      	ldr	r2, [pc, #188]	; (8010c60 <readCanToStructs+0xe98>)
 8010ba4:	f240 4112 	movw	r1, #1042	; 0x412
 8010ba8:	fb01 f303 	mul.w	r3, r1, r3
 8010bac:	4413      	add	r3, r2
 8010bae:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	701a      	strb	r2, [r3, #0]
				break;
 8010bb6:	e23b      	b.n	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8010bb8:	4b2f      	ldr	r3, [pc, #188]	; (8010c78 <readCanToStructs+0xeb0>)
 8010bba:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010bbc:	4b2a      	ldr	r3, [pc, #168]	; (8010c68 <readCanToStructs+0xea0>)
 8010bbe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010bc2:	885b      	ldrh	r3, [r3, #2]
 8010bc4:	4a28      	ldr	r2, [pc, #160]	; (8010c68 <readCanToStructs+0xea0>)
 8010bc6:	011b      	lsls	r3, r3, #4
 8010bc8:	4413      	add	r3, r2
 8010bca:	3304      	adds	r3, #4
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010bd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d110      	bne.n	8010bfc <readCanToStructs+0xe34>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010bda:	2214      	movs	r2, #20
 8010bdc:	2100      	movs	r1, #0
 8010bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010be0:	f011 fbd8 	bl	8022394 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010be4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010be8:	4a1d      	ldr	r2, [pc, #116]	; (8010c60 <readCanToStructs+0xe98>)
 8010bea:	f240 4112 	movw	r1, #1042	; 0x412
 8010bee:	fb01 f303 	mul.w	r3, r1, r3
 8010bf2:	4413      	add	r3, r2
 8010bf4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8010bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c00:	4a17      	ldr	r2, [pc, #92]	; (8010c60 <readCanToStructs+0xe98>)
 8010c02:	f240 4112 	movw	r1, #1042	; 0x412
 8010c06:	fb01 f303 	mul.w	r3, r1, r3
 8010c0a:	4413      	add	r3, r2
 8010c0c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d014      	beq.n	8010c44 <readCanToStructs+0xe7c>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8010c1a:	4818      	ldr	r0, [pc, #96]	; (8010c7c <readCanToStructs+0xeb4>)
 8010c1c:	f011 fd3e 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010c20:	2214      	movs	r2, #20
 8010c22:	2100      	movs	r1, #0
 8010c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c26:	f011 fbb5 	bl	8022394 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c2e:	4a0c      	ldr	r2, [pc, #48]	; (8010c60 <readCanToStructs+0xe98>)
 8010c30:	f240 4112 	movw	r1, #1042	; 0x412
 8010c34:	fb01 f303 	mul.w	r3, r1, r3
 8010c38:	4413      	add	r3, r2
 8010c3a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010c3e:	2200      	movs	r2, #0
 8010c40:	701a      	strb	r2, [r3, #0]
					break;
 8010c42:	e1f5      	b.n	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010c44:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010c48:	4613      	mov	r3, r2
 8010c4a:	00db      	lsls	r3, r3, #3
 8010c4c:	1a9b      	subs	r3, r3, r2
 8010c4e:	461a      	mov	r2, r3
 8010c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c52:	4413      	add	r3, r2
 8010c54:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010c56:	2301      	movs	r3, #1
 8010c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010c5c:	e027      	b.n	8010cae <readCanToStructs+0xee6>
 8010c5e:	bf00      	nop
 8010c60:	20005234 	.word	0x20005234
 8010c64:	2000195c 	.word	0x2000195c
 8010c68:	20005a58 	.word	0x20005a58
 8010c6c:	08026b00 	.word	0x08026b00
 8010c70:	08026b20 	.word	0x08026b20
 8010c74:	20000108 	.word	0x20000108
 8010c78:	20002024 	.word	0x20002024
 8010c7c:	08026b40 	.word	0x08026b40
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010c80:	4bb9      	ldr	r3, [pc, #740]	; (8010f68 <readCanToStructs+0x11a0>)
 8010c82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c86:	885b      	ldrh	r3, [r3, #2]
 8010c88:	461a      	mov	r2, r3
 8010c8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c8e:	49b6      	ldr	r1, [pc, #728]	; (8010f68 <readCanToStructs+0x11a0>)
 8010c90:	0112      	lsls	r2, r2, #4
 8010c92:	440a      	add	r2, r1
 8010c94:	4413      	add	r3, r2
 8010c96:	3304      	adds	r3, #4
 8010c98:	781a      	ldrb	r2, [r3, #0]
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010ca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ca8:	3301      	adds	r3, #1
 8010caa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010cae:	4bae      	ldr	r3, [pc, #696]	; (8010f68 <readCanToStructs+0x11a0>)
 8010cb0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cb4:	885b      	ldrh	r3, [r3, #2]
 8010cb6:	4aac      	ldr	r2, [pc, #688]	; (8010f68 <readCanToStructs+0x11a0>)
 8010cb8:	011b      	lsls	r3, r3, #4
 8010cba:	4413      	add	r3, r2
 8010cbc:	330c      	adds	r3, #12
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d3db      	bcc.n	8010c80 <readCanToStructs+0xeb8>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8010cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ccc:	4aa7      	ldr	r2, [pc, #668]	; (8010f6c <readCanToStructs+0x11a4>)
 8010cce:	f240 4112 	movw	r1, #1042	; 0x412
 8010cd2:	fb01 f303 	mul.w	r3, r1, r3
 8010cd6:	4413      	add	r3, r2
 8010cd8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	461a      	mov	r2, r3
 8010ce0:	4613      	mov	r3, r2
 8010ce2:	00db      	lsls	r3, r3, #3
 8010ce4:	1a9a      	subs	r2, r3, r2
 8010ce6:	4ba0      	ldr	r3, [pc, #640]	; (8010f68 <readCanToStructs+0x11a0>)
 8010ce8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cec:	885b      	ldrh	r3, [r3, #2]
 8010cee:	499e      	ldr	r1, [pc, #632]	; (8010f68 <readCanToStructs+0x11a0>)
 8010cf0:	011b      	lsls	r3, r3, #4
 8010cf2:	440b      	add	r3, r1
 8010cf4:	330c      	adds	r3, #12
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	3b01      	subs	r3, #1
 8010cfa:	4413      	add	r3, r2
 8010cfc:	2b13      	cmp	r3, #19
 8010cfe:	d954      	bls.n	8010daa <readCanToStructs+0xfe2>
					uint16_t CRC16 = 0;
 8010d00:	2300      	movs	r3, #0
 8010d02:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 8010d04:	2300      	movs	r3, #0
 8010d06:	603b      	str	r3, [r7, #0]
 8010d08:	1d3b      	adds	r3, r7, #4
 8010d0a:	2224      	movs	r2, #36	; 0x24
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f011 fb40 	bl	8022394 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8010d14:	463b      	mov	r3, r7
 8010d16:	2214      	movs	r2, #20
 8010d18:	4995      	ldr	r1, [pc, #596]	; (8010f70 <readCanToStructs+0x11a8>)
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f011 fb12 	bl	8022344 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8010d20:	463b      	mov	r3, r7
 8010d22:	2214      	movs	r2, #20
 8010d24:	4619      	mov	r1, r3
 8010d26:	2000      	movs	r0, #0
 8010d28:	f001 ff80 	bl	8012c2c <GetCRC16>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 8010d30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10c      	bne.n	8010d50 <readCanToStructs+0xf88>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d3a:	4a8c      	ldr	r2, [pc, #560]	; (8010f6c <readCanToStructs+0x11a4>)
 8010d3c:	f240 4112 	movw	r1, #1042	; 0x412
 8010d40:	fb01 f303 	mul.w	r3, r1, r3
 8010d44:	4413      	add	r3, r2
 8010d46:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	701a      	strb	r2, [r3, #0]
				break;
 8010d4e:	e16f      	b.n	8011030 <readCanToStructs+0x1268>
						if(Debug_flag == 1)
 8010d50:	4b88      	ldr	r3, [pc, #544]	; (8010f74 <readCanToStructs+0x11ac>)
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d10a      	bne.n	8010d6e <readCanToStructs+0xfa6>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8010d58:	4b85      	ldr	r3, [pc, #532]	; (8010f70 <readCanToStructs+0x11a8>)
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	4a86      	ldr	r2, [pc, #536]	; (8010f78 <readCanToStructs+0x11b0>)
 8010d5e:	3366      	adds	r3, #102	; 0x66
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	4413      	add	r3, r2
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	4619      	mov	r1, r3
 8010d68:	4884      	ldr	r0, [pc, #528]	; (8010f7c <readCanToStructs+0x11b4>)
 8010d6a:	f011 fbfb 	bl	8022564 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8010d6e:	4b80      	ldr	r3, [pc, #512]	; (8010f70 <readCanToStructs+0x11a8>)
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	461a      	mov	r2, r3
 8010d74:	4613      	mov	r3, r2
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	4413      	add	r3, r2
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	4a80      	ldr	r2, [pc, #512]	; (8010f80 <readCanToStructs+0x11b8>)
 8010d7e:	4413      	add	r3, r2
 8010d80:	2214      	movs	r2, #20
 8010d82:	497b      	ldr	r1, [pc, #492]	; (8010f70 <readCanToStructs+0x11a8>)
 8010d84:	4618      	mov	r0, r3
 8010d86:	f011 fadd 	bl	8022344 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8010d8a:	4b7e      	ldr	r3, [pc, #504]	; (8010f84 <readCanToStructs+0x11bc>)
 8010d8c:	2201      	movs	r2, #1
 8010d8e:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d94:	4a75      	ldr	r2, [pc, #468]	; (8010f6c <readCanToStructs+0x11a4>)
 8010d96:	f240 4112 	movw	r1, #1042	; 0x412
 8010d9a:	fb01 f303 	mul.w	r3, r1, r3
 8010d9e:	4413      	add	r3, r2
 8010da0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010da4:	2200      	movs	r2, #0
 8010da6:	701a      	strb	r2, [r3, #0]
				break;
 8010da8:	e142      	b.n	8011030 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8010daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010dae:	4a6f      	ldr	r2, [pc, #444]	; (8010f6c <readCanToStructs+0x11a4>)
 8010db0:	f240 4112 	movw	r1, #1042	; 0x412
 8010db4:	fb01 f303 	mul.w	r3, r1, r3
 8010db8:	4413      	add	r3, r2
 8010dba:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8010dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010dc6:	4969      	ldr	r1, [pc, #420]	; (8010f6c <readCanToStructs+0x11a4>)
 8010dc8:	f240 4212 	movw	r2, #1042	; 0x412
 8010dcc:	fb03 f202 	mul.w	r2, r3, r2
 8010dd0:	440a      	add	r2, r1
 8010dd2:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8010dd6:	7812      	ldrb	r2, [r2, #0]
 8010dd8:	3201      	adds	r2, #1
 8010dda:	b2d0      	uxtb	r0, r2
 8010ddc:	4a63      	ldr	r2, [pc, #396]	; (8010f6c <readCanToStructs+0x11a4>)
 8010dde:	f240 4112 	movw	r1, #1042	; 0x412
 8010de2:	fb01 f303 	mul.w	r3, r1, r3
 8010de6:	4413      	add	r3, r2
 8010de8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010dec:	4602      	mov	r2, r0
 8010dee:	701a      	strb	r2, [r3, #0]
				break;
 8010df0:	e11e      	b.n	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8010df2:	4b5f      	ldr	r3, [pc, #380]	; (8010f70 <readCanToStructs+0x11a8>)
 8010df4:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010df6:	4b5c      	ldr	r3, [pc, #368]	; (8010f68 <readCanToStructs+0x11a0>)
 8010df8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010dfc:	885b      	ldrh	r3, [r3, #2]
 8010dfe:	4a5a      	ldr	r2, [pc, #360]	; (8010f68 <readCanToStructs+0x11a0>)
 8010e00:	011b      	lsls	r3, r3, #4
 8010e02:	4413      	add	r3, r2
 8010e04:	3304      	adds	r3, #4
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010e0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d110      	bne.n	8010e36 <readCanToStructs+0x106e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010e14:	2214      	movs	r2, #20
 8010e16:	2100      	movs	r1, #0
 8010e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e1a:	f011 fabb 	bl	8022394 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e22:	4a52      	ldr	r2, [pc, #328]	; (8010f6c <readCanToStructs+0x11a4>)
 8010e24:	f240 4112 	movw	r1, #1042	; 0x412
 8010e28:	fb01 f303 	mul.w	r3, r1, r3
 8010e2c:	4413      	add	r3, r2
 8010e2e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010e32:	2200      	movs	r2, #0
 8010e34:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8010e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e3a:	4a4c      	ldr	r2, [pc, #304]	; (8010f6c <readCanToStructs+0x11a4>)
 8010e3c:	f240 4112 	movw	r1, #1042	; 0x412
 8010e40:	fb01 f303 	mul.w	r3, r1, r3
 8010e44:	4413      	add	r3, r2
 8010e46:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d014      	beq.n	8010e7e <readCanToStructs+0x10b6>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8010e54:	484c      	ldr	r0, [pc, #304]	; (8010f88 <readCanToStructs+0x11c0>)
 8010e56:	f011 fc21 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010e5a:	2214      	movs	r2, #20
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e60:	f011 fa98 	bl	8022394 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010e64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e68:	4a40      	ldr	r2, [pc, #256]	; (8010f6c <readCanToStructs+0x11a4>)
 8010e6a:	f240 4112 	movw	r1, #1042	; 0x412
 8010e6e:	fb01 f303 	mul.w	r3, r1, r3
 8010e72:	4413      	add	r3, r2
 8010e74:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010e78:	2200      	movs	r2, #0
 8010e7a:	701a      	strb	r2, [r3, #0]
					break;
 8010e7c:	e0d8      	b.n	8011030 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010e7e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010e82:	4613      	mov	r3, r2
 8010e84:	00db      	lsls	r3, r3, #3
 8010e86:	1a9b      	subs	r3, r3, r2
 8010e88:	461a      	mov	r2, r3
 8010e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8c:	4413      	add	r3, r2
 8010e8e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010e90:	2301      	movs	r3, #1
 8010e92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010e96:	e016      	b.n	8010ec6 <readCanToStructs+0x10fe>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010e98:	4b33      	ldr	r3, [pc, #204]	; (8010f68 <readCanToStructs+0x11a0>)
 8010e9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e9e:	885b      	ldrh	r3, [r3, #2]
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ea6:	4930      	ldr	r1, [pc, #192]	; (8010f68 <readCanToStructs+0x11a0>)
 8010ea8:	0112      	lsls	r2, r2, #4
 8010eaa:	440a      	add	r2, r1
 8010eac:	4413      	add	r3, r2
 8010eae:	3304      	adds	r3, #4
 8010eb0:	781a      	ldrb	r2, [r3, #0]
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb8:	3301      	adds	r3, #1
 8010eba:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010ebc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010ec6:	4b28      	ldr	r3, [pc, #160]	; (8010f68 <readCanToStructs+0x11a0>)
 8010ec8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ecc:	885b      	ldrh	r3, [r3, #2]
 8010ece:	4a26      	ldr	r2, [pc, #152]	; (8010f68 <readCanToStructs+0x11a0>)
 8010ed0:	011b      	lsls	r3, r3, #4
 8010ed2:	4413      	add	r3, r2
 8010ed4:	330c      	adds	r3, #12
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d3db      	bcc.n	8010e98 <readCanToStructs+0x10d0>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8010ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ee4:	4a21      	ldr	r2, [pc, #132]	; (8010f6c <readCanToStructs+0x11a4>)
 8010ee6:	f240 4112 	movw	r1, #1042	; 0x412
 8010eea:	fb01 f303 	mul.w	r3, r1, r3
 8010eee:	4413      	add	r3, r2
 8010ef0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	4613      	mov	r3, r2
 8010efa:	00db      	lsls	r3, r3, #3
 8010efc:	1a9a      	subs	r2, r3, r2
 8010efe:	4b1a      	ldr	r3, [pc, #104]	; (8010f68 <readCanToStructs+0x11a0>)
 8010f00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f04:	885b      	ldrh	r3, [r3, #2]
 8010f06:	4918      	ldr	r1, [pc, #96]	; (8010f68 <readCanToStructs+0x11a0>)
 8010f08:	011b      	lsls	r3, r3, #4
 8010f0a:	440b      	add	r3, r1
 8010f0c:	330c      	adds	r3, #12
 8010f0e:	781b      	ldrb	r3, [r3, #0]
 8010f10:	3b01      	subs	r3, #1
 8010f12:	4413      	add	r3, r2
 8010f14:	2b13      	cmp	r3, #19
 8010f16:	d966      	bls.n	8010fe6 <readCanToStructs+0x121e>
					uint16_t CRC16 = 0;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	603b      	str	r3, [r7, #0]
 8010f20:	1d3b      	adds	r3, r7, #4
 8010f22:	2224      	movs	r2, #36	; 0x24
 8010f24:	2100      	movs	r1, #0
 8010f26:	4618      	mov	r0, r3
 8010f28:	f011 fa34 	bl	8022394 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8010f2c:	463b      	mov	r3, r7
 8010f2e:	2214      	movs	r2, #20
 8010f30:	490f      	ldr	r1, [pc, #60]	; (8010f70 <readCanToStructs+0x11a8>)
 8010f32:	4618      	mov	r0, r3
 8010f34:	f011 fa06 	bl	8022344 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8010f38:	463b      	mov	r3, r7
 8010f3a:	2214      	movs	r2, #20
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	2000      	movs	r0, #0
 8010f40:	f001 fe74 	bl	8012c2c <GetCRC16>
 8010f44:	4603      	mov	r3, r0
 8010f46:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 8010f48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d11e      	bne.n	8010f8c <readCanToStructs+0x11c4>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f52:	4a06      	ldr	r2, [pc, #24]	; (8010f6c <readCanToStructs+0x11a4>)
 8010f54:	f240 4112 	movw	r1, #1042	; 0x412
 8010f58:	fb01 f303 	mul.w	r3, r1, r3
 8010f5c:	4413      	add	r3, r2
 8010f5e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010f62:	2200      	movs	r2, #0
 8010f64:	701a      	strb	r2, [r3, #0]
				break;
 8010f66:	e063      	b.n	8011030 <readCanToStructs+0x1268>
 8010f68:	20005a58 	.word	0x20005a58
 8010f6c:	20005234 	.word	0x20005234
 8010f70:	20002024 	.word	0x20002024
 8010f74:	20000645 	.word	0x20000645
 8010f78:	20000304 	.word	0x20000304
 8010f7c:	08026b5c 	.word	0x08026b5c
 8010f80:	20001f48 	.word	0x20001f48
 8010f84:	20000108 	.word	0x20000108
 8010f88:	08026b70 	.word	0x08026b70
						if(Debug_flag == 1)
 8010f8c:	4bc7      	ldr	r3, [pc, #796]	; (80112ac <readCanToStructs+0x14e4>)
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d10a      	bne.n	8010faa <readCanToStructs+0x11e2>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8010f94:	4bc6      	ldr	r3, [pc, #792]	; (80112b0 <readCanToStructs+0x14e8>)
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	4ac6      	ldr	r2, [pc, #792]	; (80112b4 <readCanToStructs+0x14ec>)
 8010f9a:	3366      	adds	r3, #102	; 0x66
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	4413      	add	r3, r2
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	48c4      	ldr	r0, [pc, #784]	; (80112b8 <readCanToStructs+0x14f0>)
 8010fa6:	f011 fadd 	bl	8022564 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8010faa:	4bc1      	ldr	r3, [pc, #772]	; (80112b0 <readCanToStructs+0x14e8>)
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	4613      	mov	r3, r2
 8010fb2:	009b      	lsls	r3, r3, #2
 8010fb4:	4413      	add	r3, r2
 8010fb6:	009b      	lsls	r3, r3, #2
 8010fb8:	4ac0      	ldr	r2, [pc, #768]	; (80112bc <readCanToStructs+0x14f4>)
 8010fba:	4413      	add	r3, r2
 8010fbc:	2214      	movs	r2, #20
 8010fbe:	49bc      	ldr	r1, [pc, #752]	; (80112b0 <readCanToStructs+0x14e8>)
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f011 f9bf 	bl	8022344 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8010fc6:	4bbe      	ldr	r3, [pc, #760]	; (80112c0 <readCanToStructs+0x14f8>)
 8010fc8:	2201      	movs	r2, #1
 8010fca:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fd0:	4abc      	ldr	r2, [pc, #752]	; (80112c4 <readCanToStructs+0x14fc>)
 8010fd2:	f240 4112 	movw	r1, #1042	; 0x412
 8010fd6:	fb01 f303 	mul.w	r3, r1, r3
 8010fda:	4413      	add	r3, r2
 8010fdc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	701a      	strb	r2, [r3, #0]
				break;
 8010fe4:	e024      	b.n	8011030 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8010fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fea:	4ab6      	ldr	r2, [pc, #728]	; (80112c4 <readCanToStructs+0x14fc>)
 8010fec:	f240 4112 	movw	r1, #1042	; 0x412
 8010ff0:	fb01 f303 	mul.w	r3, r1, r3
 8010ff4:	4413      	add	r3, r2
 8010ff6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8010ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011002:	49b0      	ldr	r1, [pc, #704]	; (80112c4 <readCanToStructs+0x14fc>)
 8011004:	f240 4212 	movw	r2, #1042	; 0x412
 8011008:	fb03 f202 	mul.w	r2, r3, r2
 801100c:	440a      	add	r2, r1
 801100e:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8011012:	7812      	ldrb	r2, [r2, #0]
 8011014:	3201      	adds	r2, #1
 8011016:	b2d0      	uxtb	r0, r2
 8011018:	4aaa      	ldr	r2, [pc, #680]	; (80112c4 <readCanToStructs+0x14fc>)
 801101a:	f240 4112 	movw	r1, #1042	; 0x412
 801101e:	fb01 f303 	mul.w	r3, r1, r3
 8011022:	4413      	add	r3, r2
 8011024:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011028:	4602      	mov	r2, r0
 801102a:	701a      	strb	r2, [r3, #0]
				break;
 801102c:	e000      	b.n	8011030 <readCanToStructs+0x1268>
				break;
 801102e:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011030:	4ba5      	ldr	r3, [pc, #660]	; (80112c8 <readCanToStructs+0x1500>)
 8011032:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011036:	885b      	ldrh	r3, [r3, #2]
 8011038:	011b      	lsls	r3, r3, #4
 801103a:	4aa3      	ldr	r2, [pc, #652]	; (80112c8 <readCanToStructs+0x1500>)
 801103c:	4413      	add	r3, r2
 801103e:	2210      	movs	r2, #16
 8011040:	2100      	movs	r1, #0
 8011042:	4618      	mov	r0, r3
 8011044:	f011 f9a6 	bl	8022394 <memset>
			canRead.Out++;
 8011048:	4b9f      	ldr	r3, [pc, #636]	; (80112c8 <readCanToStructs+0x1500>)
 801104a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801104e:	885b      	ldrh	r3, [r3, #2]
 8011050:	3301      	adds	r3, #1
 8011052:	b29a      	uxth	r2, r3
 8011054:	4b9c      	ldr	r3, [pc, #624]	; (80112c8 <readCanToStructs+0x1500>)
 8011056:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801105a:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801105c:	4b9a      	ldr	r3, [pc, #616]	; (80112c8 <readCanToStructs+0x1500>)
 801105e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011062:	885b      	ldrh	r3, [r3, #2]
 8011064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011068:	d104      	bne.n	8011074 <readCanToStructs+0x12ac>
				canRead.Out = 0;
 801106a:	4b97      	ldr	r3, [pc, #604]	; (80112c8 <readCanToStructs+0x1500>)
 801106c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011070:	2200      	movs	r2, #0
 8011072:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011074:	f7fe fe52 	bl	800fd1c <canDataReady>
 8011078:	4603      	mov	r3, r0
 801107a:	2b00      	cmp	r3, #0
 801107c:	f47e aecb 	bne.w	800fe16 <readCanToStructs+0x4e>
	break;
 8011080:	f001 bd6a 	b.w	8012b58 <readCanToStructs+0x2d90>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011084:	4b90      	ldr	r3, [pc, #576]	; (80112c8 <readCanToStructs+0x1500>)
 8011086:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801108a:	885b      	ldrh	r3, [r3, #2]
 801108c:	4a8e      	ldr	r2, [pc, #568]	; (80112c8 <readCanToStructs+0x1500>)
 801108e:	011b      	lsls	r3, r3, #4
 8011090:	4413      	add	r3, r2
 8011092:	330f      	adds	r3, #15
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	3b01      	subs	r3, #1
 8011098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 801109c:	4b8a      	ldr	r3, [pc, #552]	; (80112c8 <readCanToStructs+0x1500>)
 801109e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110a2:	885b      	ldrh	r3, [r3, #2]
 80110a4:	4a88      	ldr	r2, [pc, #544]	; (80112c8 <readCanToStructs+0x1500>)
 80110a6:	011b      	lsls	r3, r3, #4
 80110a8:	4413      	add	r3, r2
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80110b0:	f200 8672 	bhi.w	8011d98 <readCanToStructs+0x1fd0>
 80110b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110b8:	d80a      	bhi.n	80110d0 <readCanToStructs+0x1308>
 80110ba:	f240 1203 	movw	r2, #259	; 0x103
 80110be:	4293      	cmp	r3, r2
 80110c0:	d01e      	beq.n	8011100 <readCanToStructs+0x1338>
 80110c2:	f240 1209 	movw	r2, #265	; 0x109
 80110c6:	4293      	cmp	r3, r2
 80110c8:	f000 8108 	beq.w	80112dc <readCanToStructs+0x1514>
				break;
 80110cc:	f000 be64 	b.w	8011d98 <readCanToStructs+0x1fd0>
 80110d0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80110d4:	2b07      	cmp	r3, #7
 80110d6:	f200 865f 	bhi.w	8011d98 <readCanToStructs+0x1fd0>
 80110da:	a201      	add	r2, pc, #4	; (adr r2, 80110e0 <readCanToStructs+0x1318>)
 80110dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110e0:	08011489 	.word	0x08011489
 80110e4:	0801166d 	.word	0x0801166d
 80110e8:	08011d99 	.word	0x08011d99
 80110ec:	08011d99 	.word	0x08011d99
 80110f0:	08011bfb 	.word	0x08011bfb
 80110f4:	08011d99 	.word	0x08011d99
 80110f8:	0801181d 	.word	0x0801181d
 80110fc:	08011a0f 	.word	0x08011a0f
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011100:	4b72      	ldr	r3, [pc, #456]	; (80112cc <readCanToStructs+0x1504>)
 8011102:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011104:	4b70      	ldr	r3, [pc, #448]	; (80112c8 <readCanToStructs+0x1500>)
 8011106:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801110a:	885b      	ldrh	r3, [r3, #2]
 801110c:	4a6e      	ldr	r2, [pc, #440]	; (80112c8 <readCanToStructs+0x1500>)
 801110e:	011b      	lsls	r3, r3, #4
 8011110:	4413      	add	r3, r2
 8011112:	3304      	adds	r3, #4
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801111a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801111e:	2b00      	cmp	r3, #0
 8011120:	d110      	bne.n	8011144 <readCanToStructs+0x137c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011122:	2206      	movs	r2, #6
 8011124:	2100      	movs	r1, #0
 8011126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011128:	f011 f934 	bl	8022394 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801112c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011130:	4a64      	ldr	r2, [pc, #400]	; (80112c4 <readCanToStructs+0x14fc>)
 8011132:	f240 4112 	movw	r1, #1042	; 0x412
 8011136:	fb01 f303 	mul.w	r3, r1, r3
 801113a:	4413      	add	r3, r2
 801113c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011140:	2200      	movs	r2, #0
 8011142:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011148:	4a5e      	ldr	r2, [pc, #376]	; (80112c4 <readCanToStructs+0x14fc>)
 801114a:	f240 4112 	movw	r1, #1042	; 0x412
 801114e:	fb01 f303 	mul.w	r3, r1, r3
 8011152:	4413      	add	r3, r2
 8011154:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801115e:	429a      	cmp	r2, r3
 8011160:	d015      	beq.n	801118e <readCanToStructs+0x13c6>
					printf("GPS Packet Seq no MisMatch\n");
 8011162:	485b      	ldr	r0, [pc, #364]	; (80112d0 <readCanToStructs+0x1508>)
 8011164:	f011 fa9a 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011168:	2206      	movs	r2, #6
 801116a:	2100      	movs	r1, #0
 801116c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801116e:	f011 f911 	bl	8022394 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011176:	4a53      	ldr	r2, [pc, #332]	; (80112c4 <readCanToStructs+0x14fc>)
 8011178:	f240 4112 	movw	r1, #1042	; 0x412
 801117c:	fb01 f303 	mul.w	r3, r1, r3
 8011180:	4413      	add	r3, r2
 8011182:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011186:	2200      	movs	r2, #0
 8011188:	701a      	strb	r2, [r3, #0]
					break;
 801118a:	f000 be0a 	b.w	8011da2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 801118e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011192:	4613      	mov	r3, r2
 8011194:	00db      	lsls	r3, r3, #3
 8011196:	1a9b      	subs	r3, r3, r2
 8011198:	461a      	mov	r2, r3
 801119a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119c:	4413      	add	r3, r2
 801119e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80111a0:	2301      	movs	r3, #1
 80111a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80111a6:	e016      	b.n	80111d6 <readCanToStructs+0x140e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80111a8:	4b47      	ldr	r3, [pc, #284]	; (80112c8 <readCanToStructs+0x1500>)
 80111aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111ae:	885b      	ldrh	r3, [r3, #2]
 80111b0:	461a      	mov	r2, r3
 80111b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111b6:	4944      	ldr	r1, [pc, #272]	; (80112c8 <readCanToStructs+0x1500>)
 80111b8:	0112      	lsls	r2, r2, #4
 80111ba:	440a      	add	r2, r1
 80111bc:	4413      	add	r3, r2
 80111be:	3304      	adds	r3, #4
 80111c0:	781a      	ldrb	r2, [r3, #0]
 80111c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	3301      	adds	r3, #1
 80111ca:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80111cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111d0:	3301      	adds	r3, #1
 80111d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80111d6:	4b3c      	ldr	r3, [pc, #240]	; (80112c8 <readCanToStructs+0x1500>)
 80111d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111dc:	885b      	ldrh	r3, [r3, #2]
 80111de:	4a3a      	ldr	r2, [pc, #232]	; (80112c8 <readCanToStructs+0x1500>)
 80111e0:	011b      	lsls	r3, r3, #4
 80111e2:	4413      	add	r3, r2
 80111e4:	330c      	adds	r3, #12
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d3db      	bcc.n	80111a8 <readCanToStructs+0x13e0>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80111f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111f4:	4a33      	ldr	r2, [pc, #204]	; (80112c4 <readCanToStructs+0x14fc>)
 80111f6:	f240 4112 	movw	r1, #1042	; 0x412
 80111fa:	fb01 f303 	mul.w	r3, r1, r3
 80111fe:	4413      	add	r3, r2
 8011200:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	461a      	mov	r2, r3
 8011208:	4613      	mov	r3, r2
 801120a:	00db      	lsls	r3, r3, #3
 801120c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801120e:	4b2e      	ldr	r3, [pc, #184]	; (80112c8 <readCanToStructs+0x1500>)
 8011210:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011214:	885b      	ldrh	r3, [r3, #2]
 8011216:	492c      	ldr	r1, [pc, #176]	; (80112c8 <readCanToStructs+0x1500>)
 8011218:	011b      	lsls	r3, r3, #4
 801121a:	440b      	add	r3, r1
 801121c:	330c      	adds	r3, #12
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	3b01      	subs	r3, #1
 8011222:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011224:	2b05      	cmp	r3, #5
 8011226:	d91c      	bls.n	8011262 <readCanToStructs+0x149a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011228:	4b2a      	ldr	r3, [pc, #168]	; (80112d4 <readCanToStructs+0x150c>)
 801122a:	4a28      	ldr	r2, [pc, #160]	; (80112cc <readCanToStructs+0x1504>)
 801122c:	6811      	ldr	r1, [r2, #0]
 801122e:	6019      	str	r1, [r3, #0]
 8011230:	8892      	ldrh	r2, [r2, #4]
 8011232:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011234:	4b1d      	ldr	r3, [pc, #116]	; (80112ac <readCanToStructs+0x14e4>)
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d102      	bne.n	8011242 <readCanToStructs+0x147a>
						printf("GPS_PACKET_RECEIVED\n");
 801123c:	4826      	ldr	r0, [pc, #152]	; (80112d8 <readCanToStructs+0x1510>)
 801123e:	f011 fa2d 	bl	802269c <puts>
					Write_RTC();
 8011242:	f7f9 feb7 	bl	800afb4 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801124a:	4a1e      	ldr	r2, [pc, #120]	; (80112c4 <readCanToStructs+0x14fc>)
 801124c:	f240 4112 	movw	r1, #1042	; 0x412
 8011250:	fb01 f303 	mul.w	r3, r1, r3
 8011254:	4413      	add	r3, r2
 8011256:	f203 2307 	addw	r3, r3, #519	; 0x207
 801125a:	2200      	movs	r2, #0
 801125c:	701a      	strb	r2, [r3, #0]
				break;
 801125e:	f000 bda0 	b.w	8011da2 <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8011262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011266:	4a17      	ldr	r2, [pc, #92]	; (80112c4 <readCanToStructs+0x14fc>)
 8011268:	f240 4112 	movw	r1, #1042	; 0x412
 801126c:	fb01 f303 	mul.w	r3, r1, r3
 8011270:	4413      	add	r3, r2
 8011272:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011276:	2201      	movs	r2, #1
 8011278:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801127a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801127e:	4911      	ldr	r1, [pc, #68]	; (80112c4 <readCanToStructs+0x14fc>)
 8011280:	f240 4212 	movw	r2, #1042	; 0x412
 8011284:	fb03 f202 	mul.w	r2, r3, r2
 8011288:	440a      	add	r2, r1
 801128a:	f202 2207 	addw	r2, r2, #519	; 0x207
 801128e:	7812      	ldrb	r2, [r2, #0]
 8011290:	3201      	adds	r2, #1
 8011292:	b2d0      	uxtb	r0, r2
 8011294:	4a0b      	ldr	r2, [pc, #44]	; (80112c4 <readCanToStructs+0x14fc>)
 8011296:	f240 4112 	movw	r1, #1042	; 0x412
 801129a:	fb01 f303 	mul.w	r3, r1, r3
 801129e:	4413      	add	r3, r2
 80112a0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80112a4:	4602      	mov	r2, r0
 80112a6:	701a      	strb	r2, [r3, #0]
				break;
 80112a8:	f000 bd7b 	b.w	8011da2 <readCanToStructs+0x1fda>
 80112ac:	20000645 	.word	0x20000645
 80112b0:	20002024 	.word	0x20002024
 80112b4:	20000304 	.word	0x20000304
 80112b8:	08026b90 	.word	0x08026b90
 80112bc:	20001f48 	.word	0x20001f48
 80112c0:	20000108 	.word	0x20000108
 80112c4:	20005234 	.word	0x20005234
 80112c8:	20005a58 	.word	0x20005a58
 80112cc:	200027dc 	.word	0x200027dc
 80112d0:	080269cc 	.word	0x080269cc
 80112d4:	200027d4 	.word	0x200027d4
 80112d8:	080269e8 	.word	0x080269e8
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80112dc:	4bc5      	ldr	r3, [pc, #788]	; (80115f4 <readCanToStructs+0x182c>)
 80112de:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80112e0:	4bc5      	ldr	r3, [pc, #788]	; (80115f8 <readCanToStructs+0x1830>)
 80112e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112e6:	885b      	ldrh	r3, [r3, #2]
 80112e8:	4ac3      	ldr	r2, [pc, #780]	; (80115f8 <readCanToStructs+0x1830>)
 80112ea:	011b      	lsls	r3, r3, #4
 80112ec:	4413      	add	r3, r2
 80112ee:	3304      	adds	r3, #4
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80112f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d110      	bne.n	8011320 <readCanToStructs+0x1558>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80112fe:	2206      	movs	r2, #6
 8011300:	2100      	movs	r1, #0
 8011302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011304:	f011 f846 	bl	8022394 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801130c:	4abb      	ldr	r2, [pc, #748]	; (80115fc <readCanToStructs+0x1834>)
 801130e:	f240 4112 	movw	r1, #1042	; 0x412
 8011312:	fb01 f303 	mul.w	r3, r1, r3
 8011316:	4413      	add	r3, r2
 8011318:	f203 2313 	addw	r3, r3, #531	; 0x213
 801131c:	2200      	movs	r2, #0
 801131e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011324:	4ab5      	ldr	r2, [pc, #724]	; (80115fc <readCanToStructs+0x1834>)
 8011326:	f240 4112 	movw	r1, #1042	; 0x412
 801132a:	fb01 f303 	mul.w	r3, r1, r3
 801132e:	4413      	add	r3, r2
 8011330:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801133a:	429a      	cmp	r2, r3
 801133c:	d015      	beq.n	801136a <readCanToStructs+0x15a2>
					printf("GPS2 Packet Seq no MisMatch\n");
 801133e:	48b0      	ldr	r0, [pc, #704]	; (8011600 <readCanToStructs+0x1838>)
 8011340:	f011 f9ac 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011344:	2206      	movs	r2, #6
 8011346:	2100      	movs	r1, #0
 8011348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801134a:	f011 f823 	bl	8022394 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801134e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011352:	4aaa      	ldr	r2, [pc, #680]	; (80115fc <readCanToStructs+0x1834>)
 8011354:	f240 4112 	movw	r1, #1042	; 0x412
 8011358:	fb01 f303 	mul.w	r3, r1, r3
 801135c:	4413      	add	r3, r2
 801135e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011362:	2200      	movs	r2, #0
 8011364:	701a      	strb	r2, [r3, #0]
					break;
 8011366:	f000 bd1c 	b.w	8011da2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 801136a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801136e:	4613      	mov	r3, r2
 8011370:	00db      	lsls	r3, r3, #3
 8011372:	1a9b      	subs	r3, r3, r2
 8011374:	461a      	mov	r2, r3
 8011376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011378:	4413      	add	r3, r2
 801137a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801137c:	2301      	movs	r3, #1
 801137e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011382:	e016      	b.n	80113b2 <readCanToStructs+0x15ea>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011384:	4b9c      	ldr	r3, [pc, #624]	; (80115f8 <readCanToStructs+0x1830>)
 8011386:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801138a:	885b      	ldrh	r3, [r3, #2]
 801138c:	461a      	mov	r2, r3
 801138e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011392:	4999      	ldr	r1, [pc, #612]	; (80115f8 <readCanToStructs+0x1830>)
 8011394:	0112      	lsls	r2, r2, #4
 8011396:	440a      	add	r2, r1
 8011398:	4413      	add	r3, r2
 801139a:	3304      	adds	r3, #4
 801139c:	781a      	ldrb	r2, [r3, #0]
 801139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80113a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a4:	3301      	adds	r3, #1
 80113a6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80113a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113ac:	3301      	adds	r3, #1
 80113ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80113b2:	4b91      	ldr	r3, [pc, #580]	; (80115f8 <readCanToStructs+0x1830>)
 80113b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113b8:	885b      	ldrh	r3, [r3, #2]
 80113ba:	4a8f      	ldr	r2, [pc, #572]	; (80115f8 <readCanToStructs+0x1830>)
 80113bc:	011b      	lsls	r3, r3, #4
 80113be:	4413      	add	r3, r2
 80113c0:	330c      	adds	r3, #12
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d3db      	bcc.n	8011384 <readCanToStructs+0x15bc>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80113cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113d0:	4a8a      	ldr	r2, [pc, #552]	; (80115fc <readCanToStructs+0x1834>)
 80113d2:	f240 4112 	movw	r1, #1042	; 0x412
 80113d6:	fb01 f303 	mul.w	r3, r1, r3
 80113da:	4413      	add	r3, r2
 80113dc:	f203 2313 	addw	r3, r3, #531	; 0x213
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	461a      	mov	r2, r3
 80113e4:	4613      	mov	r3, r2
 80113e6:	00db      	lsls	r3, r3, #3
 80113e8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80113ea:	4b83      	ldr	r3, [pc, #524]	; (80115f8 <readCanToStructs+0x1830>)
 80113ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113f0:	885b      	ldrh	r3, [r3, #2]
 80113f2:	4981      	ldr	r1, [pc, #516]	; (80115f8 <readCanToStructs+0x1830>)
 80113f4:	011b      	lsls	r3, r3, #4
 80113f6:	440b      	add	r3, r1
 80113f8:	330c      	adds	r3, #12
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	3b01      	subs	r3, #1
 80113fe:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011400:	2b05      	cmp	r3, #5
 8011402:	d91c      	bls.n	801143e <readCanToStructs+0x1676>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011404:	4b7f      	ldr	r3, [pc, #508]	; (8011604 <readCanToStructs+0x183c>)
 8011406:	4a7b      	ldr	r2, [pc, #492]	; (80115f4 <readCanToStructs+0x182c>)
 8011408:	6811      	ldr	r1, [r2, #0]
 801140a:	6019      	str	r1, [r3, #0]
 801140c:	8892      	ldrh	r2, [r2, #4]
 801140e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011410:	4b7d      	ldr	r3, [pc, #500]	; (8011608 <readCanToStructs+0x1840>)
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	2b01      	cmp	r3, #1
 8011416:	d102      	bne.n	801141e <readCanToStructs+0x1656>
						printf("GPS2_PACKET_RECEIVED\n");
 8011418:	487c      	ldr	r0, [pc, #496]	; (801160c <readCanToStructs+0x1844>)
 801141a:	f011 f93f 	bl	802269c <puts>
					Write_RTC();
 801141e:	f7f9 fdc9 	bl	800afb4 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011426:	4a75      	ldr	r2, [pc, #468]	; (80115fc <readCanToStructs+0x1834>)
 8011428:	f240 4112 	movw	r1, #1042	; 0x412
 801142c:	fb01 f303 	mul.w	r3, r1, r3
 8011430:	4413      	add	r3, r2
 8011432:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011436:	2200      	movs	r2, #0
 8011438:	701a      	strb	r2, [r3, #0]
				break;
 801143a:	f000 bcb2 	b.w	8011da2 <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 801143e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011442:	4a6e      	ldr	r2, [pc, #440]	; (80115fc <readCanToStructs+0x1834>)
 8011444:	f240 4112 	movw	r1, #1042	; 0x412
 8011448:	fb01 f303 	mul.w	r3, r1, r3
 801144c:	4413      	add	r3, r2
 801144e:	f203 2312 	addw	r3, r3, #530	; 0x212
 8011452:	2201      	movs	r2, #1
 8011454:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8011456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801145a:	4968      	ldr	r1, [pc, #416]	; (80115fc <readCanToStructs+0x1834>)
 801145c:	f240 4212 	movw	r2, #1042	; 0x412
 8011460:	fb03 f202 	mul.w	r2, r3, r2
 8011464:	440a      	add	r2, r1
 8011466:	f202 2213 	addw	r2, r2, #531	; 0x213
 801146a:	7812      	ldrb	r2, [r2, #0]
 801146c:	3201      	adds	r2, #1
 801146e:	b2d0      	uxtb	r0, r2
 8011470:	4a62      	ldr	r2, [pc, #392]	; (80115fc <readCanToStructs+0x1834>)
 8011472:	f240 4112 	movw	r1, #1042	; 0x412
 8011476:	fb01 f303 	mul.w	r3, r1, r3
 801147a:	4413      	add	r3, r2
 801147c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011480:	4602      	mov	r2, r0
 8011482:	701a      	strb	r2, [r3, #0]
				break;
 8011484:	f000 bc8d 	b.w	8011da2 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8011488:	4b61      	ldr	r3, [pc, #388]	; (8011610 <readCanToStructs+0x1848>)
 801148a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801148c:	4b5a      	ldr	r3, [pc, #360]	; (80115f8 <readCanToStructs+0x1830>)
 801148e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011492:	885b      	ldrh	r3, [r3, #2]
 8011494:	4a58      	ldr	r2, [pc, #352]	; (80115f8 <readCanToStructs+0x1830>)
 8011496:	011b      	lsls	r3, r3, #4
 8011498:	4413      	add	r3, r2
 801149a:	3304      	adds	r3, #4
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80114a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d110      	bne.n	80114cc <readCanToStructs+0x1704>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80114aa:	2204      	movs	r2, #4
 80114ac:	2100      	movs	r1, #0
 80114ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114b0:	f010 ff70 	bl	8022394 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80114b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114b8:	4a50      	ldr	r2, [pc, #320]	; (80115fc <readCanToStructs+0x1834>)
 80114ba:	f240 4112 	movw	r1, #1042	; 0x412
 80114be:	fb01 f303 	mul.w	r3, r1, r3
 80114c2:	4413      	add	r3, r2
 80114c4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80114c8:	2200      	movs	r2, #0
 80114ca:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80114cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114d0:	4a4a      	ldr	r2, [pc, #296]	; (80115fc <readCanToStructs+0x1834>)
 80114d2:	f240 4112 	movw	r1, #1042	; 0x412
 80114d6:	fb01 f303 	mul.w	r3, r1, r3
 80114da:	4413      	add	r3, r2
 80114dc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d015      	beq.n	8011516 <readCanToStructs+0x174e>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 80114ea:	484a      	ldr	r0, [pc, #296]	; (8011614 <readCanToStructs+0x184c>)
 80114ec:	f011 f8d6 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80114f0:	2204      	movs	r2, #4
 80114f2:	2100      	movs	r1, #0
 80114f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114f6:	f010 ff4d 	bl	8022394 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80114fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114fe:	4a3f      	ldr	r2, [pc, #252]	; (80115fc <readCanToStructs+0x1834>)
 8011500:	f240 4112 	movw	r1, #1042	; 0x412
 8011504:	fb01 f303 	mul.w	r3, r1, r3
 8011508:	4413      	add	r3, r2
 801150a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801150e:	2200      	movs	r2, #0
 8011510:	701a      	strb	r2, [r3, #0]
					break;
 8011512:	f000 bc46 	b.w	8011da2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011516:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801151a:	4613      	mov	r3, r2
 801151c:	00db      	lsls	r3, r3, #3
 801151e:	1a9b      	subs	r3, r3, r2
 8011520:	461a      	mov	r2, r3
 8011522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011524:	4413      	add	r3, r2
 8011526:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011528:	2301      	movs	r3, #1
 801152a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801152e:	e016      	b.n	801155e <readCanToStructs+0x1796>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011530:	4b31      	ldr	r3, [pc, #196]	; (80115f8 <readCanToStructs+0x1830>)
 8011532:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011536:	885b      	ldrh	r3, [r3, #2]
 8011538:	461a      	mov	r2, r3
 801153a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801153e:	492e      	ldr	r1, [pc, #184]	; (80115f8 <readCanToStructs+0x1830>)
 8011540:	0112      	lsls	r2, r2, #4
 8011542:	440a      	add	r2, r1
 8011544:	4413      	add	r3, r2
 8011546:	3304      	adds	r3, #4
 8011548:	781a      	ldrb	r2, [r3, #0]
 801154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011550:	3301      	adds	r3, #1
 8011552:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011558:	3301      	adds	r3, #1
 801155a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801155e:	4b26      	ldr	r3, [pc, #152]	; (80115f8 <readCanToStructs+0x1830>)
 8011560:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011564:	885b      	ldrh	r3, [r3, #2]
 8011566:	4a24      	ldr	r2, [pc, #144]	; (80115f8 <readCanToStructs+0x1830>)
 8011568:	011b      	lsls	r3, r3, #4
 801156a:	4413      	add	r3, r2
 801156c:	330c      	adds	r3, #12
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011574:	429a      	cmp	r2, r3
 8011576:	d3db      	bcc.n	8011530 <readCanToStructs+0x1768>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801157c:	4a1f      	ldr	r2, [pc, #124]	; (80115fc <readCanToStructs+0x1834>)
 801157e:	f240 4112 	movw	r1, #1042	; 0x412
 8011582:	fb01 f303 	mul.w	r3, r1, r3
 8011586:	4413      	add	r3, r2
 8011588:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	461a      	mov	r2, r3
 8011590:	4613      	mov	r3, r2
 8011592:	00db      	lsls	r3, r3, #3
 8011594:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011596:	4b18      	ldr	r3, [pc, #96]	; (80115f8 <readCanToStructs+0x1830>)
 8011598:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801159c:	885b      	ldrh	r3, [r3, #2]
 801159e:	4916      	ldr	r1, [pc, #88]	; (80115f8 <readCanToStructs+0x1830>)
 80115a0:	011b      	lsls	r3, r3, #4
 80115a2:	440b      	add	r3, r1
 80115a4:	330c      	adds	r3, #12
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	3b01      	subs	r3, #1
 80115aa:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80115ac:	2b03      	cmp	r3, #3
 80115ae:	d939      	bls.n	8011624 <readCanToStructs+0x185c>
 80115b0:	4b17      	ldr	r3, [pc, #92]	; (8011610 <readCanToStructs+0x1848>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 80115b6:	4b18      	ldr	r3, [pc, #96]	; (8011618 <readCanToStructs+0x1850>)
 80115b8:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 80115ba:	4b13      	ldr	r3, [pc, #76]	; (8011608 <readCanToStructs+0x1840>)
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d102      	bne.n	80115c8 <readCanToStructs+0x1800>
						printf("O_Info1_RCV\n");
 80115c2:	4816      	ldr	r0, [pc, #88]	; (801161c <readCanToStructs+0x1854>)
 80115c4:	f011 f86a 	bl	802269c <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80115c8:	4b15      	ldr	r3, [pc, #84]	; (8011620 <readCanToStructs+0x1858>)
 80115ca:	2201      	movs	r2, #1
 80115cc:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80115ce:	f003 ffbf 	bl	8015550 <HAL_GetTick>
 80115d2:	4603      	mov	r3, r0
 80115d4:	4a12      	ldr	r2, [pc, #72]	; (8011620 <readCanToStructs+0x1858>)
 80115d6:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80115d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115dc:	4a07      	ldr	r2, [pc, #28]	; (80115fc <readCanToStructs+0x1834>)
 80115de:	f240 4112 	movw	r1, #1042	; 0x412
 80115e2:	fb01 f303 	mul.w	r3, r1, r3
 80115e6:	4413      	add	r3, r2
 80115e8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80115ec:	2200      	movs	r2, #0
 80115ee:	701a      	strb	r2, [r3, #0]
				break;
 80115f0:	e3d7      	b.n	8011da2 <readCanToStructs+0x1fda>
 80115f2:	bf00      	nop
 80115f4:	200027dc 	.word	0x200027dc
 80115f8:	20005a58 	.word	0x20005a58
 80115fc:	20005234 	.word	0x20005234
 8011600:	080269fc 	.word	0x080269fc
 8011604:	200027d4 	.word	0x200027d4
 8011608:	20000645 	.word	0x20000645
 801160c:	08026a18 	.word	0x08026a18
 8011610:	20003484 	.word	0x20003484
 8011614:	08026a30 	.word	0x08026a30
 8011618:	20003480 	.word	0x20003480
 801161c:	08026ba4 	.word	0x08026ba4
 8011620:	20003488 	.word	0x20003488
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8011624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011628:	4a98      	ldr	r2, [pc, #608]	; (801188c <readCanToStructs+0x1ac4>)
 801162a:	f240 4112 	movw	r1, #1042	; 0x412
 801162e:	fb01 f303 	mul.w	r3, r1, r3
 8011632:	4413      	add	r3, r2
 8011634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011638:	2201      	movs	r2, #1
 801163a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 801163c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011640:	4992      	ldr	r1, [pc, #584]	; (801188c <readCanToStructs+0x1ac4>)
 8011642:	f240 4212 	movw	r2, #1042	; 0x412
 8011646:	fb03 f202 	mul.w	r2, r3, r2
 801164a:	440a      	add	r2, r1
 801164c:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8011650:	7812      	ldrb	r2, [r2, #0]
 8011652:	3201      	adds	r2, #1
 8011654:	b2d0      	uxtb	r0, r2
 8011656:	4a8d      	ldr	r2, [pc, #564]	; (801188c <readCanToStructs+0x1ac4>)
 8011658:	f240 4112 	movw	r1, #1042	; 0x412
 801165c:	fb01 f303 	mul.w	r3, r1, r3
 8011660:	4413      	add	r3, r2
 8011662:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011666:	4602      	mov	r2, r0
 8011668:	701a      	strb	r2, [r3, #0]
				break;
 801166a:	e39a      	b.n	8011da2 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 801166c:	4b88      	ldr	r3, [pc, #544]	; (8011890 <readCanToStructs+0x1ac8>)
 801166e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011670:	4b88      	ldr	r3, [pc, #544]	; (8011894 <readCanToStructs+0x1acc>)
 8011672:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011676:	885b      	ldrh	r3, [r3, #2]
 8011678:	4a86      	ldr	r2, [pc, #536]	; (8011894 <readCanToStructs+0x1acc>)
 801167a:	011b      	lsls	r3, r3, #4
 801167c:	4413      	add	r3, r2
 801167e:	3304      	adds	r3, #4
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011686:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801168a:	2b00      	cmp	r3, #0
 801168c:	d110      	bne.n	80116b0 <readCanToStructs+0x18e8>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 801168e:	2204      	movs	r2, #4
 8011690:	2100      	movs	r1, #0
 8011692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011694:	f010 fe7e 	bl	8022394 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801169c:	4a7b      	ldr	r2, [pc, #492]	; (801188c <readCanToStructs+0x1ac4>)
 801169e:	f240 4112 	movw	r1, #1042	; 0x412
 80116a2:	fb01 f303 	mul.w	r3, r1, r3
 80116a6:	4413      	add	r3, r2
 80116a8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80116ac:	2200      	movs	r2, #0
 80116ae:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 80116b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116b4:	4a75      	ldr	r2, [pc, #468]	; (801188c <readCanToStructs+0x1ac4>)
 80116b6:	f240 4112 	movw	r1, #1042	; 0x412
 80116ba:	fb01 f303 	mul.w	r3, r1, r3
 80116be:	4413      	add	r3, r2
 80116c0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d014      	beq.n	80116f8 <readCanToStructs+0x1930>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 80116ce:	4872      	ldr	r0, [pc, #456]	; (8011898 <readCanToStructs+0x1ad0>)
 80116d0:	f010 ffe4 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80116d4:	2204      	movs	r2, #4
 80116d6:	2100      	movs	r1, #0
 80116d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116da:	f010 fe5b 	bl	8022394 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80116de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116e2:	4a6a      	ldr	r2, [pc, #424]	; (801188c <readCanToStructs+0x1ac4>)
 80116e4:	f240 4112 	movw	r1, #1042	; 0x412
 80116e8:	fb01 f303 	mul.w	r3, r1, r3
 80116ec:	4413      	add	r3, r2
 80116ee:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80116f2:	2200      	movs	r2, #0
 80116f4:	701a      	strb	r2, [r3, #0]
					break;
 80116f6:	e354      	b.n	8011da2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 80116f8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80116fc:	4613      	mov	r3, r2
 80116fe:	00db      	lsls	r3, r3, #3
 8011700:	1a9b      	subs	r3, r3, r2
 8011702:	461a      	mov	r2, r3
 8011704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011706:	4413      	add	r3, r2
 8011708:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801170a:	2301      	movs	r3, #1
 801170c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011710:	e016      	b.n	8011740 <readCanToStructs+0x1978>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011712:	4b60      	ldr	r3, [pc, #384]	; (8011894 <readCanToStructs+0x1acc>)
 8011714:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011718:	885b      	ldrh	r3, [r3, #2]
 801171a:	461a      	mov	r2, r3
 801171c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011720:	495c      	ldr	r1, [pc, #368]	; (8011894 <readCanToStructs+0x1acc>)
 8011722:	0112      	lsls	r2, r2, #4
 8011724:	440a      	add	r2, r1
 8011726:	4413      	add	r3, r2
 8011728:	3304      	adds	r3, #4
 801172a:	781a      	ldrb	r2, [r3, #0]
 801172c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011732:	3301      	adds	r3, #1
 8011734:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011736:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801173a:	3301      	adds	r3, #1
 801173c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011740:	4b54      	ldr	r3, [pc, #336]	; (8011894 <readCanToStructs+0x1acc>)
 8011742:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011746:	885b      	ldrh	r3, [r3, #2]
 8011748:	4a52      	ldr	r2, [pc, #328]	; (8011894 <readCanToStructs+0x1acc>)
 801174a:	011b      	lsls	r3, r3, #4
 801174c:	4413      	add	r3, r2
 801174e:	330c      	adds	r3, #12
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011756:	429a      	cmp	r2, r3
 8011758:	d3db      	bcc.n	8011712 <readCanToStructs+0x194a>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801175a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801175e:	4a4b      	ldr	r2, [pc, #300]	; (801188c <readCanToStructs+0x1ac4>)
 8011760:	f240 4112 	movw	r1, #1042	; 0x412
 8011764:	fb01 f303 	mul.w	r3, r1, r3
 8011768:	4413      	add	r3, r2
 801176a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	461a      	mov	r2, r3
 8011772:	4613      	mov	r3, r2
 8011774:	00db      	lsls	r3, r3, #3
 8011776:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011778:	4b46      	ldr	r3, [pc, #280]	; (8011894 <readCanToStructs+0x1acc>)
 801177a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801177e:	885b      	ldrh	r3, [r3, #2]
 8011780:	4944      	ldr	r1, [pc, #272]	; (8011894 <readCanToStructs+0x1acc>)
 8011782:	011b      	lsls	r3, r3, #4
 8011784:	440b      	add	r3, r1
 8011786:	330c      	adds	r3, #12
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	3b01      	subs	r3, #1
 801178c:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801178e:	2b03      	cmp	r3, #3
 8011790:	d920      	bls.n	80117d4 <readCanToStructs+0x1a0c>
 8011792:	4b3f      	ldr	r3, [pc, #252]	; (8011890 <readCanToStructs+0x1ac8>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8011798:	4b40      	ldr	r3, [pc, #256]	; (801189c <readCanToStructs+0x1ad4>)
 801179a:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 801179c:	4b40      	ldr	r3, [pc, #256]	; (80118a0 <readCanToStructs+0x1ad8>)
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	d102      	bne.n	80117aa <readCanToStructs+0x19e2>
						printf("O_Info2_RCV\n");
 80117a4:	483f      	ldr	r0, [pc, #252]	; (80118a4 <readCanToStructs+0x1adc>)
 80117a6:	f010 ff79 	bl	802269c <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80117aa:	4b3f      	ldr	r3, [pc, #252]	; (80118a8 <readCanToStructs+0x1ae0>)
 80117ac:	2201      	movs	r2, #1
 80117ae:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80117b0:	f003 fece 	bl	8015550 <HAL_GetTick>
 80117b4:	4603      	mov	r3, r0
 80117b6:	4a3c      	ldr	r2, [pc, #240]	; (80118a8 <readCanToStructs+0x1ae0>)
 80117b8:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80117ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117be:	4a33      	ldr	r2, [pc, #204]	; (801188c <readCanToStructs+0x1ac4>)
 80117c0:	f240 4112 	movw	r1, #1042	; 0x412
 80117c4:	fb01 f303 	mul.w	r3, r1, r3
 80117c8:	4413      	add	r3, r2
 80117ca:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80117ce:	2200      	movs	r2, #0
 80117d0:	701a      	strb	r2, [r3, #0]
				break;
 80117d2:	e2e6      	b.n	8011da2 <readCanToStructs+0x1fda>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80117d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117d8:	4a2c      	ldr	r2, [pc, #176]	; (801188c <readCanToStructs+0x1ac4>)
 80117da:	f240 4112 	movw	r1, #1042	; 0x412
 80117de:	fb01 f303 	mul.w	r3, r1, r3
 80117e2:	4413      	add	r3, r2
 80117e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80117e8:	2201      	movs	r2, #1
 80117ea:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80117ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117f0:	4926      	ldr	r1, [pc, #152]	; (801188c <readCanToStructs+0x1ac4>)
 80117f2:	f240 4212 	movw	r2, #1042	; 0x412
 80117f6:	fb03 f202 	mul.w	r2, r3, r2
 80117fa:	440a      	add	r2, r1
 80117fc:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011800:	7812      	ldrb	r2, [r2, #0]
 8011802:	3201      	adds	r2, #1
 8011804:	b2d0      	uxtb	r0, r2
 8011806:	4a21      	ldr	r2, [pc, #132]	; (801188c <readCanToStructs+0x1ac4>)
 8011808:	f240 4112 	movw	r1, #1042	; 0x412
 801180c:	fb01 f303 	mul.w	r3, r1, r3
 8011810:	4413      	add	r3, r2
 8011812:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011816:	4602      	mov	r2, r0
 8011818:	701a      	strb	r2, [r3, #0]
				break;
 801181a:	e2c2      	b.n	8011da2 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 801181c:	4b23      	ldr	r3, [pc, #140]	; (80118ac <readCanToStructs+0x1ae4>)
 801181e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011820:	4b1c      	ldr	r3, [pc, #112]	; (8011894 <readCanToStructs+0x1acc>)
 8011822:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011826:	885b      	ldrh	r3, [r3, #2]
 8011828:	4a1a      	ldr	r2, [pc, #104]	; (8011894 <readCanToStructs+0x1acc>)
 801182a:	011b      	lsls	r3, r3, #4
 801182c:	4413      	add	r3, r2
 801182e:	3304      	adds	r3, #4
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011836:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801183a:	2b00      	cmp	r3, #0
 801183c:	d005      	beq.n	801184a <readCanToStructs+0x1a82>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 801183e:	4b1c      	ldr	r3, [pc, #112]	; (80118b0 <readCanToStructs+0x1ae8>)
 8011840:	881b      	ldrh	r3, [r3, #0]
 8011842:	461a      	mov	r2, r3
 8011844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011846:	4413      	add	r3, r2
 8011848:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 801184a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801184e:	2b00      	cmp	r3, #0
 8011850:	d117      	bne.n	8011882 <readCanToStructs+0x1aba>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011852:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011856:	2100      	movs	r1, #0
 8011858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801185a:	f010 fd9b 	bl	8022394 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801185e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011862:	4a0a      	ldr	r2, [pc, #40]	; (801188c <readCanToStructs+0x1ac4>)
 8011864:	f240 4112 	movw	r1, #1042	; 0x412
 8011868:	fb01 f303 	mul.w	r3, r1, r3
 801186c:	4413      	add	r3, r2
 801186e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011872:	2200      	movs	r2, #0
 8011874:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011876:	4b0e      	ldr	r3, [pc, #56]	; (80118b0 <readCanToStructs+0x1ae8>)
 8011878:	2200      	movs	r2, #0
 801187a:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 801187c:	4b0d      	ldr	r3, [pc, #52]	; (80118b4 <readCanToStructs+0x1aec>)
 801187e:	2200      	movs	r2, #0
 8011880:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011882:	2301      	movs	r3, #1
 8011884:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011888:	e033      	b.n	80118f2 <readCanToStructs+0x1b2a>
 801188a:	bf00      	nop
 801188c:	20005234 	.word	0x20005234
 8011890:	20003484 	.word	0x20003484
 8011894:	20005a58 	.word	0x20005a58
 8011898:	08026a64 	.word	0x08026a64
 801189c:	20003480 	.word	0x20003480
 80118a0:	20000645 	.word	0x20000645
 80118a4:	08026bb0 	.word	0x08026bb0
 80118a8:	20003488 	.word	0x20003488
 80118ac:	20003ab0 	.word	0x20003ab0
 80118b0:	20009bb0 	.word	0x20009bb0
 80118b4:	20009bb2 	.word	0x20009bb2
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80118b8:	4ba0      	ldr	r3, [pc, #640]	; (8011b3c <readCanToStructs+0x1d74>)
 80118ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118be:	885b      	ldrh	r3, [r3, #2]
 80118c0:	461a      	mov	r2, r3
 80118c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118c6:	499d      	ldr	r1, [pc, #628]	; (8011b3c <readCanToStructs+0x1d74>)
 80118c8:	0112      	lsls	r2, r2, #4
 80118ca:	440a      	add	r2, r1
 80118cc:	4413      	add	r3, r2
 80118ce:	3304      	adds	r3, #4
 80118d0:	781a      	ldrb	r2, [r3, #0]
 80118d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80118d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d8:	3301      	adds	r3, #1
 80118da:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 80118dc:	4b98      	ldr	r3, [pc, #608]	; (8011b40 <readCanToStructs+0x1d78>)
 80118de:	881b      	ldrh	r3, [r3, #0]
 80118e0:	3301      	adds	r3, #1
 80118e2:	b29a      	uxth	r2, r3
 80118e4:	4b96      	ldr	r3, [pc, #600]	; (8011b40 <readCanToStructs+0x1d78>)
 80118e6:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80118e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118ec:	3301      	adds	r3, #1
 80118ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80118f2:	4b92      	ldr	r3, [pc, #584]	; (8011b3c <readCanToStructs+0x1d74>)
 80118f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118f8:	885b      	ldrh	r3, [r3, #2]
 80118fa:	4a90      	ldr	r2, [pc, #576]	; (8011b3c <readCanToStructs+0x1d74>)
 80118fc:	011b      	lsls	r3, r3, #4
 80118fe:	4413      	add	r3, r2
 8011900:	330c      	adds	r3, #12
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011908:	429a      	cmp	r2, r3
 801190a:	d3d5      	bcc.n	80118b8 <readCanToStructs+0x1af0>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 801190c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011910:	4a8c      	ldr	r2, [pc, #560]	; (8011b44 <readCanToStructs+0x1d7c>)
 8011912:	f240 4112 	movw	r1, #1042	; 0x412
 8011916:	fb01 f303 	mul.w	r3, r1, r3
 801191a:	4413      	add	r3, r2
 801191c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011926:	429a      	cmp	r2, r3
 8011928:	d026      	beq.n	8011978 <readCanToStructs+0x1bb0>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 801192a:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 801192e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011932:	4a84      	ldr	r2, [pc, #528]	; (8011b44 <readCanToStructs+0x1d7c>)
 8011934:	f240 4012 	movw	r0, #1042	; 0x412
 8011938:	fb00 f303 	mul.w	r3, r0, r3
 801193c:	4413      	add	r3, r2
 801193e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	461a      	mov	r2, r3
 8011946:	4880      	ldr	r0, [pc, #512]	; (8011b48 <readCanToStructs+0x1d80>)
 8011948:	f010 fe0c 	bl	8022564 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 801194c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011950:	2100      	movs	r1, #0
 8011952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011954:	f010 fd1e 	bl	8022394 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801195c:	4a79      	ldr	r2, [pc, #484]	; (8011b44 <readCanToStructs+0x1d7c>)
 801195e:	f240 4112 	movw	r1, #1042	; 0x412
 8011962:	fb01 f303 	mul.w	r3, r1, r3
 8011966:	4413      	add	r3, r2
 8011968:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801196c:	2200      	movs	r2, #0
 801196e:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011970:	4b73      	ldr	r3, [pc, #460]	; (8011b40 <readCanToStructs+0x1d78>)
 8011972:	2200      	movs	r2, #0
 8011974:	801a      	strh	r2, [r3, #0]
					break;
 8011976:	e214      	b.n	8011da2 <readCanToStructs+0x1fda>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8011978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801197c:	4971      	ldr	r1, [pc, #452]	; (8011b44 <readCanToStructs+0x1d7c>)
 801197e:	f240 4212 	movw	r2, #1042	; 0x412
 8011982:	fb03 f202 	mul.w	r2, r3, r2
 8011986:	440a      	add	r2, r1
 8011988:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801198c:	7812      	ldrb	r2, [r2, #0]
 801198e:	3201      	adds	r2, #1
 8011990:	b2d0      	uxtb	r0, r2
 8011992:	4a6c      	ldr	r2, [pc, #432]	; (8011b44 <readCanToStructs+0x1d7c>)
 8011994:	f240 4112 	movw	r1, #1042	; 0x412
 8011998:	fb01 f303 	mul.w	r3, r1, r3
 801199c:	4413      	add	r3, r2
 801199e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80119a2:	4602      	mov	r2, r0
 80119a4:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 80119a6:	4b69      	ldr	r3, [pc, #420]	; (8011b4c <readCanToStructs+0x1d84>)
 80119a8:	881b      	ldrh	r3, [r3, #0]
 80119aa:	3304      	adds	r3, #4
 80119ac:	b29a      	uxth	r2, r3
 80119ae:	4b68      	ldr	r3, [pc, #416]	; (8011b50 <readCanToStructs+0x1d88>)
 80119b0:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 80119b2:	4b63      	ldr	r3, [pc, #396]	; (8011b40 <readCanToStructs+0x1d78>)
 80119b4:	881a      	ldrh	r2, [r3, #0]
 80119b6:	4b66      	ldr	r3, [pc, #408]	; (8011b50 <readCanToStructs+0x1d88>)
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	f0c0 81ee 	bcc.w	8011d9c <readCanToStructs+0x1fd4>
					printf("EI1 Relay Info Received\n");
 80119c0:	4864      	ldr	r0, [pc, #400]	; (8011b54 <readCanToStructs+0x1d8c>)
 80119c2:	f010 fe6b 	bl	802269c <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 80119c6:	4a64      	ldr	r2, [pc, #400]	; (8011b58 <readCanToStructs+0x1d90>)
 80119c8:	4b60      	ldr	r3, [pc, #384]	; (8011b4c <readCanToStructs+0x1d84>)
 80119ca:	4610      	mov	r0, r2
 80119cc:	4619      	mov	r1, r3
 80119ce:	f44f 7301 	mov.w	r3, #516	; 0x204
 80119d2:	461a      	mov	r2, r3
 80119d4:	f010 fcb6 	bl	8022344 <memcpy>
					DataTraverser = 0;
 80119d8:	4b59      	ldr	r3, [pc, #356]	; (8011b40 <readCanToStructs+0x1d78>)
 80119da:	2200      	movs	r2, #0
 80119dc:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 80119de:	4b5c      	ldr	r3, [pc, #368]	; (8011b50 <readCanToStructs+0x1d88>)
 80119e0:	2200      	movs	r2, #0
 80119e2:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80119e4:	4b5d      	ldr	r3, [pc, #372]	; (8011b5c <readCanToStructs+0x1d94>)
 80119e6:	2201      	movs	r2, #1
 80119e8:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80119ea:	f003 fdb1 	bl	8015550 <HAL_GetTick>
 80119ee:	4603      	mov	r3, r0
 80119f0:	4a5a      	ldr	r2, [pc, #360]	; (8011b5c <readCanToStructs+0x1d94>)
 80119f2:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80119f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119f8:	4a52      	ldr	r2, [pc, #328]	; (8011b44 <readCanToStructs+0x1d7c>)
 80119fa:	f240 4112 	movw	r1, #1042	; 0x412
 80119fe:	fb01 f303 	mul.w	r3, r1, r3
 8011a02:	4413      	add	r3, r2
 8011a04:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011a08:	2200      	movs	r2, #0
 8011a0a:	701a      	strb	r2, [r3, #0]
				break;
 8011a0c:	e1c6      	b.n	8011d9c <readCanToStructs+0x1fd4>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8011a0e:	4b4f      	ldr	r3, [pc, #316]	; (8011b4c <readCanToStructs+0x1d84>)
 8011a10:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011a12:	4b4a      	ldr	r3, [pc, #296]	; (8011b3c <readCanToStructs+0x1d74>)
 8011a14:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a18:	885b      	ldrh	r3, [r3, #2]
 8011a1a:	4a48      	ldr	r2, [pc, #288]	; (8011b3c <readCanToStructs+0x1d74>)
 8011a1c:	011b      	lsls	r3, r3, #4
 8011a1e:	4413      	add	r3, r2
 8011a20:	3304      	adds	r3, #4
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011a28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d005      	beq.n	8011a3c <readCanToStructs+0x1c74>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8011a30:	4b43      	ldr	r3, [pc, #268]	; (8011b40 <readCanToStructs+0x1d78>)
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	461a      	mov	r2, r3
 8011a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a38:	4413      	add	r3, r2
 8011a3a:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8011a3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d117      	bne.n	8011a74 <readCanToStructs+0x1cac>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011a44:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011a48:	2100      	movs	r1, #0
 8011a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a4c:	f010 fca2 	bl	8022394 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a54:	4a3b      	ldr	r2, [pc, #236]	; (8011b44 <readCanToStructs+0x1d7c>)
 8011a56:	f240 4112 	movw	r1, #1042	; 0x412
 8011a5a:	fb01 f303 	mul.w	r3, r1, r3
 8011a5e:	4413      	add	r3, r2
 8011a60:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011a64:	2200      	movs	r2, #0
 8011a66:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011a68:	4b35      	ldr	r3, [pc, #212]	; (8011b40 <readCanToStructs+0x1d78>)
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8011a6e:	4b38      	ldr	r3, [pc, #224]	; (8011b50 <readCanToStructs+0x1d88>)
 8011a70:	2200      	movs	r2, #0
 8011a72:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011a74:	2301      	movs	r3, #1
 8011a76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a7a:	e01c      	b.n	8011ab6 <readCanToStructs+0x1cee>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011a7c:	4b2f      	ldr	r3, [pc, #188]	; (8011b3c <readCanToStructs+0x1d74>)
 8011a7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a82:	885b      	ldrh	r3, [r3, #2]
 8011a84:	461a      	mov	r2, r3
 8011a86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a8a:	492c      	ldr	r1, [pc, #176]	; (8011b3c <readCanToStructs+0x1d74>)
 8011a8c:	0112      	lsls	r2, r2, #4
 8011a8e:	440a      	add	r2, r1
 8011a90:	4413      	add	r3, r2
 8011a92:	3304      	adds	r3, #4
 8011a94:	781a      	ldrb	r2, [r3, #0]
 8011a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a98:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8011aa0:	4b27      	ldr	r3, [pc, #156]	; (8011b40 <readCanToStructs+0x1d78>)
 8011aa2:	881b      	ldrh	r3, [r3, #0]
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	b29a      	uxth	r2, r3
 8011aa8:	4b25      	ldr	r3, [pc, #148]	; (8011b40 <readCanToStructs+0x1d78>)
 8011aaa:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011aac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ab6:	4b21      	ldr	r3, [pc, #132]	; (8011b3c <readCanToStructs+0x1d74>)
 8011ab8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011abc:	885b      	ldrh	r3, [r3, #2]
 8011abe:	4a1f      	ldr	r2, [pc, #124]	; (8011b3c <readCanToStructs+0x1d74>)
 8011ac0:	011b      	lsls	r3, r3, #4
 8011ac2:	4413      	add	r3, r2
 8011ac4:	330c      	adds	r3, #12
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d3d5      	bcc.n	8011a7c <readCanToStructs+0x1cb4>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8011ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ad4:	4a1b      	ldr	r2, [pc, #108]	; (8011b44 <readCanToStructs+0x1d7c>)
 8011ad6:	f240 4112 	movw	r1, #1042	; 0x412
 8011ada:	fb01 f303 	mul.w	r3, r1, r3
 8011ade:	4413      	add	r3, r2
 8011ae0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d03a      	beq.n	8011b64 <readCanToStructs+0x1d9c>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8011aee:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011af6:	4a13      	ldr	r2, [pc, #76]	; (8011b44 <readCanToStructs+0x1d7c>)
 8011af8:	f240 4012 	movw	r0, #1042	; 0x412
 8011afc:	fb00 f303 	mul.w	r3, r0, r3
 8011b00:	4413      	add	r3, r2
 8011b02:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	461a      	mov	r2, r3
 8011b0a:	4815      	ldr	r0, [pc, #84]	; (8011b60 <readCanToStructs+0x1d98>)
 8011b0c:	f010 fd2a 	bl	8022564 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011b10:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011b14:	2100      	movs	r1, #0
 8011b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b18:	f010 fc3c 	bl	8022394 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b20:	4a08      	ldr	r2, [pc, #32]	; (8011b44 <readCanToStructs+0x1d7c>)
 8011b22:	f240 4112 	movw	r1, #1042	; 0x412
 8011b26:	fb01 f303 	mul.w	r3, r1, r3
 8011b2a:	4413      	add	r3, r2
 8011b2c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011b30:	2200      	movs	r2, #0
 8011b32:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011b34:	4b02      	ldr	r3, [pc, #8]	; (8011b40 <readCanToStructs+0x1d78>)
 8011b36:	2200      	movs	r2, #0
 8011b38:	801a      	strh	r2, [r3, #0]
					break;
 8011b3a:	e132      	b.n	8011da2 <readCanToStructs+0x1fda>
 8011b3c:	20005a58 	.word	0x20005a58
 8011b40:	20009bb0 	.word	0x20009bb0
 8011b44:	20005234 	.word	0x20005234
 8011b48:	08026bbc 	.word	0x08026bbc
 8011b4c:	20003ab0 	.word	0x20003ab0
 8011b50:	20009bb2 	.word	0x20009bb2
 8011b54:	08026be8 	.word	0x08026be8
 8011b58:	200038ac 	.word	0x200038ac
 8011b5c:	20003488 	.word	0x20003488
 8011b60:	08026c00 	.word	0x08026c00
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8011b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b68:	49c2      	ldr	r1, [pc, #776]	; (8011e74 <readCanToStructs+0x20ac>)
 8011b6a:	f240 4212 	movw	r2, #1042	; 0x412
 8011b6e:	fb03 f202 	mul.w	r2, r3, r2
 8011b72:	440a      	add	r2, r1
 8011b74:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8011b78:	7812      	ldrb	r2, [r2, #0]
 8011b7a:	3201      	adds	r2, #1
 8011b7c:	b2d0      	uxtb	r0, r2
 8011b7e:	4abd      	ldr	r2, [pc, #756]	; (8011e74 <readCanToStructs+0x20ac>)
 8011b80:	f240 4112 	movw	r1, #1042	; 0x412
 8011b84:	fb01 f303 	mul.w	r3, r1, r3
 8011b88:	4413      	add	r3, r2
 8011b8a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011b8e:	4602      	mov	r2, r0
 8011b90:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8011b92:	4bb9      	ldr	r3, [pc, #740]	; (8011e78 <readCanToStructs+0x20b0>)
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	3304      	adds	r3, #4
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	4bb8      	ldr	r3, [pc, #736]	; (8011e7c <readCanToStructs+0x20b4>)
 8011b9c:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8011b9e:	4bb8      	ldr	r3, [pc, #736]	; (8011e80 <readCanToStructs+0x20b8>)
 8011ba0:	881a      	ldrh	r2, [r3, #0]
 8011ba2:	4bb6      	ldr	r3, [pc, #728]	; (8011e7c <readCanToStructs+0x20b4>)
 8011ba4:	881b      	ldrh	r3, [r3, #0]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	f0c0 80fa 	bcc.w	8011da0 <readCanToStructs+0x1fd8>
					printf("EI2 Relay Info Received\n");
 8011bac:	48b5      	ldr	r0, [pc, #724]	; (8011e84 <readCanToStructs+0x20bc>)
 8011bae:	f010 fd75 	bl	802269c <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8011bb2:	4ab5      	ldr	r2, [pc, #724]	; (8011e88 <readCanToStructs+0x20c0>)
 8011bb4:	4bb0      	ldr	r3, [pc, #704]	; (8011e78 <readCanToStructs+0x20b0>)
 8011bb6:	4610      	mov	r0, r2
 8011bb8:	4619      	mov	r1, r3
 8011bba:	f44f 7301 	mov.w	r3, #516	; 0x204
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	f010 fbc0 	bl	8022344 <memcpy>
					DataTraverser = 0;
 8011bc4:	4bae      	ldr	r3, [pc, #696]	; (8011e80 <readCanToStructs+0x20b8>)
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8011bca:	4bac      	ldr	r3, [pc, #688]	; (8011e7c <readCanToStructs+0x20b4>)
 8011bcc:	2200      	movs	r2, #0
 8011bce:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011bd0:	4bae      	ldr	r3, [pc, #696]	; (8011e8c <readCanToStructs+0x20c4>)
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011bd6:	f003 fcbb 	bl	8015550 <HAL_GetTick>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	4aab      	ldr	r2, [pc, #684]	; (8011e8c <readCanToStructs+0x20c4>)
 8011bde:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011be4:	4aa3      	ldr	r2, [pc, #652]	; (8011e74 <readCanToStructs+0x20ac>)
 8011be6:	f240 4112 	movw	r1, #1042	; 0x412
 8011bea:	fb01 f303 	mul.w	r3, r1, r3
 8011bee:	4413      	add	r3, r2
 8011bf0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	701a      	strb	r2, [r3, #0]
				break;
 8011bf8:	e0d2      	b.n	8011da0 <readCanToStructs+0x1fd8>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8011bfa:	4ba5      	ldr	r3, [pc, #660]	; (8011e90 <readCanToStructs+0x20c8>)
 8011bfc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011bfe:	4ba5      	ldr	r3, [pc, #660]	; (8011e94 <readCanToStructs+0x20cc>)
 8011c00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c04:	885b      	ldrh	r3, [r3, #2]
 8011c06:	4aa3      	ldr	r2, [pc, #652]	; (8011e94 <readCanToStructs+0x20cc>)
 8011c08:	011b      	lsls	r3, r3, #4
 8011c0a:	4413      	add	r3, r2
 8011c0c:	3304      	adds	r3, #4
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011c14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d110      	bne.n	8011c3e <readCanToStructs+0x1e76>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8011c1c:	2208      	movs	r2, #8
 8011c1e:	2100      	movs	r1, #0
 8011c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c22:	f010 fbb7 	bl	8022394 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c2a:	4a92      	ldr	r2, [pc, #584]	; (8011e74 <readCanToStructs+0x20ac>)
 8011c2c:	f240 4112 	movw	r1, #1042	; 0x412
 8011c30:	fb01 f303 	mul.w	r3, r1, r3
 8011c34:	4413      	add	r3, r2
 8011c36:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8011c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c42:	4a8c      	ldr	r2, [pc, #560]	; (8011e74 <readCanToStructs+0x20ac>)
 8011c44:	f240 4112 	movw	r1, #1042	; 0x412
 8011c48:	fb01 f303 	mul.w	r3, r1, r3
 8011c4c:	4413      	add	r3, r2
 8011c4e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d014      	beq.n	8011c86 <readCanToStructs+0x1ebe>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8011c5c:	488e      	ldr	r0, [pc, #568]	; (8011e98 <readCanToStructs+0x20d0>)
 8011c5e:	f010 fd1d 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8011c62:	2208      	movs	r2, #8
 8011c64:	2100      	movs	r1, #0
 8011c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c68:	f010 fb94 	bl	8022394 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c70:	4a80      	ldr	r2, [pc, #512]	; (8011e74 <readCanToStructs+0x20ac>)
 8011c72:	f240 4112 	movw	r1, #1042	; 0x412
 8011c76:	fb01 f303 	mul.w	r3, r1, r3
 8011c7a:	4413      	add	r3, r2
 8011c7c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011c80:	2200      	movs	r2, #0
 8011c82:	701a      	strb	r2, [r3, #0]
					break;
 8011c84:	e08d      	b.n	8011da2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011c86:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	00db      	lsls	r3, r3, #3
 8011c8e:	1a9b      	subs	r3, r3, r2
 8011c90:	461a      	mov	r2, r3
 8011c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c94:	4413      	add	r3, r2
 8011c96:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c98:	2301      	movs	r3, #1
 8011c9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c9e:	e016      	b.n	8011cce <readCanToStructs+0x1f06>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011ca0:	4b7c      	ldr	r3, [pc, #496]	; (8011e94 <readCanToStructs+0x20cc>)
 8011ca2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ca6:	885b      	ldrh	r3, [r3, #2]
 8011ca8:	461a      	mov	r2, r3
 8011caa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cae:	4979      	ldr	r1, [pc, #484]	; (8011e94 <readCanToStructs+0x20cc>)
 8011cb0:	0112      	lsls	r2, r2, #4
 8011cb2:	440a      	add	r2, r1
 8011cb4:	4413      	add	r3, r2
 8011cb6:	3304      	adds	r3, #4
 8011cb8:	781a      	ldrb	r2, [r3, #0]
 8011cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cbc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc0:	3301      	adds	r3, #1
 8011cc2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011cc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cc8:	3301      	adds	r3, #1
 8011cca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011cce:	4b71      	ldr	r3, [pc, #452]	; (8011e94 <readCanToStructs+0x20cc>)
 8011cd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011cd4:	885b      	ldrh	r3, [r3, #2]
 8011cd6:	4a6f      	ldr	r2, [pc, #444]	; (8011e94 <readCanToStructs+0x20cc>)
 8011cd8:	011b      	lsls	r3, r3, #4
 8011cda:	4413      	add	r3, r2
 8011cdc:	330c      	adds	r3, #12
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d3db      	bcc.n	8011ca0 <readCanToStructs+0x1ed8>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8011ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cec:	4a61      	ldr	r2, [pc, #388]	; (8011e74 <readCanToStructs+0x20ac>)
 8011cee:	f240 4112 	movw	r1, #1042	; 0x412
 8011cf2:	fb01 f303 	mul.w	r3, r1, r3
 8011cf6:	4413      	add	r3, r2
 8011cf8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	461a      	mov	r2, r3
 8011d00:	4613      	mov	r3, r2
 8011d02:	00db      	lsls	r3, r3, #3
 8011d04:	1a9a      	subs	r2, r3, r2
 8011d06:	4b63      	ldr	r3, [pc, #396]	; (8011e94 <readCanToStructs+0x20cc>)
 8011d08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d0c:	885b      	ldrh	r3, [r3, #2]
 8011d0e:	4961      	ldr	r1, [pc, #388]	; (8011e94 <readCanToStructs+0x20cc>)
 8011d10:	011b      	lsls	r3, r3, #4
 8011d12:	440b      	add	r3, r1
 8011d14:	330c      	adds	r3, #12
 8011d16:	781b      	ldrb	r3, [r3, #0]
 8011d18:	3b01      	subs	r3, #1
 8011d1a:	4413      	add	r3, r2
 8011d1c:	2b07      	cmp	r3, #7
 8011d1e:	d917      	bls.n	8011d50 <readCanToStructs+0x1f88>
					printf("Received Fault Injection Data\n");
 8011d20:	485e      	ldr	r0, [pc, #376]	; (8011e9c <readCanToStructs+0x20d4>)
 8011d22:	f010 fcbb 	bl	802269c <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011d26:	4b59      	ldr	r3, [pc, #356]	; (8011e8c <readCanToStructs+0x20c4>)
 8011d28:	2201      	movs	r2, #1
 8011d2a:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011d2c:	f003 fc10 	bl	8015550 <HAL_GetTick>
 8011d30:	4603      	mov	r3, r0
 8011d32:	4a56      	ldr	r2, [pc, #344]	; (8011e8c <readCanToStructs+0x20c4>)
 8011d34:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011d36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d3a:	4a4e      	ldr	r2, [pc, #312]	; (8011e74 <readCanToStructs+0x20ac>)
 8011d3c:	f240 4112 	movw	r1, #1042	; 0x412
 8011d40:	fb01 f303 	mul.w	r3, r1, r3
 8011d44:	4413      	add	r3, r2
 8011d46:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	701a      	strb	r2, [r3, #0]
				break;
 8011d4e:	e028      	b.n	8011da2 <readCanToStructs+0x1fda>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8011d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d54:	4a47      	ldr	r2, [pc, #284]	; (8011e74 <readCanToStructs+0x20ac>)
 8011d56:	f240 4112 	movw	r1, #1042	; 0x412
 8011d5a:	fb01 f303 	mul.w	r3, r1, r3
 8011d5e:	4413      	add	r3, r2
 8011d60:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8011d64:	2201      	movs	r2, #1
 8011d66:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8011d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d6c:	4941      	ldr	r1, [pc, #260]	; (8011e74 <readCanToStructs+0x20ac>)
 8011d6e:	f240 4212 	movw	r2, #1042	; 0x412
 8011d72:	fb03 f202 	mul.w	r2, r3, r2
 8011d76:	440a      	add	r2, r1
 8011d78:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8011d7c:	7812      	ldrb	r2, [r2, #0]
 8011d7e:	3201      	adds	r2, #1
 8011d80:	b2d0      	uxtb	r0, r2
 8011d82:	4a3c      	ldr	r2, [pc, #240]	; (8011e74 <readCanToStructs+0x20ac>)
 8011d84:	f240 4112 	movw	r1, #1042	; 0x412
 8011d88:	fb01 f303 	mul.w	r3, r1, r3
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011d92:	4602      	mov	r2, r0
 8011d94:	701a      	strb	r2, [r3, #0]
				break;
 8011d96:	e004      	b.n	8011da2 <readCanToStructs+0x1fda>
				break;
 8011d98:	bf00      	nop
 8011d9a:	e002      	b.n	8011da2 <readCanToStructs+0x1fda>
				break;
 8011d9c:	bf00      	nop
 8011d9e:	e000      	b.n	8011da2 <readCanToStructs+0x1fda>
				break;
 8011da0:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011da2:	4b3c      	ldr	r3, [pc, #240]	; (8011e94 <readCanToStructs+0x20cc>)
 8011da4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011da8:	885b      	ldrh	r3, [r3, #2]
 8011daa:	011b      	lsls	r3, r3, #4
 8011dac:	4a39      	ldr	r2, [pc, #228]	; (8011e94 <readCanToStructs+0x20cc>)
 8011dae:	4413      	add	r3, r2
 8011db0:	2210      	movs	r2, #16
 8011db2:	2100      	movs	r1, #0
 8011db4:	4618      	mov	r0, r3
 8011db6:	f010 faed 	bl	8022394 <memset>
			canRead.Out++;
 8011dba:	4b36      	ldr	r3, [pc, #216]	; (8011e94 <readCanToStructs+0x20cc>)
 8011dbc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dc0:	885b      	ldrh	r3, [r3, #2]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	4b33      	ldr	r3, [pc, #204]	; (8011e94 <readCanToStructs+0x20cc>)
 8011dc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dcc:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8011dce:	4b31      	ldr	r3, [pc, #196]	; (8011e94 <readCanToStructs+0x20cc>)
 8011dd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dd4:	885b      	ldrh	r3, [r3, #2]
 8011dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011dda:	d104      	bne.n	8011de6 <readCanToStructs+0x201e>
				canRead.Out = 0;
 8011ddc:	4b2d      	ldr	r3, [pc, #180]	; (8011e94 <readCanToStructs+0x20cc>)
 8011dde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011de2:	2200      	movs	r2, #0
 8011de4:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011de6:	f7fd ff99 	bl	800fd1c <canDataReady>
 8011dea:	4603      	mov	r3, r0
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f47f a949 	bne.w	8011084 <readCanToStructs+0x12bc>
	break;
 8011df2:	f000 beb1 	b.w	8012b58 <readCanToStructs+0x2d90>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011df6:	4b27      	ldr	r3, [pc, #156]	; (8011e94 <readCanToStructs+0x20cc>)
 8011df8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dfc:	885b      	ldrh	r3, [r3, #2]
 8011dfe:	4a25      	ldr	r2, [pc, #148]	; (8011e94 <readCanToStructs+0x20cc>)
 8011e00:	011b      	lsls	r3, r3, #4
 8011e02:	4413      	add	r3, r2
 8011e04:	330f      	adds	r3, #15
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	3b01      	subs	r3, #1
 8011e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011e0e:	4b21      	ldr	r3, [pc, #132]	; (8011e94 <readCanToStructs+0x20cc>)
 8011e10:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e14:	885b      	ldrh	r3, [r3, #2]
 8011e16:	4a1f      	ldr	r2, [pc, #124]	; (8011e94 <readCanToStructs+0x20cc>)
 8011e18:	011b      	lsls	r3, r3, #4
 8011e1a:	4413      	add	r3, r2
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8011e22:	f200 866c 	bhi.w	8012afe <readCanToStructs+0x2d36>
 8011e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e2a:	d80a      	bhi.n	8011e42 <readCanToStructs+0x207a>
 8011e2c:	f240 1203 	movw	r2, #259	; 0x103
 8011e30:	4293      	cmp	r3, r2
 8011e32:	d035      	beq.n	8011ea0 <readCanToStructs+0x20d8>
 8011e34:	f240 1209 	movw	r2, #265	; 0x109
 8011e38:	4293      	cmp	r3, r2
 8011e3a:	f000 8107 	beq.w	801204c <readCanToStructs+0x2284>
				break;
 8011e3e:	f000 be5e 	b.w	8012afe <readCanToStructs+0x2d36>
 8011e42:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011e46:	2b07      	cmp	r3, #7
 8011e48:	f200 8659 	bhi.w	8012afe <readCanToStructs+0x2d36>
 8011e4c:	a201      	add	r2, pc, #4	; (adr r2, 8011e54 <readCanToStructs+0x208c>)
 8011e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e52:	bf00      	nop
 8011e54:	0801221f 	.word	0x0801221f
 8011e58:	080123f5 	.word	0x080123f5
 8011e5c:	08012aff 	.word	0x08012aff
 8011e60:	08012aff 	.word	0x08012aff
 8011e64:	080125f5 	.word	0x080125f5
 8011e68:	08012aff 	.word	0x08012aff
 8011e6c:	08012787 	.word	0x08012787
 8011e70:	08012959 	.word	0x08012959
 8011e74:	20005234 	.word	0x20005234
 8011e78:	20003ab0 	.word	0x20003ab0
 8011e7c:	20009bb2 	.word	0x20009bb2
 8011e80:	20009bb0 	.word	0x20009bb0
 8011e84:	08026c2c 	.word	0x08026c2c
 8011e88:	200038ac 	.word	0x200038ac
 8011e8c:	20003488 	.word	0x20003488
 8011e90:	20003474 	.word	0x20003474
 8011e94:	20005a58 	.word	0x20005a58
 8011e98:	08026b00 	.word	0x08026b00
 8011e9c:	08026b20 	.word	0x08026b20
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011ea0:	4bc3      	ldr	r3, [pc, #780]	; (80121b0 <readCanToStructs+0x23e8>)
 8011ea2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011ea4:	4bc3      	ldr	r3, [pc, #780]	; (80121b4 <readCanToStructs+0x23ec>)
 8011ea6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011eaa:	885b      	ldrh	r3, [r3, #2]
 8011eac:	4ac1      	ldr	r2, [pc, #772]	; (80121b4 <readCanToStructs+0x23ec>)
 8011eae:	011b      	lsls	r3, r3, #4
 8011eb0:	4413      	add	r3, r2
 8011eb2:	3304      	adds	r3, #4
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011eba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d110      	bne.n	8011ee4 <readCanToStructs+0x211c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011ec2:	2206      	movs	r2, #6
 8011ec4:	2100      	movs	r1, #0
 8011ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ec8:	f010 fa64 	bl	8022394 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ed0:	4ab9      	ldr	r2, [pc, #740]	; (80121b8 <readCanToStructs+0x23f0>)
 8011ed2:	f240 4112 	movw	r1, #1042	; 0x412
 8011ed6:	fb01 f303 	mul.w	r3, r1, r3
 8011eda:	4413      	add	r3, r2
 8011edc:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ee8:	4ab3      	ldr	r2, [pc, #716]	; (80121b8 <readCanToStructs+0x23f0>)
 8011eea:	f240 4112 	movw	r1, #1042	; 0x412
 8011eee:	fb01 f303 	mul.w	r3, r1, r3
 8011ef2:	4413      	add	r3, r2
 8011ef4:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d015      	beq.n	8011f2e <readCanToStructs+0x2166>
					printf("GPS Packet Seq no MisMatch\n");
 8011f02:	48ae      	ldr	r0, [pc, #696]	; (80121bc <readCanToStructs+0x23f4>)
 8011f04:	f010 fbca 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011f08:	2206      	movs	r2, #6
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f0e:	f010 fa41 	bl	8022394 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f16:	4aa8      	ldr	r2, [pc, #672]	; (80121b8 <readCanToStructs+0x23f0>)
 8011f18:	f240 4112 	movw	r1, #1042	; 0x412
 8011f1c:	fb01 f303 	mul.w	r3, r1, r3
 8011f20:	4413      	add	r3, r2
 8011f22:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011f26:	2200      	movs	r2, #0
 8011f28:	701a      	strb	r2, [r3, #0]
					break;
 8011f2a:	f000 bde9 	b.w	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011f2e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f32:	4613      	mov	r3, r2
 8011f34:	00db      	lsls	r3, r3, #3
 8011f36:	1a9b      	subs	r3, r3, r2
 8011f38:	461a      	mov	r2, r3
 8011f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3c:	4413      	add	r3, r2
 8011f3e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f40:	2301      	movs	r3, #1
 8011f42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f46:	e016      	b.n	8011f76 <readCanToStructs+0x21ae>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011f48:	4b9a      	ldr	r3, [pc, #616]	; (80121b4 <readCanToStructs+0x23ec>)
 8011f4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f4e:	885b      	ldrh	r3, [r3, #2]
 8011f50:	461a      	mov	r2, r3
 8011f52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f56:	4997      	ldr	r1, [pc, #604]	; (80121b4 <readCanToStructs+0x23ec>)
 8011f58:	0112      	lsls	r2, r2, #4
 8011f5a:	440a      	add	r2, r1
 8011f5c:	4413      	add	r3, r2
 8011f5e:	3304      	adds	r3, #4
 8011f60:	781a      	ldrb	r2, [r3, #0]
 8011f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f64:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f68:	3301      	adds	r3, #1
 8011f6a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f70:	3301      	adds	r3, #1
 8011f72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f76:	4b8f      	ldr	r3, [pc, #572]	; (80121b4 <readCanToStructs+0x23ec>)
 8011f78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f7c:	885b      	ldrh	r3, [r3, #2]
 8011f7e:	4a8d      	ldr	r2, [pc, #564]	; (80121b4 <readCanToStructs+0x23ec>)
 8011f80:	011b      	lsls	r3, r3, #4
 8011f82:	4413      	add	r3, r2
 8011f84:	330c      	adds	r3, #12
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d3db      	bcc.n	8011f48 <readCanToStructs+0x2180>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f94:	4a88      	ldr	r2, [pc, #544]	; (80121b8 <readCanToStructs+0x23f0>)
 8011f96:	f240 4112 	movw	r1, #1042	; 0x412
 8011f9a:	fb01 f303 	mul.w	r3, r1, r3
 8011f9e:	4413      	add	r3, r2
 8011fa0:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	4613      	mov	r3, r2
 8011faa:	00db      	lsls	r3, r3, #3
 8011fac:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011fae:	4b81      	ldr	r3, [pc, #516]	; (80121b4 <readCanToStructs+0x23ec>)
 8011fb0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011fb4:	885b      	ldrh	r3, [r3, #2]
 8011fb6:	497f      	ldr	r1, [pc, #508]	; (80121b4 <readCanToStructs+0x23ec>)
 8011fb8:	011b      	lsls	r3, r3, #4
 8011fba:	440b      	add	r3, r1
 8011fbc:	330c      	adds	r3, #12
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011fc4:	2b05      	cmp	r3, #5
 8011fc6:	d91c      	bls.n	8012002 <readCanToStructs+0x223a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011fc8:	4b7d      	ldr	r3, [pc, #500]	; (80121c0 <readCanToStructs+0x23f8>)
 8011fca:	4a79      	ldr	r2, [pc, #484]	; (80121b0 <readCanToStructs+0x23e8>)
 8011fcc:	6811      	ldr	r1, [r2, #0]
 8011fce:	6019      	str	r1, [r3, #0]
 8011fd0:	8892      	ldrh	r2, [r2, #4]
 8011fd2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011fd4:	4b7b      	ldr	r3, [pc, #492]	; (80121c4 <readCanToStructs+0x23fc>)
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d102      	bne.n	8011fe2 <readCanToStructs+0x221a>
						printf("GPS_PACKET_RECEIVED\n");
 8011fdc:	487a      	ldr	r0, [pc, #488]	; (80121c8 <readCanToStructs+0x2400>)
 8011fde:	f010 fb5d 	bl	802269c <puts>
					Write_RTC();
 8011fe2:	f7f8 ffe7 	bl	800afb4 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fea:	4a73      	ldr	r2, [pc, #460]	; (80121b8 <readCanToStructs+0x23f0>)
 8011fec:	f240 4112 	movw	r1, #1042	; 0x412
 8011ff0:	fb01 f303 	mul.w	r3, r1, r3
 8011ff4:	4413      	add	r3, r2
 8011ff6:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	701a      	strb	r2, [r3, #0]
				break;
 8011ffe:	f000 bd7f 	b.w	8012b00 <readCanToStructs+0x2d38>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8012002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012006:	4a6c      	ldr	r2, [pc, #432]	; (80121b8 <readCanToStructs+0x23f0>)
 8012008:	f240 4112 	movw	r1, #1042	; 0x412
 801200c:	fb01 f303 	mul.w	r3, r1, r3
 8012010:	4413      	add	r3, r2
 8012012:	f203 2306 	addw	r3, r3, #518	; 0x206
 8012016:	2201      	movs	r2, #1
 8012018:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801201a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801201e:	4966      	ldr	r1, [pc, #408]	; (80121b8 <readCanToStructs+0x23f0>)
 8012020:	f240 4212 	movw	r2, #1042	; 0x412
 8012024:	fb03 f202 	mul.w	r2, r3, r2
 8012028:	440a      	add	r2, r1
 801202a:	f202 2207 	addw	r2, r2, #519	; 0x207
 801202e:	7812      	ldrb	r2, [r2, #0]
 8012030:	3201      	adds	r2, #1
 8012032:	b2d0      	uxtb	r0, r2
 8012034:	4a60      	ldr	r2, [pc, #384]	; (80121b8 <readCanToStructs+0x23f0>)
 8012036:	f240 4112 	movw	r1, #1042	; 0x412
 801203a:	fb01 f303 	mul.w	r3, r1, r3
 801203e:	4413      	add	r3, r2
 8012040:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012044:	4602      	mov	r2, r0
 8012046:	701a      	strb	r2, [r3, #0]
				break;
 8012048:	f000 bd5a 	b.w	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 801204c:	4b58      	ldr	r3, [pc, #352]	; (80121b0 <readCanToStructs+0x23e8>)
 801204e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012050:	4b58      	ldr	r3, [pc, #352]	; (80121b4 <readCanToStructs+0x23ec>)
 8012052:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012056:	885b      	ldrh	r3, [r3, #2]
 8012058:	4a56      	ldr	r2, [pc, #344]	; (80121b4 <readCanToStructs+0x23ec>)
 801205a:	011b      	lsls	r3, r3, #4
 801205c:	4413      	add	r3, r2
 801205e:	3304      	adds	r3, #4
 8012060:	781b      	ldrb	r3, [r3, #0]
 8012062:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012066:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801206a:	2b00      	cmp	r3, #0
 801206c:	d110      	bne.n	8012090 <readCanToStructs+0x22c8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801206e:	2206      	movs	r2, #6
 8012070:	2100      	movs	r1, #0
 8012072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012074:	f010 f98e 	bl	8022394 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801207c:	4a4e      	ldr	r2, [pc, #312]	; (80121b8 <readCanToStructs+0x23f0>)
 801207e:	f240 4112 	movw	r1, #1042	; 0x412
 8012082:	fb01 f303 	mul.w	r3, r1, r3
 8012086:	4413      	add	r3, r2
 8012088:	f203 2313 	addw	r3, r3, #531	; 0x213
 801208c:	2200      	movs	r2, #0
 801208e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8012090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012094:	4a48      	ldr	r2, [pc, #288]	; (80121b8 <readCanToStructs+0x23f0>)
 8012096:	f240 4112 	movw	r1, #1042	; 0x412
 801209a:	fb01 f303 	mul.w	r3, r1, r3
 801209e:	4413      	add	r3, r2
 80120a0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d015      	beq.n	80120da <readCanToStructs+0x2312>
					printf("GPS2 Packet Seq no MisMatch\n");
 80120ae:	4847      	ldr	r0, [pc, #284]	; (80121cc <readCanToStructs+0x2404>)
 80120b0:	f010 faf4 	bl	802269c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80120b4:	2206      	movs	r2, #6
 80120b6:	2100      	movs	r1, #0
 80120b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120ba:	f010 f96b 	bl	8022394 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80120be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120c2:	4a3d      	ldr	r2, [pc, #244]	; (80121b8 <readCanToStructs+0x23f0>)
 80120c4:	f240 4112 	movw	r1, #1042	; 0x412
 80120c8:	fb01 f303 	mul.w	r3, r1, r3
 80120cc:	4413      	add	r3, r2
 80120ce:	f203 2313 	addw	r3, r3, #531	; 0x213
 80120d2:	2200      	movs	r2, #0
 80120d4:	701a      	strb	r2, [r3, #0]
					break;
 80120d6:	f000 bd13 	b.w	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr += (7 * uc_seqNo);
 80120da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80120de:	4613      	mov	r3, r2
 80120e0:	00db      	lsls	r3, r3, #3
 80120e2:	1a9b      	subs	r3, r3, r2
 80120e4:	461a      	mov	r2, r3
 80120e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e8:	4413      	add	r3, r2
 80120ea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80120ec:	2301      	movs	r3, #1
 80120ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120f2:	e016      	b.n	8012122 <readCanToStructs+0x235a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80120f4:	4b2f      	ldr	r3, [pc, #188]	; (80121b4 <readCanToStructs+0x23ec>)
 80120f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80120fa:	885b      	ldrh	r3, [r3, #2]
 80120fc:	461a      	mov	r2, r3
 80120fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012102:	492c      	ldr	r1, [pc, #176]	; (80121b4 <readCanToStructs+0x23ec>)
 8012104:	0112      	lsls	r2, r2, #4
 8012106:	440a      	add	r2, r1
 8012108:	4413      	add	r3, r2
 801210a:	3304      	adds	r3, #4
 801210c:	781a      	ldrb	r2, [r3, #0]
 801210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012110:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012114:	3301      	adds	r3, #1
 8012116:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012118:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801211c:	3301      	adds	r3, #1
 801211e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012122:	4b24      	ldr	r3, [pc, #144]	; (80121b4 <readCanToStructs+0x23ec>)
 8012124:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012128:	885b      	ldrh	r3, [r3, #2]
 801212a:	4a22      	ldr	r2, [pc, #136]	; (80121b4 <readCanToStructs+0x23ec>)
 801212c:	011b      	lsls	r3, r3, #4
 801212e:	4413      	add	r3, r2
 8012130:	330c      	adds	r3, #12
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012138:	429a      	cmp	r2, r3
 801213a:	d3db      	bcc.n	80120f4 <readCanToStructs+0x232c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801213c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012140:	4a1d      	ldr	r2, [pc, #116]	; (80121b8 <readCanToStructs+0x23f0>)
 8012142:	f240 4112 	movw	r1, #1042	; 0x412
 8012146:	fb01 f303 	mul.w	r3, r1, r3
 801214a:	4413      	add	r3, r2
 801214c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	461a      	mov	r2, r3
 8012154:	4613      	mov	r3, r2
 8012156:	00db      	lsls	r3, r3, #3
 8012158:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801215a:	4b16      	ldr	r3, [pc, #88]	; (80121b4 <readCanToStructs+0x23ec>)
 801215c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012160:	885b      	ldrh	r3, [r3, #2]
 8012162:	4914      	ldr	r1, [pc, #80]	; (80121b4 <readCanToStructs+0x23ec>)
 8012164:	011b      	lsls	r3, r3, #4
 8012166:	440b      	add	r3, r1
 8012168:	330c      	adds	r3, #12
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	3b01      	subs	r3, #1
 801216e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012170:	2b05      	cmp	r3, #5
 8012172:	d92f      	bls.n	80121d4 <readCanToStructs+0x240c>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012174:	4b12      	ldr	r3, [pc, #72]	; (80121c0 <readCanToStructs+0x23f8>)
 8012176:	4a0e      	ldr	r2, [pc, #56]	; (80121b0 <readCanToStructs+0x23e8>)
 8012178:	6811      	ldr	r1, [r2, #0]
 801217a:	6019      	str	r1, [r3, #0]
 801217c:	8892      	ldrh	r2, [r2, #4]
 801217e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012180:	4b10      	ldr	r3, [pc, #64]	; (80121c4 <readCanToStructs+0x23fc>)
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	2b01      	cmp	r3, #1
 8012186:	d102      	bne.n	801218e <readCanToStructs+0x23c6>
						printf("GPS2_PACKET_RECEIVED\n");
 8012188:	4811      	ldr	r0, [pc, #68]	; (80121d0 <readCanToStructs+0x2408>)
 801218a:	f010 fa87 	bl	802269c <puts>
					Write_RTC();
 801218e:	f7f8 ff11 	bl	800afb4 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012196:	4a08      	ldr	r2, [pc, #32]	; (80121b8 <readCanToStructs+0x23f0>)
 8012198:	f240 4112 	movw	r1, #1042	; 0x412
 801219c:	fb01 f303 	mul.w	r3, r1, r3
 80121a0:	4413      	add	r3, r2
 80121a2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80121a6:	2200      	movs	r2, #0
 80121a8:	701a      	strb	r2, [r3, #0]
				break;
 80121aa:	f000 bca9 	b.w	8012b00 <readCanToStructs+0x2d38>
 80121ae:	bf00      	nop
 80121b0:	200027dc 	.word	0x200027dc
 80121b4:	20005a58 	.word	0x20005a58
 80121b8:	20005234 	.word	0x20005234
 80121bc:	080269cc 	.word	0x080269cc
 80121c0:	200027d4 	.word	0x200027d4
 80121c4:	20000645 	.word	0x20000645
 80121c8:	080269e8 	.word	0x080269e8
 80121cc:	080269fc 	.word	0x080269fc
 80121d0:	08026a18 	.word	0x08026a18
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80121d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121d8:	4ab8      	ldr	r2, [pc, #736]	; (80124bc <readCanToStructs+0x26f4>)
 80121da:	f240 4112 	movw	r1, #1042	; 0x412
 80121de:	fb01 f303 	mul.w	r3, r1, r3
 80121e2:	4413      	add	r3, r2
 80121e4:	f203 2312 	addw	r3, r3, #530	; 0x212
 80121e8:	2201      	movs	r2, #1
 80121ea:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80121ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121f0:	49b2      	ldr	r1, [pc, #712]	; (80124bc <readCanToStructs+0x26f4>)
 80121f2:	f240 4212 	movw	r2, #1042	; 0x412
 80121f6:	fb03 f202 	mul.w	r2, r3, r2
 80121fa:	440a      	add	r2, r1
 80121fc:	f202 2213 	addw	r2, r2, #531	; 0x213
 8012200:	7812      	ldrb	r2, [r2, #0]
 8012202:	3201      	adds	r2, #1
 8012204:	b2d0      	uxtb	r0, r2
 8012206:	4aad      	ldr	r2, [pc, #692]	; (80124bc <readCanToStructs+0x26f4>)
 8012208:	f240 4112 	movw	r1, #1042	; 0x412
 801220c:	fb01 f303 	mul.w	r3, r1, r3
 8012210:	4413      	add	r3, r2
 8012212:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012216:	4602      	mov	r2, r0
 8012218:	701a      	strb	r2, [r3, #0]
				break;
 801221a:	f000 bc71 	b.w	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 801221e:	4ba8      	ldr	r3, [pc, #672]	; (80124c0 <readCanToStructs+0x26f8>)
 8012220:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012222:	4ba8      	ldr	r3, [pc, #672]	; (80124c4 <readCanToStructs+0x26fc>)
 8012224:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012228:	885b      	ldrh	r3, [r3, #2]
 801222a:	4aa6      	ldr	r2, [pc, #664]	; (80124c4 <readCanToStructs+0x26fc>)
 801222c:	011b      	lsls	r3, r3, #4
 801222e:	4413      	add	r3, r2
 8012230:	3304      	adds	r3, #4
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012238:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801223c:	2b00      	cmp	r3, #0
 801223e:	d110      	bne.n	8012262 <readCanToStructs+0x249a>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012240:	2208      	movs	r2, #8
 8012242:	2100      	movs	r1, #0
 8012244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012246:	f010 f8a5 	bl	8022394 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801224a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801224e:	4a9b      	ldr	r2, [pc, #620]	; (80124bc <readCanToStructs+0x26f4>)
 8012250:	f240 4112 	movw	r1, #1042	; 0x412
 8012254:	fb01 f303 	mul.w	r3, r1, r3
 8012258:	4413      	add	r3, r2
 801225a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801225e:	2200      	movs	r2, #0
 8012260:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8012262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012266:	4a95      	ldr	r2, [pc, #596]	; (80124bc <readCanToStructs+0x26f4>)
 8012268:	f240 4112 	movw	r1, #1042	; 0x412
 801226c:	fb01 f303 	mul.w	r3, r1, r3
 8012270:	4413      	add	r3, r2
 8012272:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801227c:	429a      	cmp	r2, r3
 801227e:	d026      	beq.n	80122ce <readCanToStructs+0x2506>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 8012280:	4891      	ldr	r0, [pc, #580]	; (80124c8 <readCanToStructs+0x2700>)
 8012282:	f010 fa0b 	bl	802269c <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo);
 8012286:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 801228a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801228e:	4a8b      	ldr	r2, [pc, #556]	; (80124bc <readCanToStructs+0x26f4>)
 8012290:	f240 4012 	movw	r0, #1042	; 0x412
 8012294:	fb00 f303 	mul.w	r3, r0, r3
 8012298:	4413      	add	r3, r2
 801229a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	461a      	mov	r2, r3
 80122a2:	488a      	ldr	r0, [pc, #552]	; (80124cc <readCanToStructs+0x2704>)
 80122a4:	f010 f95e 	bl	8022564 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80122a8:	2208      	movs	r2, #8
 80122aa:	2100      	movs	r1, #0
 80122ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ae:	f010 f871 	bl	8022394 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80122b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122b6:	4a81      	ldr	r2, [pc, #516]	; (80124bc <readCanToStructs+0x26f4>)
 80122b8:	f240 4112 	movw	r1, #1042	; 0x412
 80122bc:	fb01 f303 	mul.w	r3, r1, r3
 80122c0:	4413      	add	r3, r2
 80122c2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80122c6:	2200      	movs	r2, #0
 80122c8:	701a      	strb	r2, [r3, #0]
					break;
 80122ca:	f000 bc19 	b.w	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr += (7 * uc_seqNo);
 80122ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80122d2:	4613      	mov	r3, r2
 80122d4:	00db      	lsls	r3, r3, #3
 80122d6:	1a9b      	subs	r3, r3, r2
 80122d8:	461a      	mov	r2, r3
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	4413      	add	r3, r2
 80122de:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80122e0:	2301      	movs	r3, #1
 80122e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80122e6:	e016      	b.n	8012316 <readCanToStructs+0x254e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80122e8:	4b76      	ldr	r3, [pc, #472]	; (80124c4 <readCanToStructs+0x26fc>)
 80122ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122ee:	885b      	ldrh	r3, [r3, #2]
 80122f0:	461a      	mov	r2, r3
 80122f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122f6:	4973      	ldr	r1, [pc, #460]	; (80124c4 <readCanToStructs+0x26fc>)
 80122f8:	0112      	lsls	r2, r2, #4
 80122fa:	440a      	add	r2, r1
 80122fc:	4413      	add	r3, r2
 80122fe:	3304      	adds	r3, #4
 8012300:	781a      	ldrb	r2, [r3, #0]
 8012302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012304:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012308:	3301      	adds	r3, #1
 801230a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801230c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012310:	3301      	adds	r3, #1
 8012312:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012316:	4b6b      	ldr	r3, [pc, #428]	; (80124c4 <readCanToStructs+0x26fc>)
 8012318:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801231c:	885b      	ldrh	r3, [r3, #2]
 801231e:	4a69      	ldr	r2, [pc, #420]	; (80124c4 <readCanToStructs+0x26fc>)
 8012320:	011b      	lsls	r3, r3, #4
 8012322:	4413      	add	r3, r2
 8012324:	330c      	adds	r3, #12
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801232c:	429a      	cmp	r2, r3
 801232e:	d3db      	bcc.n	80122e8 <readCanToStructs+0x2520>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012334:	4a61      	ldr	r2, [pc, #388]	; (80124bc <readCanToStructs+0x26f4>)
 8012336:	f240 4112 	movw	r1, #1042	; 0x412
 801233a:	fb01 f303 	mul.w	r3, r1, r3
 801233e:	4413      	add	r3, r2
 8012340:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012344:	781b      	ldrb	r3, [r3, #0]
 8012346:	461a      	mov	r2, r3
 8012348:	4613      	mov	r3, r2
 801234a:	00db      	lsls	r3, r3, #3
 801234c:	1a9a      	subs	r2, r3, r2
 801234e:	4b5d      	ldr	r3, [pc, #372]	; (80124c4 <readCanToStructs+0x26fc>)
 8012350:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012354:	885b      	ldrh	r3, [r3, #2]
 8012356:	495b      	ldr	r1, [pc, #364]	; (80124c4 <readCanToStructs+0x26fc>)
 8012358:	011b      	lsls	r3, r3, #4
 801235a:	440b      	add	r3, r1
 801235c:	330c      	adds	r3, #12
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	3b01      	subs	r3, #1
 8012362:	4413      	add	r3, r2
 8012364:	2b07      	cmp	r3, #7
 8012366:	d921      	bls.n	80123ac <readCanToStructs+0x25e4>
					if(Debug_flag == 1)
 8012368:	4b59      	ldr	r3, [pc, #356]	; (80124d0 <readCanToStructs+0x2708>)
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	2b01      	cmp	r3, #1
 801236e:	d102      	bne.n	8012376 <readCanToStructs+0x25ae>
						printf("\nRCV OTH_INFO1\n");
 8012370:	4858      	ldr	r0, [pc, #352]	; (80124d4 <readCanToStructs+0x270c>)
 8012372:	f010 f993 	bl	802269c <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012376:	4b58      	ldr	r3, [pc, #352]	; (80124d8 <readCanToStructs+0x2710>)
 8012378:	4a51      	ldr	r2, [pc, #324]	; (80124c0 <readCanToStructs+0x26f8>)
 801237a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801237e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8012382:	4b56      	ldr	r3, [pc, #344]	; (80124dc <readCanToStructs+0x2714>)
 8012384:	2201      	movs	r2, #1
 8012386:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012388:	f003 f8e2 	bl	8015550 <HAL_GetTick>
 801238c:	4603      	mov	r3, r0
 801238e:	4a54      	ldr	r2, [pc, #336]	; (80124e0 <readCanToStructs+0x2718>)
 8012390:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012396:	4a49      	ldr	r2, [pc, #292]	; (80124bc <readCanToStructs+0x26f4>)
 8012398:	f240 4112 	movw	r1, #1042	; 0x412
 801239c:	fb01 f303 	mul.w	r3, r1, r3
 80123a0:	4413      	add	r3, r2
 80123a2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80123a6:	2200      	movs	r2, #0
 80123a8:	701a      	strb	r2, [r3, #0]
				break;
 80123aa:	e3a9      	b.n	8012b00 <readCanToStructs+0x2d38>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80123ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123b0:	4a42      	ldr	r2, [pc, #264]	; (80124bc <readCanToStructs+0x26f4>)
 80123b2:	f240 4112 	movw	r1, #1042	; 0x412
 80123b6:	fb01 f303 	mul.w	r3, r1, r3
 80123ba:	4413      	add	r3, r2
 80123bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80123c0:	2201      	movs	r2, #1
 80123c2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80123c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123c8:	493c      	ldr	r1, [pc, #240]	; (80124bc <readCanToStructs+0x26f4>)
 80123ca:	f240 4212 	movw	r2, #1042	; 0x412
 80123ce:	fb03 f202 	mul.w	r2, r3, r2
 80123d2:	440a      	add	r2, r1
 80123d4:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80123d8:	7812      	ldrb	r2, [r2, #0]
 80123da:	3201      	adds	r2, #1
 80123dc:	b2d0      	uxtb	r0, r2
 80123de:	4a37      	ldr	r2, [pc, #220]	; (80124bc <readCanToStructs+0x26f4>)
 80123e0:	f240 4112 	movw	r1, #1042	; 0x412
 80123e4:	fb01 f303 	mul.w	r3, r1, r3
 80123e8:	4413      	add	r3, r2
 80123ea:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80123ee:	4602      	mov	r2, r0
 80123f0:	701a      	strb	r2, [r3, #0]
				break;
 80123f2:	e385      	b.n	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 80123f4:	4b32      	ldr	r3, [pc, #200]	; (80124c0 <readCanToStructs+0x26f8>)
 80123f6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80123f8:	4b32      	ldr	r3, [pc, #200]	; (80124c4 <readCanToStructs+0x26fc>)
 80123fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123fe:	885b      	ldrh	r3, [r3, #2]
 8012400:	4a30      	ldr	r2, [pc, #192]	; (80124c4 <readCanToStructs+0x26fc>)
 8012402:	011b      	lsls	r3, r3, #4
 8012404:	4413      	add	r3, r2
 8012406:	3304      	adds	r3, #4
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801240e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012412:	2b00      	cmp	r3, #0
 8012414:	d110      	bne.n	8012438 <readCanToStructs+0x2670>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012416:	2208      	movs	r2, #8
 8012418:	2100      	movs	r1, #0
 801241a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801241c:	f00f ffba 	bl	8022394 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012424:	4a25      	ldr	r2, [pc, #148]	; (80124bc <readCanToStructs+0x26f4>)
 8012426:	f240 4112 	movw	r1, #1042	; 0x412
 801242a:	fb01 f303 	mul.w	r3, r1, r3
 801242e:	4413      	add	r3, r2
 8012430:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012434:	2200      	movs	r2, #0
 8012436:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8012438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801243c:	4a1f      	ldr	r2, [pc, #124]	; (80124bc <readCanToStructs+0x26f4>)
 801243e:	f240 4112 	movw	r1, #1042	; 0x412
 8012442:	fb01 f303 	mul.w	r3, r1, r3
 8012446:	4413      	add	r3, r2
 8012448:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012452:	429a      	cmp	r2, r3
 8012454:	d025      	beq.n	80124a2 <readCanToStructs+0x26da>
					printf("Seq No Mismatch for EI_2_SELF_SHARING\n");
 8012456:	4823      	ldr	r0, [pc, #140]	; (80124e4 <readCanToStructs+0x271c>)
 8012458:	f010 f920 	bl	802269c <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo);
 801245c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8012460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012464:	4a15      	ldr	r2, [pc, #84]	; (80124bc <readCanToStructs+0x26f4>)
 8012466:	f240 4012 	movw	r0, #1042	; 0x412
 801246a:	fb00 f303 	mul.w	r3, r0, r3
 801246e:	4413      	add	r3, r2
 8012470:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	461a      	mov	r2, r3
 8012478:	4814      	ldr	r0, [pc, #80]	; (80124cc <readCanToStructs+0x2704>)
 801247a:	f010 f873 	bl	8022564 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 801247e:	2208      	movs	r2, #8
 8012480:	2100      	movs	r1, #0
 8012482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012484:	f00f ff86 	bl	8022394 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012488:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801248c:	4a0b      	ldr	r2, [pc, #44]	; (80124bc <readCanToStructs+0x26f4>)
 801248e:	f240 4112 	movw	r1, #1042	; 0x412
 8012492:	fb01 f303 	mul.w	r3, r1, r3
 8012496:	4413      	add	r3, r2
 8012498:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801249c:	2200      	movs	r2, #0
 801249e:	701a      	strb	r2, [r3, #0]
					break;
 80124a0:	e32e      	b.n	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr += (7 * uc_seqNo);
 80124a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80124a6:	4613      	mov	r3, r2
 80124a8:	00db      	lsls	r3, r3, #3
 80124aa:	1a9b      	subs	r3, r3, r2
 80124ac:	461a      	mov	r2, r3
 80124ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b0:	4413      	add	r3, r2
 80124b2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80124b4:	2301      	movs	r3, #1
 80124b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80124ba:	e02c      	b.n	8012516 <readCanToStructs+0x274e>
 80124bc:	20005234 	.word	0x20005234
 80124c0:	2000261c 	.word	0x2000261c
 80124c4:	20005a58 	.word	0x20005a58
 80124c8:	08026c44 	.word	0x08026c44
 80124cc:	08026c6c 	.word	0x08026c6c
 80124d0:	20000645 	.word	0x20000645
 80124d4:	08026c7c 	.word	0x08026c7c
 80124d8:	20002614 	.word	0x20002614
 80124dc:	200020b0 	.word	0x200020b0
 80124e0:	200020b4 	.word	0x200020b4
 80124e4:	08026c8c 	.word	0x08026c8c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80124e8:	4bc8      	ldr	r3, [pc, #800]	; (801280c <readCanToStructs+0x2a44>)
 80124ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124ee:	885b      	ldrh	r3, [r3, #2]
 80124f0:	461a      	mov	r2, r3
 80124f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124f6:	49c5      	ldr	r1, [pc, #788]	; (801280c <readCanToStructs+0x2a44>)
 80124f8:	0112      	lsls	r2, r2, #4
 80124fa:	440a      	add	r2, r1
 80124fc:	4413      	add	r3, r2
 80124fe:	3304      	adds	r3, #4
 8012500:	781a      	ldrb	r2, [r3, #0]
 8012502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012504:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012508:	3301      	adds	r3, #1
 801250a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801250c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012510:	3301      	adds	r3, #1
 8012512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012516:	4bbd      	ldr	r3, [pc, #756]	; (801280c <readCanToStructs+0x2a44>)
 8012518:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801251c:	885b      	ldrh	r3, [r3, #2]
 801251e:	4abb      	ldr	r2, [pc, #748]	; (801280c <readCanToStructs+0x2a44>)
 8012520:	011b      	lsls	r3, r3, #4
 8012522:	4413      	add	r3, r2
 8012524:	330c      	adds	r3, #12
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801252c:	429a      	cmp	r2, r3
 801252e:	d3db      	bcc.n	80124e8 <readCanToStructs+0x2720>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012534:	4ab6      	ldr	r2, [pc, #728]	; (8012810 <readCanToStructs+0x2a48>)
 8012536:	f240 4112 	movw	r1, #1042	; 0x412
 801253a:	fb01 f303 	mul.w	r3, r1, r3
 801253e:	4413      	add	r3, r2
 8012540:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012544:	781b      	ldrb	r3, [r3, #0]
 8012546:	461a      	mov	r2, r3
 8012548:	4613      	mov	r3, r2
 801254a:	00db      	lsls	r3, r3, #3
 801254c:	1a9a      	subs	r2, r3, r2
 801254e:	4baf      	ldr	r3, [pc, #700]	; (801280c <readCanToStructs+0x2a44>)
 8012550:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012554:	885b      	ldrh	r3, [r3, #2]
 8012556:	49ad      	ldr	r1, [pc, #692]	; (801280c <readCanToStructs+0x2a44>)
 8012558:	011b      	lsls	r3, r3, #4
 801255a:	440b      	add	r3, r1
 801255c:	330c      	adds	r3, #12
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	3b01      	subs	r3, #1
 8012562:	4413      	add	r3, r2
 8012564:	2b07      	cmp	r3, #7
 8012566:	d921      	bls.n	80125ac <readCanToStructs+0x27e4>
					if(Debug_flag == 1)
 8012568:	4baa      	ldr	r3, [pc, #680]	; (8012814 <readCanToStructs+0x2a4c>)
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	2b01      	cmp	r3, #1
 801256e:	d102      	bne.n	8012576 <readCanToStructs+0x27ae>
						printf("\nRCV OTH_INFO2\n");
 8012570:	48a9      	ldr	r0, [pc, #676]	; (8012818 <readCanToStructs+0x2a50>)
 8012572:	f010 f893 	bl	802269c <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012576:	4ba9      	ldr	r3, [pc, #676]	; (801281c <readCanToStructs+0x2a54>)
 8012578:	4aa9      	ldr	r2, [pc, #676]	; (8012820 <readCanToStructs+0x2a58>)
 801257a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801257e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8012582:	4ba8      	ldr	r3, [pc, #672]	; (8012824 <readCanToStructs+0x2a5c>)
 8012584:	2201      	movs	r2, #1
 8012586:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012588:	f002 ffe2 	bl	8015550 <HAL_GetTick>
 801258c:	4603      	mov	r3, r0
 801258e:	4aa6      	ldr	r2, [pc, #664]	; (8012828 <readCanToStructs+0x2a60>)
 8012590:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012596:	4a9e      	ldr	r2, [pc, #632]	; (8012810 <readCanToStructs+0x2a48>)
 8012598:	f240 4112 	movw	r1, #1042	; 0x412
 801259c:	fb01 f303 	mul.w	r3, r1, r3
 80125a0:	4413      	add	r3, r2
 80125a2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80125a6:	2200      	movs	r2, #0
 80125a8:	701a      	strb	r2, [r3, #0]
				break;
 80125aa:	e2a9      	b.n	8012b00 <readCanToStructs+0x2d38>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80125ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125b0:	4a97      	ldr	r2, [pc, #604]	; (8012810 <readCanToStructs+0x2a48>)
 80125b2:	f240 4112 	movw	r1, #1042	; 0x412
 80125b6:	fb01 f303 	mul.w	r3, r1, r3
 80125ba:	4413      	add	r3, r2
 80125bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80125c0:	2201      	movs	r2, #1
 80125c2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80125c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125c8:	4991      	ldr	r1, [pc, #580]	; (8012810 <readCanToStructs+0x2a48>)
 80125ca:	f240 4212 	movw	r2, #1042	; 0x412
 80125ce:	fb03 f202 	mul.w	r2, r3, r2
 80125d2:	440a      	add	r2, r1
 80125d4:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80125d8:	7812      	ldrb	r2, [r2, #0]
 80125da:	3201      	adds	r2, #1
 80125dc:	b2d0      	uxtb	r0, r2
 80125de:	4a8c      	ldr	r2, [pc, #560]	; (8012810 <readCanToStructs+0x2a48>)
 80125e0:	f240 4112 	movw	r1, #1042	; 0x412
 80125e4:	fb01 f303 	mul.w	r3, r1, r3
 80125e8:	4413      	add	r3, r2
 80125ea:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80125ee:	4602      	mov	r2, r0
 80125f0:	701a      	strb	r2, [r3, #0]
				break;
 80125f2:	e285      	b.n	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 80125f4:	4b8d      	ldr	r3, [pc, #564]	; (801282c <readCanToStructs+0x2a64>)
 80125f6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80125f8:	4b84      	ldr	r3, [pc, #528]	; (801280c <readCanToStructs+0x2a44>)
 80125fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125fe:	885b      	ldrh	r3, [r3, #2]
 8012600:	4a82      	ldr	r2, [pc, #520]	; (801280c <readCanToStructs+0x2a44>)
 8012602:	011b      	lsls	r3, r3, #4
 8012604:	4413      	add	r3, r2
 8012606:	3304      	adds	r3, #4
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801260e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012612:	2b00      	cmp	r3, #0
 8012614:	d110      	bne.n	8012638 <readCanToStructs+0x2870>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8012616:	2204      	movs	r2, #4
 8012618:	2100      	movs	r1, #0
 801261a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801261c:	f00f feba 	bl	8022394 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012624:	4a7a      	ldr	r2, [pc, #488]	; (8012810 <readCanToStructs+0x2a48>)
 8012626:	f240 4112 	movw	r1, #1042	; 0x412
 801262a:	fb01 f303 	mul.w	r3, r1, r3
 801262e:	4413      	add	r3, r2
 8012630:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012634:	2200      	movs	r2, #0
 8012636:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8012638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801263c:	4a74      	ldr	r2, [pc, #464]	; (8012810 <readCanToStructs+0x2a48>)
 801263e:	f240 4112 	movw	r1, #1042	; 0x412
 8012642:	fb01 f303 	mul.w	r3, r1, r3
 8012646:	4413      	add	r3, r2
 8012648:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012652:	429a      	cmp	r2, r3
 8012654:	d011      	beq.n	801267a <readCanToStructs+0x28b2>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8012656:	2204      	movs	r2, #4
 8012658:	2100      	movs	r1, #0
 801265a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801265c:	f00f fe9a 	bl	8022394 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012664:	4a6a      	ldr	r2, [pc, #424]	; (8012810 <readCanToStructs+0x2a48>)
 8012666:	f240 4112 	movw	r1, #1042	; 0x412
 801266a:	fb01 f303 	mul.w	r3, r1, r3
 801266e:	4413      	add	r3, r2
 8012670:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012674:	2200      	movs	r2, #0
 8012676:	701a      	strb	r2, [r3, #0]
					break;
 8012678:	e242      	b.n	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr += (7 * uc_seqNo);
 801267a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801267e:	4613      	mov	r3, r2
 8012680:	00db      	lsls	r3, r3, #3
 8012682:	1a9b      	subs	r3, r3, r2
 8012684:	461a      	mov	r2, r3
 8012686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012688:	4413      	add	r3, r2
 801268a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801268c:	2301      	movs	r3, #1
 801268e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012692:	e016      	b.n	80126c2 <readCanToStructs+0x28fa>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012694:	4b5d      	ldr	r3, [pc, #372]	; (801280c <readCanToStructs+0x2a44>)
 8012696:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801269a:	885b      	ldrh	r3, [r3, #2]
 801269c:	461a      	mov	r2, r3
 801269e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126a2:	495a      	ldr	r1, [pc, #360]	; (801280c <readCanToStructs+0x2a44>)
 80126a4:	0112      	lsls	r2, r2, #4
 80126a6:	440a      	add	r2, r1
 80126a8:	4413      	add	r3, r2
 80126aa:	3304      	adds	r3, #4
 80126ac:	781a      	ldrb	r2, [r3, #0]
 80126ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80126b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b4:	3301      	adds	r3, #1
 80126b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80126b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126bc:	3301      	adds	r3, #1
 80126be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80126c2:	4b52      	ldr	r3, [pc, #328]	; (801280c <readCanToStructs+0x2a44>)
 80126c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80126c8:	885b      	ldrh	r3, [r3, #2]
 80126ca:	4a50      	ldr	r2, [pc, #320]	; (801280c <readCanToStructs+0x2a44>)
 80126cc:	011b      	lsls	r3, r3, #4
 80126ce:	4413      	add	r3, r2
 80126d0:	330c      	adds	r3, #12
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80126d8:	429a      	cmp	r2, r3
 80126da:	d3db      	bcc.n	8012694 <readCanToStructs+0x28cc>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 80126dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126e0:	4a4b      	ldr	r2, [pc, #300]	; (8012810 <readCanToStructs+0x2a48>)
 80126e2:	f240 4112 	movw	r1, #1042	; 0x412
 80126e6:	fb01 f303 	mul.w	r3, r1, r3
 80126ea:	4413      	add	r3, r2
 80126ec:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	461a      	mov	r2, r3
 80126f4:	4613      	mov	r3, r2
 80126f6:	00db      	lsls	r3, r3, #3
 80126f8:	1a9a      	subs	r2, r3, r2
 80126fa:	4b44      	ldr	r3, [pc, #272]	; (801280c <readCanToStructs+0x2a44>)
 80126fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012700:	885b      	ldrh	r3, [r3, #2]
 8012702:	4942      	ldr	r1, [pc, #264]	; (801280c <readCanToStructs+0x2a44>)
 8012704:	011b      	lsls	r3, r3, #4
 8012706:	440b      	add	r3, r1
 8012708:	330c      	adds	r3, #12
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	3b01      	subs	r3, #1
 801270e:	4413      	add	r3, r2
 8012710:	2b03      	cmp	r3, #3
 8012712:	d914      	bls.n	801273e <readCanToStructs+0x2976>
					printf("Received CAN_FAULT_INJECTION\n");
 8012714:	4846      	ldr	r0, [pc, #280]	; (8012830 <readCanToStructs+0x2a68>)
 8012716:	f00f ffc1 	bl	802269c <puts>
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 801271a:	f002 ff19 	bl	8015550 <HAL_GetTick>
 801271e:	4603      	mov	r3, r0
 8012720:	4a41      	ldr	r2, [pc, #260]	; (8012828 <readCanToStructs+0x2a60>)
 8012722:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012728:	4a39      	ldr	r2, [pc, #228]	; (8012810 <readCanToStructs+0x2a48>)
 801272a:	f240 4112 	movw	r1, #1042	; 0x412
 801272e:	fb01 f303 	mul.w	r3, r1, r3
 8012732:	4413      	add	r3, r2
 8012734:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012738:	2200      	movs	r2, #0
 801273a:	701a      	strb	r2, [r3, #0]
				break;
 801273c:	e1e0      	b.n	8012b00 <readCanToStructs+0x2d38>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 801273e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012742:	4a33      	ldr	r2, [pc, #204]	; (8012810 <readCanToStructs+0x2a48>)
 8012744:	f240 4112 	movw	r1, #1042	; 0x412
 8012748:	fb01 f303 	mul.w	r3, r1, r3
 801274c:	4413      	add	r3, r2
 801274e:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012752:	2201      	movs	r2, #1
 8012754:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8012756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801275a:	492d      	ldr	r1, [pc, #180]	; (8012810 <readCanToStructs+0x2a48>)
 801275c:	f240 4212 	movw	r2, #1042	; 0x412
 8012760:	fb03 f202 	mul.w	r2, r3, r2
 8012764:	440a      	add	r2, r1
 8012766:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 801276a:	7812      	ldrb	r2, [r2, #0]
 801276c:	3201      	adds	r2, #1
 801276e:	b2d0      	uxtb	r0, r2
 8012770:	4a27      	ldr	r2, [pc, #156]	; (8012810 <readCanToStructs+0x2a48>)
 8012772:	f240 4112 	movw	r1, #1042	; 0x412
 8012776:	fb01 f303 	mul.w	r3, r1, r3
 801277a:	4413      	add	r3, r2
 801277c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012780:	4602      	mov	r2, r0
 8012782:	701a      	strb	r2, [r3, #0]
				break;
 8012784:	e1bc      	b.n	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012786:	4b2b      	ldr	r3, [pc, #172]	; (8012834 <readCanToStructs+0x2a6c>)
 8012788:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801278a:	4b20      	ldr	r3, [pc, #128]	; (801280c <readCanToStructs+0x2a44>)
 801278c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012790:	885b      	ldrh	r3, [r3, #2]
 8012792:	4a1e      	ldr	r2, [pc, #120]	; (801280c <readCanToStructs+0x2a44>)
 8012794:	011b      	lsls	r3, r3, #4
 8012796:	4413      	add	r3, r2
 8012798:	3304      	adds	r3, #4
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80127a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d110      	bne.n	80127ca <readCanToStructs+0x2a02>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80127a8:	2284      	movs	r2, #132	; 0x84
 80127aa:	2100      	movs	r1, #0
 80127ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127ae:	f00f fdf1 	bl	8022394 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80127b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127b6:	4a16      	ldr	r2, [pc, #88]	; (8012810 <readCanToStructs+0x2a48>)
 80127b8:	f240 4112 	movw	r1, #1042	; 0x412
 80127bc:	fb01 f303 	mul.w	r3, r1, r3
 80127c0:	4413      	add	r3, r2
 80127c2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80127c6:	2200      	movs	r2, #0
 80127c8:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80127ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127ce:	4a10      	ldr	r2, [pc, #64]	; (8012810 <readCanToStructs+0x2a48>)
 80127d0:	f240 4112 	movw	r1, #1042	; 0x412
 80127d4:	fb01 f303 	mul.w	r3, r1, r3
 80127d8:	4413      	add	r3, r2
 80127da:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d027      	beq.n	8012838 <readCanToStructs+0x2a70>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80127e8:	2284      	movs	r2, #132	; 0x84
 80127ea:	2100      	movs	r1, #0
 80127ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127ee:	f00f fdd1 	bl	8022394 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80127f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127f6:	4a06      	ldr	r2, [pc, #24]	; (8012810 <readCanToStructs+0x2a48>)
 80127f8:	f240 4112 	movw	r1, #1042	; 0x412
 80127fc:	fb01 f303 	mul.w	r3, r1, r3
 8012800:	4413      	add	r3, r2
 8012802:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012806:	2200      	movs	r2, #0
 8012808:	701a      	strb	r2, [r3, #0]
					break;
 801280a:	e179      	b.n	8012b00 <readCanToStructs+0x2d38>
 801280c:	20005a58 	.word	0x20005a58
 8012810:	20005234 	.word	0x20005234
 8012814:	20000645 	.word	0x20000645
 8012818:	08026cb4 	.word	0x08026cb4
 801281c:	20002614 	.word	0x20002614
 8012820:	2000261c 	.word	0x2000261c
 8012824:	200020b0 	.word	0x200020b0
 8012828:	200020b4 	.word	0x200020b4
 801282c:	20002608 	.word	0x20002608
 8012830:	08026cc4 	.word	0x08026cc4
 8012834:	200026a8 	.word	0x200026a8
				uc_pp_charPtr += (7 * uc_seqNo);
 8012838:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801283c:	4613      	mov	r3, r2
 801283e:	00db      	lsls	r3, r3, #3
 8012840:	1a9b      	subs	r3, r3, r2
 8012842:	461a      	mov	r2, r3
 8012844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012846:	4413      	add	r3, r2
 8012848:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801284a:	2301      	movs	r3, #1
 801284c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012850:	e016      	b.n	8012880 <readCanToStructs+0x2ab8>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012852:	4bc3      	ldr	r3, [pc, #780]	; (8012b60 <readCanToStructs+0x2d98>)
 8012854:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012858:	885b      	ldrh	r3, [r3, #2]
 801285a:	461a      	mov	r2, r3
 801285c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012860:	49bf      	ldr	r1, [pc, #764]	; (8012b60 <readCanToStructs+0x2d98>)
 8012862:	0112      	lsls	r2, r2, #4
 8012864:	440a      	add	r2, r1
 8012866:	4413      	add	r3, r2
 8012868:	3304      	adds	r3, #4
 801286a:	781a      	ldrb	r2, [r3, #0]
 801286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012872:	3301      	adds	r3, #1
 8012874:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801287a:	3301      	adds	r3, #1
 801287c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012880:	4bb7      	ldr	r3, [pc, #732]	; (8012b60 <readCanToStructs+0x2d98>)
 8012882:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012886:	885b      	ldrh	r3, [r3, #2]
 8012888:	4ab5      	ldr	r2, [pc, #724]	; (8012b60 <readCanToStructs+0x2d98>)
 801288a:	011b      	lsls	r3, r3, #4
 801288c:	4413      	add	r3, r2
 801288e:	330c      	adds	r3, #12
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012896:	429a      	cmp	r2, r3
 8012898:	d3db      	bcc.n	8012852 <readCanToStructs+0x2a8a>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 801289a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801289e:	4ab1      	ldr	r2, [pc, #708]	; (8012b64 <readCanToStructs+0x2d9c>)
 80128a0:	f240 4112 	movw	r1, #1042	; 0x412
 80128a4:	fb01 f303 	mul.w	r3, r1, r3
 80128a8:	4413      	add	r3, r2
 80128aa:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	461a      	mov	r2, r3
 80128b2:	4613      	mov	r3, r2
 80128b4:	00db      	lsls	r3, r3, #3
 80128b6:	1a9a      	subs	r2, r3, r2
 80128b8:	4ba9      	ldr	r3, [pc, #676]	; (8012b60 <readCanToStructs+0x2d98>)
 80128ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128be:	885b      	ldrh	r3, [r3, #2]
 80128c0:	49a7      	ldr	r1, [pc, #668]	; (8012b60 <readCanToStructs+0x2d98>)
 80128c2:	011b      	lsls	r3, r3, #4
 80128c4:	440b      	add	r3, r1
 80128c6:	330c      	adds	r3, #12
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	3b01      	subs	r3, #1
 80128cc:	4413      	add	r3, r2
 80128ce:	2b83      	cmp	r3, #131	; 0x83
 80128d0:	d91e      	bls.n	8012910 <readCanToStructs+0x2b48>
					if(Debug_flag == 1)
 80128d2:	4ba5      	ldr	r3, [pc, #660]	; (8012b68 <readCanToStructs+0x2da0>)
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	d102      	bne.n	80128e0 <readCanToStructs+0x2b18>
						printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 80128da:	48a4      	ldr	r0, [pc, #656]	; (8012b6c <readCanToStructs+0x2da4>)
 80128dc:	f00f fede 	bl	802269c <puts>
					Received_CAN_Relay_Status = YES;
 80128e0:	4ba3      	ldr	r3, [pc, #652]	; (8012b70 <readCanToStructs+0x2da8>)
 80128e2:	2201      	movs	r2, #1
 80128e4:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = SET;
 80128e6:	4ba3      	ldr	r3, [pc, #652]	; (8012b74 <readCanToStructs+0x2dac>)
 80128e8:	2201      	movs	r2, #1
 80128ea:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80128ec:	f002 fe30 	bl	8015550 <HAL_GetTick>
 80128f0:	4603      	mov	r3, r0
 80128f2:	4aa1      	ldr	r2, [pc, #644]	; (8012b78 <readCanToStructs+0x2db0>)
 80128f4:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80128f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128fa:	4a9a      	ldr	r2, [pc, #616]	; (8012b64 <readCanToStructs+0x2d9c>)
 80128fc:	f240 4112 	movw	r1, #1042	; 0x412
 8012900:	fb01 f303 	mul.w	r3, r1, r3
 8012904:	4413      	add	r3, r2
 8012906:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801290a:	2200      	movs	r2, #0
 801290c:	701a      	strb	r2, [r3, #0]
				break;
 801290e:	e0f7      	b.n	8012b00 <readCanToStructs+0x2d38>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8012910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012914:	4a93      	ldr	r2, [pc, #588]	; (8012b64 <readCanToStructs+0x2d9c>)
 8012916:	f240 4112 	movw	r1, #1042	; 0x412
 801291a:	fb01 f303 	mul.w	r3, r1, r3
 801291e:	4413      	add	r3, r2
 8012920:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8012924:	2201      	movs	r2, #1
 8012926:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801292c:	498d      	ldr	r1, [pc, #564]	; (8012b64 <readCanToStructs+0x2d9c>)
 801292e:	f240 4212 	movw	r2, #1042	; 0x412
 8012932:	fb03 f202 	mul.w	r2, r3, r2
 8012936:	440a      	add	r2, r1
 8012938:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801293c:	7812      	ldrb	r2, [r2, #0]
 801293e:	3201      	adds	r2, #1
 8012940:	b2d0      	uxtb	r0, r2
 8012942:	4a88      	ldr	r2, [pc, #544]	; (8012b64 <readCanToStructs+0x2d9c>)
 8012944:	f240 4112 	movw	r1, #1042	; 0x412
 8012948:	fb01 f303 	mul.w	r3, r1, r3
 801294c:	4413      	add	r3, r2
 801294e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012952:	4602      	mov	r2, r0
 8012954:	701a      	strb	r2, [r3, #0]
				break;
 8012956:	e0d3      	b.n	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012958:	4b88      	ldr	r3, [pc, #544]	; (8012b7c <readCanToStructs+0x2db4>)
 801295a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801295c:	4b80      	ldr	r3, [pc, #512]	; (8012b60 <readCanToStructs+0x2d98>)
 801295e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012962:	885b      	ldrh	r3, [r3, #2]
 8012964:	4a7e      	ldr	r2, [pc, #504]	; (8012b60 <readCanToStructs+0x2d98>)
 8012966:	011b      	lsls	r3, r3, #4
 8012968:	4413      	add	r3, r2
 801296a:	3304      	adds	r3, #4
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012972:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012976:	2b00      	cmp	r3, #0
 8012978:	d110      	bne.n	801299c <readCanToStructs+0x2bd4>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 801297a:	2284      	movs	r2, #132	; 0x84
 801297c:	2100      	movs	r1, #0
 801297e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012980:	f00f fd08 	bl	8022394 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012988:	4a76      	ldr	r2, [pc, #472]	; (8012b64 <readCanToStructs+0x2d9c>)
 801298a:	f240 4112 	movw	r1, #1042	; 0x412
 801298e:	fb01 f303 	mul.w	r3, r1, r3
 8012992:	4413      	add	r3, r2
 8012994:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012998:	2200      	movs	r2, #0
 801299a:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 801299c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129a0:	4a70      	ldr	r2, [pc, #448]	; (8012b64 <readCanToStructs+0x2d9c>)
 80129a2:	f240 4112 	movw	r1, #1042	; 0x412
 80129a6:	fb01 f303 	mul.w	r3, r1, r3
 80129aa:	4413      	add	r3, r2
 80129ac:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129b6:	429a      	cmp	r2, r3
 80129b8:	d011      	beq.n	80129de <readCanToStructs+0x2c16>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80129ba:	2284      	movs	r2, #132	; 0x84
 80129bc:	2100      	movs	r1, #0
 80129be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129c0:	f00f fce8 	bl	8022394 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80129c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129c8:	4a66      	ldr	r2, [pc, #408]	; (8012b64 <readCanToStructs+0x2d9c>)
 80129ca:	f240 4112 	movw	r1, #1042	; 0x412
 80129ce:	fb01 f303 	mul.w	r3, r1, r3
 80129d2:	4413      	add	r3, r2
 80129d4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80129d8:	2200      	movs	r2, #0
 80129da:	701a      	strb	r2, [r3, #0]
					break;
 80129dc:	e090      	b.n	8012b00 <readCanToStructs+0x2d38>
				uc_pp_charPtr += (7 * uc_seqNo);
 80129de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129e2:	4613      	mov	r3, r2
 80129e4:	00db      	lsls	r3, r3, #3
 80129e6:	1a9b      	subs	r3, r3, r2
 80129e8:	461a      	mov	r2, r3
 80129ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ec:	4413      	add	r3, r2
 80129ee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80129f0:	2301      	movs	r3, #1
 80129f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80129f6:	e016      	b.n	8012a26 <readCanToStructs+0x2c5e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80129f8:	4b59      	ldr	r3, [pc, #356]	; (8012b60 <readCanToStructs+0x2d98>)
 80129fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129fe:	885b      	ldrh	r3, [r3, #2]
 8012a00:	461a      	mov	r2, r3
 8012a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a06:	4956      	ldr	r1, [pc, #344]	; (8012b60 <readCanToStructs+0x2d98>)
 8012a08:	0112      	lsls	r2, r2, #4
 8012a0a:	440a      	add	r2, r1
 8012a0c:	4413      	add	r3, r2
 8012a0e:	3304      	adds	r3, #4
 8012a10:	781a      	ldrb	r2, [r3, #0]
 8012a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a14:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a18:	3301      	adds	r3, #1
 8012a1a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a20:	3301      	adds	r3, #1
 8012a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a26:	4b4e      	ldr	r3, [pc, #312]	; (8012b60 <readCanToStructs+0x2d98>)
 8012a28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a2c:	885b      	ldrh	r3, [r3, #2]
 8012a2e:	4a4c      	ldr	r2, [pc, #304]	; (8012b60 <readCanToStructs+0x2d98>)
 8012a30:	011b      	lsls	r3, r3, #4
 8012a32:	4413      	add	r3, r2
 8012a34:	330c      	adds	r3, #12
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d3db      	bcc.n	80129f8 <readCanToStructs+0x2c30>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8012a40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a44:	4a47      	ldr	r2, [pc, #284]	; (8012b64 <readCanToStructs+0x2d9c>)
 8012a46:	f240 4112 	movw	r1, #1042	; 0x412
 8012a4a:	fb01 f303 	mul.w	r3, r1, r3
 8012a4e:	4413      	add	r3, r2
 8012a50:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	461a      	mov	r2, r3
 8012a58:	4613      	mov	r3, r2
 8012a5a:	00db      	lsls	r3, r3, #3
 8012a5c:	1a9a      	subs	r2, r3, r2
 8012a5e:	4b40      	ldr	r3, [pc, #256]	; (8012b60 <readCanToStructs+0x2d98>)
 8012a60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a64:	885b      	ldrh	r3, [r3, #2]
 8012a66:	493e      	ldr	r1, [pc, #248]	; (8012b60 <readCanToStructs+0x2d98>)
 8012a68:	011b      	lsls	r3, r3, #4
 8012a6a:	440b      	add	r3, r1
 8012a6c:	330c      	adds	r3, #12
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	3b01      	subs	r3, #1
 8012a72:	4413      	add	r3, r2
 8012a74:	2b83      	cmp	r3, #131	; 0x83
 8012a76:	d91e      	bls.n	8012ab6 <readCanToStructs+0x2cee>
					if(Debug_flag == 1)
 8012a78:	4b3b      	ldr	r3, [pc, #236]	; (8012b68 <readCanToStructs+0x2da0>)
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d102      	bne.n	8012a86 <readCanToStructs+0x2cbe>
						printf("\nRCV RELAY_DATA_EI2\n");
 8012a80:	483f      	ldr	r0, [pc, #252]	; (8012b80 <readCanToStructs+0x2db8>)
 8012a82:	f00f fe0b 	bl	802269c <puts>
					Medha_CAN_Xchanging_Happening = SET;
 8012a86:	4b3b      	ldr	r3, [pc, #236]	; (8012b74 <readCanToStructs+0x2dac>)
 8012a88:	2201      	movs	r2, #1
 8012a8a:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012a8c:	f002 fd60 	bl	8015550 <HAL_GetTick>
 8012a90:	4603      	mov	r3, r0
 8012a92:	4a39      	ldr	r2, [pc, #228]	; (8012b78 <readCanToStructs+0x2db0>)
 8012a94:	6013      	str	r3, [r2, #0]
					Received_CAN_Relay_Status = YES;
 8012a96:	4b36      	ldr	r3, [pc, #216]	; (8012b70 <readCanToStructs+0x2da8>)
 8012a98:	2201      	movs	r2, #1
 8012a9a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012aa0:	4a30      	ldr	r2, [pc, #192]	; (8012b64 <readCanToStructs+0x2d9c>)
 8012aa2:	f240 4112 	movw	r1, #1042	; 0x412
 8012aa6:	fb01 f303 	mul.w	r3, r1, r3
 8012aaa:	4413      	add	r3, r2
 8012aac:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	701a      	strb	r2, [r3, #0]
				break;
 8012ab4:	e024      	b.n	8012b00 <readCanToStructs+0x2d38>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8012ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012aba:	4a2a      	ldr	r2, [pc, #168]	; (8012b64 <readCanToStructs+0x2d9c>)
 8012abc:	f240 4112 	movw	r1, #1042	; 0x412
 8012ac0:	fb01 f303 	mul.w	r3, r1, r3
 8012ac4:	4413      	add	r3, r2
 8012ac6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012aca:	2201      	movs	r2, #1
 8012acc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ad2:	4924      	ldr	r1, [pc, #144]	; (8012b64 <readCanToStructs+0x2d9c>)
 8012ad4:	f240 4212 	movw	r2, #1042	; 0x412
 8012ad8:	fb03 f202 	mul.w	r2, r3, r2
 8012adc:	440a      	add	r2, r1
 8012ade:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012ae2:	7812      	ldrb	r2, [r2, #0]
 8012ae4:	3201      	adds	r2, #1
 8012ae6:	b2d0      	uxtb	r0, r2
 8012ae8:	4a1e      	ldr	r2, [pc, #120]	; (8012b64 <readCanToStructs+0x2d9c>)
 8012aea:	f240 4112 	movw	r1, #1042	; 0x412
 8012aee:	fb01 f303 	mul.w	r3, r1, r3
 8012af2:	4413      	add	r3, r2
 8012af4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012af8:	4602      	mov	r2, r0
 8012afa:	701a      	strb	r2, [r3, #0]
				break;
 8012afc:	e000      	b.n	8012b00 <readCanToStructs+0x2d38>
				break;
 8012afe:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8012b00:	4b17      	ldr	r3, [pc, #92]	; (8012b60 <readCanToStructs+0x2d98>)
 8012b02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b06:	885b      	ldrh	r3, [r3, #2]
 8012b08:	011b      	lsls	r3, r3, #4
 8012b0a:	4a15      	ldr	r2, [pc, #84]	; (8012b60 <readCanToStructs+0x2d98>)
 8012b0c:	4413      	add	r3, r2
 8012b0e:	2210      	movs	r2, #16
 8012b10:	2100      	movs	r1, #0
 8012b12:	4618      	mov	r0, r3
 8012b14:	f00f fc3e 	bl	8022394 <memset>
			canRead.Out++;
 8012b18:	4b11      	ldr	r3, [pc, #68]	; (8012b60 <readCanToStructs+0x2d98>)
 8012b1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b1e:	885b      	ldrh	r3, [r3, #2]
 8012b20:	3301      	adds	r3, #1
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	4b0e      	ldr	r3, [pc, #56]	; (8012b60 <readCanToStructs+0x2d98>)
 8012b26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b2a:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8012b2c:	4b0c      	ldr	r3, [pc, #48]	; (8012b60 <readCanToStructs+0x2d98>)
 8012b2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b32:	885b      	ldrh	r3, [r3, #2]
 8012b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b38:	d104      	bne.n	8012b44 <readCanToStructs+0x2d7c>
				canRead.Out = 0;
 8012b3a:	4b09      	ldr	r3, [pc, #36]	; (8012b60 <readCanToStructs+0x2d98>)
 8012b3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b40:	2200      	movs	r2, #0
 8012b42:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8012b44:	f7fd f8ea 	bl	800fd1c <canDataReady>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	f47f a953 	bne.w	8011df6 <readCanToStructs+0x202e>
	break;
 8012b50:	e002      	b.n	8012b58 <readCanToStructs+0x2d90>
		break;
 8012b52:	bf00      	nop
 8012b54:	e000      	b.n	8012b58 <readCanToStructs+0x2d90>
			return;
 8012b56:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8012b58:	3738      	adds	r7, #56	; 0x38
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	20005a58 	.word	0x20005a58
 8012b64:	20005234 	.word	0x20005234
 8012b68:	20000645 	.word	0x20000645
 8012b6c:	08026ce4 	.word	0x08026ce4
 8012b70:	200020b1 	.word	0x200020b1
 8012b74:	200020b0 	.word	0x200020b0
 8012b78:	200020b4 	.word	0x200020b4
 8012b7c:	200026a8 	.word	0x200026a8
 8012b80:	08026d00 	.word	0x08026d00

08012b84 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
 8012b8c:	460b      	mov	r3, r1
 8012b8e:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8012b90:	2300      	movs	r3, #0
 8012b92:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8012b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012b98:	461a      	mov	r2, r3
 8012b9a:	6879      	ldr	r1, [r7, #4]
 8012b9c:	2000      	movs	r0, #0
 8012b9e:	f000 f845 	bl	8012c2c <GetCRC16>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	4b1d      	ldr	r3, [pc, #116]	; (8012c1c <CheckCRC+0x98>)
 8012ba8:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8012baa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012bae:	687a      	ldr	r2, [r7, #4]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	4b1a      	ldr	r3, [pc, #104]	; (8012c20 <CheckCRC+0x9c>)
 8012bb8:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8012bba:	4b19      	ldr	r3, [pc, #100]	; (8012c20 <CheckCRC+0x9c>)
 8012bbc:	881b      	ldrh	r3, [r3, #0]
 8012bbe:	021b      	lsls	r3, r3, #8
 8012bc0:	b29a      	uxth	r2, r3
 8012bc2:	4b17      	ldr	r3, [pc, #92]	; (8012c20 <CheckCRC+0x9c>)
 8012bc4:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 8012bc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012bca:	3301      	adds	r3, #1
 8012bcc:	687a      	ldr	r2, [r7, #4]
 8012bce:	4413      	add	r3, r2
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	b29a      	uxth	r2, r3
 8012bd4:	4b12      	ldr	r3, [pc, #72]	; (8012c20 <CheckCRC+0x9c>)
 8012bd6:	881b      	ldrh	r3, [r3, #0]
 8012bd8:	4313      	orrs	r3, r2
 8012bda:	b29a      	uxth	r2, r3
 8012bdc:	4b10      	ldr	r3, [pc, #64]	; (8012c20 <CheckCRC+0x9c>)
 8012bde:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8012be0:	4b0f      	ldr	r3, [pc, #60]	; (8012c20 <CheckCRC+0x9c>)
 8012be2:	881a      	ldrh	r2, [r3, #0]
 8012be4:	4b0d      	ldr	r3, [pc, #52]	; (8012c1c <CheckCRC+0x98>)
 8012be6:	881b      	ldrh	r3, [r3, #0]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d105      	bne.n	8012bf8 <CheckCRC+0x74>
	{
		retVal = 1;
 8012bec:	2301      	movs	r3, #1
 8012bee:	81fb      	strh	r3, [r7, #14]
		return k;
 8012bf0:	4b0b      	ldr	r3, [pc, #44]	; (8012c20 <CheckCRC+0x9c>)
 8012bf2:	881b      	ldrh	r3, [r3, #0]
 8012bf4:	b21b      	sxth	r3, r3
 8012bf6:	e00d      	b.n	8012c14 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8012bf8:	4b08      	ldr	r3, [pc, #32]	; (8012c1c <CheckCRC+0x98>)
 8012bfa:	881b      	ldrh	r3, [r3, #0]
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	4809      	ldr	r0, [pc, #36]	; (8012c24 <CheckCRC+0xa0>)
 8012c00:	f00f fcb0 	bl	8022564 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8012c04:	4b06      	ldr	r3, [pc, #24]	; (8012c20 <CheckCRC+0x9c>)
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4807      	ldr	r0, [pc, #28]	; (8012c28 <CheckCRC+0xa4>)
 8012c0c:	f00f fcaa 	bl	8022564 <iprintf>
	return retVal;
 8012c10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3710      	adds	r7, #16
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	20009bb4 	.word	0x20009bb4
 8012c20:	20009bb6 	.word	0x20009bb6
 8012c24:	08026d14 	.word	0x08026d14
 8012c28:	08026d2c 	.word	0x08026d2c

08012c2c <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b085      	sub	sp, #20
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	4603      	mov	r3, r0
 8012c34:	6039      	str	r1, [r7, #0]
 8012c36:	80fb      	strh	r3, [r7, #6]
 8012c38:	4613      	mov	r3, r2
 8012c3a:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8012c3c:	88fb      	ldrh	r3, [r7, #6]
 8012c3e:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8012c40:	e038      	b.n	8012cb4 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8012c42:	89fb      	ldrh	r3, [r7, #14]
 8012c44:	f003 030f 	and.w	r3, r3, #15
 8012c48:	4a22      	ldr	r2, [pc, #136]	; (8012cd4 <GetCRC16+0xa8>)
 8012c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c4e:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8012c50:	89fb      	ldrh	r3, [r7, #14]
 8012c52:	091b      	lsrs	r3, r3, #4
 8012c54:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 8012c56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012c5a:	89bb      	ldrh	r3, [r7, #12]
 8012c5c:	4053      	eors	r3, r2
 8012c5e:	b21a      	sxth	r2, r3
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	f003 030f 	and.w	r3, r3, #15
 8012c68:	491a      	ldr	r1, [pc, #104]	; (8012cd4 <GetCRC16+0xa8>)
 8012c6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012c6e:	b21b      	sxth	r3, r3
 8012c70:	4053      	eors	r3, r2
 8012c72:	b21b      	sxth	r3, r3
 8012c74:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8012c76:	89fb      	ldrh	r3, [r7, #14]
 8012c78:	f003 030f 	and.w	r3, r3, #15
 8012c7c:	4a15      	ldr	r2, [pc, #84]	; (8012cd4 <GetCRC16+0xa8>)
 8012c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c82:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8012c84:	89fb      	ldrh	r3, [r7, #14]
 8012c86:	091b      	lsrs	r3, r3, #4
 8012c88:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8012c8a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012c8e:	89bb      	ldrh	r3, [r7, #12]
 8012c90:	4053      	eors	r3, r2
 8012c92:	b21a      	sxth	r2, r3
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	091b      	lsrs	r3, r3, #4
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	f003 030f 	and.w	r3, r3, #15
 8012ca0:	490c      	ldr	r1, [pc, #48]	; (8012cd4 <GetCRC16+0xa8>)
 8012ca2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012ca6:	b21b      	sxth	r3, r3
 8012ca8:	4053      	eors	r3, r2
 8012caa:	b21b      	sxth	r3, r3
 8012cac:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 8012cb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	3a01      	subs	r2, #1
 8012cbc:	b292      	uxth	r2, r2
 8012cbe:	80ba      	strh	r2, [r7, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	dcbe      	bgt.n	8012c42 <GetCRC16+0x16>
	}
	return(uiCrc);
 8012cc4:	89fb      	ldrh	r3, [r7, #14]
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3714      	adds	r7, #20
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr
 8012cd2:	bf00      	nop
 8012cd4:	08028f80 	.word	0x08028f80

08012cd8 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8012ce4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ce8:	461a      	mov	r2, r3
 8012cea:	6879      	ldr	r1, [r7, #4]
 8012cec:	2000      	movs	r0, #0
 8012cee:	f7ff ff9d 	bl	8012c2c <GetCRC16>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	4b11      	ldr	r3, [pc, #68]	; (8012d3c <ComputeCRC+0x64>)
 8012cf8:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8012cfa:	4b10      	ldr	r3, [pc, #64]	; (8012d3c <ComputeCRC+0x64>)
 8012cfc:	881a      	ldrh	r2, [r3, #0]
 8012cfe:	4b10      	ldr	r3, [pc, #64]	; (8012d40 <ComputeCRC+0x68>)
 8012d00:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8012d02:	4b0e      	ldr	r3, [pc, #56]	; (8012d3c <ComputeCRC+0x64>)
 8012d04:	8819      	ldrh	r1, [r3, #0]
 8012d06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	4413      	add	r3, r2
 8012d10:	b2ca      	uxtb	r2, r1
 8012d12:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8012d14:	4b09      	ldr	r3, [pc, #36]	; (8012d3c <ComputeCRC+0x64>)
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	0a1b      	lsrs	r3, r3, #8
 8012d1a:	b29a      	uxth	r2, r3
 8012d1c:	4b07      	ldr	r3, [pc, #28]	; (8012d3c <ComputeCRC+0x64>)
 8012d1e:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8012d20:	4b06      	ldr	r3, [pc, #24]	; (8012d3c <ComputeCRC+0x64>)
 8012d22:	8819      	ldrh	r1, [r3, #0]
 8012d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d28:	687a      	ldr	r2, [r7, #4]
 8012d2a:	4413      	add	r3, r2
 8012d2c:	b2ca      	uxtb	r2, r1
 8012d2e:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8012d30:	4b03      	ldr	r3, [pc, #12]	; (8012d40 <ComputeCRC+0x68>)
 8012d32:	881b      	ldrh	r3, [r3, #0]
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3708      	adds	r7, #8
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	20009bb8 	.word	0x20009bb8
 8012d40:	20009bba 	.word	0x20009bba

08012d44 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8012d44:	b480      	push	{r7}
 8012d46:	b087      	sub	sp, #28
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8012d50:	2300      	movs	r3, #0
 8012d52:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8012d54:	2300      	movs	r3, #0
 8012d56:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	005b      	lsls	r3, r3, #1
 8012d5c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 8012d5e:	2300      	movs	r3, #0
 8012d60:	60fb      	str	r3, [r7, #12]
 8012d62:	e012      	b.n	8012d8a <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	f003 0301 	and.w	r3, r3, #1
 8012d6a:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f1c3 031f 	rsb	r3, r3, #31
 8012d72:	68ba      	ldr	r2, [r7, #8]
 8012d74:	fa02 f303 	lsl.w	r3, r2, r3
 8012d78:	697a      	ldr	r2, [r7, #20]
 8012d7a:	4313      	orrs	r3, r2
 8012d7c:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	085b      	lsrs	r3, r3, #1
 8012d82:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	3301      	adds	r3, #1
 8012d88:	60fb      	str	r3, [r7, #12]
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2b1f      	cmp	r3, #31
 8012d8e:	dde9      	ble.n	8012d64 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 8012d90:	697b      	ldr	r3, [r7, #20]
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	371c      	adds	r7, #28
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr
	...

08012da0 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b088      	sub	sp, #32
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	460b      	mov	r3, r1
 8012daa:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8012dac:	2300      	movs	r3, #0
 8012dae:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 8012db0:	2300      	movs	r3, #0
 8012db2:	617b      	str	r3, [r7, #20]
	int converted = 0;
 8012db4:	2300      	movs	r3, #0
 8012db6:	613b      	str	r3, [r7, #16]
	int i=0;
 8012db8:	2300      	movs	r3, #0
 8012dba:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8012dbc:	4b26      	ldr	r3, [pc, #152]	; (8012e58 <CalculateDirectReverseCrc+0xb8>)
 8012dbe:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 8012dc0:	68f8      	ldr	r0, [r7, #12]
 8012dc2:	f7ff ffbf 	bl	8012d44 <ReverseCRCPolynomial>
 8012dc6:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 8012dc8:	2300      	movs	r3, #0
 8012dca:	61bb      	str	r3, [r7, #24]
 8012dcc:	e00d      	b.n	8012dea <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 8012dce:	69f8      	ldr	r0, [r7, #28]
 8012dd0:	69bb      	ldr	r3, [r7, #24]
 8012dd2:	687a      	ldr	r2, [r7, #4]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	697a      	ldr	r2, [r7, #20]
 8012dda:	4619      	mov	r1, r3
 8012ddc:	f000 f844 	bl	8012e68 <AnsoldoCrc>
 8012de0:	4603      	mov	r3, r0
 8012de2:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8012de4:	69bb      	ldr	r3, [r7, #24]
 8012de6:	3301      	adds	r3, #1
 8012de8:	61bb      	str	r3, [r7, #24]
 8012dea:	887b      	ldrh	r3, [r7, #2]
 8012dec:	69ba      	ldr	r2, [r7, #24]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	dbed      	blt.n	8012dce <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8012df2:	69fb      	ldr	r3, [r7, #28]
 8012df4:	061b      	lsls	r3, r3, #24
 8012df6:	693a      	ldr	r2, [r7, #16]
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8012dfc:	69fb      	ldr	r3, [r7, #28]
 8012dfe:	021b      	lsls	r3, r3, #8
 8012e00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012e04:	693a      	ldr	r2, [r7, #16]
 8012e06:	4313      	orrs	r3, r2
 8012e08:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	121b      	asrs	r3, r3, #8
 8012e0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012e12:	693a      	ldr	r2, [r7, #16]
 8012e14:	4313      	orrs	r3, r2
 8012e16:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	0e1a      	lsrs	r2, r3, #24
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	4313      	orrs	r3, r2
 8012e20:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8012e22:	4b0e      	ldr	r3, [pc, #56]	; (8012e5c <CalculateDirectReverseCrc+0xbc>)
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	2b01      	cmp	r3, #1
 8012e28:	d110      	bne.n	8012e4c <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8012e2a:	480d      	ldr	r0, [pc, #52]	; (8012e60 <CalculateDirectReverseCrc+0xc0>)
 8012e2c:	f007 f842 	bl	8019eb4 <HAL_RNG_GetRandomNumber>
 8012e30:	4601      	mov	r1, r0
 8012e32:	4b0c      	ldr	r3, [pc, #48]	; (8012e64 <CalculateDirectReverseCrc+0xc4>)
 8012e34:	fba3 2301 	umull	r2, r3, r3, r1
 8012e38:	08da      	lsrs	r2, r3, #3
 8012e3a:	4613      	mov	r3, r2
 8012e3c:	009b      	lsls	r3, r3, #2
 8012e3e:	4413      	add	r3, r2
 8012e40:	005b      	lsls	r3, r3, #1
 8012e42:	1aca      	subs	r2, r1, r3
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	4413      	add	r3, r2
 8012e48:	3301      	adds	r3, #1
 8012e4a:	e000      	b.n	8012e4e <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8012e4c:	693b      	ldr	r3, [r7, #16]
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3720      	adds	r7, #32
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	d20d8a81 	.word	0xd20d8a81
 8012e5c:	20000e39 	.word	0x20000e39
 8012e60:	20009c7c 	.word	0x20009c7c
 8012e64:	cccccccd 	.word	0xcccccccd

08012e68 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b08b      	sub	sp, #44	; 0x2c
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	460b      	mov	r3, r1
 8012e72:	607a      	str	r2, [r7, #4]
 8012e74:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8012e76:	7afb      	ldrb	r3, [r7, #11]
 8012e78:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012e80:	e01d      	b.n	8012ebe <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	f003 0301 	and.w	r3, r3, #1
 8012e88:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8012e8a:	6a3b      	ldr	r3, [r7, #32]
 8012e8c:	f003 0301 	and.w	r3, r3, #1
 8012e90:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	085b      	lsrs	r3, r3, #1
 8012e96:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8012e98:	69fa      	ldr	r2, [r7, #28]
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	4053      	eors	r3, r2
 8012e9e:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	2b01      	cmp	r3, #1
 8012ea4:	d103      	bne.n	8012eae <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 8012ea6:	68fa      	ldr	r2, [r7, #12]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	4053      	eors	r3, r2
 8012eac:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 8012eae:	6a3b      	ldr	r3, [r7, #32]
 8012eb0:	085b      	lsrs	r3, r3, #1
 8012eb2:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 8012eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012eb8:	3301      	adds	r3, #1
 8012eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ec2:	2b08      	cmp	r3, #8
 8012ec4:	d9dd      	bls.n	8012e82 <AnsoldoCrc+0x1a>
	}
	return (Crc);
 8012ec6:	68fb      	ldr	r3, [r7, #12]
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	372c      	adds	r7, #44	; 0x2c
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	4770      	bx	lr

08012ed4 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b090      	sub	sp, #64	; 0x40
 8012ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ede:	2200      	movs	r2, #0
 8012ee0:	601a      	str	r2, [r3, #0]
 8012ee2:	605a      	str	r2, [r3, #4]
 8012ee4:	609a      	str	r2, [r3, #8]
 8012ee6:	60da      	str	r2, [r3, #12]
 8012ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8012eea:	4bb2      	ldr	r3, [pc, #712]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012eee:	4ab1      	ldr	r2, [pc, #708]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8012ef6:	4baf      	ldr	r3, [pc, #700]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012f02:	4bac      	ldr	r3, [pc, #688]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f06:	4aab      	ldr	r2, [pc, #684]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f08:	f043 0320 	orr.w	r3, r3, #32
 8012f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8012f0e:	4ba9      	ldr	r3, [pc, #676]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f12:	f003 0320 	and.w	r3, r3, #32
 8012f16:	627b      	str	r3, [r7, #36]	; 0x24
 8012f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012f1a:	4ba6      	ldr	r3, [pc, #664]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f1e:	4aa5      	ldr	r2, [pc, #660]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f24:	6313      	str	r3, [r2, #48]	; 0x30
 8012f26:	4ba3      	ldr	r3, [pc, #652]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f2e:	623b      	str	r3, [r7, #32]
 8012f30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012f32:	4ba0      	ldr	r3, [pc, #640]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f36:	4a9f      	ldr	r2, [pc, #636]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f38:	f043 0304 	orr.w	r3, r3, #4
 8012f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8012f3e:	4b9d      	ldr	r3, [pc, #628]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f42:	f003 0304 	and.w	r3, r3, #4
 8012f46:	61fb      	str	r3, [r7, #28]
 8012f48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f4a:	4b9a      	ldr	r3, [pc, #616]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f4e:	4a99      	ldr	r2, [pc, #612]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f50:	f043 0301 	orr.w	r3, r3, #1
 8012f54:	6313      	str	r3, [r2, #48]	; 0x30
 8012f56:	4b97      	ldr	r3, [pc, #604]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f5a:	f003 0301 	and.w	r3, r3, #1
 8012f5e:	61bb      	str	r3, [r7, #24]
 8012f60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012f62:	4b94      	ldr	r3, [pc, #592]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f66:	4a93      	ldr	r2, [pc, #588]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8012f6e:	4b91      	ldr	r3, [pc, #580]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f76:	617b      	str	r3, [r7, #20]
 8012f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012f7a:	4b8e      	ldr	r3, [pc, #568]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f7e:	4a8d      	ldr	r2, [pc, #564]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f80:	f043 0310 	orr.w	r3, r3, #16
 8012f84:	6313      	str	r3, [r2, #48]	; 0x30
 8012f86:	4b8b      	ldr	r3, [pc, #556]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f8a:	f003 0310 	and.w	r3, r3, #16
 8012f8e:	613b      	str	r3, [r7, #16]
 8012f90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012f92:	4b88      	ldr	r3, [pc, #544]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f96:	4a87      	ldr	r2, [pc, #540]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012f98:	f043 0302 	orr.w	r3, r3, #2
 8012f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8012f9e:	4b85      	ldr	r3, [pc, #532]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fa2:	f003 0302 	and.w	r3, r3, #2
 8012fa6:	60fb      	str	r3, [r7, #12]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012faa:	4b82      	ldr	r3, [pc, #520]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fae:	4a81      	ldr	r2, [pc, #516]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fb0:	f043 0308 	orr.w	r3, r3, #8
 8012fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8012fb6:	4b7f      	ldr	r3, [pc, #508]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fba:	f003 0308 	and.w	r3, r3, #8
 8012fbe:	60bb      	str	r3, [r7, #8]
 8012fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8012fc2:	4b7c      	ldr	r3, [pc, #496]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fc6:	4a7b      	ldr	r2, [pc, #492]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8012fce:	4b79      	ldr	r3, [pc, #484]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012fd6:	607b      	str	r3, [r7, #4]
 8012fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8012fda:	4b76      	ldr	r3, [pc, #472]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fde:	4a75      	ldr	r2, [pc, #468]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8012fe6:	4b73      	ldr	r3, [pc, #460]	; (80131b4 <MX_GPIO_Init+0x2e0>)
 8012fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012fee:	603b      	str	r3, [r7, #0]
 8012ff0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8012ff8:	486f      	ldr	r0, [pc, #444]	; (80131b8 <MX_GPIO_Init+0x2e4>)
 8012ffa:	f004 ff79 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8012ffe:	2200      	movs	r2, #0
 8013000:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8013004:	486d      	ldr	r0, [pc, #436]	; (80131bc <MX_GPIO_Init+0x2e8>)
 8013006:	f004 ff73 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 801300a:	2200      	movs	r2, #0
 801300c:	f240 7104 	movw	r1, #1796	; 0x704
 8013010:	486b      	ldr	r0, [pc, #428]	; (80131c0 <MX_GPIO_Init+0x2ec>)
 8013012:	f004 ff6d 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8013016:	2201      	movs	r2, #1
 8013018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801301c:	4869      	ldr	r0, [pc, #420]	; (80131c4 <MX_GPIO_Init+0x2f0>)
 801301e:	f004 ff67 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 8013022:	2200      	movs	r2, #0
 8013024:	f241 0104 	movw	r1, #4100	; 0x1004
 8013028:	4867      	ldr	r0, [pc, #412]	; (80131c8 <MX_GPIO_Init+0x2f4>)
 801302a:	f004 ff61 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 801302e:	2201      	movs	r2, #1
 8013030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013034:	4865      	ldr	r0, [pc, #404]	; (80131cc <MX_GPIO_Init+0x2f8>)
 8013036:	f004 ff5b 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 801303a:	2200      	movs	r2, #0
 801303c:	2108      	movs	r1, #8
 801303e:	4864      	ldr	r0, [pc, #400]	; (80131d0 <MX_GPIO_Init+0x2fc>)
 8013040:	f004 ff56 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8013044:	2201      	movs	r2, #1
 8013046:	2160      	movs	r1, #96	; 0x60
 8013048:	4861      	ldr	r0, [pc, #388]	; (80131d0 <MX_GPIO_Init+0x2fc>)
 801304a:	f004 ff51 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 801304e:	2200      	movs	r2, #0
 8013050:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8013054:	485f      	ldr	r0, [pc, #380]	; (80131d4 <MX_GPIO_Init+0x300>)
 8013056:	f004 ff4b 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 801305a:	2201      	movs	r2, #1
 801305c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013060:	485c      	ldr	r0, [pc, #368]	; (80131d4 <MX_GPIO_Init+0x300>)
 8013062:	f004 ff45 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8013066:	2201      	movs	r2, #1
 8013068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801306c:	4856      	ldr	r0, [pc, #344]	; (80131c8 <MX_GPIO_Init+0x2f4>)
 801306e:	f004 ff3f 	bl	8017ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 8013072:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8013076:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013078:	2301      	movs	r3, #1
 801307a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801307c:	2300      	movs	r3, #0
 801307e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013080:	2303      	movs	r3, #3
 8013082:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013088:	4619      	mov	r1, r3
 801308a:	484b      	ldr	r0, [pc, #300]	; (80131b8 <MX_GPIO_Init+0x2e4>)
 801308c:	f004 fd6c 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 8013090:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013096:	2300      	movs	r3, #0
 8013098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801309a:	2300      	movs	r3, #0
 801309c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801309e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130a2:	4619      	mov	r1, r3
 80130a4:	4844      	ldr	r0, [pc, #272]	; (80131b8 <MX_GPIO_Init+0x2e4>)
 80130a6:	f004 fd5f 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 80130aa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80130ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80130b0:	2301      	movs	r3, #1
 80130b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130b4:	2300      	movs	r3, #0
 80130b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130b8:	2303      	movs	r3, #3
 80130ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80130bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130c0:	4619      	mov	r1, r3
 80130c2:	483e      	ldr	r0, [pc, #248]	; (80131bc <MX_GPIO_Init+0x2e8>)
 80130c4:	f004 fd50 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 80130c8:	2304      	movs	r3, #4
 80130ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80130cc:	2300      	movs	r3, #0
 80130ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130d0:	2300      	movs	r3, #0
 80130d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 80130d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130d8:	4619      	mov	r1, r3
 80130da:	483c      	ldr	r0, [pc, #240]	; (80131cc <MX_GPIO_Init+0x2f8>)
 80130dc:	f004 fd44 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 80130e0:	f240 7304 	movw	r3, #1796	; 0x704
 80130e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80130e6:	2301      	movs	r3, #1
 80130e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130ea:	2300      	movs	r3, #0
 80130ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130ee:	2303      	movs	r3, #3
 80130f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80130f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130f6:	4619      	mov	r1, r3
 80130f8:	4831      	ldr	r0, [pc, #196]	; (80131c0 <MX_GPIO_Init+0x2ec>)
 80130fa:	f004 fd35 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 80130fe:	2303      	movs	r3, #3
 8013100:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013102:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8013106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013108:	2300      	movs	r3, #0
 801310a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801310c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013110:	4619      	mov	r1, r3
 8013112:	482d      	ldr	r0, [pc, #180]	; (80131c8 <MX_GPIO_Init+0x2f4>)
 8013114:	f004 fd28 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 8013118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801311c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801311e:	2300      	movs	r3, #0
 8013120:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013122:	2300      	movs	r3, #0
 8013124:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 8013126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801312a:	4619      	mov	r1, r3
 801312c:	4825      	ldr	r0, [pc, #148]	; (80131c4 <MX_GPIO_Init+0x2f0>)
 801312e:	f004 fd1b 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8013132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013138:	2301      	movs	r3, #1
 801313a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801313c:	2300      	movs	r3, #0
 801313e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013140:	2303      	movs	r3, #3
 8013142:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8013144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013148:	4619      	mov	r1, r3
 801314a:	481e      	ldr	r0, [pc, #120]	; (80131c4 <MX_GPIO_Init+0x2f0>)
 801314c:	f004 fd0c 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8013150:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8013154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013156:	2300      	movs	r3, #0
 8013158:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801315a:	2300      	movs	r3, #0
 801315c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801315e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013162:	4619      	mov	r1, r3
 8013164:	481a      	ldr	r0, [pc, #104]	; (80131d0 <MX_GPIO_Init+0x2fc>)
 8013166:	f004 fcff 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 801316a:	f241 4304 	movw	r3, #5124	; 0x1404
 801316e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013170:	2301      	movs	r3, #1
 8013172:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013174:	2300      	movs	r3, #0
 8013176:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013178:	2303      	movs	r3, #3
 801317a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801317c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013180:	4619      	mov	r1, r3
 8013182:	4811      	ldr	r0, [pc, #68]	; (80131c8 <MX_GPIO_Init+0x2f4>)
 8013184:	f004 fcf0 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8013188:	2308      	movs	r3, #8
 801318a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801318c:	2300      	movs	r3, #0
 801318e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013190:	2300      	movs	r3, #0
 8013192:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 8013194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013198:	4619      	mov	r1, r3
 801319a:	480b      	ldr	r0, [pc, #44]	; (80131c8 <MX_GPIO_Init+0x2f4>)
 801319c:	f004 fce4 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 80131a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80131a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80131a6:	2301      	movs	r3, #1
 80131a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131aa:	2300      	movs	r3, #0
 80131ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131ae:	2300      	movs	r3, #0
 80131b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80131b2:	e011      	b.n	80131d8 <MX_GPIO_Init+0x304>
 80131b4:	40023800 	.word	0x40023800
 80131b8:	40022000 	.word	0x40022000
 80131bc:	40021400 	.word	0x40021400
 80131c0:	40021c00 	.word	0x40021c00
 80131c4:	40021000 	.word	0x40021000
 80131c8:	40021800 	.word	0x40021800
 80131cc:	40020800 	.word	0x40020800
 80131d0:	40020c00 	.word	0x40020c00
 80131d4:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 80131d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131dc:	4619      	mov	r1, r3
 80131de:	4836      	ldr	r0, [pc, #216]	; (80132b8 <MX_GPIO_Init+0x3e4>)
 80131e0:	f004 fcc2 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 80131e4:	2303      	movs	r3, #3
 80131e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80131e8:	2302      	movs	r3, #2
 80131ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131ec:	2300      	movs	r3, #0
 80131ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131f0:	2303      	movs	r3, #3
 80131f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80131f4:	2309      	movs	r3, #9
 80131f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80131f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131fc:	4619      	mov	r1, r3
 80131fe:	482f      	ldr	r0, [pc, #188]	; (80132bc <MX_GPIO_Init+0x3e8>)
 8013200:	f004 fcb2 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8013204:	2368      	movs	r3, #104	; 0x68
 8013206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013208:	2301      	movs	r3, #1
 801320a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801320c:	2300      	movs	r3, #0
 801320e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013210:	2303      	movs	r3, #3
 8013212:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013218:	4619      	mov	r1, r3
 801321a:	4828      	ldr	r0, [pc, #160]	; (80132bc <MX_GPIO_Init+0x3e8>)
 801321c:	f004 fca4 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8013220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013224:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013226:	2300      	movs	r3, #0
 8013228:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801322a:	2300      	movs	r3, #0
 801322c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 801322e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013232:	4619      	mov	r1, r3
 8013234:	4822      	ldr	r0, [pc, #136]	; (80132c0 <MX_GPIO_Init+0x3ec>)
 8013236:	f004 fc97 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 801323a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801323e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013240:	2301      	movs	r3, #1
 8013242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013244:	2300      	movs	r3, #0
 8013246:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013248:	2300      	movs	r3, #0
 801324a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801324c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013250:	4619      	mov	r1, r3
 8013252:	481b      	ldr	r0, [pc, #108]	; (80132c0 <MX_GPIO_Init+0x3ec>)
 8013254:	f004 fc88 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8013258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801325c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801325e:	2301      	movs	r3, #1
 8013260:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013262:	2300      	movs	r3, #0
 8013264:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013266:	2303      	movs	r3, #3
 8013268:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 801326a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801326e:	4619      	mov	r1, r3
 8013270:	4813      	ldr	r0, [pc, #76]	; (80132c0 <MX_GPIO_Init+0x3ec>)
 8013272:	f004 fc79 	bl	8017b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 8013276:	2318      	movs	r3, #24
 8013278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801327a:	2300      	movs	r3, #0
 801327c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801327e:	2300      	movs	r3, #0
 8013280:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8013282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013286:	4619      	mov	r1, r3
 8013288:	480e      	ldr	r0, [pc, #56]	; (80132c4 <MX_GPIO_Init+0x3f0>)
 801328a:	f004 fc6d 	bl	8017b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 801328e:	2200      	movs	r2, #0
 8013290:	2101      	movs	r1, #1
 8013292:	2006      	movs	r0, #6
 8013294:	f003 f93d 	bl	8016512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8013298:	2006      	movs	r0, #6
 801329a:	f003 f956 	bl	801654a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 801329e:	2201      	movs	r2, #1
 80132a0:	2101      	movs	r1, #1
 80132a2:	2007      	movs	r0, #7
 80132a4:	f003 f935 	bl	8016512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80132a8:	2007      	movs	r0, #7
 80132aa:	f003 f94e 	bl	801654a <HAL_NVIC_EnableIRQ>

}
 80132ae:	bf00      	nop
 80132b0:	3740      	adds	r7, #64	; 0x40
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	40020800 	.word	0x40020800
 80132bc:	40020c00 	.word	0x40020c00
 80132c0:	40022400 	.word	0x40022400
 80132c4:	40022800 	.word	0x40022800

080132c8 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 80132cc:	4b0a      	ldr	r3, [pc, #40]	; (80132f8 <Feed_wdt+0x30>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7fb fb5b 	bl	800e98c <HAL_Elaps_Ticks>
 80132d6:	4603      	mov	r3, r0
 80132d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80132dc:	d309      	bcc.n	80132f2 <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 80132de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80132e2:	4806      	ldr	r0, [pc, #24]	; (80132fc <Feed_wdt+0x34>)
 80132e4:	f004 fe1d 	bl	8017f22 <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 80132e8:	f002 f932 	bl	8015550 <HAL_GetTick>
 80132ec:	4603      	mov	r3, r0
 80132ee:	4a02      	ldr	r2, [pc, #8]	; (80132f8 <Feed_wdt+0x30>)
 80132f0:	6013      	str	r3, [r2, #0]
	}

}
 80132f2:	bf00      	nop
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	20009bbc 	.word	0x20009bbc
 80132fc:	40022400 	.word	0x40022400

08013300 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 8013304:	4b09      	ldr	r3, [pc, #36]	; (801332c <Blink_S2+0x2c>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	4618      	mov	r0, r3
 801330a:	f7fb fb3f 	bl	800e98c <HAL_Elaps_Ticks>
 801330e:	4603      	mov	r3, r0
 8013310:	2b64      	cmp	r3, #100	; 0x64
 8013312:	d909      	bls.n	8013328 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8013314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013318:	4805      	ldr	r0, [pc, #20]	; (8013330 <Blink_S2+0x30>)
 801331a:	f004 fe02 	bl	8017f22 <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 801331e:	f002 f917 	bl	8015550 <HAL_GetTick>
 8013322:	4603      	mov	r3, r0
 8013324:	4a01      	ldr	r2, [pc, #4]	; (801332c <Blink_S2+0x2c>)
 8013326:	6013      	str	r3, [r2, #0]
	}
}
 8013328:	bf00      	nop
 801332a:	bd80      	pop	{r7, pc}
 801332c:	20009bc0 	.word	0x20009bc0
 8013330:	40021c00 	.word	0x40021c00

08013334 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8013338:	4b1b      	ldr	r3, [pc, #108]	; (80133a8 <MX_I2C1_Init+0x74>)
 801333a:	4a1c      	ldr	r2, [pc, #112]	; (80133ac <MX_I2C1_Init+0x78>)
 801333c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 801333e:	4b1a      	ldr	r3, [pc, #104]	; (80133a8 <MX_I2C1_Init+0x74>)
 8013340:	4a1b      	ldr	r2, [pc, #108]	; (80133b0 <MX_I2C1_Init+0x7c>)
 8013342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8013344:	4b18      	ldr	r3, [pc, #96]	; (80133a8 <MX_I2C1_Init+0x74>)
 8013346:	2200      	movs	r2, #0
 8013348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801334a:	4b17      	ldr	r3, [pc, #92]	; (80133a8 <MX_I2C1_Init+0x74>)
 801334c:	2201      	movs	r2, #1
 801334e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013350:	4b15      	ldr	r3, [pc, #84]	; (80133a8 <MX_I2C1_Init+0x74>)
 8013352:	2200      	movs	r2, #0
 8013354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8013356:	4b14      	ldr	r3, [pc, #80]	; (80133a8 <MX_I2C1_Init+0x74>)
 8013358:	2200      	movs	r2, #0
 801335a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801335c:	4b12      	ldr	r3, [pc, #72]	; (80133a8 <MX_I2C1_Init+0x74>)
 801335e:	2200      	movs	r2, #0
 8013360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013362:	4b11      	ldr	r3, [pc, #68]	; (80133a8 <MX_I2C1_Init+0x74>)
 8013364:	2200      	movs	r2, #0
 8013366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013368:	4b0f      	ldr	r3, [pc, #60]	; (80133a8 <MX_I2C1_Init+0x74>)
 801336a:	2200      	movs	r2, #0
 801336c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801336e:	480e      	ldr	r0, [pc, #56]	; (80133a8 <MX_I2C1_Init+0x74>)
 8013370:	f004 fe16 	bl	8017fa0 <HAL_I2C_Init>
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d001      	beq.n	801337e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 801337a:	f000 fb5d 	bl	8013a38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801337e:	2100      	movs	r1, #0
 8013380:	4809      	ldr	r0, [pc, #36]	; (80133a8 <MX_I2C1_Init+0x74>)
 8013382:	f005 fb65 	bl	8018a50 <HAL_I2CEx_ConfigAnalogFilter>
 8013386:	4603      	mov	r3, r0
 8013388:	2b00      	cmp	r3, #0
 801338a:	d001      	beq.n	8013390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 801338c:	f000 fb54 	bl	8013a38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8013390:	2100      	movs	r1, #0
 8013392:	4805      	ldr	r0, [pc, #20]	; (80133a8 <MX_I2C1_Init+0x74>)
 8013394:	f005 fba7 	bl	8018ae6 <HAL_I2CEx_ConfigDigitalFilter>
 8013398:	4603      	mov	r3, r0
 801339a:	2b00      	cmp	r3, #0
 801339c:	d001      	beq.n	80133a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 801339e:	f000 fb4b 	bl	8013a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80133a2:	bf00      	nop
 80133a4:	bd80      	pop	{r7, pc}
 80133a6:	bf00      	nop
 80133a8:	20009bc4 	.word	0x20009bc4
 80133ac:	40005400 	.word	0x40005400
 80133b0:	c0000e12 	.word	0xc0000e12

080133b4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80133b8:	4b1b      	ldr	r3, [pc, #108]	; (8013428 <MX_I2C2_Init+0x74>)
 80133ba:	4a1c      	ldr	r2, [pc, #112]	; (801342c <MX_I2C2_Init+0x78>)
 80133bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 80133be:	4b1a      	ldr	r3, [pc, #104]	; (8013428 <MX_I2C2_Init+0x74>)
 80133c0:	4a1b      	ldr	r2, [pc, #108]	; (8013430 <MX_I2C2_Init+0x7c>)
 80133c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80133c4:	4b18      	ldr	r3, [pc, #96]	; (8013428 <MX_I2C2_Init+0x74>)
 80133c6:	2200      	movs	r2, #0
 80133c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80133ca:	4b17      	ldr	r3, [pc, #92]	; (8013428 <MX_I2C2_Init+0x74>)
 80133cc:	2201      	movs	r2, #1
 80133ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80133d0:	4b15      	ldr	r3, [pc, #84]	; (8013428 <MX_I2C2_Init+0x74>)
 80133d2:	2200      	movs	r2, #0
 80133d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80133d6:	4b14      	ldr	r3, [pc, #80]	; (8013428 <MX_I2C2_Init+0x74>)
 80133d8:	2200      	movs	r2, #0
 80133da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80133dc:	4b12      	ldr	r3, [pc, #72]	; (8013428 <MX_I2C2_Init+0x74>)
 80133de:	2200      	movs	r2, #0
 80133e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80133e2:	4b11      	ldr	r3, [pc, #68]	; (8013428 <MX_I2C2_Init+0x74>)
 80133e4:	2200      	movs	r2, #0
 80133e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80133e8:	4b0f      	ldr	r3, [pc, #60]	; (8013428 <MX_I2C2_Init+0x74>)
 80133ea:	2200      	movs	r2, #0
 80133ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80133ee:	480e      	ldr	r0, [pc, #56]	; (8013428 <MX_I2C2_Init+0x74>)
 80133f0:	f004 fdd6 	bl	8017fa0 <HAL_I2C_Init>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d001      	beq.n	80133fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80133fa:	f000 fb1d 	bl	8013a38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80133fe:	2100      	movs	r1, #0
 8013400:	4809      	ldr	r0, [pc, #36]	; (8013428 <MX_I2C2_Init+0x74>)
 8013402:	f005 fb25 	bl	8018a50 <HAL_I2CEx_ConfigAnalogFilter>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d001      	beq.n	8013410 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 801340c:	f000 fb14 	bl	8013a38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8013410:	2100      	movs	r1, #0
 8013412:	4805      	ldr	r0, [pc, #20]	; (8013428 <MX_I2C2_Init+0x74>)
 8013414:	f005 fb67 	bl	8018ae6 <HAL_I2CEx_ConfigDigitalFilter>
 8013418:	4603      	mov	r3, r0
 801341a:	2b00      	cmp	r3, #0
 801341c:	d001      	beq.n	8013422 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 801341e:	f000 fb0b 	bl	8013a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8013422:	bf00      	nop
 8013424:	bd80      	pop	{r7, pc}
 8013426:	bf00      	nop
 8013428:	20009c18 	.word	0x20009c18
 801342c:	40005800 	.word	0x40005800
 8013430:	c0000e12 	.word	0xc0000e12

08013434 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b0b0      	sub	sp, #192	; 0xc0
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801343c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013440:	2200      	movs	r2, #0
 8013442:	601a      	str	r2, [r3, #0]
 8013444:	605a      	str	r2, [r3, #4]
 8013446:	609a      	str	r2, [r3, #8]
 8013448:	60da      	str	r2, [r3, #12]
 801344a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801344c:	f107 031c 	add.w	r3, r7, #28
 8013450:	2290      	movs	r2, #144	; 0x90
 8013452:	2100      	movs	r1, #0
 8013454:	4618      	mov	r0, r3
 8013456:	f00e ff9d 	bl	8022394 <memset>
  if(i2cHandle->Instance==I2C1)
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4a44      	ldr	r2, [pc, #272]	; (8013570 <HAL_I2C_MspInit+0x13c>)
 8013460:	4293      	cmp	r3, r2
 8013462:	d13e      	bne.n	80134e2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8013464:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013468:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801346a:	2300      	movs	r3, #0
 801346c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013470:	f107 031c 	add.w	r3, r7, #28
 8013474:	4618      	mov	r0, r3
 8013476:	f006 f875 	bl	8019564 <HAL_RCCEx_PeriphCLKConfig>
 801347a:	4603      	mov	r3, r0
 801347c:	2b00      	cmp	r3, #0
 801347e:	d001      	beq.n	8013484 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8013480:	f000 fada 	bl	8013a38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013484:	4b3b      	ldr	r3, [pc, #236]	; (8013574 <HAL_I2C_MspInit+0x140>)
 8013486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013488:	4a3a      	ldr	r2, [pc, #232]	; (8013574 <HAL_I2C_MspInit+0x140>)
 801348a:	f043 0302 	orr.w	r3, r3, #2
 801348e:	6313      	str	r3, [r2, #48]	; 0x30
 8013490:	4b38      	ldr	r3, [pc, #224]	; (8013574 <HAL_I2C_MspInit+0x140>)
 8013492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013494:	f003 0302 	and.w	r3, r3, #2
 8013498:	61bb      	str	r3, [r7, #24]
 801349a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 801349c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80134a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80134a4:	2312      	movs	r3, #18
 80134a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134aa:	2300      	movs	r3, #0
 80134ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134b0:	2303      	movs	r3, #3
 80134b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80134b6:	2304      	movs	r3, #4
 80134b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80134bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80134c0:	4619      	mov	r1, r3
 80134c2:	482d      	ldr	r0, [pc, #180]	; (8013578 <HAL_I2C_MspInit+0x144>)
 80134c4:	f004 fb50 	bl	8017b68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80134c8:	4b2a      	ldr	r3, [pc, #168]	; (8013574 <HAL_I2C_MspInit+0x140>)
 80134ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134cc:	4a29      	ldr	r2, [pc, #164]	; (8013574 <HAL_I2C_MspInit+0x140>)
 80134ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80134d2:	6413      	str	r3, [r2, #64]	; 0x40
 80134d4:	4b27      	ldr	r3, [pc, #156]	; (8013574 <HAL_I2C_MspInit+0x140>)
 80134d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80134dc:	617b      	str	r3, [r7, #20]
 80134de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80134e0:	e041      	b.n	8013566 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	4a25      	ldr	r2, [pc, #148]	; (801357c <HAL_I2C_MspInit+0x148>)
 80134e8:	4293      	cmp	r3, r2
 80134ea:	d13c      	bne.n	8013566 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80134ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80134f2:	2300      	movs	r3, #0
 80134f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80134f8:	f107 031c 	add.w	r3, r7, #28
 80134fc:	4618      	mov	r0, r3
 80134fe:	f006 f831 	bl	8019564 <HAL_RCCEx_PeriphCLKConfig>
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d001      	beq.n	801350c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8013508:	f000 fa96 	bl	8013a38 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801350c:	4b19      	ldr	r3, [pc, #100]	; (8013574 <HAL_I2C_MspInit+0x140>)
 801350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013510:	4a18      	ldr	r2, [pc, #96]	; (8013574 <HAL_I2C_MspInit+0x140>)
 8013512:	f043 0320 	orr.w	r3, r3, #32
 8013516:	6313      	str	r3, [r2, #48]	; 0x30
 8013518:	4b16      	ldr	r3, [pc, #88]	; (8013574 <HAL_I2C_MspInit+0x140>)
 801351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801351c:	f003 0320 	and.w	r3, r3, #32
 8013520:	613b      	str	r3, [r7, #16]
 8013522:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8013524:	2303      	movs	r3, #3
 8013526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801352a:	2312      	movs	r3, #18
 801352c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013530:	2300      	movs	r3, #0
 8013532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013536:	2303      	movs	r3, #3
 8013538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801353c:	2304      	movs	r3, #4
 801353e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013542:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013546:	4619      	mov	r1, r3
 8013548:	480d      	ldr	r0, [pc, #52]	; (8013580 <HAL_I2C_MspInit+0x14c>)
 801354a:	f004 fb0d 	bl	8017b68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801354e:	4b09      	ldr	r3, [pc, #36]	; (8013574 <HAL_I2C_MspInit+0x140>)
 8013550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013552:	4a08      	ldr	r2, [pc, #32]	; (8013574 <HAL_I2C_MspInit+0x140>)
 8013554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013558:	6413      	str	r3, [r2, #64]	; 0x40
 801355a:	4b06      	ldr	r3, [pc, #24]	; (8013574 <HAL_I2C_MspInit+0x140>)
 801355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013562:	60fb      	str	r3, [r7, #12]
 8013564:	68fb      	ldr	r3, [r7, #12]
}
 8013566:	bf00      	nop
 8013568:	37c0      	adds	r7, #192	; 0xc0
 801356a:	46bd      	mov	sp, r7
 801356c:	bd80      	pop	{r7, pc}
 801356e:	bf00      	nop
 8013570:	40005400 	.word	0x40005400
 8013574:	40023800 	.word	0x40023800
 8013578:	40020400 	.word	0x40020400
 801357c:	40005800 	.word	0x40005800
 8013580:	40021400 	.word	0x40021400

08013584 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8013588:	4b0b      	ldr	r3, [pc, #44]	; (80135b8 <MX_IWDG_Init+0x34>)
 801358a:	4a0c      	ldr	r2, [pc, #48]	; (80135bc <MX_IWDG_Init+0x38>)
 801358c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 801358e:	4b0a      	ldr	r3, [pc, #40]	; (80135b8 <MX_IWDG_Init+0x34>)
 8013590:	2203      	movs	r2, #3
 8013592:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8013594:	4b08      	ldr	r3, [pc, #32]	; (80135b8 <MX_IWDG_Init+0x34>)
 8013596:	f640 72ff 	movw	r2, #4095	; 0xfff
 801359a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 801359c:	4b06      	ldr	r3, [pc, #24]	; (80135b8 <MX_IWDG_Init+0x34>)
 801359e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80135a2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80135a4:	4804      	ldr	r0, [pc, #16]	; (80135b8 <MX_IWDG_Init+0x34>)
 80135a6:	f005 faea 	bl	8018b7e <HAL_IWDG_Init>
 80135aa:	4603      	mov	r3, r0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d001      	beq.n	80135b4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80135b0:	f000 fa42 	bl	8013a38 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80135b4:	bf00      	nop
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	20009c6c 	.word	0x20009c6c
 80135bc:	40003000 	.word	0x40003000

080135c0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80135c0:	b480      	push	{r7}
 80135c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80135c4:	f3bf 8f4f 	dsb	sy
}
 80135c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80135ca:	f3bf 8f6f 	isb	sy
}
 80135ce:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80135d0:	4b0d      	ldr	r3, [pc, #52]	; (8013608 <SCB_EnableICache+0x48>)
 80135d2:	2200      	movs	r2, #0
 80135d4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80135d8:	f3bf 8f4f 	dsb	sy
}
 80135dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80135de:	f3bf 8f6f 	isb	sy
}
 80135e2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80135e4:	4b08      	ldr	r3, [pc, #32]	; (8013608 <SCB_EnableICache+0x48>)
 80135e6:	695b      	ldr	r3, [r3, #20]
 80135e8:	4a07      	ldr	r2, [pc, #28]	; (8013608 <SCB_EnableICache+0x48>)
 80135ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80135ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80135f0:	f3bf 8f4f 	dsb	sy
}
 80135f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80135f6:	f3bf 8f6f 	isb	sy
}
 80135fa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80135fc:	bf00      	nop
 80135fe:	46bd      	mov	sp, r7
 8013600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013604:	4770      	bx	lr
 8013606:	bf00      	nop
 8013608:	e000ed00 	.word	0xe000ed00

0801360c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 801360c:	b480      	push	{r7}
 801360e:	b085      	sub	sp, #20
 8013610:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013612:	4b1f      	ldr	r3, [pc, #124]	; (8013690 <SCB_EnableDCache+0x84>)
 8013614:	2200      	movs	r2, #0
 8013616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801361a:	f3bf 8f4f 	dsb	sy
}
 801361e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8013620:	4b1b      	ldr	r3, [pc, #108]	; (8013690 <SCB_EnableDCache+0x84>)
 8013622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013626:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	0b5b      	lsrs	r3, r3, #13
 801362c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013630:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	08db      	lsrs	r3, r3, #3
 8013636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801363a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	015a      	lsls	r2, r3, #5
 8013640:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8013644:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8013646:	68ba      	ldr	r2, [r7, #8]
 8013648:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801364a:	4911      	ldr	r1, [pc, #68]	; (8013690 <SCB_EnableDCache+0x84>)
 801364c:	4313      	orrs	r3, r2
 801364e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	1e5a      	subs	r2, r3, #1
 8013656:	60ba      	str	r2, [r7, #8]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d1ef      	bne.n	801363c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	1e5a      	subs	r2, r3, #1
 8013660:	60fa      	str	r2, [r7, #12]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1e5      	bne.n	8013632 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8013666:	f3bf 8f4f 	dsb	sy
}
 801366a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 801366c:	4b08      	ldr	r3, [pc, #32]	; (8013690 <SCB_EnableDCache+0x84>)
 801366e:	695b      	ldr	r3, [r3, #20]
 8013670:	4a07      	ldr	r2, [pc, #28]	; (8013690 <SCB_EnableDCache+0x84>)
 8013672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013676:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013678:	f3bf 8f4f 	dsb	sy
}
 801367c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801367e:	f3bf 8f6f 	isb	sy
}
 8013682:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8013684:	bf00      	nop
 8013686:	3714      	adds	r7, #20
 8013688:	46bd      	mov	sp, r7
 801368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368e:	4770      	bx	lr
 8013690:	e000ed00 	.word	0xe000ed00

08013694 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 801369a:	2300      	movs	r3, #0
 801369c:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 801369e:	f000 f99f 	bl	80139e0 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 80136a2:	f7ff ff8d 	bl	80135c0 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 80136a6:	f7ff ffb1 	bl	801360c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80136aa:	f001 fef1 	bl	8015490 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80136ae:	f000 f8d1 	bl	8013854 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 80136b2:	f7f5 fbb3 	bl	8008e1c <reset_cause_get>
 80136b6:	4603      	mov	r3, r0
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7f5 fc01 	bl	8008ec0 <reset_cause_get_name>
 80136be:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 80136c0:	f7ff fc08 	bl	8012ed4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80136c4:	f001 f90a 	bl	80148dc <MX_USART1_UART_Init>
	Get_Slot();
 80136c8:	f7ed fa00 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 80136cc:	f7fb fd50 	bl	800f170 <MX_CAN2_Init>
	MX_CAN3_Init();
 80136d0:	f7fb fdc6 	bl	800f260 <MX_CAN3_Init>
	MX_I2C1_Init();
 80136d4:	f7ff fe2e 	bl	8013334 <MX_I2C1_Init>
	MX_I2C2_Init();
 80136d8:	f7ff fe6c 	bl	80133b4 <MX_I2C2_Init>
	MX_SPI1_Init();
 80136dc:	f000 fa10 	bl	8013b00 <MX_SPI1_Init>
	Get_Config();
 80136e0:	f000 fd7a 	bl	80141d8 <Get_Config>
	MX_RNG_Init();
 80136e4:	f000 f9ae 	bl	8013a44 <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80136e8:	2208      	movs	r2, #8
 80136ea:	2100      	movs	r1, #0
 80136ec:	484c      	ldr	r0, [pc, #304]	; (8013820 <main+0x18c>)
 80136ee:	f00e fe51 	bl	8022394 <memset>
	HAL_Delay(250);
 80136f2:	20fa      	movs	r0, #250	; 0xfa
 80136f4:	f001 ff38 	bl	8015568 <HAL_Delay>
	printf("\b\b\b\b\b\b\b\b\b\b");
 80136f8:	484a      	ldr	r0, [pc, #296]	; (8013824 <main+0x190>)
 80136fa:	f00e ff33 	bl	8022564 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 80136fe:	484a      	ldr	r0, [pc, #296]	; (8013828 <main+0x194>)
 8013700:	f00e ffcc 	bl	802269c <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8013704:	6879      	ldr	r1, [r7, #4]
 8013706:	4849      	ldr	r0, [pc, #292]	; (801382c <main+0x198>)
 8013708:	f00e ff2c 	bl	8022564 <iprintf>
	Get_Build_Details();
 801370c:	f000 f90c 	bl	8013928 <Get_Build_Details>
	switch(EI_data.ProtocolType)
 8013710:	4b47      	ldr	r3, [pc, #284]	; (8013830 <main+0x19c>)
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	3b01      	subs	r3, #1
 8013716:	2b03      	cmp	r3, #3
 8013718:	d85f      	bhi.n	80137da <main+0x146>
 801371a:	a201      	add	r2, pc, #4	; (adr r2, 8013720 <main+0x8c>)
 801371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013720:	08013731 	.word	0x08013731
 8013724:	08013783 	.word	0x08013783
 8013728:	080137ab 	.word	0x080137ab
 801372c:	080137e3 	.word	0x080137e3
	{
	case HITACHI:
		printf("Protocol Selected is HITACHI\n");
 8013730:	4840      	ldr	r0, [pc, #256]	; (8013834 <main+0x1a0>)
 8013732:	f00e ffb3 	bl	802269c <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013736:	4840      	ldr	r0, [pc, #256]	; (8013838 <main+0x1a4>)
 8013738:	f00e ffb0 	bl	802269c <puts>
		MX_LWIP_Init();
 801373c:	f009 f832 	bl	801c7a4 <MX_LWIP_Init>
		udpServer_init();
 8013740:	f7fb f934 	bl	800e9ac <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013744:	483d      	ldr	r0, [pc, #244]	; (801383c <main+0x1a8>)
 8013746:	f00e ffa9 	bl	802269c <puts>
		if((EI_data.Hitachi_st.EnableSerialPort == 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 801374a:	4b39      	ldr	r3, [pc, #228]	; (8013830 <main+0x19c>)
 801374c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013750:	2b01      	cmp	r3, #1
 8013752:	d111      	bne.n	8013778 <main+0xe4>
 8013754:	4b36      	ldr	r3, [pc, #216]	; (8013830 <main+0x19c>)
 8013756:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801375a:	2b00      	cmp	r3, #0
 801375c:	d00c      	beq.n	8013778 <main+0xe4>
		{
			printf("Initializing UART with Baudrate:%lu\n",EI_data.Hitachi_st.BaudRate);
 801375e:	4b34      	ldr	r3, [pc, #208]	; (8013830 <main+0x19c>)
 8013760:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013764:	4619      	mov	r1, r3
 8013766:	4836      	ldr	r0, [pc, #216]	; (8013840 <main+0x1ac>)
 8013768:	f00e fefc 	bl	8022564 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 801376c:	4b30      	ldr	r3, [pc, #192]	; (8013830 <main+0x19c>)
 801376e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013772:	4618      	mov	r0, r3
 8013774:	f001 fa60 	bl	8014c38 <UART4_Init>
		}
		print_self_Details();
 8013778:	f7f4 fe3c 	bl	80083f4 <print_self_Details>
		Update_HitachiCommands();
 801377c:	f7ed f892 	bl	80008a4 <Update_HitachiCommands>
		break;
 8013780:	e030      	b.n	80137e4 <main+0x150>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8013782:	4830      	ldr	r0, [pc, #192]	; (8013844 <main+0x1b0>)
 8013784:	f00e ff8a 	bl	802269c <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013788:	482b      	ldr	r0, [pc, #172]	; (8013838 <main+0x1a4>)
 801378a:	f00e ff87 	bl	802269c <puts>
		MX_LWIP_Init();
 801378e:	f009 f809 	bl	801c7a4 <MX_LWIP_Init>
		udpServer_init();
 8013792:	f7fb f90b 	bl	800e9ac <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013796:	4829      	ldr	r0, [pc, #164]	; (801383c <main+0x1a8>)
 8013798:	f00e ff80 	bl	802269c <puts>
		print_self_DetailsSiemens();
 801379c:	f7fa ffe2 	bl	800e764 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 80137a0:	f7f9 fcec 	bl	800d17c <Update_SiemensCommands>
		UpdateSIGNALSNames();
 80137a4:	f7fa fb00 	bl	800dda8 <UpdateSIGNALSNames>
		break;
 80137a8:	e01c      	b.n	80137e4 <main+0x150>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 80137aa:	4827      	ldr	r0, [pc, #156]	; (8013848 <main+0x1b4>)
 80137ac:	f00e ff76 	bl	802269c <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 80137b0:	4b1f      	ldr	r3, [pc, #124]	; (8013830 <main+0x19c>)
 80137b2:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d006      	beq.n	80137c8 <main+0x134>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 80137ba:	4b1d      	ldr	r3, [pc, #116]	; (8013830 <main+0x19c>)
 80137bc:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80137c0:	4618      	mov	r0, r3
 80137c2:	f001 fa39 	bl	8014c38 <UART4_Init>
 80137c6:	e003      	b.n	80137d0 <main+0x13c>
		}
		else
		{
			UART4_Init(115200);
 80137c8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80137cc:	f001 fa34 	bl	8014c38 <UART4_Init>
		}
		Update_MedhaCommands();
 80137d0:	f7f6 ffe6 	bl	800a7a0 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 80137d4:	f7f6 fda4 	bl	800a320 <Print_Medha_Self_Details>
		break;
 80137d8:	e004      	b.n	80137e4 <main+0x150>

	case KYOSAN:
		break;

	default:
		printf("Please Select Protocol Type\n");
 80137da:	481c      	ldr	r0, [pc, #112]	; (801384c <main+0x1b8>)
 80137dc:	f00e ff5e 	bl	802269c <puts>
		while(1);
 80137e0:	e7fe      	b.n	80137e0 <main+0x14c>
		break;
 80137e2:	bf00      	nop
	}


	printf("Initialization Success\n");
 80137e4:	481a      	ldr	r0, [pc, #104]	; (8013850 <main+0x1bc>)
 80137e6:	f00e ff59 	bl	802269c <puts>
	//	printf("start Ticks:%lu",Ticks);
	MX_IWDG_Init();
 80137ea:	f7ff fecb 	bl	8013584 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 80137ee:	4b10      	ldr	r3, [pc, #64]	; (8013830 <main+0x19c>)
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	2b03      	cmp	r3, #3
 80137f4:	d00c      	beq.n	8013810 <main+0x17c>
 80137f6:	2b03      	cmp	r3, #3
 80137f8:	dc0d      	bgt.n	8013816 <main+0x182>
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	d002      	beq.n	8013804 <main+0x170>
 80137fe:	2b02      	cmp	r3, #2
 8013800:	d003      	beq.n	801380a <main+0x176>
 8013802:	e008      	b.n	8013816 <main+0x182>
		{
		case HITACHI:
			Process_HitachiEI();
 8013804:	f7f5 faca 	bl	8008d9c <Process_HitachiEI>
			break;
 8013808:	e009      	b.n	801381e <main+0x18a>

		case SIEMENS:
			Process_SiemensEI();
 801380a:	f7f7 fcef 	bl	800b1ec <Process_SiemensEI>
			break;
 801380e:	e006      	b.n	801381e <main+0x18a>

		case MEDHA:
			Process_Medha_EI();
 8013810:	f7f5 fba6 	bl	8008f60 <Process_Medha_EI>
			break;
 8013814:	e003      	b.n	801381e <main+0x18a>

		default:
			printf("Please Select Protocol Type\n");
 8013816:	480d      	ldr	r0, [pc, #52]	; (801384c <main+0x1b8>)
 8013818:	f00e ff40 	bl	802269c <puts>
			while(1);
 801381c:	e7fe      	b.n	801381c <main+0x188>
		switch(EI_data.ProtocolType)
 801381e:	e7e6      	b.n	80137ee <main+0x15a>
 8013820:	2000195c 	.word	0x2000195c
 8013824:	08026d44 	.word	0x08026d44
 8013828:	08026d50 	.word	0x08026d50
 801382c:	08026da0 	.word	0x08026da0
 8013830:	20000304 	.word	0x20000304
 8013834:	08026dbc 	.word	0x08026dbc
 8013838:	08026ddc 	.word	0x08026ddc
 801383c:	08026e04 	.word	0x08026e04
 8013840:	08026e20 	.word	0x08026e20
 8013844:	08026e48 	.word	0x08026e48
 8013848:	08026e68 	.word	0x08026e68
 801384c:	08026e84 	.word	0x08026e84
 8013850:	08026ea0 	.word	0x08026ea0

08013854 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b094      	sub	sp, #80	; 0x50
 8013858:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801385a:	f107 031c 	add.w	r3, r7, #28
 801385e:	2234      	movs	r2, #52	; 0x34
 8013860:	2100      	movs	r1, #0
 8013862:	4618      	mov	r0, r3
 8013864:	f00e fd96 	bl	8022394 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013868:	f107 0308 	add.w	r3, r7, #8
 801386c:	2200      	movs	r2, #0
 801386e:	601a      	str	r2, [r3, #0]
 8013870:	605a      	str	r2, [r3, #4]
 8013872:	609a      	str	r2, [r3, #8]
 8013874:	60da      	str	r2, [r3, #12]
 8013876:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8013878:	4b29      	ldr	r3, [pc, #164]	; (8013920 <SystemClock_Config+0xcc>)
 801387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801387c:	4a28      	ldr	r2, [pc, #160]	; (8013920 <SystemClock_Config+0xcc>)
 801387e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013882:	6413      	str	r3, [r2, #64]	; 0x40
 8013884:	4b26      	ldr	r3, [pc, #152]	; (8013920 <SystemClock_Config+0xcc>)
 8013886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801388c:	607b      	str	r3, [r7, #4]
 801388e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013890:	4b24      	ldr	r3, [pc, #144]	; (8013924 <SystemClock_Config+0xd0>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	4a23      	ldr	r2, [pc, #140]	; (8013924 <SystemClock_Config+0xd0>)
 8013896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801389a:	6013      	str	r3, [r2, #0]
 801389c:	4b21      	ldr	r3, [pc, #132]	; (8013924 <SystemClock_Config+0xd0>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80138a4:	603b      	str	r3, [r7, #0]
 80138a6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80138a8:	2309      	movs	r3, #9
 80138aa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80138ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80138b0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80138b2:	2301      	movs	r3, #1
 80138b4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80138b6:	2302      	movs	r3, #2
 80138b8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80138ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80138be:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 80138c0:	2306      	movs	r3, #6
 80138c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80138c4:	23b4      	movs	r3, #180	; 0xb4
 80138c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80138c8:	2302      	movs	r3, #2
 80138ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80138cc:	2308      	movs	r3, #8
 80138ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80138d0:	2302      	movs	r3, #2
 80138d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80138d4:	f107 031c 	add.w	r3, r7, #28
 80138d8:	4618      	mov	r0, r3
 80138da:	f005 f9af 	bl	8018c3c <HAL_RCC_OscConfig>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d001      	beq.n	80138e8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80138e4:	f000 f8a8 	bl	8013a38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80138e8:	230f      	movs	r3, #15
 80138ea:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80138ec:	2302      	movs	r3, #2
 80138ee:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80138f0:	2300      	movs	r3, #0
 80138f2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80138f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80138f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80138fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138fe:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013900:	f107 0308 	add.w	r3, r7, #8
 8013904:	2105      	movs	r1, #5
 8013906:	4618      	mov	r0, r3
 8013908:	f005 fc46 	bl	8019198 <HAL_RCC_ClockConfig>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d001      	beq.n	8013916 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8013912:	f000 f891 	bl	8013a38 <Error_Handler>
	}
}
 8013916:	bf00      	nop
 8013918:	3750      	adds	r7, #80	; 0x50
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	40023800 	.word	0x40023800
 8013924:	40007000 	.word	0x40007000

08013928 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b08e      	sub	sp, #56	; 0x38
 801392c:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 801392e:	2300      	movs	r3, #0
 8013930:	607b      	str	r3, [r7, #4]
 8013932:	f107 0308 	add.w	r3, r7, #8
 8013936:	222e      	movs	r2, #46	; 0x2e
 8013938:	2100      	movs	r1, #0
 801393a:	4618      	mov	r0, r3
 801393c:	f00e fd2a 	bl	8022394 <memset>
	printf("\n_____________________________________________\n");
 8013940:	481d      	ldr	r0, [pc, #116]	; (80139b8 <Get_Build_Details+0x90>)
 8013942:	f00e feab 	bl	802269c <puts>
	printf("Build Date:%s\n",__DATE__);
 8013946:	491d      	ldr	r1, [pc, #116]	; (80139bc <Get_Build_Details+0x94>)
 8013948:	481d      	ldr	r0, [pc, #116]	; (80139c0 <Get_Build_Details+0x98>)
 801394a:	f00e fe0b 	bl	8022564 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 801394e:	491d      	ldr	r1, [pc, #116]	; (80139c4 <Get_Build_Details+0x9c>)
 8013950:	481d      	ldr	r0, [pc, #116]	; (80139c8 <Get_Build_Details+0xa0>)
 8013952:	f00e fe07 	bl	8022564 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8013956:	1d3b      	adds	r3, r7, #4
 8013958:	4a18      	ldr	r2, [pc, #96]	; (80139bc <Get_Build_Details+0x94>)
 801395a:	ca07      	ldmia	r2, {r0, r1, r2}
 801395c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 8013960:	1d3b      	adds	r3, r7, #4
 8013962:	4618      	mov	r0, r3
 8013964:	f7ec fc76 	bl	8000254 <strlen>
 8013968:	4603      	mov	r3, r0
 801396a:	461a      	mov	r2, r3
 801396c:	1d3b      	adds	r3, r7, #4
 801396e:	4413      	add	r3, r2
 8013970:	4914      	ldr	r1, [pc, #80]	; (80139c4 <Get_Build_Details+0x9c>)
 8013972:	461a      	mov	r2, r3
 8013974:	460b      	mov	r3, r1
 8013976:	cb03      	ldmia	r3!, {r0, r1}
 8013978:	6010      	str	r0, [r2, #0]
 801397a:	6051      	str	r1, [r2, #4]
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8013980:	1d3b      	adds	r3, r7, #4
 8013982:	4618      	mov	r0, r3
 8013984:	f7ec fc66 	bl	8000254 <strlen>
 8013988:	4603      	mov	r3, r0
 801398a:	b21a      	sxth	r2, r3
 801398c:	1d3b      	adds	r3, r7, #4
 801398e:	4619      	mov	r1, r3
 8013990:	2000      	movs	r0, #0
 8013992:	f7ff f94b 	bl	8012c2c <GetCRC16>
 8013996:	4603      	mov	r3, r0
 8013998:	461a      	mov	r2, r3
 801399a:	4b0c      	ldr	r3, [pc, #48]	; (80139cc <Get_Build_Details+0xa4>)
 801399c:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 801399e:	4a0c      	ldr	r2, [pc, #48]	; (80139d0 <Get_Build_Details+0xa8>)
 80139a0:	490c      	ldr	r1, [pc, #48]	; (80139d4 <Get_Build_Details+0xac>)
 80139a2:	480d      	ldr	r0, [pc, #52]	; (80139d8 <Get_Build_Details+0xb0>)
 80139a4:	f00e fdde 	bl	8022564 <iprintf>
	printf("_____________________________________________\n");
 80139a8:	480c      	ldr	r0, [pc, #48]	; (80139dc <Get_Build_Details+0xb4>)
 80139aa:	f00e fe77 	bl	802269c <puts>

}
 80139ae:	bf00      	nop
 80139b0:	3738      	adds	r7, #56	; 0x38
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	08026eb8 	.word	0x08026eb8
 80139bc:	08026ee8 	.word	0x08026ee8
 80139c0:	08026ef4 	.word	0x08026ef4
 80139c4:	08026f04 	.word	0x08026f04
 80139c8:	08026f10 	.word	0x08026f10
 80139cc:	20009ca0 	.word	0x20009ca0
 80139d0:	08026f20 	.word	0x08026f20
 80139d4:	08026f28 	.word	0x08026f28
 80139d8:	08026f40 	.word	0x08026f40
 80139dc:	08026f5c 	.word	0x08026f5c

080139e0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b084      	sub	sp, #16
 80139e4:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80139e6:	463b      	mov	r3, r7
 80139e8:	2200      	movs	r2, #0
 80139ea:	601a      	str	r2, [r3, #0]
 80139ec:	605a      	str	r2, [r3, #4]
 80139ee:	609a      	str	r2, [r3, #8]
 80139f0:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 80139f2:	f002 fdc5 	bl	8016580 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80139f6:	2301      	movs	r3, #1
 80139f8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80139fa:	2300      	movs	r3, #0
 80139fc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8013a02:	231f      	movs	r3, #31
 8013a04:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8013a06:	2387      	movs	r3, #135	; 0x87
 8013a08:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8013a12:	2301      	movs	r3, #1
 8013a14:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8013a16:	2301      	movs	r3, #1
 8013a18:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8013a22:	463b      	mov	r3, r7
 8013a24:	4618      	mov	r0, r3
 8013a26:	f002 fde3 	bl	80165f0 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8013a2a:	2004      	movs	r0, #4
 8013a2c:	f002 fdc0 	bl	80165b0 <HAL_MPU_Enable>

}
 8013a30:	bf00      	nop
 8013a32:	3710      	adds	r7, #16
 8013a34:	46bd      	mov	sp, r7
 8013a36:	bd80      	pop	{r7, pc}

08013a38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8013a38:	b480      	push	{r7}
 8013a3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013a3c:	b672      	cpsid	i
}
 8013a3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8013a40:	e7fe      	b.n	8013a40 <Error_Handler+0x8>
	...

08013a44 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8013a48:	4b06      	ldr	r3, [pc, #24]	; (8013a64 <MX_RNG_Init+0x20>)
 8013a4a:	4a07      	ldr	r2, [pc, #28]	; (8013a68 <MX_RNG_Init+0x24>)
 8013a4c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8013a4e:	4805      	ldr	r0, [pc, #20]	; (8013a64 <MX_RNG_Init+0x20>)
 8013a50:	f006 f9b0 	bl	8019db4 <HAL_RNG_Init>
 8013a54:	4603      	mov	r3, r0
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d001      	beq.n	8013a5e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8013a5a:	f7ff ffed 	bl	8013a38 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8013a5e:	bf00      	nop
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	20009c7c 	.word	0x20009c7c
 8013a68:	50060800 	.word	0x50060800

08013a6c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b0a8      	sub	sp, #160	; 0xa0
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013a74:	f107 0310 	add.w	r3, r7, #16
 8013a78:	2290      	movs	r2, #144	; 0x90
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f00e fc89 	bl	8022394 <memset>
  if(rngHandle->Instance==RNG)
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	4a11      	ldr	r2, [pc, #68]	; (8013acc <HAL_RNG_MspInit+0x60>)
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d11b      	bne.n	8013ac4 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8013a8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013a90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8013a92:	2300      	movs	r3, #0
 8013a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013a98:	f107 0310 	add.w	r3, r7, #16
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f005 fd61 	bl	8019564 <HAL_RCCEx_PeriphCLKConfig>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d001      	beq.n	8013aac <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8013aa8:	f7ff ffc6 	bl	8013a38 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8013aac:	4b08      	ldr	r3, [pc, #32]	; (8013ad0 <HAL_RNG_MspInit+0x64>)
 8013aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ab0:	4a07      	ldr	r2, [pc, #28]	; (8013ad0 <HAL_RNG_MspInit+0x64>)
 8013ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ab6:	6353      	str	r3, [r2, #52]	; 0x34
 8013ab8:	4b05      	ldr	r3, [pc, #20]	; (8013ad0 <HAL_RNG_MspInit+0x64>)
 8013aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ac0:	60fb      	str	r3, [r7, #12]
 8013ac2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8013ac4:	bf00      	nop
 8013ac6:	37a0      	adds	r7, #160	; 0xa0
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	50060800 	.word	0x50060800
 8013ad0:	40023800 	.word	0x40023800

08013ad4 <__NVIC_SystemReset>:
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013ad8:	f3bf 8f4f 	dsb	sy
}
 8013adc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013ade:	4b06      	ldr	r3, [pc, #24]	; (8013af8 <__NVIC_SystemReset+0x24>)
 8013ae0:	68db      	ldr	r3, [r3, #12]
 8013ae2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013ae6:	4904      	ldr	r1, [pc, #16]	; (8013af8 <__NVIC_SystemReset+0x24>)
 8013ae8:	4b04      	ldr	r3, [pc, #16]	; (8013afc <__NVIC_SystemReset+0x28>)
 8013aea:	4313      	orrs	r3, r2
 8013aec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013aee:	f3bf 8f4f 	dsb	sy
}
 8013af2:	bf00      	nop
    __NOP();
 8013af4:	bf00      	nop
 8013af6:	e7fd      	b.n	8013af4 <__NVIC_SystemReset+0x20>
 8013af8:	e000ed00 	.word	0xe000ed00
 8013afc:	05fa0004 	.word	0x05fa0004

08013b00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8013b04:	4b1b      	ldr	r3, [pc, #108]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b06:	4a1c      	ldr	r2, [pc, #112]	; (8013b78 <MX_SPI1_Init+0x78>)
 8013b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8013b0a:	4b1a      	ldr	r3, [pc, #104]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8013b12:	4b18      	ldr	r3, [pc, #96]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b14:	2200      	movs	r2, #0
 8013b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8013b18:	4b16      	ldr	r3, [pc, #88]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8013b1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013b20:	4b14      	ldr	r3, [pc, #80]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b22:	2200      	movs	r2, #0
 8013b24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013b26:	4b13      	ldr	r3, [pc, #76]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8013b2c:	4b11      	ldr	r3, [pc, #68]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8013b34:	4b0f      	ldr	r3, [pc, #60]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b36:	2208      	movs	r2, #8
 8013b38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013b3a:	4b0e      	ldr	r3, [pc, #56]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8013b40:	4b0c      	ldr	r3, [pc, #48]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b42:	2200      	movs	r2, #0
 8013b44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013b46:	4b0b      	ldr	r3, [pc, #44]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b48:	2200      	movs	r2, #0
 8013b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8013b4c:	4b09      	ldr	r3, [pc, #36]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b4e:	2207      	movs	r2, #7
 8013b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8013b52:	4b08      	ldr	r3, [pc, #32]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b54:	2200      	movs	r2, #0
 8013b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8013b58:	4b06      	ldr	r3, [pc, #24]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b5a:	2208      	movs	r2, #8
 8013b5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8013b5e:	4805      	ldr	r0, [pc, #20]	; (8013b74 <MX_SPI1_Init+0x74>)
 8013b60:	f006 f9bd 	bl	8019ede <HAL_SPI_Init>
 8013b64:	4603      	mov	r3, r0
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d001      	beq.n	8013b6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8013b6a:	f7ff ff65 	bl	8013a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8013b6e:	bf00      	nop
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	20009ca4 	.word	0x20009ca4
 8013b78:	40013000 	.word	0x40013000

08013b7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b08c      	sub	sp, #48	; 0x30
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b84:	f107 031c 	add.w	r3, r7, #28
 8013b88:	2200      	movs	r2, #0
 8013b8a:	601a      	str	r2, [r3, #0]
 8013b8c:	605a      	str	r2, [r3, #4]
 8013b8e:	609a      	str	r2, [r3, #8]
 8013b90:	60da      	str	r2, [r3, #12]
 8013b92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4a33      	ldr	r2, [pc, #204]	; (8013c68 <HAL_SPI_MspInit+0xec>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d160      	bne.n	8013c60 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013b9e:	4b33      	ldr	r3, [pc, #204]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ba2:	4a32      	ldr	r2, [pc, #200]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8013baa:	4b30      	ldr	r3, [pc, #192]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013bb2:	61bb      	str	r3, [r7, #24]
 8013bb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013bb6:	4b2d      	ldr	r3, [pc, #180]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bba:	4a2c      	ldr	r2, [pc, #176]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013bbc:	f043 0301 	orr.w	r3, r3, #1
 8013bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8013bc2:	4b2a      	ldr	r3, [pc, #168]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bc6:	f003 0301 	and.w	r3, r3, #1
 8013bca:	617b      	str	r3, [r7, #20]
 8013bcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013bce:	4b27      	ldr	r3, [pc, #156]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bd2:	4a26      	ldr	r2, [pc, #152]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013bd4:	f043 0308 	orr.w	r3, r3, #8
 8013bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8013bda:	4b24      	ldr	r3, [pc, #144]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bde:	f003 0308 	and.w	r3, r3, #8
 8013be2:	613b      	str	r3, [r7, #16]
 8013be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013be6:	4b21      	ldr	r3, [pc, #132]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bea:	4a20      	ldr	r2, [pc, #128]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8013bf2:	4b1e      	ldr	r3, [pc, #120]	; (8013c6c <HAL_SPI_MspInit+0xf0>)
 8013bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bfa:	60fb      	str	r3, [r7, #12]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8013bfe:	2320      	movs	r3, #32
 8013c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c02:	2302      	movs	r3, #2
 8013c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c06:	2300      	movs	r3, #0
 8013c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c0a:	2303      	movs	r3, #3
 8013c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013c0e:	2305      	movs	r3, #5
 8013c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8013c12:	f107 031c 	add.w	r3, r7, #28
 8013c16:	4619      	mov	r1, r3
 8013c18:	4815      	ldr	r0, [pc, #84]	; (8013c70 <HAL_SPI_MspInit+0xf4>)
 8013c1a:	f003 ffa5 	bl	8017b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8013c1e:	2380      	movs	r3, #128	; 0x80
 8013c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c22:	2302      	movs	r3, #2
 8013c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c26:	2300      	movs	r3, #0
 8013c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c2a:	2303      	movs	r3, #3
 8013c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013c2e:	2305      	movs	r3, #5
 8013c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8013c32:	f107 031c 	add.w	r3, r7, #28
 8013c36:	4619      	mov	r1, r3
 8013c38:	480e      	ldr	r0, [pc, #56]	; (8013c74 <HAL_SPI_MspInit+0xf8>)
 8013c3a:	f003 ff95 	bl	8017b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8013c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c44:	2302      	movs	r3, #2
 8013c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c48:	2300      	movs	r3, #0
 8013c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c4c:	2303      	movs	r3, #3
 8013c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013c50:	2305      	movs	r3, #5
 8013c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8013c54:	f107 031c 	add.w	r3, r7, #28
 8013c58:	4619      	mov	r1, r3
 8013c5a:	4807      	ldr	r0, [pc, #28]	; (8013c78 <HAL_SPI_MspInit+0xfc>)
 8013c5c:	f003 ff84 	bl	8017b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8013c60:	bf00      	nop
 8013c62:	3730      	adds	r7, #48	; 0x30
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}
 8013c68:	40013000 	.word	0x40013000
 8013c6c:	40023800 	.word	0x40023800
 8013c70:	40020000 	.word	0x40020000
 8013c74:	40020c00 	.word	0x40020c00
 8013c78:	40021800 	.word	0x40021800

08013c7c <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60b9      	str	r1, [r7, #8]
 8013c84:	607b      	str	r3, [r7, #4]
 8013c86:	4603      	mov	r3, r0
 8013c88:	73fb      	strb	r3, [r7, #15]
 8013c8a:	4613      	mov	r3, r2
 8013c8c:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 8013c92:	7bfb      	ldrb	r3, [r7, #15]
 8013c94:	3b01      	subs	r3, #1
 8013c96:	2b03      	cmp	r3, #3
 8013c98:	d828      	bhi.n	8013cec <SPI_WriteInFlash+0x70>
 8013c9a:	a201      	add	r2, pc, #4	; (adr r2, 8013ca0 <SPI_WriteInFlash+0x24>)
 8013c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ca0:	08013cb1 	.word	0x08013cb1
 8013ca4:	08013cc1 	.word	0x08013cc1
 8013ca8:	08013ccf 	.word	0x08013ccf
 8013cac:	08013cdd 	.word	0x08013cdd
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8013cb0:	4b75      	ldr	r3, [pc, #468]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013cb2:	4a76      	ldr	r2, [pc, #472]	; (8013e8c <SPI_WriteInFlash+0x210>)
 8013cb4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013cb6:	4b76      	ldr	r3, [pc, #472]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013cbc:	601a      	str	r2, [r3, #0]
		break;
 8013cbe:	e018      	b.n	8013cf2 <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8013cc0:	4b71      	ldr	r3, [pc, #452]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013cc2:	4a74      	ldr	r2, [pc, #464]	; (8013e94 <SPI_WriteInFlash+0x218>)
 8013cc4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013cc6:	4b72      	ldr	r3, [pc, #456]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013cc8:	2220      	movs	r2, #32
 8013cca:	601a      	str	r2, [r3, #0]
		break;
 8013ccc:	e011      	b.n	8013cf2 <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8013cce:	4b6e      	ldr	r3, [pc, #440]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013cd0:	4a70      	ldr	r2, [pc, #448]	; (8013e94 <SPI_WriteInFlash+0x218>)
 8013cd2:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013cd4:	4b6e      	ldr	r3, [pc, #440]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013cd6:	2240      	movs	r2, #64	; 0x40
 8013cd8:	601a      	str	r2, [r3, #0]
		break;
 8013cda:	e00a      	b.n	8013cf2 <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8013cdc:	4b6a      	ldr	r3, [pc, #424]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013cde:	4a6e      	ldr	r2, [pc, #440]	; (8013e98 <SPI_WriteInFlash+0x21c>)
 8013ce0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013ce2:	4b6b      	ldr	r3, [pc, #428]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013ce4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013ce8:	601a      	str	r2, [r3, #0]
		break;
 8013cea:	e002      	b.n	8013cf2 <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8013cec:	486b      	ldr	r0, [pc, #428]	; (8013e9c <SPI_WriteInFlash+0x220>)
 8013cee:	f00e fcd5 	bl	802269c <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013cf2:	4b65      	ldr	r3, [pc, #404]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	4a66      	ldr	r2, [pc, #408]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013cf8:	6812      	ldr	r2, [r2, #0]
 8013cfa:	b291      	uxth	r1, r2
 8013cfc:	2201      	movs	r2, #1
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f004 f8f6 	bl	8017ef0 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013d04:	4b60      	ldr	r3, [pc, #384]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	4a61      	ldr	r2, [pc, #388]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013d0a:	6812      	ldr	r2, [r2, #0]
 8013d0c:	b291      	uxth	r1, r2
 8013d0e:	2200      	movs	r2, #0
 8013d10:	4618      	mov	r0, r3
 8013d12:	f004 f8ed 	bl	8017ef0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 8013d16:	2364      	movs	r3, #100	; 0x64
 8013d18:	2201      	movs	r2, #1
 8013d1a:	4961      	ldr	r1, [pc, #388]	; (8013ea0 <SPI_WriteInFlash+0x224>)
 8013d1c:	4861      	ldr	r0, [pc, #388]	; (8013ea4 <SPI_WriteInFlash+0x228>)
 8013d1e:	f006 f989 	bl	801a034 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013d22:	4b59      	ldr	r3, [pc, #356]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	4a5a      	ldr	r2, [pc, #360]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013d28:	6812      	ldr	r2, [r2, #0]
 8013d2a:	b291      	uxth	r1, r2
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f004 f8de 	bl	8017ef0 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013d34:	4b54      	ldr	r3, [pc, #336]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	4a55      	ldr	r2, [pc, #340]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013d3a:	6812      	ldr	r2, [r2, #0]
 8013d3c:	b291      	uxth	r1, r2
 8013d3e:	2200      	movs	r2, #0
 8013d40:	4618      	mov	r0, r3
 8013d42:	f004 f8d5 	bl	8017ef0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 8013d46:	2364      	movs	r3, #100	; 0x64
 8013d48:	2201      	movs	r2, #1
 8013d4a:	4957      	ldr	r1, [pc, #348]	; (8013ea8 <SPI_WriteInFlash+0x22c>)
 8013d4c:	4855      	ldr	r0, [pc, #340]	; (8013ea4 <SPI_WriteInFlash+0x228>)
 8013d4e:	f006 f971 	bl	801a034 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013d52:	2364      	movs	r3, #100	; 0x64
 8013d54:	2201      	movs	r2, #1
 8013d56:	4955      	ldr	r1, [pc, #340]	; (8013eac <SPI_WriteInFlash+0x230>)
 8013d58:	4852      	ldr	r0, [pc, #328]	; (8013ea4 <SPI_WriteInFlash+0x228>)
 8013d5a:	f006 fad9 	bl	801a310 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013d5e:	4b4a      	ldr	r3, [pc, #296]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	4a4b      	ldr	r2, [pc, #300]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013d64:	6812      	ldr	r2, [r2, #0]
 8013d66:	b291      	uxth	r1, r2
 8013d68:	2201      	movs	r2, #1
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f004 f8c0 	bl	8017ef0 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8013d70:	4b4e      	ldr	r3, [pc, #312]	; (8013eac <SPI_WriteInFlash+0x230>)
 8013d72:	781b      	ldrb	r3, [r3, #0]
 8013d74:	f003 0302 	and.w	r3, r3, #2
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d103      	bne.n	8013d84 <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8013d7c:	484c      	ldr	r0, [pc, #304]	; (8013eb0 <SPI_WriteInFlash+0x234>)
 8013d7e:	f00e fbf1 	bl	8022564 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013d82:	e7d7      	b.n	8013d34 <SPI_WriteInFlash+0xb8>
			break;
 8013d84:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013d86:	4b40      	ldr	r3, [pc, #256]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4a41      	ldr	r2, [pc, #260]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013d8c:	6812      	ldr	r2, [r2, #0]
 8013d8e:	b291      	uxth	r1, r2
 8013d90:	2200      	movs	r2, #0
 8013d92:	4618      	mov	r0, r3
 8013d94:	f004 f8ac 	bl	8017ef0 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8013d98:	2202      	movs	r2, #2
 8013d9a:	4b46      	ldr	r3, [pc, #280]	; (8013eb4 <SPI_WriteInFlash+0x238>)
 8013d9c:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	0c1b      	lsrs	r3, r3, #16
 8013da2:	b2da      	uxtb	r2, r3
 8013da4:	4b43      	ldr	r3, [pc, #268]	; (8013eb4 <SPI_WriteInFlash+0x238>)
 8013da6:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	0a1b      	lsrs	r3, r3, #8
 8013dac:	b2da      	uxtb	r2, r3
 8013dae:	4b41      	ldr	r3, [pc, #260]	; (8013eb4 <SPI_WriteInFlash+0x238>)
 8013db0:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	b2da      	uxtb	r2, r3
 8013db6:	4b3f      	ldr	r3, [pc, #252]	; (8013eb4 <SPI_WriteInFlash+0x238>)
 8013db8:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8013dba:	2364      	movs	r3, #100	; 0x64
 8013dbc:	2204      	movs	r2, #4
 8013dbe:	493d      	ldr	r1, [pc, #244]	; (8013eb4 <SPI_WriteInFlash+0x238>)
 8013dc0:	4838      	ldr	r0, [pc, #224]	; (8013ea4 <SPI_WriteInFlash+0x228>)
 8013dc2:	f006 f937 	bl	801a034 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 8013dc6:	89ba      	ldrh	r2, [r7, #12]
 8013dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013dcc:	6879      	ldr	r1, [r7, #4]
 8013dce:	4835      	ldr	r0, [pc, #212]	; (8013ea4 <SPI_WriteInFlash+0x228>)
 8013dd0:	f006 f930 	bl	801a034 <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013dd4:	4b2c      	ldr	r3, [pc, #176]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	4a2d      	ldr	r2, [pc, #180]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013dda:	6812      	ldr	r2, [r2, #0]
 8013ddc:	b291      	uxth	r1, r2
 8013dde:	2201      	movs	r2, #1
 8013de0:	4618      	mov	r0, r3
 8013de2:	f004 f885 	bl	8017ef0 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013de6:	4b28      	ldr	r3, [pc, #160]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	4a29      	ldr	r2, [pc, #164]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013dec:	6812      	ldr	r2, [r2, #0]
 8013dee:	b291      	uxth	r1, r2
 8013df0:	2200      	movs	r2, #0
 8013df2:	4618      	mov	r0, r3
 8013df4:	f004 f87c 	bl	8017ef0 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8013df8:	2205      	movs	r2, #5
 8013dfa:	4b2e      	ldr	r3, [pc, #184]	; (8013eb4 <SPI_WriteInFlash+0x238>)
 8013dfc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013dfe:	2364      	movs	r3, #100	; 0x64
 8013e00:	2201      	movs	r2, #1
 8013e02:	492c      	ldr	r1, [pc, #176]	; (8013eb4 <SPI_WriteInFlash+0x238>)
 8013e04:	4827      	ldr	r0, [pc, #156]	; (8013ea4 <SPI_WriteInFlash+0x228>)
 8013e06:	f006 f915 	bl	801a034 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013e0a:	2364      	movs	r3, #100	; 0x64
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	4927      	ldr	r1, [pc, #156]	; (8013eac <SPI_WriteInFlash+0x230>)
 8013e10:	4824      	ldr	r0, [pc, #144]	; (8013ea4 <SPI_WriteInFlash+0x228>)
 8013e12:	f006 fa7d 	bl	801a310 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013e16:	4b1c      	ldr	r3, [pc, #112]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4a1d      	ldr	r2, [pc, #116]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013e1c:	6812      	ldr	r2, [r2, #0]
 8013e1e:	b291      	uxth	r1, r2
 8013e20:	2201      	movs	r2, #1
 8013e22:	4618      	mov	r0, r3
 8013e24:	f004 f864 	bl	8017ef0 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8013e28:	4b20      	ldr	r3, [pc, #128]	; (8013eac <SPI_WriteInFlash+0x230>)
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	f003 0301 	and.w	r3, r3, #1
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d1d8      	bne.n	8013de6 <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8013e34:	2301      	movs	r3, #1
 8013e36:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 8013e38:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013e3a:	4b13      	ldr	r3, [pc, #76]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	4a14      	ldr	r2, [pc, #80]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013e40:	6812      	ldr	r2, [r2, #0]
 8013e42:	b291      	uxth	r1, r2
 8013e44:	2200      	movs	r2, #0
 8013e46:	4618      	mov	r0, r3
 8013e48:	f004 f852 	bl	8017ef0 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8013e4c:	2204      	movs	r2, #4
 8013e4e:	4b19      	ldr	r3, [pc, #100]	; (8013eb4 <SPI_WriteInFlash+0x238>)
 8013e50:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013e52:	2364      	movs	r3, #100	; 0x64
 8013e54:	2201      	movs	r2, #1
 8013e56:	4917      	ldr	r1, [pc, #92]	; (8013eb4 <SPI_WriteInFlash+0x238>)
 8013e58:	4812      	ldr	r0, [pc, #72]	; (8013ea4 <SPI_WriteInFlash+0x228>)
 8013e5a:	f006 f8eb 	bl	801a034 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013e5e:	2364      	movs	r3, #100	; 0x64
 8013e60:	2201      	movs	r2, #1
 8013e62:	4912      	ldr	r1, [pc, #72]	; (8013eac <SPI_WriteInFlash+0x230>)
 8013e64:	480f      	ldr	r0, [pc, #60]	; (8013ea4 <SPI_WriteInFlash+0x228>)
 8013e66:	f006 fa53 	bl	801a310 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013e6a:	4b07      	ldr	r3, [pc, #28]	; (8013e88 <SPI_WriteInFlash+0x20c>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	4a08      	ldr	r2, [pc, #32]	; (8013e90 <SPI_WriteInFlash+0x214>)
 8013e70:	6812      	ldr	r2, [r2, #0]
 8013e72:	b291      	uxth	r1, r2
 8013e74:	2201      	movs	r2, #1
 8013e76:	4618      	mov	r0, r3
 8013e78:	f004 f83a 	bl	8017ef0 <HAL_GPIO_WritePin>

	return Return_Value;
 8013e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3718      	adds	r7, #24
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	20009c98 	.word	0x20009c98
 8013e8c:	40021800 	.word	0x40021800
 8013e90:	20009c9c 	.word	0x20009c9c
 8013e94:	40020c00 	.word	0x40020c00
 8013e98:	40021000 	.word	0x40021000
 8013e9c:	08026f8c 	.word	0x08026f8c
 8013ea0:	08028fa0 	.word	0x08028fa0
 8013ea4:	20009ca4 	.word	0x20009ca4
 8013ea8:	08028fa1 	.word	0x08028fa1
 8013eac:	20009c94 	.word	0x20009c94
 8013eb0:	08026fa4 	.word	0x08026fa4
 8013eb4:	20009c90 	.word	0x20009c90

08013eb8 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	6039      	str	r1, [r7, #0]
 8013ec2:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8013ec8:	79fb      	ldrb	r3, [r7, #7]
 8013eca:	3b01      	subs	r3, #1
 8013ecc:	2b03      	cmp	r3, #3
 8013ece:	d829      	bhi.n	8013f24 <SPI_MemoryEraseBySector+0x6c>
 8013ed0:	a201      	add	r2, pc, #4	; (adr r2, 8013ed8 <SPI_MemoryEraseBySector+0x20>)
 8013ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ed6:	bf00      	nop
 8013ed8:	08013ee9 	.word	0x08013ee9
 8013edc:	08013ef9 	.word	0x08013ef9
 8013ee0:	08013f07 	.word	0x08013f07
 8013ee4:	08013f15 	.word	0x08013f15
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8013ee8:	4b6d      	ldr	r3, [pc, #436]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013eea:	4a6e      	ldr	r2, [pc, #440]	; (80140a4 <SPI_MemoryEraseBySector+0x1ec>)
 8013eec:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013eee:	4b6e      	ldr	r3, [pc, #440]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013ef4:	601a      	str	r2, [r3, #0]
		break;
 8013ef6:	e018      	b.n	8013f2a <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8013ef8:	4b69      	ldr	r3, [pc, #420]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013efa:	4a6c      	ldr	r2, [pc, #432]	; (80140ac <SPI_MemoryEraseBySector+0x1f4>)
 8013efc:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013efe:	4b6a      	ldr	r3, [pc, #424]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f00:	2220      	movs	r2, #32
 8013f02:	601a      	str	r2, [r3, #0]
		break;
 8013f04:	e011      	b.n	8013f2a <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8013f06:	4b66      	ldr	r3, [pc, #408]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f08:	4a68      	ldr	r2, [pc, #416]	; (80140ac <SPI_MemoryEraseBySector+0x1f4>)
 8013f0a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013f0c:	4b66      	ldr	r3, [pc, #408]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f0e:	2240      	movs	r2, #64	; 0x40
 8013f10:	601a      	str	r2, [r3, #0]
		break;
 8013f12:	e00a      	b.n	8013f2a <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8013f14:	4b62      	ldr	r3, [pc, #392]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f16:	4a66      	ldr	r2, [pc, #408]	; (80140b0 <SPI_MemoryEraseBySector+0x1f8>)
 8013f18:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013f1a:	4b63      	ldr	r3, [pc, #396]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013f20:	601a      	str	r2, [r3, #0]
		break;
 8013f22:	e002      	b.n	8013f2a <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8013f24:	4863      	ldr	r0, [pc, #396]	; (80140b4 <SPI_MemoryEraseBySector+0x1fc>)
 8013f26:	f00e fbb9 	bl	802269c <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013f2a:	4b5d      	ldr	r3, [pc, #372]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4a5e      	ldr	r2, [pc, #376]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f30:	6812      	ldr	r2, [r2, #0]
 8013f32:	b291      	uxth	r1, r2
 8013f34:	2200      	movs	r2, #0
 8013f36:	4618      	mov	r0, r3
 8013f38:	f003 ffda 	bl	8017ef0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8013f3c:	2364      	movs	r3, #100	; 0x64
 8013f3e:	2201      	movs	r2, #1
 8013f40:	495d      	ldr	r1, [pc, #372]	; (80140b8 <SPI_MemoryEraseBySector+0x200>)
 8013f42:	485e      	ldr	r0, [pc, #376]	; (80140bc <SPI_MemoryEraseBySector+0x204>)
 8013f44:	f006 f876 	bl	801a034 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013f48:	4b55      	ldr	r3, [pc, #340]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	4a56      	ldr	r2, [pc, #344]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f4e:	6812      	ldr	r2, [r2, #0]
 8013f50:	b291      	uxth	r1, r2
 8013f52:	2201      	movs	r2, #1
 8013f54:	4618      	mov	r0, r3
 8013f56:	f003 ffcb 	bl	8017ef0 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013f5a:	4b51      	ldr	r3, [pc, #324]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	4a52      	ldr	r2, [pc, #328]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f60:	6812      	ldr	r2, [r2, #0]
 8013f62:	b291      	uxth	r1, r2
 8013f64:	2200      	movs	r2, #0
 8013f66:	4618      	mov	r0, r3
 8013f68:	f003 ffc2 	bl	8017ef0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8013f6c:	2364      	movs	r3, #100	; 0x64
 8013f6e:	2201      	movs	r2, #1
 8013f70:	4953      	ldr	r1, [pc, #332]	; (80140c0 <SPI_MemoryEraseBySector+0x208>)
 8013f72:	4852      	ldr	r0, [pc, #328]	; (80140bc <SPI_MemoryEraseBySector+0x204>)
 8013f74:	f006 f85e 	bl	801a034 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013f78:	2364      	movs	r3, #100	; 0x64
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	4951      	ldr	r1, [pc, #324]	; (80140c4 <SPI_MemoryEraseBySector+0x20c>)
 8013f7e:	484f      	ldr	r0, [pc, #316]	; (80140bc <SPI_MemoryEraseBySector+0x204>)
 8013f80:	f006 f9c6 	bl	801a310 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013f84:	4b46      	ldr	r3, [pc, #280]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	4a47      	ldr	r2, [pc, #284]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f8a:	6812      	ldr	r2, [r2, #0]
 8013f8c:	b291      	uxth	r1, r2
 8013f8e:	2201      	movs	r2, #1
 8013f90:	4618      	mov	r0, r3
 8013f92:	f003 ffad 	bl	8017ef0 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8013f96:	4b4b      	ldr	r3, [pc, #300]	; (80140c4 <SPI_MemoryEraseBySector+0x20c>)
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	f003 0302 	and.w	r3, r3, #2
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d103      	bne.n	8013faa <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8013fa2:	4849      	ldr	r0, [pc, #292]	; (80140c8 <SPI_MemoryEraseBySector+0x210>)
 8013fa4:	f00e fade 	bl	8022564 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013fa8:	e7d7      	b.n	8013f5a <SPI_MemoryEraseBySector+0xa2>
			break;
 8013faa:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013fac:	4b3c      	ldr	r3, [pc, #240]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	4a3d      	ldr	r2, [pc, #244]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013fb2:	6812      	ldr	r2, [r2, #0]
 8013fb4:	b291      	uxth	r1, r2
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f003 ff99 	bl	8017ef0 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8013fbe:	4b43      	ldr	r3, [pc, #268]	; (80140cc <SPI_MemoryEraseBySector+0x214>)
 8013fc0:	2220      	movs	r2, #32
 8013fc2:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	0c1b      	lsrs	r3, r3, #16
 8013fc8:	b2da      	uxtb	r2, r3
 8013fca:	4b40      	ldr	r3, [pc, #256]	; (80140cc <SPI_MemoryEraseBySector+0x214>)
 8013fcc:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	0a1b      	lsrs	r3, r3, #8
 8013fd2:	b2da      	uxtb	r2, r3
 8013fd4:	4b3d      	ldr	r3, [pc, #244]	; (80140cc <SPI_MemoryEraseBySector+0x214>)
 8013fd6:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	b2da      	uxtb	r2, r3
 8013fdc:	4b3b      	ldr	r3, [pc, #236]	; (80140cc <SPI_MemoryEraseBySector+0x214>)
 8013fde:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8013fe0:	2364      	movs	r3, #100	; 0x64
 8013fe2:	2204      	movs	r2, #4
 8013fe4:	4939      	ldr	r1, [pc, #228]	; (80140cc <SPI_MemoryEraseBySector+0x214>)
 8013fe6:	4835      	ldr	r0, [pc, #212]	; (80140bc <SPI_MemoryEraseBySector+0x204>)
 8013fe8:	f006 f824 	bl	801a034 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013fec:	4b2c      	ldr	r3, [pc, #176]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	4a2d      	ldr	r2, [pc, #180]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8013ff2:	6812      	ldr	r2, [r2, #0]
 8013ff4:	b291      	uxth	r1, r2
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f003 ff79 	bl	8017ef0 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013ffe:	4b28      	ldr	r3, [pc, #160]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	4a29      	ldr	r2, [pc, #164]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8014004:	6812      	ldr	r2, [r2, #0]
 8014006:	b291      	uxth	r1, r2
 8014008:	2200      	movs	r2, #0
 801400a:	4618      	mov	r0, r3
 801400c:	f003 ff70 	bl	8017ef0 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8014010:	2205      	movs	r2, #5
 8014012:	4b2e      	ldr	r3, [pc, #184]	; (80140cc <SPI_MemoryEraseBySector+0x214>)
 8014014:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8014016:	2364      	movs	r3, #100	; 0x64
 8014018:	2201      	movs	r2, #1
 801401a:	492c      	ldr	r1, [pc, #176]	; (80140cc <SPI_MemoryEraseBySector+0x214>)
 801401c:	4827      	ldr	r0, [pc, #156]	; (80140bc <SPI_MemoryEraseBySector+0x204>)
 801401e:	f006 f809 	bl	801a034 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8014022:	2364      	movs	r3, #100	; 0x64
 8014024:	2201      	movs	r2, #1
 8014026:	4927      	ldr	r1, [pc, #156]	; (80140c4 <SPI_MemoryEraseBySector+0x20c>)
 8014028:	4824      	ldr	r0, [pc, #144]	; (80140bc <SPI_MemoryEraseBySector+0x204>)
 801402a:	f006 f971 	bl	801a310 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801402e:	4b1c      	ldr	r3, [pc, #112]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	4a1d      	ldr	r2, [pc, #116]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8014034:	6812      	ldr	r2, [r2, #0]
 8014036:	b291      	uxth	r1, r2
 8014038:	2201      	movs	r2, #1
 801403a:	4618      	mov	r0, r3
 801403c:	f003 ff58 	bl	8017ef0 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8014040:	4b20      	ldr	r3, [pc, #128]	; (80140c4 <SPI_MemoryEraseBySector+0x20c>)
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	f003 0301 	and.w	r3, r3, #1
 8014048:	2b00      	cmp	r3, #0
 801404a:	d1d8      	bne.n	8013ffe <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 801404c:	2301      	movs	r3, #1
 801404e:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8014050:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014052:	4b13      	ldr	r3, [pc, #76]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	4a14      	ldr	r2, [pc, #80]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8014058:	6812      	ldr	r2, [r2, #0]
 801405a:	b291      	uxth	r1, r2
 801405c:	2200      	movs	r2, #0
 801405e:	4618      	mov	r0, r3
 8014060:	f003 ff46 	bl	8017ef0 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8014064:	2204      	movs	r2, #4
 8014066:	4b19      	ldr	r3, [pc, #100]	; (80140cc <SPI_MemoryEraseBySector+0x214>)
 8014068:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 801406a:	2364      	movs	r3, #100	; 0x64
 801406c:	2201      	movs	r2, #1
 801406e:	4917      	ldr	r1, [pc, #92]	; (80140cc <SPI_MemoryEraseBySector+0x214>)
 8014070:	4812      	ldr	r0, [pc, #72]	; (80140bc <SPI_MemoryEraseBySector+0x204>)
 8014072:	f005 ffdf 	bl	801a034 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8014076:	2364      	movs	r3, #100	; 0x64
 8014078:	2201      	movs	r2, #1
 801407a:	4912      	ldr	r1, [pc, #72]	; (80140c4 <SPI_MemoryEraseBySector+0x20c>)
 801407c:	480f      	ldr	r0, [pc, #60]	; (80140bc <SPI_MemoryEraseBySector+0x204>)
 801407e:	f006 f947 	bl	801a310 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014082:	4b07      	ldr	r3, [pc, #28]	; (80140a0 <SPI_MemoryEraseBySector+0x1e8>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	4a08      	ldr	r2, [pc, #32]	; (80140a8 <SPI_MemoryEraseBySector+0x1f0>)
 8014088:	6812      	ldr	r2, [r2, #0]
 801408a:	b291      	uxth	r1, r2
 801408c:	2201      	movs	r2, #1
 801408e:	4618      	mov	r0, r3
 8014090:	f003 ff2e 	bl	8017ef0 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8014094:	68fb      	ldr	r3, [r7, #12]

}
 8014096:	4618      	mov	r0, r3
 8014098:	3710      	adds	r7, #16
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}
 801409e:	bf00      	nop
 80140a0:	20009c98 	.word	0x20009c98
 80140a4:	40021800 	.word	0x40021800
 80140a8:	20009c9c 	.word	0x20009c9c
 80140ac:	40020c00 	.word	0x40020c00
 80140b0:	40021000 	.word	0x40021000
 80140b4:	08026f8c 	.word	0x08026f8c
 80140b8:	08028fa0 	.word	0x08028fa0
 80140bc:	20009ca4 	.word	0x20009ca4
 80140c0:	08028fa1 	.word	0x08028fa1
 80140c4:	20009c94 	.word	0x20009c94
 80140c8:	08026fc8 	.word	0x08026fc8
 80140cc:	20009c90 	.word	0x20009c90

080140d0 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b084      	sub	sp, #16
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	60b9      	str	r1, [r7, #8]
 80140d8:	607b      	str	r3, [r7, #4]
 80140da:	4603      	mov	r3, r0
 80140dc:	73fb      	strb	r3, [r7, #15]
 80140de:	4613      	mov	r3, r2
 80140e0:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 80140e2:	7bfb      	ldrb	r3, [r7, #15]
 80140e4:	3b01      	subs	r3, #1
 80140e6:	2b03      	cmp	r3, #3
 80140e8:	d828      	bhi.n	801413c <SPI_ReadFromFlash+0x6c>
 80140ea:	a201      	add	r2, pc, #4	; (adr r2, 80140f0 <SPI_ReadFromFlash+0x20>)
 80140ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140f0:	08014101 	.word	0x08014101
 80140f4:	08014111 	.word	0x08014111
 80140f8:	0801411f 	.word	0x0801411f
 80140fc:	0801412d 	.word	0x0801412d
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8014100:	4b2d      	ldr	r3, [pc, #180]	; (80141b8 <SPI_ReadFromFlash+0xe8>)
 8014102:	4a2e      	ldr	r2, [pc, #184]	; (80141bc <SPI_ReadFromFlash+0xec>)
 8014104:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8014106:	4b2e      	ldr	r3, [pc, #184]	; (80141c0 <SPI_ReadFromFlash+0xf0>)
 8014108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801410c:	601a      	str	r2, [r3, #0]
		break;
 801410e:	e018      	b.n	8014142 <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8014110:	4b29      	ldr	r3, [pc, #164]	; (80141b8 <SPI_ReadFromFlash+0xe8>)
 8014112:	4a2c      	ldr	r2, [pc, #176]	; (80141c4 <SPI_ReadFromFlash+0xf4>)
 8014114:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8014116:	4b2a      	ldr	r3, [pc, #168]	; (80141c0 <SPI_ReadFromFlash+0xf0>)
 8014118:	2220      	movs	r2, #32
 801411a:	601a      	str	r2, [r3, #0]
		break;
 801411c:	e011      	b.n	8014142 <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 801411e:	4b26      	ldr	r3, [pc, #152]	; (80141b8 <SPI_ReadFromFlash+0xe8>)
 8014120:	4a28      	ldr	r2, [pc, #160]	; (80141c4 <SPI_ReadFromFlash+0xf4>)
 8014122:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8014124:	4b26      	ldr	r3, [pc, #152]	; (80141c0 <SPI_ReadFromFlash+0xf0>)
 8014126:	2240      	movs	r2, #64	; 0x40
 8014128:	601a      	str	r2, [r3, #0]
		break;
 801412a:	e00a      	b.n	8014142 <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 801412c:	4b22      	ldr	r3, [pc, #136]	; (80141b8 <SPI_ReadFromFlash+0xe8>)
 801412e:	4a26      	ldr	r2, [pc, #152]	; (80141c8 <SPI_ReadFromFlash+0xf8>)
 8014130:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8014132:	4b23      	ldr	r3, [pc, #140]	; (80141c0 <SPI_ReadFromFlash+0xf0>)
 8014134:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014138:	601a      	str	r2, [r3, #0]
		break;
 801413a:	e002      	b.n	8014142 <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 801413c:	4823      	ldr	r0, [pc, #140]	; (80141cc <SPI_ReadFromFlash+0xfc>)
 801413e:	f00e faad 	bl	802269c <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8014142:	89bb      	ldrh	r3, [r7, #12]
 8014144:	461a      	mov	r2, r3
 8014146:	2100      	movs	r1, #0
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f00e f923 	bl	8022394 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801414e:	4b1a      	ldr	r3, [pc, #104]	; (80141b8 <SPI_ReadFromFlash+0xe8>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	4a1b      	ldr	r2, [pc, #108]	; (80141c0 <SPI_ReadFromFlash+0xf0>)
 8014154:	6812      	ldr	r2, [r2, #0]
 8014156:	b291      	uxth	r1, r2
 8014158:	2200      	movs	r2, #0
 801415a:	4618      	mov	r0, r3
 801415c:	f003 fec8 	bl	8017ef0 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8014160:	2203      	movs	r2, #3
 8014162:	4b1b      	ldr	r3, [pc, #108]	; (80141d0 <SPI_ReadFromFlash+0x100>)
 8014164:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	0c1b      	lsrs	r3, r3, #16
 801416a:	b2da      	uxtb	r2, r3
 801416c:	4b18      	ldr	r3, [pc, #96]	; (80141d0 <SPI_ReadFromFlash+0x100>)
 801416e:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	0a1b      	lsrs	r3, r3, #8
 8014174:	b2da      	uxtb	r2, r3
 8014176:	4b16      	ldr	r3, [pc, #88]	; (80141d0 <SPI_ReadFromFlash+0x100>)
 8014178:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	b2da      	uxtb	r2, r3
 801417e:	4b14      	ldr	r3, [pc, #80]	; (80141d0 <SPI_ReadFromFlash+0x100>)
 8014180:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8014182:	2364      	movs	r3, #100	; 0x64
 8014184:	2204      	movs	r2, #4
 8014186:	4912      	ldr	r1, [pc, #72]	; (80141d0 <SPI_ReadFromFlash+0x100>)
 8014188:	4812      	ldr	r0, [pc, #72]	; (80141d4 <SPI_ReadFromFlash+0x104>)
 801418a:	f005 ff53 	bl	801a034 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 801418e:	89ba      	ldrh	r2, [r7, #12]
 8014190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014194:	6879      	ldr	r1, [r7, #4]
 8014196:	480f      	ldr	r0, [pc, #60]	; (80141d4 <SPI_ReadFromFlash+0x104>)
 8014198:	f006 f8ba 	bl	801a310 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801419c:	4b06      	ldr	r3, [pc, #24]	; (80141b8 <SPI_ReadFromFlash+0xe8>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	4a07      	ldr	r2, [pc, #28]	; (80141c0 <SPI_ReadFromFlash+0xf0>)
 80141a2:	6812      	ldr	r2, [r2, #0]
 80141a4:	b291      	uxth	r1, r2
 80141a6:	2201      	movs	r2, #1
 80141a8:	4618      	mov	r0, r3
 80141aa:	f003 fea1 	bl	8017ef0 <HAL_GPIO_WritePin>

}
 80141ae:	bf00      	nop
 80141b0:	3710      	adds	r7, #16
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}
 80141b6:	bf00      	nop
 80141b8:	20009c98 	.word	0x20009c98
 80141bc:	40021800 	.word	0x40021800
 80141c0:	20009c9c 	.word	0x20009c9c
 80141c4:	40020c00 	.word	0x40020c00
 80141c8:	40021000 	.word	0x40021000
 80141cc:	08026f8c 	.word	0x08026f8c
 80141d0:	20009c90 	.word	0x20009c90
 80141d4:	20009ca4 	.word	0x20009ca4

080141d8 <Get_Config>:




void Get_Config(void)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b084      	sub	sp, #16
 80141dc:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 80141de:	2300      	movs	r3, #0
 80141e0:	60fb      	str	r3, [r7, #12]
	//	unsigned char uc_SspIndex =0;//,uc_Block_Index = 0;


	size_t SIZE = (sizeof(EI_t))+6;
 80141e2:	f240 3346 	movw	r3, #838	; 0x346
 80141e6:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	60bb      	str	r3, [r7, #8]
	return;
#endif

#endif

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80141ec:	2300      	movs	r3, #0
 80141ee:	60fb      	str	r3, [r7, #12]
 80141f0:	e01d      	b.n	801422e <Get_Config+0x56>
	{
		HAL_Delay(20);
 80141f2:	2014      	movs	r0, #20
 80141f4:	f001 f9b8 	bl	8015568 <HAL_Delay>
		if(SIZE_VAR <32)
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	2b1f      	cmp	r3, #31
 80141fc:	d809      	bhi.n	8014212 <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	b29a      	uxth	r2, r3
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	492c      	ldr	r1, [pc, #176]	; (80142b8 <Get_Config+0xe0>)
 8014206:	440b      	add	r3, r1
 8014208:	68f9      	ldr	r1, [r7, #12]
 801420a:	2001      	movs	r0, #1
 801420c:	f7ff ff60 	bl	80140d0 <SPI_ReadFromFlash>
 8014210:	e00a      	b.n	8014228 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	4a28      	ldr	r2, [pc, #160]	; (80142b8 <Get_Config+0xe0>)
 8014216:	4413      	add	r3, r2
 8014218:	2220      	movs	r2, #32
 801421a:	68f9      	ldr	r1, [r7, #12]
 801421c:	2001      	movs	r0, #1
 801421e:	f7ff ff57 	bl	80140d0 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	3b20      	subs	r3, #32
 8014226:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	3320      	adds	r3, #32
 801422c:	60fb      	str	r3, [r7, #12]
 801422e:	68fa      	ldr	r2, [r7, #12]
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	429a      	cmp	r2, r3
 8014234:	d3dd      	bcc.n	80141f2 <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 8014236:	f44f 7151 	mov.w	r1, #836	; 0x344
 801423a:	481f      	ldr	r0, [pc, #124]	; (80142b8 <Get_Config+0xe0>)
 801423c:	f7fe fca2 	bl	8012b84 <CheckCRC>
 8014240:	4603      	mov	r3, r0
 8014242:	2b00      	cmp	r3, #0
 8014244:	d013      	beq.n	801426e <Get_Config+0x96>
	{
		/* CRC OK From the Flash */
		//EI_Config_ptr = &EI_data+4;
		//memcpy(EI_Config_ptr,&Config_Buff[4],sizeof(EI_t));
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 8014246:	f44f 7250 	mov.w	r2, #832	; 0x340
 801424a:	491c      	ldr	r1, [pc, #112]	; (80142bc <Get_Config+0xe4>)
 801424c:	481c      	ldr	r0, [pc, #112]	; (80142c0 <Get_Config+0xe8>)
 801424e:	f00e f879 	bl	8022344 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8014252:	4a1c      	ldr	r2, [pc, #112]	; (80142c4 <Get_Config+0xec>)
 8014254:	2110      	movs	r1, #16
 8014256:	2000      	movs	r0, #0
 8014258:	f7ec f9dc 	bl	8000614 <ExtractBits>
 801425c:	4603      	mov	r3, r0
 801425e:	b29a      	uxth	r2, r3
 8014260:	4b19      	ldr	r3, [pc, #100]	; (80142c8 <Get_Config+0xf0>)
 8014262:	801a      	strh	r2, [r3, #0]
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8014264:	4b19      	ldr	r3, [pc, #100]	; (80142cc <Get_Config+0xf4>)
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d121      	bne.n	80142b0 <Get_Config+0xd8>
 801426c:	e01e      	b.n	80142ac <Get_Config+0xd4>
		printf("\n EI Configuration CRC from Flash:%u\n",(sizeof(EI_t)+4));
 801426e:	f44f 7151 	mov.w	r1, #836	; 0x344
 8014272:	4817      	ldr	r0, [pc, #92]	; (80142d0 <Get_Config+0xf8>)
 8014274:	f00e f976 	bl	8022564 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8014278:	4b16      	ldr	r3, [pc, #88]	; (80142d4 <Get_Config+0xfc>)
 801427a:	4a10      	ldr	r2, [pc, #64]	; (80142bc <Get_Config+0xe4>)
 801427c:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 801427e:	4b0e      	ldr	r3, [pc, #56]	; (80142b8 <Get_Config+0xe0>)
 8014280:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8014284:	4619      	mov	r1, r3
 8014286:	4b0c      	ldr	r3, [pc, #48]	; (80142b8 <Get_Config+0xe0>)
 8014288:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 801428c:	461a      	mov	r2, r3
 801428e:	4812      	ldr	r0, [pc, #72]	; (80142d8 <Get_Config+0x100>)
 8014290:	f00e f968 	bl	8022564 <iprintf>
		printf("\nCheck for CRC:");
 8014294:	4811      	ldr	r0, [pc, #68]	; (80142dc <Get_Config+0x104>)
 8014296:	f00e f965 	bl	8022564 <iprintf>
		gucFlagUpdate =3;
 801429a:	4b11      	ldr	r3, [pc, #68]	; (80142e0 <Get_Config+0x108>)
 801429c:	2203      	movs	r2, #3
 801429e:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 80142a0:	4810      	ldr	r0, [pc, #64]	; (80142e4 <Get_Config+0x10c>)
 80142a2:	f00e f9fb 	bl	802269c <puts>
			Data_Processing();
 80142a6:	f000 f81f 	bl	80142e8 <Data_Processing>
 80142aa:	e7fc      	b.n	80142a6 <Get_Config+0xce>
	{
		readCanToStructs();
 80142ac:	f7fb fd8c 	bl	800fdc8 <readCanToStructs>
	}
}
 80142b0:	bf00      	nop
 80142b2:	3710      	adds	r7, #16
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	20000648 	.word	0x20000648
 80142bc:	2000064c 	.word	0x2000064c
 80142c0:	20000304 	.word	0x20000304
 80142c4:	2000098c 	.word	0x2000098c
 80142c8:	20009ca2 	.word	0x20009ca2
 80142cc:	20000a4b 	.word	0x20000a4b
 80142d0:	08026ff8 	.word	0x08026ff8
 80142d4:	20000300 	.word	0x20000300
 80142d8:	08027020 	.word	0x08027020
 80142dc:	08027034 	.word	0x08027034
 80142e0:	20000a49 	.word	0x20000a49
 80142e4:	08027044 	.word	0x08027044

080142e8 <Data_Processing>:


void Data_Processing(void)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 80142ec:	4b0b      	ldr	r3, [pc, #44]	; (801431c <Data_Processing+0x34>)
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	2b03      	cmp	r3, #3
 80142f2:	d10e      	bne.n	8014312 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 80142f4:	2000      	movs	r0, #0
 80142f6:	f7f6 fb77 	bl	800a9e8 <CheckForRqst>
 80142fa:	4603      	mov	r3, r0
 80142fc:	461a      	mov	r2, r3
 80142fe:	4b08      	ldr	r3, [pc, #32]	; (8014320 <Data_Processing+0x38>)
 8014300:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 8014302:	4b07      	ldr	r3, [pc, #28]	; (8014320 <Data_Processing+0x38>)
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	2b01      	cmp	r3, #1
 8014308:	d105      	bne.n	8014316 <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 801430a:	2000      	movs	r0, #0
 801430c:	f000 f80a 	bl	8014324 <AutoLoadDat>
		}
		break;
 8014310:	e001      	b.n	8014316 <Data_Processing+0x2e>
	default:
		break;
 8014312:	bf00      	nop
 8014314:	e000      	b.n	8014318 <Data_Processing+0x30>
		break;
 8014316:	bf00      	nop
	}
}
 8014318:	bf00      	nop
 801431a:	bd80      	pop	{r7, pc}
 801431c:	20000a49 	.word	0x20000a49
 8014320:	20000a4a 	.word	0x20000a4a

08014324 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b084      	sub	sp, #16
 8014328:	af00      	add	r7, sp, #0
 801432a:	4603      	mov	r3, r0
 801432c:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 801432e:	2300      	movs	r3, #0
 8014330:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8014332:	79fb      	ldrb	r3, [r7, #7]
 8014334:	b29b      	uxth	r3, r3
 8014336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801433a:	4934      	ldr	r1, [pc, #208]	; (801440c <AutoLoadDat+0xe8>)
 801433c:	4618      	mov	r0, r3
 801433e:	f7f6 fcfb 	bl	800ad38 <ReadAndFormConfig>
 8014342:	4603      	mov	r3, r0
 8014344:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 8014346:	4832      	ldr	r0, [pc, #200]	; (8014410 <AutoLoadDat+0xec>)
 8014348:	f004 fc68 	bl	8018c1c <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 801434c:	7bbb      	ldrb	r3, [r7, #14]
 801434e:	2b01      	cmp	r3, #1
 8014350:	d921      	bls.n	8014396 <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 8014352:	4b30      	ldr	r3, [pc, #192]	; (8014414 <AutoLoadDat+0xf0>)
 8014354:	2200      	movs	r2, #0
 8014356:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 8014358:	4b2c      	ldr	r3, [pc, #176]	; (801440c <AutoLoadDat+0xe8>)
 801435a:	785b      	ldrb	r3, [r3, #1]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d107      	bne.n	8014370 <AutoLoadDat+0x4c>
 8014360:	4b2a      	ldr	r3, [pc, #168]	; (801440c <AutoLoadDat+0xe8>)
 8014362:	789b      	ldrb	r3, [r3, #2]
 8014364:	2b01      	cmp	r3, #1
 8014366:	d103      	bne.n	8014370 <AutoLoadDat+0x4c>
 8014368:	4b28      	ldr	r3, [pc, #160]	; (801440c <AutoLoadDat+0xe8>)
 801436a:	78db      	ldrb	r3, [r3, #3]
 801436c:	2b04      	cmp	r3, #4
 801436e:	d003      	beq.n	8014378 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8014370:	4829      	ldr	r0, [pc, #164]	; (8014418 <AutoLoadDat+0xf4>)
 8014372:	f00e f993 	bl	802269c <puts>
				return;
 8014376:	e046      	b.n	8014406 <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8014378:	4b28      	ldr	r3, [pc, #160]	; (801441c <AutoLoadDat+0xf8>)
 801437a:	4a29      	ldr	r2, [pc, #164]	; (8014420 <AutoLoadDat+0xfc>)
 801437c:	601a      	str	r2, [r3, #0]
			saveConfig();
 801437e:	f000 f85b 	bl	8014438 <saveConfig>
			gucFlagCheck =1;
 8014382:	4b28      	ldr	r3, [pc, #160]	; (8014424 <AutoLoadDat+0x100>)
 8014384:	2201      	movs	r2, #1
 8014386:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 8014388:	4b27      	ldr	r3, [pc, #156]	; (8014428 <AutoLoadDat+0x104>)
 801438a:	2201      	movs	r2, #1
 801438c:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 801438e:	4827      	ldr	r0, [pc, #156]	; (801442c <AutoLoadDat+0x108>)
 8014390:	f00e f984 	bl	802269c <puts>
			break;
 8014394:	e037      	b.n	8014406 <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 8014396:	7bbb      	ldrb	r3, [r7, #14]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d11b      	bne.n	80143d4 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 801439c:	7bfb      	ldrb	r3, [r7, #15]
 801439e:	2b03      	cmp	r3, #3
 80143a0:	d109      	bne.n	80143b6 <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 80143a2:	4b1c      	ldr	r3, [pc, #112]	; (8014414 <AutoLoadDat+0xf0>)
 80143a4:	2200      	movs	r2, #0
 80143a6:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 80143a8:	79fb      	ldrb	r3, [r7, #7]
 80143aa:	2203      	movs	r2, #3
 80143ac:	2101      	movs	r1, #1
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f6 fc76 	bl	800aca0 <SendAck>
				break;
 80143b4:	e027      	b.n	8014406 <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 80143b6:	79fb      	ldrb	r3, [r7, #7]
 80143b8:	2202      	movs	r2, #2
 80143ba:	2101      	movs	r1, #1
 80143bc:	4618      	mov	r0, r3
 80143be:	f7f6 fc6f 	bl	800aca0 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 80143c2:	f001 f8c5 	bl	8015550 <HAL_GetTick>
 80143c6:	4603      	mov	r3, r0
 80143c8:	4a19      	ldr	r2, [pc, #100]	; (8014430 <AutoLoadDat+0x10c>)
 80143ca:	6013      	str	r3, [r2, #0]
			AckCount++;
 80143cc:	7bfb      	ldrb	r3, [r7, #15]
 80143ce:	3301      	adds	r3, #1
 80143d0:	73fb      	strb	r3, [r7, #15]
 80143d2:	e7ae      	b.n	8014332 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 80143d4:	f001 f8bc 	bl	8015550 <HAL_GetTick>
 80143d8:	4602      	mov	r2, r0
 80143da:	4b15      	ldr	r3, [pc, #84]	; (8014430 <AutoLoadDat+0x10c>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	1ad3      	subs	r3, r2, r3
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	bfb8      	it	lt
 80143e4:	425b      	neglt	r3, r3
 80143e6:	f247 5230 	movw	r2, #30000	; 0x7530
 80143ea:	4293      	cmp	r3, r2
 80143ec:	dda1      	ble.n	8014332 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 80143ee:	4b09      	ldr	r3, [pc, #36]	; (8014414 <AutoLoadDat+0xf0>)
 80143f0:	2200      	movs	r2, #0
 80143f2:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 80143f4:	480f      	ldr	r0, [pc, #60]	; (8014434 <AutoLoadDat+0x110>)
 80143f6:	f00e f951 	bl	802269c <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 80143fa:	79fb      	ldrb	r3, [r7, #7]
 80143fc:	2205      	movs	r2, #5
 80143fe:	2101      	movs	r1, #1
 8014400:	4618      	mov	r0, r3
 8014402:	f7f6 fc4d 	bl	800aca0 <SendAck>
				break;
			}
		}
	}
}
 8014406:	3710      	adds	r7, #16
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}
 801440c:	20000648 	.word	0x20000648
 8014410:	20009c6c 	.word	0x20009c6c
 8014414:	20000a4a 	.word	0x20000a4a
 8014418:	08027084 	.word	0x08027084
 801441c:	20000300 	.word	0x20000300
 8014420:	2000064c 	.word	0x2000064c
 8014424:	20009c8c 	.word	0x20009c8c
 8014428:	20009c8d 	.word	0x20009c8d
 801442c:	0802709c 	.word	0x0802709c
 8014430:	20000a4c 	.word	0x20000a4c
 8014434:	080270ac 	.word	0x080270ac

08014438 <saveConfig>:

unsigned char saveConfig(void)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b084      	sub	sp, #16
 801443c:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 801443e:	2300      	movs	r3, #0
 8014440:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8014442:	4825      	ldr	r0, [pc, #148]	; (80144d8 <saveConfig+0xa0>)
 8014444:	f00e f92a 	bl	802269c <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8014448:	2300      	movs	r3, #0
 801444a:	60fb      	str	r3, [r7, #12]
 801444c:	e011      	b.n	8014472 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	031b      	lsls	r3, r3, #12
 8014452:	4619      	mov	r1, r3
 8014454:	2001      	movs	r0, #1
 8014456:	f7ff fd2f 	bl	8013eb8 <SPI_MemoryEraseBySector>
 801445a:	4603      	mov	r3, r0
 801445c:	2b00      	cmp	r3, #0
 801445e:	d005      	beq.n	801446c <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8014460:	481e      	ldr	r0, [pc, #120]	; (80144dc <saveConfig+0xa4>)
 8014462:	f004 fbdb 	bl	8018c1c <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 8014466:	481e      	ldr	r0, [pc, #120]	; (80144e0 <saveConfig+0xa8>)
 8014468:	f00e f918 	bl	802269c <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	3301      	adds	r3, #1
 8014470:	60fb      	str	r3, [r7, #12]
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	2b05      	cmp	r3, #5
 8014476:	d9ea      	bls.n	801444e <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 8014478:	f240 3347 	movw	r3, #839	; 0x347
 801447c:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8014482:	2300      	movs	r3, #0
 8014484:	60fb      	str	r3, [r7, #12]
 8014486:	e01d      	b.n	80144c4 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8014488:	4814      	ldr	r0, [pc, #80]	; (80144dc <saveConfig+0xa4>)
 801448a:	f004 fbc7 	bl	8018c1c <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	2b1f      	cmp	r3, #31
 8014492:	d809      	bhi.n	80144a8 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	b29a      	uxth	r2, r3
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	4912      	ldr	r1, [pc, #72]	; (80144e4 <saveConfig+0xac>)
 801449c:	440b      	add	r3, r1
 801449e:	68f9      	ldr	r1, [r7, #12]
 80144a0:	2001      	movs	r0, #1
 80144a2:	f7ff fbeb 	bl	8013c7c <SPI_WriteInFlash>
 80144a6:	e00a      	b.n	80144be <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	4a0e      	ldr	r2, [pc, #56]	; (80144e4 <saveConfig+0xac>)
 80144ac:	4413      	add	r3, r2
 80144ae:	2220      	movs	r2, #32
 80144b0:	68f9      	ldr	r1, [r7, #12]
 80144b2:	2001      	movs	r0, #1
 80144b4:	f7ff fbe2 	bl	8013c7c <SPI_WriteInFlash>
			SIZE_VAR-=32;
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	3b20      	subs	r3, #32
 80144bc:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	3320      	adds	r3, #32
 80144c2:	60fb      	str	r3, [r7, #12]
 80144c4:	68fa      	ldr	r2, [r7, #12]
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d3dd      	bcc.n	8014488 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 80144cc:	4806      	ldr	r0, [pc, #24]	; (80144e8 <saveConfig+0xb0>)
 80144ce:	f00e f849 	bl	8022564 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 80144d2:	f7ff faff 	bl	8013ad4 <__NVIC_SystemReset>
 80144d6:	bf00      	nop
 80144d8:	080270c8 	.word	0x080270c8
 80144dc:	20009c6c 	.word	0x20009c6c
 80144e0:	080270d4 	.word	0x080270d4
 80144e4:	20000648 	.word	0x20000648
 80144e8:	080270e8 	.word	0x080270e8

080144ec <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 80144f0:	4b14      	ldr	r3, [pc, #80]	; (8014544 <Print_BuildDat_Details+0x58>)
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d022      	beq.n	801453e <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 80144f8:	4b13      	ldr	r3, [pc, #76]	; (8014548 <Print_BuildDat_Details+0x5c>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7fa fa45 	bl	800e98c <HAL_Elaps_Ticks>
 8014502:	4603      	mov	r3, r0
 8014504:	f242 720f 	movw	r2, #9999	; 0x270f
 8014508:	4293      	cmp	r3, r2
 801450a:	d919      	bls.n	8014540 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 801450c:	480f      	ldr	r0, [pc, #60]	; (801454c <Print_BuildDat_Details+0x60>)
 801450e:	f00e f8c5 	bl	802269c <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8014512:	490f      	ldr	r1, [pc, #60]	; (8014550 <Print_BuildDat_Details+0x64>)
 8014514:	480f      	ldr	r0, [pc, #60]	; (8014554 <Print_BuildDat_Details+0x68>)
 8014516:	f00e f825 	bl	8022564 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 801451a:	4b0f      	ldr	r3, [pc, #60]	; (8014558 <Print_BuildDat_Details+0x6c>)
 801451c:	881b      	ldrh	r3, [r3, #0]
 801451e:	4619      	mov	r1, r3
 8014520:	480e      	ldr	r0, [pc, #56]	; (801455c <Print_BuildDat_Details+0x70>)
 8014522:	f00e f81f 	bl	8022564 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 8014526:	4b0e      	ldr	r3, [pc, #56]	; (8014560 <Print_BuildDat_Details+0x74>)
 8014528:	881b      	ldrh	r3, [r3, #0]
 801452a:	4619      	mov	r1, r3
 801452c:	480d      	ldr	r0, [pc, #52]	; (8014564 <Print_BuildDat_Details+0x78>)
 801452e:	f00e f819 	bl	8022564 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8014532:	f001 f80d 	bl	8015550 <HAL_GetTick>
 8014536:	4603      	mov	r3, r0
 8014538:	4a03      	ldr	r2, [pc, #12]	; (8014548 <Print_BuildDat_Details+0x5c>)
 801453a:	6013      	str	r3, [r2, #0]
 801453c:	e000      	b.n	8014540 <Print_BuildDat_Details+0x54>
		return;
 801453e:	bf00      	nop
	}
}
 8014540:	bd80      	pop	{r7, pc}
 8014542:	bf00      	nop
 8014544:	20000645 	.word	0x20000645
 8014548:	20009d08 	.word	0x20009d08
 801454c:	08027104 	.word	0x08027104
 8014550:	20000305 	.word	0x20000305
 8014554:	08027138 	.word	0x08027138
 8014558:	20009ca2 	.word	0x20009ca2
 801455c:	0802714c 	.word	0x0802714c
 8014560:	20009ca0 	.word	0x20009ca0
 8014564:	0802715c 	.word	0x0802715c

08014568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801456e:	4b0f      	ldr	r3, [pc, #60]	; (80145ac <HAL_MspInit+0x44>)
 8014570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014572:	4a0e      	ldr	r2, [pc, #56]	; (80145ac <HAL_MspInit+0x44>)
 8014574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014578:	6413      	str	r3, [r2, #64]	; 0x40
 801457a:	4b0c      	ldr	r3, [pc, #48]	; (80145ac <HAL_MspInit+0x44>)
 801457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801457e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014582:	607b      	str	r3, [r7, #4]
 8014584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014586:	4b09      	ldr	r3, [pc, #36]	; (80145ac <HAL_MspInit+0x44>)
 8014588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801458a:	4a08      	ldr	r2, [pc, #32]	; (80145ac <HAL_MspInit+0x44>)
 801458c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014590:	6453      	str	r3, [r2, #68]	; 0x44
 8014592:	4b06      	ldr	r3, [pc, #24]	; (80145ac <HAL_MspInit+0x44>)
 8014594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801459a:	603b      	str	r3, [r7, #0]
 801459c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 801459e:	2004      	movs	r0, #4
 80145a0:	f001 ffac 	bl	80164fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80145a4:	bf00      	nop
 80145a6:	3708      	adds	r7, #8
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	40023800 	.word	0x40023800

080145b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80145b0:	b480      	push	{r7}
 80145b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80145b4:	e7fe      	b.n	80145b4 <NMI_Handler+0x4>

080145b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80145b6:	b480      	push	{r7}
 80145b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80145ba:	e7fe      	b.n	80145ba <HardFault_Handler+0x4>

080145bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80145bc:	b480      	push	{r7}
 80145be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80145c0:	e7fe      	b.n	80145c0 <MemManage_Handler+0x4>

080145c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80145c2:	b480      	push	{r7}
 80145c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80145c6:	e7fe      	b.n	80145c6 <BusFault_Handler+0x4>

080145c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80145c8:	b480      	push	{r7}
 80145ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80145cc:	e7fe      	b.n	80145cc <UsageFault_Handler+0x4>

080145ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80145ce:	b480      	push	{r7}
 80145d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80145d2:	bf00      	nop
 80145d4:	46bd      	mov	sp, r7
 80145d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145da:	4770      	bx	lr

080145dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80145dc:	b480      	push	{r7}
 80145de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80145e0:	bf00      	nop
 80145e2:	46bd      	mov	sp, r7
 80145e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e8:	4770      	bx	lr

080145ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80145ea:	b480      	push	{r7}
 80145ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80145ee:	bf00      	nop
 80145f0:	46bd      	mov	sp, r7
 80145f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f6:	4770      	bx	lr

080145f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80145fc:	f000 ff94 	bl	8015528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014600:	bf00      	nop
 8014602:	bd80      	pop	{r7, pc}

08014604 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 8014608:	2001      	movs	r0, #1
 801460a:	f003 fca5 	bl	8017f58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 801460e:	bf00      	nop
 8014610:	bd80      	pop	{r7, pc}

08014612 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8014612:	b580      	push	{r7, lr}
 8014614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 8014616:	2002      	movs	r0, #2
 8014618:	f003 fc9e 	bl	8017f58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 801461c:	bf00      	nop
 801461e:	bd80      	pop	{r7, pc}

08014620 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014624:	4802      	ldr	r0, [pc, #8]	; (8014630 <TIM4_IRQHandler+0x10>)
 8014626:	f006 fbbb 	bl	801ada0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 801462a:	bf00      	nop
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	20009d10 	.word	0x20009d10

08014634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8014638:	4802      	ldr	r0, [pc, #8]	; (8014644 <USART1_IRQHandler+0x10>)
 801463a:	f006 fdd5 	bl	801b1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 801463e:	bf00      	nop
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	2000bc44 	.word	0x2000bc44

08014648 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 801464c:	4802      	ldr	r0, [pc, #8]	; (8014658 <TIM5_IRQHandler+0x10>)
 801464e:	f006 fba7 	bl	801ada0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014652:	bf00      	nop
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	20009dcc 	.word	0x20009dcc

0801465c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8014660:	4802      	ldr	r0, [pc, #8]	; (801466c <UART4_IRQHandler+0x10>)
 8014662:	f006 fdc1 	bl	801b1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8014666:	bf00      	nop
 8014668:	bd80      	pop	{r7, pc}
 801466a:	bf00      	nop
 801466c:	2000ba1c 	.word	0x2000ba1c

08014670 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8014674:	4802      	ldr	r0, [pc, #8]	; (8014680 <UART5_IRQHandler+0x10>)
 8014676:	f006 fdb7 	bl	801b1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 801467a:	bf00      	nop
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	2000bad4 	.word	0x2000bad4

08014684 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8014688:	4802      	ldr	r0, [pc, #8]	; (8014694 <TIM6_DAC_IRQHandler+0x10>)
 801468a:	f006 fb89 	bl	801ada0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801468e:	bf00      	nop
 8014690:	bd80      	pop	{r7, pc}
 8014692:	bf00      	nop
 8014694:	20009e88 	.word	0x20009e88

08014698 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 801469c:	4802      	ldr	r0, [pc, #8]	; (80146a8 <TIM7_IRQHandler+0x10>)
 801469e:	f006 fb7f 	bl	801ada0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80146a2:	bf00      	nop
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	20009f44 	.word	0x20009f44

080146ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80146b0:	4802      	ldr	r0, [pc, #8]	; (80146bc <ETH_IRQHandler+0x10>)
 80146b2:	f002 fb73 	bl	8016d9c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80146b6:	bf00      	nop
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	20010658 	.word	0x20010658

080146c0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80146c4:	4802      	ldr	r0, [pc, #8]	; (80146d0 <CAN2_RX0_IRQHandler+0x10>)
 80146c6:	f001 fc15 	bl	8015ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80146ca:	bf00      	nop
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	20009ae8 	.word	0x20009ae8

080146d4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80146d8:	4802      	ldr	r0, [pc, #8]	; (80146e4 <CAN2_RX1_IRQHandler+0x10>)
 80146da:	f001 fc0b 	bl	8015ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80146de:	bf00      	nop
 80146e0:	bd80      	pop	{r7, pc}
 80146e2:	bf00      	nop
 80146e4:	20009ae8 	.word	0x20009ae8

080146e8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80146ec:	4802      	ldr	r0, [pc, #8]	; (80146f8 <UART7_IRQHandler+0x10>)
 80146ee:	f006 fd7b 	bl	801b1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80146f2:	bf00      	nop
 80146f4:	bd80      	pop	{r7, pc}
 80146f6:	bf00      	nop
 80146f8:	2000bb8c 	.word	0x2000bb8c

080146fc <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8014700:	4802      	ldr	r0, [pc, #8]	; (801470c <CAN3_RX0_IRQHandler+0x10>)
 8014702:	f001 fbf7 	bl	8015ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8014706:	bf00      	nop
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	20009b4c 	.word	0x20009b4c

08014710 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8014714:	4802      	ldr	r0, [pc, #8]	; (8014720 <CAN3_RX1_IRQHandler+0x10>)
 8014716:	f001 fbed 	bl	8015ef4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 801471a:	bf00      	nop
 801471c:	bd80      	pop	{r7, pc}
 801471e:	bf00      	nop
 8014720:	20009b4c 	.word	0x20009b4c

08014724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014724:	b480      	push	{r7}
 8014726:	af00      	add	r7, sp, #0
	return 1;
 8014728:	2301      	movs	r3, #1
}
 801472a:	4618      	mov	r0, r3
 801472c:	46bd      	mov	sp, r7
 801472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014732:	4770      	bx	lr

08014734 <_kill>:

int _kill(int pid, int sig)
{
 8014734:	b480      	push	{r7}
 8014736:	b083      	sub	sp, #12
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801473e:	4b05      	ldr	r3, [pc, #20]	; (8014754 <_kill+0x20>)
 8014740:	2216      	movs	r2, #22
 8014742:	601a      	str	r2, [r3, #0]
	return -1;
 8014744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014748:	4618      	mov	r0, r3
 801474a:	370c      	adds	r7, #12
 801474c:	46bd      	mov	sp, r7
 801474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014752:	4770      	bx	lr
 8014754:	2001429c 	.word	0x2001429c

08014758 <_exit>:

void _exit (int status)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b082      	sub	sp, #8
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8014760:	f04f 31ff 	mov.w	r1, #4294967295
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f7ff ffe5 	bl	8014734 <_kill>
	while (1) {}		/* Make sure we hang here */
 801476a:	e7fe      	b.n	801476a <_exit+0x12>

0801476c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b086      	sub	sp, #24
 8014770:	af00      	add	r7, sp, #0
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014778:	2300      	movs	r3, #0
 801477a:	617b      	str	r3, [r7, #20]
 801477c:	e00a      	b.n	8014794 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801477e:	f3af 8000 	nop.w
 8014782:	4601      	mov	r1, r0
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	1c5a      	adds	r2, r3, #1
 8014788:	60ba      	str	r2, [r7, #8]
 801478a:	b2ca      	uxtb	r2, r1
 801478c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	3301      	adds	r3, #1
 8014792:	617b      	str	r3, [r7, #20]
 8014794:	697a      	ldr	r2, [r7, #20]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	429a      	cmp	r2, r3
 801479a:	dbf0      	blt.n	801477e <_read+0x12>
	}

return len;
 801479c:	687b      	ldr	r3, [r7, #4]
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3718      	adds	r7, #24
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b086      	sub	sp, #24
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	60f8      	str	r0, [r7, #12]
 80147ae:	60b9      	str	r1, [r7, #8]
 80147b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80147b2:	2300      	movs	r3, #0
 80147b4:	617b      	str	r3, [r7, #20]
 80147b6:	e009      	b.n	80147cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	1c5a      	adds	r2, r3, #1
 80147bc:	60ba      	str	r2, [r7, #8]
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7ec f967 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	3301      	adds	r3, #1
 80147ca:	617b      	str	r3, [r7, #20]
 80147cc:	697a      	ldr	r2, [r7, #20]
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	429a      	cmp	r2, r3
 80147d2:	dbf1      	blt.n	80147b8 <_write+0x12>
	}
	return len;
 80147d4:	687b      	ldr	r3, [r7, #4]
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3718      	adds	r7, #24
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}

080147de <_close>:

int _close(int file)
{
 80147de:	b480      	push	{r7}
 80147e0:	b083      	sub	sp, #12
 80147e2:	af00      	add	r7, sp, #0
 80147e4:	6078      	str	r0, [r7, #4]
	return -1;
 80147e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	370c      	adds	r7, #12
 80147ee:	46bd      	mov	sp, r7
 80147f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f4:	4770      	bx	lr

080147f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80147f6:	b480      	push	{r7}
 80147f8:	b083      	sub	sp, #12
 80147fa:	af00      	add	r7, sp, #0
 80147fc:	6078      	str	r0, [r7, #4]
 80147fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014806:	605a      	str	r2, [r3, #4]
	return 0;
 8014808:	2300      	movs	r3, #0
}
 801480a:	4618      	mov	r0, r3
 801480c:	370c      	adds	r7, #12
 801480e:	46bd      	mov	sp, r7
 8014810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014814:	4770      	bx	lr

08014816 <_isatty>:

int _isatty(int file)
{
 8014816:	b480      	push	{r7}
 8014818:	b083      	sub	sp, #12
 801481a:	af00      	add	r7, sp, #0
 801481c:	6078      	str	r0, [r7, #4]
	return 1;
 801481e:	2301      	movs	r3, #1
}
 8014820:	4618      	mov	r0, r3
 8014822:	370c      	adds	r7, #12
 8014824:	46bd      	mov	sp, r7
 8014826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482a:	4770      	bx	lr

0801482c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801482c:	b480      	push	{r7}
 801482e:	b085      	sub	sp, #20
 8014830:	af00      	add	r7, sp, #0
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	60b9      	str	r1, [r7, #8]
 8014836:	607a      	str	r2, [r7, #4]
	return 0;
 8014838:	2300      	movs	r3, #0
}
 801483a:	4618      	mov	r0, r3
 801483c:	3714      	adds	r7, #20
 801483e:	46bd      	mov	sp, r7
 8014840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014844:	4770      	bx	lr
	...

08014848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014848:	b480      	push	{r7}
 801484a:	b087      	sub	sp, #28
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014850:	4a14      	ldr	r2, [pc, #80]	; (80148a4 <_sbrk+0x5c>)
 8014852:	4b15      	ldr	r3, [pc, #84]	; (80148a8 <_sbrk+0x60>)
 8014854:	1ad3      	subs	r3, r2, r3
 8014856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801485c:	4b13      	ldr	r3, [pc, #76]	; (80148ac <_sbrk+0x64>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d102      	bne.n	801486a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8014864:	4b11      	ldr	r3, [pc, #68]	; (80148ac <_sbrk+0x64>)
 8014866:	4a12      	ldr	r2, [pc, #72]	; (80148b0 <_sbrk+0x68>)
 8014868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801486a:	4b10      	ldr	r3, [pc, #64]	; (80148ac <_sbrk+0x64>)
 801486c:	681a      	ldr	r2, [r3, #0]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	4413      	add	r3, r2
 8014872:	693a      	ldr	r2, [r7, #16]
 8014874:	429a      	cmp	r2, r3
 8014876:	d205      	bcs.n	8014884 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8014878:	4b0e      	ldr	r3, [pc, #56]	; (80148b4 <_sbrk+0x6c>)
 801487a:	220c      	movs	r2, #12
 801487c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801487e:	f04f 33ff 	mov.w	r3, #4294967295
 8014882:	e009      	b.n	8014898 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8014884:	4b09      	ldr	r3, [pc, #36]	; (80148ac <_sbrk+0x64>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801488a:	4b08      	ldr	r3, [pc, #32]	; (80148ac <_sbrk+0x64>)
 801488c:	681a      	ldr	r2, [r3, #0]
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	4413      	add	r3, r2
 8014892:	4a06      	ldr	r2, [pc, #24]	; (80148ac <_sbrk+0x64>)
 8014894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014896:	68fb      	ldr	r3, [r7, #12]
}
 8014898:	4618      	mov	r0, r3
 801489a:	371c      	adds	r7, #28
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr
 80148a4:	20080000 	.word	0x20080000
 80148a8:	00000400 	.word	0x00000400
 80148ac:	20009d0c 	.word	0x20009d0c
 80148b0:	200142a8 	.word	0x200142a8
 80148b4:	2001429c 	.word	0x2001429c

080148b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80148b8:	b480      	push	{r7}
 80148ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80148bc:	4b06      	ldr	r3, [pc, #24]	; (80148d8 <SystemInit+0x20>)
 80148be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80148c2:	4a05      	ldr	r2, [pc, #20]	; (80148d8 <SystemInit+0x20>)
 80148c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80148c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80148cc:	bf00      	nop
 80148ce:	46bd      	mov	sp, r7
 80148d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d4:	4770      	bx	lr
 80148d6:	bf00      	nop
 80148d8:	e000ed00 	.word	0xe000ed00

080148dc <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80148e0:	4b16      	ldr	r3, [pc, #88]	; (801493c <MX_USART1_UART_Init+0x60>)
 80148e2:	4a17      	ldr	r2, [pc, #92]	; (8014940 <MX_USART1_UART_Init+0x64>)
 80148e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80148e6:	4b15      	ldr	r3, [pc, #84]	; (801493c <MX_USART1_UART_Init+0x60>)
 80148e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80148ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80148ee:	4b13      	ldr	r3, [pc, #76]	; (801493c <MX_USART1_UART_Init+0x60>)
 80148f0:	2200      	movs	r2, #0
 80148f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80148f4:	4b11      	ldr	r3, [pc, #68]	; (801493c <MX_USART1_UART_Init+0x60>)
 80148f6:	2200      	movs	r2, #0
 80148f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80148fa:	4b10      	ldr	r3, [pc, #64]	; (801493c <MX_USART1_UART_Init+0x60>)
 80148fc:	2200      	movs	r2, #0
 80148fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014900:	4b0e      	ldr	r3, [pc, #56]	; (801493c <MX_USART1_UART_Init+0x60>)
 8014902:	220c      	movs	r2, #12
 8014904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014906:	4b0d      	ldr	r3, [pc, #52]	; (801493c <MX_USART1_UART_Init+0x60>)
 8014908:	2200      	movs	r2, #0
 801490a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801490c:	4b0b      	ldr	r3, [pc, #44]	; (801493c <MX_USART1_UART_Init+0x60>)
 801490e:	2200      	movs	r2, #0
 8014910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014912:	4b0a      	ldr	r3, [pc, #40]	; (801493c <MX_USART1_UART_Init+0x60>)
 8014914:	2200      	movs	r2, #0
 8014916:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014918:	4b08      	ldr	r3, [pc, #32]	; (801493c <MX_USART1_UART_Init+0x60>)
 801491a:	2200      	movs	r2, #0
 801491c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801491e:	4807      	ldr	r0, [pc, #28]	; (801493c <MX_USART1_UART_Init+0x60>)
 8014920:	f006 fb80 	bl	801b024 <HAL_UART_Init>
 8014924:	4603      	mov	r3, r0
 8014926:	2b00      	cmp	r3, #0
 8014928:	d001      	beq.n	801492e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801492a:	f7ff f885 	bl	8013a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801492e:	2280      	movs	r2, #128	; 0x80
 8014930:	4904      	ldr	r1, [pc, #16]	; (8014944 <MX_USART1_UART_Init+0x68>)
 8014932:	4802      	ldr	r0, [pc, #8]	; (801493c <MX_USART1_UART_Init+0x60>)
 8014934:	f007 fee2 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8014938:	bf00      	nop
 801493a:	bd80      	pop	{r7, pc}
 801493c:	2000bc44 	.word	0x2000bc44
 8014940:	40011000 	.word	0x40011000
 8014944:	2000b81c 	.word	0x2000b81c

08014948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b0b4      	sub	sp, #208	; 0xd0
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014950:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014954:	2200      	movs	r2, #0
 8014956:	601a      	str	r2, [r3, #0]
 8014958:	605a      	str	r2, [r3, #4]
 801495a:	609a      	str	r2, [r3, #8]
 801495c:	60da      	str	r2, [r3, #12]
 801495e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014964:	2290      	movs	r2, #144	; 0x90
 8014966:	2100      	movs	r1, #0
 8014968:	4618      	mov	r0, r3
 801496a:	f00d fd13 	bl	8022394 <memset>
  if(uartHandle->Instance==UART4)
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	4aa7      	ldr	r2, [pc, #668]	; (8014c10 <HAL_UART_MspInit+0x2c8>)
 8014974:	4293      	cmp	r3, r2
 8014976:	d145      	bne.n	8014a04 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8014978:	f44f 7300 	mov.w	r3, #512	; 0x200
 801497c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 801497e:	2300      	movs	r3, #0
 8014980:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014986:	4618      	mov	r0, r3
 8014988:	f004 fdec 	bl	8019564 <HAL_RCCEx_PeriphCLKConfig>
 801498c:	4603      	mov	r3, r0
 801498e:	2b00      	cmp	r3, #0
 8014990:	d001      	beq.n	8014996 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8014992:	f7ff f851 	bl	8013a38 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8014996:	4b9f      	ldr	r3, [pc, #636]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801499a:	4a9e      	ldr	r2, [pc, #632]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 801499c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80149a0:	6413      	str	r3, [r2, #64]	; 0x40
 80149a2:	4b9c      	ldr	r3, [pc, #624]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 80149a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80149aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80149ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80149ae:	4b99      	ldr	r3, [pc, #612]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 80149b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149b2:	4a98      	ldr	r2, [pc, #608]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 80149b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149b8:	6313      	str	r3, [r2, #48]	; 0x30
 80149ba:	4b96      	ldr	r3, [pc, #600]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 80149bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80149c2:	627b      	str	r3, [r7, #36]	; 0x24
 80149c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 80149c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80149ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149ce:	2302      	movs	r3, #2
 80149d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149d4:	2300      	movs	r3, #0
 80149d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149da:	2303      	movs	r3, #3
 80149dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80149e0:	2308      	movs	r3, #8
 80149e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80149e6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80149ea:	4619      	mov	r1, r3
 80149ec:	488a      	ldr	r0, [pc, #552]	; (8014c18 <HAL_UART_MspInit+0x2d0>)
 80149ee:	f003 f8bb 	bl	8017b68 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80149f2:	2200      	movs	r2, #0
 80149f4:	2105      	movs	r1, #5
 80149f6:	2034      	movs	r0, #52	; 0x34
 80149f8:	f001 fd8b 	bl	8016512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80149fc:	2034      	movs	r0, #52	; 0x34
 80149fe:	f001 fda4 	bl	801654a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8014a02:	e100      	b.n	8014c06 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	4a84      	ldr	r2, [pc, #528]	; (8014c1c <HAL_UART_MspInit+0x2d4>)
 8014a0a:	4293      	cmp	r3, r2
 8014a0c:	d167      	bne.n	8014ade <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8014a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8014a14:	2300      	movs	r3, #0
 8014a16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f004 fda0 	bl	8019564 <HAL_RCCEx_PeriphCLKConfig>
 8014a24:	4603      	mov	r3, r0
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d001      	beq.n	8014a2e <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8014a2a:	f7ff f805 	bl	8013a38 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8014a2e:	4b79      	ldr	r3, [pc, #484]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a32:	4a78      	ldr	r2, [pc, #480]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a38:	6413      	str	r3, [r2, #64]	; 0x40
 8014a3a:	4b76      	ldr	r3, [pc, #472]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014a42:	623b      	str	r3, [r7, #32]
 8014a44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014a46:	4b73      	ldr	r3, [pc, #460]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a4a:	4a72      	ldr	r2, [pc, #456]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014a4c:	f043 0308 	orr.w	r3, r3, #8
 8014a50:	6313      	str	r3, [r2, #48]	; 0x30
 8014a52:	4b70      	ldr	r3, [pc, #448]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a56:	f003 0308 	and.w	r3, r3, #8
 8014a5a:	61fb      	str	r3, [r7, #28]
 8014a5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014a5e:	4b6d      	ldr	r3, [pc, #436]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a62:	4a6c      	ldr	r2, [pc, #432]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014a64:	f043 0302 	orr.w	r3, r3, #2
 8014a68:	6313      	str	r3, [r2, #48]	; 0x30
 8014a6a:	4b6a      	ldr	r3, [pc, #424]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a6e:	f003 0302 	and.w	r3, r3, #2
 8014a72:	61bb      	str	r3, [r7, #24]
 8014a74:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8014a76:	2304      	movs	r3, #4
 8014a78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a7c:	2302      	movs	r3, #2
 8014a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a82:	2300      	movs	r3, #0
 8014a84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a88:	2303      	movs	r3, #3
 8014a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8014a8e:	2308      	movs	r3, #8
 8014a90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8014a94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014a98:	4619      	mov	r1, r3
 8014a9a:	4861      	ldr	r0, [pc, #388]	; (8014c20 <HAL_UART_MspInit+0x2d8>)
 8014a9c:	f003 f864 	bl	8017b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8014aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014aa8:	2302      	movs	r3, #2
 8014aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014ab4:	2303      	movs	r3, #3
 8014ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8014aba:	2307      	movs	r3, #7
 8014abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8014ac0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	4857      	ldr	r0, [pc, #348]	; (8014c24 <HAL_UART_MspInit+0x2dc>)
 8014ac8:	f003 f84e 	bl	8017b68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8014acc:	2200      	movs	r2, #0
 8014ace:	2105      	movs	r1, #5
 8014ad0:	2035      	movs	r0, #53	; 0x35
 8014ad2:	f001 fd1e 	bl	8016512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8014ad6:	2035      	movs	r0, #53	; 0x35
 8014ad8:	f001 fd37 	bl	801654a <HAL_NVIC_EnableIRQ>
}
 8014adc:	e093      	b.n	8014c06 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	4a51      	ldr	r2, [pc, #324]	; (8014c28 <HAL_UART_MspInit+0x2e0>)
 8014ae4:	4293      	cmp	r3, r2
 8014ae6:	d145      	bne.n	8014b74 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8014ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8014aee:	2300      	movs	r3, #0
 8014af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014af8:	4618      	mov	r0, r3
 8014afa:	f004 fd33 	bl	8019564 <HAL_RCCEx_PeriphCLKConfig>
 8014afe:	4603      	mov	r3, r0
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d001      	beq.n	8014b08 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8014b04:	f7fe ff98 	bl	8013a38 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8014b08:	4b42      	ldr	r3, [pc, #264]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b0c:	4a41      	ldr	r2, [pc, #260]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014b12:	6413      	str	r3, [r2, #64]	; 0x40
 8014b14:	4b3f      	ldr	r3, [pc, #252]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014b1c:	617b      	str	r3, [r7, #20]
 8014b1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014b20:	4b3c      	ldr	r3, [pc, #240]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b24:	4a3b      	ldr	r2, [pc, #236]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014b26:	f043 0320 	orr.w	r3, r3, #32
 8014b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8014b2c:	4b39      	ldr	r3, [pc, #228]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b30:	f003 0320 	and.w	r3, r3, #32
 8014b34:	613b      	str	r3, [r7, #16]
 8014b36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8014b38:	23c0      	movs	r3, #192	; 0xc0
 8014b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b3e:	2302      	movs	r3, #2
 8014b40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b44:	2300      	movs	r3, #0
 8014b46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014b4a:	2303      	movs	r3, #3
 8014b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8014b50:	2308      	movs	r3, #8
 8014b52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014b56:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	4833      	ldr	r0, [pc, #204]	; (8014c2c <HAL_UART_MspInit+0x2e4>)
 8014b5e:	f003 f803 	bl	8017b68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8014b62:	2200      	movs	r2, #0
 8014b64:	2105      	movs	r1, #5
 8014b66:	2052      	movs	r0, #82	; 0x52
 8014b68:	f001 fcd3 	bl	8016512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8014b6c:	2052      	movs	r0, #82	; 0x52
 8014b6e:	f001 fcec 	bl	801654a <HAL_NVIC_EnableIRQ>
}
 8014b72:	e048      	b.n	8014c06 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	4a2d      	ldr	r2, [pc, #180]	; (8014c30 <HAL_UART_MspInit+0x2e8>)
 8014b7a:	4293      	cmp	r3, r2
 8014b7c:	d143      	bne.n	8014c06 <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8014b7e:	2340      	movs	r3, #64	; 0x40
 8014b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8014b82:	2300      	movs	r3, #0
 8014b84:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f004 fcea 	bl	8019564 <HAL_RCCEx_PeriphCLKConfig>
 8014b90:	4603      	mov	r3, r0
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d001      	beq.n	8014b9a <HAL_UART_MspInit+0x252>
      Error_Handler();
 8014b96:	f7fe ff4f 	bl	8013a38 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8014b9a:	4b1e      	ldr	r3, [pc, #120]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b9e:	4a1d      	ldr	r2, [pc, #116]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014ba0:	f043 0310 	orr.w	r3, r3, #16
 8014ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8014ba6:	4b1b      	ldr	r3, [pc, #108]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014baa:	f003 0310 	and.w	r3, r3, #16
 8014bae:	60fb      	str	r3, [r7, #12]
 8014bb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014bb2:	4b18      	ldr	r3, [pc, #96]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bb6:	4a17      	ldr	r2, [pc, #92]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014bb8:	f043 0301 	orr.w	r3, r3, #1
 8014bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8014bbe:	4b15      	ldr	r3, [pc, #84]	; (8014c14 <HAL_UART_MspInit+0x2cc>)
 8014bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bc2:	f003 0301 	and.w	r3, r3, #1
 8014bc6:	60bb      	str	r3, [r7, #8]
 8014bc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8014bca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8014bce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014bd2:	2302      	movs	r3, #2
 8014bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014bde:	2303      	movs	r3, #3
 8014be0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014be4:	2307      	movs	r3, #7
 8014be6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014bee:	4619      	mov	r1, r3
 8014bf0:	4810      	ldr	r0, [pc, #64]	; (8014c34 <HAL_UART_MspInit+0x2ec>)
 8014bf2:	f002 ffb9 	bl	8017b68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	2107      	movs	r1, #7
 8014bfa:	2025      	movs	r0, #37	; 0x25
 8014bfc:	f001 fc89 	bl	8016512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8014c00:	2025      	movs	r0, #37	; 0x25
 8014c02:	f001 fca2 	bl	801654a <HAL_NVIC_EnableIRQ>
}
 8014c06:	bf00      	nop
 8014c08:	37d0      	adds	r7, #208	; 0xd0
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	40004c00 	.word	0x40004c00
 8014c14:	40023800 	.word	0x40023800
 8014c18:	40021c00 	.word	0x40021c00
 8014c1c:	40005000 	.word	0x40005000
 8014c20:	40020c00 	.word	0x40020c00
 8014c24:	40020400 	.word	0x40020400
 8014c28:	40007800 	.word	0x40007800
 8014c2c:	40021400 	.word	0x40021400
 8014c30:	40011000 	.word	0x40011000
 8014c34:	40020000 	.word	0x40020000

08014c38 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b082      	sub	sp, #8
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8014c40:	4b17      	ldr	r3, [pc, #92]	; (8014ca0 <UART4_Init+0x68>)
 8014c42:	4a18      	ldr	r2, [pc, #96]	; (8014ca4 <UART4_Init+0x6c>)
 8014c44:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8014c46:	4a16      	ldr	r2, [pc, #88]	; (8014ca0 <UART4_Init+0x68>)
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8014c4c:	4b14      	ldr	r3, [pc, #80]	; (8014ca0 <UART4_Init+0x68>)
 8014c4e:	2200      	movs	r2, #0
 8014c50:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8014c52:	4b13      	ldr	r3, [pc, #76]	; (8014ca0 <UART4_Init+0x68>)
 8014c54:	2200      	movs	r2, #0
 8014c56:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8014c58:	4b11      	ldr	r3, [pc, #68]	; (8014ca0 <UART4_Init+0x68>)
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8014c5e:	4b10      	ldr	r3, [pc, #64]	; (8014ca0 <UART4_Init+0x68>)
 8014c60:	220c      	movs	r2, #12
 8014c62:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014c64:	4b0e      	ldr	r3, [pc, #56]	; (8014ca0 <UART4_Init+0x68>)
 8014c66:	2200      	movs	r2, #0
 8014c68:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8014c6a:	4b0d      	ldr	r3, [pc, #52]	; (8014ca0 <UART4_Init+0x68>)
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014c70:	4b0b      	ldr	r3, [pc, #44]	; (8014ca0 <UART4_Init+0x68>)
 8014c72:	2200      	movs	r2, #0
 8014c74:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014c76:	4b0a      	ldr	r3, [pc, #40]	; (8014ca0 <UART4_Init+0x68>)
 8014c78:	2200      	movs	r2, #0
 8014c7a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8014c7c:	4808      	ldr	r0, [pc, #32]	; (8014ca0 <UART4_Init+0x68>)
 8014c7e:	f006 f9d1 	bl	801b024 <HAL_UART_Init>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d001      	beq.n	8014c8c <UART4_Init+0x54>
	{
		Error_Handler();
 8014c88:	f7fe fed6 	bl	8013a38 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014c8c:	2280      	movs	r2, #128	; 0x80
 8014c8e:	4906      	ldr	r1, [pc, #24]	; (8014ca8 <UART4_Init+0x70>)
 8014c90:	4803      	ldr	r0, [pc, #12]	; (8014ca0 <UART4_Init+0x68>)
 8014c92:	f007 fd33 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 8014c96:	bf00      	nop
 8014c98:	3708      	adds	r7, #8
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	2000ba1c 	.word	0x2000ba1c
 8014ca4:	40004c00 	.word	0x40004c00
 8014ca8:	2000b99c 	.word	0x2000b99c

08014cac <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b084      	sub	sp, #16
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	460b      	mov	r3, r1
 8014cb6:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	4a60      	ldr	r2, [pc, #384]	; (8014e40 <HAL_UARTEx_RxEventCallback+0x194>)
 8014cbe:	4293      	cmp	r3, r2
 8014cc0:	d129      	bne.n	8014d16 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014cc2:	2280      	movs	r2, #128	; 0x80
 8014cc4:	495f      	ldr	r1, [pc, #380]	; (8014e44 <HAL_UARTEx_RxEventCallback+0x198>)
 8014cc6:	4860      	ldr	r0, [pc, #384]	; (8014e48 <HAL_UARTEx_RxEventCallback+0x19c>)
 8014cc8:	f007 fd18 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014ccc:	2300      	movs	r3, #0
 8014cce:	81fb      	strh	r3, [r7, #14]
 8014cd0:	e017      	b.n	8014d02 <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 8014cd2:	89fa      	ldrh	r2, [r7, #14]
 8014cd4:	4b5d      	ldr	r3, [pc, #372]	; (8014e4c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014cd6:	881b      	ldrh	r3, [r3, #0]
 8014cd8:	1c59      	adds	r1, r3, #1
 8014cda:	b288      	uxth	r0, r1
 8014cdc:	495b      	ldr	r1, [pc, #364]	; (8014e4c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014cde:	8008      	strh	r0, [r1, #0]
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	4b58      	ldr	r3, [pc, #352]	; (8014e44 <HAL_UARTEx_RxEventCallback+0x198>)
 8014ce4:	5c9a      	ldrb	r2, [r3, r2]
 8014ce6:	4b59      	ldr	r3, [pc, #356]	; (8014e4c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014ce8:	440b      	add	r3, r1
 8014cea:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8014cec:	4b57      	ldr	r3, [pc, #348]	; (8014e4c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014cee:	881b      	ldrh	r3, [r3, #0]
 8014cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014cf4:	d302      	bcc.n	8014cfc <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 8014cf6:	4b55      	ldr	r3, [pc, #340]	; (8014e4c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8014cfc:	89fb      	ldrh	r3, [r7, #14]
 8014cfe:	3301      	adds	r3, #1
 8014d00:	81fb      	strh	r3, [r7, #14]
 8014d02:	89fa      	ldrh	r2, [r7, #14]
 8014d04:	887b      	ldrh	r3, [r7, #2]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d3e3      	bcc.n	8014cd2 <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 8014d0a:	f000 fc21 	bl	8015550 <HAL_GetTick>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	4a4f      	ldr	r2, [pc, #316]	; (8014e50 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8014d12:	6013      	str	r3, [r2, #0]
				UART_BUFFS[THREE_PORT].Write_End = 0;
			}
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8014d14:	e090      	b.n	8014e38 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART5)
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	4a4e      	ldr	r2, [pc, #312]	; (8014e54 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	d129      	bne.n	8014d74 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014d20:	2280      	movs	r2, #128	; 0x80
 8014d22:	494d      	ldr	r1, [pc, #308]	; (8014e58 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8014d24:	484d      	ldr	r0, [pc, #308]	; (8014e5c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8014d26:	f007 fce9 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	81bb      	strh	r3, [r7, #12]
 8014d2e:	e01c      	b.n	8014d6a <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8014d30:	89ba      	ldrh	r2, [r7, #12]
 8014d32:	4b4b      	ldr	r3, [pc, #300]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d34:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8014d38:	1c59      	adds	r1, r3, #1
 8014d3a:	b288      	uxth	r0, r1
 8014d3c:	4948      	ldr	r1, [pc, #288]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d3e:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8014d42:	4619      	mov	r1, r3
 8014d44:	4b44      	ldr	r3, [pc, #272]	; (8014e58 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8014d46:	5c9a      	ldrb	r2, [r3, r2]
 8014d48:	4b45      	ldr	r3, [pc, #276]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d4a:	440b      	add	r3, r1
 8014d4c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8014d50:	4b43      	ldr	r3, [pc, #268]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d52:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8014d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d5a:	d303      	bcc.n	8014d64 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8014d5c:	4b40      	ldr	r3, [pc, #256]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d5e:	2200      	movs	r2, #0
 8014d60:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8014d64:	89bb      	ldrh	r3, [r7, #12]
 8014d66:	3301      	adds	r3, #1
 8014d68:	81bb      	strh	r3, [r7, #12]
 8014d6a:	89ba      	ldrh	r2, [r7, #12]
 8014d6c:	887b      	ldrh	r3, [r7, #2]
 8014d6e:	429a      	cmp	r2, r3
 8014d70:	d3de      	bcc.n	8014d30 <HAL_UARTEx_RxEventCallback+0x84>
}
 8014d72:	e061      	b.n	8014e38 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART7)
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4a3a      	ldr	r2, [pc, #232]	; (8014e64 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8014d7a:	4293      	cmp	r3, r2
 8014d7c:	d129      	bne.n	8014dd2 <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014d7e:	2280      	movs	r2, #128	; 0x80
 8014d80:	4939      	ldr	r1, [pc, #228]	; (8014e68 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8014d82:	483a      	ldr	r0, [pc, #232]	; (8014e6c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8014d84:	f007 fcba 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014d88:	2300      	movs	r3, #0
 8014d8a:	817b      	strh	r3, [r7, #10]
 8014d8c:	e01c      	b.n	8014dc8 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 8014d8e:	897a      	ldrh	r2, [r7, #10]
 8014d90:	4b33      	ldr	r3, [pc, #204]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d92:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8014d96:	1c59      	adds	r1, r3, #1
 8014d98:	b288      	uxth	r0, r1
 8014d9a:	4931      	ldr	r1, [pc, #196]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d9c:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8014da0:	4619      	mov	r1, r3
 8014da2:	4b31      	ldr	r3, [pc, #196]	; (8014e68 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8014da4:	5c9a      	ldrb	r2, [r3, r2]
 8014da6:	4b2e      	ldr	r3, [pc, #184]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014da8:	440b      	add	r3, r1
 8014daa:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8014dae:	4b2c      	ldr	r3, [pc, #176]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014db0:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8014db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014db8:	d303      	bcc.n	8014dc2 <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8014dba:	4b29      	ldr	r3, [pc, #164]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8014dc2:	897b      	ldrh	r3, [r7, #10]
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	817b      	strh	r3, [r7, #10]
 8014dc8:	897a      	ldrh	r2, [r7, #10]
 8014dca:	887b      	ldrh	r3, [r7, #2]
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	d3de      	bcc.n	8014d8e <HAL_UARTEx_RxEventCallback+0xe2>
}
 8014dd0:	e032      	b.n	8014e38 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART4)
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	4a26      	ldr	r2, [pc, #152]	; (8014e70 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8014dd8:	4293      	cmp	r3, r2
 8014dda:	d12d      	bne.n	8014e38 <HAL_UARTEx_RxEventCallback+0x18c>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014ddc:	2280      	movs	r2, #128	; 0x80
 8014dde:	4925      	ldr	r1, [pc, #148]	; (8014e74 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8014de0:	4825      	ldr	r0, [pc, #148]	; (8014e78 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8014de2:	f007 fc8b 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014de6:	2300      	movs	r3, #0
 8014de8:	813b      	strh	r3, [r7, #8]
 8014dea:	e01c      	b.n	8014e26 <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8014dec:	893a      	ldrh	r2, [r7, #8]
 8014dee:	4b1c      	ldr	r3, [pc, #112]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014df0:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8014df4:	1c59      	adds	r1, r3, #1
 8014df6:	b288      	uxth	r0, r1
 8014df8:	4919      	ldr	r1, [pc, #100]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014dfa:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8014dfe:	4619      	mov	r1, r3
 8014e00:	4b1c      	ldr	r3, [pc, #112]	; (8014e74 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8014e02:	5c9a      	ldrb	r2, [r3, r2]
 8014e04:	4b16      	ldr	r3, [pc, #88]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014e06:	440b      	add	r3, r1
 8014e08:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8014e0c:	4b14      	ldr	r3, [pc, #80]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014e0e:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8014e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e16:	d303      	bcc.n	8014e20 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 8014e18:	4b11      	ldr	r3, [pc, #68]	; (8014e60 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8014e20:	893b      	ldrh	r3, [r7, #8]
 8014e22:	3301      	adds	r3, #1
 8014e24:	813b      	strh	r3, [r7, #8]
 8014e26:	893a      	ldrh	r2, [r7, #8]
 8014e28:	887b      	ldrh	r3, [r7, #2]
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d3de      	bcc.n	8014dec <HAL_UARTEx_RxEventCallback+0x140>
		UART4_Intr_Clk = HAL_GetTick();
 8014e2e:	f000 fb8f 	bl	8015550 <HAL_GetTick>
 8014e32:	4603      	mov	r3, r0
 8014e34:	4a11      	ldr	r2, [pc, #68]	; (8014e7c <HAL_UARTEx_RxEventCallback+0x1d0>)
 8014e36:	6013      	str	r3, [r2, #0]
}
 8014e38:	bf00      	nop
 8014e3a:	3710      	adds	r7, #16
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	40011000 	.word	0x40011000
 8014e44:	2000b81c 	.word	0x2000b81c
 8014e48:	2000bc44 	.word	0x2000bc44
 8014e4c:	2000b018 	.word	0x2000b018
 8014e50:	2000a004 	.word	0x2000a004
 8014e54:	40005000 	.word	0x40005000
 8014e58:	2000b89c 	.word	0x2000b89c
 8014e5c:	2000bad4 	.word	0x2000bad4
 8014e60:	2000a008 	.word	0x2000a008
 8014e64:	40007800 	.word	0x40007800
 8014e68:	2000b91c 	.word	0x2000b91c
 8014e6c:	2000bb8c 	.word	0x2000bb8c
 8014e70:	40004c00 	.word	0x40004c00
 8014e74:	2000b99c 	.word	0x2000b99c
 8014e78:	2000ba1c 	.word	0x2000ba1c
 8014e7c:	2000a000 	.word	0x2000a000

08014e80 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8014e80:	b480      	push	{r7}
 8014e82:	b085      	sub	sp, #20
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	4603      	mov	r3, r0
 8014e88:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8014e8e:	79fb      	ldrb	r3, [r7, #7]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d115      	bne.n	8014ec0 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8014e94:	79fa      	ldrb	r2, [r7, #7]
 8014e96:	4918      	ldr	r1, [pc, #96]	; (8014ef8 <Com_DataReady+0x78>)
 8014e98:	4613      	mov	r3, r2
 8014e9a:	025b      	lsls	r3, r3, #9
 8014e9c:	4413      	add	r3, r2
 8014e9e:	009b      	lsls	r3, r3, #2
 8014ea0:	440b      	add	r3, r1
 8014ea2:	8819      	ldrh	r1, [r3, #0]
 8014ea4:	79fa      	ldrb	r2, [r7, #7]
 8014ea6:	4814      	ldr	r0, [pc, #80]	; (8014ef8 <Com_DataReady+0x78>)
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	025b      	lsls	r3, r3, #9
 8014eac:	4413      	add	r3, r2
 8014eae:	009b      	lsls	r3, r3, #2
 8014eb0:	4403      	add	r3, r0
 8014eb2:	3302      	adds	r3, #2
 8014eb4:	881b      	ldrh	r3, [r3, #0]
 8014eb6:	4299      	cmp	r1, r3
 8014eb8:	d017      	beq.n	8014eea <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8014eba:	2301      	movs	r3, #1
 8014ebc:	73fb      	strb	r3, [r7, #15]
 8014ebe:	e014      	b.n	8014eea <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8014ec0:	79fa      	ldrb	r2, [r7, #7]
 8014ec2:	490e      	ldr	r1, [pc, #56]	; (8014efc <Com_DataReady+0x7c>)
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	021b      	lsls	r3, r3, #8
 8014ec8:	4413      	add	r3, r2
 8014eca:	009b      	lsls	r3, r3, #2
 8014ecc:	440b      	add	r3, r1
 8014ece:	8819      	ldrh	r1, [r3, #0]
 8014ed0:	79fa      	ldrb	r2, [r7, #7]
 8014ed2:	480a      	ldr	r0, [pc, #40]	; (8014efc <Com_DataReady+0x7c>)
 8014ed4:	4613      	mov	r3, r2
 8014ed6:	021b      	lsls	r3, r3, #8
 8014ed8:	4413      	add	r3, r2
 8014eda:	009b      	lsls	r3, r3, #2
 8014edc:	4403      	add	r3, r0
 8014ede:	3302      	adds	r3, #2
 8014ee0:	881b      	ldrh	r3, [r3, #0]
 8014ee2:	4299      	cmp	r1, r3
 8014ee4:	d001      	beq.n	8014eea <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8014ee6:	2301      	movs	r3, #1
 8014ee8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8014eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	3714      	adds	r7, #20
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef6:	4770      	bx	lr
 8014ef8:	2000b018 	.word	0x2000b018
 8014efc:	2000a008 	.word	0x2000a008

08014f00 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8014f00:	b4b0      	push	{r4, r5, r7}
 8014f02:	b085      	sub	sp, #20
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	4603      	mov	r3, r0
 8014f08:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8014f0e:	79fb      	ldrb	r3, [r7, #7]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d135      	bne.n	8014f80 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8014f14:	79f9      	ldrb	r1, [r7, #7]
 8014f16:	79fa      	ldrb	r2, [r7, #7]
 8014f18:	4837      	ldr	r0, [pc, #220]	; (8014ff8 <Com_Get_Byte+0xf8>)
 8014f1a:	4613      	mov	r3, r2
 8014f1c:	025b      	lsls	r3, r3, #9
 8014f1e:	4413      	add	r3, r2
 8014f20:	009b      	lsls	r3, r3, #2
 8014f22:	4403      	add	r3, r0
 8014f24:	3302      	adds	r3, #2
 8014f26:	8818      	ldrh	r0, [r3, #0]
 8014f28:	1c43      	adds	r3, r0, #1
 8014f2a:	b29d      	uxth	r5, r3
 8014f2c:	4c32      	ldr	r4, [pc, #200]	; (8014ff8 <Com_Get_Byte+0xf8>)
 8014f2e:	4613      	mov	r3, r2
 8014f30:	025b      	lsls	r3, r3, #9
 8014f32:	4413      	add	r3, r2
 8014f34:	009b      	lsls	r3, r3, #2
 8014f36:	4423      	add	r3, r4
 8014f38:	3302      	adds	r3, #2
 8014f3a:	462a      	mov	r2, r5
 8014f3c:	801a      	strh	r2, [r3, #0]
 8014f3e:	4a2e      	ldr	r2, [pc, #184]	; (8014ff8 <Com_Get_Byte+0xf8>)
 8014f40:	460b      	mov	r3, r1
 8014f42:	025b      	lsls	r3, r3, #9
 8014f44:	440b      	add	r3, r1
 8014f46:	009b      	lsls	r3, r3, #2
 8014f48:	4413      	add	r3, r2
 8014f4a:	4403      	add	r3, r0
 8014f4c:	3304      	adds	r3, #4
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8014f52:	79fa      	ldrb	r2, [r7, #7]
 8014f54:	4928      	ldr	r1, [pc, #160]	; (8014ff8 <Com_Get_Byte+0xf8>)
 8014f56:	4613      	mov	r3, r2
 8014f58:	025b      	lsls	r3, r3, #9
 8014f5a:	4413      	add	r3, r2
 8014f5c:	009b      	lsls	r3, r3, #2
 8014f5e:	440b      	add	r3, r1
 8014f60:	3302      	adds	r3, #2
 8014f62:	881b      	ldrh	r3, [r3, #0]
 8014f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014f68:	d33f      	bcc.n	8014fea <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 8014f6a:	79fa      	ldrb	r2, [r7, #7]
 8014f6c:	4922      	ldr	r1, [pc, #136]	; (8014ff8 <Com_Get_Byte+0xf8>)
 8014f6e:	4613      	mov	r3, r2
 8014f70:	025b      	lsls	r3, r3, #9
 8014f72:	4413      	add	r3, r2
 8014f74:	009b      	lsls	r3, r3, #2
 8014f76:	440b      	add	r3, r1
 8014f78:	3302      	adds	r3, #2
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	801a      	strh	r2, [r3, #0]
 8014f7e:	e034      	b.n	8014fea <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8014f80:	79f9      	ldrb	r1, [r7, #7]
 8014f82:	79fa      	ldrb	r2, [r7, #7]
 8014f84:	481d      	ldr	r0, [pc, #116]	; (8014ffc <Com_Get_Byte+0xfc>)
 8014f86:	4613      	mov	r3, r2
 8014f88:	021b      	lsls	r3, r3, #8
 8014f8a:	4413      	add	r3, r2
 8014f8c:	009b      	lsls	r3, r3, #2
 8014f8e:	4403      	add	r3, r0
 8014f90:	3302      	adds	r3, #2
 8014f92:	8818      	ldrh	r0, [r3, #0]
 8014f94:	1c43      	adds	r3, r0, #1
 8014f96:	b29d      	uxth	r5, r3
 8014f98:	4c18      	ldr	r4, [pc, #96]	; (8014ffc <Com_Get_Byte+0xfc>)
 8014f9a:	4613      	mov	r3, r2
 8014f9c:	021b      	lsls	r3, r3, #8
 8014f9e:	4413      	add	r3, r2
 8014fa0:	009b      	lsls	r3, r3, #2
 8014fa2:	4423      	add	r3, r4
 8014fa4:	3302      	adds	r3, #2
 8014fa6:	462a      	mov	r2, r5
 8014fa8:	801a      	strh	r2, [r3, #0]
 8014faa:	4a14      	ldr	r2, [pc, #80]	; (8014ffc <Com_Get_Byte+0xfc>)
 8014fac:	460b      	mov	r3, r1
 8014fae:	021b      	lsls	r3, r3, #8
 8014fb0:	440b      	add	r3, r1
 8014fb2:	009b      	lsls	r3, r3, #2
 8014fb4:	4413      	add	r3, r2
 8014fb6:	4403      	add	r3, r0
 8014fb8:	3304      	adds	r3, #4
 8014fba:	781b      	ldrb	r3, [r3, #0]
 8014fbc:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8014fbe:	79fa      	ldrb	r2, [r7, #7]
 8014fc0:	490e      	ldr	r1, [pc, #56]	; (8014ffc <Com_Get_Byte+0xfc>)
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	021b      	lsls	r3, r3, #8
 8014fc6:	4413      	add	r3, r2
 8014fc8:	009b      	lsls	r3, r3, #2
 8014fca:	440b      	add	r3, r1
 8014fcc:	3302      	adds	r3, #2
 8014fce:	881b      	ldrh	r3, [r3, #0]
 8014fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014fd4:	d309      	bcc.n	8014fea <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 8014fd6:	79fa      	ldrb	r2, [r7, #7]
 8014fd8:	4908      	ldr	r1, [pc, #32]	; (8014ffc <Com_Get_Byte+0xfc>)
 8014fda:	4613      	mov	r3, r2
 8014fdc:	021b      	lsls	r3, r3, #8
 8014fde:	4413      	add	r3, r2
 8014fe0:	009b      	lsls	r3, r3, #2
 8014fe2:	440b      	add	r3, r1
 8014fe4:	3302      	adds	r3, #2
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 8014fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fec:	4618      	mov	r0, r3
 8014fee:	3714      	adds	r7, #20
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bcb0      	pop	{r4, r5, r7}
 8014ff4:	4770      	bx	lr
 8014ff6:	bf00      	nop
 8014ff8:	2000b018 	.word	0x2000b018
 8014ffc:	2000a008 	.word	0x2000a008

08015000 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b084      	sub	sp, #16
 8015004:	af00      	add	r7, sp, #0
 8015006:	4603      	mov	r3, r0
 8015008:	6039      	str	r1, [r7, #0]
 801500a:	71fb      	strb	r3, [r7, #7]
 801500c:	4613      	mov	r3, r2
 801500e:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8015010:	2300      	movs	r3, #0
 8015012:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8015014:	2300      	movs	r3, #0
 8015016:	81fb      	strh	r3, [r7, #14]
 8015018:	e03a      	b.n	8015090 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 801501a:	89fb      	ldrh	r3, [r7, #14]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d00a      	beq.n	8015036 <CommTransmitMessage+0x36>
 8015020:	89fb      	ldrh	r3, [r7, #14]
 8015022:	683a      	ldr	r2, [r7, #0]
 8015024:	4413      	add	r3, r2
 8015026:	781b      	ldrb	r3, [r3, #0]
 8015028:	2b24      	cmp	r3, #36	; 0x24
 801502a:	d104      	bne.n	8015036 <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 801502c:	79fb      	ldrb	r3, [r7, #7]
 801502e:	2105      	movs	r1, #5
 8015030:	4618      	mov	r0, r3
 8015032:	f000 f835 	bl	80150a0 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8015036:	89fb      	ldrh	r3, [r7, #14]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d00e      	beq.n	801505a <CommTransmitMessage+0x5a>
 801503c:	89fa      	ldrh	r2, [r7, #14]
 801503e:	88bb      	ldrh	r3, [r7, #4]
 8015040:	429a      	cmp	r2, r3
 8015042:	d20a      	bcs.n	801505a <CommTransmitMessage+0x5a>
 8015044:	89fb      	ldrh	r3, [r7, #14]
 8015046:	683a      	ldr	r2, [r7, #0]
 8015048:	4413      	add	r3, r2
 801504a:	781b      	ldrb	r3, [r3, #0]
 801504c:	2b05      	cmp	r3, #5
 801504e:	d104      	bne.n	801505a <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8015050:	79fb      	ldrb	r3, [r7, #7]
 8015052:	2105      	movs	r1, #5
 8015054:	4618      	mov	r0, r3
 8015056:	f000 f823 	bl	80150a0 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 801505a:	89fb      	ldrh	r3, [r7, #14]
 801505c:	683a      	ldr	r2, [r7, #0]
 801505e:	4413      	add	r3, r2
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	2b26      	cmp	r3, #38	; 0x26
 8015064:	d108      	bne.n	8015078 <CommTransmitMessage+0x78>
 8015066:	89fa      	ldrh	r2, [r7, #14]
 8015068:	88bb      	ldrh	r3, [r7, #4]
 801506a:	429a      	cmp	r2, r3
 801506c:	d004      	beq.n	8015078 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 801506e:	79fb      	ldrb	r3, [r7, #7]
 8015070:	2105      	movs	r1, #5
 8015072:	4618      	mov	r0, r3
 8015074:	f000 f814 	bl	80150a0 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8015078:	89fb      	ldrh	r3, [r7, #14]
 801507a:	683a      	ldr	r2, [r7, #0]
 801507c:	4413      	add	r3, r2
 801507e:	781a      	ldrb	r2, [r3, #0]
 8015080:	79fb      	ldrb	r3, [r7, #7]
 8015082:	4611      	mov	r1, r2
 8015084:	4618      	mov	r0, r3
 8015086:	f000 f80b 	bl	80150a0 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 801508a:	89fb      	ldrh	r3, [r7, #14]
 801508c:	3301      	adds	r3, #1
 801508e:	81fb      	strh	r3, [r7, #14]
 8015090:	89fa      	ldrh	r2, [r7, #14]
 8015092:	88bb      	ldrh	r3, [r7, #4]
 8015094:	429a      	cmp	r2, r3
 8015096:	d9c0      	bls.n	801501a <CommTransmitMessage+0x1a>
	}

	return;
 8015098:	bf00      	nop
}
 801509a:	3710      	adds	r7, #16
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}

080150a0 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b084      	sub	sp, #16
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	4603      	mov	r3, r0
 80150a8:	460a      	mov	r2, r1
 80150aa:	71fb      	strb	r3, [r7, #7]
 80150ac:	4613      	mov	r3, r2
 80150ae:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 80150b0:	1dbb      	adds	r3, r7, #6
 80150b2:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 80150b4:	79fb      	ldrb	r3, [r7, #7]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d107      	bne.n	80150ca <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 80150ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150be:	2201      	movs	r2, #1
 80150c0:	68f9      	ldr	r1, [r7, #12]
 80150c2:	4816      	ldr	r0, [pc, #88]	; (801511c <Com_SendByte+0x7c>)
 80150c4:	f006 f80c 	bl	801b0e0 <HAL_UART_Transmit>
 80150c8:	e01f      	b.n	801510a <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 80150ca:	79fb      	ldrb	r3, [r7, #7]
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d107      	bne.n	80150e0 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 80150d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150d4:	2201      	movs	r2, #1
 80150d6:	68f9      	ldr	r1, [r7, #12]
 80150d8:	4811      	ldr	r0, [pc, #68]	; (8015120 <Com_SendByte+0x80>)
 80150da:	f006 f801 	bl	801b0e0 <HAL_UART_Transmit>
 80150de:	e014      	b.n	801510a <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 80150e0:	79fb      	ldrb	r3, [r7, #7]
 80150e2:	2b02      	cmp	r3, #2
 80150e4:	d107      	bne.n	80150f6 <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 80150e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150ea:	2201      	movs	r2, #1
 80150ec:	68f9      	ldr	r1, [r7, #12]
 80150ee:	480d      	ldr	r0, [pc, #52]	; (8015124 <Com_SendByte+0x84>)
 80150f0:	f005 fff6 	bl	801b0e0 <HAL_UART_Transmit>
 80150f4:	e009      	b.n	801510a <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 80150f6:	79fb      	ldrb	r3, [r7, #7]
 80150f8:	2b03      	cmp	r3, #3
 80150fa:	d106      	bne.n	801510a <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 80150fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015100:	2201      	movs	r2, #1
 8015102:	68f9      	ldr	r1, [r7, #12]
 8015104:	4808      	ldr	r0, [pc, #32]	; (8015128 <Com_SendByte+0x88>)
 8015106:	f005 ffeb 	bl	801b0e0 <HAL_UART_Transmit>
	}

	ptr=NULL;
 801510a:	2300      	movs	r3, #0
 801510c:	60fb      	str	r3, [r7, #12]
	free(ptr);
 801510e:	68f8      	ldr	r0, [r7, #12]
 8015110:	f00d f900 	bl	8022314 <free>
}
 8015114:	bf00      	nop
 8015116:	3710      	adds	r7, #16
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}
 801511c:	2000bc44 	.word	0x2000bc44
 8015120:	2000bad4 	.word	0x2000bad4
 8015124:	2000bb8c 	.word	0x2000bb8c
 8015128:	2000ba1c 	.word	0x2000ba1c

0801512c <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015130:	2280      	movs	r2, #128	; 0x80
 8015132:	490a      	ldr	r1, [pc, #40]	; (801515c <Enable_UART_Interrupts+0x30>)
 8015134:	480a      	ldr	r0, [pc, #40]	; (8015160 <Enable_UART_Interrupts+0x34>)
 8015136:	f007 fae1 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801513a:	2280      	movs	r2, #128	; 0x80
 801513c:	4909      	ldr	r1, [pc, #36]	; (8015164 <Enable_UART_Interrupts+0x38>)
 801513e:	480a      	ldr	r0, [pc, #40]	; (8015168 <Enable_UART_Interrupts+0x3c>)
 8015140:	f007 fadc 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015144:	2280      	movs	r2, #128	; 0x80
 8015146:	4909      	ldr	r1, [pc, #36]	; (801516c <Enable_UART_Interrupts+0x40>)
 8015148:	4809      	ldr	r0, [pc, #36]	; (8015170 <Enable_UART_Interrupts+0x44>)
 801514a:	f007 fad7 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801514e:	2280      	movs	r2, #128	; 0x80
 8015150:	4908      	ldr	r1, [pc, #32]	; (8015174 <Enable_UART_Interrupts+0x48>)
 8015152:	4809      	ldr	r0, [pc, #36]	; (8015178 <Enable_UART_Interrupts+0x4c>)
 8015154:	f007 fad2 	bl	801c6fc <HAL_UARTEx_ReceiveToIdle_IT>
}
 8015158:	bf00      	nop
 801515a:	bd80      	pop	{r7, pc}
 801515c:	2000b81c 	.word	0x2000b81c
 8015160:	2000bc44 	.word	0x2000bc44
 8015164:	2000b89c 	.word	0x2000b89c
 8015168:	2000bad4 	.word	0x2000bad4
 801516c:	2000b91c 	.word	0x2000b91c
 8015170:	2000bb8c 	.word	0x2000bb8c
 8015174:	2000b99c 	.word	0x2000b99c
 8015178:	2000ba1c 	.word	0x2000ba1c

0801517c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801517c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80151b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015180:	480d      	ldr	r0, [pc, #52]	; (80151b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8015182:	490e      	ldr	r1, [pc, #56]	; (80151bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8015184:	4a0e      	ldr	r2, [pc, #56]	; (80151c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8015186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015188:	e002      	b.n	8015190 <LoopCopyDataInit>

0801518a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801518a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801518c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801518e:	3304      	adds	r3, #4

08015190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015194:	d3f9      	bcc.n	801518a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015196:	4a0b      	ldr	r2, [pc, #44]	; (80151c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8015198:	4c0b      	ldr	r4, [pc, #44]	; (80151c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 801519a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801519c:	e001      	b.n	80151a2 <LoopFillZerobss>

0801519e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801519e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80151a0:	3204      	adds	r2, #4

080151a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80151a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80151a4:	d3fb      	bcc.n	801519e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80151a6:	f7ff fb87 	bl	80148b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80151aa:	f00d f887 	bl	80222bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80151ae:	f7fe fa71 	bl	8013694 <main>
  bx  lr    
 80151b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80151b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80151b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80151bc:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 80151c0:	080291a4 	.word	0x080291a4
  ldr r2, =_sbss
 80151c4:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 80151c8:	200142a4 	.word	0x200142a4

080151cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80151cc:	e7fe      	b.n	80151cc <ADC_IRQHandler>

080151ce <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80151ce:	b480      	push	{r7}
 80151d0:	b083      	sub	sp, #12
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
 80151d6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d00b      	beq.n	80151f6 <DP83848_RegisterBusIO+0x28>
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	68db      	ldr	r3, [r3, #12]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d007      	beq.n	80151f6 <DP83848_RegisterBusIO+0x28>
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	689b      	ldr	r3, [r3, #8]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d003      	beq.n	80151f6 <DP83848_RegisterBusIO+0x28>
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	691b      	ldr	r3, [r3, #16]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d102      	bne.n	80151fc <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80151f6:	f04f 33ff 	mov.w	r3, #4294967295
 80151fa:	e014      	b.n	8015226 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	681a      	ldr	r2, [r3, #0]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	685a      	ldr	r2, [r3, #4]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	68da      	ldr	r2, [r3, #12]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	689a      	ldr	r2, [r3, #8]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	691a      	ldr	r2, [r3, #16]
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8015224:	2300      	movs	r3, #0
}
 8015226:	4618      	mov	r0, r3
 8015228:	370c      	adds	r7, #12
 801522a:	46bd      	mov	sp, r7
 801522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015230:	4770      	bx	lr

08015232 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8015232:	b580      	push	{r7, lr}
 8015234:	b086      	sub	sp, #24
 8015236:	af00      	add	r7, sp, #0
 8015238:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 801523a:	2300      	movs	r3, #0
 801523c:	60fb      	str	r3, [r7, #12]
 801523e:	2300      	movs	r3, #0
 8015240:	60bb      	str	r3, [r7, #8]
 8015242:	2300      	movs	r3, #0
 8015244:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8015246:	2300      	movs	r3, #0
 8015248:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d17c      	bne.n	801534c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	689b      	ldr	r3, [r3, #8]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d002      	beq.n	8015260 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	689b      	ldr	r3, [r3, #8]
 801525e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2220      	movs	r2, #32
 8015264:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8015266:	2300      	movs	r3, #0
 8015268:	617b      	str	r3, [r7, #20]
 801526a:	e01c      	b.n	80152a6 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	695b      	ldr	r3, [r3, #20]
 8015270:	f107 0208 	add.w	r2, r7, #8
 8015274:	2119      	movs	r1, #25
 8015276:	6978      	ldr	r0, [r7, #20]
 8015278:	4798      	blx	r3
 801527a:	4603      	mov	r3, r0
 801527c:	2b00      	cmp	r3, #0
 801527e:	da03      	bge.n	8015288 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8015280:	f06f 0304 	mvn.w	r3, #4
 8015284:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8015286:	e00b      	b.n	80152a0 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	f003 031f 	and.w	r3, r3, #31
 801528e:	697a      	ldr	r2, [r7, #20]
 8015290:	429a      	cmp	r2, r3
 8015292:	d105      	bne.n	80152a0 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	697a      	ldr	r2, [r7, #20]
 8015298:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 801529a:	2300      	movs	r3, #0
 801529c:	613b      	str	r3, [r7, #16]
         break;
 801529e:	e005      	b.n	80152ac <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	3301      	adds	r3, #1
 80152a4:	617b      	str	r3, [r7, #20]
 80152a6:	697b      	ldr	r3, [r7, #20]
 80152a8:	2b1f      	cmp	r3, #31
 80152aa:	d9df      	bls.n	801526c <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	2b1f      	cmp	r3, #31
 80152b2:	d902      	bls.n	80152ba <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80152b4:	f06f 0302 	mvn.w	r3, #2
 80152b8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80152ba:	693b      	ldr	r3, [r7, #16]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d145      	bne.n	801534c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	691b      	ldr	r3, [r3, #16]
 80152c4:	687a      	ldr	r2, [r7, #4]
 80152c6:	6810      	ldr	r0, [r2, #0]
 80152c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80152cc:	2100      	movs	r1, #0
 80152ce:	4798      	blx	r3
 80152d0:	4603      	mov	r3, r0
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	db37      	blt.n	8015346 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	695b      	ldr	r3, [r3, #20]
 80152da:	687a      	ldr	r2, [r7, #4]
 80152dc:	6810      	ldr	r0, [r2, #0]
 80152de:	f107 0208 	add.w	r2, r7, #8
 80152e2:	2100      	movs	r1, #0
 80152e4:	4798      	blx	r3
 80152e6:	4603      	mov	r3, r0
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	db28      	blt.n	801533e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	699b      	ldr	r3, [r3, #24]
 80152f0:	4798      	blx	r3
 80152f2:	4603      	mov	r3, r0
 80152f4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80152f6:	e01c      	b.n	8015332 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	699b      	ldr	r3, [r3, #24]
 80152fc:	4798      	blx	r3
 80152fe:	4603      	mov	r3, r0
 8015300:	461a      	mov	r2, r3
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	1ad3      	subs	r3, r2, r3
 8015306:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801530a:	d80e      	bhi.n	801532a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	695b      	ldr	r3, [r3, #20]
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	6810      	ldr	r0, [r2, #0]
 8015314:	f107 0208 	add.w	r2, r7, #8
 8015318:	2100      	movs	r1, #0
 801531a:	4798      	blx	r3
 801531c:	4603      	mov	r3, r0
 801531e:	2b00      	cmp	r3, #0
 8015320:	da07      	bge.n	8015332 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8015322:	f06f 0304 	mvn.w	r3, #4
 8015326:	613b      	str	r3, [r7, #16]
                 break;
 8015328:	e010      	b.n	801534c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 801532a:	f06f 0301 	mvn.w	r3, #1
 801532e:	613b      	str	r3, [r7, #16]
               break;
 8015330:	e00c      	b.n	801534c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8015332:	68bb      	ldr	r3, [r7, #8]
 8015334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015338:	2b00      	cmp	r3, #0
 801533a:	d1dd      	bne.n	80152f8 <DP83848_Init+0xc6>
 801533c:	e006      	b.n	801534c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 801533e:	f06f 0304 	mvn.w	r3, #4
 8015342:	613b      	str	r3, [r7, #16]
 8015344:	e002      	b.n	801534c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8015346:	f06f 0303 	mvn.w	r3, #3
 801534a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d112      	bne.n	8015378 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	699b      	ldr	r3, [r3, #24]
 8015356:	4798      	blx	r3
 8015358:	4603      	mov	r3, r0
 801535a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 801535c:	bf00      	nop
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	699b      	ldr	r3, [r3, #24]
 8015362:	4798      	blx	r3
 8015364:	4603      	mov	r3, r0
 8015366:	461a      	mov	r2, r3
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	1ad3      	subs	r3, r2, r3
 801536c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8015370:	d9f5      	bls.n	801535e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2201      	movs	r2, #1
 8015376:	605a      	str	r2, [r3, #4]
   }

   return status;
 8015378:	693b      	ldr	r3, [r7, #16]
 }
 801537a:	4618      	mov	r0, r3
 801537c:	3718      	adds	r7, #24
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}

08015382 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8015382:	b580      	push	{r7, lr}
 8015384:	b084      	sub	sp, #16
 8015386:	af00      	add	r7, sp, #0
 8015388:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 801538a:	2300      	movs	r3, #0
 801538c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	695b      	ldr	r3, [r3, #20]
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	6810      	ldr	r0, [r2, #0]
 8015396:	f107 020c 	add.w	r2, r7, #12
 801539a:	2101      	movs	r1, #1
 801539c:	4798      	blx	r3
 801539e:	4603      	mov	r3, r0
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	da02      	bge.n	80153aa <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80153a4:	f06f 0304 	mvn.w	r3, #4
 80153a8:	e06e      	b.n	8015488 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	695b      	ldr	r3, [r3, #20]
 80153ae:	687a      	ldr	r2, [r7, #4]
 80153b0:	6810      	ldr	r0, [r2, #0]
 80153b2:	f107 020c 	add.w	r2, r7, #12
 80153b6:	2101      	movs	r1, #1
 80153b8:	4798      	blx	r3
 80153ba:	4603      	mov	r3, r0
 80153bc:	2b00      	cmp	r3, #0
 80153be:	da02      	bge.n	80153c6 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80153c0:	f06f 0304 	mvn.w	r3, #4
 80153c4:	e060      	b.n	8015488 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	f003 0304 	and.w	r3, r3, #4
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d101      	bne.n	80153d4 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80153d0:	2301      	movs	r3, #1
 80153d2:	e059      	b.n	8015488 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	695b      	ldr	r3, [r3, #20]
 80153d8:	687a      	ldr	r2, [r7, #4]
 80153da:	6810      	ldr	r0, [r2, #0]
 80153dc:	f107 020c 	add.w	r2, r7, #12
 80153e0:	2100      	movs	r1, #0
 80153e2:	4798      	blx	r3
 80153e4:	4603      	mov	r3, r0
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	da02      	bge.n	80153f0 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80153ea:	f06f 0304 	mvn.w	r3, #4
 80153ee:	e04b      	b.n	8015488 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d11b      	bne.n	8015432 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015400:	2b00      	cmp	r3, #0
 8015402:	d006      	beq.n	8015412 <DP83848_GetLinkState+0x90>
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801540a:	2b00      	cmp	r3, #0
 801540c:	d001      	beq.n	8015412 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 801540e:	2302      	movs	r3, #2
 8015410:	e03a      	b.n	8015488 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015418:	2b00      	cmp	r3, #0
 801541a:	d001      	beq.n	8015420 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 801541c:	2303      	movs	r3, #3
 801541e:	e033      	b.n	8015488 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015426:	2b00      	cmp	r3, #0
 8015428:	d001      	beq.n	801542e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801542a:	2304      	movs	r3, #4
 801542c:	e02c      	b.n	8015488 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 801542e:	2305      	movs	r3, #5
 8015430:	e02a      	b.n	8015488 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	695b      	ldr	r3, [r3, #20]
 8015436:	687a      	ldr	r2, [r7, #4]
 8015438:	6810      	ldr	r0, [r2, #0]
 801543a:	f107 020c 	add.w	r2, r7, #12
 801543e:	2110      	movs	r1, #16
 8015440:	4798      	blx	r3
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	da02      	bge.n	801544e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8015448:	f06f 0304 	mvn.w	r3, #4
 801544c:	e01c      	b.n	8015488 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015454:	2b00      	cmp	r3, #0
 8015456:	d101      	bne.n	801545c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8015458:	2306      	movs	r3, #6
 801545a:	e015      	b.n	8015488 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f003 0306 	and.w	r3, r3, #6
 8015462:	2b04      	cmp	r3, #4
 8015464:	d101      	bne.n	801546a <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8015466:	2302      	movs	r3, #2
 8015468:	e00e      	b.n	8015488 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f003 0306 	and.w	r3, r3, #6
 8015470:	2b00      	cmp	r3, #0
 8015472:	d101      	bne.n	8015478 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8015474:	2303      	movs	r3, #3
 8015476:	e007      	b.n	8015488 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f003 0306 	and.w	r3, r3, #6
 801547e:	2b06      	cmp	r3, #6
 8015480:	d101      	bne.n	8015486 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8015482:	2304      	movs	r3, #4
 8015484:	e000      	b.n	8015488 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8015486:	2305      	movs	r3, #5
    }
  }
}
 8015488:	4618      	mov	r0, r3
 801548a:	3710      	adds	r7, #16
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}

08015490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8015494:	4b0b      	ldr	r3, [pc, #44]	; (80154c4 <HAL_Init+0x34>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	4a0a      	ldr	r2, [pc, #40]	; (80154c4 <HAL_Init+0x34>)
 801549a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801549e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80154a0:	4b08      	ldr	r3, [pc, #32]	; (80154c4 <HAL_Init+0x34>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	4a07      	ldr	r2, [pc, #28]	; (80154c4 <HAL_Init+0x34>)
 80154a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80154aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80154ac:	2003      	movs	r0, #3
 80154ae:	f001 f825 	bl	80164fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80154b2:	2007      	movs	r0, #7
 80154b4:	f000 f808 	bl	80154c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80154b8:	f7ff f856 	bl	8014568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80154bc:	2300      	movs	r3, #0
}
 80154be:	4618      	mov	r0, r3
 80154c0:	bd80      	pop	{r7, pc}
 80154c2:	bf00      	nop
 80154c4:	40023c00 	.word	0x40023c00

080154c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80154d0:	4b12      	ldr	r3, [pc, #72]	; (801551c <HAL_InitTick+0x54>)
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	4b12      	ldr	r3, [pc, #72]	; (8015520 <HAL_InitTick+0x58>)
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	4619      	mov	r1, r3
 80154da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80154de:	fbb3 f3f1 	udiv	r3, r3, r1
 80154e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80154e6:	4618      	mov	r0, r3
 80154e8:	f001 f83d 	bl	8016566 <HAL_SYSTICK_Config>
 80154ec:	4603      	mov	r3, r0
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d001      	beq.n	80154f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80154f2:	2301      	movs	r3, #1
 80154f4:	e00e      	b.n	8015514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2b0f      	cmp	r3, #15
 80154fa:	d80a      	bhi.n	8015512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80154fc:	2200      	movs	r2, #0
 80154fe:	6879      	ldr	r1, [r7, #4]
 8015500:	f04f 30ff 	mov.w	r0, #4294967295
 8015504:	f001 f805 	bl	8016512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015508:	4a06      	ldr	r2, [pc, #24]	; (8015524 <HAL_InitTick+0x5c>)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801550e:	2300      	movs	r3, #0
 8015510:	e000      	b.n	8015514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8015512:	2301      	movs	r3, #1
}
 8015514:	4618      	mov	r0, r3
 8015516:	3708      	adds	r7, #8
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	2000011c 	.word	0x2000011c
 8015520:	20000124 	.word	0x20000124
 8015524:	20000120 	.word	0x20000120

08015528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015528:	b480      	push	{r7}
 801552a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801552c:	4b06      	ldr	r3, [pc, #24]	; (8015548 <HAL_IncTick+0x20>)
 801552e:	781b      	ldrb	r3, [r3, #0]
 8015530:	461a      	mov	r2, r3
 8015532:	4b06      	ldr	r3, [pc, #24]	; (801554c <HAL_IncTick+0x24>)
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	4413      	add	r3, r2
 8015538:	4a04      	ldr	r2, [pc, #16]	; (801554c <HAL_IncTick+0x24>)
 801553a:	6013      	str	r3, [r2, #0]
}
 801553c:	bf00      	nop
 801553e:	46bd      	mov	sp, r7
 8015540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015544:	4770      	bx	lr
 8015546:	bf00      	nop
 8015548:	20000124 	.word	0x20000124
 801554c:	2000bcfc 	.word	0x2000bcfc

08015550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015550:	b480      	push	{r7}
 8015552:	af00      	add	r7, sp, #0
  return uwTick;
 8015554:	4b03      	ldr	r3, [pc, #12]	; (8015564 <HAL_GetTick+0x14>)
 8015556:	681b      	ldr	r3, [r3, #0]
}
 8015558:	4618      	mov	r0, r3
 801555a:	46bd      	mov	sp, r7
 801555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015560:	4770      	bx	lr
 8015562:	bf00      	nop
 8015564:	2000bcfc 	.word	0x2000bcfc

08015568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b084      	sub	sp, #16
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015570:	f7ff ffee 	bl	8015550 <HAL_GetTick>
 8015574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015580:	d005      	beq.n	801558e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015582:	4b0a      	ldr	r3, [pc, #40]	; (80155ac <HAL_Delay+0x44>)
 8015584:	781b      	ldrb	r3, [r3, #0]
 8015586:	461a      	mov	r2, r3
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	4413      	add	r3, r2
 801558c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801558e:	bf00      	nop
 8015590:	f7ff ffde 	bl	8015550 <HAL_GetTick>
 8015594:	4602      	mov	r2, r0
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	1ad3      	subs	r3, r2, r3
 801559a:	68fa      	ldr	r2, [r7, #12]
 801559c:	429a      	cmp	r2, r3
 801559e:	d8f7      	bhi.n	8015590 <HAL_Delay+0x28>
  {
  }
}
 80155a0:	bf00      	nop
 80155a2:	bf00      	nop
 80155a4:	3710      	adds	r7, #16
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}
 80155aa:	bf00      	nop
 80155ac:	20000124 	.word	0x20000124

080155b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b084      	sub	sp, #16
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d101      	bne.n	80155c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80155be:	2301      	movs	r3, #1
 80155c0:	e11c      	b.n	80157fc <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d131      	bne.n	8015632 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	4a8c      	ldr	r2, [pc, #560]	; (8015804 <HAL_CAN_Init+0x254>)
 80155d2:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	4a8c      	ldr	r2, [pc, #560]	; (8015808 <HAL_CAN_Init+0x258>)
 80155d8:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	4a8b      	ldr	r2, [pc, #556]	; (801580c <HAL_CAN_Init+0x25c>)
 80155de:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	4a8b      	ldr	r2, [pc, #556]	; (8015810 <HAL_CAN_Init+0x260>)
 80155e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	4a8a      	ldr	r2, [pc, #552]	; (8015814 <HAL_CAN_Init+0x264>)
 80155ea:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	4a8a      	ldr	r2, [pc, #552]	; (8015818 <HAL_CAN_Init+0x268>)
 80155f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	4a89      	ldr	r2, [pc, #548]	; (801581c <HAL_CAN_Init+0x26c>)
 80155f6:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	4a89      	ldr	r2, [pc, #548]	; (8015820 <HAL_CAN_Init+0x270>)
 80155fc:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	4a88      	ldr	r2, [pc, #544]	; (8015824 <HAL_CAN_Init+0x274>)
 8015602:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	4a88      	ldr	r2, [pc, #544]	; (8015828 <HAL_CAN_Init+0x278>)
 8015608:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	4a87      	ldr	r2, [pc, #540]	; (801582c <HAL_CAN_Init+0x27c>)
 801560e:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	4a87      	ldr	r2, [pc, #540]	; (8015830 <HAL_CAN_Init+0x280>)
 8015614:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	4a86      	ldr	r2, [pc, #536]	; (8015834 <HAL_CAN_Init+0x284>)
 801561a:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015620:	2b00      	cmp	r3, #0
 8015622:	d102      	bne.n	801562a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	4a84      	ldr	r2, [pc, #528]	; (8015838 <HAL_CAN_Init+0x288>)
 8015628:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	681a      	ldr	r2, [r3, #0]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	f042 0201 	orr.w	r2, r2, #1
 8015640:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015642:	f7ff ff85 	bl	8015550 <HAL_GetTick>
 8015646:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015648:	e012      	b.n	8015670 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801564a:	f7ff ff81 	bl	8015550 <HAL_GetTick>
 801564e:	4602      	mov	r2, r0
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	1ad3      	subs	r3, r2, r3
 8015654:	2b0a      	cmp	r3, #10
 8015656:	d90b      	bls.n	8015670 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2205      	movs	r2, #5
 8015668:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801566c:	2301      	movs	r3, #1
 801566e:	e0c5      	b.n	80157fc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	685b      	ldr	r3, [r3, #4]
 8015676:	f003 0301 	and.w	r3, r3, #1
 801567a:	2b00      	cmp	r3, #0
 801567c:	d0e5      	beq.n	801564a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	f022 0202 	bic.w	r2, r2, #2
 801568c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801568e:	f7ff ff5f 	bl	8015550 <HAL_GetTick>
 8015692:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015694:	e012      	b.n	80156bc <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015696:	f7ff ff5b 	bl	8015550 <HAL_GetTick>
 801569a:	4602      	mov	r2, r0
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	1ad3      	subs	r3, r2, r3
 80156a0:	2b0a      	cmp	r3, #10
 80156a2:	d90b      	bls.n	80156bc <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2205      	movs	r2, #5
 80156b4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80156b8:	2301      	movs	r3, #1
 80156ba:	e09f      	b.n	80157fc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	f003 0302 	and.w	r3, r3, #2
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d1e5      	bne.n	8015696 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	7e1b      	ldrb	r3, [r3, #24]
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d108      	bne.n	80156e4 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	681a      	ldr	r2, [r3, #0]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80156e0:	601a      	str	r2, [r3, #0]
 80156e2:	e007      	b.n	80156f4 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	681a      	ldr	r2, [r3, #0]
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80156f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	7e5b      	ldrb	r3, [r3, #25]
 80156f8:	2b01      	cmp	r3, #1
 80156fa:	d108      	bne.n	801570e <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801570a:	601a      	str	r2, [r3, #0]
 801570c:	e007      	b.n	801571e <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	681a      	ldr	r2, [r3, #0]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801571c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	7e9b      	ldrb	r3, [r3, #26]
 8015722:	2b01      	cmp	r3, #1
 8015724:	d108      	bne.n	8015738 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	681a      	ldr	r2, [r3, #0]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	f042 0220 	orr.w	r2, r2, #32
 8015734:	601a      	str	r2, [r3, #0]
 8015736:	e007      	b.n	8015748 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	681a      	ldr	r2, [r3, #0]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	f022 0220 	bic.w	r2, r2, #32
 8015746:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	7edb      	ldrb	r3, [r3, #27]
 801574c:	2b01      	cmp	r3, #1
 801574e:	d108      	bne.n	8015762 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	681a      	ldr	r2, [r3, #0]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	f022 0210 	bic.w	r2, r2, #16
 801575e:	601a      	str	r2, [r3, #0]
 8015760:	e007      	b.n	8015772 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	681a      	ldr	r2, [r3, #0]
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	f042 0210 	orr.w	r2, r2, #16
 8015770:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	7f1b      	ldrb	r3, [r3, #28]
 8015776:	2b01      	cmp	r3, #1
 8015778:	d108      	bne.n	801578c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	681a      	ldr	r2, [r3, #0]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	f042 0208 	orr.w	r2, r2, #8
 8015788:	601a      	str	r2, [r3, #0]
 801578a:	e007      	b.n	801579c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	681a      	ldr	r2, [r3, #0]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	f022 0208 	bic.w	r2, r2, #8
 801579a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	7f5b      	ldrb	r3, [r3, #29]
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d108      	bne.n	80157b6 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	f042 0204 	orr.w	r2, r2, #4
 80157b2:	601a      	str	r2, [r3, #0]
 80157b4:	e007      	b.n	80157c6 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	681a      	ldr	r2, [r3, #0]
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f022 0204 	bic.w	r2, r2, #4
 80157c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	689a      	ldr	r2, [r3, #8]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	68db      	ldr	r3, [r3, #12]
 80157ce:	431a      	orrs	r2, r3
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	691b      	ldr	r3, [r3, #16]
 80157d4:	431a      	orrs	r2, r3
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	695b      	ldr	r3, [r3, #20]
 80157da:	ea42 0103 	orr.w	r1, r2, r3
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	1e5a      	subs	r2, r3, #1
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	430a      	orrs	r2, r1
 80157ea:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2200      	movs	r2, #0
 80157f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2201      	movs	r2, #1
 80157f6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80157fa:	2300      	movs	r3, #0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3710      	adds	r7, #16
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}
 8015804:	0800fad5 	.word	0x0800fad5
 8015808:	080162f7 	.word	0x080162f7
 801580c:	0800fbf1 	.word	0x0800fbf1
 8015810:	0801630b 	.word	0x0801630b
 8015814:	0801627f 	.word	0x0801627f
 8015818:	08016293 	.word	0x08016293
 801581c:	080162a7 	.word	0x080162a7
 8015820:	080162bb 	.word	0x080162bb
 8015824:	080162cf 	.word	0x080162cf
 8015828:	080162e3 	.word	0x080162e3
 801582c:	0801631f 	.word	0x0801631f
 8015830:	08016333 	.word	0x08016333
 8015834:	08016347 	.word	0x08016347
 8015838:	0800f341 	.word	0x0800f341

0801583c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 801583c:	b480      	push	{r7}
 801583e:	b087      	sub	sp, #28
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
 8015844:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015852:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8015854:	7cfb      	ldrb	r3, [r7, #19]
 8015856:	2b01      	cmp	r3, #1
 8015858:	d003      	beq.n	8015862 <HAL_CAN_ConfigFilter+0x26>
 801585a:	7cfb      	ldrb	r3, [r7, #19]
 801585c:	2b02      	cmp	r3, #2
 801585e:	f040 80c7 	bne.w	80159f0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	4a69      	ldr	r2, [pc, #420]	; (8015a0c <HAL_CAN_ConfigFilter+0x1d0>)
 8015868:	4293      	cmp	r3, r2
 801586a:	d001      	beq.n	8015870 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 801586c:	4b68      	ldr	r3, [pc, #416]	; (8015a10 <HAL_CAN_ConfigFilter+0x1d4>)
 801586e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015876:	f043 0201 	orr.w	r2, r3, #1
 801587a:	697b      	ldr	r3, [r7, #20]
 801587c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	4a63      	ldr	r2, [pc, #396]	; (8015a10 <HAL_CAN_ConfigFilter+0x1d4>)
 8015884:	4293      	cmp	r3, r2
 8015886:	d111      	bne.n	80158ac <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8015888:	697b      	ldr	r3, [r7, #20]
 801588a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801588e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a2:	021b      	lsls	r3, r3, #8
 80158a4:	431a      	orrs	r2, r3
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	695b      	ldr	r3, [r3, #20]
 80158b0:	f003 031f 	and.w	r3, r3, #31
 80158b4:	2201      	movs	r2, #1
 80158b6:	fa02 f303 	lsl.w	r3, r2, r3
 80158ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	43db      	mvns	r3, r3
 80158c6:	401a      	ands	r2, r3
 80158c8:	697b      	ldr	r3, [r7, #20]
 80158ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80158ce:	683b      	ldr	r3, [r7, #0]
 80158d0:	69db      	ldr	r3, [r3, #28]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d123      	bne.n	801591e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	43db      	mvns	r3, r3
 80158e0:	401a      	ands	r2, r3
 80158e2:	697b      	ldr	r3, [r7, #20]
 80158e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	68db      	ldr	r3, [r3, #12]
 80158ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	685b      	ldr	r3, [r3, #4]
 80158f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80158f4:	683a      	ldr	r2, [r7, #0]
 80158f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80158f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80158fa:	697b      	ldr	r3, [r7, #20]
 80158fc:	3248      	adds	r2, #72	; 0x48
 80158fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015912:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015914:	6979      	ldr	r1, [r7, #20]
 8015916:	3348      	adds	r3, #72	; 0x48
 8015918:	00db      	lsls	r3, r3, #3
 801591a:	440b      	add	r3, r1
 801591c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	69db      	ldr	r3, [r3, #28]
 8015922:	2b01      	cmp	r3, #1
 8015924:	d122      	bne.n	801596c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	431a      	orrs	r2, r3
 8015930:	697b      	ldr	r3, [r7, #20]
 8015932:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015942:	683a      	ldr	r2, [r7, #0]
 8015944:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015946:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	3248      	adds	r2, #72	; 0x48
 801594c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015950:	683b      	ldr	r3, [r7, #0]
 8015952:	689b      	ldr	r3, [r3, #8]
 8015954:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015960:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015962:	6979      	ldr	r1, [r7, #20]
 8015964:	3348      	adds	r3, #72	; 0x48
 8015966:	00db      	lsls	r3, r3, #3
 8015968:	440b      	add	r3, r1
 801596a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	699b      	ldr	r3, [r3, #24]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d109      	bne.n	8015988 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8015974:	697b      	ldr	r3, [r7, #20]
 8015976:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	43db      	mvns	r3, r3
 801597e:	401a      	ands	r2, r3
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8015986:	e007      	b.n	8015998 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	431a      	orrs	r2, r3
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8015998:	683b      	ldr	r3, [r7, #0]
 801599a:	691b      	ldr	r3, [r3, #16]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d109      	bne.n	80159b4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	43db      	mvns	r3, r3
 80159aa:	401a      	ands	r2, r3
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80159b2:	e007      	b.n	80159c4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80159b4:	697b      	ldr	r3, [r7, #20]
 80159b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	431a      	orrs	r2, r3
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	6a1b      	ldr	r3, [r3, #32]
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	d107      	bne.n	80159dc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	431a      	orrs	r2, r3
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80159e2:	f023 0201 	bic.w	r2, r3, #1
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80159ec:	2300      	movs	r3, #0
 80159ee:	e006      	b.n	80159fe <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80159fc:	2301      	movs	r3, #1
  }
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	371c      	adds	r7, #28
 8015a02:	46bd      	mov	sp, r7
 8015a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a08:	4770      	bx	lr
 8015a0a:	bf00      	nop
 8015a0c:	40003400 	.word	0x40003400
 8015a10:	40006400 	.word	0x40006400

08015a14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b084      	sub	sp, #16
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a22:	b2db      	uxtb	r3, r3
 8015a24:	2b01      	cmp	r3, #1
 8015a26:	d12e      	bne.n	8015a86 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2202      	movs	r2, #2
 8015a2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	f022 0201 	bic.w	r2, r2, #1
 8015a3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015a40:	f7ff fd86 	bl	8015550 <HAL_GetTick>
 8015a44:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015a46:	e012      	b.n	8015a6e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015a48:	f7ff fd82 	bl	8015550 <HAL_GetTick>
 8015a4c:	4602      	mov	r2, r0
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	1ad3      	subs	r3, r2, r3
 8015a52:	2b0a      	cmp	r3, #10
 8015a54:	d90b      	bls.n	8015a6e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2205      	movs	r2, #5
 8015a66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	e012      	b.n	8015a94 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	685b      	ldr	r3, [r3, #4]
 8015a74:	f003 0301 	and.w	r3, r3, #1
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d1e5      	bne.n	8015a48 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2200      	movs	r2, #0
 8015a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8015a82:	2300      	movs	r3, #0
 8015a84:	e006      	b.n	8015a94 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015a92:	2301      	movs	r3, #1
  }
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3710      	adds	r7, #16
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b089      	sub	sp, #36	; 0x24
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	607a      	str	r2, [r7, #4]
 8015aa8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ab0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	689b      	ldr	r3, [r3, #8]
 8015ab8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8015aba:	7ffb      	ldrb	r3, [r7, #31]
 8015abc:	2b01      	cmp	r3, #1
 8015abe:	d003      	beq.n	8015ac8 <HAL_CAN_AddTxMessage+0x2c>
 8015ac0:	7ffb      	ldrb	r3, [r7, #31]
 8015ac2:	2b02      	cmp	r3, #2
 8015ac4:	f040 80ad 	bne.w	8015c22 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d10a      	bne.n	8015ae8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015ad2:	69bb      	ldr	r3, [r7, #24]
 8015ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d105      	bne.n	8015ae8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8015adc:	69bb      	ldr	r3, [r7, #24]
 8015ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	f000 8095 	beq.w	8015c12 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8015ae8:	69bb      	ldr	r3, [r7, #24]
 8015aea:	0e1b      	lsrs	r3, r3, #24
 8015aec:	f003 0303 	and.w	r3, r3, #3
 8015af0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8015af2:	2201      	movs	r2, #1
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	409a      	lsls	r2, r3
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	689b      	ldr	r3, [r3, #8]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d10d      	bne.n	8015b20 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015b0e:	68f9      	ldr	r1, [r7, #12]
 8015b10:	6809      	ldr	r1, [r1, #0]
 8015b12:	431a      	orrs	r2, r3
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	3318      	adds	r3, #24
 8015b18:	011b      	lsls	r3, r3, #4
 8015b1a:	440b      	add	r3, r1
 8015b1c:	601a      	str	r2, [r3, #0]
 8015b1e:	e00f      	b.n	8015b40 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	685b      	ldr	r3, [r3, #4]
 8015b24:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015b2a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8015b2c:	68bb      	ldr	r3, [r7, #8]
 8015b2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015b30:	68f9      	ldr	r1, [r7, #12]
 8015b32:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8015b34:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	3318      	adds	r3, #24
 8015b3a:	011b      	lsls	r3, r3, #4
 8015b3c:	440b      	add	r3, r1
 8015b3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	6819      	ldr	r1, [r3, #0]
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	691a      	ldr	r2, [r3, #16]
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	3318      	adds	r3, #24
 8015b4c:	011b      	lsls	r3, r3, #4
 8015b4e:	440b      	add	r3, r1
 8015b50:	3304      	adds	r3, #4
 8015b52:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	7d1b      	ldrb	r3, [r3, #20]
 8015b58:	2b01      	cmp	r3, #1
 8015b5a:	d111      	bne.n	8015b80 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	3318      	adds	r3, #24
 8015b64:	011b      	lsls	r3, r3, #4
 8015b66:	4413      	add	r3, r2
 8015b68:	3304      	adds	r3, #4
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	68fa      	ldr	r2, [r7, #12]
 8015b6e:	6811      	ldr	r1, [r2, #0]
 8015b70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	3318      	adds	r3, #24
 8015b78:	011b      	lsls	r3, r3, #4
 8015b7a:	440b      	add	r3, r1
 8015b7c:	3304      	adds	r3, #4
 8015b7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	3307      	adds	r3, #7
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	061a      	lsls	r2, r3, #24
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	3306      	adds	r3, #6
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	041b      	lsls	r3, r3, #16
 8015b90:	431a      	orrs	r2, r3
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	3305      	adds	r3, #5
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	021b      	lsls	r3, r3, #8
 8015b9a:	4313      	orrs	r3, r2
 8015b9c:	687a      	ldr	r2, [r7, #4]
 8015b9e:	3204      	adds	r2, #4
 8015ba0:	7812      	ldrb	r2, [r2, #0]
 8015ba2:	4610      	mov	r0, r2
 8015ba4:	68fa      	ldr	r2, [r7, #12]
 8015ba6:	6811      	ldr	r1, [r2, #0]
 8015ba8:	ea43 0200 	orr.w	r2, r3, r0
 8015bac:	697b      	ldr	r3, [r7, #20]
 8015bae:	011b      	lsls	r3, r3, #4
 8015bb0:	440b      	add	r3, r1
 8015bb2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015bb6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	3303      	adds	r3, #3
 8015bbc:	781b      	ldrb	r3, [r3, #0]
 8015bbe:	061a      	lsls	r2, r3, #24
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	3302      	adds	r3, #2
 8015bc4:	781b      	ldrb	r3, [r3, #0]
 8015bc6:	041b      	lsls	r3, r3, #16
 8015bc8:	431a      	orrs	r2, r3
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	3301      	adds	r3, #1
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	021b      	lsls	r3, r3, #8
 8015bd2:	4313      	orrs	r3, r2
 8015bd4:	687a      	ldr	r2, [r7, #4]
 8015bd6:	7812      	ldrb	r2, [r2, #0]
 8015bd8:	4610      	mov	r0, r2
 8015bda:	68fa      	ldr	r2, [r7, #12]
 8015bdc:	6811      	ldr	r1, [r2, #0]
 8015bde:	ea43 0200 	orr.w	r2, r3, r0
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	011b      	lsls	r3, r3, #4
 8015be6:	440b      	add	r3, r1
 8015be8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8015bec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	3318      	adds	r3, #24
 8015bf6:	011b      	lsls	r3, r3, #4
 8015bf8:	4413      	add	r3, r2
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	68fa      	ldr	r2, [r7, #12]
 8015bfe:	6811      	ldr	r1, [r2, #0]
 8015c00:	f043 0201 	orr.w	r2, r3, #1
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	3318      	adds	r3, #24
 8015c08:	011b      	lsls	r3, r3, #4
 8015c0a:	440b      	add	r3, r1
 8015c0c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	e00e      	b.n	8015c30 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	e006      	b.n	8015c30 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015c2e:	2301      	movs	r3, #1
  }
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	3724      	adds	r7, #36	; 0x24
 8015c34:	46bd      	mov	sp, r7
 8015c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3a:	4770      	bx	lr

08015c3c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b085      	sub	sp, #20
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8015c46:	2300      	movs	r3, #0
 8015c48:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c50:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8015c52:	7afb      	ldrb	r3, [r7, #11]
 8015c54:	2b01      	cmp	r3, #1
 8015c56:	d002      	beq.n	8015c5e <HAL_CAN_IsTxMessagePending+0x22>
 8015c58:	7afb      	ldrb	r3, [r7, #11]
 8015c5a:	2b02      	cmp	r3, #2
 8015c5c:	d10b      	bne.n	8015c76 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	689a      	ldr	r2, [r3, #8]
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	069b      	lsls	r3, r3, #26
 8015c68:	401a      	ands	r2, r3
 8015c6a:	683b      	ldr	r3, [r7, #0]
 8015c6c:	069b      	lsls	r3, r3, #26
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d001      	beq.n	8015c76 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8015c72:	2301      	movs	r3, #1
 8015c74:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8015c76:	68fb      	ldr	r3, [r7, #12]
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3714      	adds	r7, #20
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c82:	4770      	bx	lr

08015c84 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8015c84:	b480      	push	{r7}
 8015c86:	b087      	sub	sp, #28
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	607a      	str	r2, [r7, #4]
 8015c90:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c98:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8015c9a:	7dfb      	ldrb	r3, [r7, #23]
 8015c9c:	2b01      	cmp	r3, #1
 8015c9e:	d003      	beq.n	8015ca8 <HAL_CAN_GetRxMessage+0x24>
 8015ca0:	7dfb      	ldrb	r3, [r7, #23]
 8015ca2:	2b02      	cmp	r3, #2
 8015ca4:	f040 80f3 	bne.w	8015e8e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8015ca8:	68bb      	ldr	r3, [r7, #8]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d10e      	bne.n	8015ccc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	68db      	ldr	r3, [r3, #12]
 8015cb4:	f003 0303 	and.w	r3, r3, #3
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d116      	bne.n	8015cea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8015cc8:	2301      	movs	r3, #1
 8015cca:	e0e7      	b.n	8015e9c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	691b      	ldr	r3, [r3, #16]
 8015cd2:	f003 0303 	and.w	r3, r3, #3
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d107      	bne.n	8015cea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8015ce6:	2301      	movs	r3, #1
 8015ce8:	e0d8      	b.n	8015e9c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	331b      	adds	r3, #27
 8015cf2:	011b      	lsls	r3, r3, #4
 8015cf4:	4413      	add	r3, r2
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	f003 0204 	and.w	r2, r3, #4
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	689b      	ldr	r3, [r3, #8]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d10c      	bne.n	8015d22 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681a      	ldr	r2, [r3, #0]
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	331b      	adds	r3, #27
 8015d10:	011b      	lsls	r3, r3, #4
 8015d12:	4413      	add	r3, r2
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	0d5b      	lsrs	r3, r3, #21
 8015d18:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	601a      	str	r2, [r3, #0]
 8015d20:	e00b      	b.n	8015d3a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	681a      	ldr	r2, [r3, #0]
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	331b      	adds	r3, #27
 8015d2a:	011b      	lsls	r3, r3, #4
 8015d2c:	4413      	add	r3, r2
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	08db      	lsrs	r3, r3, #3
 8015d32:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	681a      	ldr	r2, [r3, #0]
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	331b      	adds	r3, #27
 8015d42:	011b      	lsls	r3, r3, #4
 8015d44:	4413      	add	r3, r2
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	f003 0202 	and.w	r2, r3, #2
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	681a      	ldr	r2, [r3, #0]
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	331b      	adds	r3, #27
 8015d58:	011b      	lsls	r3, r3, #4
 8015d5a:	4413      	add	r3, r2
 8015d5c:	3304      	adds	r3, #4
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	f003 020f 	and.w	r2, r3, #15
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	681a      	ldr	r2, [r3, #0]
 8015d6c:	68bb      	ldr	r3, [r7, #8]
 8015d6e:	331b      	adds	r3, #27
 8015d70:	011b      	lsls	r3, r3, #4
 8015d72:	4413      	add	r3, r2
 8015d74:	3304      	adds	r3, #4
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	0a1b      	lsrs	r3, r3, #8
 8015d7a:	b2da      	uxtb	r2, r3
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	681a      	ldr	r2, [r3, #0]
 8015d84:	68bb      	ldr	r3, [r7, #8]
 8015d86:	331b      	adds	r3, #27
 8015d88:	011b      	lsls	r3, r3, #4
 8015d8a:	4413      	add	r3, r2
 8015d8c:	3304      	adds	r3, #4
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	0c1b      	lsrs	r3, r3, #16
 8015d92:	b29a      	uxth	r2, r3
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	68bb      	ldr	r3, [r7, #8]
 8015d9e:	011b      	lsls	r3, r3, #4
 8015da0:	4413      	add	r3, r2
 8015da2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	b2da      	uxtb	r2, r3
 8015daa:	683b      	ldr	r3, [r7, #0]
 8015dac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	681a      	ldr	r2, [r3, #0]
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	011b      	lsls	r3, r3, #4
 8015db6:	4413      	add	r3, r2
 8015db8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	0a1a      	lsrs	r2, r3, #8
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	b2d2      	uxtb	r2, r2
 8015dc6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	681a      	ldr	r2, [r3, #0]
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	011b      	lsls	r3, r3, #4
 8015dd0:	4413      	add	r3, r2
 8015dd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	0c1a      	lsrs	r2, r3, #16
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	3302      	adds	r3, #2
 8015dde:	b2d2      	uxtb	r2, r2
 8015de0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	681a      	ldr	r2, [r3, #0]
 8015de6:	68bb      	ldr	r3, [r7, #8]
 8015de8:	011b      	lsls	r3, r3, #4
 8015dea:	4413      	add	r3, r2
 8015dec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	0e1a      	lsrs	r2, r3, #24
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	3303      	adds	r3, #3
 8015df8:	b2d2      	uxtb	r2, r2
 8015dfa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	681a      	ldr	r2, [r3, #0]
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	011b      	lsls	r3, r3, #4
 8015e04:	4413      	add	r3, r2
 8015e06:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	3304      	adds	r3, #4
 8015e10:	b2d2      	uxtb	r2, r2
 8015e12:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	681a      	ldr	r2, [r3, #0]
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	011b      	lsls	r3, r3, #4
 8015e1c:	4413      	add	r3, r2
 8015e1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	0a1a      	lsrs	r2, r3, #8
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	3305      	adds	r3, #5
 8015e2a:	b2d2      	uxtb	r2, r2
 8015e2c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	681a      	ldr	r2, [r3, #0]
 8015e32:	68bb      	ldr	r3, [r7, #8]
 8015e34:	011b      	lsls	r3, r3, #4
 8015e36:	4413      	add	r3, r2
 8015e38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	0c1a      	lsrs	r2, r3, #16
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	3306      	adds	r3, #6
 8015e44:	b2d2      	uxtb	r2, r2
 8015e46:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	681a      	ldr	r2, [r3, #0]
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	011b      	lsls	r3, r3, #4
 8015e50:	4413      	add	r3, r2
 8015e52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	0e1a      	lsrs	r2, r3, #24
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	3307      	adds	r3, #7
 8015e5e:	b2d2      	uxtb	r2, r2
 8015e60:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8015e62:	68bb      	ldr	r3, [r7, #8]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d108      	bne.n	8015e7a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	68da      	ldr	r2, [r3, #12]
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f042 0220 	orr.w	r2, r2, #32
 8015e76:	60da      	str	r2, [r3, #12]
 8015e78:	e007      	b.n	8015e8a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	691a      	ldr	r2, [r3, #16]
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	f042 0220 	orr.w	r2, r2, #32
 8015e88:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	e006      	b.n	8015e9c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015e9a:	2301      	movs	r3, #1
  }
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	371c      	adds	r7, #28
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea6:	4770      	bx	lr

08015ea8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	b085      	sub	sp, #20
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
 8015eb0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015eb8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8015eba:	7bfb      	ldrb	r3, [r7, #15]
 8015ebc:	2b01      	cmp	r3, #1
 8015ebe:	d002      	beq.n	8015ec6 <HAL_CAN_ActivateNotification+0x1e>
 8015ec0:	7bfb      	ldrb	r3, [r7, #15]
 8015ec2:	2b02      	cmp	r3, #2
 8015ec4:	d109      	bne.n	8015eda <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	6959      	ldr	r1, [r3, #20]
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	683a      	ldr	r2, [r7, #0]
 8015ed2:	430a      	orrs	r2, r1
 8015ed4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	e006      	b.n	8015ee8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ede:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015ee6:	2301      	movs	r3, #1
  }
}
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3714      	adds	r7, #20
 8015eec:	46bd      	mov	sp, r7
 8015eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef2:	4770      	bx	lr

08015ef4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b08a      	sub	sp, #40	; 0x28
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8015efc:	2300      	movs	r3, #0
 8015efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	695b      	ldr	r3, [r3, #20]
 8015f06:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	685b      	ldr	r3, [r3, #4]
 8015f0e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	689b      	ldr	r3, [r3, #8]
 8015f16:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	68db      	ldr	r3, [r3, #12]
 8015f1e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	691b      	ldr	r3, [r3, #16]
 8015f26:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	699b      	ldr	r3, [r3, #24]
 8015f2e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8015f30:	6a3b      	ldr	r3, [r7, #32]
 8015f32:	f003 0301 	and.w	r3, r3, #1
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	f000 8083 	beq.w	8016042 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8015f3c:	69bb      	ldr	r3, [r7, #24]
 8015f3e:	f003 0301 	and.w	r3, r3, #1
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d025      	beq.n	8015f92 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	2201      	movs	r2, #1
 8015f4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8015f4e:	69bb      	ldr	r3, [r7, #24]
 8015f50:	f003 0302 	and.w	r3, r3, #2
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d004      	beq.n	8015f62 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f5c:	6878      	ldr	r0, [r7, #4]
 8015f5e:	4798      	blx	r3
 8015f60:	e017      	b.n	8015f92 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8015f62:	69bb      	ldr	r3, [r7, #24]
 8015f64:	f003 0304 	and.w	r3, r3, #4
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d004      	beq.n	8015f76 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8015f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015f72:	627b      	str	r3, [r7, #36]	; 0x24
 8015f74:	e00d      	b.n	8015f92 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8015f76:	69bb      	ldr	r3, [r7, #24]
 8015f78:	f003 0308 	and.w	r3, r3, #8
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d004      	beq.n	8015f8a <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8015f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015f86:	627b      	str	r3, [r7, #36]	; 0x24
 8015f88:	e003      	b.n	8015f92 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8015f92:	69bb      	ldr	r3, [r7, #24]
 8015f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d026      	beq.n	8015fea <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015fa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8015fa6:	69bb      	ldr	r3, [r7, #24]
 8015fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d004      	beq.n	8015fba <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	4798      	blx	r3
 8015fb8:	e017      	b.n	8015fea <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8015fba:	69bb      	ldr	r3, [r7, #24]
 8015fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d004      	beq.n	8015fce <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8015fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015fca:	627b      	str	r3, [r7, #36]	; 0x24
 8015fcc:	e00d      	b.n	8015fea <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8015fce:	69bb      	ldr	r3, [r7, #24]
 8015fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d004      	beq.n	8015fe2 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8015fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015fde:	627b      	str	r3, [r7, #36]	; 0x24
 8015fe0:	e003      	b.n	8015fea <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fe6:	6878      	ldr	r0, [r7, #4]
 8015fe8:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8015fea:	69bb      	ldr	r3, [r7, #24]
 8015fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d026      	beq.n	8016042 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8015ffc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8015ffe:	69bb      	ldr	r3, [r7, #24]
 8016000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016004:	2b00      	cmp	r3, #0
 8016006:	d004      	beq.n	8016012 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801600c:	6878      	ldr	r0, [r7, #4]
 801600e:	4798      	blx	r3
 8016010:	e017      	b.n	8016042 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8016012:	69bb      	ldr	r3, [r7, #24]
 8016014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016018:	2b00      	cmp	r3, #0
 801601a:	d004      	beq.n	8016026 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016022:	627b      	str	r3, [r7, #36]	; 0x24
 8016024:	e00d      	b.n	8016042 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8016026:	69bb      	ldr	r3, [r7, #24]
 8016028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801602c:	2b00      	cmp	r3, #0
 801602e:	d004      	beq.n	801603a <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8016030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016036:	627b      	str	r3, [r7, #36]	; 0x24
 8016038:	e003      	b.n	8016042 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8016042:	6a3b      	ldr	r3, [r7, #32]
 8016044:	f003 0308 	and.w	r3, r3, #8
 8016048:	2b00      	cmp	r3, #0
 801604a:	d00c      	beq.n	8016066 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	f003 0310 	and.w	r3, r3, #16
 8016052:	2b00      	cmp	r3, #0
 8016054:	d007      	beq.n	8016066 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8016056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801605c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	2210      	movs	r2, #16
 8016064:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8016066:	6a3b      	ldr	r3, [r7, #32]
 8016068:	f003 0304 	and.w	r3, r3, #4
 801606c:	2b00      	cmp	r3, #0
 801606e:	d00c      	beq.n	801608a <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8016070:	697b      	ldr	r3, [r7, #20]
 8016072:	f003 0308 	and.w	r3, r3, #8
 8016076:	2b00      	cmp	r3, #0
 8016078:	d007      	beq.n	801608a <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	2208      	movs	r2, #8
 8016080:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 801608a:	6a3b      	ldr	r3, [r7, #32]
 801608c:	f003 0302 	and.w	r3, r3, #2
 8016090:	2b00      	cmp	r3, #0
 8016092:	d00a      	beq.n	80160aa <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	68db      	ldr	r3, [r3, #12]
 801609a:	f003 0303 	and.w	r3, r3, #3
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d003      	beq.n	80160aa <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80160aa:	6a3b      	ldr	r3, [r7, #32]
 80160ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d00c      	beq.n	80160ce <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	f003 0310 	and.w	r3, r3, #16
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d007      	beq.n	80160ce <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80160be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80160c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	2210      	movs	r2, #16
 80160cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80160ce:	6a3b      	ldr	r3, [r7, #32]
 80160d0:	f003 0320 	and.w	r3, r3, #32
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d00c      	beq.n	80160f2 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	f003 0308 	and.w	r3, r3, #8
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d007      	beq.n	80160f2 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	2208      	movs	r2, #8
 80160e8:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80160f2:	6a3b      	ldr	r3, [r7, #32]
 80160f4:	f003 0310 	and.w	r3, r3, #16
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d00a      	beq.n	8016112 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	691b      	ldr	r3, [r3, #16]
 8016102:	f003 0303 	and.w	r3, r3, #3
 8016106:	2b00      	cmp	r3, #0
 8016108:	d003      	beq.n	8016112 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8016112:	6a3b      	ldr	r3, [r7, #32]
 8016114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016118:	2b00      	cmp	r3, #0
 801611a:	d00c      	beq.n	8016136 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 801611c:	69fb      	ldr	r3, [r7, #28]
 801611e:	f003 0310 	and.w	r3, r3, #16
 8016122:	2b00      	cmp	r3, #0
 8016124:	d007      	beq.n	8016136 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	2210      	movs	r2, #16
 801612c:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8016136:	6a3b      	ldr	r3, [r7, #32]
 8016138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801613c:	2b00      	cmp	r3, #0
 801613e:	d00c      	beq.n	801615a <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8016140:	69fb      	ldr	r3, [r7, #28]
 8016142:	f003 0308 	and.w	r3, r3, #8
 8016146:	2b00      	cmp	r3, #0
 8016148:	d007      	beq.n	801615a <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	2208      	movs	r2, #8
 8016150:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801615a:	6a3b      	ldr	r3, [r7, #32]
 801615c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016160:	2b00      	cmp	r3, #0
 8016162:	d07b      	beq.n	801625c <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8016164:	69fb      	ldr	r3, [r7, #28]
 8016166:	f003 0304 	and.w	r3, r3, #4
 801616a:	2b00      	cmp	r3, #0
 801616c:	d072      	beq.n	8016254 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801616e:	6a3b      	ldr	r3, [r7, #32]
 8016170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016174:	2b00      	cmp	r3, #0
 8016176:	d008      	beq.n	801618a <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801617e:	2b00      	cmp	r3, #0
 8016180:	d003      	beq.n	801618a <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8016182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016184:	f043 0301 	orr.w	r3, r3, #1
 8016188:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801618a:	6a3b      	ldr	r3, [r7, #32]
 801618c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016190:	2b00      	cmp	r3, #0
 8016192:	d008      	beq.n	80161a6 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801619a:	2b00      	cmp	r3, #0
 801619c:	d003      	beq.n	80161a6 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 801619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161a0:	f043 0302 	orr.w	r3, r3, #2
 80161a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80161a6:	6a3b      	ldr	r3, [r7, #32]
 80161a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d008      	beq.n	80161c2 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d003      	beq.n	80161c2 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80161ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161bc:	f043 0304 	orr.w	r3, r3, #4
 80161c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80161c2:	6a3b      	ldr	r3, [r7, #32]
 80161c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d043      	beq.n	8016254 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d03e      	beq.n	8016254 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80161dc:	2b60      	cmp	r3, #96	; 0x60
 80161de:	d02b      	beq.n	8016238 <HAL_CAN_IRQHandler+0x344>
 80161e0:	2b60      	cmp	r3, #96	; 0x60
 80161e2:	d82e      	bhi.n	8016242 <HAL_CAN_IRQHandler+0x34e>
 80161e4:	2b50      	cmp	r3, #80	; 0x50
 80161e6:	d022      	beq.n	801622e <HAL_CAN_IRQHandler+0x33a>
 80161e8:	2b50      	cmp	r3, #80	; 0x50
 80161ea:	d82a      	bhi.n	8016242 <HAL_CAN_IRQHandler+0x34e>
 80161ec:	2b40      	cmp	r3, #64	; 0x40
 80161ee:	d019      	beq.n	8016224 <HAL_CAN_IRQHandler+0x330>
 80161f0:	2b40      	cmp	r3, #64	; 0x40
 80161f2:	d826      	bhi.n	8016242 <HAL_CAN_IRQHandler+0x34e>
 80161f4:	2b30      	cmp	r3, #48	; 0x30
 80161f6:	d010      	beq.n	801621a <HAL_CAN_IRQHandler+0x326>
 80161f8:	2b30      	cmp	r3, #48	; 0x30
 80161fa:	d822      	bhi.n	8016242 <HAL_CAN_IRQHandler+0x34e>
 80161fc:	2b10      	cmp	r3, #16
 80161fe:	d002      	beq.n	8016206 <HAL_CAN_IRQHandler+0x312>
 8016200:	2b20      	cmp	r3, #32
 8016202:	d005      	beq.n	8016210 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8016204:	e01d      	b.n	8016242 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8016206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016208:	f043 0308 	orr.w	r3, r3, #8
 801620c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801620e:	e019      	b.n	8016244 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8016210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016212:	f043 0310 	orr.w	r3, r3, #16
 8016216:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016218:	e014      	b.n	8016244 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 801621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801621c:	f043 0320 	orr.w	r3, r3, #32
 8016220:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016222:	e00f      	b.n	8016244 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8016224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801622a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801622c:	e00a      	b.n	8016244 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 801622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016234:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016236:	e005      	b.n	8016244 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8016238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801623a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801623e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016240:	e000      	b.n	8016244 <HAL_CAN_IRQHandler+0x350>
            break;
 8016242:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	699a      	ldr	r2, [r3, #24]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8016252:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	2204      	movs	r2, #4
 801625a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 801625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625e:	2b00      	cmp	r3, #0
 8016260:	d009      	beq.n	8016276 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016268:	431a      	orrs	r2, r3
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8016276:	bf00      	nop
 8016278:	3728      	adds	r7, #40	; 0x28
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801627e:	b480      	push	{r7}
 8016280:	b083      	sub	sp, #12
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8016286:	bf00      	nop
 8016288:	370c      	adds	r7, #12
 801628a:	46bd      	mov	sp, r7
 801628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016290:	4770      	bx	lr

08016292 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8016292:	b480      	push	{r7}
 8016294:	b083      	sub	sp, #12
 8016296:	af00      	add	r7, sp, #0
 8016298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801629a:	bf00      	nop
 801629c:	370c      	adds	r7, #12
 801629e:	46bd      	mov	sp, r7
 80162a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a4:	4770      	bx	lr

080162a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80162a6:	b480      	push	{r7}
 80162a8:	b083      	sub	sp, #12
 80162aa:	af00      	add	r7, sp, #0
 80162ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80162ae:	bf00      	nop
 80162b0:	370c      	adds	r7, #12
 80162b2:	46bd      	mov	sp, r7
 80162b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b8:	4770      	bx	lr

080162ba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80162ba:	b480      	push	{r7}
 80162bc:	b083      	sub	sp, #12
 80162be:	af00      	add	r7, sp, #0
 80162c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80162c2:	bf00      	nop
 80162c4:	370c      	adds	r7, #12
 80162c6:	46bd      	mov	sp, r7
 80162c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162cc:	4770      	bx	lr

080162ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80162ce:	b480      	push	{r7}
 80162d0:	b083      	sub	sp, #12
 80162d2:	af00      	add	r7, sp, #0
 80162d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80162d6:	bf00      	nop
 80162d8:	370c      	adds	r7, #12
 80162da:	46bd      	mov	sp, r7
 80162dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e0:	4770      	bx	lr

080162e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80162e2:	b480      	push	{r7}
 80162e4:	b083      	sub	sp, #12
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80162ea:	bf00      	nop
 80162ec:	370c      	adds	r7, #12
 80162ee:	46bd      	mov	sp, r7
 80162f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f4:	4770      	bx	lr

080162f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80162f6:	b480      	push	{r7}
 80162f8:	b083      	sub	sp, #12
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80162fe:	bf00      	nop
 8016300:	370c      	adds	r7, #12
 8016302:	46bd      	mov	sp, r7
 8016304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016308:	4770      	bx	lr

0801630a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801630a:	b480      	push	{r7}
 801630c:	b083      	sub	sp, #12
 801630e:	af00      	add	r7, sp, #0
 8016310:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8016312:	bf00      	nop
 8016314:	370c      	adds	r7, #12
 8016316:	46bd      	mov	sp, r7
 8016318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631c:	4770      	bx	lr

0801631e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 801631e:	b480      	push	{r7}
 8016320:	b083      	sub	sp, #12
 8016322:	af00      	add	r7, sp, #0
 8016324:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8016326:	bf00      	nop
 8016328:	370c      	adds	r7, #12
 801632a:	46bd      	mov	sp, r7
 801632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016330:	4770      	bx	lr

08016332 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8016332:	b480      	push	{r7}
 8016334:	b083      	sub	sp, #12
 8016336:	af00      	add	r7, sp, #0
 8016338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801633a:	bf00      	nop
 801633c:	370c      	adds	r7, #12
 801633e:	46bd      	mov	sp, r7
 8016340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016344:	4770      	bx	lr

08016346 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8016346:	b480      	push	{r7}
 8016348:	b083      	sub	sp, #12
 801634a:	af00      	add	r7, sp, #0
 801634c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 801634e:	bf00      	nop
 8016350:	370c      	adds	r7, #12
 8016352:	46bd      	mov	sp, r7
 8016354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016358:	4770      	bx	lr
	...

0801635c <__NVIC_SetPriorityGrouping>:
{
 801635c:	b480      	push	{r7}
 801635e:	b085      	sub	sp, #20
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f003 0307 	and.w	r3, r3, #7
 801636a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801636c:	4b0b      	ldr	r3, [pc, #44]	; (801639c <__NVIC_SetPriorityGrouping+0x40>)
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016372:	68ba      	ldr	r2, [r7, #8]
 8016374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016378:	4013      	ands	r3, r2
 801637a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016380:	68bb      	ldr	r3, [r7, #8]
 8016382:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8016384:	4b06      	ldr	r3, [pc, #24]	; (80163a0 <__NVIC_SetPriorityGrouping+0x44>)
 8016386:	4313      	orrs	r3, r2
 8016388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801638a:	4a04      	ldr	r2, [pc, #16]	; (801639c <__NVIC_SetPriorityGrouping+0x40>)
 801638c:	68bb      	ldr	r3, [r7, #8]
 801638e:	60d3      	str	r3, [r2, #12]
}
 8016390:	bf00      	nop
 8016392:	3714      	adds	r7, #20
 8016394:	46bd      	mov	sp, r7
 8016396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639a:	4770      	bx	lr
 801639c:	e000ed00 	.word	0xe000ed00
 80163a0:	05fa0000 	.word	0x05fa0000

080163a4 <__NVIC_GetPriorityGrouping>:
{
 80163a4:	b480      	push	{r7}
 80163a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80163a8:	4b04      	ldr	r3, [pc, #16]	; (80163bc <__NVIC_GetPriorityGrouping+0x18>)
 80163aa:	68db      	ldr	r3, [r3, #12]
 80163ac:	0a1b      	lsrs	r3, r3, #8
 80163ae:	f003 0307 	and.w	r3, r3, #7
}
 80163b2:	4618      	mov	r0, r3
 80163b4:	46bd      	mov	sp, r7
 80163b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ba:	4770      	bx	lr
 80163bc:	e000ed00 	.word	0xe000ed00

080163c0 <__NVIC_EnableIRQ>:
{
 80163c0:	b480      	push	{r7}
 80163c2:	b083      	sub	sp, #12
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	4603      	mov	r3, r0
 80163c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80163ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	db0b      	blt.n	80163ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80163d2:	79fb      	ldrb	r3, [r7, #7]
 80163d4:	f003 021f 	and.w	r2, r3, #31
 80163d8:	4907      	ldr	r1, [pc, #28]	; (80163f8 <__NVIC_EnableIRQ+0x38>)
 80163da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80163de:	095b      	lsrs	r3, r3, #5
 80163e0:	2001      	movs	r0, #1
 80163e2:	fa00 f202 	lsl.w	r2, r0, r2
 80163e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80163ea:	bf00      	nop
 80163ec:	370c      	adds	r7, #12
 80163ee:	46bd      	mov	sp, r7
 80163f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f4:	4770      	bx	lr
 80163f6:	bf00      	nop
 80163f8:	e000e100 	.word	0xe000e100

080163fc <__NVIC_SetPriority>:
{
 80163fc:	b480      	push	{r7}
 80163fe:	b083      	sub	sp, #12
 8016400:	af00      	add	r7, sp, #0
 8016402:	4603      	mov	r3, r0
 8016404:	6039      	str	r1, [r7, #0]
 8016406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801640c:	2b00      	cmp	r3, #0
 801640e:	db0a      	blt.n	8016426 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	b2da      	uxtb	r2, r3
 8016414:	490c      	ldr	r1, [pc, #48]	; (8016448 <__NVIC_SetPriority+0x4c>)
 8016416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801641a:	0112      	lsls	r2, r2, #4
 801641c:	b2d2      	uxtb	r2, r2
 801641e:	440b      	add	r3, r1
 8016420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016424:	e00a      	b.n	801643c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	b2da      	uxtb	r2, r3
 801642a:	4908      	ldr	r1, [pc, #32]	; (801644c <__NVIC_SetPriority+0x50>)
 801642c:	79fb      	ldrb	r3, [r7, #7]
 801642e:	f003 030f 	and.w	r3, r3, #15
 8016432:	3b04      	subs	r3, #4
 8016434:	0112      	lsls	r2, r2, #4
 8016436:	b2d2      	uxtb	r2, r2
 8016438:	440b      	add	r3, r1
 801643a:	761a      	strb	r2, [r3, #24]
}
 801643c:	bf00      	nop
 801643e:	370c      	adds	r7, #12
 8016440:	46bd      	mov	sp, r7
 8016442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016446:	4770      	bx	lr
 8016448:	e000e100 	.word	0xe000e100
 801644c:	e000ed00 	.word	0xe000ed00

08016450 <NVIC_EncodePriority>:
{
 8016450:	b480      	push	{r7}
 8016452:	b089      	sub	sp, #36	; 0x24
 8016454:	af00      	add	r7, sp, #0
 8016456:	60f8      	str	r0, [r7, #12]
 8016458:	60b9      	str	r1, [r7, #8]
 801645a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	f003 0307 	and.w	r3, r3, #7
 8016462:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016464:	69fb      	ldr	r3, [r7, #28]
 8016466:	f1c3 0307 	rsb	r3, r3, #7
 801646a:	2b04      	cmp	r3, #4
 801646c:	bf28      	it	cs
 801646e:	2304      	movcs	r3, #4
 8016470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016472:	69fb      	ldr	r3, [r7, #28]
 8016474:	3304      	adds	r3, #4
 8016476:	2b06      	cmp	r3, #6
 8016478:	d902      	bls.n	8016480 <NVIC_EncodePriority+0x30>
 801647a:	69fb      	ldr	r3, [r7, #28]
 801647c:	3b03      	subs	r3, #3
 801647e:	e000      	b.n	8016482 <NVIC_EncodePriority+0x32>
 8016480:	2300      	movs	r3, #0
 8016482:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016484:	f04f 32ff 	mov.w	r2, #4294967295
 8016488:	69bb      	ldr	r3, [r7, #24]
 801648a:	fa02 f303 	lsl.w	r3, r2, r3
 801648e:	43da      	mvns	r2, r3
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	401a      	ands	r2, r3
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016498:	f04f 31ff 	mov.w	r1, #4294967295
 801649c:	697b      	ldr	r3, [r7, #20]
 801649e:	fa01 f303 	lsl.w	r3, r1, r3
 80164a2:	43d9      	mvns	r1, r3
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80164a8:	4313      	orrs	r3, r2
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3724      	adds	r7, #36	; 0x24
 80164ae:	46bd      	mov	sp, r7
 80164b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b4:	4770      	bx	lr
	...

080164b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	3b01      	subs	r3, #1
 80164c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80164c8:	d301      	bcc.n	80164ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80164ca:	2301      	movs	r3, #1
 80164cc:	e00f      	b.n	80164ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80164ce:	4a0a      	ldr	r2, [pc, #40]	; (80164f8 <SysTick_Config+0x40>)
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	3b01      	subs	r3, #1
 80164d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80164d6:	210f      	movs	r1, #15
 80164d8:	f04f 30ff 	mov.w	r0, #4294967295
 80164dc:	f7ff ff8e 	bl	80163fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80164e0:	4b05      	ldr	r3, [pc, #20]	; (80164f8 <SysTick_Config+0x40>)
 80164e2:	2200      	movs	r2, #0
 80164e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80164e6:	4b04      	ldr	r3, [pc, #16]	; (80164f8 <SysTick_Config+0x40>)
 80164e8:	2207      	movs	r2, #7
 80164ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80164ec:	2300      	movs	r3, #0
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	3708      	adds	r7, #8
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	bf00      	nop
 80164f8:	e000e010 	.word	0xe000e010

080164fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b082      	sub	sp, #8
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f7ff ff29 	bl	801635c <__NVIC_SetPriorityGrouping>
}
 801650a:	bf00      	nop
 801650c:	3708      	adds	r7, #8
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}

08016512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016512:	b580      	push	{r7, lr}
 8016514:	b086      	sub	sp, #24
 8016516:	af00      	add	r7, sp, #0
 8016518:	4603      	mov	r3, r0
 801651a:	60b9      	str	r1, [r7, #8]
 801651c:	607a      	str	r2, [r7, #4]
 801651e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8016520:	2300      	movs	r3, #0
 8016522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016524:	f7ff ff3e 	bl	80163a4 <__NVIC_GetPriorityGrouping>
 8016528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801652a:	687a      	ldr	r2, [r7, #4]
 801652c:	68b9      	ldr	r1, [r7, #8]
 801652e:	6978      	ldr	r0, [r7, #20]
 8016530:	f7ff ff8e 	bl	8016450 <NVIC_EncodePriority>
 8016534:	4602      	mov	r2, r0
 8016536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801653a:	4611      	mov	r1, r2
 801653c:	4618      	mov	r0, r3
 801653e:	f7ff ff5d 	bl	80163fc <__NVIC_SetPriority>
}
 8016542:	bf00      	nop
 8016544:	3718      	adds	r7, #24
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}

0801654a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801654a:	b580      	push	{r7, lr}
 801654c:	b082      	sub	sp, #8
 801654e:	af00      	add	r7, sp, #0
 8016550:	4603      	mov	r3, r0
 8016552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016558:	4618      	mov	r0, r3
 801655a:	f7ff ff31 	bl	80163c0 <__NVIC_EnableIRQ>
}
 801655e:	bf00      	nop
 8016560:	3708      	adds	r7, #8
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}

08016566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8016566:	b580      	push	{r7, lr}
 8016568:	b082      	sub	sp, #8
 801656a:	af00      	add	r7, sp, #0
 801656c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f7ff ffa2 	bl	80164b8 <SysTick_Config>
 8016574:	4603      	mov	r3, r0
}
 8016576:	4618      	mov	r0, r3
 8016578:	3708      	adds	r7, #8
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}
	...

08016580 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8016580:	b480      	push	{r7}
 8016582:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8016584:	f3bf 8f5f 	dmb	sy
}
 8016588:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801658a:	4b07      	ldr	r3, [pc, #28]	; (80165a8 <HAL_MPU_Disable+0x28>)
 801658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801658e:	4a06      	ldr	r2, [pc, #24]	; (80165a8 <HAL_MPU_Disable+0x28>)
 8016590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016594:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8016596:	4b05      	ldr	r3, [pc, #20]	; (80165ac <HAL_MPU_Disable+0x2c>)
 8016598:	2200      	movs	r2, #0
 801659a:	605a      	str	r2, [r3, #4]
}
 801659c:	bf00      	nop
 801659e:	46bd      	mov	sp, r7
 80165a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a4:	4770      	bx	lr
 80165a6:	bf00      	nop
 80165a8:	e000ed00 	.word	0xe000ed00
 80165ac:	e000ed90 	.word	0xe000ed90

080165b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80165b0:	b480      	push	{r7}
 80165b2:	b083      	sub	sp, #12
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80165b8:	4a0b      	ldr	r2, [pc, #44]	; (80165e8 <HAL_MPU_Enable+0x38>)
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	f043 0301 	orr.w	r3, r3, #1
 80165c0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80165c2:	4b0a      	ldr	r3, [pc, #40]	; (80165ec <HAL_MPU_Enable+0x3c>)
 80165c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165c6:	4a09      	ldr	r2, [pc, #36]	; (80165ec <HAL_MPU_Enable+0x3c>)
 80165c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80165cc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80165ce:	f3bf 8f4f 	dsb	sy
}
 80165d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80165d4:	f3bf 8f6f 	isb	sy
}
 80165d8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80165da:	bf00      	nop
 80165dc:	370c      	adds	r7, #12
 80165de:	46bd      	mov	sp, r7
 80165e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e4:	4770      	bx	lr
 80165e6:	bf00      	nop
 80165e8:	e000ed90 	.word	0xe000ed90
 80165ec:	e000ed00 	.word	0xe000ed00

080165f0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80165f0:	b480      	push	{r7}
 80165f2:	b083      	sub	sp, #12
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	785a      	ldrb	r2, [r3, #1]
 80165fc:	4b1d      	ldr	r3, [pc, #116]	; (8016674 <HAL_MPU_ConfigRegion+0x84>)
 80165fe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	781b      	ldrb	r3, [r3, #0]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d029      	beq.n	801665c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8016608:	4a1a      	ldr	r2, [pc, #104]	; (8016674 <HAL_MPU_ConfigRegion+0x84>)
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	685b      	ldr	r3, [r3, #4]
 801660e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	7b1b      	ldrb	r3, [r3, #12]
 8016614:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	7adb      	ldrb	r3, [r3, #11]
 801661a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801661c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	7a9b      	ldrb	r3, [r3, #10]
 8016622:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8016624:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	7b5b      	ldrb	r3, [r3, #13]
 801662a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801662c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	7b9b      	ldrb	r3, [r3, #14]
 8016632:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8016634:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	7bdb      	ldrb	r3, [r3, #15]
 801663a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801663c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	7a5b      	ldrb	r3, [r3, #9]
 8016642:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8016644:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	7a1b      	ldrb	r3, [r3, #8]
 801664a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801664c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801664e:	687a      	ldr	r2, [r7, #4]
 8016650:	7812      	ldrb	r2, [r2, #0]
 8016652:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016654:	4a07      	ldr	r2, [pc, #28]	; (8016674 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8016656:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016658:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801665a:	e005      	b.n	8016668 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 801665c:	4b05      	ldr	r3, [pc, #20]	; (8016674 <HAL_MPU_ConfigRegion+0x84>)
 801665e:	2200      	movs	r2, #0
 8016660:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8016662:	4b04      	ldr	r3, [pc, #16]	; (8016674 <HAL_MPU_ConfigRegion+0x84>)
 8016664:	2200      	movs	r2, #0
 8016666:	611a      	str	r2, [r3, #16]
}
 8016668:	bf00      	nop
 801666a:	370c      	adds	r7, #12
 801666c:	46bd      	mov	sp, r7
 801666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016672:	4770      	bx	lr
 8016674:	e000ed90 	.word	0xe000ed90

08016678 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b084      	sub	sp, #16
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016684:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016686:	f7fe ff63 	bl	8015550 <HAL_GetTick>
 801668a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016692:	b2db      	uxtb	r3, r3
 8016694:	2b02      	cmp	r3, #2
 8016696:	d008      	beq.n	80166aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2280      	movs	r2, #128	; 0x80
 801669c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	2200      	movs	r2, #0
 80166a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80166a6:	2301      	movs	r3, #1
 80166a8:	e052      	b.n	8016750 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	681a      	ldr	r2, [r3, #0]
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	f022 0216 	bic.w	r2, r2, #22
 80166b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	695a      	ldr	r2, [r3, #20]
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80166c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d103      	bne.n	80166da <HAL_DMA_Abort+0x62>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d007      	beq.n	80166ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	681a      	ldr	r2, [r3, #0]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	f022 0208 	bic.w	r2, r2, #8
 80166e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	681a      	ldr	r2, [r3, #0]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	f022 0201 	bic.w	r2, r2, #1
 80166f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80166fa:	e013      	b.n	8016724 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80166fc:	f7fe ff28 	bl	8015550 <HAL_GetTick>
 8016700:	4602      	mov	r2, r0
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	1ad3      	subs	r3, r2, r3
 8016706:	2b05      	cmp	r3, #5
 8016708:	d90c      	bls.n	8016724 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	2220      	movs	r2, #32
 801670e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2203      	movs	r2, #3
 8016714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2200      	movs	r2, #0
 801671c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8016720:	2303      	movs	r3, #3
 8016722:	e015      	b.n	8016750 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	f003 0301 	and.w	r3, r3, #1
 801672e:	2b00      	cmp	r3, #0
 8016730:	d1e4      	bne.n	80166fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016736:	223f      	movs	r2, #63	; 0x3f
 8016738:	409a      	lsls	r2, r3
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	2201      	movs	r2, #1
 8016742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2200      	movs	r2, #0
 801674a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 801674e:	2300      	movs	r3, #0
}
 8016750:	4618      	mov	r0, r3
 8016752:	3710      	adds	r7, #16
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}

08016758 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016758:	b480      	push	{r7}
 801675a:	b083      	sub	sp, #12
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016766:	b2db      	uxtb	r3, r3
 8016768:	2b02      	cmp	r3, #2
 801676a:	d004      	beq.n	8016776 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2280      	movs	r2, #128	; 0x80
 8016770:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016772:	2301      	movs	r3, #1
 8016774:	e00c      	b.n	8016790 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	2205      	movs	r2, #5
 801677a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	681a      	ldr	r2, [r3, #0]
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	f022 0201 	bic.w	r2, r2, #1
 801678c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801678e:	2300      	movs	r3, #0
}
 8016790:	4618      	mov	r0, r3
 8016792:	370c      	adds	r7, #12
 8016794:	46bd      	mov	sp, r7
 8016796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679a:	4770      	bx	lr

0801679c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b084      	sub	sp, #16
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d101      	bne.n	80167ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80167aa:	2301      	movs	r3, #1
 80167ac:	e06a      	b.n	8016884 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d106      	bne.n	80167c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	2223      	movs	r2, #35	; 0x23
 80167bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	f006 fbaf 	bl	801cf24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80167c6:	4b31      	ldr	r3, [pc, #196]	; (801688c <HAL_ETH_Init+0xf0>)
 80167c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167ca:	4a30      	ldr	r2, [pc, #192]	; (801688c <HAL_ETH_Init+0xf0>)
 80167cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80167d0:	6453      	str	r3, [r2, #68]	; 0x44
 80167d2:	4b2e      	ldr	r3, [pc, #184]	; (801688c <HAL_ETH_Init+0xf0>)
 80167d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80167d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167da:	60bb      	str	r3, [r7, #8]
 80167dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80167de:	4b2c      	ldr	r3, [pc, #176]	; (8016890 <HAL_ETH_Init+0xf4>)
 80167e0:	685b      	ldr	r3, [r3, #4]
 80167e2:	4a2b      	ldr	r2, [pc, #172]	; (8016890 <HAL_ETH_Init+0xf4>)
 80167e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80167e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80167ea:	4b29      	ldr	r3, [pc, #164]	; (8016890 <HAL_ETH_Init+0xf4>)
 80167ec:	685a      	ldr	r2, [r3, #4]
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	689b      	ldr	r3, [r3, #8]
 80167f2:	4927      	ldr	r1, [pc, #156]	; (8016890 <HAL_ETH_Init+0xf4>)
 80167f4:	4313      	orrs	r3, r2
 80167f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80167f8:	4b25      	ldr	r3, [pc, #148]	; (8016890 <HAL_ETH_Init+0xf4>)
 80167fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	687a      	ldr	r2, [r7, #4]
 8016808:	6812      	ldr	r2, [r2, #0]
 801680a:	f043 0301 	orr.w	r3, r3, #1
 801680e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016812:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016814:	f7fe fe9c 	bl	8015550 <HAL_GetTick>
 8016818:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801681a:	e011      	b.n	8016840 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801681c:	f7fe fe98 	bl	8015550 <HAL_GetTick>
 8016820:	4602      	mov	r2, r0
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	1ad3      	subs	r3, r2, r3
 8016826:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801682a:	d909      	bls.n	8016840 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2204      	movs	r2, #4
 8016830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	22e0      	movs	r2, #224	; 0xe0
 8016838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 801683c:	2301      	movs	r3, #1
 801683e:	e021      	b.n	8016884 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	f003 0301 	and.w	r3, r3, #1
 801684e:	2b00      	cmp	r3, #0
 8016850:	d1e4      	bne.n	801681c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	f000 fee4 	bl	8017620 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f000 ff8b 	bl	8017774 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801685e:	6878      	ldr	r0, [r7, #4]
 8016860:	f000 ffe1 	bl	8017826 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	685b      	ldr	r3, [r3, #4]
 8016868:	461a      	mov	r2, r3
 801686a:	2100      	movs	r1, #0
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 ff49 	bl	8017704 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2200      	movs	r2, #0
 8016876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2210      	movs	r2, #16
 801687e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016882:	2300      	movs	r3, #0
}
 8016884:	4618      	mov	r0, r3
 8016886:	3710      	adds	r7, #16
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}
 801688c:	40023800 	.word	0x40023800
 8016890:	40013800 	.word	0x40013800

08016894 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168a2:	2b10      	cmp	r3, #16
 80168a4:	d150      	bne.n	8016948 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	2223      	movs	r2, #35	; 0x23
 80168aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	2204      	movs	r2, #4
 80168b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f000 f9fd 	bl	8016cb4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	681a      	ldr	r2, [r3, #0]
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	f042 0208 	orr.w	r2, r2, #8
 80168c8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80168d2:	2001      	movs	r0, #1
 80168d4:	f7fe fe48 	bl	8015568 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	68fa      	ldr	r2, [r7, #12]
 80168de:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	681a      	ldr	r2, [r3, #0]
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	f042 0204 	orr.w	r2, r2, #4
 80168ee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80168f8:	2001      	movs	r0, #1
 80168fa:	f7fe fe35 	bl	8015568 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	68fa      	ldr	r2, [r7, #12]
 8016904:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f000 fd2a 	bl	8017360 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016914:	699b      	ldr	r3, [r3, #24]
 8016916:	687a      	ldr	r2, [r7, #4]
 8016918:	6812      	ldr	r2, [r2, #0]
 801691a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801691e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016922:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801692c:	699b      	ldr	r3, [r3, #24]
 801692e:	687a      	ldr	r2, [r7, #4]
 8016930:	6812      	ldr	r2, [r2, #0]
 8016932:	f043 0302 	orr.w	r3, r3, #2
 8016936:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801693a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2223      	movs	r2, #35	; 0x23
 8016940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8016944:	2300      	movs	r3, #0
 8016946:	e000      	b.n	801694a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8016948:	2301      	movs	r3, #1
  }
}
 801694a:	4618      	mov	r0, r3
 801694c:	3710      	adds	r7, #16
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}

08016952 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8016952:	b580      	push	{r7, lr}
 8016954:	b084      	sub	sp, #16
 8016956:	af00      	add	r7, sp, #0
 8016958:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016960:	2b23      	cmp	r3, #35	; 0x23
 8016962:	d14a      	bne.n	80169fa <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2223      	movs	r2, #35	; 0x23
 8016968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016974:	699b      	ldr	r3, [r3, #24]
 8016976:	687a      	ldr	r2, [r7, #4]
 8016978:	6812      	ldr	r2, [r2, #0]
 801697a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801697e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016982:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801698c:	699b      	ldr	r3, [r3, #24]
 801698e:	687a      	ldr	r2, [r7, #4]
 8016990:	6812      	ldr	r2, [r2, #0]
 8016992:	f023 0302 	bic.w	r3, r3, #2
 8016996:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801699a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	681a      	ldr	r2, [r3, #0]
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	f022 0204 	bic.w	r2, r2, #4
 80169aa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80169b4:	2001      	movs	r0, #1
 80169b6:	f7fe fdd7 	bl	8015568 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	68fa      	ldr	r2, [r7, #12]
 80169c0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f000 fccc 	bl	8017360 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	681a      	ldr	r2, [r3, #0]
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	f022 0208 	bic.w	r2, r2, #8
 80169d6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80169e0:	2001      	movs	r0, #1
 80169e2:	f7fe fdc1 	bl	8015568 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	68fa      	ldr	r2, [r7, #12]
 80169ec:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2210      	movs	r2, #16
 80169f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80169f6:	2300      	movs	r3, #0
 80169f8:	e000      	b.n	80169fc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80169fa:	2301      	movs	r3, #1
  }
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	3710      	adds	r7, #16
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}

08016a04 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b086      	sub	sp, #24
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d109      	bne.n	8016a2a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a1c:	f043 0201 	orr.w	r2, r3, #1
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8016a26:	2301      	movs	r3, #1
 8016a28:	e07c      	b.n	8016b24 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016a30:	2b23      	cmp	r3, #35	; 0x23
 8016a32:	d176      	bne.n	8016b22 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8016a34:	2200      	movs	r2, #0
 8016a36:	68b9      	ldr	r1, [r7, #8]
 8016a38:	68f8      	ldr	r0, [r7, #12]
 8016a3a:	f000 ff61 	bl	8017900 <ETH_Prepare_Tx_Descriptors>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d009      	beq.n	8016a58 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a4a:	f043 0202 	orr.w	r2, r3, #2
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8016a54:	2301      	movs	r3, #1
 8016a56:	e065      	b.n	8016b24 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8016a58:	f3bf 8f4f 	dsb	sy
}
 8016a5c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	3206      	adds	r2, #6
 8016a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a6a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a70:	1c5a      	adds	r2, r3, #1
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	629a      	str	r2, [r3, #40]	; 0x28
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a7a:	2b03      	cmp	r3, #3
 8016a7c:	d904      	bls.n	8016a88 <HAL_ETH_Transmit+0x84>
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a82:	1f1a      	subs	r2, r3, #4
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	3106      	adds	r1, #6
 8016a94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016a9c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8016a9e:	f7fe fd57 	bl	8015550 <HAL_GetTick>
 8016aa2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016aa4:	e037      	b.n	8016b16 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016aae:	695b      	ldr	r3, [r3, #20]
 8016ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d011      	beq.n	8016adc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016abe:	f043 0208 	orr.w	r2, r3, #8
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ad0:	695a      	ldr	r2, [r3, #20]
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8016ad8:	2301      	movs	r3, #1
 8016ada:	e023      	b.n	8016b24 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ae2:	d018      	beq.n	8016b16 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016ae4:	f7fe fd34 	bl	8015550 <HAL_GetTick>
 8016ae8:	4602      	mov	r2, r0
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	1ad3      	subs	r3, r2, r3
 8016aee:	687a      	ldr	r2, [r7, #4]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d302      	bcc.n	8016afa <HAL_ETH_Transmit+0xf6>
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d10d      	bne.n	8016b16 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b00:	f043 0204 	orr.w	r2, r3, #4
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8016b0a:	697b      	ldr	r3, [r7, #20]
 8016b0c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8016b10:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8016b12:	2301      	movs	r3, #1
 8016b14:	e006      	b.n	8016b24 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016b16:	697b      	ldr	r3, [r7, #20]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	dbc3      	blt.n	8016aa6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8016b1e:	2300      	movs	r3, #0
 8016b20:	e000      	b.n	8016b24 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8016b22:	2301      	movs	r3, #1
  }
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3718      	adds	r7, #24
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}

08016b2c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b088      	sub	sp, #32
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
 8016b34:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8016b36:	2300      	movs	r3, #0
 8016b38:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d109      	bne.n	8016b58 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b4a:	f043 0201 	orr.w	r2, r3, #1
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8016b54:	2301      	movs	r3, #1
 8016b56:	e0a8      	b.n	8016caa <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016b5e:	2b23      	cmp	r3, #35	; 0x23
 8016b60:	d001      	beq.n	8016b66 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8016b62:	2301      	movs	r3, #1
 8016b64:	e0a1      	b.n	8016caa <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b6a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	69fa      	ldr	r2, [r7, #28]
 8016b70:	3212      	adds	r2, #18
 8016b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b76:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b7c:	f1c3 0304 	rsb	r3, r3, #4
 8016b80:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8016b82:	e06a      	b.n	8016c5a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8016b84:	69bb      	ldr	r3, [r7, #24]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d007      	beq.n	8016ba0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8016b90:	69bb      	ldr	r3, [r7, #24]
 8016b92:	699a      	ldr	r2, [r3, #24]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8016b98:	69bb      	ldr	r3, [r7, #24]
 8016b9a:	69da      	ldr	r2, [r3, #28]
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8016ba0:	69bb      	ldr	r3, [r7, #24]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d103      	bne.n	8016bb4 <HAL_ETH_ReadData+0x88>
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d040      	beq.n	8016c36 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8016bb4:	69bb      	ldr	r3, [r7, #24]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d005      	beq.n	8016bcc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	2200      	movs	r2, #0
 8016bca:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	695b      	ldr	r3, [r3, #20]
 8016bd0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8016bd2:	69bb      	ldr	r3, [r7, #24]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d00c      	beq.n	8016bf8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8016bde:	69bb      	ldr	r3, [r7, #24]
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	0c1b      	lsrs	r3, r3, #16
 8016be4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016be8:	3b04      	subs	r3, #4
 8016bea:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8016bec:	69bb      	ldr	r3, [r7, #24]
 8016bee:	681a      	ldr	r2, [r3, #0]
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8016bf8:	69bb      	ldr	r3, [r7, #24]
 8016bfa:	689a      	ldr	r2, [r3, #8]
 8016bfc:	69bb      	ldr	r3, [r7, #24]
 8016bfe:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8016c0c:	69bb      	ldr	r3, [r7, #24]
 8016c0e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8016c10:	461a      	mov	r2, r3
 8016c12:	693b      	ldr	r3, [r7, #16]
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	f006 fb4f 	bl	801d2b8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c1e:	1c5a      	adds	r2, r3, #1
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016c28:	693b      	ldr	r3, [r7, #16]
 8016c2a:	441a      	add	r2, r3
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8016c30:	69bb      	ldr	r3, [r7, #24]
 8016c32:	2200      	movs	r2, #0
 8016c34:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8016c36:	69fb      	ldr	r3, [r7, #28]
 8016c38:	3301      	adds	r3, #1
 8016c3a:	61fb      	str	r3, [r7, #28]
 8016c3c:	69fb      	ldr	r3, [r7, #28]
 8016c3e:	2b03      	cmp	r3, #3
 8016c40:	d902      	bls.n	8016c48 <HAL_ETH_ReadData+0x11c>
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	3b04      	subs	r3, #4
 8016c46:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	69fa      	ldr	r2, [r7, #28]
 8016c4c:	3212      	adds	r2, #18
 8016c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c52:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	3301      	adds	r3, #1
 8016c58:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8016c5a:	69bb      	ldr	r3, [r7, #24]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	db06      	blt.n	8016c70 <HAL_ETH_ReadData+0x144>
 8016c62:	697a      	ldr	r2, [r7, #20]
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d202      	bcs.n	8016c70 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8016c6a:	7bfb      	ldrb	r3, [r7, #15]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d089      	beq.n	8016b84 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016c74:	697b      	ldr	r3, [r7, #20]
 8016c76:	441a      	add	r2, r3
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d002      	beq.n	8016c8a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	f000 f815 	bl	8016cb4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	69fa      	ldr	r2, [r7, #28]
 8016c8e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8016c90:	7bfb      	ldrb	r3, [r7, #15]
 8016c92:	2b01      	cmp	r3, #1
 8016c94:	d108      	bne.n	8016ca8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	e000      	b.n	8016caa <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8016ca8:	2301      	movs	r3, #1
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3720      	adds	r7, #32
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
	...

08016cb4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b088      	sub	sp, #32
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016cc8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	69fa      	ldr	r2, [r7, #28]
 8016cce:	3212      	adds	r2, #18
 8016cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cd4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cda:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8016cdc:	e040      	b.n	8016d60 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8016cde:	697b      	ldr	r3, [r7, #20]
 8016ce0:	6a1b      	ldr	r3, [r3, #32]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d112      	bne.n	8016d0c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8016ce6:	f107 030c 	add.w	r3, r7, #12
 8016cea:	4618      	mov	r0, r3
 8016cec:	f006 fab4 	bl	801d258 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d102      	bne.n	8016cfc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	74fb      	strb	r3, [r7, #19]
 8016cfa:	e007      	b.n	8016d0c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	461a      	mov	r2, r3
 8016d00:	697b      	ldr	r3, [r7, #20]
 8016d02:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	461a      	mov	r2, r3
 8016d08:	697b      	ldr	r3, [r7, #20]
 8016d0a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8016d0c:	7cfb      	ldrb	r3, [r7, #19]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d026      	beq.n	8016d60 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d103      	bne.n	8016d22 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	4a1e      	ldr	r2, [pc, #120]	; (8016d98 <ETH_UpdateDescriptor+0xe4>)
 8016d1e:	605a      	str	r2, [r3, #4]
 8016d20:	e003      	b.n	8016d2a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016d22:	697b      	ldr	r3, [r7, #20]
 8016d24:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8016d28:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8016d2a:	f3bf 8f5f 	dmb	sy
}
 8016d2e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8016d30:	697b      	ldr	r3, [r7, #20]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016d38:	697b      	ldr	r3, [r7, #20]
 8016d3a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8016d3c:	69fb      	ldr	r3, [r7, #28]
 8016d3e:	3301      	adds	r3, #1
 8016d40:	61fb      	str	r3, [r7, #28]
 8016d42:	69fb      	ldr	r3, [r7, #28]
 8016d44:	2b03      	cmp	r3, #3
 8016d46:	d902      	bls.n	8016d4e <ETH_UpdateDescriptor+0x9a>
 8016d48:	69fb      	ldr	r3, [r7, #28]
 8016d4a:	3b04      	subs	r3, #4
 8016d4c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	69fa      	ldr	r2, [r7, #28]
 8016d52:	3212      	adds	r2, #18
 8016d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d58:	617b      	str	r3, [r7, #20]
      desccount--;
 8016d5a:	69bb      	ldr	r3, [r7, #24]
 8016d5c:	3b01      	subs	r3, #1
 8016d5e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8016d60:	69bb      	ldr	r3, [r7, #24]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d002      	beq.n	8016d6c <ETH_UpdateDescriptor+0xb8>
 8016d66:	7cfb      	ldrb	r3, [r7, #19]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d1b8      	bne.n	8016cde <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d70:	69ba      	ldr	r2, [r7, #24]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d00c      	beq.n	8016d90 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d7e:	461a      	mov	r2, r3
 8016d80:	2300      	movs	r3, #0
 8016d82:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	69fa      	ldr	r2, [r7, #28]
 8016d88:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	69ba      	ldr	r2, [r7, #24]
 8016d8e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8016d90:	bf00      	nop
 8016d92:	3720      	adds	r7, #32
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}
 8016d98:	800045f8 	.word	0x800045f8

08016d9c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	b082      	sub	sp, #8
 8016da0:	af00      	add	r7, sp, #0
 8016da2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016dac:	695b      	ldr	r3, [r3, #20]
 8016dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016db2:	2b40      	cmp	r3, #64	; 0x40
 8016db4:	d112      	bne.n	8016ddc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016dbe:	69db      	ldr	r3, [r3, #28]
 8016dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016dc4:	2b40      	cmp	r3, #64	; 0x40
 8016dc6:	d109      	bne.n	8016ddc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	4b50      	ldr	r3, [pc, #320]	; (8016f14 <HAL_ETH_IRQHandler+0x178>)
 8016dd4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8016dd6:	6878      	ldr	r0, [r7, #4]
 8016dd8:	f000 f8ac 	bl	8016f34 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016de4:	695b      	ldr	r3, [r3, #20]
 8016de6:	f003 0301 	and.w	r3, r3, #1
 8016dea:	2b01      	cmp	r3, #1
 8016dec:	d113      	bne.n	8016e16 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016df6:	69db      	ldr	r3, [r3, #28]
 8016df8:	f003 0301 	and.w	r3, r3, #1
 8016dfc:	2b01      	cmp	r3, #1
 8016dfe:	d10a      	bne.n	8016e16 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e08:	461a      	mov	r2, r3
 8016e0a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8016e0e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	f000 f885 	bl	8016f20 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e1e:	695b      	ldr	r3, [r3, #20]
 8016e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016e28:	d14c      	bne.n	8016ec4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e32:	69db      	ldr	r3, [r3, #28]
 8016e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016e3c:	d142      	bne.n	8016ec4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016e44:	f043 0208 	orr.w	r2, r3, #8
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e56:	695b      	ldr	r3, [r3, #20]
 8016e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016e60:	d11a      	bne.n	8016e98 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e6a:	695a      	ldr	r2, [r3, #20]
 8016e6c:	4b2a      	ldr	r3, [pc, #168]	; (8016f18 <HAL_ETH_IRQHandler+0x17c>)
 8016e6e:	4013      	ands	r3, r2
 8016e70:	687a      	ldr	r2, [r7, #4]
 8016e72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e7e:	69db      	ldr	r3, [r3, #28]
 8016e80:	687a      	ldr	r2, [r7, #4]
 8016e82:	6812      	ldr	r2, [r2, #0]
 8016e84:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8016e88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016e8c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	22e0      	movs	r2, #224	; 0xe0
 8016e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8016e96:	e012      	b.n	8016ebe <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ea0:	695a      	ldr	r2, [r3, #20]
 8016ea2:	f248 6380 	movw	r3, #34432	; 0x8680
 8016ea6:	4013      	ands	r3, r2
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016eb6:	461a      	mov	r2, r3
 8016eb8:	f248 6380 	movw	r3, #34432	; 0x8680
 8016ebc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8016ebe:	6878      	ldr	r0, [r7, #4]
 8016ec0:	f000 f842 	bl	8016f48 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016eca:	f003 0308 	and.w	r3, r3, #8
 8016ece:	2b08      	cmp	r3, #8
 8016ed0:	d10e      	bne.n	8016ef0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ed8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f000 f83a 	bl	8016f5c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2200      	movs	r2, #0
 8016eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8016ef0:	4b0a      	ldr	r3, [pc, #40]	; (8016f1c <HAL_ETH_IRQHandler+0x180>)
 8016ef2:	695b      	ldr	r3, [r3, #20]
 8016ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d006      	beq.n	8016f0a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8016efc:	4b07      	ldr	r3, [pc, #28]	; (8016f1c <HAL_ETH_IRQHandler+0x180>)
 8016efe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016f02:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f000 f833 	bl	8016f70 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8016f0a:	bf00      	nop
 8016f0c:	3708      	adds	r7, #8
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}
 8016f12:	bf00      	nop
 8016f14:	00010040 	.word	0x00010040
 8016f18:	007e2000 	.word	0x007e2000
 8016f1c:	40013c00 	.word	0x40013c00

08016f20 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8016f20:	b480      	push	{r7}
 8016f22:	b083      	sub	sp, #12
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8016f28:	bf00      	nop
 8016f2a:	370c      	adds	r7, #12
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f32:	4770      	bx	lr

08016f34 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8016f34:	b480      	push	{r7}
 8016f36:	b083      	sub	sp, #12
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8016f3c:	bf00      	nop
 8016f3e:	370c      	adds	r7, #12
 8016f40:	46bd      	mov	sp, r7
 8016f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f46:	4770      	bx	lr

08016f48 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8016f48:	b480      	push	{r7}
 8016f4a:	b083      	sub	sp, #12
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8016f50:	bf00      	nop
 8016f52:	370c      	adds	r7, #12
 8016f54:	46bd      	mov	sp, r7
 8016f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5a:	4770      	bx	lr

08016f5c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8016f5c:	b480      	push	{r7}
 8016f5e:	b083      	sub	sp, #12
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8016f64:	bf00      	nop
 8016f66:	370c      	adds	r7, #12
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6e:	4770      	bx	lr

08016f70 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8016f70:	b480      	push	{r7}
 8016f72:	b083      	sub	sp, #12
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8016f78:	bf00      	nop
 8016f7a:	370c      	adds	r7, #12
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f82:	4770      	bx	lr

08016f84 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b086      	sub	sp, #24
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	60f8      	str	r0, [r7, #12]
 8016f8c:	60b9      	str	r1, [r7, #8]
 8016f8e:	607a      	str	r2, [r7, #4]
 8016f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	691b      	ldr	r3, [r3, #16]
 8016f98:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8016f9a:	697b      	ldr	r3, [r7, #20]
 8016f9c:	f003 031c 	and.w	r3, r3, #28
 8016fa0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8016fa2:	68bb      	ldr	r3, [r7, #8]
 8016fa4:	02db      	lsls	r3, r3, #11
 8016fa6:	b29b      	uxth	r3, r3
 8016fa8:	697a      	ldr	r2, [r7, #20]
 8016faa:	4313      	orrs	r3, r2
 8016fac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	019b      	lsls	r3, r3, #6
 8016fb2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8016fb6:	697a      	ldr	r2, [r7, #20]
 8016fb8:	4313      	orrs	r3, r2
 8016fba:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8016fbc:	697b      	ldr	r3, [r7, #20]
 8016fbe:	f023 0302 	bic.w	r3, r3, #2
 8016fc2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	f043 0301 	orr.w	r3, r3, #1
 8016fca:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	697a      	ldr	r2, [r7, #20]
 8016fd2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8016fd4:	f7fe fabc 	bl	8015550 <HAL_GetTick>
 8016fd8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016fda:	e00d      	b.n	8016ff8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8016fdc:	f7fe fab8 	bl	8015550 <HAL_GetTick>
 8016fe0:	4602      	mov	r2, r0
 8016fe2:	693b      	ldr	r3, [r7, #16]
 8016fe4:	1ad3      	subs	r3, r2, r3
 8016fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016fea:	d301      	bcc.n	8016ff0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8016fec:	2301      	movs	r3, #1
 8016fee:	e010      	b.n	8017012 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	691b      	ldr	r3, [r3, #16]
 8016ff6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016ff8:	697b      	ldr	r3, [r7, #20]
 8016ffa:	f003 0301 	and.w	r3, r3, #1
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d1ec      	bne.n	8016fdc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	695b      	ldr	r3, [r3, #20]
 8017008:	b29b      	uxth	r3, r3
 801700a:	461a      	mov	r2, r3
 801700c:	683b      	ldr	r3, [r7, #0]
 801700e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8017010:	2300      	movs	r3, #0
}
 8017012:	4618      	mov	r0, r3
 8017014:	3718      	adds	r7, #24
 8017016:	46bd      	mov	sp, r7
 8017018:	bd80      	pop	{r7, pc}

0801701a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 801701a:	b580      	push	{r7, lr}
 801701c:	b086      	sub	sp, #24
 801701e:	af00      	add	r7, sp, #0
 8017020:	60f8      	str	r0, [r7, #12]
 8017022:	60b9      	str	r1, [r7, #8]
 8017024:	607a      	str	r2, [r7, #4]
 8017026:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	691b      	ldr	r3, [r3, #16]
 801702e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	f003 031c 	and.w	r3, r3, #28
 8017036:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	02db      	lsls	r3, r3, #11
 801703c:	b29b      	uxth	r3, r3
 801703e:	697a      	ldr	r2, [r7, #20]
 8017040:	4313      	orrs	r3, r2
 8017042:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	019b      	lsls	r3, r3, #6
 8017048:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801704c:	697a      	ldr	r2, [r7, #20]
 801704e:	4313      	orrs	r3, r2
 8017050:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	f043 0302 	orr.w	r3, r3, #2
 8017058:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	f043 0301 	orr.w	r3, r3, #1
 8017060:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	b29a      	uxth	r2, r3
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	697a      	ldr	r2, [r7, #20]
 8017072:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8017074:	f7fe fa6c 	bl	8015550 <HAL_GetTick>
 8017078:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801707a:	e00d      	b.n	8017098 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 801707c:	f7fe fa68 	bl	8015550 <HAL_GetTick>
 8017080:	4602      	mov	r2, r0
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	1ad3      	subs	r3, r2, r3
 8017086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801708a:	d301      	bcc.n	8017090 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 801708c:	2301      	movs	r3, #1
 801708e:	e009      	b.n	80170a4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	691b      	ldr	r3, [r3, #16]
 8017096:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8017098:	697b      	ldr	r3, [r7, #20]
 801709a:	f003 0301 	and.w	r3, r3, #1
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d1ec      	bne.n	801707c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80170a2:	2300      	movs	r3, #0
}
 80170a4:	4618      	mov	r0, r3
 80170a6:	3718      	adds	r7, #24
 80170a8:	46bd      	mov	sp, r7
 80170aa:	bd80      	pop	{r7, pc}

080170ac <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80170ac:	b480      	push	{r7}
 80170ae:	b083      	sub	sp, #12
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
 80170b4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80170b6:	683b      	ldr	r3, [r7, #0]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d101      	bne.n	80170c0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80170bc:	2301      	movs	r3, #1
 80170be:	e0d9      	b.n	8017274 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	f003 0310 	and.w	r3, r3, #16
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	bf14      	ite	ne
 80170ce:	2301      	movne	r3, #1
 80170d0:	2300      	moveq	r3, #0
 80170d2:	b2db      	uxtb	r3, r3
 80170d4:	461a      	mov	r2, r3
 80170d6:	683b      	ldr	r3, [r7, #0]
 80170d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	bf0c      	ite	eq
 80170f8:	2301      	moveq	r3, #1
 80170fa:	2300      	movne	r3, #0
 80170fc:	b2db      	uxtb	r3, r3
 80170fe:	461a      	mov	r2, r3
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8017110:	2b00      	cmp	r3, #0
 8017112:	bf14      	ite	ne
 8017114:	2301      	movne	r3, #1
 8017116:	2300      	moveq	r3, #0
 8017118:	b2db      	uxtb	r3, r3
 801711a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801712a:	2b00      	cmp	r3, #0
 801712c:	bf0c      	ite	eq
 801712e:	2301      	moveq	r3, #1
 8017130:	2300      	movne	r3, #0
 8017132:	b2db      	uxtb	r3, r3
 8017134:	461a      	mov	r2, r3
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017144:	2b00      	cmp	r3, #0
 8017146:	bf14      	ite	ne
 8017148:	2301      	movne	r3, #1
 801714a:	2300      	moveq	r3, #0
 801714c:	b2db      	uxtb	r3, r3
 801714e:	461a      	mov	r2, r3
 8017150:	683b      	ldr	r3, [r7, #0]
 8017152:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801717a:	2b00      	cmp	r3, #0
 801717c:	bf0c      	ite	eq
 801717e:	2301      	moveq	r3, #1
 8017180:	2300      	movne	r3, #0
 8017182:	b2db      	uxtb	r3, r3
 8017184:	461a      	mov	r2, r3
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017194:	2b00      	cmp	r3, #0
 8017196:	bf0c      	ite	eq
 8017198:	2301      	moveq	r3, #1
 801719a:	2300      	movne	r3, #0
 801719c:	b2db      	uxtb	r3, r3
 801719e:	461a      	mov	r2, r3
 80171a0:	683b      	ldr	r3, [r7, #0]
 80171a2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	bf14      	ite	ne
 80171b2:	2301      	movne	r3, #1
 80171b4:	2300      	moveq	r3, #0
 80171b6:	b2db      	uxtb	r3, r3
 80171b8:	461a      	mov	r2, r3
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	bf14      	ite	ne
 80171da:	2301      	movne	r3, #1
 80171dc:	2300      	moveq	r3, #0
 80171de:	b2db      	uxtb	r3, r3
 80171e0:	461a      	mov	r2, r3
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	699b      	ldr	r3, [r3, #24]
 80171ec:	f003 0302 	and.w	r3, r3, #2
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	bf14      	ite	ne
 80171f4:	2301      	movne	r3, #1
 80171f6:	2300      	moveq	r3, #0
 80171f8:	b2db      	uxtb	r3, r3
 80171fa:	461a      	mov	r2, r3
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	699b      	ldr	r3, [r3, #24]
 8017208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801720c:	2b00      	cmp	r3, #0
 801720e:	bf0c      	ite	eq
 8017210:	2301      	moveq	r3, #1
 8017212:	2300      	movne	r3, #0
 8017214:	b2db      	uxtb	r3, r3
 8017216:	461a      	mov	r2, r3
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	699b      	ldr	r3, [r3, #24]
 8017224:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	699b      	ldr	r3, [r3, #24]
 8017232:	0c1b      	lsrs	r3, r3, #16
 8017234:	b29a      	uxth	r2, r3
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	699b      	ldr	r3, [r3, #24]
 8017240:	f003 0304 	and.w	r3, r3, #4
 8017244:	2b00      	cmp	r3, #0
 8017246:	bf14      	ite	ne
 8017248:	2301      	movne	r3, #1
 801724a:	2300      	moveq	r3, #0
 801724c:	b2db      	uxtb	r3, r3
 801724e:	461a      	mov	r2, r3
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	699b      	ldr	r3, [r3, #24]
 801725c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8017260:	2b00      	cmp	r3, #0
 8017262:	bf14      	ite	ne
 8017264:	2301      	movne	r3, #1
 8017266:	2300      	moveq	r3, #0
 8017268:	b2db      	uxtb	r3, r3
 801726a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8017272:	2300      	movs	r3, #0
}
 8017274:	4618      	mov	r0, r3
 8017276:	370c      	adds	r7, #12
 8017278:	46bd      	mov	sp, r7
 801727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727e:	4770      	bx	lr

08017280 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801728a:	683b      	ldr	r3, [r7, #0]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d101      	bne.n	8017294 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8017290:	2301      	movs	r3, #1
 8017292:	e00b      	b.n	80172ac <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801729a:	2b10      	cmp	r3, #16
 801729c:	d105      	bne.n	80172aa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 801729e:	6839      	ldr	r1, [r7, #0]
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f000 f883 	bl	80173ac <ETH_SetMACConfig>

    return HAL_OK;
 80172a6:	2300      	movs	r3, #0
 80172a8:	e000      	b.n	80172ac <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80172aa:	2301      	movs	r3, #1
  }
}
 80172ac:	4618      	mov	r0, r3
 80172ae:	3708      	adds	r7, #8
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}

080172b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b084      	sub	sp, #16
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	691b      	ldr	r3, [r3, #16]
 80172c2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	f023 031c 	bic.w	r3, r3, #28
 80172ca:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80172cc:	f002 f916 	bl	80194fc <HAL_RCC_GetHCLKFreq>
 80172d0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	4a1d      	ldr	r2, [pc, #116]	; (801734c <HAL_ETH_SetMDIOClockRange+0x98>)
 80172d6:	4293      	cmp	r3, r2
 80172d8:	d908      	bls.n	80172ec <HAL_ETH_SetMDIOClockRange+0x38>
 80172da:	68bb      	ldr	r3, [r7, #8]
 80172dc:	4a1c      	ldr	r2, [pc, #112]	; (8017350 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80172de:	4293      	cmp	r3, r2
 80172e0:	d804      	bhi.n	80172ec <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	f043 0308 	orr.w	r3, r3, #8
 80172e8:	60fb      	str	r3, [r7, #12]
 80172ea:	e027      	b.n	801733c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	4a18      	ldr	r2, [pc, #96]	; (8017350 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d908      	bls.n	8017306 <HAL_ETH_SetMDIOClockRange+0x52>
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	4a17      	ldr	r2, [pc, #92]	; (8017354 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80172f8:	4293      	cmp	r3, r2
 80172fa:	d204      	bcs.n	8017306 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	f043 030c 	orr.w	r3, r3, #12
 8017302:	60fb      	str	r3, [r7, #12]
 8017304:	e01a      	b.n	801733c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8017306:	68bb      	ldr	r3, [r7, #8]
 8017308:	4a12      	ldr	r2, [pc, #72]	; (8017354 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801730a:	4293      	cmp	r3, r2
 801730c:	d303      	bcc.n	8017316 <HAL_ETH_SetMDIOClockRange+0x62>
 801730e:	68bb      	ldr	r3, [r7, #8]
 8017310:	4a11      	ldr	r2, [pc, #68]	; (8017358 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8017312:	4293      	cmp	r3, r2
 8017314:	d911      	bls.n	801733a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8017316:	68bb      	ldr	r3, [r7, #8]
 8017318:	4a0f      	ldr	r2, [pc, #60]	; (8017358 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801731a:	4293      	cmp	r3, r2
 801731c:	d908      	bls.n	8017330 <HAL_ETH_SetMDIOClockRange+0x7c>
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	4a0e      	ldr	r2, [pc, #56]	; (801735c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8017322:	4293      	cmp	r3, r2
 8017324:	d804      	bhi.n	8017330 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	f043 0304 	orr.w	r3, r3, #4
 801732c:	60fb      	str	r3, [r7, #12]
 801732e:	e005      	b.n	801733c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	f043 0310 	orr.w	r3, r3, #16
 8017336:	60fb      	str	r3, [r7, #12]
 8017338:	e000      	b.n	801733c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801733a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	68fa      	ldr	r2, [r7, #12]
 8017342:	611a      	str	r2, [r3, #16]
}
 8017344:	bf00      	nop
 8017346:	3710      	adds	r7, #16
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}
 801734c:	01312cff 	.word	0x01312cff
 8017350:	02160ebf 	.word	0x02160ebf
 8017354:	03938700 	.word	0x03938700
 8017358:	05f5e0ff 	.word	0x05f5e0ff
 801735c:	08f0d17f 	.word	0x08f0d17f

08017360 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b084      	sub	sp, #16
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8017368:	2300      	movs	r3, #0
 801736a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017374:	699b      	ldr	r3, [r3, #24]
 8017376:	687a      	ldr	r2, [r7, #4]
 8017378:	6812      	ldr	r2, [r2, #0]
 801737a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801737e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017382:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801738c:	699b      	ldr	r3, [r3, #24]
 801738e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017390:	2001      	movs	r0, #1
 8017392:	f7fe f8e9 	bl	8015568 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80173a0:	6193      	str	r3, [r2, #24]
}
 80173a2:	bf00      	nop
 80173a4:	3710      	adds	r7, #16
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
	...

080173ac <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b084      	sub	sp, #16
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
 80173b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80173be:	68fa      	ldr	r2, [r7, #12]
 80173c0:	4b51      	ldr	r3, [pc, #324]	; (8017508 <ETH_SetMACConfig+0x15c>)
 80173c2:	4013      	ands	r3, r2
 80173c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80173c6:	683b      	ldr	r3, [r7, #0]
 80173c8:	7c1b      	ldrb	r3, [r3, #16]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d102      	bne.n	80173d4 <ETH_SetMACConfig+0x28>
 80173ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80173d2:	e000      	b.n	80173d6 <ETH_SetMACConfig+0x2a>
 80173d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	7c5b      	ldrb	r3, [r3, #17]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d102      	bne.n	80173e4 <ETH_SetMACConfig+0x38>
 80173de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80173e2:	e000      	b.n	80173e6 <ETH_SetMACConfig+0x3a>
 80173e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80173e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80173ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	7fdb      	ldrb	r3, [r3, #31]
 80173f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80173f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80173f6:	683b      	ldr	r3, [r7, #0]
 80173f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80173fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80173fc:	683a      	ldr	r2, [r7, #0]
 80173fe:	7f92      	ldrb	r2, [r2, #30]
 8017400:	2a00      	cmp	r2, #0
 8017402:	d102      	bne.n	801740a <ETH_SetMACConfig+0x5e>
 8017404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017408:	e000      	b.n	801740c <ETH_SetMACConfig+0x60>
 801740a:	2200      	movs	r2, #0
                        macconf->Speed |
 801740c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801740e:	683b      	ldr	r3, [r7, #0]
 8017410:	7f1b      	ldrb	r3, [r3, #28]
 8017412:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8017414:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801741a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	791b      	ldrb	r3, [r3, #4]
 8017420:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8017422:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8017424:	683a      	ldr	r2, [r7, #0]
 8017426:	f892 2020 	ldrb.w	r2, [r2, #32]
 801742a:	2a00      	cmp	r2, #0
 801742c:	d102      	bne.n	8017434 <ETH_SetMACConfig+0x88>
 801742e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017432:	e000      	b.n	8017436 <ETH_SetMACConfig+0x8a>
 8017434:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8017436:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	7bdb      	ldrb	r3, [r3, #15]
 801743c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801743e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8017440:	683b      	ldr	r3, [r7, #0]
 8017442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8017444:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801744c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801744e:	4313      	orrs	r3, r2
 8017450:	68fa      	ldr	r2, [r7, #12]
 8017452:	4313      	orrs	r3, r2
 8017454:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	68fa      	ldr	r2, [r7, #12]
 801745c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017466:	2001      	movs	r0, #1
 8017468:	f7fe f87e 	bl	8015568 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	68fa      	ldr	r2, [r7, #12]
 8017472:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	699b      	ldr	r3, [r3, #24]
 801747a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 801747c:	68fa      	ldr	r2, [r7, #12]
 801747e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8017482:	4013      	ands	r3, r2
 8017484:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801748a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801748c:	683a      	ldr	r2, [r7, #0]
 801748e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8017492:	2a00      	cmp	r2, #0
 8017494:	d101      	bne.n	801749a <ETH_SetMACConfig+0xee>
 8017496:	2280      	movs	r2, #128	; 0x80
 8017498:	e000      	b.n	801749c <ETH_SetMACConfig+0xf0>
 801749a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801749c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 801749e:	683b      	ldr	r3, [r7, #0]
 80174a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80174a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80174a4:	683a      	ldr	r2, [r7, #0]
 80174a6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80174aa:	2a01      	cmp	r2, #1
 80174ac:	d101      	bne.n	80174b2 <ETH_SetMACConfig+0x106>
 80174ae:	2208      	movs	r2, #8
 80174b0:	e000      	b.n	80174b4 <ETH_SetMACConfig+0x108>
 80174b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80174b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80174b6:	683a      	ldr	r2, [r7, #0]
 80174b8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80174bc:	2a01      	cmp	r2, #1
 80174be:	d101      	bne.n	80174c4 <ETH_SetMACConfig+0x118>
 80174c0:	2204      	movs	r2, #4
 80174c2:	e000      	b.n	80174c6 <ETH_SetMACConfig+0x11a>
 80174c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80174c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80174c8:	683a      	ldr	r2, [r7, #0]
 80174ca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80174ce:	2a01      	cmp	r2, #1
 80174d0:	d101      	bne.n	80174d6 <ETH_SetMACConfig+0x12a>
 80174d2:	2202      	movs	r2, #2
 80174d4:	e000      	b.n	80174d8 <ETH_SetMACConfig+0x12c>
 80174d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80174d8:	4313      	orrs	r3, r2
 80174da:	68fa      	ldr	r2, [r7, #12]
 80174dc:	4313      	orrs	r3, r2
 80174de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	68fa      	ldr	r2, [r7, #12]
 80174e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	699b      	ldr	r3, [r3, #24]
 80174ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80174f0:	2001      	movs	r0, #1
 80174f2:	f7fe f839 	bl	8015568 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	68fa      	ldr	r2, [r7, #12]
 80174fc:	619a      	str	r2, [r3, #24]
}
 80174fe:	bf00      	nop
 8017500:	3710      	adds	r7, #16
 8017502:	46bd      	mov	sp, r7
 8017504:	bd80      	pop	{r7, pc}
 8017506:	bf00      	nop
 8017508:	ff20810f 	.word	0xff20810f

0801750c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b084      	sub	sp, #16
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
 8017514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801751e:	699b      	ldr	r3, [r3, #24]
 8017520:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8017522:	68fa      	ldr	r2, [r7, #12]
 8017524:	4b3d      	ldr	r3, [pc, #244]	; (801761c <ETH_SetDMAConfig+0x110>)
 8017526:	4013      	ands	r3, r2
 8017528:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	7b1b      	ldrb	r3, [r3, #12]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d102      	bne.n	8017538 <ETH_SetDMAConfig+0x2c>
 8017532:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8017536:	e000      	b.n	801753a <ETH_SetDMAConfig+0x2e>
 8017538:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	7b5b      	ldrb	r3, [r3, #13]
 801753e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017540:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8017542:	683a      	ldr	r2, [r7, #0]
 8017544:	7f52      	ldrb	r2, [r2, #29]
 8017546:	2a00      	cmp	r2, #0
 8017548:	d102      	bne.n	8017550 <ETH_SetDMAConfig+0x44>
 801754a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801754e:	e000      	b.n	8017552 <ETH_SetDMAConfig+0x46>
 8017550:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8017552:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	7b9b      	ldrb	r3, [r3, #14]
 8017558:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801755a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017560:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8017562:	683b      	ldr	r3, [r7, #0]
 8017564:	7f1b      	ldrb	r3, [r3, #28]
 8017566:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8017568:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	7f9b      	ldrb	r3, [r3, #30]
 801756e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8017570:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8017576:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8017578:	683b      	ldr	r3, [r7, #0]
 801757a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801757e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017580:	4313      	orrs	r3, r2
 8017582:	68fa      	ldr	r2, [r7, #12]
 8017584:	4313      	orrs	r3, r2
 8017586:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017590:	461a      	mov	r2, r3
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801759e:	699b      	ldr	r3, [r3, #24]
 80175a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80175a2:	2001      	movs	r0, #1
 80175a4:	f7fd ffe0 	bl	8015568 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175b0:	461a      	mov	r2, r3
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	791b      	ldrb	r3, [r3, #4]
 80175ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80175bc:	683b      	ldr	r3, [r7, #0]
 80175be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80175c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80175c2:	683b      	ldr	r3, [r7, #0]
 80175c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80175c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80175cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80175d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80175d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80175d8:	683b      	ldr	r3, [r7, #0]
 80175da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80175de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80175e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80175e6:	687a      	ldr	r2, [r7, #4]
 80175e8:	6812      	ldr	r2, [r2, #0]
 80175ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80175ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80175f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017600:	2001      	movs	r0, #1
 8017602:	f7fd ffb1 	bl	8015568 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801760e:	461a      	mov	r2, r3
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	6013      	str	r3, [r2, #0]
}
 8017614:	bf00      	nop
 8017616:	3710      	adds	r7, #16
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}
 801761c:	f8de3f23 	.word	0xf8de3f23

08017620 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b0a6      	sub	sp, #152	; 0x98
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8017628:	2301      	movs	r3, #1
 801762a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 801762e:	2301      	movs	r3, #1
 8017630:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8017634:	2300      	movs	r3, #0
 8017636:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8017638:	2300      	movs	r3, #0
 801763a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 801763e:	2301      	movs	r3, #1
 8017640:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8017644:	2300      	movs	r3, #0
 8017646:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 801764a:	2301      	movs	r3, #1
 801764c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8017650:	2300      	movs	r3, #0
 8017652:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8017656:	2300      	movs	r3, #0
 8017658:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801765c:	2300      	movs	r3, #0
 801765e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8017660:	2300      	movs	r3, #0
 8017662:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8017666:	2300      	movs	r3, #0
 8017668:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 801766a:	2300      	movs	r3, #0
 801766c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8017670:	2300      	movs	r3, #0
 8017672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8017676:	2300      	movs	r3, #0
 8017678:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 801767c:	2300      	movs	r3, #0
 801767e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8017682:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017686:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8017688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801768c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801768e:	2300      	movs	r3, #0
 8017690:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8017694:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017698:	4619      	mov	r1, r3
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f7ff fe86 	bl	80173ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80176a0:	2301      	movs	r3, #1
 80176a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80176a4:	2301      	movs	r3, #1
 80176a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80176a8:	2301      	movs	r3, #1
 80176aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80176ae:	2301      	movs	r3, #1
 80176b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80176b2:	2300      	movs	r3, #0
 80176b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80176b6:	2300      	movs	r3, #0
 80176b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80176bc:	2300      	movs	r3, #0
 80176be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80176c2:	2300      	movs	r3, #0
 80176c4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80176c6:	2301      	movs	r3, #1
 80176c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80176cc:	2301      	movs	r3, #1
 80176ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80176d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80176d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80176d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80176da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80176dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80176e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80176e2:	2301      	movs	r3, #1
 80176e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80176e8:	2300      	movs	r3, #0
 80176ea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80176ec:	2300      	movs	r3, #0
 80176ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80176f0:	f107 0308 	add.w	r3, r7, #8
 80176f4:	4619      	mov	r1, r3
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f7ff ff08 	bl	801750c <ETH_SetDMAConfig>
}
 80176fc:	bf00      	nop
 80176fe:	3798      	adds	r7, #152	; 0x98
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}

08017704 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8017704:	b480      	push	{r7}
 8017706:	b087      	sub	sp, #28
 8017708:	af00      	add	r7, sp, #0
 801770a:	60f8      	str	r0, [r7, #12]
 801770c:	60b9      	str	r1, [r7, #8]
 801770e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	3305      	adds	r3, #5
 8017714:	781b      	ldrb	r3, [r3, #0]
 8017716:	021b      	lsls	r3, r3, #8
 8017718:	687a      	ldr	r2, [r7, #4]
 801771a:	3204      	adds	r2, #4
 801771c:	7812      	ldrb	r2, [r2, #0]
 801771e:	4313      	orrs	r3, r2
 8017720:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8017722:	68ba      	ldr	r2, [r7, #8]
 8017724:	4b11      	ldr	r3, [pc, #68]	; (801776c <ETH_MACAddressConfig+0x68>)
 8017726:	4413      	add	r3, r2
 8017728:	461a      	mov	r2, r3
 801772a:	697b      	ldr	r3, [r7, #20]
 801772c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	3303      	adds	r3, #3
 8017732:	781b      	ldrb	r3, [r3, #0]
 8017734:	061a      	lsls	r2, r3, #24
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	3302      	adds	r3, #2
 801773a:	781b      	ldrb	r3, [r3, #0]
 801773c:	041b      	lsls	r3, r3, #16
 801773e:	431a      	orrs	r2, r3
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	3301      	adds	r3, #1
 8017744:	781b      	ldrb	r3, [r3, #0]
 8017746:	021b      	lsls	r3, r3, #8
 8017748:	4313      	orrs	r3, r2
 801774a:	687a      	ldr	r2, [r7, #4]
 801774c:	7812      	ldrb	r2, [r2, #0]
 801774e:	4313      	orrs	r3, r2
 8017750:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8017752:	68ba      	ldr	r2, [r7, #8]
 8017754:	4b06      	ldr	r3, [pc, #24]	; (8017770 <ETH_MACAddressConfig+0x6c>)
 8017756:	4413      	add	r3, r2
 8017758:	461a      	mov	r2, r3
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	6013      	str	r3, [r2, #0]
}
 801775e:	bf00      	nop
 8017760:	371c      	adds	r7, #28
 8017762:	46bd      	mov	sp, r7
 8017764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017768:	4770      	bx	lr
 801776a:	bf00      	nop
 801776c:	40028040 	.word	0x40028040
 8017770:	40028044 	.word	0x40028044

08017774 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8017774:	b480      	push	{r7}
 8017776:	b085      	sub	sp, #20
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801777c:	2300      	movs	r3, #0
 801777e:	60fb      	str	r3, [r7, #12]
 8017780:	e03e      	b.n	8017800 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	68d9      	ldr	r1, [r3, #12]
 8017786:	68fa      	ldr	r2, [r7, #12]
 8017788:	4613      	mov	r3, r2
 801778a:	009b      	lsls	r3, r3, #2
 801778c:	4413      	add	r3, r2
 801778e:	00db      	lsls	r3, r3, #3
 8017790:	440b      	add	r3, r1
 8017792:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	2200      	movs	r2, #0
 8017798:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 801779a:	68bb      	ldr	r3, [r7, #8]
 801779c:	2200      	movs	r2, #0
 801779e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	2200      	movs	r2, #0
 80177a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80177a6:	68bb      	ldr	r3, [r7, #8]
 80177a8:	2200      	movs	r2, #0
 80177aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80177ac:	68b9      	ldr	r1, [r7, #8]
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	68fa      	ldr	r2, [r7, #12]
 80177b2:	3206      	adds	r2, #6
 80177b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80177b8:	68bb      	ldr	r3, [r7, #8]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80177c0:	68bb      	ldr	r3, [r7, #8]
 80177c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2b02      	cmp	r3, #2
 80177c8:	d80c      	bhi.n	80177e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	68d9      	ldr	r1, [r3, #12]
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	1c5a      	adds	r2, r3, #1
 80177d2:	4613      	mov	r3, r2
 80177d4:	009b      	lsls	r3, r3, #2
 80177d6:	4413      	add	r3, r2
 80177d8:	00db      	lsls	r3, r3, #3
 80177da:	440b      	add	r3, r1
 80177dc:	461a      	mov	r2, r3
 80177de:	68bb      	ldr	r3, [r7, #8]
 80177e0:	60da      	str	r2, [r3, #12]
 80177e2:	e004      	b.n	80177ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	68db      	ldr	r3, [r3, #12]
 80177e8:	461a      	mov	r2, r3
 80177ea:	68bb      	ldr	r3, [r7, #8]
 80177ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80177ee:	68bb      	ldr	r3, [r7, #8]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80177f6:	68bb      	ldr	r3, [r7, #8]
 80177f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	3301      	adds	r3, #1
 80177fe:	60fb      	str	r3, [r7, #12]
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	2b03      	cmp	r3, #3
 8017804:	d9bd      	bls.n	8017782 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	2200      	movs	r2, #0
 801780a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	68da      	ldr	r2, [r3, #12]
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017818:	611a      	str	r2, [r3, #16]
}
 801781a:	bf00      	nop
 801781c:	3714      	adds	r7, #20
 801781e:	46bd      	mov	sp, r7
 8017820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017824:	4770      	bx	lr

08017826 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8017826:	b480      	push	{r7}
 8017828:	b085      	sub	sp, #20
 801782a:	af00      	add	r7, sp, #0
 801782c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801782e:	2300      	movs	r3, #0
 8017830:	60fb      	str	r3, [r7, #12]
 8017832:	e046      	b.n	80178c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	6919      	ldr	r1, [r3, #16]
 8017838:	68fa      	ldr	r2, [r7, #12]
 801783a:	4613      	mov	r3, r2
 801783c:	009b      	lsls	r3, r3, #2
 801783e:	4413      	add	r3, r2
 8017840:	00db      	lsls	r3, r3, #3
 8017842:	440b      	add	r3, r1
 8017844:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8017846:	68bb      	ldr	r3, [r7, #8]
 8017848:	2200      	movs	r2, #0
 801784a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 801784c:	68bb      	ldr	r3, [r7, #8]
 801784e:	2200      	movs	r2, #0
 8017850:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8017852:	68bb      	ldr	r3, [r7, #8]
 8017854:	2200      	movs	r2, #0
 8017856:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8017858:	68bb      	ldr	r3, [r7, #8]
 801785a:	2200      	movs	r2, #0
 801785c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 801785e:	68bb      	ldr	r3, [r7, #8]
 8017860:	2200      	movs	r2, #0
 8017862:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8017864:	68bb      	ldr	r3, [r7, #8]
 8017866:	2200      	movs	r2, #0
 8017868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 801786a:	68bb      	ldr	r3, [r7, #8]
 801786c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017870:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8017872:	68bb      	ldr	r3, [r7, #8]
 8017874:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8017878:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 801787a:	68bb      	ldr	r3, [r7, #8]
 801787c:	685b      	ldr	r3, [r3, #4]
 801787e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017882:	68bb      	ldr	r3, [r7, #8]
 8017884:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8017886:	68b9      	ldr	r1, [r7, #8]
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	68fa      	ldr	r2, [r7, #12]
 801788c:	3212      	adds	r2, #18
 801788e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	2b02      	cmp	r3, #2
 8017896:	d80c      	bhi.n	80178b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	6919      	ldr	r1, [r3, #16]
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	1c5a      	adds	r2, r3, #1
 80178a0:	4613      	mov	r3, r2
 80178a2:	009b      	lsls	r3, r3, #2
 80178a4:	4413      	add	r3, r2
 80178a6:	00db      	lsls	r3, r3, #3
 80178a8:	440b      	add	r3, r1
 80178aa:	461a      	mov	r2, r3
 80178ac:	68bb      	ldr	r3, [r7, #8]
 80178ae:	60da      	str	r2, [r3, #12]
 80178b0:	e004      	b.n	80178bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	691b      	ldr	r3, [r3, #16]
 80178b6:	461a      	mov	r2, r3
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	3301      	adds	r3, #1
 80178c0:	60fb      	str	r3, [r7, #12]
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	2b03      	cmp	r3, #3
 80178c6:	d9b5      	bls.n	8017834 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	2200      	movs	r2, #0
 80178cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	2200      	movs	r2, #0
 80178d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2200      	movs	r2, #0
 80178d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	2200      	movs	r2, #0
 80178de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	2200      	movs	r2, #0
 80178e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	691a      	ldr	r2, [r3, #16]
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80178f2:	60da      	str	r2, [r3, #12]
}
 80178f4:	bf00      	nop
 80178f6:	3714      	adds	r7, #20
 80178f8:	46bd      	mov	sp, r7
 80178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fe:	4770      	bx	lr

08017900 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8017900:	b480      	push	{r7}
 8017902:	b08d      	sub	sp, #52	; 0x34
 8017904:	af00      	add	r7, sp, #0
 8017906:	60f8      	str	r0, [r7, #12]
 8017908:	60b9      	str	r1, [r7, #8]
 801790a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	3318      	adds	r3, #24
 8017910:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	691b      	ldr	r3, [r3, #16]
 8017916:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	691b      	ldr	r3, [r3, #16]
 801791c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 801791e:	2300      	movs	r3, #0
 8017920:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801792a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 801792c:	68bb      	ldr	r3, [r7, #8]
 801792e:	689b      	ldr	r3, [r3, #8]
 8017930:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8017932:	2300      	movs	r3, #0
 8017934:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017936:	6a3b      	ldr	r3, [r7, #32]
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801793e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017942:	d007      	beq.n	8017954 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017944:	697a      	ldr	r2, [r7, #20]
 8017946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017948:	3304      	adds	r3, #4
 801794a:	009b      	lsls	r3, r3, #2
 801794c:	4413      	add	r3, r2
 801794e:	685b      	ldr	r3, [r3, #4]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d001      	beq.n	8017958 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8017954:	2302      	movs	r3, #2
 8017956:	e0ff      	b.n	8017b58 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8017958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795a:	3301      	adds	r3, #1
 801795c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801795e:	69fb      	ldr	r3, [r7, #28]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	461a      	mov	r2, r3
 8017964:	6a3b      	ldr	r3, [r7, #32]
 8017966:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017968:	6a3b      	ldr	r3, [r7, #32]
 801796a:	685a      	ldr	r2, [r3, #4]
 801796c:	4b7d      	ldr	r3, [pc, #500]	; (8017b64 <ETH_Prepare_Tx_Descriptors+0x264>)
 801796e:	4013      	ands	r3, r2
 8017970:	69fa      	ldr	r2, [r7, #28]
 8017972:	6852      	ldr	r2, [r2, #4]
 8017974:	431a      	orrs	r2, r3
 8017976:	6a3b      	ldr	r3, [r7, #32]
 8017978:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 801797a:	68bb      	ldr	r3, [r7, #8]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	f003 0301 	and.w	r3, r3, #1
 8017982:	2b00      	cmp	r3, #0
 8017984:	d008      	beq.n	8017998 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8017986:	6a3b      	ldr	r3, [r7, #32]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	695b      	ldr	r3, [r3, #20]
 8017992:	431a      	orrs	r2, r3
 8017994:	6a3b      	ldr	r3, [r7, #32]
 8017996:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8017998:	68bb      	ldr	r3, [r7, #8]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	f003 0320 	and.w	r3, r3, #32
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d008      	beq.n	80179b6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80179a4:	6a3b      	ldr	r3, [r7, #32]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80179ac:	68bb      	ldr	r3, [r7, #8]
 80179ae:	691b      	ldr	r3, [r3, #16]
 80179b0:	431a      	orrs	r2, r3
 80179b2:	6a3b      	ldr	r3, [r7, #32]
 80179b4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80179b6:	68bb      	ldr	r3, [r7, #8]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	f003 0304 	and.w	r3, r3, #4
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d005      	beq.n	80179ce <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80179c2:	6a3b      	ldr	r3, [r7, #32]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80179ca:	6a3b      	ldr	r3, [r7, #32]
 80179cc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80179ce:	6a3b      	ldr	r3, [r7, #32]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80179d6:	6a3b      	ldr	r3, [r7, #32]
 80179d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80179da:	f3bf 8f5f 	dmb	sy
}
 80179de:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80179e0:	6a3b      	ldr	r3, [r7, #32]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80179e8:	6a3b      	ldr	r3, [r7, #32]
 80179ea:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80179ec:	e082      	b.n	8017af4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80179ee:	6a3b      	ldr	r3, [r7, #32]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80179f6:	6a3b      	ldr	r3, [r7, #32]
 80179f8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d006      	beq.n	8017a0e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017a00:	6a3b      	ldr	r3, [r7, #32]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017a08:	6a3b      	ldr	r3, [r7, #32]
 8017a0a:	601a      	str	r2, [r3, #0]
 8017a0c:	e005      	b.n	8017a1a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017a0e:	6a3b      	ldr	r3, [r7, #32]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017a16:	6a3b      	ldr	r3, [r7, #32]
 8017a18:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8017a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a1c:	3301      	adds	r3, #1
 8017a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a22:	2b03      	cmp	r3, #3
 8017a24:	d902      	bls.n	8017a2c <ETH_Prepare_Tx_Descriptors+0x12c>
 8017a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a28:	3b04      	subs	r3, #4
 8017a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017a2c:	697b      	ldr	r3, [r7, #20]
 8017a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a34:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017a36:	6a3b      	ldr	r3, [r7, #32]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8017a3e:	6a3b      	ldr	r3, [r7, #32]
 8017a40:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017a42:	6a3b      	ldr	r3, [r7, #32]
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017a4e:	d007      	beq.n	8017a60 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017a50:	697a      	ldr	r2, [r7, #20]
 8017a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a54:	3304      	adds	r3, #4
 8017a56:	009b      	lsls	r3, r3, #2
 8017a58:	4413      	add	r3, r2
 8017a5a:	685b      	ldr	r3, [r3, #4]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d029      	beq.n	8017ab4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8017a60:	693b      	ldr	r3, [r7, #16]
 8017a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017a64:	697b      	ldr	r3, [r7, #20]
 8017a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a6c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8017a6e:	2300      	movs	r3, #0
 8017a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8017a72:	e019      	b.n	8017aa8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8017a74:	f3bf 8f5f 	dmb	sy
}
 8017a78:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017a7a:	6a3b      	ldr	r3, [r7, #32]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017a82:	6a3b      	ldr	r3, [r7, #32]
 8017a84:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8017a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a88:	3301      	adds	r3, #1
 8017a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a8e:	2b03      	cmp	r3, #3
 8017a90:	d902      	bls.n	8017a98 <ETH_Prepare_Tx_Descriptors+0x198>
 8017a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a94:	3b04      	subs	r3, #4
 8017a96:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017aa0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8017aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aa4:	3301      	adds	r3, #1
 8017aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8017aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d3e1      	bcc.n	8017a74 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8017ab0:	2302      	movs	r3, #2
 8017ab2:	e051      	b.n	8017b58 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8017ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab6:	3301      	adds	r3, #1
 8017ab8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8017aba:	69fb      	ldr	r3, [r7, #28]
 8017abc:	689b      	ldr	r3, [r3, #8]
 8017abe:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8017ac0:	69fb      	ldr	r3, [r7, #28]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	461a      	mov	r2, r3
 8017ac6:	6a3b      	ldr	r3, [r7, #32]
 8017ac8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017aca:	6a3b      	ldr	r3, [r7, #32]
 8017acc:	685a      	ldr	r2, [r3, #4]
 8017ace:	4b25      	ldr	r3, [pc, #148]	; (8017b64 <ETH_Prepare_Tx_Descriptors+0x264>)
 8017ad0:	4013      	ands	r3, r2
 8017ad2:	69fa      	ldr	r2, [r7, #28]
 8017ad4:	6852      	ldr	r2, [r2, #4]
 8017ad6:	431a      	orrs	r2, r3
 8017ad8:	6a3b      	ldr	r3, [r7, #32]
 8017ada:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8017adc:	69bb      	ldr	r3, [r7, #24]
 8017ade:	3301      	adds	r3, #1
 8017ae0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8017ae2:	f3bf 8f5f 	dmb	sy
}
 8017ae6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017ae8:	6a3b      	ldr	r3, [r7, #32]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017af0:	6a3b      	ldr	r3, [r7, #32]
 8017af2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8017af4:	69fb      	ldr	r3, [r7, #28]
 8017af6:	689b      	ldr	r3, [r3, #8]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	f47f af78 	bne.w	80179ee <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d006      	beq.n	8017b12 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017b04:	6a3b      	ldr	r3, [r7, #32]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017b0c:	6a3b      	ldr	r3, [r7, #32]
 8017b0e:	601a      	str	r2, [r3, #0]
 8017b10:	e005      	b.n	8017b1e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017b12:	6a3b      	ldr	r3, [r7, #32]
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017b1a:	6a3b      	ldr	r3, [r7, #32]
 8017b1c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017b1e:	6a3b      	ldr	r3, [r7, #32]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8017b26:	6a3b      	ldr	r3, [r7, #32]
 8017b28:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8017b2a:	697b      	ldr	r3, [r7, #20]
 8017b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017b2e:	6979      	ldr	r1, [r7, #20]
 8017b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b32:	3304      	adds	r3, #4
 8017b34:	009b      	lsls	r3, r3, #2
 8017b36:	440b      	add	r3, r1
 8017b38:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b3e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017b40:	b672      	cpsid	i
}
 8017b42:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8017b44:	697b      	ldr	r3, [r7, #20]
 8017b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017b48:	69bb      	ldr	r3, [r7, #24]
 8017b4a:	4413      	add	r3, r2
 8017b4c:	1c5a      	adds	r2, r3, #1
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8017b52:	b662      	cpsie	i
}
 8017b54:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8017b56:	2300      	movs	r3, #0
}
 8017b58:	4618      	mov	r0, r3
 8017b5a:	3734      	adds	r7, #52	; 0x34
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b62:	4770      	bx	lr
 8017b64:	ffffe000 	.word	0xffffe000

08017b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017b68:	b480      	push	{r7}
 8017b6a:	b089      	sub	sp, #36	; 0x24
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8017b72:	2300      	movs	r3, #0
 8017b74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8017b76:	2300      	movs	r3, #0
 8017b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8017b82:	2300      	movs	r3, #0
 8017b84:	61fb      	str	r3, [r7, #28]
 8017b86:	e175      	b.n	8017e74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8017b88:	2201      	movs	r2, #1
 8017b8a:	69fb      	ldr	r3, [r7, #28]
 8017b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8017b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8017b92:	683b      	ldr	r3, [r7, #0]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	697a      	ldr	r2, [r7, #20]
 8017b98:	4013      	ands	r3, r2
 8017b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017b9c:	693a      	ldr	r2, [r7, #16]
 8017b9e:	697b      	ldr	r3, [r7, #20]
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	f040 8164 	bne.w	8017e6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8017ba6:	683b      	ldr	r3, [r7, #0]
 8017ba8:	685b      	ldr	r3, [r3, #4]
 8017baa:	f003 0303 	and.w	r3, r3, #3
 8017bae:	2b01      	cmp	r3, #1
 8017bb0:	d005      	beq.n	8017bbe <HAL_GPIO_Init+0x56>
 8017bb2:	683b      	ldr	r3, [r7, #0]
 8017bb4:	685b      	ldr	r3, [r3, #4]
 8017bb6:	f003 0303 	and.w	r3, r3, #3
 8017bba:	2b02      	cmp	r3, #2
 8017bbc:	d130      	bne.n	8017c20 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	689b      	ldr	r3, [r3, #8]
 8017bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8017bc4:	69fb      	ldr	r3, [r7, #28]
 8017bc6:	005b      	lsls	r3, r3, #1
 8017bc8:	2203      	movs	r2, #3
 8017bca:	fa02 f303 	lsl.w	r3, r2, r3
 8017bce:	43db      	mvns	r3, r3
 8017bd0:	69ba      	ldr	r2, [r7, #24]
 8017bd2:	4013      	ands	r3, r2
 8017bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8017bd6:	683b      	ldr	r3, [r7, #0]
 8017bd8:	68da      	ldr	r2, [r3, #12]
 8017bda:	69fb      	ldr	r3, [r7, #28]
 8017bdc:	005b      	lsls	r3, r3, #1
 8017bde:	fa02 f303 	lsl.w	r3, r2, r3
 8017be2:	69ba      	ldr	r2, [r7, #24]
 8017be4:	4313      	orrs	r3, r2
 8017be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	69ba      	ldr	r2, [r7, #24]
 8017bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	685b      	ldr	r3, [r3, #4]
 8017bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017bf4:	2201      	movs	r2, #1
 8017bf6:	69fb      	ldr	r3, [r7, #28]
 8017bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8017bfc:	43db      	mvns	r3, r3
 8017bfe:	69ba      	ldr	r2, [r7, #24]
 8017c00:	4013      	ands	r3, r2
 8017c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	685b      	ldr	r3, [r3, #4]
 8017c08:	091b      	lsrs	r3, r3, #4
 8017c0a:	f003 0201 	and.w	r2, r3, #1
 8017c0e:	69fb      	ldr	r3, [r7, #28]
 8017c10:	fa02 f303 	lsl.w	r3, r2, r3
 8017c14:	69ba      	ldr	r2, [r7, #24]
 8017c16:	4313      	orrs	r3, r2
 8017c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	69ba      	ldr	r2, [r7, #24]
 8017c1e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	685b      	ldr	r3, [r3, #4]
 8017c24:	f003 0303 	and.w	r3, r3, #3
 8017c28:	2b03      	cmp	r3, #3
 8017c2a:	d017      	beq.n	8017c5c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	68db      	ldr	r3, [r3, #12]
 8017c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8017c32:	69fb      	ldr	r3, [r7, #28]
 8017c34:	005b      	lsls	r3, r3, #1
 8017c36:	2203      	movs	r2, #3
 8017c38:	fa02 f303 	lsl.w	r3, r2, r3
 8017c3c:	43db      	mvns	r3, r3
 8017c3e:	69ba      	ldr	r2, [r7, #24]
 8017c40:	4013      	ands	r3, r2
 8017c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8017c44:	683b      	ldr	r3, [r7, #0]
 8017c46:	689a      	ldr	r2, [r3, #8]
 8017c48:	69fb      	ldr	r3, [r7, #28]
 8017c4a:	005b      	lsls	r3, r3, #1
 8017c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8017c50:	69ba      	ldr	r2, [r7, #24]
 8017c52:	4313      	orrs	r3, r2
 8017c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	69ba      	ldr	r2, [r7, #24]
 8017c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017c5c:	683b      	ldr	r3, [r7, #0]
 8017c5e:	685b      	ldr	r3, [r3, #4]
 8017c60:	f003 0303 	and.w	r3, r3, #3
 8017c64:	2b02      	cmp	r3, #2
 8017c66:	d123      	bne.n	8017cb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8017c68:	69fb      	ldr	r3, [r7, #28]
 8017c6a:	08da      	lsrs	r2, r3, #3
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	3208      	adds	r2, #8
 8017c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8017c76:	69fb      	ldr	r3, [r7, #28]
 8017c78:	f003 0307 	and.w	r3, r3, #7
 8017c7c:	009b      	lsls	r3, r3, #2
 8017c7e:	220f      	movs	r2, #15
 8017c80:	fa02 f303 	lsl.w	r3, r2, r3
 8017c84:	43db      	mvns	r3, r3
 8017c86:	69ba      	ldr	r2, [r7, #24]
 8017c88:	4013      	ands	r3, r2
 8017c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	691a      	ldr	r2, [r3, #16]
 8017c90:	69fb      	ldr	r3, [r7, #28]
 8017c92:	f003 0307 	and.w	r3, r3, #7
 8017c96:	009b      	lsls	r3, r3, #2
 8017c98:	fa02 f303 	lsl.w	r3, r2, r3
 8017c9c:	69ba      	ldr	r2, [r7, #24]
 8017c9e:	4313      	orrs	r3, r2
 8017ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8017ca2:	69fb      	ldr	r3, [r7, #28]
 8017ca4:	08da      	lsrs	r2, r3, #3
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	3208      	adds	r2, #8
 8017caa:	69b9      	ldr	r1, [r7, #24]
 8017cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8017cb6:	69fb      	ldr	r3, [r7, #28]
 8017cb8:	005b      	lsls	r3, r3, #1
 8017cba:	2203      	movs	r2, #3
 8017cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8017cc0:	43db      	mvns	r3, r3
 8017cc2:	69ba      	ldr	r2, [r7, #24]
 8017cc4:	4013      	ands	r3, r2
 8017cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	685b      	ldr	r3, [r3, #4]
 8017ccc:	f003 0203 	and.w	r2, r3, #3
 8017cd0:	69fb      	ldr	r3, [r7, #28]
 8017cd2:	005b      	lsls	r3, r3, #1
 8017cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8017cd8:	69ba      	ldr	r2, [r7, #24]
 8017cda:	4313      	orrs	r3, r2
 8017cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	69ba      	ldr	r2, [r7, #24]
 8017ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8017ce4:	683b      	ldr	r3, [r7, #0]
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	f000 80be 	beq.w	8017e6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017cf2:	4b66      	ldr	r3, [pc, #408]	; (8017e8c <HAL_GPIO_Init+0x324>)
 8017cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cf6:	4a65      	ldr	r2, [pc, #404]	; (8017e8c <HAL_GPIO_Init+0x324>)
 8017cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8017cfe:	4b63      	ldr	r3, [pc, #396]	; (8017e8c <HAL_GPIO_Init+0x324>)
 8017d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017d06:	60fb      	str	r3, [r7, #12]
 8017d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8017d0a:	4a61      	ldr	r2, [pc, #388]	; (8017e90 <HAL_GPIO_Init+0x328>)
 8017d0c:	69fb      	ldr	r3, [r7, #28]
 8017d0e:	089b      	lsrs	r3, r3, #2
 8017d10:	3302      	adds	r3, #2
 8017d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8017d18:	69fb      	ldr	r3, [r7, #28]
 8017d1a:	f003 0303 	and.w	r3, r3, #3
 8017d1e:	009b      	lsls	r3, r3, #2
 8017d20:	220f      	movs	r2, #15
 8017d22:	fa02 f303 	lsl.w	r3, r2, r3
 8017d26:	43db      	mvns	r3, r3
 8017d28:	69ba      	ldr	r2, [r7, #24]
 8017d2a:	4013      	ands	r3, r2
 8017d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	4a58      	ldr	r2, [pc, #352]	; (8017e94 <HAL_GPIO_Init+0x32c>)
 8017d32:	4293      	cmp	r3, r2
 8017d34:	d037      	beq.n	8017da6 <HAL_GPIO_Init+0x23e>
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	4a57      	ldr	r2, [pc, #348]	; (8017e98 <HAL_GPIO_Init+0x330>)
 8017d3a:	4293      	cmp	r3, r2
 8017d3c:	d031      	beq.n	8017da2 <HAL_GPIO_Init+0x23a>
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	4a56      	ldr	r2, [pc, #344]	; (8017e9c <HAL_GPIO_Init+0x334>)
 8017d42:	4293      	cmp	r3, r2
 8017d44:	d02b      	beq.n	8017d9e <HAL_GPIO_Init+0x236>
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	4a55      	ldr	r2, [pc, #340]	; (8017ea0 <HAL_GPIO_Init+0x338>)
 8017d4a:	4293      	cmp	r3, r2
 8017d4c:	d025      	beq.n	8017d9a <HAL_GPIO_Init+0x232>
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	4a54      	ldr	r2, [pc, #336]	; (8017ea4 <HAL_GPIO_Init+0x33c>)
 8017d52:	4293      	cmp	r3, r2
 8017d54:	d01f      	beq.n	8017d96 <HAL_GPIO_Init+0x22e>
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	4a53      	ldr	r2, [pc, #332]	; (8017ea8 <HAL_GPIO_Init+0x340>)
 8017d5a:	4293      	cmp	r3, r2
 8017d5c:	d019      	beq.n	8017d92 <HAL_GPIO_Init+0x22a>
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	4a52      	ldr	r2, [pc, #328]	; (8017eac <HAL_GPIO_Init+0x344>)
 8017d62:	4293      	cmp	r3, r2
 8017d64:	d013      	beq.n	8017d8e <HAL_GPIO_Init+0x226>
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	4a51      	ldr	r2, [pc, #324]	; (8017eb0 <HAL_GPIO_Init+0x348>)
 8017d6a:	4293      	cmp	r3, r2
 8017d6c:	d00d      	beq.n	8017d8a <HAL_GPIO_Init+0x222>
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	4a50      	ldr	r2, [pc, #320]	; (8017eb4 <HAL_GPIO_Init+0x34c>)
 8017d72:	4293      	cmp	r3, r2
 8017d74:	d007      	beq.n	8017d86 <HAL_GPIO_Init+0x21e>
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	4a4f      	ldr	r2, [pc, #316]	; (8017eb8 <HAL_GPIO_Init+0x350>)
 8017d7a:	4293      	cmp	r3, r2
 8017d7c:	d101      	bne.n	8017d82 <HAL_GPIO_Init+0x21a>
 8017d7e:	2309      	movs	r3, #9
 8017d80:	e012      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017d82:	230a      	movs	r3, #10
 8017d84:	e010      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017d86:	2308      	movs	r3, #8
 8017d88:	e00e      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017d8a:	2307      	movs	r3, #7
 8017d8c:	e00c      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017d8e:	2306      	movs	r3, #6
 8017d90:	e00a      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017d92:	2305      	movs	r3, #5
 8017d94:	e008      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017d96:	2304      	movs	r3, #4
 8017d98:	e006      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017d9a:	2303      	movs	r3, #3
 8017d9c:	e004      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017d9e:	2302      	movs	r3, #2
 8017da0:	e002      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017da2:	2301      	movs	r3, #1
 8017da4:	e000      	b.n	8017da8 <HAL_GPIO_Init+0x240>
 8017da6:	2300      	movs	r3, #0
 8017da8:	69fa      	ldr	r2, [r7, #28]
 8017daa:	f002 0203 	and.w	r2, r2, #3
 8017dae:	0092      	lsls	r2, r2, #2
 8017db0:	4093      	lsls	r3, r2
 8017db2:	69ba      	ldr	r2, [r7, #24]
 8017db4:	4313      	orrs	r3, r2
 8017db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8017db8:	4935      	ldr	r1, [pc, #212]	; (8017e90 <HAL_GPIO_Init+0x328>)
 8017dba:	69fb      	ldr	r3, [r7, #28]
 8017dbc:	089b      	lsrs	r3, r3, #2
 8017dbe:	3302      	adds	r3, #2
 8017dc0:	69ba      	ldr	r2, [r7, #24]
 8017dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8017dc6:	4b3d      	ldr	r3, [pc, #244]	; (8017ebc <HAL_GPIO_Init+0x354>)
 8017dc8:	689b      	ldr	r3, [r3, #8]
 8017dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017dcc:	693b      	ldr	r3, [r7, #16]
 8017dce:	43db      	mvns	r3, r3
 8017dd0:	69ba      	ldr	r2, [r7, #24]
 8017dd2:	4013      	ands	r3, r2
 8017dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8017dd6:	683b      	ldr	r3, [r7, #0]
 8017dd8:	685b      	ldr	r3, [r3, #4]
 8017dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d003      	beq.n	8017dea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8017de2:	69ba      	ldr	r2, [r7, #24]
 8017de4:	693b      	ldr	r3, [r7, #16]
 8017de6:	4313      	orrs	r3, r2
 8017de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017dea:	4a34      	ldr	r2, [pc, #208]	; (8017ebc <HAL_GPIO_Init+0x354>)
 8017dec:	69bb      	ldr	r3, [r7, #24]
 8017dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017df0:	4b32      	ldr	r3, [pc, #200]	; (8017ebc <HAL_GPIO_Init+0x354>)
 8017df2:	68db      	ldr	r3, [r3, #12]
 8017df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017df6:	693b      	ldr	r3, [r7, #16]
 8017df8:	43db      	mvns	r3, r3
 8017dfa:	69ba      	ldr	r2, [r7, #24]
 8017dfc:	4013      	ands	r3, r2
 8017dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	685b      	ldr	r3, [r3, #4]
 8017e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d003      	beq.n	8017e14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8017e0c:	69ba      	ldr	r2, [r7, #24]
 8017e0e:	693b      	ldr	r3, [r7, #16]
 8017e10:	4313      	orrs	r3, r2
 8017e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017e14:	4a29      	ldr	r2, [pc, #164]	; (8017ebc <HAL_GPIO_Init+0x354>)
 8017e16:	69bb      	ldr	r3, [r7, #24]
 8017e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8017e1a:	4b28      	ldr	r3, [pc, #160]	; (8017ebc <HAL_GPIO_Init+0x354>)
 8017e1c:	685b      	ldr	r3, [r3, #4]
 8017e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	43db      	mvns	r3, r3
 8017e24:	69ba      	ldr	r2, [r7, #24]
 8017e26:	4013      	ands	r3, r2
 8017e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d003      	beq.n	8017e3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8017e36:	69ba      	ldr	r2, [r7, #24]
 8017e38:	693b      	ldr	r3, [r7, #16]
 8017e3a:	4313      	orrs	r3, r2
 8017e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017e3e:	4a1f      	ldr	r2, [pc, #124]	; (8017ebc <HAL_GPIO_Init+0x354>)
 8017e40:	69bb      	ldr	r3, [r7, #24]
 8017e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017e44:	4b1d      	ldr	r3, [pc, #116]	; (8017ebc <HAL_GPIO_Init+0x354>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017e4a:	693b      	ldr	r3, [r7, #16]
 8017e4c:	43db      	mvns	r3, r3
 8017e4e:	69ba      	ldr	r2, [r7, #24]
 8017e50:	4013      	ands	r3, r2
 8017e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8017e54:	683b      	ldr	r3, [r7, #0]
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d003      	beq.n	8017e68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8017e60:	69ba      	ldr	r2, [r7, #24]
 8017e62:	693b      	ldr	r3, [r7, #16]
 8017e64:	4313      	orrs	r3, r2
 8017e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8017e68:	4a14      	ldr	r2, [pc, #80]	; (8017ebc <HAL_GPIO_Init+0x354>)
 8017e6a:	69bb      	ldr	r3, [r7, #24]
 8017e6c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8017e6e:	69fb      	ldr	r3, [r7, #28]
 8017e70:	3301      	adds	r3, #1
 8017e72:	61fb      	str	r3, [r7, #28]
 8017e74:	69fb      	ldr	r3, [r7, #28]
 8017e76:	2b0f      	cmp	r3, #15
 8017e78:	f67f ae86 	bls.w	8017b88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8017e7c:	bf00      	nop
 8017e7e:	bf00      	nop
 8017e80:	3724      	adds	r7, #36	; 0x24
 8017e82:	46bd      	mov	sp, r7
 8017e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e88:	4770      	bx	lr
 8017e8a:	bf00      	nop
 8017e8c:	40023800 	.word	0x40023800
 8017e90:	40013800 	.word	0x40013800
 8017e94:	40020000 	.word	0x40020000
 8017e98:	40020400 	.word	0x40020400
 8017e9c:	40020800 	.word	0x40020800
 8017ea0:	40020c00 	.word	0x40020c00
 8017ea4:	40021000 	.word	0x40021000
 8017ea8:	40021400 	.word	0x40021400
 8017eac:	40021800 	.word	0x40021800
 8017eb0:	40021c00 	.word	0x40021c00
 8017eb4:	40022000 	.word	0x40022000
 8017eb8:	40022400 	.word	0x40022400
 8017ebc:	40013c00 	.word	0x40013c00

08017ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017ec0:	b480      	push	{r7}
 8017ec2:	b085      	sub	sp, #20
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	460b      	mov	r3, r1
 8017eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	691a      	ldr	r2, [r3, #16]
 8017ed0:	887b      	ldrh	r3, [r7, #2]
 8017ed2:	4013      	ands	r3, r2
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d002      	beq.n	8017ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017ed8:	2301      	movs	r3, #1
 8017eda:	73fb      	strb	r3, [r7, #15]
 8017edc:	e001      	b.n	8017ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017ede:	2300      	movs	r3, #0
 8017ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	3714      	adds	r7, #20
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eee:	4770      	bx	lr

08017ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017ef0:	b480      	push	{r7}
 8017ef2:	b083      	sub	sp, #12
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
 8017ef8:	460b      	mov	r3, r1
 8017efa:	807b      	strh	r3, [r7, #2]
 8017efc:	4613      	mov	r3, r2
 8017efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017f00:	787b      	ldrb	r3, [r7, #1]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d003      	beq.n	8017f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017f06:	887a      	ldrh	r2, [r7, #2]
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8017f0c:	e003      	b.n	8017f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8017f0e:	887b      	ldrh	r3, [r7, #2]
 8017f10:	041a      	lsls	r2, r3, #16
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	619a      	str	r2, [r3, #24]
}
 8017f16:	bf00      	nop
 8017f18:	370c      	adds	r7, #12
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f20:	4770      	bx	lr

08017f22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017f22:	b480      	push	{r7}
 8017f24:	b085      	sub	sp, #20
 8017f26:	af00      	add	r7, sp, #0
 8017f28:	6078      	str	r0, [r7, #4]
 8017f2a:	460b      	mov	r3, r1
 8017f2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	695b      	ldr	r3, [r3, #20]
 8017f32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8017f34:	887a      	ldrh	r2, [r7, #2]
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	4013      	ands	r3, r2
 8017f3a:	041a      	lsls	r2, r3, #16
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	43d9      	mvns	r1, r3
 8017f40:	887b      	ldrh	r3, [r7, #2]
 8017f42:	400b      	ands	r3, r1
 8017f44:	431a      	orrs	r2, r3
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	619a      	str	r2, [r3, #24]
}
 8017f4a:	bf00      	nop
 8017f4c:	3714      	adds	r7, #20
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f54:	4770      	bx	lr
	...

08017f58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	b082      	sub	sp, #8
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	4603      	mov	r3, r0
 8017f60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8017f62:	4b08      	ldr	r3, [pc, #32]	; (8017f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017f64:	695a      	ldr	r2, [r3, #20]
 8017f66:	88fb      	ldrh	r3, [r7, #6]
 8017f68:	4013      	ands	r3, r2
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d006      	beq.n	8017f7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8017f6e:	4a05      	ldr	r2, [pc, #20]	; (8017f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017f70:	88fb      	ldrh	r3, [r7, #6]
 8017f72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8017f74:	88fb      	ldrh	r3, [r7, #6]
 8017f76:	4618      	mov	r0, r3
 8017f78:	f000 f806 	bl	8017f88 <HAL_GPIO_EXTI_Callback>
  }
}
 8017f7c:	bf00      	nop
 8017f7e:	3708      	adds	r7, #8
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}
 8017f84:	40013c00 	.word	0x40013c00

08017f88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8017f88:	b480      	push	{r7}
 8017f8a:	b083      	sub	sp, #12
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	4603      	mov	r3, r0
 8017f90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8017f92:	bf00      	nop
 8017f94:	370c      	adds	r7, #12
 8017f96:	46bd      	mov	sp, r7
 8017f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9c:	4770      	bx	lr
	...

08017fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d101      	bne.n	8017fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8017fae:	2301      	movs	r3, #1
 8017fb0:	e07f      	b.n	80180b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017fb8:	b2db      	uxtb	r3, r3
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d106      	bne.n	8017fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	f7fb fa34 	bl	8013434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2224      	movs	r2, #36	; 0x24
 8017fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	681a      	ldr	r2, [r3, #0]
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	f022 0201 	bic.w	r2, r2, #1
 8017fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	685a      	ldr	r2, [r3, #4]
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8017ff0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	689a      	ldr	r2, [r3, #8]
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018000:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	68db      	ldr	r3, [r3, #12]
 8018006:	2b01      	cmp	r3, #1
 8018008:	d107      	bne.n	801801a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	689a      	ldr	r2, [r3, #8]
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018016:	609a      	str	r2, [r3, #8]
 8018018:	e006      	b.n	8018028 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	689a      	ldr	r2, [r3, #8]
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8018026:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	68db      	ldr	r3, [r3, #12]
 801802c:	2b02      	cmp	r3, #2
 801802e:	d104      	bne.n	801803a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	6859      	ldr	r1, [r3, #4]
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	681a      	ldr	r2, [r3, #0]
 8018044:	4b1d      	ldr	r3, [pc, #116]	; (80180bc <HAL_I2C_Init+0x11c>)
 8018046:	430b      	orrs	r3, r1
 8018048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	68da      	ldr	r2, [r3, #12]
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	691a      	ldr	r2, [r3, #16]
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	695b      	ldr	r3, [r3, #20]
 8018062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	699b      	ldr	r3, [r3, #24]
 801806a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	430a      	orrs	r2, r1
 8018072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	69d9      	ldr	r1, [r3, #28]
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	6a1a      	ldr	r2, [r3, #32]
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	430a      	orrs	r2, r1
 8018082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	681a      	ldr	r2, [r3, #0]
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	f042 0201 	orr.w	r2, r2, #1
 8018092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	2200      	movs	r2, #0
 8018098:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2220      	movs	r2, #32
 801809e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2200      	movs	r2, #0
 80180a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2200      	movs	r2, #0
 80180ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80180b0:	2300      	movs	r3, #0
}
 80180b2:	4618      	mov	r0, r3
 80180b4:	3708      	adds	r7, #8
 80180b6:	46bd      	mov	sp, r7
 80180b8:	bd80      	pop	{r7, pc}
 80180ba:	bf00      	nop
 80180bc:	02008000 	.word	0x02008000

080180c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b088      	sub	sp, #32
 80180c4:	af02      	add	r7, sp, #8
 80180c6:	60f8      	str	r0, [r7, #12]
 80180c8:	4608      	mov	r0, r1
 80180ca:	4611      	mov	r1, r2
 80180cc:	461a      	mov	r2, r3
 80180ce:	4603      	mov	r3, r0
 80180d0:	817b      	strh	r3, [r7, #10]
 80180d2:	460b      	mov	r3, r1
 80180d4:	813b      	strh	r3, [r7, #8]
 80180d6:	4613      	mov	r3, r2
 80180d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80180e0:	b2db      	uxtb	r3, r3
 80180e2:	2b20      	cmp	r3, #32
 80180e4:	f040 80f9 	bne.w	80182da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80180e8:	6a3b      	ldr	r3, [r7, #32]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d002      	beq.n	80180f4 <HAL_I2C_Mem_Write+0x34>
 80180ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d105      	bne.n	8018100 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80180fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80180fc:	2301      	movs	r3, #1
 80180fe:	e0ed      	b.n	80182dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018106:	2b01      	cmp	r3, #1
 8018108:	d101      	bne.n	801810e <HAL_I2C_Mem_Write+0x4e>
 801810a:	2302      	movs	r3, #2
 801810c:	e0e6      	b.n	80182dc <HAL_I2C_Mem_Write+0x21c>
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	2201      	movs	r2, #1
 8018112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018116:	f7fd fa1b 	bl	8015550 <HAL_GetTick>
 801811a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801811c:	697b      	ldr	r3, [r7, #20]
 801811e:	9300      	str	r3, [sp, #0]
 8018120:	2319      	movs	r3, #25
 8018122:	2201      	movs	r2, #1
 8018124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018128:	68f8      	ldr	r0, [r7, #12]
 801812a:	f000 fac3 	bl	80186b4 <I2C_WaitOnFlagUntilTimeout>
 801812e:	4603      	mov	r3, r0
 8018130:	2b00      	cmp	r3, #0
 8018132:	d001      	beq.n	8018138 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8018134:	2301      	movs	r3, #1
 8018136:	e0d1      	b.n	80182dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	2221      	movs	r2, #33	; 0x21
 801813c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	2240      	movs	r2, #64	; 0x40
 8018144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	2200      	movs	r2, #0
 801814c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	6a3a      	ldr	r2, [r7, #32]
 8018152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018158:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	2200      	movs	r2, #0
 801815e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018160:	88f8      	ldrh	r0, [r7, #6]
 8018162:	893a      	ldrh	r2, [r7, #8]
 8018164:	8979      	ldrh	r1, [r7, #10]
 8018166:	697b      	ldr	r3, [r7, #20]
 8018168:	9301      	str	r3, [sp, #4]
 801816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801816c:	9300      	str	r3, [sp, #0]
 801816e:	4603      	mov	r3, r0
 8018170:	68f8      	ldr	r0, [r7, #12]
 8018172:	f000 f9d3 	bl	801851c <I2C_RequestMemoryWrite>
 8018176:	4603      	mov	r3, r0
 8018178:	2b00      	cmp	r3, #0
 801817a:	d005      	beq.n	8018188 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	2200      	movs	r2, #0
 8018180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018184:	2301      	movs	r3, #1
 8018186:	e0a9      	b.n	80182dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801818c:	b29b      	uxth	r3, r3
 801818e:	2bff      	cmp	r3, #255	; 0xff
 8018190:	d90e      	bls.n	80181b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018192:	68fb      	ldr	r3, [r7, #12]
 8018194:	22ff      	movs	r2, #255	; 0xff
 8018196:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801819c:	b2da      	uxtb	r2, r3
 801819e:	8979      	ldrh	r1, [r7, #10]
 80181a0:	2300      	movs	r3, #0
 80181a2:	9300      	str	r3, [sp, #0]
 80181a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80181a8:	68f8      	ldr	r0, [r7, #12]
 80181aa:	f000 fc1f 	bl	80189ec <I2C_TransferConfig>
 80181ae:	e00f      	b.n	80181d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181b4:	b29a      	uxth	r2, r3
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181be:	b2da      	uxtb	r2, r3
 80181c0:	8979      	ldrh	r1, [r7, #10]
 80181c2:	2300      	movs	r3, #0
 80181c4:	9300      	str	r3, [sp, #0]
 80181c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80181ca:	68f8      	ldr	r0, [r7, #12]
 80181cc:	f000 fc0e 	bl	80189ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80181d0:	697a      	ldr	r2, [r7, #20]
 80181d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80181d4:	68f8      	ldr	r0, [r7, #12]
 80181d6:	f000 faad 	bl	8018734 <I2C_WaitOnTXISFlagUntilTimeout>
 80181da:	4603      	mov	r3, r0
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d001      	beq.n	80181e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80181e0:	2301      	movs	r3, #1
 80181e2:	e07b      	b.n	80182dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181e8:	781a      	ldrb	r2, [r3, #0]
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181f4:	1c5a      	adds	r2, r3, #1
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181fe:	b29b      	uxth	r3, r3
 8018200:	3b01      	subs	r3, #1
 8018202:	b29a      	uxth	r2, r3
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801820c:	3b01      	subs	r3, #1
 801820e:	b29a      	uxth	r2, r3
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018218:	b29b      	uxth	r3, r3
 801821a:	2b00      	cmp	r3, #0
 801821c:	d034      	beq.n	8018288 <HAL_I2C_Mem_Write+0x1c8>
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018222:	2b00      	cmp	r3, #0
 8018224:	d130      	bne.n	8018288 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018226:	697b      	ldr	r3, [r7, #20]
 8018228:	9300      	str	r3, [sp, #0]
 801822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801822c:	2200      	movs	r2, #0
 801822e:	2180      	movs	r1, #128	; 0x80
 8018230:	68f8      	ldr	r0, [r7, #12]
 8018232:	f000 fa3f 	bl	80186b4 <I2C_WaitOnFlagUntilTimeout>
 8018236:	4603      	mov	r3, r0
 8018238:	2b00      	cmp	r3, #0
 801823a:	d001      	beq.n	8018240 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801823c:	2301      	movs	r3, #1
 801823e:	e04d      	b.n	80182dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018244:	b29b      	uxth	r3, r3
 8018246:	2bff      	cmp	r3, #255	; 0xff
 8018248:	d90e      	bls.n	8018268 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	22ff      	movs	r2, #255	; 0xff
 801824e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018254:	b2da      	uxtb	r2, r3
 8018256:	8979      	ldrh	r1, [r7, #10]
 8018258:	2300      	movs	r3, #0
 801825a:	9300      	str	r3, [sp, #0]
 801825c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018260:	68f8      	ldr	r0, [r7, #12]
 8018262:	f000 fbc3 	bl	80189ec <I2C_TransferConfig>
 8018266:	e00f      	b.n	8018288 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801826c:	b29a      	uxth	r2, r3
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018276:	b2da      	uxtb	r2, r3
 8018278:	8979      	ldrh	r1, [r7, #10]
 801827a:	2300      	movs	r3, #0
 801827c:	9300      	str	r3, [sp, #0]
 801827e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018282:	68f8      	ldr	r0, [r7, #12]
 8018284:	f000 fbb2 	bl	80189ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801828c:	b29b      	uxth	r3, r3
 801828e:	2b00      	cmp	r3, #0
 8018290:	d19e      	bne.n	80181d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018292:	697a      	ldr	r2, [r7, #20]
 8018294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018296:	68f8      	ldr	r0, [r7, #12]
 8018298:	f000 fa8c 	bl	80187b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 801829c:	4603      	mov	r3, r0
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d001      	beq.n	80182a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80182a2:	2301      	movs	r3, #1
 80182a4:	e01a      	b.n	80182dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	2220      	movs	r2, #32
 80182ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	6859      	ldr	r1, [r3, #4]
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	681a      	ldr	r2, [r3, #0]
 80182b8:	4b0a      	ldr	r3, [pc, #40]	; (80182e4 <HAL_I2C_Mem_Write+0x224>)
 80182ba:	400b      	ands	r3, r1
 80182bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	2220      	movs	r2, #32
 80182c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	2200      	movs	r2, #0
 80182ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	2200      	movs	r2, #0
 80182d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80182d6:	2300      	movs	r3, #0
 80182d8:	e000      	b.n	80182dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80182da:	2302      	movs	r3, #2
  }
}
 80182dc:	4618      	mov	r0, r3
 80182de:	3718      	adds	r7, #24
 80182e0:	46bd      	mov	sp, r7
 80182e2:	bd80      	pop	{r7, pc}
 80182e4:	fe00e800 	.word	0xfe00e800

080182e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b088      	sub	sp, #32
 80182ec:	af02      	add	r7, sp, #8
 80182ee:	60f8      	str	r0, [r7, #12]
 80182f0:	4608      	mov	r0, r1
 80182f2:	4611      	mov	r1, r2
 80182f4:	461a      	mov	r2, r3
 80182f6:	4603      	mov	r3, r0
 80182f8:	817b      	strh	r3, [r7, #10]
 80182fa:	460b      	mov	r3, r1
 80182fc:	813b      	strh	r3, [r7, #8]
 80182fe:	4613      	mov	r3, r2
 8018300:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018308:	b2db      	uxtb	r3, r3
 801830a:	2b20      	cmp	r3, #32
 801830c:	f040 80fd 	bne.w	801850a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8018310:	6a3b      	ldr	r3, [r7, #32]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d002      	beq.n	801831c <HAL_I2C_Mem_Read+0x34>
 8018316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018318:	2b00      	cmp	r3, #0
 801831a:	d105      	bne.n	8018328 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018322:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018324:	2301      	movs	r3, #1
 8018326:	e0f1      	b.n	801850c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801832e:	2b01      	cmp	r3, #1
 8018330:	d101      	bne.n	8018336 <HAL_I2C_Mem_Read+0x4e>
 8018332:	2302      	movs	r3, #2
 8018334:	e0ea      	b.n	801850c <HAL_I2C_Mem_Read+0x224>
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	2201      	movs	r2, #1
 801833a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801833e:	f7fd f907 	bl	8015550 <HAL_GetTick>
 8018342:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	9300      	str	r3, [sp, #0]
 8018348:	2319      	movs	r3, #25
 801834a:	2201      	movs	r2, #1
 801834c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018350:	68f8      	ldr	r0, [r7, #12]
 8018352:	f000 f9af 	bl	80186b4 <I2C_WaitOnFlagUntilTimeout>
 8018356:	4603      	mov	r3, r0
 8018358:	2b00      	cmp	r3, #0
 801835a:	d001      	beq.n	8018360 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801835c:	2301      	movs	r3, #1
 801835e:	e0d5      	b.n	801850c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	2222      	movs	r2, #34	; 0x22
 8018364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	2240      	movs	r2, #64	; 0x40
 801836c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	2200      	movs	r2, #0
 8018374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	6a3a      	ldr	r2, [r7, #32]
 801837a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	2200      	movs	r2, #0
 8018386:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018388:	88f8      	ldrh	r0, [r7, #6]
 801838a:	893a      	ldrh	r2, [r7, #8]
 801838c:	8979      	ldrh	r1, [r7, #10]
 801838e:	697b      	ldr	r3, [r7, #20]
 8018390:	9301      	str	r3, [sp, #4]
 8018392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018394:	9300      	str	r3, [sp, #0]
 8018396:	4603      	mov	r3, r0
 8018398:	68f8      	ldr	r0, [r7, #12]
 801839a:	f000 f913 	bl	80185c4 <I2C_RequestMemoryRead>
 801839e:	4603      	mov	r3, r0
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d005      	beq.n	80183b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	2200      	movs	r2, #0
 80183a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80183ac:	2301      	movs	r3, #1
 80183ae:	e0ad      	b.n	801850c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	2bff      	cmp	r3, #255	; 0xff
 80183b8:	d90e      	bls.n	80183d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	22ff      	movs	r2, #255	; 0xff
 80183be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80183c4:	b2da      	uxtb	r2, r3
 80183c6:	8979      	ldrh	r1, [r7, #10]
 80183c8:	4b52      	ldr	r3, [pc, #328]	; (8018514 <HAL_I2C_Mem_Read+0x22c>)
 80183ca:	9300      	str	r3, [sp, #0]
 80183cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80183d0:	68f8      	ldr	r0, [r7, #12]
 80183d2:	f000 fb0b 	bl	80189ec <I2C_TransferConfig>
 80183d6:	e00f      	b.n	80183f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80183dc:	b29a      	uxth	r2, r3
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80183e6:	b2da      	uxtb	r2, r3
 80183e8:	8979      	ldrh	r1, [r7, #10]
 80183ea:	4b4a      	ldr	r3, [pc, #296]	; (8018514 <HAL_I2C_Mem_Read+0x22c>)
 80183ec:	9300      	str	r3, [sp, #0]
 80183ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80183f2:	68f8      	ldr	r0, [r7, #12]
 80183f4:	f000 fafa 	bl	80189ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80183f8:	697b      	ldr	r3, [r7, #20]
 80183fa:	9300      	str	r3, [sp, #0]
 80183fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fe:	2200      	movs	r2, #0
 8018400:	2104      	movs	r1, #4
 8018402:	68f8      	ldr	r0, [r7, #12]
 8018404:	f000 f956 	bl	80186b4 <I2C_WaitOnFlagUntilTimeout>
 8018408:	4603      	mov	r3, r0
 801840a:	2b00      	cmp	r3, #0
 801840c:	d001      	beq.n	8018412 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801840e:	2301      	movs	r3, #1
 8018410:	e07c      	b.n	801850c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801841c:	b2d2      	uxtb	r2, r2
 801841e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018424:	1c5a      	adds	r2, r3, #1
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801842e:	3b01      	subs	r3, #1
 8018430:	b29a      	uxth	r2, r3
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801843a:	b29b      	uxth	r3, r3
 801843c:	3b01      	subs	r3, #1
 801843e:	b29a      	uxth	r2, r3
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018448:	b29b      	uxth	r3, r3
 801844a:	2b00      	cmp	r3, #0
 801844c:	d034      	beq.n	80184b8 <HAL_I2C_Mem_Read+0x1d0>
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018452:	2b00      	cmp	r3, #0
 8018454:	d130      	bne.n	80184b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018456:	697b      	ldr	r3, [r7, #20]
 8018458:	9300      	str	r3, [sp, #0]
 801845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801845c:	2200      	movs	r2, #0
 801845e:	2180      	movs	r1, #128	; 0x80
 8018460:	68f8      	ldr	r0, [r7, #12]
 8018462:	f000 f927 	bl	80186b4 <I2C_WaitOnFlagUntilTimeout>
 8018466:	4603      	mov	r3, r0
 8018468:	2b00      	cmp	r3, #0
 801846a:	d001      	beq.n	8018470 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801846c:	2301      	movs	r3, #1
 801846e:	e04d      	b.n	801850c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018474:	b29b      	uxth	r3, r3
 8018476:	2bff      	cmp	r3, #255	; 0xff
 8018478:	d90e      	bls.n	8018498 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	22ff      	movs	r2, #255	; 0xff
 801847e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018484:	b2da      	uxtb	r2, r3
 8018486:	8979      	ldrh	r1, [r7, #10]
 8018488:	2300      	movs	r3, #0
 801848a:	9300      	str	r3, [sp, #0]
 801848c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018490:	68f8      	ldr	r0, [r7, #12]
 8018492:	f000 faab 	bl	80189ec <I2C_TransferConfig>
 8018496:	e00f      	b.n	80184b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801849c:	b29a      	uxth	r2, r3
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184a6:	b2da      	uxtb	r2, r3
 80184a8:	8979      	ldrh	r1, [r7, #10]
 80184aa:	2300      	movs	r3, #0
 80184ac:	9300      	str	r3, [sp, #0]
 80184ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80184b2:	68f8      	ldr	r0, [r7, #12]
 80184b4:	f000 fa9a 	bl	80189ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184bc:	b29b      	uxth	r3, r3
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d19a      	bne.n	80183f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80184c2:	697a      	ldr	r2, [r7, #20]
 80184c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80184c6:	68f8      	ldr	r0, [r7, #12]
 80184c8:	f000 f974 	bl	80187b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80184cc:	4603      	mov	r3, r0
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d001      	beq.n	80184d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80184d2:	2301      	movs	r3, #1
 80184d4:	e01a      	b.n	801850c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	2220      	movs	r2, #32
 80184dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	6859      	ldr	r1, [r3, #4]
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	4b0b      	ldr	r3, [pc, #44]	; (8018518 <HAL_I2C_Mem_Read+0x230>)
 80184ea:	400b      	ands	r3, r1
 80184ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	2220      	movs	r2, #32
 80184f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	2200      	movs	r2, #0
 80184fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	2200      	movs	r2, #0
 8018502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018506:	2300      	movs	r3, #0
 8018508:	e000      	b.n	801850c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801850a:	2302      	movs	r3, #2
  }
}
 801850c:	4618      	mov	r0, r3
 801850e:	3718      	adds	r7, #24
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}
 8018514:	80002400 	.word	0x80002400
 8018518:	fe00e800 	.word	0xfe00e800

0801851c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801851c:	b580      	push	{r7, lr}
 801851e:	b086      	sub	sp, #24
 8018520:	af02      	add	r7, sp, #8
 8018522:	60f8      	str	r0, [r7, #12]
 8018524:	4608      	mov	r0, r1
 8018526:	4611      	mov	r1, r2
 8018528:	461a      	mov	r2, r3
 801852a:	4603      	mov	r3, r0
 801852c:	817b      	strh	r3, [r7, #10]
 801852e:	460b      	mov	r3, r1
 8018530:	813b      	strh	r3, [r7, #8]
 8018532:	4613      	mov	r3, r2
 8018534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8018536:	88fb      	ldrh	r3, [r7, #6]
 8018538:	b2da      	uxtb	r2, r3
 801853a:	8979      	ldrh	r1, [r7, #10]
 801853c:	4b20      	ldr	r3, [pc, #128]	; (80185c0 <I2C_RequestMemoryWrite+0xa4>)
 801853e:	9300      	str	r3, [sp, #0]
 8018540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018544:	68f8      	ldr	r0, [r7, #12]
 8018546:	f000 fa51 	bl	80189ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801854a:	69fa      	ldr	r2, [r7, #28]
 801854c:	69b9      	ldr	r1, [r7, #24]
 801854e:	68f8      	ldr	r0, [r7, #12]
 8018550:	f000 f8f0 	bl	8018734 <I2C_WaitOnTXISFlagUntilTimeout>
 8018554:	4603      	mov	r3, r0
 8018556:	2b00      	cmp	r3, #0
 8018558:	d001      	beq.n	801855e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801855a:	2301      	movs	r3, #1
 801855c:	e02c      	b.n	80185b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801855e:	88fb      	ldrh	r3, [r7, #6]
 8018560:	2b01      	cmp	r3, #1
 8018562:	d105      	bne.n	8018570 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018564:	893b      	ldrh	r3, [r7, #8]
 8018566:	b2da      	uxtb	r2, r3
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	629a      	str	r2, [r3, #40]	; 0x28
 801856e:	e015      	b.n	801859c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8018570:	893b      	ldrh	r3, [r7, #8]
 8018572:	0a1b      	lsrs	r3, r3, #8
 8018574:	b29b      	uxth	r3, r3
 8018576:	b2da      	uxtb	r2, r3
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801857e:	69fa      	ldr	r2, [r7, #28]
 8018580:	69b9      	ldr	r1, [r7, #24]
 8018582:	68f8      	ldr	r0, [r7, #12]
 8018584:	f000 f8d6 	bl	8018734 <I2C_WaitOnTXISFlagUntilTimeout>
 8018588:	4603      	mov	r3, r0
 801858a:	2b00      	cmp	r3, #0
 801858c:	d001      	beq.n	8018592 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801858e:	2301      	movs	r3, #1
 8018590:	e012      	b.n	80185b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018592:	893b      	ldrh	r3, [r7, #8]
 8018594:	b2da      	uxtb	r2, r3
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801859c:	69fb      	ldr	r3, [r7, #28]
 801859e:	9300      	str	r3, [sp, #0]
 80185a0:	69bb      	ldr	r3, [r7, #24]
 80185a2:	2200      	movs	r2, #0
 80185a4:	2180      	movs	r1, #128	; 0x80
 80185a6:	68f8      	ldr	r0, [r7, #12]
 80185a8:	f000 f884 	bl	80186b4 <I2C_WaitOnFlagUntilTimeout>
 80185ac:	4603      	mov	r3, r0
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d001      	beq.n	80185b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80185b2:	2301      	movs	r3, #1
 80185b4:	e000      	b.n	80185b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80185b6:	2300      	movs	r3, #0
}
 80185b8:	4618      	mov	r0, r3
 80185ba:	3710      	adds	r7, #16
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd80      	pop	{r7, pc}
 80185c0:	80002000 	.word	0x80002000

080185c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b086      	sub	sp, #24
 80185c8:	af02      	add	r7, sp, #8
 80185ca:	60f8      	str	r0, [r7, #12]
 80185cc:	4608      	mov	r0, r1
 80185ce:	4611      	mov	r1, r2
 80185d0:	461a      	mov	r2, r3
 80185d2:	4603      	mov	r3, r0
 80185d4:	817b      	strh	r3, [r7, #10]
 80185d6:	460b      	mov	r3, r1
 80185d8:	813b      	strh	r3, [r7, #8]
 80185da:	4613      	mov	r3, r2
 80185dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80185de:	88fb      	ldrh	r3, [r7, #6]
 80185e0:	b2da      	uxtb	r2, r3
 80185e2:	8979      	ldrh	r1, [r7, #10]
 80185e4:	4b20      	ldr	r3, [pc, #128]	; (8018668 <I2C_RequestMemoryRead+0xa4>)
 80185e6:	9300      	str	r3, [sp, #0]
 80185e8:	2300      	movs	r3, #0
 80185ea:	68f8      	ldr	r0, [r7, #12]
 80185ec:	f000 f9fe 	bl	80189ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80185f0:	69fa      	ldr	r2, [r7, #28]
 80185f2:	69b9      	ldr	r1, [r7, #24]
 80185f4:	68f8      	ldr	r0, [r7, #12]
 80185f6:	f000 f89d 	bl	8018734 <I2C_WaitOnTXISFlagUntilTimeout>
 80185fa:	4603      	mov	r3, r0
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d001      	beq.n	8018604 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8018600:	2301      	movs	r3, #1
 8018602:	e02c      	b.n	801865e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018604:	88fb      	ldrh	r3, [r7, #6]
 8018606:	2b01      	cmp	r3, #1
 8018608:	d105      	bne.n	8018616 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801860a:	893b      	ldrh	r3, [r7, #8]
 801860c:	b2da      	uxtb	r2, r3
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	629a      	str	r2, [r3, #40]	; 0x28
 8018614:	e015      	b.n	8018642 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8018616:	893b      	ldrh	r3, [r7, #8]
 8018618:	0a1b      	lsrs	r3, r3, #8
 801861a:	b29b      	uxth	r3, r3
 801861c:	b2da      	uxtb	r2, r3
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018624:	69fa      	ldr	r2, [r7, #28]
 8018626:	69b9      	ldr	r1, [r7, #24]
 8018628:	68f8      	ldr	r0, [r7, #12]
 801862a:	f000 f883 	bl	8018734 <I2C_WaitOnTXISFlagUntilTimeout>
 801862e:	4603      	mov	r3, r0
 8018630:	2b00      	cmp	r3, #0
 8018632:	d001      	beq.n	8018638 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8018634:	2301      	movs	r3, #1
 8018636:	e012      	b.n	801865e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018638:	893b      	ldrh	r3, [r7, #8]
 801863a:	b2da      	uxtb	r2, r3
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8018642:	69fb      	ldr	r3, [r7, #28]
 8018644:	9300      	str	r3, [sp, #0]
 8018646:	69bb      	ldr	r3, [r7, #24]
 8018648:	2200      	movs	r2, #0
 801864a:	2140      	movs	r1, #64	; 0x40
 801864c:	68f8      	ldr	r0, [r7, #12]
 801864e:	f000 f831 	bl	80186b4 <I2C_WaitOnFlagUntilTimeout>
 8018652:	4603      	mov	r3, r0
 8018654:	2b00      	cmp	r3, #0
 8018656:	d001      	beq.n	801865c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8018658:	2301      	movs	r3, #1
 801865a:	e000      	b.n	801865e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801865c:	2300      	movs	r3, #0
}
 801865e:	4618      	mov	r0, r3
 8018660:	3710      	adds	r7, #16
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}
 8018666:	bf00      	nop
 8018668:	80002000 	.word	0x80002000

0801866c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801866c:	b480      	push	{r7}
 801866e:	b083      	sub	sp, #12
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	699b      	ldr	r3, [r3, #24]
 801867a:	f003 0302 	and.w	r3, r3, #2
 801867e:	2b02      	cmp	r3, #2
 8018680:	d103      	bne.n	801868a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	2200      	movs	r2, #0
 8018688:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	699b      	ldr	r3, [r3, #24]
 8018690:	f003 0301 	and.w	r3, r3, #1
 8018694:	2b01      	cmp	r3, #1
 8018696:	d007      	beq.n	80186a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	699a      	ldr	r2, [r3, #24]
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	f042 0201 	orr.w	r2, r2, #1
 80186a6:	619a      	str	r2, [r3, #24]
  }
}
 80186a8:	bf00      	nop
 80186aa:	370c      	adds	r7, #12
 80186ac:	46bd      	mov	sp, r7
 80186ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b2:	4770      	bx	lr

080186b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b084      	sub	sp, #16
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	60f8      	str	r0, [r7, #12]
 80186bc:	60b9      	str	r1, [r7, #8]
 80186be:	603b      	str	r3, [r7, #0]
 80186c0:	4613      	mov	r3, r2
 80186c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80186c4:	e022      	b.n	801870c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80186c6:	683b      	ldr	r3, [r7, #0]
 80186c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186cc:	d01e      	beq.n	801870c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80186ce:	f7fc ff3f 	bl	8015550 <HAL_GetTick>
 80186d2:	4602      	mov	r2, r0
 80186d4:	69bb      	ldr	r3, [r7, #24]
 80186d6:	1ad3      	subs	r3, r2, r3
 80186d8:	683a      	ldr	r2, [r7, #0]
 80186da:	429a      	cmp	r2, r3
 80186dc:	d302      	bcc.n	80186e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80186de:	683b      	ldr	r3, [r7, #0]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d113      	bne.n	801870c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186e8:	f043 0220 	orr.w	r2, r3, #32
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	2220      	movs	r2, #32
 80186f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	2200      	movs	r2, #0
 80186fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	2200      	movs	r2, #0
 8018704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8018708:	2301      	movs	r3, #1
 801870a:	e00f      	b.n	801872c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	699a      	ldr	r2, [r3, #24]
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	4013      	ands	r3, r2
 8018716:	68ba      	ldr	r2, [r7, #8]
 8018718:	429a      	cmp	r2, r3
 801871a:	bf0c      	ite	eq
 801871c:	2301      	moveq	r3, #1
 801871e:	2300      	movne	r3, #0
 8018720:	b2db      	uxtb	r3, r3
 8018722:	461a      	mov	r2, r3
 8018724:	79fb      	ldrb	r3, [r7, #7]
 8018726:	429a      	cmp	r2, r3
 8018728:	d0cd      	beq.n	80186c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801872a:	2300      	movs	r3, #0
}
 801872c:	4618      	mov	r0, r3
 801872e:	3710      	adds	r7, #16
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}

08018734 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b084      	sub	sp, #16
 8018738:	af00      	add	r7, sp, #0
 801873a:	60f8      	str	r0, [r7, #12]
 801873c:	60b9      	str	r1, [r7, #8]
 801873e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018740:	e02c      	b.n	801879c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018742:	687a      	ldr	r2, [r7, #4]
 8018744:	68b9      	ldr	r1, [r7, #8]
 8018746:	68f8      	ldr	r0, [r7, #12]
 8018748:	f000 f870 	bl	801882c <I2C_IsErrorOccurred>
 801874c:	4603      	mov	r3, r0
 801874e:	2b00      	cmp	r3, #0
 8018750:	d001      	beq.n	8018756 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018752:	2301      	movs	r3, #1
 8018754:	e02a      	b.n	80187ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	f1b3 3fff 	cmp.w	r3, #4294967295
 801875c:	d01e      	beq.n	801879c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801875e:	f7fc fef7 	bl	8015550 <HAL_GetTick>
 8018762:	4602      	mov	r2, r0
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	1ad3      	subs	r3, r2, r3
 8018768:	68ba      	ldr	r2, [r7, #8]
 801876a:	429a      	cmp	r2, r3
 801876c:	d302      	bcc.n	8018774 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801876e:	68bb      	ldr	r3, [r7, #8]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d113      	bne.n	801879c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018778:	f043 0220 	orr.w	r2, r3, #32
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	2220      	movs	r2, #32
 8018784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	2200      	movs	r2, #0
 801878c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	2200      	movs	r2, #0
 8018794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8018798:	2301      	movs	r3, #1
 801879a:	e007      	b.n	80187ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	699b      	ldr	r3, [r3, #24]
 80187a2:	f003 0302 	and.w	r3, r3, #2
 80187a6:	2b02      	cmp	r3, #2
 80187a8:	d1cb      	bne.n	8018742 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80187aa:	2300      	movs	r3, #0
}
 80187ac:	4618      	mov	r0, r3
 80187ae:	3710      	adds	r7, #16
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}

080187b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b084      	sub	sp, #16
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	60f8      	str	r0, [r7, #12]
 80187bc:	60b9      	str	r1, [r7, #8]
 80187be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80187c0:	e028      	b.n	8018814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80187c2:	687a      	ldr	r2, [r7, #4]
 80187c4:	68b9      	ldr	r1, [r7, #8]
 80187c6:	68f8      	ldr	r0, [r7, #12]
 80187c8:	f000 f830 	bl	801882c <I2C_IsErrorOccurred>
 80187cc:	4603      	mov	r3, r0
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d001      	beq.n	80187d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80187d2:	2301      	movs	r3, #1
 80187d4:	e026      	b.n	8018824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80187d6:	f7fc febb 	bl	8015550 <HAL_GetTick>
 80187da:	4602      	mov	r2, r0
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	1ad3      	subs	r3, r2, r3
 80187e0:	68ba      	ldr	r2, [r7, #8]
 80187e2:	429a      	cmp	r2, r3
 80187e4:	d302      	bcc.n	80187ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80187e6:	68bb      	ldr	r3, [r7, #8]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d113      	bne.n	8018814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187f0:	f043 0220 	orr.w	r2, r3, #32
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	2220      	movs	r2, #32
 80187fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	2200      	movs	r2, #0
 8018804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	2200      	movs	r2, #0
 801880c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8018810:	2301      	movs	r3, #1
 8018812:	e007      	b.n	8018824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	699b      	ldr	r3, [r3, #24]
 801881a:	f003 0320 	and.w	r3, r3, #32
 801881e:	2b20      	cmp	r3, #32
 8018820:	d1cf      	bne.n	80187c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8018822:	2300      	movs	r3, #0
}
 8018824:	4618      	mov	r0, r3
 8018826:	3710      	adds	r7, #16
 8018828:	46bd      	mov	sp, r7
 801882a:	bd80      	pop	{r7, pc}

0801882c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b08a      	sub	sp, #40	; 0x28
 8018830:	af00      	add	r7, sp, #0
 8018832:	60f8      	str	r0, [r7, #12]
 8018834:	60b9      	str	r1, [r7, #8]
 8018836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018838:	2300      	movs	r3, #0
 801883a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	699b      	ldr	r3, [r3, #24]
 8018844:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018846:	2300      	movs	r3, #0
 8018848:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801884e:	69bb      	ldr	r3, [r7, #24]
 8018850:	f003 0310 	and.w	r3, r3, #16
 8018854:	2b00      	cmp	r3, #0
 8018856:	d068      	beq.n	801892a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	2210      	movs	r2, #16
 801885e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018860:	e049      	b.n	80188f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8018862:	68bb      	ldr	r3, [r7, #8]
 8018864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018868:	d045      	beq.n	80188f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801886a:	f7fc fe71 	bl	8015550 <HAL_GetTick>
 801886e:	4602      	mov	r2, r0
 8018870:	69fb      	ldr	r3, [r7, #28]
 8018872:	1ad3      	subs	r3, r2, r3
 8018874:	68ba      	ldr	r2, [r7, #8]
 8018876:	429a      	cmp	r2, r3
 8018878:	d302      	bcc.n	8018880 <I2C_IsErrorOccurred+0x54>
 801887a:	68bb      	ldr	r3, [r7, #8]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d13a      	bne.n	80188f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	685b      	ldr	r3, [r3, #4]
 8018886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801888a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018892:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	699b      	ldr	r3, [r3, #24]
 801889a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801889e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80188a2:	d121      	bne.n	80188e8 <I2C_IsErrorOccurred+0xbc>
 80188a4:	697b      	ldr	r3, [r7, #20]
 80188a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80188aa:	d01d      	beq.n	80188e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80188ac:	7cfb      	ldrb	r3, [r7, #19]
 80188ae:	2b20      	cmp	r3, #32
 80188b0:	d01a      	beq.n	80188e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	685a      	ldr	r2, [r3, #4]
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80188c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80188c2:	f7fc fe45 	bl	8015550 <HAL_GetTick>
 80188c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80188c8:	e00e      	b.n	80188e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80188ca:	f7fc fe41 	bl	8015550 <HAL_GetTick>
 80188ce:	4602      	mov	r2, r0
 80188d0:	69fb      	ldr	r3, [r7, #28]
 80188d2:	1ad3      	subs	r3, r2, r3
 80188d4:	2b19      	cmp	r3, #25
 80188d6:	d907      	bls.n	80188e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80188d8:	6a3b      	ldr	r3, [r7, #32]
 80188da:	f043 0320 	orr.w	r3, r3, #32
 80188de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80188e0:	2301      	movs	r3, #1
 80188e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80188e6:	e006      	b.n	80188f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	699b      	ldr	r3, [r3, #24]
 80188ee:	f003 0320 	and.w	r3, r3, #32
 80188f2:	2b20      	cmp	r3, #32
 80188f4:	d1e9      	bne.n	80188ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	699b      	ldr	r3, [r3, #24]
 80188fc:	f003 0320 	and.w	r3, r3, #32
 8018900:	2b20      	cmp	r3, #32
 8018902:	d003      	beq.n	801890c <I2C_IsErrorOccurred+0xe0>
 8018904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018908:	2b00      	cmp	r3, #0
 801890a:	d0aa      	beq.n	8018862 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801890c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018910:	2b00      	cmp	r3, #0
 8018912:	d103      	bne.n	801891c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	2220      	movs	r2, #32
 801891a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801891c:	6a3b      	ldr	r3, [r7, #32]
 801891e:	f043 0304 	orr.w	r3, r3, #4
 8018922:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018924:	2301      	movs	r3, #1
 8018926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	699b      	ldr	r3, [r3, #24]
 8018930:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018932:	69bb      	ldr	r3, [r7, #24]
 8018934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018938:	2b00      	cmp	r3, #0
 801893a:	d00b      	beq.n	8018954 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801893c:	6a3b      	ldr	r3, [r7, #32]
 801893e:	f043 0301 	orr.w	r3, r3, #1
 8018942:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	f44f 7280 	mov.w	r2, #256	; 0x100
 801894c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801894e:	2301      	movs	r3, #1
 8018950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018954:	69bb      	ldr	r3, [r7, #24]
 8018956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801895a:	2b00      	cmp	r3, #0
 801895c:	d00b      	beq.n	8018976 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801895e:	6a3b      	ldr	r3, [r7, #32]
 8018960:	f043 0308 	orr.w	r3, r3, #8
 8018964:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801896e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018970:	2301      	movs	r3, #1
 8018972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018976:	69bb      	ldr	r3, [r7, #24]
 8018978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801897c:	2b00      	cmp	r3, #0
 801897e:	d00b      	beq.n	8018998 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018980:	6a3b      	ldr	r3, [r7, #32]
 8018982:	f043 0302 	orr.w	r3, r3, #2
 8018986:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018990:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018992:	2301      	movs	r3, #1
 8018994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8018998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801899c:	2b00      	cmp	r3, #0
 801899e:	d01c      	beq.n	80189da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80189a0:	68f8      	ldr	r0, [r7, #12]
 80189a2:	f7ff fe63 	bl	801866c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	6859      	ldr	r1, [r3, #4]
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	681a      	ldr	r2, [r3, #0]
 80189b0:	4b0d      	ldr	r3, [pc, #52]	; (80189e8 <I2C_IsErrorOccurred+0x1bc>)
 80189b2:	400b      	ands	r3, r1
 80189b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80189ba:	6a3b      	ldr	r3, [r7, #32]
 80189bc:	431a      	orrs	r2, r3
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	2220      	movs	r2, #32
 80189c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	2200      	movs	r2, #0
 80189ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	2200      	movs	r2, #0
 80189d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80189da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80189de:	4618      	mov	r0, r3
 80189e0:	3728      	adds	r7, #40	; 0x28
 80189e2:	46bd      	mov	sp, r7
 80189e4:	bd80      	pop	{r7, pc}
 80189e6:	bf00      	nop
 80189e8:	fe00e800 	.word	0xfe00e800

080189ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80189ec:	b480      	push	{r7}
 80189ee:	b087      	sub	sp, #28
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	60f8      	str	r0, [r7, #12]
 80189f4:	607b      	str	r3, [r7, #4]
 80189f6:	460b      	mov	r3, r1
 80189f8:	817b      	strh	r3, [r7, #10]
 80189fa:	4613      	mov	r3, r2
 80189fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80189fe:	897b      	ldrh	r3, [r7, #10]
 8018a00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018a04:	7a7b      	ldrb	r3, [r7, #9]
 8018a06:	041b      	lsls	r3, r3, #16
 8018a08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018a0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018a12:	6a3b      	ldr	r3, [r7, #32]
 8018a14:	4313      	orrs	r3, r2
 8018a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018a1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	685a      	ldr	r2, [r3, #4]
 8018a22:	6a3b      	ldr	r3, [r7, #32]
 8018a24:	0d5b      	lsrs	r3, r3, #21
 8018a26:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8018a2a:	4b08      	ldr	r3, [pc, #32]	; (8018a4c <I2C_TransferConfig+0x60>)
 8018a2c:	430b      	orrs	r3, r1
 8018a2e:	43db      	mvns	r3, r3
 8018a30:	ea02 0103 	and.w	r1, r2, r3
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	697a      	ldr	r2, [r7, #20]
 8018a3a:	430a      	orrs	r2, r1
 8018a3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018a3e:	bf00      	nop
 8018a40:	371c      	adds	r7, #28
 8018a42:	46bd      	mov	sp, r7
 8018a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a48:	4770      	bx	lr
 8018a4a:	bf00      	nop
 8018a4c:	03ff63ff 	.word	0x03ff63ff

08018a50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018a50:	b480      	push	{r7}
 8018a52:	b083      	sub	sp, #12
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	6078      	str	r0, [r7, #4]
 8018a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018a60:	b2db      	uxtb	r3, r3
 8018a62:	2b20      	cmp	r3, #32
 8018a64:	d138      	bne.n	8018ad8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018a6c:	2b01      	cmp	r3, #1
 8018a6e:	d101      	bne.n	8018a74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018a70:	2302      	movs	r3, #2
 8018a72:	e032      	b.n	8018ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	2201      	movs	r2, #1
 8018a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	2224      	movs	r2, #36	; 0x24
 8018a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	681a      	ldr	r2, [r3, #0]
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	f022 0201 	bic.w	r2, r2, #1
 8018a92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	681a      	ldr	r2, [r3, #0]
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018aa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	6819      	ldr	r1, [r3, #0]
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	683a      	ldr	r2, [r7, #0]
 8018ab0:	430a      	orrs	r2, r1
 8018ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	681a      	ldr	r2, [r3, #0]
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	f042 0201 	orr.w	r2, r2, #1
 8018ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2220      	movs	r2, #32
 8018ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	2200      	movs	r2, #0
 8018ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	e000      	b.n	8018ada <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018ad8:	2302      	movs	r3, #2
  }
}
 8018ada:	4618      	mov	r0, r3
 8018adc:	370c      	adds	r7, #12
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae4:	4770      	bx	lr

08018ae6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018ae6:	b480      	push	{r7}
 8018ae8:	b085      	sub	sp, #20
 8018aea:	af00      	add	r7, sp, #0
 8018aec:	6078      	str	r0, [r7, #4]
 8018aee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	2b20      	cmp	r3, #32
 8018afa:	d139      	bne.n	8018b70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018b02:	2b01      	cmp	r3, #1
 8018b04:	d101      	bne.n	8018b0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018b06:	2302      	movs	r3, #2
 8018b08:	e033      	b.n	8018b72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2201      	movs	r2, #1
 8018b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	2224      	movs	r2, #36	; 0x24
 8018b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	681a      	ldr	r2, [r3, #0]
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	f022 0201 	bic.w	r2, r2, #1
 8018b28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018b38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	021b      	lsls	r3, r3, #8
 8018b3e:	68fa      	ldr	r2, [r7, #12]
 8018b40:	4313      	orrs	r3, r2
 8018b42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	68fa      	ldr	r2, [r7, #12]
 8018b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	681a      	ldr	r2, [r3, #0]
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	f042 0201 	orr.w	r2, r2, #1
 8018b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	2220      	movs	r2, #32
 8018b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2200      	movs	r2, #0
 8018b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	e000      	b.n	8018b72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018b70:	2302      	movs	r3, #2
  }
}
 8018b72:	4618      	mov	r0, r3
 8018b74:	3714      	adds	r7, #20
 8018b76:	46bd      	mov	sp, r7
 8018b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7c:	4770      	bx	lr

08018b7e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8018b7e:	b580      	push	{r7, lr}
 8018b80:	b084      	sub	sp, #16
 8018b82:	af00      	add	r7, sp, #0
 8018b84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d101      	bne.n	8018b90 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	e041      	b.n	8018c14 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8018b98:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	f245 5255 	movw	r2, #21845	; 0x5555
 8018ba2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	687a      	ldr	r2, [r7, #4]
 8018baa:	6852      	ldr	r2, [r2, #4]
 8018bac:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	687a      	ldr	r2, [r7, #4]
 8018bb4:	6892      	ldr	r2, [r2, #8]
 8018bb6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8018bb8:	f7fc fcca 	bl	8015550 <HAL_GetTick>
 8018bbc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018bbe:	e00f      	b.n	8018be0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8018bc0:	f7fc fcc6 	bl	8015550 <HAL_GetTick>
 8018bc4:	4602      	mov	r2, r0
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	1ad3      	subs	r3, r2, r3
 8018bca:	2b31      	cmp	r3, #49	; 0x31
 8018bcc:	d908      	bls.n	8018be0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	68db      	ldr	r3, [r3, #12]
 8018bd4:	f003 0307 	and.w	r3, r3, #7
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d001      	beq.n	8018be0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8018bdc:	2303      	movs	r3, #3
 8018bde:	e019      	b.n	8018c14 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	68db      	ldr	r3, [r3, #12]
 8018be6:	f003 0307 	and.w	r3, r3, #7
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d1e8      	bne.n	8018bc0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	691a      	ldr	r2, [r3, #16]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	68db      	ldr	r3, [r3, #12]
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d005      	beq.n	8018c08 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	687a      	ldr	r2, [r7, #4]
 8018c02:	68d2      	ldr	r2, [r2, #12]
 8018c04:	611a      	str	r2, [r3, #16]
 8018c06:	e004      	b.n	8018c12 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018c10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8018c12:	2300      	movs	r3, #0
}
 8018c14:	4618      	mov	r0, r3
 8018c16:	3710      	adds	r7, #16
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}

08018c1c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8018c1c:	b480      	push	{r7}
 8018c1e:	b083      	sub	sp, #12
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018c2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8018c2e:	2300      	movs	r3, #0
}
 8018c30:	4618      	mov	r0, r3
 8018c32:	370c      	adds	r7, #12
 8018c34:	46bd      	mov	sp, r7
 8018c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3a:	4770      	bx	lr

08018c3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b086      	sub	sp, #24
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8018c44:	2300      	movs	r3, #0
 8018c46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d101      	bne.n	8018c52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8018c4e:	2301      	movs	r3, #1
 8018c50:	e29b      	b.n	801918a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f003 0301 	and.w	r3, r3, #1
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	f000 8087 	beq.w	8018d6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8018c60:	4b96      	ldr	r3, [pc, #600]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018c62:	689b      	ldr	r3, [r3, #8]
 8018c64:	f003 030c 	and.w	r3, r3, #12
 8018c68:	2b04      	cmp	r3, #4
 8018c6a:	d00c      	beq.n	8018c86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018c6c:	4b93      	ldr	r3, [pc, #588]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018c6e:	689b      	ldr	r3, [r3, #8]
 8018c70:	f003 030c 	and.w	r3, r3, #12
 8018c74:	2b08      	cmp	r3, #8
 8018c76:	d112      	bne.n	8018c9e <HAL_RCC_OscConfig+0x62>
 8018c78:	4b90      	ldr	r3, [pc, #576]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018c7a:	685b      	ldr	r3, [r3, #4]
 8018c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018c84:	d10b      	bne.n	8018c9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018c86:	4b8d      	ldr	r3, [pc, #564]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d06c      	beq.n	8018d6c <HAL_RCC_OscConfig+0x130>
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	685b      	ldr	r3, [r3, #4]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d168      	bne.n	8018d6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	e275      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	685b      	ldr	r3, [r3, #4]
 8018ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ca6:	d106      	bne.n	8018cb6 <HAL_RCC_OscConfig+0x7a>
 8018ca8:	4b84      	ldr	r3, [pc, #528]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	4a83      	ldr	r2, [pc, #524]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018cb2:	6013      	str	r3, [r2, #0]
 8018cb4:	e02e      	b.n	8018d14 <HAL_RCC_OscConfig+0xd8>
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	685b      	ldr	r3, [r3, #4]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d10c      	bne.n	8018cd8 <HAL_RCC_OscConfig+0x9c>
 8018cbe:	4b7f      	ldr	r3, [pc, #508]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	4a7e      	ldr	r2, [pc, #504]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018cc8:	6013      	str	r3, [r2, #0]
 8018cca:	4b7c      	ldr	r3, [pc, #496]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	4a7b      	ldr	r2, [pc, #492]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018cd4:	6013      	str	r3, [r2, #0]
 8018cd6:	e01d      	b.n	8018d14 <HAL_RCC_OscConfig+0xd8>
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	685b      	ldr	r3, [r3, #4]
 8018cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8018ce0:	d10c      	bne.n	8018cfc <HAL_RCC_OscConfig+0xc0>
 8018ce2:	4b76      	ldr	r3, [pc, #472]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	4a75      	ldr	r2, [pc, #468]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8018cec:	6013      	str	r3, [r2, #0]
 8018cee:	4b73      	ldr	r3, [pc, #460]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	4a72      	ldr	r2, [pc, #456]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018cf8:	6013      	str	r3, [r2, #0]
 8018cfa:	e00b      	b.n	8018d14 <HAL_RCC_OscConfig+0xd8>
 8018cfc:	4b6f      	ldr	r3, [pc, #444]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	4a6e      	ldr	r2, [pc, #440]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018d06:	6013      	str	r3, [r2, #0]
 8018d08:	4b6c      	ldr	r3, [pc, #432]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	4a6b      	ldr	r2, [pc, #428]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	685b      	ldr	r3, [r3, #4]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d013      	beq.n	8018d44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018d1c:	f7fc fc18 	bl	8015550 <HAL_GetTick>
 8018d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018d22:	e008      	b.n	8018d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018d24:	f7fc fc14 	bl	8015550 <HAL_GetTick>
 8018d28:	4602      	mov	r2, r0
 8018d2a:	693b      	ldr	r3, [r7, #16]
 8018d2c:	1ad3      	subs	r3, r2, r3
 8018d2e:	2b64      	cmp	r3, #100	; 0x64
 8018d30:	d901      	bls.n	8018d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8018d32:	2303      	movs	r3, #3
 8018d34:	e229      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018d36:	4b61      	ldr	r3, [pc, #388]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d0f0      	beq.n	8018d24 <HAL_RCC_OscConfig+0xe8>
 8018d42:	e014      	b.n	8018d6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018d44:	f7fc fc04 	bl	8015550 <HAL_GetTick>
 8018d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018d4a:	e008      	b.n	8018d5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018d4c:	f7fc fc00 	bl	8015550 <HAL_GetTick>
 8018d50:	4602      	mov	r2, r0
 8018d52:	693b      	ldr	r3, [r7, #16]
 8018d54:	1ad3      	subs	r3, r2, r3
 8018d56:	2b64      	cmp	r3, #100	; 0x64
 8018d58:	d901      	bls.n	8018d5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8018d5a:	2303      	movs	r3, #3
 8018d5c:	e215      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018d5e:	4b57      	ldr	r3, [pc, #348]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d1f0      	bne.n	8018d4c <HAL_RCC_OscConfig+0x110>
 8018d6a:	e000      	b.n	8018d6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	f003 0302 	and.w	r3, r3, #2
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d069      	beq.n	8018e4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8018d7a:	4b50      	ldr	r3, [pc, #320]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018d7c:	689b      	ldr	r3, [r3, #8]
 8018d7e:	f003 030c 	and.w	r3, r3, #12
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d00b      	beq.n	8018d9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8018d86:	4b4d      	ldr	r3, [pc, #308]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018d88:	689b      	ldr	r3, [r3, #8]
 8018d8a:	f003 030c 	and.w	r3, r3, #12
 8018d8e:	2b08      	cmp	r3, #8
 8018d90:	d11c      	bne.n	8018dcc <HAL_RCC_OscConfig+0x190>
 8018d92:	4b4a      	ldr	r3, [pc, #296]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018d94:	685b      	ldr	r3, [r3, #4]
 8018d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d116      	bne.n	8018dcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018d9e:	4b47      	ldr	r3, [pc, #284]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	f003 0302 	and.w	r3, r3, #2
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d005      	beq.n	8018db6 <HAL_RCC_OscConfig+0x17a>
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	68db      	ldr	r3, [r3, #12]
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	d001      	beq.n	8018db6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8018db2:	2301      	movs	r3, #1
 8018db4:	e1e9      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018db6:	4b41      	ldr	r3, [pc, #260]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	691b      	ldr	r3, [r3, #16]
 8018dc2:	00db      	lsls	r3, r3, #3
 8018dc4:	493d      	ldr	r1, [pc, #244]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018dc6:	4313      	orrs	r3, r2
 8018dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018dca:	e040      	b.n	8018e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	68db      	ldr	r3, [r3, #12]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d023      	beq.n	8018e1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8018dd4:	4b39      	ldr	r3, [pc, #228]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	4a38      	ldr	r2, [pc, #224]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018dda:	f043 0301 	orr.w	r3, r3, #1
 8018dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018de0:	f7fc fbb6 	bl	8015550 <HAL_GetTick>
 8018de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018de6:	e008      	b.n	8018dfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018de8:	f7fc fbb2 	bl	8015550 <HAL_GetTick>
 8018dec:	4602      	mov	r2, r0
 8018dee:	693b      	ldr	r3, [r7, #16]
 8018df0:	1ad3      	subs	r3, r2, r3
 8018df2:	2b02      	cmp	r3, #2
 8018df4:	d901      	bls.n	8018dfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8018df6:	2303      	movs	r3, #3
 8018df8:	e1c7      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018dfa:	4b30      	ldr	r3, [pc, #192]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	f003 0302 	and.w	r3, r3, #2
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d0f0      	beq.n	8018de8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018e06:	4b2d      	ldr	r3, [pc, #180]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	691b      	ldr	r3, [r3, #16]
 8018e12:	00db      	lsls	r3, r3, #3
 8018e14:	4929      	ldr	r1, [pc, #164]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e16:	4313      	orrs	r3, r2
 8018e18:	600b      	str	r3, [r1, #0]
 8018e1a:	e018      	b.n	8018e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018e1c:	4b27      	ldr	r3, [pc, #156]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4a26      	ldr	r2, [pc, #152]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e22:	f023 0301 	bic.w	r3, r3, #1
 8018e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018e28:	f7fc fb92 	bl	8015550 <HAL_GetTick>
 8018e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018e2e:	e008      	b.n	8018e42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018e30:	f7fc fb8e 	bl	8015550 <HAL_GetTick>
 8018e34:	4602      	mov	r2, r0
 8018e36:	693b      	ldr	r3, [r7, #16]
 8018e38:	1ad3      	subs	r3, r2, r3
 8018e3a:	2b02      	cmp	r3, #2
 8018e3c:	d901      	bls.n	8018e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8018e3e:	2303      	movs	r3, #3
 8018e40:	e1a3      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018e42:	4b1e      	ldr	r3, [pc, #120]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	f003 0302 	and.w	r3, r3, #2
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d1f0      	bne.n	8018e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	f003 0308 	and.w	r3, r3, #8
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d038      	beq.n	8018ecc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	695b      	ldr	r3, [r3, #20]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d019      	beq.n	8018e96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018e62:	4b16      	ldr	r3, [pc, #88]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e66:	4a15      	ldr	r2, [pc, #84]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e68:	f043 0301 	orr.w	r3, r3, #1
 8018e6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018e6e:	f7fc fb6f 	bl	8015550 <HAL_GetTick>
 8018e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018e74:	e008      	b.n	8018e88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018e76:	f7fc fb6b 	bl	8015550 <HAL_GetTick>
 8018e7a:	4602      	mov	r2, r0
 8018e7c:	693b      	ldr	r3, [r7, #16]
 8018e7e:	1ad3      	subs	r3, r2, r3
 8018e80:	2b02      	cmp	r3, #2
 8018e82:	d901      	bls.n	8018e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8018e84:	2303      	movs	r3, #3
 8018e86:	e180      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018e88:	4b0c      	ldr	r3, [pc, #48]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e8c:	f003 0302 	and.w	r3, r3, #2
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d0f0      	beq.n	8018e76 <HAL_RCC_OscConfig+0x23a>
 8018e94:	e01a      	b.n	8018ecc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018e96:	4b09      	ldr	r3, [pc, #36]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e9a:	4a08      	ldr	r2, [pc, #32]	; (8018ebc <HAL_RCC_OscConfig+0x280>)
 8018e9c:	f023 0301 	bic.w	r3, r3, #1
 8018ea0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018ea2:	f7fc fb55 	bl	8015550 <HAL_GetTick>
 8018ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018ea8:	e00a      	b.n	8018ec0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018eaa:	f7fc fb51 	bl	8015550 <HAL_GetTick>
 8018eae:	4602      	mov	r2, r0
 8018eb0:	693b      	ldr	r3, [r7, #16]
 8018eb2:	1ad3      	subs	r3, r2, r3
 8018eb4:	2b02      	cmp	r3, #2
 8018eb6:	d903      	bls.n	8018ec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8018eb8:	2303      	movs	r3, #3
 8018eba:	e166      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
 8018ebc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018ec0:	4b92      	ldr	r3, [pc, #584]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018ec4:	f003 0302 	and.w	r3, r3, #2
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d1ee      	bne.n	8018eaa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	f003 0304 	and.w	r3, r3, #4
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	f000 80a4 	beq.w	8019022 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018eda:	4b8c      	ldr	r3, [pc, #560]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d10d      	bne.n	8018f02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8018ee6:	4b89      	ldr	r3, [pc, #548]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018eea:	4a88      	ldr	r2, [pc, #544]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8018ef2:	4b86      	ldr	r3, [pc, #536]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018efa:	60bb      	str	r3, [r7, #8]
 8018efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018efe:	2301      	movs	r3, #1
 8018f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018f02:	4b83      	ldr	r3, [pc, #524]	; (8019110 <HAL_RCC_OscConfig+0x4d4>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d118      	bne.n	8018f40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8018f0e:	4b80      	ldr	r3, [pc, #512]	; (8019110 <HAL_RCC_OscConfig+0x4d4>)
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	4a7f      	ldr	r2, [pc, #508]	; (8019110 <HAL_RCC_OscConfig+0x4d4>)
 8018f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018f1a:	f7fc fb19 	bl	8015550 <HAL_GetTick>
 8018f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018f20:	e008      	b.n	8018f34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018f22:	f7fc fb15 	bl	8015550 <HAL_GetTick>
 8018f26:	4602      	mov	r2, r0
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	1ad3      	subs	r3, r2, r3
 8018f2c:	2b64      	cmp	r3, #100	; 0x64
 8018f2e:	d901      	bls.n	8018f34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8018f30:	2303      	movs	r3, #3
 8018f32:	e12a      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018f34:	4b76      	ldr	r3, [pc, #472]	; (8019110 <HAL_RCC_OscConfig+0x4d4>)
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d0f0      	beq.n	8018f22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	689b      	ldr	r3, [r3, #8]
 8018f44:	2b01      	cmp	r3, #1
 8018f46:	d106      	bne.n	8018f56 <HAL_RCC_OscConfig+0x31a>
 8018f48:	4b70      	ldr	r3, [pc, #448]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f4c:	4a6f      	ldr	r2, [pc, #444]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f4e:	f043 0301 	orr.w	r3, r3, #1
 8018f52:	6713      	str	r3, [r2, #112]	; 0x70
 8018f54:	e02d      	b.n	8018fb2 <HAL_RCC_OscConfig+0x376>
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	689b      	ldr	r3, [r3, #8]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d10c      	bne.n	8018f78 <HAL_RCC_OscConfig+0x33c>
 8018f5e:	4b6b      	ldr	r3, [pc, #428]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f62:	4a6a      	ldr	r2, [pc, #424]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f64:	f023 0301 	bic.w	r3, r3, #1
 8018f68:	6713      	str	r3, [r2, #112]	; 0x70
 8018f6a:	4b68      	ldr	r3, [pc, #416]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f6e:	4a67      	ldr	r2, [pc, #412]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f70:	f023 0304 	bic.w	r3, r3, #4
 8018f74:	6713      	str	r3, [r2, #112]	; 0x70
 8018f76:	e01c      	b.n	8018fb2 <HAL_RCC_OscConfig+0x376>
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	689b      	ldr	r3, [r3, #8]
 8018f7c:	2b05      	cmp	r3, #5
 8018f7e:	d10c      	bne.n	8018f9a <HAL_RCC_OscConfig+0x35e>
 8018f80:	4b62      	ldr	r3, [pc, #392]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f84:	4a61      	ldr	r2, [pc, #388]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f86:	f043 0304 	orr.w	r3, r3, #4
 8018f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8018f8c:	4b5f      	ldr	r3, [pc, #380]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f90:	4a5e      	ldr	r2, [pc, #376]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f92:	f043 0301 	orr.w	r3, r3, #1
 8018f96:	6713      	str	r3, [r2, #112]	; 0x70
 8018f98:	e00b      	b.n	8018fb2 <HAL_RCC_OscConfig+0x376>
 8018f9a:	4b5c      	ldr	r3, [pc, #368]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f9e:	4a5b      	ldr	r2, [pc, #364]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018fa0:	f023 0301 	bic.w	r3, r3, #1
 8018fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8018fa6:	4b59      	ldr	r3, [pc, #356]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018faa:	4a58      	ldr	r2, [pc, #352]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018fac:	f023 0304 	bic.w	r3, r3, #4
 8018fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	689b      	ldr	r3, [r3, #8]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d015      	beq.n	8018fe6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018fba:	f7fc fac9 	bl	8015550 <HAL_GetTick>
 8018fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018fc0:	e00a      	b.n	8018fd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018fc2:	f7fc fac5 	bl	8015550 <HAL_GetTick>
 8018fc6:	4602      	mov	r2, r0
 8018fc8:	693b      	ldr	r3, [r7, #16]
 8018fca:	1ad3      	subs	r3, r2, r3
 8018fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8018fd0:	4293      	cmp	r3, r2
 8018fd2:	d901      	bls.n	8018fd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8018fd4:	2303      	movs	r3, #3
 8018fd6:	e0d8      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018fd8:	4b4c      	ldr	r3, [pc, #304]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8018fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fdc:	f003 0302 	and.w	r3, r3, #2
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d0ee      	beq.n	8018fc2 <HAL_RCC_OscConfig+0x386>
 8018fe4:	e014      	b.n	8019010 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018fe6:	f7fc fab3 	bl	8015550 <HAL_GetTick>
 8018fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018fec:	e00a      	b.n	8019004 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018fee:	f7fc faaf 	bl	8015550 <HAL_GetTick>
 8018ff2:	4602      	mov	r2, r0
 8018ff4:	693b      	ldr	r3, [r7, #16]
 8018ff6:	1ad3      	subs	r3, r2, r3
 8018ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8018ffc:	4293      	cmp	r3, r2
 8018ffe:	d901      	bls.n	8019004 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8019000:	2303      	movs	r3, #3
 8019002:	e0c2      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019004:	4b41      	ldr	r3, [pc, #260]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8019006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019008:	f003 0302 	and.w	r3, r3, #2
 801900c:	2b00      	cmp	r3, #0
 801900e:	d1ee      	bne.n	8018fee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8019010:	7dfb      	ldrb	r3, [r7, #23]
 8019012:	2b01      	cmp	r3, #1
 8019014:	d105      	bne.n	8019022 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019016:	4b3d      	ldr	r3, [pc, #244]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8019018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801901a:	4a3c      	ldr	r2, [pc, #240]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 801901c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	699b      	ldr	r3, [r3, #24]
 8019026:	2b00      	cmp	r3, #0
 8019028:	f000 80ae 	beq.w	8019188 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801902c:	4b37      	ldr	r3, [pc, #220]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 801902e:	689b      	ldr	r3, [r3, #8]
 8019030:	f003 030c 	and.w	r3, r3, #12
 8019034:	2b08      	cmp	r3, #8
 8019036:	d06d      	beq.n	8019114 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	699b      	ldr	r3, [r3, #24]
 801903c:	2b02      	cmp	r3, #2
 801903e:	d14b      	bne.n	80190d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019040:	4b32      	ldr	r3, [pc, #200]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	4a31      	ldr	r2, [pc, #196]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8019046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801904a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801904c:	f7fc fa80 	bl	8015550 <HAL_GetTick>
 8019050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019052:	e008      	b.n	8019066 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019054:	f7fc fa7c 	bl	8015550 <HAL_GetTick>
 8019058:	4602      	mov	r2, r0
 801905a:	693b      	ldr	r3, [r7, #16]
 801905c:	1ad3      	subs	r3, r2, r3
 801905e:	2b02      	cmp	r3, #2
 8019060:	d901      	bls.n	8019066 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8019062:	2303      	movs	r3, #3
 8019064:	e091      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019066:	4b29      	ldr	r3, [pc, #164]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801906e:	2b00      	cmp	r3, #0
 8019070:	d1f0      	bne.n	8019054 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	69da      	ldr	r2, [r3, #28]
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	6a1b      	ldr	r3, [r3, #32]
 801907a:	431a      	orrs	r2, r3
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019080:	019b      	lsls	r3, r3, #6
 8019082:	431a      	orrs	r2, r3
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019088:	085b      	lsrs	r3, r3, #1
 801908a:	3b01      	subs	r3, #1
 801908c:	041b      	lsls	r3, r3, #16
 801908e:	431a      	orrs	r2, r3
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019094:	061b      	lsls	r3, r3, #24
 8019096:	431a      	orrs	r2, r3
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801909c:	071b      	lsls	r3, r3, #28
 801909e:	491b      	ldr	r1, [pc, #108]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 80190a0:	4313      	orrs	r3, r2
 80190a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80190a4:	4b19      	ldr	r3, [pc, #100]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	4a18      	ldr	r2, [pc, #96]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 80190aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80190ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80190b0:	f7fc fa4e 	bl	8015550 <HAL_GetTick>
 80190b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80190b6:	e008      	b.n	80190ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80190b8:	f7fc fa4a 	bl	8015550 <HAL_GetTick>
 80190bc:	4602      	mov	r2, r0
 80190be:	693b      	ldr	r3, [r7, #16]
 80190c0:	1ad3      	subs	r3, r2, r3
 80190c2:	2b02      	cmp	r3, #2
 80190c4:	d901      	bls.n	80190ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80190c6:	2303      	movs	r3, #3
 80190c8:	e05f      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80190ca:	4b10      	ldr	r3, [pc, #64]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d0f0      	beq.n	80190b8 <HAL_RCC_OscConfig+0x47c>
 80190d6:	e057      	b.n	8019188 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80190d8:	4b0c      	ldr	r3, [pc, #48]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	4a0b      	ldr	r2, [pc, #44]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 80190de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80190e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80190e4:	f7fc fa34 	bl	8015550 <HAL_GetTick>
 80190e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80190ea:	e008      	b.n	80190fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80190ec:	f7fc fa30 	bl	8015550 <HAL_GetTick>
 80190f0:	4602      	mov	r2, r0
 80190f2:	693b      	ldr	r3, [r7, #16]
 80190f4:	1ad3      	subs	r3, r2, r3
 80190f6:	2b02      	cmp	r3, #2
 80190f8:	d901      	bls.n	80190fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80190fa:	2303      	movs	r3, #3
 80190fc:	e045      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80190fe:	4b03      	ldr	r3, [pc, #12]	; (801910c <HAL_RCC_OscConfig+0x4d0>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019106:	2b00      	cmp	r3, #0
 8019108:	d1f0      	bne.n	80190ec <HAL_RCC_OscConfig+0x4b0>
 801910a:	e03d      	b.n	8019188 <HAL_RCC_OscConfig+0x54c>
 801910c:	40023800 	.word	0x40023800
 8019110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8019114:	4b1f      	ldr	r3, [pc, #124]	; (8019194 <HAL_RCC_OscConfig+0x558>)
 8019116:	685b      	ldr	r3, [r3, #4]
 8019118:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	699b      	ldr	r3, [r3, #24]
 801911e:	2b01      	cmp	r3, #1
 8019120:	d030      	beq.n	8019184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801912c:	429a      	cmp	r2, r3
 801912e:	d129      	bne.n	8019184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801913a:	429a      	cmp	r2, r3
 801913c:	d122      	bne.n	8019184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801913e:	68fa      	ldr	r2, [r7, #12]
 8019140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8019144:	4013      	ands	r3, r2
 8019146:	687a      	ldr	r2, [r7, #4]
 8019148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801914a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801914c:	4293      	cmp	r3, r2
 801914e:	d119      	bne.n	8019184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801915a:	085b      	lsrs	r3, r3, #1
 801915c:	3b01      	subs	r3, #1
 801915e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8019160:	429a      	cmp	r2, r3
 8019162:	d10f      	bne.n	8019184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801916e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8019170:	429a      	cmp	r2, r3
 8019172:	d107      	bne.n	8019184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801917e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8019180:	429a      	cmp	r2, r3
 8019182:	d001      	beq.n	8019188 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8019184:	2301      	movs	r3, #1
 8019186:	e000      	b.n	801918a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8019188:	2300      	movs	r3, #0
}
 801918a:	4618      	mov	r0, r3
 801918c:	3718      	adds	r7, #24
 801918e:	46bd      	mov	sp, r7
 8019190:	bd80      	pop	{r7, pc}
 8019192:	bf00      	nop
 8019194:	40023800 	.word	0x40023800

08019198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b084      	sub	sp, #16
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
 80191a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80191a2:	2300      	movs	r3, #0
 80191a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d101      	bne.n	80191b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80191ac:	2301      	movs	r3, #1
 80191ae:	e0d0      	b.n	8019352 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80191b0:	4b6a      	ldr	r3, [pc, #424]	; (801935c <HAL_RCC_ClockConfig+0x1c4>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	f003 030f 	and.w	r3, r3, #15
 80191b8:	683a      	ldr	r2, [r7, #0]
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d910      	bls.n	80191e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80191be:	4b67      	ldr	r3, [pc, #412]	; (801935c <HAL_RCC_ClockConfig+0x1c4>)
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	f023 020f 	bic.w	r2, r3, #15
 80191c6:	4965      	ldr	r1, [pc, #404]	; (801935c <HAL_RCC_ClockConfig+0x1c4>)
 80191c8:	683b      	ldr	r3, [r7, #0]
 80191ca:	4313      	orrs	r3, r2
 80191cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80191ce:	4b63      	ldr	r3, [pc, #396]	; (801935c <HAL_RCC_ClockConfig+0x1c4>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	f003 030f 	and.w	r3, r3, #15
 80191d6:	683a      	ldr	r2, [r7, #0]
 80191d8:	429a      	cmp	r2, r3
 80191da:	d001      	beq.n	80191e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80191dc:	2301      	movs	r3, #1
 80191de:	e0b8      	b.n	8019352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	f003 0302 	and.w	r3, r3, #2
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d020      	beq.n	801922e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	f003 0304 	and.w	r3, r3, #4
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d005      	beq.n	8019204 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80191f8:	4b59      	ldr	r3, [pc, #356]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 80191fa:	689b      	ldr	r3, [r3, #8]
 80191fc:	4a58      	ldr	r2, [pc, #352]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 80191fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8019202:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	f003 0308 	and.w	r3, r3, #8
 801920c:	2b00      	cmp	r3, #0
 801920e:	d005      	beq.n	801921c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8019210:	4b53      	ldr	r3, [pc, #332]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 8019212:	689b      	ldr	r3, [r3, #8]
 8019214:	4a52      	ldr	r2, [pc, #328]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 8019216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801921a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801921c:	4b50      	ldr	r3, [pc, #320]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 801921e:	689b      	ldr	r3, [r3, #8]
 8019220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	689b      	ldr	r3, [r3, #8]
 8019228:	494d      	ldr	r1, [pc, #308]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 801922a:	4313      	orrs	r3, r2
 801922c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	f003 0301 	and.w	r3, r3, #1
 8019236:	2b00      	cmp	r3, #0
 8019238:	d040      	beq.n	80192bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	685b      	ldr	r3, [r3, #4]
 801923e:	2b01      	cmp	r3, #1
 8019240:	d107      	bne.n	8019252 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019242:	4b47      	ldr	r3, [pc, #284]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801924a:	2b00      	cmp	r3, #0
 801924c:	d115      	bne.n	801927a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801924e:	2301      	movs	r3, #1
 8019250:	e07f      	b.n	8019352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	685b      	ldr	r3, [r3, #4]
 8019256:	2b02      	cmp	r3, #2
 8019258:	d107      	bne.n	801926a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801925a:	4b41      	ldr	r3, [pc, #260]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019262:	2b00      	cmp	r3, #0
 8019264:	d109      	bne.n	801927a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8019266:	2301      	movs	r3, #1
 8019268:	e073      	b.n	8019352 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801926a:	4b3d      	ldr	r3, [pc, #244]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	f003 0302 	and.w	r3, r3, #2
 8019272:	2b00      	cmp	r3, #0
 8019274:	d101      	bne.n	801927a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8019276:	2301      	movs	r3, #1
 8019278:	e06b      	b.n	8019352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801927a:	4b39      	ldr	r3, [pc, #228]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 801927c:	689b      	ldr	r3, [r3, #8]
 801927e:	f023 0203 	bic.w	r2, r3, #3
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	685b      	ldr	r3, [r3, #4]
 8019286:	4936      	ldr	r1, [pc, #216]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 8019288:	4313      	orrs	r3, r2
 801928a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801928c:	f7fc f960 	bl	8015550 <HAL_GetTick>
 8019290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019292:	e00a      	b.n	80192aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019294:	f7fc f95c 	bl	8015550 <HAL_GetTick>
 8019298:	4602      	mov	r2, r0
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	1ad3      	subs	r3, r2, r3
 801929e:	f241 3288 	movw	r2, #5000	; 0x1388
 80192a2:	4293      	cmp	r3, r2
 80192a4:	d901      	bls.n	80192aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80192a6:	2303      	movs	r3, #3
 80192a8:	e053      	b.n	8019352 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80192aa:	4b2d      	ldr	r3, [pc, #180]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 80192ac:	689b      	ldr	r3, [r3, #8]
 80192ae:	f003 020c 	and.w	r2, r3, #12
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	685b      	ldr	r3, [r3, #4]
 80192b6:	009b      	lsls	r3, r3, #2
 80192b8:	429a      	cmp	r2, r3
 80192ba:	d1eb      	bne.n	8019294 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80192bc:	4b27      	ldr	r3, [pc, #156]	; (801935c <HAL_RCC_ClockConfig+0x1c4>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	f003 030f 	and.w	r3, r3, #15
 80192c4:	683a      	ldr	r2, [r7, #0]
 80192c6:	429a      	cmp	r2, r3
 80192c8:	d210      	bcs.n	80192ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80192ca:	4b24      	ldr	r3, [pc, #144]	; (801935c <HAL_RCC_ClockConfig+0x1c4>)
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	f023 020f 	bic.w	r2, r3, #15
 80192d2:	4922      	ldr	r1, [pc, #136]	; (801935c <HAL_RCC_ClockConfig+0x1c4>)
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	4313      	orrs	r3, r2
 80192d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80192da:	4b20      	ldr	r3, [pc, #128]	; (801935c <HAL_RCC_ClockConfig+0x1c4>)
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	f003 030f 	and.w	r3, r3, #15
 80192e2:	683a      	ldr	r2, [r7, #0]
 80192e4:	429a      	cmp	r2, r3
 80192e6:	d001      	beq.n	80192ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80192e8:	2301      	movs	r3, #1
 80192ea:	e032      	b.n	8019352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	f003 0304 	and.w	r3, r3, #4
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d008      	beq.n	801930a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80192f8:	4b19      	ldr	r3, [pc, #100]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 80192fa:	689b      	ldr	r3, [r3, #8]
 80192fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	68db      	ldr	r3, [r3, #12]
 8019304:	4916      	ldr	r1, [pc, #88]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 8019306:	4313      	orrs	r3, r2
 8019308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	f003 0308 	and.w	r3, r3, #8
 8019312:	2b00      	cmp	r3, #0
 8019314:	d009      	beq.n	801932a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8019316:	4b12      	ldr	r3, [pc, #72]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 8019318:	689b      	ldr	r3, [r3, #8]
 801931a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	691b      	ldr	r3, [r3, #16]
 8019322:	00db      	lsls	r3, r3, #3
 8019324:	490e      	ldr	r1, [pc, #56]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 8019326:	4313      	orrs	r3, r2
 8019328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801932a:	f000 f821 	bl	8019370 <HAL_RCC_GetSysClockFreq>
 801932e:	4602      	mov	r2, r0
 8019330:	4b0b      	ldr	r3, [pc, #44]	; (8019360 <HAL_RCC_ClockConfig+0x1c8>)
 8019332:	689b      	ldr	r3, [r3, #8]
 8019334:	091b      	lsrs	r3, r3, #4
 8019336:	f003 030f 	and.w	r3, r3, #15
 801933a:	490a      	ldr	r1, [pc, #40]	; (8019364 <HAL_RCC_ClockConfig+0x1cc>)
 801933c:	5ccb      	ldrb	r3, [r1, r3]
 801933e:	fa22 f303 	lsr.w	r3, r2, r3
 8019342:	4a09      	ldr	r2, [pc, #36]	; (8019368 <HAL_RCC_ClockConfig+0x1d0>)
 8019344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8019346:	4b09      	ldr	r3, [pc, #36]	; (801936c <HAL_RCC_ClockConfig+0x1d4>)
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	4618      	mov	r0, r3
 801934c:	f7fc f8bc 	bl	80154c8 <HAL_InitTick>

  return HAL_OK;
 8019350:	2300      	movs	r3, #0
}
 8019352:	4618      	mov	r0, r3
 8019354:	3710      	adds	r7, #16
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}
 801935a:	bf00      	nop
 801935c:	40023c00 	.word	0x40023c00
 8019360:	40023800 	.word	0x40023800
 8019364:	08028fa4 	.word	0x08028fa4
 8019368:	2000011c 	.word	0x2000011c
 801936c:	20000120 	.word	0x20000120

08019370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019374:	b090      	sub	sp, #64	; 0x40
 8019376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8019378:	2300      	movs	r3, #0
 801937a:	637b      	str	r3, [r7, #52]	; 0x34
 801937c:	2300      	movs	r3, #0
 801937e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019380:	2300      	movs	r3, #0
 8019382:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8019384:	2300      	movs	r3, #0
 8019386:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8019388:	4b59      	ldr	r3, [pc, #356]	; (80194f0 <HAL_RCC_GetSysClockFreq+0x180>)
 801938a:	689b      	ldr	r3, [r3, #8]
 801938c:	f003 030c 	and.w	r3, r3, #12
 8019390:	2b08      	cmp	r3, #8
 8019392:	d00d      	beq.n	80193b0 <HAL_RCC_GetSysClockFreq+0x40>
 8019394:	2b08      	cmp	r3, #8
 8019396:	f200 80a1 	bhi.w	80194dc <HAL_RCC_GetSysClockFreq+0x16c>
 801939a:	2b00      	cmp	r3, #0
 801939c:	d002      	beq.n	80193a4 <HAL_RCC_GetSysClockFreq+0x34>
 801939e:	2b04      	cmp	r3, #4
 80193a0:	d003      	beq.n	80193aa <HAL_RCC_GetSysClockFreq+0x3a>
 80193a2:	e09b      	b.n	80194dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80193a4:	4b53      	ldr	r3, [pc, #332]	; (80194f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80193a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80193a8:	e09b      	b.n	80194e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80193aa:	4b53      	ldr	r3, [pc, #332]	; (80194f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80193ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80193ae:	e098      	b.n	80194e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80193b0:	4b4f      	ldr	r3, [pc, #316]	; (80194f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80193b2:	685b      	ldr	r3, [r3, #4]
 80193b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80193ba:	4b4d      	ldr	r3, [pc, #308]	; (80194f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80193bc:	685b      	ldr	r3, [r3, #4]
 80193be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d028      	beq.n	8019418 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80193c6:	4b4a      	ldr	r3, [pc, #296]	; (80194f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80193c8:	685b      	ldr	r3, [r3, #4]
 80193ca:	099b      	lsrs	r3, r3, #6
 80193cc:	2200      	movs	r2, #0
 80193ce:	623b      	str	r3, [r7, #32]
 80193d0:	627a      	str	r2, [r7, #36]	; 0x24
 80193d2:	6a3b      	ldr	r3, [r7, #32]
 80193d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80193d8:	2100      	movs	r1, #0
 80193da:	4b47      	ldr	r3, [pc, #284]	; (80194f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80193dc:	fb03 f201 	mul.w	r2, r3, r1
 80193e0:	2300      	movs	r3, #0
 80193e2:	fb00 f303 	mul.w	r3, r0, r3
 80193e6:	4413      	add	r3, r2
 80193e8:	4a43      	ldr	r2, [pc, #268]	; (80194f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80193ea:	fba0 1202 	umull	r1, r2, r0, r2
 80193ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80193f0:	460a      	mov	r2, r1
 80193f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80193f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80193f6:	4413      	add	r3, r2
 80193f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80193fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193fc:	2200      	movs	r2, #0
 80193fe:	61bb      	str	r3, [r7, #24]
 8019400:	61fa      	str	r2, [r7, #28]
 8019402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8019406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801940a:	f7e6 ff81 	bl	8000310 <__aeabi_uldivmod>
 801940e:	4602      	mov	r2, r0
 8019410:	460b      	mov	r3, r1
 8019412:	4613      	mov	r3, r2
 8019414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019416:	e053      	b.n	80194c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019418:	4b35      	ldr	r3, [pc, #212]	; (80194f0 <HAL_RCC_GetSysClockFreq+0x180>)
 801941a:	685b      	ldr	r3, [r3, #4]
 801941c:	099b      	lsrs	r3, r3, #6
 801941e:	2200      	movs	r2, #0
 8019420:	613b      	str	r3, [r7, #16]
 8019422:	617a      	str	r2, [r7, #20]
 8019424:	693b      	ldr	r3, [r7, #16]
 8019426:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801942a:	f04f 0b00 	mov.w	fp, #0
 801942e:	4652      	mov	r2, sl
 8019430:	465b      	mov	r3, fp
 8019432:	f04f 0000 	mov.w	r0, #0
 8019436:	f04f 0100 	mov.w	r1, #0
 801943a:	0159      	lsls	r1, r3, #5
 801943c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019440:	0150      	lsls	r0, r2, #5
 8019442:	4602      	mov	r2, r0
 8019444:	460b      	mov	r3, r1
 8019446:	ebb2 080a 	subs.w	r8, r2, sl
 801944a:	eb63 090b 	sbc.w	r9, r3, fp
 801944e:	f04f 0200 	mov.w	r2, #0
 8019452:	f04f 0300 	mov.w	r3, #0
 8019456:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801945a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801945e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8019462:	ebb2 0408 	subs.w	r4, r2, r8
 8019466:	eb63 0509 	sbc.w	r5, r3, r9
 801946a:	f04f 0200 	mov.w	r2, #0
 801946e:	f04f 0300 	mov.w	r3, #0
 8019472:	00eb      	lsls	r3, r5, #3
 8019474:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019478:	00e2      	lsls	r2, r4, #3
 801947a:	4614      	mov	r4, r2
 801947c:	461d      	mov	r5, r3
 801947e:	eb14 030a 	adds.w	r3, r4, sl
 8019482:	603b      	str	r3, [r7, #0]
 8019484:	eb45 030b 	adc.w	r3, r5, fp
 8019488:	607b      	str	r3, [r7, #4]
 801948a:	f04f 0200 	mov.w	r2, #0
 801948e:	f04f 0300 	mov.w	r3, #0
 8019492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8019496:	4629      	mov	r1, r5
 8019498:	028b      	lsls	r3, r1, #10
 801949a:	4621      	mov	r1, r4
 801949c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80194a0:	4621      	mov	r1, r4
 80194a2:	028a      	lsls	r2, r1, #10
 80194a4:	4610      	mov	r0, r2
 80194a6:	4619      	mov	r1, r3
 80194a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194aa:	2200      	movs	r2, #0
 80194ac:	60bb      	str	r3, [r7, #8]
 80194ae:	60fa      	str	r2, [r7, #12]
 80194b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80194b4:	f7e6 ff2c 	bl	8000310 <__aeabi_uldivmod>
 80194b8:	4602      	mov	r2, r0
 80194ba:	460b      	mov	r3, r1
 80194bc:	4613      	mov	r3, r2
 80194be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80194c0:	4b0b      	ldr	r3, [pc, #44]	; (80194f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80194c2:	685b      	ldr	r3, [r3, #4]
 80194c4:	0c1b      	lsrs	r3, r3, #16
 80194c6:	f003 0303 	and.w	r3, r3, #3
 80194ca:	3301      	adds	r3, #1
 80194cc:	005b      	lsls	r3, r3, #1
 80194ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80194d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80194d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80194d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80194da:	e002      	b.n	80194e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80194dc:	4b05      	ldr	r3, [pc, #20]	; (80194f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80194de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80194e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80194e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80194e4:	4618      	mov	r0, r3
 80194e6:	3740      	adds	r7, #64	; 0x40
 80194e8:	46bd      	mov	sp, r7
 80194ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80194ee:	bf00      	nop
 80194f0:	40023800 	.word	0x40023800
 80194f4:	00f42400 	.word	0x00f42400
 80194f8:	00b71b00 	.word	0x00b71b00

080194fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80194fc:	b480      	push	{r7}
 80194fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019500:	4b03      	ldr	r3, [pc, #12]	; (8019510 <HAL_RCC_GetHCLKFreq+0x14>)
 8019502:	681b      	ldr	r3, [r3, #0]
}
 8019504:	4618      	mov	r0, r3
 8019506:	46bd      	mov	sp, r7
 8019508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801950c:	4770      	bx	lr
 801950e:	bf00      	nop
 8019510:	2000011c 	.word	0x2000011c

08019514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019514:	b580      	push	{r7, lr}
 8019516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8019518:	f7ff fff0 	bl	80194fc <HAL_RCC_GetHCLKFreq>
 801951c:	4602      	mov	r2, r0
 801951e:	4b05      	ldr	r3, [pc, #20]	; (8019534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8019520:	689b      	ldr	r3, [r3, #8]
 8019522:	0a9b      	lsrs	r3, r3, #10
 8019524:	f003 0307 	and.w	r3, r3, #7
 8019528:	4903      	ldr	r1, [pc, #12]	; (8019538 <HAL_RCC_GetPCLK1Freq+0x24>)
 801952a:	5ccb      	ldrb	r3, [r1, r3]
 801952c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019530:	4618      	mov	r0, r3
 8019532:	bd80      	pop	{r7, pc}
 8019534:	40023800 	.word	0x40023800
 8019538:	08028fb4 	.word	0x08028fb4

0801953c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801953c:	b580      	push	{r7, lr}
 801953e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019540:	f7ff ffdc 	bl	80194fc <HAL_RCC_GetHCLKFreq>
 8019544:	4602      	mov	r2, r0
 8019546:	4b05      	ldr	r3, [pc, #20]	; (801955c <HAL_RCC_GetPCLK2Freq+0x20>)
 8019548:	689b      	ldr	r3, [r3, #8]
 801954a:	0b5b      	lsrs	r3, r3, #13
 801954c:	f003 0307 	and.w	r3, r3, #7
 8019550:	4903      	ldr	r1, [pc, #12]	; (8019560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019552:	5ccb      	ldrb	r3, [r1, r3]
 8019554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019558:	4618      	mov	r0, r3
 801955a:	bd80      	pop	{r7, pc}
 801955c:	40023800 	.word	0x40023800
 8019560:	08028fb4 	.word	0x08028fb4

08019564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b088      	sub	sp, #32
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801956c:	2300      	movs	r3, #0
 801956e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8019570:	2300      	movs	r3, #0
 8019572:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8019574:	2300      	movs	r3, #0
 8019576:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8019578:	2300      	movs	r3, #0
 801957a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801957c:	2300      	movs	r3, #0
 801957e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	f003 0301 	and.w	r3, r3, #1
 8019588:	2b00      	cmp	r3, #0
 801958a:	d012      	beq.n	80195b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801958c:	4b69      	ldr	r3, [pc, #420]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801958e:	689b      	ldr	r3, [r3, #8]
 8019590:	4a68      	ldr	r2, [pc, #416]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019592:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019596:	6093      	str	r3, [r2, #8]
 8019598:	4b66      	ldr	r3, [pc, #408]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801959a:	689a      	ldr	r2, [r3, #8]
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195a0:	4964      	ldr	r1, [pc, #400]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80195a2:	4313      	orrs	r3, r2
 80195a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d101      	bne.n	80195b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80195ae:	2301      	movs	r3, #1
 80195b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d017      	beq.n	80195ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80195be:	4b5d      	ldr	r3, [pc, #372]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80195c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80195c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195cc:	4959      	ldr	r1, [pc, #356]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80195ce:	4313      	orrs	r3, r2
 80195d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80195dc:	d101      	bne.n	80195e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80195de:	2301      	movs	r3, #1
 80195e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d101      	bne.n	80195ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80195ea:	2301      	movs	r3, #1
 80195ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d017      	beq.n	801962a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80195fa:	4b4e      	ldr	r3, [pc, #312]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80195fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019600:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019608:	494a      	ldr	r1, [pc, #296]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801960a:	4313      	orrs	r3, r2
 801960c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019618:	d101      	bne.n	801961e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801961a:	2301      	movs	r3, #1
 801961c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019622:	2b00      	cmp	r3, #0
 8019624:	d101      	bne.n	801962a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8019626:	2301      	movs	r3, #1
 8019628:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019632:	2b00      	cmp	r3, #0
 8019634:	d001      	beq.n	801963a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8019636:	2301      	movs	r3, #1
 8019638:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	f003 0320 	and.w	r3, r3, #32
 8019642:	2b00      	cmp	r3, #0
 8019644:	f000 808b 	beq.w	801975e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8019648:	4b3a      	ldr	r3, [pc, #232]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801964a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801964c:	4a39      	ldr	r2, [pc, #228]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801964e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019652:	6413      	str	r3, [r2, #64]	; 0x40
 8019654:	4b37      	ldr	r3, [pc, #220]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801965c:	60bb      	str	r3, [r7, #8]
 801965e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8019660:	4b35      	ldr	r3, [pc, #212]	; (8019738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	4a34      	ldr	r2, [pc, #208]	; (8019738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801966a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801966c:	f7fb ff70 	bl	8015550 <HAL_GetTick>
 8019670:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8019672:	e008      	b.n	8019686 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019674:	f7fb ff6c 	bl	8015550 <HAL_GetTick>
 8019678:	4602      	mov	r2, r0
 801967a:	697b      	ldr	r3, [r7, #20]
 801967c:	1ad3      	subs	r3, r2, r3
 801967e:	2b64      	cmp	r3, #100	; 0x64
 8019680:	d901      	bls.n	8019686 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8019682:	2303      	movs	r3, #3
 8019684:	e38f      	b.n	8019da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8019686:	4b2c      	ldr	r3, [pc, #176]	; (8019738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801968e:	2b00      	cmp	r3, #0
 8019690:	d0f0      	beq.n	8019674 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8019692:	4b28      	ldr	r3, [pc, #160]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801969a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801969c:	693b      	ldr	r3, [r7, #16]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d035      	beq.n	801970e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80196aa:	693a      	ldr	r2, [r7, #16]
 80196ac:	429a      	cmp	r2, r3
 80196ae:	d02e      	beq.n	801970e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80196b0:	4b20      	ldr	r3, [pc, #128]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80196ba:	4b1e      	ldr	r3, [pc, #120]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196be:	4a1d      	ldr	r2, [pc, #116]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80196c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80196c6:	4b1b      	ldr	r3, [pc, #108]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196ca:	4a1a      	ldr	r2, [pc, #104]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80196d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80196d2:	4a18      	ldr	r2, [pc, #96]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196d4:	693b      	ldr	r3, [r7, #16]
 80196d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80196d8:	4b16      	ldr	r3, [pc, #88]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196dc:	f003 0301 	and.w	r3, r3, #1
 80196e0:	2b01      	cmp	r3, #1
 80196e2:	d114      	bne.n	801970e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80196e4:	f7fb ff34 	bl	8015550 <HAL_GetTick>
 80196e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80196ea:	e00a      	b.n	8019702 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80196ec:	f7fb ff30 	bl	8015550 <HAL_GetTick>
 80196f0:	4602      	mov	r2, r0
 80196f2:	697b      	ldr	r3, [r7, #20]
 80196f4:	1ad3      	subs	r3, r2, r3
 80196f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80196fa:	4293      	cmp	r3, r2
 80196fc:	d901      	bls.n	8019702 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80196fe:	2303      	movs	r3, #3
 8019700:	e351      	b.n	8019da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019702:	4b0c      	ldr	r3, [pc, #48]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019706:	f003 0302 	and.w	r3, r3, #2
 801970a:	2b00      	cmp	r3, #0
 801970c:	d0ee      	beq.n	80196ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801971a:	d111      	bne.n	8019740 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801971c:	4b05      	ldr	r3, [pc, #20]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801971e:	689b      	ldr	r3, [r3, #8]
 8019720:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8019728:	4b04      	ldr	r3, [pc, #16]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801972a:	400b      	ands	r3, r1
 801972c:	4901      	ldr	r1, [pc, #4]	; (8019734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801972e:	4313      	orrs	r3, r2
 8019730:	608b      	str	r3, [r1, #8]
 8019732:	e00b      	b.n	801974c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8019734:	40023800 	.word	0x40023800
 8019738:	40007000 	.word	0x40007000
 801973c:	0ffffcff 	.word	0x0ffffcff
 8019740:	4bac      	ldr	r3, [pc, #688]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019742:	689b      	ldr	r3, [r3, #8]
 8019744:	4aab      	ldr	r2, [pc, #684]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019746:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801974a:	6093      	str	r3, [r2, #8]
 801974c:	4ba9      	ldr	r3, [pc, #676]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801974e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019758:	49a6      	ldr	r1, [pc, #664]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801975a:	4313      	orrs	r3, r2
 801975c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	f003 0310 	and.w	r3, r3, #16
 8019766:	2b00      	cmp	r3, #0
 8019768:	d010      	beq.n	801978c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801976a:	4ba2      	ldr	r3, [pc, #648]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801976c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019770:	4aa0      	ldr	r2, [pc, #640]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019776:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801977a:	4b9e      	ldr	r3, [pc, #632]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801977c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019784:	499b      	ldr	r1, [pc, #620]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019786:	4313      	orrs	r3, r2
 8019788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019794:	2b00      	cmp	r3, #0
 8019796:	d00a      	beq.n	80197ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019798:	4b96      	ldr	r3, [pc, #600]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801979a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801979e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80197a6:	4993      	ldr	r1, [pc, #588]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197a8:	4313      	orrs	r3, r2
 80197aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d00a      	beq.n	80197d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80197ba:	4b8e      	ldr	r3, [pc, #568]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80197c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80197c8:	498a      	ldr	r1, [pc, #552]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197ca:	4313      	orrs	r3, r2
 80197cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d00a      	beq.n	80197f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80197dc:	4b85      	ldr	r3, [pc, #532]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80197e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197ea:	4982      	ldr	r1, [pc, #520]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197ec:	4313      	orrs	r3, r2
 80197ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d00a      	beq.n	8019814 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80197fe:	4b7d      	ldr	r3, [pc, #500]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019804:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801980c:	4979      	ldr	r1, [pc, #484]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801980e:	4313      	orrs	r3, r2
 8019810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801981c:	2b00      	cmp	r3, #0
 801981e:	d00a      	beq.n	8019836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8019820:	4b74      	ldr	r3, [pc, #464]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019826:	f023 0203 	bic.w	r2, r3, #3
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801982e:	4971      	ldr	r1, [pc, #452]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019830:	4313      	orrs	r3, r2
 8019832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801983e:	2b00      	cmp	r3, #0
 8019840:	d00a      	beq.n	8019858 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8019842:	4b6c      	ldr	r3, [pc, #432]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019848:	f023 020c 	bic.w	r2, r3, #12
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019850:	4968      	ldr	r1, [pc, #416]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019852:	4313      	orrs	r3, r2
 8019854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019860:	2b00      	cmp	r3, #0
 8019862:	d00a      	beq.n	801987a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8019864:	4b63      	ldr	r3, [pc, #396]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801986a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019872:	4960      	ldr	r1, [pc, #384]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019874:	4313      	orrs	r3, r2
 8019876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019882:	2b00      	cmp	r3, #0
 8019884:	d00a      	beq.n	801989c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8019886:	4b5b      	ldr	r3, [pc, #364]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801988c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019894:	4957      	ldr	r1, [pc, #348]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019896:	4313      	orrs	r3, r2
 8019898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d00a      	beq.n	80198be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80198a8:	4b52      	ldr	r3, [pc, #328]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80198b6:	494f      	ldr	r1, [pc, #316]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198b8:	4313      	orrs	r3, r2
 80198ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d00a      	beq.n	80198e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80198ca:	4b4a      	ldr	r3, [pc, #296]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80198d8:	4946      	ldr	r1, [pc, #280]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198da:	4313      	orrs	r3, r2
 80198dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d00a      	beq.n	8019902 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80198ec:	4b41      	ldr	r3, [pc, #260]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198fa:	493e      	ldr	r1, [pc, #248]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198fc:	4313      	orrs	r3, r2
 80198fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801990a:	2b00      	cmp	r3, #0
 801990c:	d00a      	beq.n	8019924 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801990e:	4b39      	ldr	r3, [pc, #228]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801991c:	4935      	ldr	r1, [pc, #212]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801991e:	4313      	orrs	r3, r2
 8019920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801992c:	2b00      	cmp	r3, #0
 801992e:	d00a      	beq.n	8019946 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8019930:	4b30      	ldr	r3, [pc, #192]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019936:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801993e:	492d      	ldr	r1, [pc, #180]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019940:	4313      	orrs	r3, r2
 8019942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801994e:	2b00      	cmp	r3, #0
 8019950:	d011      	beq.n	8019976 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8019952:	4b28      	ldr	r3, [pc, #160]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019958:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019960:	4924      	ldr	r1, [pc, #144]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019962:	4313      	orrs	r3, r2
 8019964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801996c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019970:	d101      	bne.n	8019976 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8019972:	2301      	movs	r3, #1
 8019974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	f003 0308 	and.w	r3, r3, #8
 801997e:	2b00      	cmp	r3, #0
 8019980:	d001      	beq.n	8019986 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8019982:	2301      	movs	r3, #1
 8019984:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801998e:	2b00      	cmp	r3, #0
 8019990:	d00a      	beq.n	80199a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8019992:	4b18      	ldr	r3, [pc, #96]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019998:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199a0:	4914      	ldr	r1, [pc, #80]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80199a2:	4313      	orrs	r3, r2
 80199a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d00b      	beq.n	80199cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80199b4:	4b0f      	ldr	r3, [pc, #60]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80199b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80199ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80199c4:	490b      	ldr	r1, [pc, #44]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80199c6:	4313      	orrs	r3, r2
 80199c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d00f      	beq.n	80199f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80199d8:	4b06      	ldr	r3, [pc, #24]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80199da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80199de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80199e8:	4902      	ldr	r1, [pc, #8]	; (80199f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80199ea:	4313      	orrs	r3, r2
 80199ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80199f0:	e002      	b.n	80199f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80199f2:	bf00      	nop
 80199f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d00b      	beq.n	8019a1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8019a04:	4b8a      	ldr	r3, [pc, #552]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a14:	4986      	ldr	r1, [pc, #536]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a16:	4313      	orrs	r3, r2
 8019a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d00b      	beq.n	8019a40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8019a28:	4b81      	ldr	r3, [pc, #516]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a38:	497d      	ldr	r1, [pc, #500]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a3a:	4313      	orrs	r3, r2
 8019a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8019a40:	69fb      	ldr	r3, [r7, #28]
 8019a42:	2b01      	cmp	r3, #1
 8019a44:	d006      	beq.n	8019a54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	f000 80d6 	beq.w	8019c00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8019a54:	4b76      	ldr	r3, [pc, #472]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	4a75      	ldr	r2, [pc, #468]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019a60:	f7fb fd76 	bl	8015550 <HAL_GetTick>
 8019a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019a66:	e008      	b.n	8019a7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019a68:	f7fb fd72 	bl	8015550 <HAL_GetTick>
 8019a6c:	4602      	mov	r2, r0
 8019a6e:	697b      	ldr	r3, [r7, #20]
 8019a70:	1ad3      	subs	r3, r2, r3
 8019a72:	2b64      	cmp	r3, #100	; 0x64
 8019a74:	d901      	bls.n	8019a7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019a76:	2303      	movs	r3, #3
 8019a78:	e195      	b.n	8019da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019a7a:	4b6d      	ldr	r3, [pc, #436]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d1f0      	bne.n	8019a68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	f003 0301 	and.w	r3, r3, #1
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d021      	beq.n	8019ad6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d11d      	bne.n	8019ad6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8019a9a:	4b65      	ldr	r3, [pc, #404]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019aa0:	0c1b      	lsrs	r3, r3, #16
 8019aa2:	f003 0303 	and.w	r3, r3, #3
 8019aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8019aa8:	4b61      	ldr	r3, [pc, #388]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019aae:	0e1b      	lsrs	r3, r3, #24
 8019ab0:	f003 030f 	and.w	r3, r3, #15
 8019ab4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	685b      	ldr	r3, [r3, #4]
 8019aba:	019a      	lsls	r2, r3, #6
 8019abc:	693b      	ldr	r3, [r7, #16]
 8019abe:	041b      	lsls	r3, r3, #16
 8019ac0:	431a      	orrs	r2, r3
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	061b      	lsls	r3, r3, #24
 8019ac6:	431a      	orrs	r2, r3
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	689b      	ldr	r3, [r3, #8]
 8019acc:	071b      	lsls	r3, r3, #28
 8019ace:	4958      	ldr	r1, [pc, #352]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ad0:	4313      	orrs	r3, r2
 8019ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d004      	beq.n	8019aec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019aea:	d00a      	beq.n	8019b02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d02e      	beq.n	8019b56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019b00:	d129      	bne.n	8019b56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8019b02:	4b4b      	ldr	r3, [pc, #300]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019b08:	0c1b      	lsrs	r3, r3, #16
 8019b0a:	f003 0303 	and.w	r3, r3, #3
 8019b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019b10:	4b47      	ldr	r3, [pc, #284]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019b16:	0f1b      	lsrs	r3, r3, #28
 8019b18:	f003 0307 	and.w	r3, r3, #7
 8019b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	685b      	ldr	r3, [r3, #4]
 8019b22:	019a      	lsls	r2, r3, #6
 8019b24:	693b      	ldr	r3, [r7, #16]
 8019b26:	041b      	lsls	r3, r3, #16
 8019b28:	431a      	orrs	r2, r3
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	68db      	ldr	r3, [r3, #12]
 8019b2e:	061b      	lsls	r3, r3, #24
 8019b30:	431a      	orrs	r2, r3
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	071b      	lsls	r3, r3, #28
 8019b36:	493e      	ldr	r1, [pc, #248]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b38:	4313      	orrs	r3, r2
 8019b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8019b3e:	4b3c      	ldr	r3, [pc, #240]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b44:	f023 021f 	bic.w	r2, r3, #31
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b4c:	3b01      	subs	r3, #1
 8019b4e:	4938      	ldr	r1, [pc, #224]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b50:	4313      	orrs	r3, r2
 8019b52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d01d      	beq.n	8019b9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8019b62:	4b33      	ldr	r3, [pc, #204]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019b68:	0e1b      	lsrs	r3, r3, #24
 8019b6a:	f003 030f 	and.w	r3, r3, #15
 8019b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019b70:	4b2f      	ldr	r3, [pc, #188]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019b76:	0f1b      	lsrs	r3, r3, #28
 8019b78:	f003 0307 	and.w	r3, r3, #7
 8019b7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	685b      	ldr	r3, [r3, #4]
 8019b82:	019a      	lsls	r2, r3, #6
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	691b      	ldr	r3, [r3, #16]
 8019b88:	041b      	lsls	r3, r3, #16
 8019b8a:	431a      	orrs	r2, r3
 8019b8c:	693b      	ldr	r3, [r7, #16]
 8019b8e:	061b      	lsls	r3, r3, #24
 8019b90:	431a      	orrs	r2, r3
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	071b      	lsls	r3, r3, #28
 8019b96:	4926      	ldr	r1, [pc, #152]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b98:	4313      	orrs	r3, r2
 8019b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d011      	beq.n	8019bce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	685b      	ldr	r3, [r3, #4]
 8019bae:	019a      	lsls	r2, r3, #6
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	691b      	ldr	r3, [r3, #16]
 8019bb4:	041b      	lsls	r3, r3, #16
 8019bb6:	431a      	orrs	r2, r3
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	68db      	ldr	r3, [r3, #12]
 8019bbc:	061b      	lsls	r3, r3, #24
 8019bbe:	431a      	orrs	r2, r3
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	689b      	ldr	r3, [r3, #8]
 8019bc4:	071b      	lsls	r3, r3, #28
 8019bc6:	491a      	ldr	r1, [pc, #104]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019bc8:	4313      	orrs	r3, r2
 8019bca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8019bce:	4b18      	ldr	r3, [pc, #96]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	4a17      	ldr	r2, [pc, #92]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8019bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019bda:	f7fb fcb9 	bl	8015550 <HAL_GetTick>
 8019bde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8019be0:	e008      	b.n	8019bf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019be2:	f7fb fcb5 	bl	8015550 <HAL_GetTick>
 8019be6:	4602      	mov	r2, r0
 8019be8:	697b      	ldr	r3, [r7, #20]
 8019bea:	1ad3      	subs	r3, r2, r3
 8019bec:	2b64      	cmp	r3, #100	; 0x64
 8019bee:	d901      	bls.n	8019bf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019bf0:	2303      	movs	r3, #3
 8019bf2:	e0d8      	b.n	8019da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8019bf4:	4b0e      	ldr	r3, [pc, #56]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d0f0      	beq.n	8019be2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8019c00:	69bb      	ldr	r3, [r7, #24]
 8019c02:	2b01      	cmp	r3, #1
 8019c04:	f040 80ce 	bne.w	8019da4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8019c08:	4b09      	ldr	r3, [pc, #36]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	4a08      	ldr	r2, [pc, #32]	; (8019c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019c14:	f7fb fc9c 	bl	8015550 <HAL_GetTick>
 8019c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019c1a:	e00b      	b.n	8019c34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019c1c:	f7fb fc98 	bl	8015550 <HAL_GetTick>
 8019c20:	4602      	mov	r2, r0
 8019c22:	697b      	ldr	r3, [r7, #20]
 8019c24:	1ad3      	subs	r3, r2, r3
 8019c26:	2b64      	cmp	r3, #100	; 0x64
 8019c28:	d904      	bls.n	8019c34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019c2a:	2303      	movs	r3, #3
 8019c2c:	e0bb      	b.n	8019da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8019c2e:	bf00      	nop
 8019c30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019c34:	4b5e      	ldr	r3, [pc, #376]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019c40:	d0ec      	beq.n	8019c1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d003      	beq.n	8019c56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d009      	beq.n	8019c6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d02e      	beq.n	8019cc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d12a      	bne.n	8019cc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8019c6a:	4b51      	ldr	r3, [pc, #324]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019c70:	0c1b      	lsrs	r3, r3, #16
 8019c72:	f003 0303 	and.w	r3, r3, #3
 8019c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8019c78:	4b4d      	ldr	r3, [pc, #308]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019c7e:	0f1b      	lsrs	r3, r3, #28
 8019c80:	f003 0307 	and.w	r3, r3, #7
 8019c84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	695b      	ldr	r3, [r3, #20]
 8019c8a:	019a      	lsls	r2, r3, #6
 8019c8c:	693b      	ldr	r3, [r7, #16]
 8019c8e:	041b      	lsls	r3, r3, #16
 8019c90:	431a      	orrs	r2, r3
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	699b      	ldr	r3, [r3, #24]
 8019c96:	061b      	lsls	r3, r3, #24
 8019c98:	431a      	orrs	r2, r3
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	071b      	lsls	r3, r3, #28
 8019c9e:	4944      	ldr	r1, [pc, #272]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019ca0:	4313      	orrs	r3, r2
 8019ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8019ca6:	4b42      	ldr	r3, [pc, #264]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019cac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cb4:	3b01      	subs	r3, #1
 8019cb6:	021b      	lsls	r3, r3, #8
 8019cb8:	493d      	ldr	r1, [pc, #244]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019cba:	4313      	orrs	r3, r2
 8019cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d022      	beq.n	8019d12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019cd4:	d11d      	bne.n	8019d12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019cd6:	4b36      	ldr	r3, [pc, #216]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019cdc:	0e1b      	lsrs	r3, r3, #24
 8019cde:	f003 030f 	and.w	r3, r3, #15
 8019ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8019ce4:	4b32      	ldr	r3, [pc, #200]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019cea:	0f1b      	lsrs	r3, r3, #28
 8019cec:	f003 0307 	and.w	r3, r3, #7
 8019cf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	695b      	ldr	r3, [r3, #20]
 8019cf6:	019a      	lsls	r2, r3, #6
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	6a1b      	ldr	r3, [r3, #32]
 8019cfc:	041b      	lsls	r3, r3, #16
 8019cfe:	431a      	orrs	r2, r3
 8019d00:	693b      	ldr	r3, [r7, #16]
 8019d02:	061b      	lsls	r3, r3, #24
 8019d04:	431a      	orrs	r2, r3
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	071b      	lsls	r3, r3, #28
 8019d0a:	4929      	ldr	r1, [pc, #164]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d0c:	4313      	orrs	r3, r2
 8019d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	f003 0308 	and.w	r3, r3, #8
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d028      	beq.n	8019d70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019d1e:	4b24      	ldr	r3, [pc, #144]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019d24:	0e1b      	lsrs	r3, r3, #24
 8019d26:	f003 030f 	and.w	r3, r3, #15
 8019d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8019d2c:	4b20      	ldr	r3, [pc, #128]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019d32:	0c1b      	lsrs	r3, r3, #16
 8019d34:	f003 0303 	and.w	r3, r3, #3
 8019d38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	695b      	ldr	r3, [r3, #20]
 8019d3e:	019a      	lsls	r2, r3, #6
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	041b      	lsls	r3, r3, #16
 8019d44:	431a      	orrs	r2, r3
 8019d46:	693b      	ldr	r3, [r7, #16]
 8019d48:	061b      	lsls	r3, r3, #24
 8019d4a:	431a      	orrs	r2, r3
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	69db      	ldr	r3, [r3, #28]
 8019d50:	071b      	lsls	r3, r3, #28
 8019d52:	4917      	ldr	r1, [pc, #92]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d54:	4313      	orrs	r3, r2
 8019d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8019d5a:	4b15      	ldr	r3, [pc, #84]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d68:	4911      	ldr	r1, [pc, #68]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d6a:	4313      	orrs	r3, r2
 8019d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8019d70:	4b0f      	ldr	r3, [pc, #60]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	4a0e      	ldr	r2, [pc, #56]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019d7c:	f7fb fbe8 	bl	8015550 <HAL_GetTick>
 8019d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019d82:	e008      	b.n	8019d96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019d84:	f7fb fbe4 	bl	8015550 <HAL_GetTick>
 8019d88:	4602      	mov	r2, r0
 8019d8a:	697b      	ldr	r3, [r7, #20]
 8019d8c:	1ad3      	subs	r3, r2, r3
 8019d8e:	2b64      	cmp	r3, #100	; 0x64
 8019d90:	d901      	bls.n	8019d96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019d92:	2303      	movs	r3, #3
 8019d94:	e007      	b.n	8019da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019d96:	4b06      	ldr	r3, [pc, #24]	; (8019db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019da2:	d1ef      	bne.n	8019d84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8019da4:	2300      	movs	r3, #0
}
 8019da6:	4618      	mov	r0, r3
 8019da8:	3720      	adds	r7, #32
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}
 8019dae:	bf00      	nop
 8019db0:	40023800 	.word	0x40023800

08019db4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	b082      	sub	sp, #8
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d101      	bne.n	8019dc6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8019dc2:	2301      	movs	r3, #1
 8019dc4:	e01c      	b.n	8019e00 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	795b      	ldrb	r3, [r3, #5]
 8019dca:	b2db      	uxtb	r3, r3
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d105      	bne.n	8019ddc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	2200      	movs	r2, #0
 8019dd4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8019dd6:	6878      	ldr	r0, [r7, #4]
 8019dd8:	f7f9 fe48 	bl	8013a6c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	2202      	movs	r2, #2
 8019de0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	681a      	ldr	r2, [r3, #0]
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	f042 0204 	orr.w	r2, r2, #4
 8019df0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	2201      	movs	r2, #1
 8019df6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	2200      	movs	r2, #0
 8019dfc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8019dfe:	2300      	movs	r3, #0
}
 8019e00:	4618      	mov	r0, r3
 8019e02:	3708      	adds	r7, #8
 8019e04:	46bd      	mov	sp, r7
 8019e06:	bd80      	pop	{r7, pc}

08019e08 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b084      	sub	sp, #16
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
 8019e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019e12:	2300      	movs	r3, #0
 8019e14:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	791b      	ldrb	r3, [r3, #4]
 8019e1a:	2b01      	cmp	r3, #1
 8019e1c:	d101      	bne.n	8019e22 <HAL_RNG_GenerateRandomNumber+0x1a>
 8019e1e:	2302      	movs	r3, #2
 8019e20:	e044      	b.n	8019eac <HAL_RNG_GenerateRandomNumber+0xa4>
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	2201      	movs	r2, #1
 8019e26:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	795b      	ldrb	r3, [r3, #5]
 8019e2c:	b2db      	uxtb	r3, r3
 8019e2e:	2b01      	cmp	r3, #1
 8019e30:	d133      	bne.n	8019e9a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	2202      	movs	r2, #2
 8019e36:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019e38:	f7fb fb8a 	bl	8015550 <HAL_GetTick>
 8019e3c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019e3e:	e018      	b.n	8019e72 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8019e40:	f7fb fb86 	bl	8015550 <HAL_GetTick>
 8019e44:	4602      	mov	r2, r0
 8019e46:	68bb      	ldr	r3, [r7, #8]
 8019e48:	1ad3      	subs	r3, r2, r3
 8019e4a:	2b02      	cmp	r3, #2
 8019e4c:	d911      	bls.n	8019e72 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	685b      	ldr	r3, [r3, #4]
 8019e54:	f003 0301 	and.w	r3, r3, #1
 8019e58:	2b01      	cmp	r3, #1
 8019e5a:	d00a      	beq.n	8019e72 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2201      	movs	r2, #1
 8019e60:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	2202      	movs	r2, #2
 8019e66:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8019e6e:	2301      	movs	r3, #1
 8019e70:	e01c      	b.n	8019eac <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	685b      	ldr	r3, [r3, #4]
 8019e78:	f003 0301 	and.w	r3, r3, #1
 8019e7c:	2b01      	cmp	r3, #1
 8019e7e:	d1df      	bne.n	8019e40 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	689a      	ldr	r2, [r3, #8]
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	68da      	ldr	r2, [r3, #12]
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	2201      	movs	r2, #1
 8019e96:	715a      	strb	r2, [r3, #5]
 8019e98:	e004      	b.n	8019ea4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	2204      	movs	r2, #4
 8019e9e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8019ea0:	2301      	movs	r3, #1
 8019ea2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	2200      	movs	r2, #0
 8019ea8:	711a      	strb	r2, [r3, #4]

  return status;
 8019eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8019eac:	4618      	mov	r0, r3
 8019eae:	3710      	adds	r7, #16
 8019eb0:	46bd      	mov	sp, r7
 8019eb2:	bd80      	pop	{r7, pc}

08019eb4 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b082      	sub	sp, #8
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	330c      	adds	r3, #12
 8019ec0:	4619      	mov	r1, r3
 8019ec2:	6878      	ldr	r0, [r7, #4]
 8019ec4:	f7ff ffa0 	bl	8019e08 <HAL_RNG_GenerateRandomNumber>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d102      	bne.n	8019ed4 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	68db      	ldr	r3, [r3, #12]
 8019ed2:	e000      	b.n	8019ed6 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8019ed4:	2300      	movs	r3, #0
  }
}
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	3708      	adds	r7, #8
 8019eda:	46bd      	mov	sp, r7
 8019edc:	bd80      	pop	{r7, pc}

08019ede <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8019ede:	b580      	push	{r7, lr}
 8019ee0:	b084      	sub	sp, #16
 8019ee2:	af00      	add	r7, sp, #0
 8019ee4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d101      	bne.n	8019ef0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8019eec:	2301      	movs	r3, #1
 8019eee:	e09d      	b.n	801a02c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d108      	bne.n	8019f0a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	685b      	ldr	r3, [r3, #4]
 8019efc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019f00:	d009      	beq.n	8019f16 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	2200      	movs	r2, #0
 8019f06:	61da      	str	r2, [r3, #28]
 8019f08:	e005      	b.n	8019f16 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	2200      	movs	r2, #0
 8019f14:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	2200      	movs	r2, #0
 8019f1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019f22:	b2db      	uxtb	r3, r3
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d106      	bne.n	8019f36 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8019f30:	6878      	ldr	r0, [r7, #4]
 8019f32:	f7f9 fe23 	bl	8013b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	2202      	movs	r2, #2
 8019f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	681a      	ldr	r2, [r3, #0]
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019f4c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	68db      	ldr	r3, [r3, #12]
 8019f52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019f56:	d902      	bls.n	8019f5e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8019f58:	2300      	movs	r3, #0
 8019f5a:	60fb      	str	r3, [r7, #12]
 8019f5c:	e002      	b.n	8019f64 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8019f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019f62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	68db      	ldr	r3, [r3, #12]
 8019f68:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8019f6c:	d007      	beq.n	8019f7e <HAL_SPI_Init+0xa0>
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	68db      	ldr	r3, [r3, #12]
 8019f72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019f76:	d002      	beq.n	8019f7e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	685b      	ldr	r3, [r3, #4]
 8019f82:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	689b      	ldr	r3, [r3, #8]
 8019f8a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8019f8e:	431a      	orrs	r2, r3
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	691b      	ldr	r3, [r3, #16]
 8019f94:	f003 0302 	and.w	r3, r3, #2
 8019f98:	431a      	orrs	r2, r3
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	695b      	ldr	r3, [r3, #20]
 8019f9e:	f003 0301 	and.w	r3, r3, #1
 8019fa2:	431a      	orrs	r2, r3
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	699b      	ldr	r3, [r3, #24]
 8019fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019fac:	431a      	orrs	r2, r3
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	69db      	ldr	r3, [r3, #28]
 8019fb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8019fb6:	431a      	orrs	r2, r3
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	6a1b      	ldr	r3, [r3, #32]
 8019fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019fc0:	ea42 0103 	orr.w	r1, r2, r3
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	430a      	orrs	r2, r1
 8019fd2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	699b      	ldr	r3, [r3, #24]
 8019fd8:	0c1b      	lsrs	r3, r3, #16
 8019fda:	f003 0204 	and.w	r2, r3, #4
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fe2:	f003 0310 	and.w	r3, r3, #16
 8019fe6:	431a      	orrs	r2, r3
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019fec:	f003 0308 	and.w	r3, r3, #8
 8019ff0:	431a      	orrs	r2, r3
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	68db      	ldr	r3, [r3, #12]
 8019ff6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019ffa:	ea42 0103 	orr.w	r1, r2, r3
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	430a      	orrs	r2, r1
 801a00a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	69da      	ldr	r2, [r3, #28]
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801a01a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	2200      	movs	r2, #0
 801a020:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	2201      	movs	r2, #1
 801a026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801a02a:	2300      	movs	r3, #0
}
 801a02c:	4618      	mov	r0, r3
 801a02e:	3710      	adds	r7, #16
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}

0801a034 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b088      	sub	sp, #32
 801a038:	af00      	add	r7, sp, #0
 801a03a:	60f8      	str	r0, [r7, #12]
 801a03c:	60b9      	str	r1, [r7, #8]
 801a03e:	603b      	str	r3, [r7, #0]
 801a040:	4613      	mov	r3, r2
 801a042:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a044:	2300      	movs	r3, #0
 801a046:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a04e:	2b01      	cmp	r3, #1
 801a050:	d101      	bne.n	801a056 <HAL_SPI_Transmit+0x22>
 801a052:	2302      	movs	r3, #2
 801a054:	e158      	b.n	801a308 <HAL_SPI_Transmit+0x2d4>
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	2201      	movs	r2, #1
 801a05a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a05e:	f7fb fa77 	bl	8015550 <HAL_GetTick>
 801a062:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801a064:	88fb      	ldrh	r3, [r7, #6]
 801a066:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a06e:	b2db      	uxtb	r3, r3
 801a070:	2b01      	cmp	r3, #1
 801a072:	d002      	beq.n	801a07a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801a074:	2302      	movs	r3, #2
 801a076:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a078:	e13d      	b.n	801a2f6 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801a07a:	68bb      	ldr	r3, [r7, #8]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d002      	beq.n	801a086 <HAL_SPI_Transmit+0x52>
 801a080:	88fb      	ldrh	r3, [r7, #6]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d102      	bne.n	801a08c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801a086:	2301      	movs	r3, #1
 801a088:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a08a:	e134      	b.n	801a2f6 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	2203      	movs	r2, #3
 801a090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	2200      	movs	r2, #0
 801a098:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	68ba      	ldr	r2, [r7, #8]
 801a09e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	88fa      	ldrh	r2, [r7, #6]
 801a0a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	88fa      	ldrh	r2, [r7, #6]
 801a0aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	2200      	movs	r2, #0
 801a0be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	689b      	ldr	r3, [r3, #8]
 801a0d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a0d6:	d10f      	bne.n	801a0f8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	681a      	ldr	r2, [r3, #0]
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a0e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	681a      	ldr	r2, [r3, #0]
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a0f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a102:	2b40      	cmp	r3, #64	; 0x40
 801a104:	d007      	beq.n	801a116 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	681a      	ldr	r2, [r3, #0]
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a114:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	68db      	ldr	r3, [r3, #12]
 801a11a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a11e:	d94b      	bls.n	801a1b8 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	685b      	ldr	r3, [r3, #4]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d002      	beq.n	801a12e <HAL_SPI_Transmit+0xfa>
 801a128:	8afb      	ldrh	r3, [r7, #22]
 801a12a:	2b01      	cmp	r3, #1
 801a12c:	d13e      	bne.n	801a1ac <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a132:	881a      	ldrh	r2, [r3, #0]
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a13e:	1c9a      	adds	r2, r3, #2
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a148:	b29b      	uxth	r3, r3
 801a14a:	3b01      	subs	r3, #1
 801a14c:	b29a      	uxth	r2, r3
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801a152:	e02b      	b.n	801a1ac <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	689b      	ldr	r3, [r3, #8]
 801a15a:	f003 0302 	and.w	r3, r3, #2
 801a15e:	2b02      	cmp	r3, #2
 801a160:	d112      	bne.n	801a188 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a166:	881a      	ldrh	r2, [r3, #0]
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a172:	1c9a      	adds	r2, r3, #2
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a17c:	b29b      	uxth	r3, r3
 801a17e:	3b01      	subs	r3, #1
 801a180:	b29a      	uxth	r2, r3
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a186:	e011      	b.n	801a1ac <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a188:	f7fb f9e2 	bl	8015550 <HAL_GetTick>
 801a18c:	4602      	mov	r2, r0
 801a18e:	69bb      	ldr	r3, [r7, #24]
 801a190:	1ad3      	subs	r3, r2, r3
 801a192:	683a      	ldr	r2, [r7, #0]
 801a194:	429a      	cmp	r2, r3
 801a196:	d803      	bhi.n	801a1a0 <HAL_SPI_Transmit+0x16c>
 801a198:	683b      	ldr	r3, [r7, #0]
 801a19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a19e:	d102      	bne.n	801a1a6 <HAL_SPI_Transmit+0x172>
 801a1a0:	683b      	ldr	r3, [r7, #0]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d102      	bne.n	801a1ac <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801a1a6:	2303      	movs	r3, #3
 801a1a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a1aa:	e0a4      	b.n	801a2f6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a1b0:	b29b      	uxth	r3, r3
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d1ce      	bne.n	801a154 <HAL_SPI_Transmit+0x120>
 801a1b6:	e07c      	b.n	801a2b2 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	685b      	ldr	r3, [r3, #4]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d002      	beq.n	801a1c6 <HAL_SPI_Transmit+0x192>
 801a1c0:	8afb      	ldrh	r3, [r7, #22]
 801a1c2:	2b01      	cmp	r3, #1
 801a1c4:	d170      	bne.n	801a2a8 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801a1c6:	68fb      	ldr	r3, [r7, #12]
 801a1c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a1ca:	b29b      	uxth	r3, r3
 801a1cc:	2b01      	cmp	r3, #1
 801a1ce:	d912      	bls.n	801a1f6 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1d4:	881a      	ldrh	r2, [r3, #0]
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1e0:	1c9a      	adds	r2, r3, #2
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a1ea:	b29b      	uxth	r3, r3
 801a1ec:	3b02      	subs	r3, #2
 801a1ee:	b29a      	uxth	r2, r3
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a1f4:	e058      	b.n	801a2a8 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a1f6:	68fb      	ldr	r3, [r7, #12]
 801a1f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	330c      	adds	r3, #12
 801a200:	7812      	ldrb	r2, [r2, #0]
 801a202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a208:	1c5a      	adds	r2, r3, #1
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a212:	b29b      	uxth	r3, r3
 801a214:	3b01      	subs	r3, #1
 801a216:	b29a      	uxth	r2, r3
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801a21c:	e044      	b.n	801a2a8 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	689b      	ldr	r3, [r3, #8]
 801a224:	f003 0302 	and.w	r3, r3, #2
 801a228:	2b02      	cmp	r3, #2
 801a22a:	d12b      	bne.n	801a284 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a230:	b29b      	uxth	r3, r3
 801a232:	2b01      	cmp	r3, #1
 801a234:	d912      	bls.n	801a25c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a23a:	881a      	ldrh	r2, [r3, #0]
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a246:	1c9a      	adds	r2, r3, #2
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a250:	b29b      	uxth	r3, r3
 801a252:	3b02      	subs	r3, #2
 801a254:	b29a      	uxth	r2, r3
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a25a:	e025      	b.n	801a2a8 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	330c      	adds	r3, #12
 801a266:	7812      	ldrb	r2, [r2, #0]
 801a268:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a26e:	1c5a      	adds	r2, r3, #1
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a278:	b29b      	uxth	r3, r3
 801a27a:	3b01      	subs	r3, #1
 801a27c:	b29a      	uxth	r2, r3
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a282:	e011      	b.n	801a2a8 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a284:	f7fb f964 	bl	8015550 <HAL_GetTick>
 801a288:	4602      	mov	r2, r0
 801a28a:	69bb      	ldr	r3, [r7, #24]
 801a28c:	1ad3      	subs	r3, r2, r3
 801a28e:	683a      	ldr	r2, [r7, #0]
 801a290:	429a      	cmp	r2, r3
 801a292:	d803      	bhi.n	801a29c <HAL_SPI_Transmit+0x268>
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a29a:	d102      	bne.n	801a2a2 <HAL_SPI_Transmit+0x26e>
 801a29c:	683b      	ldr	r3, [r7, #0]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d102      	bne.n	801a2a8 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801a2a2:	2303      	movs	r3, #3
 801a2a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a2a6:	e026      	b.n	801a2f6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a2ac:	b29b      	uxth	r3, r3
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d1b5      	bne.n	801a21e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a2b2:	69ba      	ldr	r2, [r7, #24]
 801a2b4:	6839      	ldr	r1, [r7, #0]
 801a2b6:	68f8      	ldr	r0, [r7, #12]
 801a2b8:	f000 fd08 	bl	801accc <SPI_EndRxTxTransaction>
 801a2bc:	4603      	mov	r3, r0
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d002      	beq.n	801a2c8 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	2220      	movs	r2, #32
 801a2c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	689b      	ldr	r3, [r3, #8]
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d10a      	bne.n	801a2e6 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	613b      	str	r3, [r7, #16]
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	68db      	ldr	r3, [r3, #12]
 801a2da:	613b      	str	r3, [r7, #16]
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	689b      	ldr	r3, [r3, #8]
 801a2e2:	613b      	str	r3, [r7, #16]
 801a2e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d002      	beq.n	801a2f4 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801a2ee:	2301      	movs	r3, #1
 801a2f0:	77fb      	strb	r3, [r7, #31]
 801a2f2:	e000      	b.n	801a2f6 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801a2f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	2201      	movs	r2, #1
 801a2fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	2200      	movs	r2, #0
 801a302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a306:	7ffb      	ldrb	r3, [r7, #31]
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3720      	adds	r7, #32
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}

0801a310 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b088      	sub	sp, #32
 801a314:	af02      	add	r7, sp, #8
 801a316:	60f8      	str	r0, [r7, #12]
 801a318:	60b9      	str	r1, [r7, #8]
 801a31a:	603b      	str	r3, [r7, #0]
 801a31c:	4613      	mov	r3, r2
 801a31e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a320:	2300      	movs	r3, #0
 801a322:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	685b      	ldr	r3, [r3, #4]
 801a328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a32c:	d112      	bne.n	801a354 <HAL_SPI_Receive+0x44>
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	689b      	ldr	r3, [r3, #8]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d10e      	bne.n	801a354 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	2204      	movs	r2, #4
 801a33a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801a33e:	88fa      	ldrh	r2, [r7, #6]
 801a340:	683b      	ldr	r3, [r7, #0]
 801a342:	9300      	str	r3, [sp, #0]
 801a344:	4613      	mov	r3, r2
 801a346:	68ba      	ldr	r2, [r7, #8]
 801a348:	68b9      	ldr	r1, [r7, #8]
 801a34a:	68f8      	ldr	r0, [r7, #12]
 801a34c:	f000 f910 	bl	801a570 <HAL_SPI_TransmitReceive>
 801a350:	4603      	mov	r3, r0
 801a352:	e109      	b.n	801a568 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a35a:	2b01      	cmp	r3, #1
 801a35c:	d101      	bne.n	801a362 <HAL_SPI_Receive+0x52>
 801a35e:	2302      	movs	r3, #2
 801a360:	e102      	b.n	801a568 <HAL_SPI_Receive+0x258>
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	2201      	movs	r2, #1
 801a366:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a36a:	f7fb f8f1 	bl	8015550 <HAL_GetTick>
 801a36e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a376:	b2db      	uxtb	r3, r3
 801a378:	2b01      	cmp	r3, #1
 801a37a:	d002      	beq.n	801a382 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801a37c:	2302      	movs	r3, #2
 801a37e:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a380:	e0e9      	b.n	801a556 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801a382:	68bb      	ldr	r3, [r7, #8]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d002      	beq.n	801a38e <HAL_SPI_Receive+0x7e>
 801a388:	88fb      	ldrh	r3, [r7, #6]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d102      	bne.n	801a394 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801a38e:	2301      	movs	r3, #1
 801a390:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a392:	e0e0      	b.n	801a556 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	2204      	movs	r2, #4
 801a398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	2200      	movs	r2, #0
 801a3a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	68ba      	ldr	r2, [r7, #8]
 801a3a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	88fa      	ldrh	r2, [r7, #6]
 801a3ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	88fa      	ldrh	r2, [r7, #6]
 801a3b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	2200      	movs	r2, #0
 801a3bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	2200      	movs	r2, #0
 801a3d4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	68db      	ldr	r3, [r3, #12]
 801a3da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a3de:	d908      	bls.n	801a3f2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	685a      	ldr	r2, [r3, #4]
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a3ee:	605a      	str	r2, [r3, #4]
 801a3f0:	e007      	b.n	801a402 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	685a      	ldr	r2, [r3, #4]
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a400:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	689b      	ldr	r3, [r3, #8]
 801a406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a40a:	d10f      	bne.n	801a42c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	681a      	ldr	r2, [r3, #0]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a41a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	681a      	ldr	r2, [r3, #0]
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a42a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a436:	2b40      	cmp	r3, #64	; 0x40
 801a438:	d007      	beq.n	801a44a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	681a      	ldr	r2, [r3, #0]
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a448:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	68db      	ldr	r3, [r3, #12]
 801a44e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a452:	d867      	bhi.n	801a524 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801a454:	e030      	b.n	801a4b8 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	689b      	ldr	r3, [r3, #8]
 801a45c:	f003 0301 	and.w	r3, r3, #1
 801a460:	2b01      	cmp	r3, #1
 801a462:	d117      	bne.n	801a494 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a464:	68fb      	ldr	r3, [r7, #12]
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	f103 020c 	add.w	r2, r3, #12
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a470:	7812      	ldrb	r2, [r2, #0]
 801a472:	b2d2      	uxtb	r2, r2
 801a474:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a47a:	1c5a      	adds	r2, r3, #1
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a486:	b29b      	uxth	r3, r3
 801a488:	3b01      	subs	r3, #1
 801a48a:	b29a      	uxth	r2, r3
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a492:	e011      	b.n	801a4b8 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a494:	f7fb f85c 	bl	8015550 <HAL_GetTick>
 801a498:	4602      	mov	r2, r0
 801a49a:	693b      	ldr	r3, [r7, #16]
 801a49c:	1ad3      	subs	r3, r2, r3
 801a49e:	683a      	ldr	r2, [r7, #0]
 801a4a0:	429a      	cmp	r2, r3
 801a4a2:	d803      	bhi.n	801a4ac <HAL_SPI_Receive+0x19c>
 801a4a4:	683b      	ldr	r3, [r7, #0]
 801a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4aa:	d102      	bne.n	801a4b2 <HAL_SPI_Receive+0x1a2>
 801a4ac:	683b      	ldr	r3, [r7, #0]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d102      	bne.n	801a4b8 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801a4b2:	2303      	movs	r3, #3
 801a4b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a4b6:	e04e      	b.n	801a556 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a4be:	b29b      	uxth	r3, r3
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d1c8      	bne.n	801a456 <HAL_SPI_Receive+0x146>
 801a4c4:	e034      	b.n	801a530 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	689b      	ldr	r3, [r3, #8]
 801a4cc:	f003 0301 	and.w	r3, r3, #1
 801a4d0:	2b01      	cmp	r3, #1
 801a4d2:	d115      	bne.n	801a500 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	68da      	ldr	r2, [r3, #12]
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4de:	b292      	uxth	r2, r2
 801a4e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4e6:	1c9a      	adds	r2, r3, #2
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a4f2:	b29b      	uxth	r3, r3
 801a4f4:	3b01      	subs	r3, #1
 801a4f6:	b29a      	uxth	r2, r3
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a4fe:	e011      	b.n	801a524 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a500:	f7fb f826 	bl	8015550 <HAL_GetTick>
 801a504:	4602      	mov	r2, r0
 801a506:	693b      	ldr	r3, [r7, #16]
 801a508:	1ad3      	subs	r3, r2, r3
 801a50a:	683a      	ldr	r2, [r7, #0]
 801a50c:	429a      	cmp	r2, r3
 801a50e:	d803      	bhi.n	801a518 <HAL_SPI_Receive+0x208>
 801a510:	683b      	ldr	r3, [r7, #0]
 801a512:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a516:	d102      	bne.n	801a51e <HAL_SPI_Receive+0x20e>
 801a518:	683b      	ldr	r3, [r7, #0]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d102      	bne.n	801a524 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801a51e:	2303      	movs	r3, #3
 801a520:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a522:	e018      	b.n	801a556 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a52a:	b29b      	uxth	r3, r3
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d1ca      	bne.n	801a4c6 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a530:	693a      	ldr	r2, [r7, #16]
 801a532:	6839      	ldr	r1, [r7, #0]
 801a534:	68f8      	ldr	r0, [r7, #12]
 801a536:	f000 fb4d 	bl	801abd4 <SPI_EndRxTransaction>
 801a53a:	4603      	mov	r3, r0
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d002      	beq.n	801a546 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	2220      	movs	r2, #32
 801a544:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d002      	beq.n	801a554 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801a54e:	2301      	movs	r3, #1
 801a550:	75fb      	strb	r3, [r7, #23]
 801a552:	e000      	b.n	801a556 <HAL_SPI_Receive+0x246>
  }

error :
 801a554:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	2201      	movs	r2, #1
 801a55a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	2200      	movs	r2, #0
 801a562:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a566:	7dfb      	ldrb	r3, [r7, #23]
}
 801a568:	4618      	mov	r0, r3
 801a56a:	3718      	adds	r7, #24
 801a56c:	46bd      	mov	sp, r7
 801a56e:	bd80      	pop	{r7, pc}

0801a570 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801a570:	b580      	push	{r7, lr}
 801a572:	b08a      	sub	sp, #40	; 0x28
 801a574:	af00      	add	r7, sp, #0
 801a576:	60f8      	str	r0, [r7, #12]
 801a578:	60b9      	str	r1, [r7, #8]
 801a57a:	607a      	str	r2, [r7, #4]
 801a57c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801a57e:	2301      	movs	r3, #1
 801a580:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801a582:	2300      	movs	r3, #0
 801a584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a58e:	2b01      	cmp	r3, #1
 801a590:	d101      	bne.n	801a596 <HAL_SPI_TransmitReceive+0x26>
 801a592:	2302      	movs	r3, #2
 801a594:	e1fb      	b.n	801a98e <HAL_SPI_TransmitReceive+0x41e>
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	2201      	movs	r2, #1
 801a59a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a59e:	f7fa ffd7 	bl	8015550 <HAL_GetTick>
 801a5a2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a5aa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801a5ac:	68fb      	ldr	r3, [r7, #12]
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801a5b2:	887b      	ldrh	r3, [r7, #2]
 801a5b4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801a5b6:	887b      	ldrh	r3, [r7, #2]
 801a5b8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801a5ba:	7efb      	ldrb	r3, [r7, #27]
 801a5bc:	2b01      	cmp	r3, #1
 801a5be:	d00e      	beq.n	801a5de <HAL_SPI_TransmitReceive+0x6e>
 801a5c0:	697b      	ldr	r3, [r7, #20]
 801a5c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a5c6:	d106      	bne.n	801a5d6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	689b      	ldr	r3, [r3, #8]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d102      	bne.n	801a5d6 <HAL_SPI_TransmitReceive+0x66>
 801a5d0:	7efb      	ldrb	r3, [r7, #27]
 801a5d2:	2b04      	cmp	r3, #4
 801a5d4:	d003      	beq.n	801a5de <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801a5d6:	2302      	movs	r3, #2
 801a5d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a5dc:	e1cd      	b.n	801a97a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801a5de:	68bb      	ldr	r3, [r7, #8]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d005      	beq.n	801a5f0 <HAL_SPI_TransmitReceive+0x80>
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d002      	beq.n	801a5f0 <HAL_SPI_TransmitReceive+0x80>
 801a5ea:	887b      	ldrh	r3, [r7, #2]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d103      	bne.n	801a5f8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801a5f0:	2301      	movs	r3, #1
 801a5f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a5f6:	e1c0      	b.n	801a97a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a5fe:	b2db      	uxtb	r3, r3
 801a600:	2b04      	cmp	r3, #4
 801a602:	d003      	beq.n	801a60c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	2205      	movs	r2, #5
 801a608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	2200      	movs	r2, #0
 801a610:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	687a      	ldr	r2, [r7, #4]
 801a616:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	887a      	ldrh	r2, [r7, #2]
 801a61c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	887a      	ldrh	r2, [r7, #2]
 801a624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	68ba      	ldr	r2, [r7, #8]
 801a62c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	887a      	ldrh	r2, [r7, #2]
 801a632:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	887a      	ldrh	r2, [r7, #2]
 801a638:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	2200      	movs	r2, #0
 801a63e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	2200      	movs	r2, #0
 801a644:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	68db      	ldr	r3, [r3, #12]
 801a64a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a64e:	d802      	bhi.n	801a656 <HAL_SPI_TransmitReceive+0xe6>
 801a650:	8a3b      	ldrh	r3, [r7, #16]
 801a652:	2b01      	cmp	r3, #1
 801a654:	d908      	bls.n	801a668 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	685a      	ldr	r2, [r3, #4]
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a664:	605a      	str	r2, [r3, #4]
 801a666:	e007      	b.n	801a678 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	685a      	ldr	r2, [r3, #4]
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a676:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a682:	2b40      	cmp	r3, #64	; 0x40
 801a684:	d007      	beq.n	801a696 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	681a      	ldr	r2, [r3, #0]
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a694:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	68db      	ldr	r3, [r3, #12]
 801a69a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a69e:	d97c      	bls.n	801a79a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	685b      	ldr	r3, [r3, #4]
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	d002      	beq.n	801a6ae <HAL_SPI_TransmitReceive+0x13e>
 801a6a8:	8a7b      	ldrh	r3, [r7, #18]
 801a6aa:	2b01      	cmp	r3, #1
 801a6ac:	d169      	bne.n	801a782 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6b2:	881a      	ldrh	r2, [r3, #0]
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6be:	1c9a      	adds	r2, r3, #2
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a6c8:	b29b      	uxth	r3, r3
 801a6ca:	3b01      	subs	r3, #1
 801a6cc:	b29a      	uxth	r2, r3
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a6d2:	e056      	b.n	801a782 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	689b      	ldr	r3, [r3, #8]
 801a6da:	f003 0302 	and.w	r3, r3, #2
 801a6de:	2b02      	cmp	r3, #2
 801a6e0:	d11b      	bne.n	801a71a <HAL_SPI_TransmitReceive+0x1aa>
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a6e6:	b29b      	uxth	r3, r3
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d016      	beq.n	801a71a <HAL_SPI_TransmitReceive+0x1aa>
 801a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6ee:	2b01      	cmp	r3, #1
 801a6f0:	d113      	bne.n	801a71a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6f6:	881a      	ldrh	r2, [r3, #0]
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a702:	1c9a      	adds	r2, r3, #2
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a70c:	b29b      	uxth	r3, r3
 801a70e:	3b01      	subs	r3, #1
 801a710:	b29a      	uxth	r2, r3
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a716:	2300      	movs	r3, #0
 801a718:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	689b      	ldr	r3, [r3, #8]
 801a720:	f003 0301 	and.w	r3, r3, #1
 801a724:	2b01      	cmp	r3, #1
 801a726:	d11c      	bne.n	801a762 <HAL_SPI_TransmitReceive+0x1f2>
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a72e:	b29b      	uxth	r3, r3
 801a730:	2b00      	cmp	r3, #0
 801a732:	d016      	beq.n	801a762 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	68da      	ldr	r2, [r3, #12]
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a73e:	b292      	uxth	r2, r2
 801a740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a746:	1c9a      	adds	r2, r3, #2
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a752:	b29b      	uxth	r3, r3
 801a754:	3b01      	subs	r3, #1
 801a756:	b29a      	uxth	r2, r3
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a75e:	2301      	movs	r3, #1
 801a760:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801a762:	f7fa fef5 	bl	8015550 <HAL_GetTick>
 801a766:	4602      	mov	r2, r0
 801a768:	69fb      	ldr	r3, [r7, #28]
 801a76a:	1ad3      	subs	r3, r2, r3
 801a76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a76e:	429a      	cmp	r2, r3
 801a770:	d807      	bhi.n	801a782 <HAL_SPI_TransmitReceive+0x212>
 801a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a774:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a778:	d003      	beq.n	801a782 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801a77a:	2303      	movs	r3, #3
 801a77c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801a780:	e0fb      	b.n	801a97a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a786:	b29b      	uxth	r3, r3
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d1a3      	bne.n	801a6d4 <HAL_SPI_TransmitReceive+0x164>
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a792:	b29b      	uxth	r3, r3
 801a794:	2b00      	cmp	r3, #0
 801a796:	d19d      	bne.n	801a6d4 <HAL_SPI_TransmitReceive+0x164>
 801a798:	e0df      	b.n	801a95a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	685b      	ldr	r3, [r3, #4]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d003      	beq.n	801a7aa <HAL_SPI_TransmitReceive+0x23a>
 801a7a2:	8a7b      	ldrh	r3, [r7, #18]
 801a7a4:	2b01      	cmp	r3, #1
 801a7a6:	f040 80cb 	bne.w	801a940 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a7ae:	b29b      	uxth	r3, r3
 801a7b0:	2b01      	cmp	r3, #1
 801a7b2:	d912      	bls.n	801a7da <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7b8:	881a      	ldrh	r2, [r3, #0]
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7c4:	1c9a      	adds	r2, r3, #2
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801a7ca:	68fb      	ldr	r3, [r7, #12]
 801a7cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a7ce:	b29b      	uxth	r3, r3
 801a7d0:	3b02      	subs	r3, #2
 801a7d2:	b29a      	uxth	r2, r3
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a7d8:	e0b2      	b.n	801a940 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a7de:	68fb      	ldr	r3, [r7, #12]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	330c      	adds	r3, #12
 801a7e4:	7812      	ldrb	r2, [r2, #0]
 801a7e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7ec:	1c5a      	adds	r2, r3, #1
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a7f6:	b29b      	uxth	r3, r3
 801a7f8:	3b01      	subs	r3, #1
 801a7fa:	b29a      	uxth	r2, r3
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a800:	e09e      	b.n	801a940 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	689b      	ldr	r3, [r3, #8]
 801a808:	f003 0302 	and.w	r3, r3, #2
 801a80c:	2b02      	cmp	r3, #2
 801a80e:	d134      	bne.n	801a87a <HAL_SPI_TransmitReceive+0x30a>
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a814:	b29b      	uxth	r3, r3
 801a816:	2b00      	cmp	r3, #0
 801a818:	d02f      	beq.n	801a87a <HAL_SPI_TransmitReceive+0x30a>
 801a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a81c:	2b01      	cmp	r3, #1
 801a81e:	d12c      	bne.n	801a87a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a824:	b29b      	uxth	r3, r3
 801a826:	2b01      	cmp	r3, #1
 801a828:	d912      	bls.n	801a850 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a82e:	881a      	ldrh	r2, [r3, #0]
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a83a:	1c9a      	adds	r2, r3, #2
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a844:	b29b      	uxth	r3, r3
 801a846:	3b02      	subs	r3, #2
 801a848:	b29a      	uxth	r2, r3
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a84e:	e012      	b.n	801a876 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	330c      	adds	r3, #12
 801a85a:	7812      	ldrb	r2, [r2, #0]
 801a85c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a862:	1c5a      	adds	r2, r3, #1
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a86c:	b29b      	uxth	r3, r3
 801a86e:	3b01      	subs	r3, #1
 801a870:	b29a      	uxth	r2, r3
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a876:	2300      	movs	r3, #0
 801a878:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a87a:	68fb      	ldr	r3, [r7, #12]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	689b      	ldr	r3, [r3, #8]
 801a880:	f003 0301 	and.w	r3, r3, #1
 801a884:	2b01      	cmp	r3, #1
 801a886:	d148      	bne.n	801a91a <HAL_SPI_TransmitReceive+0x3aa>
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a88e:	b29b      	uxth	r3, r3
 801a890:	2b00      	cmp	r3, #0
 801a892:	d042      	beq.n	801a91a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a89a:	b29b      	uxth	r3, r3
 801a89c:	2b01      	cmp	r3, #1
 801a89e:	d923      	bls.n	801a8e8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	68da      	ldr	r2, [r3, #12]
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8aa:	b292      	uxth	r2, r2
 801a8ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8b2:	1c9a      	adds	r2, r3, #2
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801a8b8:	68fb      	ldr	r3, [r7, #12]
 801a8ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a8be:	b29b      	uxth	r3, r3
 801a8c0:	3b02      	subs	r3, #2
 801a8c2:	b29a      	uxth	r2, r3
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a8d0:	b29b      	uxth	r3, r3
 801a8d2:	2b01      	cmp	r3, #1
 801a8d4:	d81f      	bhi.n	801a916 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a8d6:	68fb      	ldr	r3, [r7, #12]
 801a8d8:	681b      	ldr	r3, [r3, #0]
 801a8da:	685a      	ldr	r2, [r3, #4]
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a8e4:	605a      	str	r2, [r3, #4]
 801a8e6:	e016      	b.n	801a916 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	f103 020c 	add.w	r2, r3, #12
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8f4:	7812      	ldrb	r2, [r2, #0]
 801a8f6:	b2d2      	uxtb	r2, r2
 801a8f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8fe:	1c5a      	adds	r2, r3, #1
 801a900:	68fb      	ldr	r3, [r7, #12]
 801a902:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a90a:	b29b      	uxth	r3, r3
 801a90c:	3b01      	subs	r3, #1
 801a90e:	b29a      	uxth	r2, r3
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a916:	2301      	movs	r3, #1
 801a918:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801a91a:	f7fa fe19 	bl	8015550 <HAL_GetTick>
 801a91e:	4602      	mov	r2, r0
 801a920:	69fb      	ldr	r3, [r7, #28]
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a926:	429a      	cmp	r2, r3
 801a928:	d803      	bhi.n	801a932 <HAL_SPI_TransmitReceive+0x3c2>
 801a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a930:	d102      	bne.n	801a938 <HAL_SPI_TransmitReceive+0x3c8>
 801a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a934:	2b00      	cmp	r3, #0
 801a936:	d103      	bne.n	801a940 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801a938:	2303      	movs	r3, #3
 801a93a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801a93e:	e01c      	b.n	801a97a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a944:	b29b      	uxth	r3, r3
 801a946:	2b00      	cmp	r3, #0
 801a948:	f47f af5b 	bne.w	801a802 <HAL_SPI_TransmitReceive+0x292>
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a952:	b29b      	uxth	r3, r3
 801a954:	2b00      	cmp	r3, #0
 801a956:	f47f af54 	bne.w	801a802 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a95a:	69fa      	ldr	r2, [r7, #28]
 801a95c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a95e:	68f8      	ldr	r0, [r7, #12]
 801a960:	f000 f9b4 	bl	801accc <SPI_EndRxTxTransaction>
 801a964:	4603      	mov	r3, r0
 801a966:	2b00      	cmp	r3, #0
 801a968:	d006      	beq.n	801a978 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801a96a:	2301      	movs	r3, #1
 801a96c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a970:	68fb      	ldr	r3, [r7, #12]
 801a972:	2220      	movs	r2, #32
 801a974:	661a      	str	r2, [r3, #96]	; 0x60
 801a976:	e000      	b.n	801a97a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801a978:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	2201      	movs	r2, #1
 801a97e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	2200      	movs	r2, #0
 801a986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a98a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801a98e:	4618      	mov	r0, r3
 801a990:	3728      	adds	r7, #40	; 0x28
 801a992:	46bd      	mov	sp, r7
 801a994:	bd80      	pop	{r7, pc}
	...

0801a998 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b088      	sub	sp, #32
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	60f8      	str	r0, [r7, #12]
 801a9a0:	60b9      	str	r1, [r7, #8]
 801a9a2:	603b      	str	r3, [r7, #0]
 801a9a4:	4613      	mov	r3, r2
 801a9a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801a9a8:	f7fa fdd2 	bl	8015550 <HAL_GetTick>
 801a9ac:	4602      	mov	r2, r0
 801a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9b0:	1a9b      	subs	r3, r3, r2
 801a9b2:	683a      	ldr	r2, [r7, #0]
 801a9b4:	4413      	add	r3, r2
 801a9b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801a9b8:	f7fa fdca 	bl	8015550 <HAL_GetTick>
 801a9bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a9be:	4b39      	ldr	r3, [pc, #228]	; (801aaa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	015b      	lsls	r3, r3, #5
 801a9c4:	0d1b      	lsrs	r3, r3, #20
 801a9c6:	69fa      	ldr	r2, [r7, #28]
 801a9c8:	fb02 f303 	mul.w	r3, r2, r3
 801a9cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a9ce:	e054      	b.n	801aa7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801a9d0:	683b      	ldr	r3, [r7, #0]
 801a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a9d6:	d050      	beq.n	801aa7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a9d8:	f7fa fdba 	bl	8015550 <HAL_GetTick>
 801a9dc:	4602      	mov	r2, r0
 801a9de:	69bb      	ldr	r3, [r7, #24]
 801a9e0:	1ad3      	subs	r3, r2, r3
 801a9e2:	69fa      	ldr	r2, [r7, #28]
 801a9e4:	429a      	cmp	r2, r3
 801a9e6:	d902      	bls.n	801a9ee <SPI_WaitFlagStateUntilTimeout+0x56>
 801a9e8:	69fb      	ldr	r3, [r7, #28]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d13d      	bne.n	801aa6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	685a      	ldr	r2, [r3, #4]
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801a9fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	685b      	ldr	r3, [r3, #4]
 801aa02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801aa06:	d111      	bne.n	801aa2c <SPI_WaitFlagStateUntilTimeout+0x94>
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	689b      	ldr	r3, [r3, #8]
 801aa0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801aa10:	d004      	beq.n	801aa1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	689b      	ldr	r3, [r3, #8]
 801aa16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aa1a:	d107      	bne.n	801aa2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	681a      	ldr	r2, [r3, #0]
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801aa2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801aa34:	d10f      	bne.n	801aa56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	681a      	ldr	r2, [r3, #0]
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801aa44:	601a      	str	r2, [r3, #0]
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	681a      	ldr	r2, [r3, #0]
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801aa54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	2201      	movs	r2, #1
 801aa5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	2200      	movs	r2, #0
 801aa62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801aa66:	2303      	movs	r3, #3
 801aa68:	e017      	b.n	801aa9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801aa6a:	697b      	ldr	r3, [r7, #20]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d101      	bne.n	801aa74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801aa70:	2300      	movs	r3, #0
 801aa72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801aa74:	697b      	ldr	r3, [r7, #20]
 801aa76:	3b01      	subs	r3, #1
 801aa78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	689a      	ldr	r2, [r3, #8]
 801aa80:	68bb      	ldr	r3, [r7, #8]
 801aa82:	4013      	ands	r3, r2
 801aa84:	68ba      	ldr	r2, [r7, #8]
 801aa86:	429a      	cmp	r2, r3
 801aa88:	bf0c      	ite	eq
 801aa8a:	2301      	moveq	r3, #1
 801aa8c:	2300      	movne	r3, #0
 801aa8e:	b2db      	uxtb	r3, r3
 801aa90:	461a      	mov	r2, r3
 801aa92:	79fb      	ldrb	r3, [r7, #7]
 801aa94:	429a      	cmp	r2, r3
 801aa96:	d19b      	bne.n	801a9d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801aa98:	2300      	movs	r3, #0
}
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	3720      	adds	r7, #32
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	bd80      	pop	{r7, pc}
 801aaa2:	bf00      	nop
 801aaa4:	2000011c 	.word	0x2000011c

0801aaa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b08a      	sub	sp, #40	; 0x28
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	60f8      	str	r0, [r7, #12]
 801aab0:	60b9      	str	r1, [r7, #8]
 801aab2:	607a      	str	r2, [r7, #4]
 801aab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801aab6:	2300      	movs	r3, #0
 801aab8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801aaba:	f7fa fd49 	bl	8015550 <HAL_GetTick>
 801aabe:	4602      	mov	r2, r0
 801aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aac2:	1a9b      	subs	r3, r3, r2
 801aac4:	683a      	ldr	r2, [r7, #0]
 801aac6:	4413      	add	r3, r2
 801aac8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801aaca:	f7fa fd41 	bl	8015550 <HAL_GetTick>
 801aace:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	330c      	adds	r3, #12
 801aad6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801aad8:	4b3d      	ldr	r3, [pc, #244]	; (801abd0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801aada:	681a      	ldr	r2, [r3, #0]
 801aadc:	4613      	mov	r3, r2
 801aade:	009b      	lsls	r3, r3, #2
 801aae0:	4413      	add	r3, r2
 801aae2:	00da      	lsls	r2, r3, #3
 801aae4:	1ad3      	subs	r3, r2, r3
 801aae6:	0d1b      	lsrs	r3, r3, #20
 801aae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aaea:	fb02 f303 	mul.w	r3, r2, r3
 801aaee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801aaf0:	e060      	b.n	801abb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801aaf2:	68bb      	ldr	r3, [r7, #8]
 801aaf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801aaf8:	d107      	bne.n	801ab0a <SPI_WaitFifoStateUntilTimeout+0x62>
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d104      	bne.n	801ab0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801ab00:	69fb      	ldr	r3, [r7, #28]
 801ab02:	781b      	ldrb	r3, [r3, #0]
 801ab04:	b2db      	uxtb	r3, r3
 801ab06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801ab08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801ab0a:	683b      	ldr	r3, [r7, #0]
 801ab0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab10:	d050      	beq.n	801abb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ab12:	f7fa fd1d 	bl	8015550 <HAL_GetTick>
 801ab16:	4602      	mov	r2, r0
 801ab18:	6a3b      	ldr	r3, [r7, #32]
 801ab1a:	1ad3      	subs	r3, r2, r3
 801ab1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab1e:	429a      	cmp	r2, r3
 801ab20:	d902      	bls.n	801ab28 <SPI_WaitFifoStateUntilTimeout+0x80>
 801ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d13d      	bne.n	801aba4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	685a      	ldr	r2, [r3, #4]
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ab36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	685b      	ldr	r3, [r3, #4]
 801ab3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ab40:	d111      	bne.n	801ab66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	689b      	ldr	r3, [r3, #8]
 801ab46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ab4a:	d004      	beq.n	801ab56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	689b      	ldr	r3, [r3, #8]
 801ab50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ab54:	d107      	bne.n	801ab66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	681a      	ldr	r2, [r3, #0]
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ab64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ab6e:	d10f      	bne.n	801ab90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	681a      	ldr	r2, [r3, #0]
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ab7e:	601a      	str	r2, [r3, #0]
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	681a      	ldr	r2, [r3, #0]
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ab8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	2201      	movs	r2, #1
 801ab94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801aba0:	2303      	movs	r3, #3
 801aba2:	e010      	b.n	801abc6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801aba4:	69bb      	ldr	r3, [r7, #24]
 801aba6:	2b00      	cmp	r3, #0
 801aba8:	d101      	bne.n	801abae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801abaa:	2300      	movs	r3, #0
 801abac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801abae:	69bb      	ldr	r3, [r7, #24]
 801abb0:	3b01      	subs	r3, #1
 801abb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	689a      	ldr	r2, [r3, #8]
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	4013      	ands	r3, r2
 801abbe:	687a      	ldr	r2, [r7, #4]
 801abc0:	429a      	cmp	r2, r3
 801abc2:	d196      	bne.n	801aaf2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801abc4:	2300      	movs	r3, #0
}
 801abc6:	4618      	mov	r0, r3
 801abc8:	3728      	adds	r7, #40	; 0x28
 801abca:	46bd      	mov	sp, r7
 801abcc:	bd80      	pop	{r7, pc}
 801abce:	bf00      	nop
 801abd0:	2000011c 	.word	0x2000011c

0801abd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b088      	sub	sp, #32
 801abd8:	af02      	add	r7, sp, #8
 801abda:	60f8      	str	r0, [r7, #12]
 801abdc:	60b9      	str	r1, [r7, #8]
 801abde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	685b      	ldr	r3, [r3, #4]
 801abe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801abe8:	d111      	bne.n	801ac0e <SPI_EndRxTransaction+0x3a>
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	689b      	ldr	r3, [r3, #8]
 801abee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801abf2:	d004      	beq.n	801abfe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	689b      	ldr	r3, [r3, #8]
 801abf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801abfc:	d107      	bne.n	801ac0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	681a      	ldr	r2, [r3, #0]
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ac0c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	685b      	ldr	r3, [r3, #4]
 801ac12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ac16:	d112      	bne.n	801ac3e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	9300      	str	r3, [sp, #0]
 801ac1c:	68bb      	ldr	r3, [r7, #8]
 801ac1e:	2200      	movs	r2, #0
 801ac20:	2180      	movs	r1, #128	; 0x80
 801ac22:	68f8      	ldr	r0, [r7, #12]
 801ac24:	f7ff feb8 	bl	801a998 <SPI_WaitFlagStateUntilTimeout>
 801ac28:	4603      	mov	r3, r0
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d021      	beq.n	801ac72 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ac32:	f043 0220 	orr.w	r2, r3, #32
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801ac3a:	2303      	movs	r3, #3
 801ac3c:	e03d      	b.n	801acba <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801ac3e:	4b21      	ldr	r3, [pc, #132]	; (801acc4 <SPI_EndRxTransaction+0xf0>)
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	4a21      	ldr	r2, [pc, #132]	; (801acc8 <SPI_EndRxTransaction+0xf4>)
 801ac44:	fba2 2303 	umull	r2, r3, r2, r3
 801ac48:	0d5b      	lsrs	r3, r3, #21
 801ac4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ac4e:	fb02 f303 	mul.w	r3, r2, r3
 801ac52:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801ac54:	697b      	ldr	r3, [r7, #20]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d00a      	beq.n	801ac70 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801ac5a:	697b      	ldr	r3, [r7, #20]
 801ac5c:	3b01      	subs	r3, #1
 801ac5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	689b      	ldr	r3, [r3, #8]
 801ac66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ac6a:	2b80      	cmp	r3, #128	; 0x80
 801ac6c:	d0f2      	beq.n	801ac54 <SPI_EndRxTransaction+0x80>
 801ac6e:	e000      	b.n	801ac72 <SPI_EndRxTransaction+0x9e>
        break;
 801ac70:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	685b      	ldr	r3, [r3, #4]
 801ac76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ac7a:	d11d      	bne.n	801acb8 <SPI_EndRxTransaction+0xe4>
 801ac7c:	68fb      	ldr	r3, [r7, #12]
 801ac7e:	689b      	ldr	r3, [r3, #8]
 801ac80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ac84:	d004      	beq.n	801ac90 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	689b      	ldr	r3, [r3, #8]
 801ac8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac8e:	d113      	bne.n	801acb8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	9300      	str	r3, [sp, #0]
 801ac94:	68bb      	ldr	r3, [r7, #8]
 801ac96:	2200      	movs	r2, #0
 801ac98:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ac9c:	68f8      	ldr	r0, [r7, #12]
 801ac9e:	f7ff ff03 	bl	801aaa8 <SPI_WaitFifoStateUntilTimeout>
 801aca2:	4603      	mov	r3, r0
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d007      	beq.n	801acb8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801acac:	f043 0220 	orr.w	r2, r3, #32
 801acb0:	68fb      	ldr	r3, [r7, #12]
 801acb2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801acb4:	2303      	movs	r3, #3
 801acb6:	e000      	b.n	801acba <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801acb8:	2300      	movs	r3, #0
}
 801acba:	4618      	mov	r0, r3
 801acbc:	3718      	adds	r7, #24
 801acbe:	46bd      	mov	sp, r7
 801acc0:	bd80      	pop	{r7, pc}
 801acc2:	bf00      	nop
 801acc4:	2000011c 	.word	0x2000011c
 801acc8:	165e9f81 	.word	0x165e9f81

0801accc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801accc:	b580      	push	{r7, lr}
 801acce:	b088      	sub	sp, #32
 801acd0:	af02      	add	r7, sp, #8
 801acd2:	60f8      	str	r0, [r7, #12]
 801acd4:	60b9      	str	r1, [r7, #8]
 801acd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	9300      	str	r3, [sp, #0]
 801acdc:	68bb      	ldr	r3, [r7, #8]
 801acde:	2200      	movs	r2, #0
 801ace0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801ace4:	68f8      	ldr	r0, [r7, #12]
 801ace6:	f7ff fedf 	bl	801aaa8 <SPI_WaitFifoStateUntilTimeout>
 801acea:	4603      	mov	r3, r0
 801acec:	2b00      	cmp	r3, #0
 801acee:	d007      	beq.n	801ad00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801acf4:	f043 0220 	orr.w	r2, r3, #32
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801acfc:	2303      	movs	r3, #3
 801acfe:	e046      	b.n	801ad8e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801ad00:	4b25      	ldr	r3, [pc, #148]	; (801ad98 <SPI_EndRxTxTransaction+0xcc>)
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	4a25      	ldr	r2, [pc, #148]	; (801ad9c <SPI_EndRxTxTransaction+0xd0>)
 801ad06:	fba2 2303 	umull	r2, r3, r2, r3
 801ad0a:	0d5b      	lsrs	r3, r3, #21
 801ad0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ad10:	fb02 f303 	mul.w	r3, r2, r3
 801ad14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	685b      	ldr	r3, [r3, #4]
 801ad1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ad1e:	d112      	bne.n	801ad46 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	9300      	str	r3, [sp, #0]
 801ad24:	68bb      	ldr	r3, [r7, #8]
 801ad26:	2200      	movs	r2, #0
 801ad28:	2180      	movs	r1, #128	; 0x80
 801ad2a:	68f8      	ldr	r0, [r7, #12]
 801ad2c:	f7ff fe34 	bl	801a998 <SPI_WaitFlagStateUntilTimeout>
 801ad30:	4603      	mov	r3, r0
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d016      	beq.n	801ad64 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad3a:	f043 0220 	orr.w	r2, r3, #32
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801ad42:	2303      	movs	r3, #3
 801ad44:	e023      	b.n	801ad8e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801ad46:	697b      	ldr	r3, [r7, #20]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d00a      	beq.n	801ad62 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801ad4c:	697b      	ldr	r3, [r7, #20]
 801ad4e:	3b01      	subs	r3, #1
 801ad50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	689b      	ldr	r3, [r3, #8]
 801ad58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ad5c:	2b80      	cmp	r3, #128	; 0x80
 801ad5e:	d0f2      	beq.n	801ad46 <SPI_EndRxTxTransaction+0x7a>
 801ad60:	e000      	b.n	801ad64 <SPI_EndRxTxTransaction+0x98>
        break;
 801ad62:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	9300      	str	r3, [sp, #0]
 801ad68:	68bb      	ldr	r3, [r7, #8]
 801ad6a:	2200      	movs	r2, #0
 801ad6c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ad70:	68f8      	ldr	r0, [r7, #12]
 801ad72:	f7ff fe99 	bl	801aaa8 <SPI_WaitFifoStateUntilTimeout>
 801ad76:	4603      	mov	r3, r0
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d007      	beq.n	801ad8c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad80:	f043 0220 	orr.w	r2, r3, #32
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ad88:	2303      	movs	r3, #3
 801ad8a:	e000      	b.n	801ad8e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801ad8c:	2300      	movs	r3, #0
}
 801ad8e:	4618      	mov	r0, r3
 801ad90:	3718      	adds	r7, #24
 801ad92:	46bd      	mov	sp, r7
 801ad94:	bd80      	pop	{r7, pc}
 801ad96:	bf00      	nop
 801ad98:	2000011c 	.word	0x2000011c
 801ad9c:	165e9f81 	.word	0x165e9f81

0801ada0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b082      	sub	sp, #8
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	691b      	ldr	r3, [r3, #16]
 801adae:	f003 0302 	and.w	r3, r3, #2
 801adb2:	2b02      	cmp	r3, #2
 801adb4:	d128      	bne.n	801ae08 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	68db      	ldr	r3, [r3, #12]
 801adbc:	f003 0302 	and.w	r3, r3, #2
 801adc0:	2b02      	cmp	r3, #2
 801adc2:	d121      	bne.n	801ae08 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	f06f 0202 	mvn.w	r2, #2
 801adcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	2201      	movs	r2, #1
 801add2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	699b      	ldr	r3, [r3, #24]
 801adda:	f003 0303 	and.w	r3, r3, #3
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d005      	beq.n	801adee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ade8:	6878      	ldr	r0, [r7, #4]
 801adea:	4798      	blx	r3
 801adec:	e009      	b.n	801ae02 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801adf4:	6878      	ldr	r0, [r7, #4]
 801adf6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801adfe:	6878      	ldr	r0, [r7, #4]
 801ae00:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	2200      	movs	r2, #0
 801ae06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	691b      	ldr	r3, [r3, #16]
 801ae0e:	f003 0304 	and.w	r3, r3, #4
 801ae12:	2b04      	cmp	r3, #4
 801ae14:	d128      	bne.n	801ae68 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	68db      	ldr	r3, [r3, #12]
 801ae1c:	f003 0304 	and.w	r3, r3, #4
 801ae20:	2b04      	cmp	r3, #4
 801ae22:	d121      	bne.n	801ae68 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	f06f 0204 	mvn.w	r2, #4
 801ae2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	2202      	movs	r2, #2
 801ae32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	699b      	ldr	r3, [r3, #24]
 801ae3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d005      	beq.n	801ae4e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ae48:	6878      	ldr	r0, [r7, #4]
 801ae4a:	4798      	blx	r3
 801ae4c:	e009      	b.n	801ae62 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ae54:	6878      	ldr	r0, [r7, #4]
 801ae56:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ae5e:	6878      	ldr	r0, [r7, #4]
 801ae60:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	2200      	movs	r2, #0
 801ae66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	691b      	ldr	r3, [r3, #16]
 801ae6e:	f003 0308 	and.w	r3, r3, #8
 801ae72:	2b08      	cmp	r3, #8
 801ae74:	d128      	bne.n	801aec8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	68db      	ldr	r3, [r3, #12]
 801ae7c:	f003 0308 	and.w	r3, r3, #8
 801ae80:	2b08      	cmp	r3, #8
 801ae82:	d121      	bne.n	801aec8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	f06f 0208 	mvn.w	r2, #8
 801ae8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	2204      	movs	r2, #4
 801ae92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	69db      	ldr	r3, [r3, #28]
 801ae9a:	f003 0303 	and.w	r3, r3, #3
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d005      	beq.n	801aeae <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801aea8:	6878      	ldr	r0, [r7, #4]
 801aeaa:	4798      	blx	r3
 801aeac:	e009      	b.n	801aec2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801aeb4:	6878      	ldr	r0, [r7, #4]
 801aeb6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801aebe:	6878      	ldr	r0, [r7, #4]
 801aec0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	2200      	movs	r2, #0
 801aec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	691b      	ldr	r3, [r3, #16]
 801aece:	f003 0310 	and.w	r3, r3, #16
 801aed2:	2b10      	cmp	r3, #16
 801aed4:	d128      	bne.n	801af28 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	68db      	ldr	r3, [r3, #12]
 801aedc:	f003 0310 	and.w	r3, r3, #16
 801aee0:	2b10      	cmp	r3, #16
 801aee2:	d121      	bne.n	801af28 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	f06f 0210 	mvn.w	r2, #16
 801aeec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	2208      	movs	r2, #8
 801aef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	69db      	ldr	r3, [r3, #28]
 801aefa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d005      	beq.n	801af0e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801af08:	6878      	ldr	r0, [r7, #4]
 801af0a:	4798      	blx	r3
 801af0c:	e009      	b.n	801af22 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801af14:	6878      	ldr	r0, [r7, #4]
 801af16:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801af1e:	6878      	ldr	r0, [r7, #4]
 801af20:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	2200      	movs	r2, #0
 801af26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	691b      	ldr	r3, [r3, #16]
 801af2e:	f003 0301 	and.w	r3, r3, #1
 801af32:	2b01      	cmp	r3, #1
 801af34:	d110      	bne.n	801af58 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	68db      	ldr	r3, [r3, #12]
 801af3c:	f003 0301 	and.w	r3, r3, #1
 801af40:	2b01      	cmp	r3, #1
 801af42:	d109      	bne.n	801af58 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	f06f 0201 	mvn.w	r2, #1
 801af4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	691b      	ldr	r3, [r3, #16]
 801af5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801af62:	2b80      	cmp	r3, #128	; 0x80
 801af64:	d110      	bne.n	801af88 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	68db      	ldr	r3, [r3, #12]
 801af6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801af70:	2b80      	cmp	r3, #128	; 0x80
 801af72:	d109      	bne.n	801af88 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801af7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801af84:	6878      	ldr	r0, [r7, #4]
 801af86:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	691b      	ldr	r3, [r3, #16]
 801af8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801af92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801af96:	d110      	bne.n	801afba <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	68db      	ldr	r3, [r3, #12]
 801af9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801afa2:	2b80      	cmp	r3, #128	; 0x80
 801afa4:	d109      	bne.n	801afba <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801afae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801afb6:	6878      	ldr	r0, [r7, #4]
 801afb8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	691b      	ldr	r3, [r3, #16]
 801afc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801afc4:	2b40      	cmp	r3, #64	; 0x40
 801afc6:	d110      	bne.n	801afea <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	68db      	ldr	r3, [r3, #12]
 801afce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801afd2:	2b40      	cmp	r3, #64	; 0x40
 801afd4:	d109      	bne.n	801afea <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801afde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801afe6:	6878      	ldr	r0, [r7, #4]
 801afe8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	691b      	ldr	r3, [r3, #16]
 801aff0:	f003 0320 	and.w	r3, r3, #32
 801aff4:	2b20      	cmp	r3, #32
 801aff6:	d110      	bne.n	801b01a <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	68db      	ldr	r3, [r3, #12]
 801affe:	f003 0320 	and.w	r3, r3, #32
 801b002:	2b20      	cmp	r3, #32
 801b004:	d109      	bne.n	801b01a <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	f06f 0220 	mvn.w	r2, #32
 801b00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b016:	6878      	ldr	r0, [r7, #4]
 801b018:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b01a:	bf00      	nop
 801b01c:	3708      	adds	r7, #8
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}
	...

0801b024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b024:	b580      	push	{r7, lr}
 801b026:	b082      	sub	sp, #8
 801b028:	af00      	add	r7, sp, #0
 801b02a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d101      	bne.n	801b036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b032:	2301      	movs	r3, #1
 801b034:	e04e      	b.n	801b0d4 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d114      	bne.n	801b068 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	2200      	movs	r2, #0
 801b042:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801b046:	6878      	ldr	r0, [r7, #4]
 801b048:	f000 fc1c 	bl	801b884 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b052:	2b00      	cmp	r3, #0
 801b054:	d103      	bne.n	801b05e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	4a20      	ldr	r2, [pc, #128]	; (801b0dc <HAL_UART_Init+0xb8>)
 801b05a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b064:	6878      	ldr	r0, [r7, #4]
 801b066:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	2224      	movs	r2, #36	; 0x24
 801b06c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	681a      	ldr	r2, [r3, #0]
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	f022 0201 	bic.w	r2, r2, #1
 801b07c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801b07e:	6878      	ldr	r0, [r7, #4]
 801b080:	f000 fc46 	bl	801b910 <UART_SetConfig>
 801b084:	4603      	mov	r3, r0
 801b086:	2b01      	cmp	r3, #1
 801b088:	d101      	bne.n	801b08e <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801b08a:	2301      	movs	r3, #1
 801b08c:	e022      	b.n	801b0d4 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b092:	2b00      	cmp	r3, #0
 801b094:	d002      	beq.n	801b09c <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801b096:	6878      	ldr	r0, [r7, #4]
 801b098:	f000 fe9e 	bl	801bdd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	685a      	ldr	r2, [r3, #4]
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b0aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	689a      	ldr	r2, [r3, #8]
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b0ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	681a      	ldr	r2, [r3, #0]
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	f042 0201 	orr.w	r2, r2, #1
 801b0ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801b0cc:	6878      	ldr	r0, [r7, #4]
 801b0ce:	f000 ff25 	bl	801bf1c <UART_CheckIdleState>
 801b0d2:	4603      	mov	r3, r0
}
 801b0d4:	4618      	mov	r0, r3
 801b0d6:	3708      	adds	r7, #8
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	bd80      	pop	{r7, pc}
 801b0dc:	08014949 	.word	0x08014949

0801b0e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b08a      	sub	sp, #40	; 0x28
 801b0e4:	af02      	add	r7, sp, #8
 801b0e6:	60f8      	str	r0, [r7, #12]
 801b0e8:	60b9      	str	r1, [r7, #8]
 801b0ea:	603b      	str	r3, [r7, #0]
 801b0ec:	4613      	mov	r3, r2
 801b0ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b0f4:	2b20      	cmp	r3, #32
 801b0f6:	d171      	bne.n	801b1dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801b0f8:	68bb      	ldr	r3, [r7, #8]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d002      	beq.n	801b104 <HAL_UART_Transmit+0x24>
 801b0fe:	88fb      	ldrh	r3, [r7, #6]
 801b100:	2b00      	cmp	r3, #0
 801b102:	d101      	bne.n	801b108 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801b104:	2301      	movs	r3, #1
 801b106:	e06a      	b.n	801b1de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	2200      	movs	r2, #0
 801b10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	2221      	movs	r2, #33	; 0x21
 801b114:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b116:	f7fa fa1b 	bl	8015550 <HAL_GetTick>
 801b11a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	88fa      	ldrh	r2, [r7, #6]
 801b120:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	88fa      	ldrh	r2, [r7, #6]
 801b128:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	689b      	ldr	r3, [r3, #8]
 801b130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b134:	d108      	bne.n	801b148 <HAL_UART_Transmit+0x68>
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	691b      	ldr	r3, [r3, #16]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d104      	bne.n	801b148 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801b13e:	2300      	movs	r3, #0
 801b140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b142:	68bb      	ldr	r3, [r7, #8]
 801b144:	61bb      	str	r3, [r7, #24]
 801b146:	e003      	b.n	801b150 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801b148:	68bb      	ldr	r3, [r7, #8]
 801b14a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b14c:	2300      	movs	r3, #0
 801b14e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801b150:	e02c      	b.n	801b1ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b152:	683b      	ldr	r3, [r7, #0]
 801b154:	9300      	str	r3, [sp, #0]
 801b156:	697b      	ldr	r3, [r7, #20]
 801b158:	2200      	movs	r2, #0
 801b15a:	2180      	movs	r1, #128	; 0x80
 801b15c:	68f8      	ldr	r0, [r7, #12]
 801b15e:	f000 ff2a 	bl	801bfb6 <UART_WaitOnFlagUntilTimeout>
 801b162:	4603      	mov	r3, r0
 801b164:	2b00      	cmp	r3, #0
 801b166:	d001      	beq.n	801b16c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801b168:	2303      	movs	r3, #3
 801b16a:	e038      	b.n	801b1de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801b16c:	69fb      	ldr	r3, [r7, #28]
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d10b      	bne.n	801b18a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b172:	69bb      	ldr	r3, [r7, #24]
 801b174:	881b      	ldrh	r3, [r3, #0]
 801b176:	461a      	mov	r2, r3
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801b182:	69bb      	ldr	r3, [r7, #24]
 801b184:	3302      	adds	r3, #2
 801b186:	61bb      	str	r3, [r7, #24]
 801b188:	e007      	b.n	801b19a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801b18a:	69fb      	ldr	r3, [r7, #28]
 801b18c:	781a      	ldrb	r2, [r3, #0]
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801b194:	69fb      	ldr	r3, [r7, #28]
 801b196:	3301      	adds	r3, #1
 801b198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b1a0:	b29b      	uxth	r3, r3
 801b1a2:	3b01      	subs	r3, #1
 801b1a4:	b29a      	uxth	r2, r3
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b1b2:	b29b      	uxth	r3, r3
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d1cc      	bne.n	801b152 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	9300      	str	r3, [sp, #0]
 801b1bc:	697b      	ldr	r3, [r7, #20]
 801b1be:	2200      	movs	r2, #0
 801b1c0:	2140      	movs	r1, #64	; 0x40
 801b1c2:	68f8      	ldr	r0, [r7, #12]
 801b1c4:	f000 fef7 	bl	801bfb6 <UART_WaitOnFlagUntilTimeout>
 801b1c8:	4603      	mov	r3, r0
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d001      	beq.n	801b1d2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801b1ce:	2303      	movs	r3, #3
 801b1d0:	e005      	b.n	801b1de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b1d2:	68fb      	ldr	r3, [r7, #12]
 801b1d4:	2220      	movs	r2, #32
 801b1d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801b1d8:	2300      	movs	r3, #0
 801b1da:	e000      	b.n	801b1de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801b1dc:	2302      	movs	r3, #2
  }
}
 801b1de:	4618      	mov	r0, r3
 801b1e0:	3720      	adds	r7, #32
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bd80      	pop	{r7, pc}
	...

0801b1e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b0ba      	sub	sp, #232	; 0xe8
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	69db      	ldr	r3, [r3, #28]
 801b1f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	689b      	ldr	r3, [r3, #8]
 801b20a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801b20e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b212:	f640 030f 	movw	r3, #2063	; 0x80f
 801b216:	4013      	ands	r3, r2
 801b218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801b21c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b220:	2b00      	cmp	r3, #0
 801b222:	d115      	bne.n	801b250 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801b224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b228:	f003 0320 	and.w	r3, r3, #32
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d00f      	beq.n	801b250 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b234:	f003 0320 	and.w	r3, r3, #32
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d009      	beq.n	801b250 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b240:	2b00      	cmp	r3, #0
 801b242:	f000 82b8 	beq.w	801b7b6 <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b24a:	6878      	ldr	r0, [r7, #4]
 801b24c:	4798      	blx	r3
      }
      return;
 801b24e:	e2b2      	b.n	801b7b6 <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801b250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b254:	2b00      	cmp	r3, #0
 801b256:	f000 811d 	beq.w	801b494 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801b25a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b25e:	f003 0301 	and.w	r3, r3, #1
 801b262:	2b00      	cmp	r3, #0
 801b264:	d106      	bne.n	801b274 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801b266:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b26a:	4b88      	ldr	r3, [pc, #544]	; (801b48c <HAL_UART_IRQHandler+0x2a4>)
 801b26c:	4013      	ands	r3, r2
 801b26e:	2b00      	cmp	r3, #0
 801b270:	f000 8110 	beq.w	801b494 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b278:	f003 0301 	and.w	r3, r3, #1
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d011      	beq.n	801b2a4 <HAL_UART_IRQHandler+0xbc>
 801b280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d00b      	beq.n	801b2a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	2201      	movs	r2, #1
 801b292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b29a:	f043 0201 	orr.w	r2, r3, #1
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b2a8:	f003 0302 	and.w	r3, r3, #2
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d011      	beq.n	801b2d4 <HAL_UART_IRQHandler+0xec>
 801b2b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b2b4:	f003 0301 	and.w	r3, r3, #1
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d00b      	beq.n	801b2d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	2202      	movs	r2, #2
 801b2c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b2ca:	f043 0204 	orr.w	r2, r3, #4
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b2d8:	f003 0304 	and.w	r3, r3, #4
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d011      	beq.n	801b304 <HAL_UART_IRQHandler+0x11c>
 801b2e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b2e4:	f003 0301 	and.w	r3, r3, #1
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d00b      	beq.n	801b304 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	2204      	movs	r2, #4
 801b2f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b2fa:	f043 0202 	orr.w	r2, r3, #2
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b308:	f003 0308 	and.w	r3, r3, #8
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d017      	beq.n	801b340 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b314:	f003 0320 	and.w	r3, r3, #32
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d105      	bne.n	801b328 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801b31c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b320:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b324:	2b00      	cmp	r3, #0
 801b326:	d00b      	beq.n	801b340 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	2208      	movs	r2, #8
 801b32e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b336:	f043 0208 	orr.w	r2, r3, #8
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d012      	beq.n	801b372 <HAL_UART_IRQHandler+0x18a>
 801b34c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b354:	2b00      	cmp	r3, #0
 801b356:	d00c      	beq.n	801b372 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b360:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b368:	f043 0220 	orr.w	r2, r3, #32
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b378:	2b00      	cmp	r3, #0
 801b37a:	f000 821e 	beq.w	801b7ba <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801b37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b382:	f003 0320 	and.w	r3, r3, #32
 801b386:	2b00      	cmp	r3, #0
 801b388:	d00d      	beq.n	801b3a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b38a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b38e:	f003 0320 	and.w	r3, r3, #32
 801b392:	2b00      	cmp	r3, #0
 801b394:	d007      	beq.n	801b3a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d003      	beq.n	801b3a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b3a2:	6878      	ldr	r0, [r7, #4]
 801b3a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b3ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	689b      	ldr	r3, [r3, #8]
 801b3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3ba:	2b40      	cmp	r3, #64	; 0x40
 801b3bc:	d005      	beq.n	801b3ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b3be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b3c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d053      	beq.n	801b472 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b3ca:	6878      	ldr	r0, [r7, #4]
 801b3cc:	f000 ff80 	bl	801c2d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	689b      	ldr	r3, [r3, #8]
 801b3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3da:	2b40      	cmp	r3, #64	; 0x40
 801b3dc:	d143      	bne.n	801b466 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	3308      	adds	r3, #8
 801b3e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b3ec:	e853 3f00 	ldrex	r3, [r3]
 801b3f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b3f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b3f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b3fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	3308      	adds	r3, #8
 801b406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b40a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b40e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b41a:	e841 2300 	strex	r3, r2, [r1]
 801b41e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b426:	2b00      	cmp	r3, #0
 801b428:	d1d9      	bne.n	801b3de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d013      	beq.n	801b45a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b436:	4a16      	ldr	r2, [pc, #88]	; (801b490 <HAL_UART_IRQHandler+0x2a8>)
 801b438:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b43e:	4618      	mov	r0, r3
 801b440:	f7fb f98a 	bl	8016758 <HAL_DMA_Abort_IT>
 801b444:	4603      	mov	r3, r0
 801b446:	2b00      	cmp	r3, #0
 801b448:	d01d      	beq.n	801b486 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b450:	687a      	ldr	r2, [r7, #4]
 801b452:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801b454:	4610      	mov	r0, r2
 801b456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b458:	e015      	b.n	801b486 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b460:	6878      	ldr	r0, [r7, #4]
 801b462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b464:	e00f      	b.n	801b486 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b46c:	6878      	ldr	r0, [r7, #4]
 801b46e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b470:	e009      	b.n	801b486 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b478:	6878      	ldr	r0, [r7, #4]
 801b47a:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	2200      	movs	r2, #0
 801b480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801b484:	e199      	b.n	801b7ba <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b486:	bf00      	nop
    return;
 801b488:	e197      	b.n	801b7ba <HAL_UART_IRQHandler+0x5d2>
 801b48a:	bf00      	nop
 801b48c:	04000120 	.word	0x04000120
 801b490:	0801c399 	.word	0x0801c399

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b498:	2b01      	cmp	r3, #1
 801b49a:	f040 8150 	bne.w	801b73e <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b4a2:	f003 0310 	and.w	r3, r3, #16
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	f000 8149 	beq.w	801b73e <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b4b0:	f003 0310 	and.w	r3, r3, #16
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	f000 8142 	beq.w	801b73e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	2210      	movs	r2, #16
 801b4c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	681b      	ldr	r3, [r3, #0]
 801b4c6:	689b      	ldr	r3, [r3, #8]
 801b4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b4cc:	2b40      	cmp	r3, #64	; 0x40
 801b4ce:	f040 80b8 	bne.w	801b642 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	685b      	ldr	r3, [r3, #4]
 801b4da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b4de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	f000 816b 	beq.w	801b7be <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801b4ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b4f2:	429a      	cmp	r2, r3
 801b4f4:	f080 8163 	bcs.w	801b7be <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b4fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b506:	69db      	ldr	r3, [r3, #28]
 801b508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b50c:	f000 8086 	beq.w	801b61c <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b51c:	e853 3f00 	ldrex	r3, [r3]
 801b520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b52c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	461a      	mov	r2, r3
 801b536:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b53a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b53e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b542:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b546:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b54a:	e841 2300 	strex	r3, r2, [r1]
 801b54e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b556:	2b00      	cmp	r3, #0
 801b558:	d1da      	bne.n	801b510 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	3308      	adds	r3, #8
 801b560:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b564:	e853 3f00 	ldrex	r3, [r3]
 801b568:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b56a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b56c:	f023 0301 	bic.w	r3, r3, #1
 801b570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	3308      	adds	r3, #8
 801b57a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b57e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b582:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b584:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b586:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b58a:	e841 2300 	strex	r3, r2, [r1]
 801b58e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801b590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b592:	2b00      	cmp	r3, #0
 801b594:	d1e1      	bne.n	801b55a <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	3308      	adds	r3, #8
 801b59c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b59e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b5a0:	e853 3f00 	ldrex	r3, [r3]
 801b5a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801b5a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b5a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b5ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	3308      	adds	r3, #8
 801b5b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b5ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b5bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b5be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801b5c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b5c2:	e841 2300 	strex	r3, r2, [r1]
 801b5c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801b5c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d1e3      	bne.n	801b596 <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	2220      	movs	r2, #32
 801b5d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	2200      	movs	r2, #0
 801b5da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b5e4:	e853 3f00 	ldrex	r3, [r3]
 801b5e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801b5ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b5ec:	f023 0310 	bic.w	r3, r3, #16
 801b5f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	461a      	mov	r2, r3
 801b5fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b5fe:	65bb      	str	r3, [r7, #88]	; 0x58
 801b600:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b602:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b604:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b606:	e841 2300 	strex	r3, r2, [r1]
 801b60a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801b60c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b60e:	2b00      	cmp	r3, #0
 801b610:	d1e4      	bne.n	801b5dc <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b616:	4618      	mov	r0, r3
 801b618:	f7fb f82e 	bl	8016678 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	2202      	movs	r2, #2
 801b620:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b628:	687a      	ldr	r2, [r7, #4]
 801b62a:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801b62e:	687a      	ldr	r2, [r7, #4]
 801b630:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801b634:	b292      	uxth	r2, r2
 801b636:	1a8a      	subs	r2, r1, r2
 801b638:	b292      	uxth	r2, r2
 801b63a:	4611      	mov	r1, r2
 801b63c:	6878      	ldr	r0, [r7, #4]
 801b63e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b640:	e0bd      	b.n	801b7be <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b64e:	b29b      	uxth	r3, r3
 801b650:	1ad3      	subs	r3, r2, r3
 801b652:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b65c:	b29b      	uxth	r3, r3
 801b65e:	2b00      	cmp	r3, #0
 801b660:	f000 80af 	beq.w	801b7c2 <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801b664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801b668:	2b00      	cmp	r3, #0
 801b66a:	f000 80aa 	beq.w	801b7c2 <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b676:	e853 3f00 	ldrex	r3, [r3]
 801b67a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b67e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	461a      	mov	r2, r3
 801b68c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b690:	647b      	str	r3, [r7, #68]	; 0x44
 801b692:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b694:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b698:	e841 2300 	strex	r3, r2, [r1]
 801b69c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d1e4      	bne.n	801b66e <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	3308      	adds	r3, #8
 801b6aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ae:	e853 3f00 	ldrex	r3, [r3]
 801b6b2:	623b      	str	r3, [r7, #32]
   return(result);
 801b6b4:	6a3b      	ldr	r3, [r7, #32]
 801b6b6:	f023 0301 	bic.w	r3, r3, #1
 801b6ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	3308      	adds	r3, #8
 801b6c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b6c8:	633a      	str	r2, [r7, #48]	; 0x30
 801b6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b6cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b6ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b6d0:	e841 2300 	strex	r3, r2, [r1]
 801b6d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d1e3      	bne.n	801b6a4 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	2220      	movs	r2, #32
 801b6e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	2200      	movs	r2, #0
 801b6ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b6f6:	693b      	ldr	r3, [r7, #16]
 801b6f8:	e853 3f00 	ldrex	r3, [r3]
 801b6fc:	60fb      	str	r3, [r7, #12]
   return(result);
 801b6fe:	68fb      	ldr	r3, [r7, #12]
 801b700:	f023 0310 	bic.w	r3, r3, #16
 801b704:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	461a      	mov	r2, r3
 801b70e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b712:	61fb      	str	r3, [r7, #28]
 801b714:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b716:	69b9      	ldr	r1, [r7, #24]
 801b718:	69fa      	ldr	r2, [r7, #28]
 801b71a:	e841 2300 	strex	r3, r2, [r1]
 801b71e:	617b      	str	r3, [r7, #20]
   return(result);
 801b720:	697b      	ldr	r3, [r7, #20]
 801b722:	2b00      	cmp	r3, #0
 801b724:	d1e4      	bne.n	801b6f0 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	2202      	movs	r2, #2
 801b72a:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b732:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801b736:	4611      	mov	r1, r2
 801b738:	6878      	ldr	r0, [r7, #4]
 801b73a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b73c:	e041      	b.n	801b7c2 <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b746:	2b00      	cmp	r3, #0
 801b748:	d010      	beq.n	801b76c <HAL_UART_IRQHandler+0x584>
 801b74a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b74e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b752:	2b00      	cmp	r3, #0
 801b754:	d00a      	beq.n	801b76c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801b75e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801b766:	6878      	ldr	r0, [r7, #4]
 801b768:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b76a:	e02d      	b.n	801b7c8 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b774:	2b00      	cmp	r3, #0
 801b776:	d00e      	beq.n	801b796 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b77c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b780:	2b00      	cmp	r3, #0
 801b782:	d008      	beq.n	801b796 <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d01c      	beq.n	801b7c6 <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b790:	6878      	ldr	r0, [r7, #4]
 801b792:	4798      	blx	r3
    }
    return;
 801b794:	e017      	b.n	801b7c6 <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d012      	beq.n	801b7c8 <HAL_UART_IRQHandler+0x5e0>
 801b7a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d00c      	beq.n	801b7c8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801b7ae:	6878      	ldr	r0, [r7, #4]
 801b7b0:	f000 fe0a 	bl	801c3c8 <UART_EndTransmit_IT>
    return;
 801b7b4:	e008      	b.n	801b7c8 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b7b6:	bf00      	nop
 801b7b8:	e006      	b.n	801b7c8 <HAL_UART_IRQHandler+0x5e0>
    return;
 801b7ba:	bf00      	nop
 801b7bc:	e004      	b.n	801b7c8 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b7be:	bf00      	nop
 801b7c0:	e002      	b.n	801b7c8 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b7c2:	bf00      	nop
 801b7c4:	e000      	b.n	801b7c8 <HAL_UART_IRQHandler+0x5e0>
    return;
 801b7c6:	bf00      	nop
  }

}
 801b7c8:	37e8      	adds	r7, #232	; 0xe8
 801b7ca:	46bd      	mov	sp, r7
 801b7cc:	bd80      	pop	{r7, pc}
 801b7ce:	bf00      	nop

0801b7d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b7d0:	b480      	push	{r7}
 801b7d2:	b083      	sub	sp, #12
 801b7d4:	af00      	add	r7, sp, #0
 801b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b7d8:	bf00      	nop
 801b7da:	370c      	adds	r7, #12
 801b7dc:	46bd      	mov	sp, r7
 801b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e2:	4770      	bx	lr

0801b7e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b7e4:	b480      	push	{r7}
 801b7e6:	b083      	sub	sp, #12
 801b7e8:	af00      	add	r7, sp, #0
 801b7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801b7ec:	bf00      	nop
 801b7ee:	370c      	adds	r7, #12
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f6:	4770      	bx	lr

0801b7f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801b7f8:	b480      	push	{r7}
 801b7fa:	b083      	sub	sp, #12
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801b800:	bf00      	nop
 801b802:	370c      	adds	r7, #12
 801b804:	46bd      	mov	sp, r7
 801b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b80a:	4770      	bx	lr

0801b80c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b80c:	b480      	push	{r7}
 801b80e:	b083      	sub	sp, #12
 801b810:	af00      	add	r7, sp, #0
 801b812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801b814:	bf00      	nop
 801b816:	370c      	adds	r7, #12
 801b818:	46bd      	mov	sp, r7
 801b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b81e:	4770      	bx	lr

0801b820 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b820:	b480      	push	{r7}
 801b822:	b083      	sub	sp, #12
 801b824:	af00      	add	r7, sp, #0
 801b826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801b828:	bf00      	nop
 801b82a:	370c      	adds	r7, #12
 801b82c:	46bd      	mov	sp, r7
 801b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b832:	4770      	bx	lr

0801b834 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801b834:	b480      	push	{r7}
 801b836:	b083      	sub	sp, #12
 801b838:	af00      	add	r7, sp, #0
 801b83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801b83c:	bf00      	nop
 801b83e:	370c      	adds	r7, #12
 801b840:	46bd      	mov	sp, r7
 801b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b846:	4770      	bx	lr

0801b848 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801b848:	b480      	push	{r7}
 801b84a:	b083      	sub	sp, #12
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801b850:	bf00      	nop
 801b852:	370c      	adds	r7, #12
 801b854:	46bd      	mov	sp, r7
 801b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b85a:	4770      	bx	lr

0801b85c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801b85c:	b480      	push	{r7}
 801b85e:	b083      	sub	sp, #12
 801b860:	af00      	add	r7, sp, #0
 801b862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801b864:	bf00      	nop
 801b866:	370c      	adds	r7, #12
 801b868:	46bd      	mov	sp, r7
 801b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b86e:	4770      	bx	lr

0801b870 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b870:	b480      	push	{r7}
 801b872:	b083      	sub	sp, #12
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b878:	bf00      	nop
 801b87a:	370c      	adds	r7, #12
 801b87c:	46bd      	mov	sp, r7
 801b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b882:	4770      	bx	lr

0801b884 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801b884:	b480      	push	{r7}
 801b886:	b083      	sub	sp, #12
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	4a16      	ldr	r2, [pc, #88]	; (801b8e8 <UART_InitCallbacksToDefault+0x64>)
 801b890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	4a15      	ldr	r2, [pc, #84]	; (801b8ec <UART_InitCallbacksToDefault+0x68>)
 801b898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	4a14      	ldr	r2, [pc, #80]	; (801b8f0 <UART_InitCallbacksToDefault+0x6c>)
 801b8a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	4a13      	ldr	r2, [pc, #76]	; (801b8f4 <UART_InitCallbacksToDefault+0x70>)
 801b8a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	4a12      	ldr	r2, [pc, #72]	; (801b8f8 <UART_InitCallbacksToDefault+0x74>)
 801b8b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	4a11      	ldr	r2, [pc, #68]	; (801b8fc <UART_InitCallbacksToDefault+0x78>)
 801b8b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	4a10      	ldr	r2, [pc, #64]	; (801b900 <UART_InitCallbacksToDefault+0x7c>)
 801b8c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	4a0f      	ldr	r2, [pc, #60]	; (801b904 <UART_InitCallbacksToDefault+0x80>)
 801b8c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	4a0e      	ldr	r2, [pc, #56]	; (801b908 <UART_InitCallbacksToDefault+0x84>)
 801b8d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	4a0d      	ldr	r2, [pc, #52]	; (801b90c <UART_InitCallbacksToDefault+0x88>)
 801b8d8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801b8dc:	bf00      	nop
 801b8de:	370c      	adds	r7, #12
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e6:	4770      	bx	lr
 801b8e8:	0801b7e5 	.word	0x0801b7e5
 801b8ec:	0801b7d1 	.word	0x0801b7d1
 801b8f0:	0801b80d 	.word	0x0801b80d
 801b8f4:	0801b7f9 	.word	0x0801b7f9
 801b8f8:	0801b821 	.word	0x0801b821
 801b8fc:	0801b835 	.word	0x0801b835
 801b900:	0801b849 	.word	0x0801b849
 801b904:	0801b85d 	.word	0x0801b85d
 801b908:	0801b871 	.word	0x0801b871
 801b90c:	08014cad 	.word	0x08014cad

0801b910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b910:	b580      	push	{r7, lr}
 801b912:	b088      	sub	sp, #32
 801b914:	af00      	add	r7, sp, #0
 801b916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b918:	2300      	movs	r3, #0
 801b91a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	689a      	ldr	r2, [r3, #8]
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	691b      	ldr	r3, [r3, #16]
 801b924:	431a      	orrs	r2, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	695b      	ldr	r3, [r3, #20]
 801b92a:	431a      	orrs	r2, r3
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	69db      	ldr	r3, [r3, #28]
 801b930:	4313      	orrs	r3, r2
 801b932:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	681a      	ldr	r2, [r3, #0]
 801b93a:	4ba6      	ldr	r3, [pc, #664]	; (801bbd4 <UART_SetConfig+0x2c4>)
 801b93c:	4013      	ands	r3, r2
 801b93e:	687a      	ldr	r2, [r7, #4]
 801b940:	6812      	ldr	r2, [r2, #0]
 801b942:	6979      	ldr	r1, [r7, #20]
 801b944:	430b      	orrs	r3, r1
 801b946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	685b      	ldr	r3, [r3, #4]
 801b94e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	68da      	ldr	r2, [r3, #12]
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	430a      	orrs	r2, r1
 801b95c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	699b      	ldr	r3, [r3, #24]
 801b962:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	6a1b      	ldr	r3, [r3, #32]
 801b968:	697a      	ldr	r2, [r7, #20]
 801b96a:	4313      	orrs	r3, r2
 801b96c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	689b      	ldr	r3, [r3, #8]
 801b974:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	697a      	ldr	r2, [r7, #20]
 801b97e:	430a      	orrs	r2, r1
 801b980:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	4a94      	ldr	r2, [pc, #592]	; (801bbd8 <UART_SetConfig+0x2c8>)
 801b988:	4293      	cmp	r3, r2
 801b98a:	d120      	bne.n	801b9ce <UART_SetConfig+0xbe>
 801b98c:	4b93      	ldr	r3, [pc, #588]	; (801bbdc <UART_SetConfig+0x2cc>)
 801b98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b992:	f003 0303 	and.w	r3, r3, #3
 801b996:	2b03      	cmp	r3, #3
 801b998:	d816      	bhi.n	801b9c8 <UART_SetConfig+0xb8>
 801b99a:	a201      	add	r2, pc, #4	; (adr r2, 801b9a0 <UART_SetConfig+0x90>)
 801b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9a0:	0801b9b1 	.word	0x0801b9b1
 801b9a4:	0801b9bd 	.word	0x0801b9bd
 801b9a8:	0801b9b7 	.word	0x0801b9b7
 801b9ac:	0801b9c3 	.word	0x0801b9c3
 801b9b0:	2301      	movs	r3, #1
 801b9b2:	77fb      	strb	r3, [r7, #31]
 801b9b4:	e150      	b.n	801bc58 <UART_SetConfig+0x348>
 801b9b6:	2302      	movs	r3, #2
 801b9b8:	77fb      	strb	r3, [r7, #31]
 801b9ba:	e14d      	b.n	801bc58 <UART_SetConfig+0x348>
 801b9bc:	2304      	movs	r3, #4
 801b9be:	77fb      	strb	r3, [r7, #31]
 801b9c0:	e14a      	b.n	801bc58 <UART_SetConfig+0x348>
 801b9c2:	2308      	movs	r3, #8
 801b9c4:	77fb      	strb	r3, [r7, #31]
 801b9c6:	e147      	b.n	801bc58 <UART_SetConfig+0x348>
 801b9c8:	2310      	movs	r3, #16
 801b9ca:	77fb      	strb	r3, [r7, #31]
 801b9cc:	e144      	b.n	801bc58 <UART_SetConfig+0x348>
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	4a83      	ldr	r2, [pc, #524]	; (801bbe0 <UART_SetConfig+0x2d0>)
 801b9d4:	4293      	cmp	r3, r2
 801b9d6:	d132      	bne.n	801ba3e <UART_SetConfig+0x12e>
 801b9d8:	4b80      	ldr	r3, [pc, #512]	; (801bbdc <UART_SetConfig+0x2cc>)
 801b9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b9de:	f003 030c 	and.w	r3, r3, #12
 801b9e2:	2b0c      	cmp	r3, #12
 801b9e4:	d828      	bhi.n	801ba38 <UART_SetConfig+0x128>
 801b9e6:	a201      	add	r2, pc, #4	; (adr r2, 801b9ec <UART_SetConfig+0xdc>)
 801b9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9ec:	0801ba21 	.word	0x0801ba21
 801b9f0:	0801ba39 	.word	0x0801ba39
 801b9f4:	0801ba39 	.word	0x0801ba39
 801b9f8:	0801ba39 	.word	0x0801ba39
 801b9fc:	0801ba2d 	.word	0x0801ba2d
 801ba00:	0801ba39 	.word	0x0801ba39
 801ba04:	0801ba39 	.word	0x0801ba39
 801ba08:	0801ba39 	.word	0x0801ba39
 801ba0c:	0801ba27 	.word	0x0801ba27
 801ba10:	0801ba39 	.word	0x0801ba39
 801ba14:	0801ba39 	.word	0x0801ba39
 801ba18:	0801ba39 	.word	0x0801ba39
 801ba1c:	0801ba33 	.word	0x0801ba33
 801ba20:	2300      	movs	r3, #0
 801ba22:	77fb      	strb	r3, [r7, #31]
 801ba24:	e118      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba26:	2302      	movs	r3, #2
 801ba28:	77fb      	strb	r3, [r7, #31]
 801ba2a:	e115      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba2c:	2304      	movs	r3, #4
 801ba2e:	77fb      	strb	r3, [r7, #31]
 801ba30:	e112      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba32:	2308      	movs	r3, #8
 801ba34:	77fb      	strb	r3, [r7, #31]
 801ba36:	e10f      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba38:	2310      	movs	r3, #16
 801ba3a:	77fb      	strb	r3, [r7, #31]
 801ba3c:	e10c      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	4a68      	ldr	r2, [pc, #416]	; (801bbe4 <UART_SetConfig+0x2d4>)
 801ba44:	4293      	cmp	r3, r2
 801ba46:	d120      	bne.n	801ba8a <UART_SetConfig+0x17a>
 801ba48:	4b64      	ldr	r3, [pc, #400]	; (801bbdc <UART_SetConfig+0x2cc>)
 801ba4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ba52:	2b30      	cmp	r3, #48	; 0x30
 801ba54:	d013      	beq.n	801ba7e <UART_SetConfig+0x16e>
 801ba56:	2b30      	cmp	r3, #48	; 0x30
 801ba58:	d814      	bhi.n	801ba84 <UART_SetConfig+0x174>
 801ba5a:	2b20      	cmp	r3, #32
 801ba5c:	d009      	beq.n	801ba72 <UART_SetConfig+0x162>
 801ba5e:	2b20      	cmp	r3, #32
 801ba60:	d810      	bhi.n	801ba84 <UART_SetConfig+0x174>
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d002      	beq.n	801ba6c <UART_SetConfig+0x15c>
 801ba66:	2b10      	cmp	r3, #16
 801ba68:	d006      	beq.n	801ba78 <UART_SetConfig+0x168>
 801ba6a:	e00b      	b.n	801ba84 <UART_SetConfig+0x174>
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	77fb      	strb	r3, [r7, #31]
 801ba70:	e0f2      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba72:	2302      	movs	r3, #2
 801ba74:	77fb      	strb	r3, [r7, #31]
 801ba76:	e0ef      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba78:	2304      	movs	r3, #4
 801ba7a:	77fb      	strb	r3, [r7, #31]
 801ba7c:	e0ec      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba7e:	2308      	movs	r3, #8
 801ba80:	77fb      	strb	r3, [r7, #31]
 801ba82:	e0e9      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba84:	2310      	movs	r3, #16
 801ba86:	77fb      	strb	r3, [r7, #31]
 801ba88:	e0e6      	b.n	801bc58 <UART_SetConfig+0x348>
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	4a56      	ldr	r2, [pc, #344]	; (801bbe8 <UART_SetConfig+0x2d8>)
 801ba90:	4293      	cmp	r3, r2
 801ba92:	d120      	bne.n	801bad6 <UART_SetConfig+0x1c6>
 801ba94:	4b51      	ldr	r3, [pc, #324]	; (801bbdc <UART_SetConfig+0x2cc>)
 801ba96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ba9e:	2bc0      	cmp	r3, #192	; 0xc0
 801baa0:	d013      	beq.n	801baca <UART_SetConfig+0x1ba>
 801baa2:	2bc0      	cmp	r3, #192	; 0xc0
 801baa4:	d814      	bhi.n	801bad0 <UART_SetConfig+0x1c0>
 801baa6:	2b80      	cmp	r3, #128	; 0x80
 801baa8:	d009      	beq.n	801babe <UART_SetConfig+0x1ae>
 801baaa:	2b80      	cmp	r3, #128	; 0x80
 801baac:	d810      	bhi.n	801bad0 <UART_SetConfig+0x1c0>
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d002      	beq.n	801bab8 <UART_SetConfig+0x1a8>
 801bab2:	2b40      	cmp	r3, #64	; 0x40
 801bab4:	d006      	beq.n	801bac4 <UART_SetConfig+0x1b4>
 801bab6:	e00b      	b.n	801bad0 <UART_SetConfig+0x1c0>
 801bab8:	2300      	movs	r3, #0
 801baba:	77fb      	strb	r3, [r7, #31]
 801babc:	e0cc      	b.n	801bc58 <UART_SetConfig+0x348>
 801babe:	2302      	movs	r3, #2
 801bac0:	77fb      	strb	r3, [r7, #31]
 801bac2:	e0c9      	b.n	801bc58 <UART_SetConfig+0x348>
 801bac4:	2304      	movs	r3, #4
 801bac6:	77fb      	strb	r3, [r7, #31]
 801bac8:	e0c6      	b.n	801bc58 <UART_SetConfig+0x348>
 801baca:	2308      	movs	r3, #8
 801bacc:	77fb      	strb	r3, [r7, #31]
 801bace:	e0c3      	b.n	801bc58 <UART_SetConfig+0x348>
 801bad0:	2310      	movs	r3, #16
 801bad2:	77fb      	strb	r3, [r7, #31]
 801bad4:	e0c0      	b.n	801bc58 <UART_SetConfig+0x348>
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	4a44      	ldr	r2, [pc, #272]	; (801bbec <UART_SetConfig+0x2dc>)
 801badc:	4293      	cmp	r3, r2
 801bade:	d125      	bne.n	801bb2c <UART_SetConfig+0x21c>
 801bae0:	4b3e      	ldr	r3, [pc, #248]	; (801bbdc <UART_SetConfig+0x2cc>)
 801bae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801baea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801baee:	d017      	beq.n	801bb20 <UART_SetConfig+0x210>
 801baf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801baf4:	d817      	bhi.n	801bb26 <UART_SetConfig+0x216>
 801baf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bafa:	d00b      	beq.n	801bb14 <UART_SetConfig+0x204>
 801bafc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bb00:	d811      	bhi.n	801bb26 <UART_SetConfig+0x216>
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d003      	beq.n	801bb0e <UART_SetConfig+0x1fe>
 801bb06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bb0a:	d006      	beq.n	801bb1a <UART_SetConfig+0x20a>
 801bb0c:	e00b      	b.n	801bb26 <UART_SetConfig+0x216>
 801bb0e:	2300      	movs	r3, #0
 801bb10:	77fb      	strb	r3, [r7, #31]
 801bb12:	e0a1      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb14:	2302      	movs	r3, #2
 801bb16:	77fb      	strb	r3, [r7, #31]
 801bb18:	e09e      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb1a:	2304      	movs	r3, #4
 801bb1c:	77fb      	strb	r3, [r7, #31]
 801bb1e:	e09b      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb20:	2308      	movs	r3, #8
 801bb22:	77fb      	strb	r3, [r7, #31]
 801bb24:	e098      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb26:	2310      	movs	r3, #16
 801bb28:	77fb      	strb	r3, [r7, #31]
 801bb2a:	e095      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	4a2f      	ldr	r2, [pc, #188]	; (801bbf0 <UART_SetConfig+0x2e0>)
 801bb32:	4293      	cmp	r3, r2
 801bb34:	d125      	bne.n	801bb82 <UART_SetConfig+0x272>
 801bb36:	4b29      	ldr	r3, [pc, #164]	; (801bbdc <UART_SetConfig+0x2cc>)
 801bb38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bb3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801bb40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bb44:	d017      	beq.n	801bb76 <UART_SetConfig+0x266>
 801bb46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bb4a:	d817      	bhi.n	801bb7c <UART_SetConfig+0x26c>
 801bb4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bb50:	d00b      	beq.n	801bb6a <UART_SetConfig+0x25a>
 801bb52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bb56:	d811      	bhi.n	801bb7c <UART_SetConfig+0x26c>
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d003      	beq.n	801bb64 <UART_SetConfig+0x254>
 801bb5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bb60:	d006      	beq.n	801bb70 <UART_SetConfig+0x260>
 801bb62:	e00b      	b.n	801bb7c <UART_SetConfig+0x26c>
 801bb64:	2301      	movs	r3, #1
 801bb66:	77fb      	strb	r3, [r7, #31]
 801bb68:	e076      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb6a:	2302      	movs	r3, #2
 801bb6c:	77fb      	strb	r3, [r7, #31]
 801bb6e:	e073      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb70:	2304      	movs	r3, #4
 801bb72:	77fb      	strb	r3, [r7, #31]
 801bb74:	e070      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb76:	2308      	movs	r3, #8
 801bb78:	77fb      	strb	r3, [r7, #31]
 801bb7a:	e06d      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb7c:	2310      	movs	r3, #16
 801bb7e:	77fb      	strb	r3, [r7, #31]
 801bb80:	e06a      	b.n	801bc58 <UART_SetConfig+0x348>
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	4a1b      	ldr	r2, [pc, #108]	; (801bbf4 <UART_SetConfig+0x2e4>)
 801bb88:	4293      	cmp	r3, r2
 801bb8a:	d138      	bne.n	801bbfe <UART_SetConfig+0x2ee>
 801bb8c:	4b13      	ldr	r3, [pc, #76]	; (801bbdc <UART_SetConfig+0x2cc>)
 801bb8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bb92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801bb96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801bb9a:	d017      	beq.n	801bbcc <UART_SetConfig+0x2bc>
 801bb9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801bba0:	d82a      	bhi.n	801bbf8 <UART_SetConfig+0x2e8>
 801bba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bba6:	d00b      	beq.n	801bbc0 <UART_SetConfig+0x2b0>
 801bba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bbac:	d824      	bhi.n	801bbf8 <UART_SetConfig+0x2e8>
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d003      	beq.n	801bbba <UART_SetConfig+0x2aa>
 801bbb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bbb6:	d006      	beq.n	801bbc6 <UART_SetConfig+0x2b6>
 801bbb8:	e01e      	b.n	801bbf8 <UART_SetConfig+0x2e8>
 801bbba:	2300      	movs	r3, #0
 801bbbc:	77fb      	strb	r3, [r7, #31]
 801bbbe:	e04b      	b.n	801bc58 <UART_SetConfig+0x348>
 801bbc0:	2302      	movs	r3, #2
 801bbc2:	77fb      	strb	r3, [r7, #31]
 801bbc4:	e048      	b.n	801bc58 <UART_SetConfig+0x348>
 801bbc6:	2304      	movs	r3, #4
 801bbc8:	77fb      	strb	r3, [r7, #31]
 801bbca:	e045      	b.n	801bc58 <UART_SetConfig+0x348>
 801bbcc:	2308      	movs	r3, #8
 801bbce:	77fb      	strb	r3, [r7, #31]
 801bbd0:	e042      	b.n	801bc58 <UART_SetConfig+0x348>
 801bbd2:	bf00      	nop
 801bbd4:	efff69f3 	.word	0xefff69f3
 801bbd8:	40011000 	.word	0x40011000
 801bbdc:	40023800 	.word	0x40023800
 801bbe0:	40004400 	.word	0x40004400
 801bbe4:	40004800 	.word	0x40004800
 801bbe8:	40004c00 	.word	0x40004c00
 801bbec:	40005000 	.word	0x40005000
 801bbf0:	40011400 	.word	0x40011400
 801bbf4:	40007800 	.word	0x40007800
 801bbf8:	2310      	movs	r3, #16
 801bbfa:	77fb      	strb	r3, [r7, #31]
 801bbfc:	e02c      	b.n	801bc58 <UART_SetConfig+0x348>
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	4a72      	ldr	r2, [pc, #456]	; (801bdcc <UART_SetConfig+0x4bc>)
 801bc04:	4293      	cmp	r3, r2
 801bc06:	d125      	bne.n	801bc54 <UART_SetConfig+0x344>
 801bc08:	4b71      	ldr	r3, [pc, #452]	; (801bdd0 <UART_SetConfig+0x4c0>)
 801bc0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801bc12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801bc16:	d017      	beq.n	801bc48 <UART_SetConfig+0x338>
 801bc18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801bc1c:	d817      	bhi.n	801bc4e <UART_SetConfig+0x33e>
 801bc1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bc22:	d00b      	beq.n	801bc3c <UART_SetConfig+0x32c>
 801bc24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bc28:	d811      	bhi.n	801bc4e <UART_SetConfig+0x33e>
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d003      	beq.n	801bc36 <UART_SetConfig+0x326>
 801bc2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bc32:	d006      	beq.n	801bc42 <UART_SetConfig+0x332>
 801bc34:	e00b      	b.n	801bc4e <UART_SetConfig+0x33e>
 801bc36:	2300      	movs	r3, #0
 801bc38:	77fb      	strb	r3, [r7, #31]
 801bc3a:	e00d      	b.n	801bc58 <UART_SetConfig+0x348>
 801bc3c:	2302      	movs	r3, #2
 801bc3e:	77fb      	strb	r3, [r7, #31]
 801bc40:	e00a      	b.n	801bc58 <UART_SetConfig+0x348>
 801bc42:	2304      	movs	r3, #4
 801bc44:	77fb      	strb	r3, [r7, #31]
 801bc46:	e007      	b.n	801bc58 <UART_SetConfig+0x348>
 801bc48:	2308      	movs	r3, #8
 801bc4a:	77fb      	strb	r3, [r7, #31]
 801bc4c:	e004      	b.n	801bc58 <UART_SetConfig+0x348>
 801bc4e:	2310      	movs	r3, #16
 801bc50:	77fb      	strb	r3, [r7, #31]
 801bc52:	e001      	b.n	801bc58 <UART_SetConfig+0x348>
 801bc54:	2310      	movs	r3, #16
 801bc56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	69db      	ldr	r3, [r3, #28]
 801bc5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bc60:	d15b      	bne.n	801bd1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801bc62:	7ffb      	ldrb	r3, [r7, #31]
 801bc64:	2b08      	cmp	r3, #8
 801bc66:	d828      	bhi.n	801bcba <UART_SetConfig+0x3aa>
 801bc68:	a201      	add	r2, pc, #4	; (adr r2, 801bc70 <UART_SetConfig+0x360>)
 801bc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc6e:	bf00      	nop
 801bc70:	0801bc95 	.word	0x0801bc95
 801bc74:	0801bc9d 	.word	0x0801bc9d
 801bc78:	0801bca5 	.word	0x0801bca5
 801bc7c:	0801bcbb 	.word	0x0801bcbb
 801bc80:	0801bcab 	.word	0x0801bcab
 801bc84:	0801bcbb 	.word	0x0801bcbb
 801bc88:	0801bcbb 	.word	0x0801bcbb
 801bc8c:	0801bcbb 	.word	0x0801bcbb
 801bc90:	0801bcb3 	.word	0x0801bcb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801bc94:	f7fd fc3e 	bl	8019514 <HAL_RCC_GetPCLK1Freq>
 801bc98:	61b8      	str	r0, [r7, #24]
        break;
 801bc9a:	e013      	b.n	801bcc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801bc9c:	f7fd fc4e 	bl	801953c <HAL_RCC_GetPCLK2Freq>
 801bca0:	61b8      	str	r0, [r7, #24]
        break;
 801bca2:	e00f      	b.n	801bcc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801bca4:	4b4b      	ldr	r3, [pc, #300]	; (801bdd4 <UART_SetConfig+0x4c4>)
 801bca6:	61bb      	str	r3, [r7, #24]
        break;
 801bca8:	e00c      	b.n	801bcc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801bcaa:	f7fd fb61 	bl	8019370 <HAL_RCC_GetSysClockFreq>
 801bcae:	61b8      	str	r0, [r7, #24]
        break;
 801bcb0:	e008      	b.n	801bcc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801bcb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bcb6:	61bb      	str	r3, [r7, #24]
        break;
 801bcb8:	e004      	b.n	801bcc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801bcba:	2300      	movs	r3, #0
 801bcbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801bcbe:	2301      	movs	r3, #1
 801bcc0:	77bb      	strb	r3, [r7, #30]
        break;
 801bcc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801bcc4:	69bb      	ldr	r3, [r7, #24]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d074      	beq.n	801bdb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801bcca:	69bb      	ldr	r3, [r7, #24]
 801bccc:	005a      	lsls	r2, r3, #1
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	685b      	ldr	r3, [r3, #4]
 801bcd2:	085b      	lsrs	r3, r3, #1
 801bcd4:	441a      	add	r2, r3
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	685b      	ldr	r3, [r3, #4]
 801bcda:	fbb2 f3f3 	udiv	r3, r2, r3
 801bcde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801bce0:	693b      	ldr	r3, [r7, #16]
 801bce2:	2b0f      	cmp	r3, #15
 801bce4:	d916      	bls.n	801bd14 <UART_SetConfig+0x404>
 801bce6:	693b      	ldr	r3, [r7, #16]
 801bce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bcec:	d212      	bcs.n	801bd14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801bcee:	693b      	ldr	r3, [r7, #16]
 801bcf0:	b29b      	uxth	r3, r3
 801bcf2:	f023 030f 	bic.w	r3, r3, #15
 801bcf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801bcf8:	693b      	ldr	r3, [r7, #16]
 801bcfa:	085b      	lsrs	r3, r3, #1
 801bcfc:	b29b      	uxth	r3, r3
 801bcfe:	f003 0307 	and.w	r3, r3, #7
 801bd02:	b29a      	uxth	r2, r3
 801bd04:	89fb      	ldrh	r3, [r7, #14]
 801bd06:	4313      	orrs	r3, r2
 801bd08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	89fa      	ldrh	r2, [r7, #14]
 801bd10:	60da      	str	r2, [r3, #12]
 801bd12:	e04f      	b.n	801bdb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801bd14:	2301      	movs	r3, #1
 801bd16:	77bb      	strb	r3, [r7, #30]
 801bd18:	e04c      	b.n	801bdb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801bd1a:	7ffb      	ldrb	r3, [r7, #31]
 801bd1c:	2b08      	cmp	r3, #8
 801bd1e:	d828      	bhi.n	801bd72 <UART_SetConfig+0x462>
 801bd20:	a201      	add	r2, pc, #4	; (adr r2, 801bd28 <UART_SetConfig+0x418>)
 801bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd26:	bf00      	nop
 801bd28:	0801bd4d 	.word	0x0801bd4d
 801bd2c:	0801bd55 	.word	0x0801bd55
 801bd30:	0801bd5d 	.word	0x0801bd5d
 801bd34:	0801bd73 	.word	0x0801bd73
 801bd38:	0801bd63 	.word	0x0801bd63
 801bd3c:	0801bd73 	.word	0x0801bd73
 801bd40:	0801bd73 	.word	0x0801bd73
 801bd44:	0801bd73 	.word	0x0801bd73
 801bd48:	0801bd6b 	.word	0x0801bd6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801bd4c:	f7fd fbe2 	bl	8019514 <HAL_RCC_GetPCLK1Freq>
 801bd50:	61b8      	str	r0, [r7, #24]
        break;
 801bd52:	e013      	b.n	801bd7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801bd54:	f7fd fbf2 	bl	801953c <HAL_RCC_GetPCLK2Freq>
 801bd58:	61b8      	str	r0, [r7, #24]
        break;
 801bd5a:	e00f      	b.n	801bd7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801bd5c:	4b1d      	ldr	r3, [pc, #116]	; (801bdd4 <UART_SetConfig+0x4c4>)
 801bd5e:	61bb      	str	r3, [r7, #24]
        break;
 801bd60:	e00c      	b.n	801bd7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801bd62:	f7fd fb05 	bl	8019370 <HAL_RCC_GetSysClockFreq>
 801bd66:	61b8      	str	r0, [r7, #24]
        break;
 801bd68:	e008      	b.n	801bd7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801bd6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bd6e:	61bb      	str	r3, [r7, #24]
        break;
 801bd70:	e004      	b.n	801bd7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801bd72:	2300      	movs	r3, #0
 801bd74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801bd76:	2301      	movs	r3, #1
 801bd78:	77bb      	strb	r3, [r7, #30]
        break;
 801bd7a:	bf00      	nop
    }

    if (pclk != 0U)
 801bd7c:	69bb      	ldr	r3, [r7, #24]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d018      	beq.n	801bdb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	685b      	ldr	r3, [r3, #4]
 801bd86:	085a      	lsrs	r2, r3, #1
 801bd88:	69bb      	ldr	r3, [r7, #24]
 801bd8a:	441a      	add	r2, r3
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	685b      	ldr	r3, [r3, #4]
 801bd90:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801bd96:	693b      	ldr	r3, [r7, #16]
 801bd98:	2b0f      	cmp	r3, #15
 801bd9a:	d909      	bls.n	801bdb0 <UART_SetConfig+0x4a0>
 801bd9c:	693b      	ldr	r3, [r7, #16]
 801bd9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bda2:	d205      	bcs.n	801bdb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801bda4:	693b      	ldr	r3, [r7, #16]
 801bda6:	b29a      	uxth	r2, r3
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	60da      	str	r2, [r3, #12]
 801bdae:	e001      	b.n	801bdb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801bdb0:	2301      	movs	r3, #1
 801bdb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801bdc0:	7fbb      	ldrb	r3, [r7, #30]
}
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	3720      	adds	r7, #32
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	bd80      	pop	{r7, pc}
 801bdca:	bf00      	nop
 801bdcc:	40007c00 	.word	0x40007c00
 801bdd0:	40023800 	.word	0x40023800
 801bdd4:	00f42400 	.word	0x00f42400

0801bdd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801bdd8:	b480      	push	{r7}
 801bdda:	b083      	sub	sp, #12
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bde4:	f003 0301 	and.w	r3, r3, #1
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d00a      	beq.n	801be02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	685b      	ldr	r3, [r3, #4]
 801bdf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	430a      	orrs	r2, r1
 801be00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be06:	f003 0302 	and.w	r3, r3, #2
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d00a      	beq.n	801be24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	685b      	ldr	r3, [r3, #4]
 801be14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	430a      	orrs	r2, r1
 801be22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be28:	f003 0304 	and.w	r3, r3, #4
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d00a      	beq.n	801be46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	685b      	ldr	r3, [r3, #4]
 801be36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	430a      	orrs	r2, r1
 801be44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be4a:	f003 0308 	and.w	r3, r3, #8
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d00a      	beq.n	801be68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	685b      	ldr	r3, [r3, #4]
 801be58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	430a      	orrs	r2, r1
 801be66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be6c:	f003 0310 	and.w	r3, r3, #16
 801be70:	2b00      	cmp	r3, #0
 801be72:	d00a      	beq.n	801be8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	689b      	ldr	r3, [r3, #8]
 801be7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	430a      	orrs	r2, r1
 801be88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be8e:	f003 0320 	and.w	r3, r3, #32
 801be92:	2b00      	cmp	r3, #0
 801be94:	d00a      	beq.n	801beac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	689b      	ldr	r3, [r3, #8]
 801be9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	430a      	orrs	r2, r1
 801beaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801beb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d01a      	beq.n	801beee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	685b      	ldr	r3, [r3, #4]
 801bebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	430a      	orrs	r2, r1
 801becc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bed6:	d10a      	bne.n	801beee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	685b      	ldr	r3, [r3, #4]
 801bede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	430a      	orrs	r2, r1
 801beec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d00a      	beq.n	801bf10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	685b      	ldr	r3, [r3, #4]
 801bf00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	430a      	orrs	r2, r1
 801bf0e:	605a      	str	r2, [r3, #4]
  }
}
 801bf10:	bf00      	nop
 801bf12:	370c      	adds	r7, #12
 801bf14:	46bd      	mov	sp, r7
 801bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf1a:	4770      	bx	lr

0801bf1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801bf1c:	b580      	push	{r7, lr}
 801bf1e:	b086      	sub	sp, #24
 801bf20:	af02      	add	r7, sp, #8
 801bf22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	2200      	movs	r2, #0
 801bf28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801bf2c:	f7f9 fb10 	bl	8015550 <HAL_GetTick>
 801bf30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	f003 0308 	and.w	r3, r3, #8
 801bf3c:	2b08      	cmp	r3, #8
 801bf3e:	d10e      	bne.n	801bf5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bf40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801bf44:	9300      	str	r3, [sp, #0]
 801bf46:	68fb      	ldr	r3, [r7, #12]
 801bf48:	2200      	movs	r2, #0
 801bf4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801bf4e:	6878      	ldr	r0, [r7, #4]
 801bf50:	f000 f831 	bl	801bfb6 <UART_WaitOnFlagUntilTimeout>
 801bf54:	4603      	mov	r3, r0
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d001      	beq.n	801bf5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bf5a:	2303      	movs	r3, #3
 801bf5c:	e027      	b.n	801bfae <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	f003 0304 	and.w	r3, r3, #4
 801bf68:	2b04      	cmp	r3, #4
 801bf6a:	d10e      	bne.n	801bf8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bf6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801bf70:	9300      	str	r3, [sp, #0]
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	2200      	movs	r2, #0
 801bf76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801bf7a:	6878      	ldr	r0, [r7, #4]
 801bf7c:	f000 f81b 	bl	801bfb6 <UART_WaitOnFlagUntilTimeout>
 801bf80:	4603      	mov	r3, r0
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d001      	beq.n	801bf8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bf86:	2303      	movs	r3, #3
 801bf88:	e011      	b.n	801bfae <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	2220      	movs	r2, #32
 801bf8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	2220      	movs	r2, #32
 801bf94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	2200      	movs	r2, #0
 801bfa2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	2200      	movs	r2, #0
 801bfa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801bfac:	2300      	movs	r3, #0
}
 801bfae:	4618      	mov	r0, r3
 801bfb0:	3710      	adds	r7, #16
 801bfb2:	46bd      	mov	sp, r7
 801bfb4:	bd80      	pop	{r7, pc}

0801bfb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bfb6:	b580      	push	{r7, lr}
 801bfb8:	b09c      	sub	sp, #112	; 0x70
 801bfba:	af00      	add	r7, sp, #0
 801bfbc:	60f8      	str	r0, [r7, #12]
 801bfbe:	60b9      	str	r1, [r7, #8]
 801bfc0:	603b      	str	r3, [r7, #0]
 801bfc2:	4613      	mov	r3, r2
 801bfc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bfc6:	e0a7      	b.n	801c118 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bfc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfce:	f000 80a3 	beq.w	801c118 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bfd2:	f7f9 fabd 	bl	8015550 <HAL_GetTick>
 801bfd6:	4602      	mov	r2, r0
 801bfd8:	683b      	ldr	r3, [r7, #0]
 801bfda:	1ad3      	subs	r3, r2, r3
 801bfdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801bfde:	429a      	cmp	r2, r3
 801bfe0:	d302      	bcc.n	801bfe8 <UART_WaitOnFlagUntilTimeout+0x32>
 801bfe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d13f      	bne.n	801c068 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bfe8:	68fb      	ldr	r3, [r7, #12]
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bff0:	e853 3f00 	ldrex	r3, [r3]
 801bff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801bff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801bffc:	667b      	str	r3, [r7, #100]	; 0x64
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	461a      	mov	r2, r3
 801c004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c006:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c008:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c00a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c00c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c00e:	e841 2300 	strex	r3, r2, [r1]
 801c012:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801c014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c016:	2b00      	cmp	r3, #0
 801c018:	d1e6      	bne.n	801bfe8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	3308      	adds	r3, #8
 801c020:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c024:	e853 3f00 	ldrex	r3, [r3]
 801c028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c02c:	f023 0301 	bic.w	r3, r3, #1
 801c030:	663b      	str	r3, [r7, #96]	; 0x60
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	3308      	adds	r3, #8
 801c038:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c03a:	64ba      	str	r2, [r7, #72]	; 0x48
 801c03c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c03e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c042:	e841 2300 	strex	r3, r2, [r1]
 801c046:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d1e5      	bne.n	801c01a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	2220      	movs	r2, #32
 801c052:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	2220      	movs	r2, #32
 801c058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	2200      	movs	r2, #0
 801c060:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801c064:	2303      	movs	r3, #3
 801c066:	e068      	b.n	801c13a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	f003 0304 	and.w	r3, r3, #4
 801c072:	2b00      	cmp	r3, #0
 801c074:	d050      	beq.n	801c118 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	69db      	ldr	r3, [r3, #28]
 801c07c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c084:	d148      	bne.n	801c118 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c08e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c098:	e853 3f00 	ldrex	r3, [r3]
 801c09c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c0a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	461a      	mov	r2, r3
 801c0ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0ae:	637b      	str	r3, [r7, #52]	; 0x34
 801c0b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c0b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c0b6:	e841 2300 	strex	r3, r2, [r1]
 801c0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d1e6      	bne.n	801c090 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	3308      	adds	r3, #8
 801c0c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0ca:	697b      	ldr	r3, [r7, #20]
 801c0cc:	e853 3f00 	ldrex	r3, [r3]
 801c0d0:	613b      	str	r3, [r7, #16]
   return(result);
 801c0d2:	693b      	ldr	r3, [r7, #16]
 801c0d4:	f023 0301 	bic.w	r3, r3, #1
 801c0d8:	66bb      	str	r3, [r7, #104]	; 0x68
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	3308      	adds	r3, #8
 801c0e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c0e2:	623a      	str	r2, [r7, #32]
 801c0e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0e6:	69f9      	ldr	r1, [r7, #28]
 801c0e8:	6a3a      	ldr	r2, [r7, #32]
 801c0ea:	e841 2300 	strex	r3, r2, [r1]
 801c0ee:	61bb      	str	r3, [r7, #24]
   return(result);
 801c0f0:	69bb      	ldr	r3, [r7, #24]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d1e5      	bne.n	801c0c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801c0f6:	68fb      	ldr	r3, [r7, #12]
 801c0f8:	2220      	movs	r2, #32
 801c0fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	2220      	movs	r2, #32
 801c100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	2220      	movs	r2, #32
 801c108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801c10c:	68fb      	ldr	r3, [r7, #12]
 801c10e:	2200      	movs	r2, #0
 801c110:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801c114:	2303      	movs	r3, #3
 801c116:	e010      	b.n	801c13a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	69da      	ldr	r2, [r3, #28]
 801c11e:	68bb      	ldr	r3, [r7, #8]
 801c120:	4013      	ands	r3, r2
 801c122:	68ba      	ldr	r2, [r7, #8]
 801c124:	429a      	cmp	r2, r3
 801c126:	bf0c      	ite	eq
 801c128:	2301      	moveq	r3, #1
 801c12a:	2300      	movne	r3, #0
 801c12c:	b2db      	uxtb	r3, r3
 801c12e:	461a      	mov	r2, r3
 801c130:	79fb      	ldrb	r3, [r7, #7]
 801c132:	429a      	cmp	r2, r3
 801c134:	f43f af48 	beq.w	801bfc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c138:	2300      	movs	r3, #0
}
 801c13a:	4618      	mov	r0, r3
 801c13c:	3770      	adds	r7, #112	; 0x70
 801c13e:	46bd      	mov	sp, r7
 801c140:	bd80      	pop	{r7, pc}
	...

0801c144 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c144:	b480      	push	{r7}
 801c146:	b097      	sub	sp, #92	; 0x5c
 801c148:	af00      	add	r7, sp, #0
 801c14a:	60f8      	str	r0, [r7, #12]
 801c14c:	60b9      	str	r1, [r7, #8]
 801c14e:	4613      	mov	r3, r2
 801c150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	68ba      	ldr	r2, [r7, #8]
 801c156:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	88fa      	ldrh	r2, [r7, #6]
 801c15c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	88fa      	ldrh	r2, [r7, #6]
 801c164:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	2200      	movs	r2, #0
 801c16c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801c16e:	68fb      	ldr	r3, [r7, #12]
 801c170:	689b      	ldr	r3, [r3, #8]
 801c172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c176:	d10e      	bne.n	801c196 <UART_Start_Receive_IT+0x52>
 801c178:	68fb      	ldr	r3, [r7, #12]
 801c17a:	691b      	ldr	r3, [r3, #16]
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d105      	bne.n	801c18c <UART_Start_Receive_IT+0x48>
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	f240 12ff 	movw	r2, #511	; 0x1ff
 801c186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c18a:	e02d      	b.n	801c1e8 <UART_Start_Receive_IT+0xa4>
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	22ff      	movs	r2, #255	; 0xff
 801c190:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c194:	e028      	b.n	801c1e8 <UART_Start_Receive_IT+0xa4>
 801c196:	68fb      	ldr	r3, [r7, #12]
 801c198:	689b      	ldr	r3, [r3, #8]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d10d      	bne.n	801c1ba <UART_Start_Receive_IT+0x76>
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	691b      	ldr	r3, [r3, #16]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d104      	bne.n	801c1b0 <UART_Start_Receive_IT+0x6c>
 801c1a6:	68fb      	ldr	r3, [r7, #12]
 801c1a8:	22ff      	movs	r2, #255	; 0xff
 801c1aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c1ae:	e01b      	b.n	801c1e8 <UART_Start_Receive_IT+0xa4>
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	227f      	movs	r2, #127	; 0x7f
 801c1b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c1b8:	e016      	b.n	801c1e8 <UART_Start_Receive_IT+0xa4>
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	689b      	ldr	r3, [r3, #8]
 801c1be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c1c2:	d10d      	bne.n	801c1e0 <UART_Start_Receive_IT+0x9c>
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	691b      	ldr	r3, [r3, #16]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d104      	bne.n	801c1d6 <UART_Start_Receive_IT+0x92>
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	227f      	movs	r2, #127	; 0x7f
 801c1d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c1d4:	e008      	b.n	801c1e8 <UART_Start_Receive_IT+0xa4>
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	223f      	movs	r2, #63	; 0x3f
 801c1da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c1de:	e003      	b.n	801c1e8 <UART_Start_Receive_IT+0xa4>
 801c1e0:	68fb      	ldr	r3, [r7, #12]
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	2200      	movs	r2, #0
 801c1ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	2222      	movs	r2, #34	; 0x22
 801c1f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	3308      	adds	r3, #8
 801c1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c202:	e853 3f00 	ldrex	r3, [r3]
 801c206:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c20a:	f043 0301 	orr.w	r3, r3, #1
 801c20e:	657b      	str	r3, [r7, #84]	; 0x54
 801c210:	68fb      	ldr	r3, [r7, #12]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	3308      	adds	r3, #8
 801c216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c218:	64ba      	str	r2, [r7, #72]	; 0x48
 801c21a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c21c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c21e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c220:	e841 2300 	strex	r3, r2, [r1]
 801c224:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d1e5      	bne.n	801c1f8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c22c:	68fb      	ldr	r3, [r7, #12]
 801c22e:	689b      	ldr	r3, [r3, #8]
 801c230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c234:	d107      	bne.n	801c246 <UART_Start_Receive_IT+0x102>
 801c236:	68fb      	ldr	r3, [r7, #12]
 801c238:	691b      	ldr	r3, [r3, #16]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d103      	bne.n	801c246 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801c23e:	68fb      	ldr	r3, [r7, #12]
 801c240:	4a21      	ldr	r2, [pc, #132]	; (801c2c8 <UART_Start_Receive_IT+0x184>)
 801c242:	669a      	str	r2, [r3, #104]	; 0x68
 801c244:	e002      	b.n	801c24c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	4a20      	ldr	r2, [pc, #128]	; (801c2cc <UART_Start_Receive_IT+0x188>)
 801c24a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	691b      	ldr	r3, [r3, #16]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d019      	beq.n	801c288 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c25c:	e853 3f00 	ldrex	r3, [r3]
 801c260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c264:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801c268:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	461a      	mov	r2, r3
 801c270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c272:	637b      	str	r3, [r7, #52]	; 0x34
 801c274:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c27a:	e841 2300 	strex	r3, r2, [r1]
 801c27e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c282:	2b00      	cmp	r3, #0
 801c284:	d1e6      	bne.n	801c254 <UART_Start_Receive_IT+0x110>
 801c286:	e018      	b.n	801c2ba <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c28e:	697b      	ldr	r3, [r7, #20]
 801c290:	e853 3f00 	ldrex	r3, [r3]
 801c294:	613b      	str	r3, [r7, #16]
   return(result);
 801c296:	693b      	ldr	r3, [r7, #16]
 801c298:	f043 0320 	orr.w	r3, r3, #32
 801c29c:	653b      	str	r3, [r7, #80]	; 0x50
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	461a      	mov	r2, r3
 801c2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2a6:	623b      	str	r3, [r7, #32]
 801c2a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2aa:	69f9      	ldr	r1, [r7, #28]
 801c2ac:	6a3a      	ldr	r2, [r7, #32]
 801c2ae:	e841 2300 	strex	r3, r2, [r1]
 801c2b2:	61bb      	str	r3, [r7, #24]
   return(result);
 801c2b4:	69bb      	ldr	r3, [r7, #24]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d1e6      	bne.n	801c288 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801c2ba:	2300      	movs	r3, #0
}
 801c2bc:	4618      	mov	r0, r3
 801c2be:	375c      	adds	r7, #92	; 0x5c
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2c6:	4770      	bx	lr
 801c2c8:	0801c58f 	.word	0x0801c58f
 801c2cc:	0801c421 	.word	0x0801c421

0801c2d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c2d0:	b480      	push	{r7}
 801c2d2:	b095      	sub	sp, #84	; 0x54
 801c2d4:	af00      	add	r7, sp, #0
 801c2d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	681b      	ldr	r3, [r3, #0]
 801c2dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2e0:	e853 3f00 	ldrex	r3, [r3]
 801c2e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c2ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	461a      	mov	r2, r3
 801c2f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2f6:	643b      	str	r3, [r7, #64]	; 0x40
 801c2f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c2fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c2fe:	e841 2300 	strex	r3, r2, [r1]
 801c302:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c306:	2b00      	cmp	r3, #0
 801c308:	d1e6      	bne.n	801c2d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	3308      	adds	r3, #8
 801c310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c312:	6a3b      	ldr	r3, [r7, #32]
 801c314:	e853 3f00 	ldrex	r3, [r3]
 801c318:	61fb      	str	r3, [r7, #28]
   return(result);
 801c31a:	69fb      	ldr	r3, [r7, #28]
 801c31c:	f023 0301 	bic.w	r3, r3, #1
 801c320:	64bb      	str	r3, [r7, #72]	; 0x48
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	3308      	adds	r3, #8
 801c328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c32a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c32c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c32e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c332:	e841 2300 	strex	r3, r2, [r1]
 801c336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d1e5      	bne.n	801c30a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c342:	2b01      	cmp	r3, #1
 801c344:	d118      	bne.n	801c378 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	e853 3f00 	ldrex	r3, [r3]
 801c352:	60bb      	str	r3, [r7, #8]
   return(result);
 801c354:	68bb      	ldr	r3, [r7, #8]
 801c356:	f023 0310 	bic.w	r3, r3, #16
 801c35a:	647b      	str	r3, [r7, #68]	; 0x44
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	461a      	mov	r2, r3
 801c362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c364:	61bb      	str	r3, [r7, #24]
 801c366:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c368:	6979      	ldr	r1, [r7, #20]
 801c36a:	69ba      	ldr	r2, [r7, #24]
 801c36c:	e841 2300 	strex	r3, r2, [r1]
 801c370:	613b      	str	r3, [r7, #16]
   return(result);
 801c372:	693b      	ldr	r3, [r7, #16]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d1e6      	bne.n	801c346 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	2220      	movs	r2, #32
 801c37c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	2200      	movs	r2, #0
 801c384:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	2200      	movs	r2, #0
 801c38a:	669a      	str	r2, [r3, #104]	; 0x68
}
 801c38c:	bf00      	nop
 801c38e:	3754      	adds	r7, #84	; 0x54
 801c390:	46bd      	mov	sp, r7
 801c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c396:	4770      	bx	lr

0801c398 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c398:	b580      	push	{r7, lr}
 801c39a:	b084      	sub	sp, #16
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	2200      	movs	r2, #0
 801c3aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	2200      	movs	r2, #0
 801c3b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c3bc:	68f8      	ldr	r0, [r7, #12]
 801c3be:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c3c0:	bf00      	nop
 801c3c2:	3710      	adds	r7, #16
 801c3c4:	46bd      	mov	sp, r7
 801c3c6:	bd80      	pop	{r7, pc}

0801c3c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	b088      	sub	sp, #32
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	e853 3f00 	ldrex	r3, [r3]
 801c3dc:	60bb      	str	r3, [r7, #8]
   return(result);
 801c3de:	68bb      	ldr	r3, [r7, #8]
 801c3e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c3e4:	61fb      	str	r3, [r7, #28]
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	461a      	mov	r2, r3
 801c3ec:	69fb      	ldr	r3, [r7, #28]
 801c3ee:	61bb      	str	r3, [r7, #24]
 801c3f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3f2:	6979      	ldr	r1, [r7, #20]
 801c3f4:	69ba      	ldr	r2, [r7, #24]
 801c3f6:	e841 2300 	strex	r3, r2, [r1]
 801c3fa:	613b      	str	r3, [r7, #16]
   return(result);
 801c3fc:	693b      	ldr	r3, [r7, #16]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d1e6      	bne.n	801c3d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	2220      	movs	r2, #32
 801c406:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	2200      	movs	r2, #0
 801c40c:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c414:	6878      	ldr	r0, [r7, #4]
 801c416:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c418:	bf00      	nop
 801c41a:	3720      	adds	r7, #32
 801c41c:	46bd      	mov	sp, r7
 801c41e:	bd80      	pop	{r7, pc}

0801c420 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c420:	b580      	push	{r7, lr}
 801c422:	b096      	sub	sp, #88	; 0x58
 801c424:	af00      	add	r7, sp, #0
 801c426:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c42e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c438:	2b22      	cmp	r3, #34	; 0x22
 801c43a:	f040 809c 	bne.w	801c576 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c444:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c448:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801c44c:	b2d9      	uxtb	r1, r3
 801c44e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c452:	b2da      	uxtb	r2, r3
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c458:	400a      	ands	r2, r1
 801c45a:	b2d2      	uxtb	r2, r2
 801c45c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c462:	1c5a      	adds	r2, r3, #1
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c46e:	b29b      	uxth	r3, r3
 801c470:	3b01      	subs	r3, #1
 801c472:	b29a      	uxth	r2, r3
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c480:	b29b      	uxth	r3, r3
 801c482:	2b00      	cmp	r3, #0
 801c484:	d17f      	bne.n	801c586 <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c48e:	e853 3f00 	ldrex	r3, [r3]
 801c492:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c49a:	653b      	str	r3, [r7, #80]	; 0x50
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	461a      	mov	r2, r3
 801c4a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4a4:	647b      	str	r3, [r7, #68]	; 0x44
 801c4a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c4aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c4ac:	e841 2300 	strex	r3, r2, [r1]
 801c4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d1e6      	bne.n	801c486 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	3308      	adds	r3, #8
 801c4be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4c2:	e853 3f00 	ldrex	r3, [r3]
 801c4c6:	623b      	str	r3, [r7, #32]
   return(result);
 801c4c8:	6a3b      	ldr	r3, [r7, #32]
 801c4ca:	f023 0301 	bic.w	r3, r3, #1
 801c4ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	3308      	adds	r3, #8
 801c4d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c4d8:	633a      	str	r2, [r7, #48]	; 0x30
 801c4da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c4de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c4e0:	e841 2300 	strex	r3, r2, [r1]
 801c4e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d1e5      	bne.n	801c4b8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	2220      	movs	r2, #32
 801c4f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	2200      	movs	r2, #0
 801c4fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c504:	2b01      	cmp	r3, #1
 801c506:	d130      	bne.n	801c56a <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	2200      	movs	r2, #0
 801c50c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c514:	693b      	ldr	r3, [r7, #16]
 801c516:	e853 3f00 	ldrex	r3, [r3]
 801c51a:	60fb      	str	r3, [r7, #12]
   return(result);
 801c51c:	68fb      	ldr	r3, [r7, #12]
 801c51e:	f023 0310 	bic.w	r3, r3, #16
 801c522:	64bb      	str	r3, [r7, #72]	; 0x48
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	461a      	mov	r2, r3
 801c52a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c52c:	61fb      	str	r3, [r7, #28]
 801c52e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c530:	69b9      	ldr	r1, [r7, #24]
 801c532:	69fa      	ldr	r2, [r7, #28]
 801c534:	e841 2300 	strex	r3, r2, [r1]
 801c538:	617b      	str	r3, [r7, #20]
   return(result);
 801c53a:	697b      	ldr	r3, [r7, #20]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d1e6      	bne.n	801c50e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	69db      	ldr	r3, [r3, #28]
 801c546:	f003 0310 	and.w	r3, r3, #16
 801c54a:	2b10      	cmp	r3, #16
 801c54c:	d103      	bne.n	801c556 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	2210      	movs	r2, #16
 801c554:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c55c:	687a      	ldr	r2, [r7, #4]
 801c55e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c562:	4611      	mov	r1, r2
 801c564:	6878      	ldr	r0, [r7, #4]
 801c566:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c568:	e00d      	b.n	801c586 <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c570:	6878      	ldr	r0, [r7, #4]
 801c572:	4798      	blx	r3
}
 801c574:	e007      	b.n	801c586 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	699a      	ldr	r2, [r3, #24]
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	f042 0208 	orr.w	r2, r2, #8
 801c584:	619a      	str	r2, [r3, #24]
}
 801c586:	bf00      	nop
 801c588:	3758      	adds	r7, #88	; 0x58
 801c58a:	46bd      	mov	sp, r7
 801c58c:	bd80      	pop	{r7, pc}

0801c58e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c58e:	b580      	push	{r7, lr}
 801c590:	b096      	sub	sp, #88	; 0x58
 801c592:	af00      	add	r7, sp, #0
 801c594:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c59c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c5a6:	2b22      	cmp	r3, #34	; 0x22
 801c5a8:	f040 809c 	bne.w	801c6e4 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c5ba:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801c5bc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801c5c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c5c4:	4013      	ands	r3, r2
 801c5c6:	b29a      	uxth	r2, r3
 801c5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c5ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c5d0:	1c9a      	adds	r2, r3, #2
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c5dc:	b29b      	uxth	r3, r3
 801c5de:	3b01      	subs	r3, #1
 801c5e0:	b29a      	uxth	r2, r3
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c5ee:	b29b      	uxth	r3, r3
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d17f      	bne.n	801c6f4 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	681b      	ldr	r3, [r3, #0]
 801c5f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5fc:	e853 3f00 	ldrex	r3, [r3]
 801c600:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c608:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	461a      	mov	r2, r3
 801c610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c612:	643b      	str	r3, [r7, #64]	; 0x40
 801c614:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c616:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c61a:	e841 2300 	strex	r3, r2, [r1]
 801c61e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c622:	2b00      	cmp	r3, #0
 801c624:	d1e6      	bne.n	801c5f4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	3308      	adds	r3, #8
 801c62c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c62e:	6a3b      	ldr	r3, [r7, #32]
 801c630:	e853 3f00 	ldrex	r3, [r3]
 801c634:	61fb      	str	r3, [r7, #28]
   return(result);
 801c636:	69fb      	ldr	r3, [r7, #28]
 801c638:	f023 0301 	bic.w	r3, r3, #1
 801c63c:	64bb      	str	r3, [r7, #72]	; 0x48
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	3308      	adds	r3, #8
 801c644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c646:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c64a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c64e:	e841 2300 	strex	r3, r2, [r1]
 801c652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c656:	2b00      	cmp	r3, #0
 801c658:	d1e5      	bne.n	801c626 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	2220      	movs	r2, #32
 801c65e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	2200      	movs	r2, #0
 801c666:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	2200      	movs	r2, #0
 801c66c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c672:	2b01      	cmp	r3, #1
 801c674:	d130      	bne.n	801c6d8 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	2200      	movs	r2, #0
 801c67a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	e853 3f00 	ldrex	r3, [r3]
 801c688:	60bb      	str	r3, [r7, #8]
   return(result);
 801c68a:	68bb      	ldr	r3, [r7, #8]
 801c68c:	f023 0310 	bic.w	r3, r3, #16
 801c690:	647b      	str	r3, [r7, #68]	; 0x44
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	461a      	mov	r2, r3
 801c698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c69a:	61bb      	str	r3, [r7, #24]
 801c69c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c69e:	6979      	ldr	r1, [r7, #20]
 801c6a0:	69ba      	ldr	r2, [r7, #24]
 801c6a2:	e841 2300 	strex	r3, r2, [r1]
 801c6a6:	613b      	str	r3, [r7, #16]
   return(result);
 801c6a8:	693b      	ldr	r3, [r7, #16]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d1e6      	bne.n	801c67c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	69db      	ldr	r3, [r3, #28]
 801c6b4:	f003 0310 	and.w	r3, r3, #16
 801c6b8:	2b10      	cmp	r3, #16
 801c6ba:	d103      	bne.n	801c6c4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	2210      	movs	r2, #16
 801c6c2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c6ca:	687a      	ldr	r2, [r7, #4]
 801c6cc:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c6d0:	4611      	mov	r1, r2
 801c6d2:	6878      	ldr	r0, [r7, #4]
 801c6d4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c6d6:	e00d      	b.n	801c6f4 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c6de:	6878      	ldr	r0, [r7, #4]
 801c6e0:	4798      	blx	r3
}
 801c6e2:	e007      	b.n	801c6f4 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	699a      	ldr	r2, [r3, #24]
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	f042 0208 	orr.w	r2, r2, #8
 801c6f2:	619a      	str	r2, [r3, #24]
}
 801c6f4:	bf00      	nop
 801c6f6:	3758      	adds	r7, #88	; 0x58
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	bd80      	pop	{r7, pc}

0801c6fc <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	b08c      	sub	sp, #48	; 0x30
 801c700:	af00      	add	r7, sp, #0
 801c702:	60f8      	str	r0, [r7, #12]
 801c704:	60b9      	str	r1, [r7, #8]
 801c706:	4613      	mov	r3, r2
 801c708:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c710:	2b20      	cmp	r3, #32
 801c712:	d142      	bne.n	801c79a <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801c714:	68bb      	ldr	r3, [r7, #8]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d002      	beq.n	801c720 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801c71a:	88fb      	ldrh	r3, [r7, #6]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d101      	bne.n	801c724 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801c720:	2301      	movs	r3, #1
 801c722:	e03b      	b.n	801c79c <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	2201      	movs	r2, #1
 801c728:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	2200      	movs	r2, #0
 801c72e:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801c730:	88fb      	ldrh	r3, [r7, #6]
 801c732:	461a      	mov	r2, r3
 801c734:	68b9      	ldr	r1, [r7, #8]
 801c736:	68f8      	ldr	r0, [r7, #12]
 801c738:	f7ff fd04 	bl	801c144 <UART_Start_Receive_IT>
 801c73c:	4603      	mov	r3, r0
 801c73e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801c742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c746:	2b00      	cmp	r3, #0
 801c748:	d124      	bne.n	801c794 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c74e:	2b01      	cmp	r3, #1
 801c750:	d11d      	bne.n	801c78e <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	2210      	movs	r2, #16
 801c758:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c760:	69bb      	ldr	r3, [r7, #24]
 801c762:	e853 3f00 	ldrex	r3, [r3]
 801c766:	617b      	str	r3, [r7, #20]
   return(result);
 801c768:	697b      	ldr	r3, [r7, #20]
 801c76a:	f043 0310 	orr.w	r3, r3, #16
 801c76e:	62bb      	str	r3, [r7, #40]	; 0x28
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	461a      	mov	r2, r3
 801c776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c778:	627b      	str	r3, [r7, #36]	; 0x24
 801c77a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c77c:	6a39      	ldr	r1, [r7, #32]
 801c77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c780:	e841 2300 	strex	r3, r2, [r1]
 801c784:	61fb      	str	r3, [r7, #28]
   return(result);
 801c786:	69fb      	ldr	r3, [r7, #28]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d1e6      	bne.n	801c75a <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801c78c:	e002      	b.n	801c794 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801c78e:	2301      	movs	r3, #1
 801c790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801c794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c798:	e000      	b.n	801c79c <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801c79a:	2302      	movs	r3, #2
  }
}
 801c79c:	4618      	mov	r0, r3
 801c79e:	3730      	adds	r7, #48	; 0x30
 801c7a0:	46bd      	mov	sp, r7
 801c7a2:	bd80      	pop	{r7, pc}

0801c7a4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801c7a4:	b580      	push	{r7, lr}
 801c7a6:	b084      	sub	sp, #16
 801c7a8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801c7aa:	4b2f      	ldr	r3, [pc, #188]	; (801c868 <MX_LWIP_Init+0xc4>)
 801c7ac:	22c0      	movs	r2, #192	; 0xc0
 801c7ae:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801c7b0:	4b2d      	ldr	r3, [pc, #180]	; (801c868 <MX_LWIP_Init+0xc4>)
 801c7b2:	22a8      	movs	r2, #168	; 0xa8
 801c7b4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801c7b6:	4b2c      	ldr	r3, [pc, #176]	; (801c868 <MX_LWIP_Init+0xc4>)
 801c7b8:	220c      	movs	r2, #12
 801c7ba:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801c7bc:	4b2a      	ldr	r3, [pc, #168]	; (801c868 <MX_LWIP_Init+0xc4>)
 801c7be:	2264      	movs	r2, #100	; 0x64
 801c7c0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801c7c2:	4b2a      	ldr	r3, [pc, #168]	; (801c86c <MX_LWIP_Init+0xc8>)
 801c7c4:	22ff      	movs	r2, #255	; 0xff
 801c7c6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801c7c8:	4b28      	ldr	r3, [pc, #160]	; (801c86c <MX_LWIP_Init+0xc8>)
 801c7ca:	22ff      	movs	r2, #255	; 0xff
 801c7cc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801c7ce:	4b27      	ldr	r3, [pc, #156]	; (801c86c <MX_LWIP_Init+0xc8>)
 801c7d0:	22ff      	movs	r2, #255	; 0xff
 801c7d2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801c7d4:	4b25      	ldr	r3, [pc, #148]	; (801c86c <MX_LWIP_Init+0xc8>)
 801c7d6:	2200      	movs	r2, #0
 801c7d8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801c7da:	4b25      	ldr	r3, [pc, #148]	; (801c870 <MX_LWIP_Init+0xcc>)
 801c7dc:	22c0      	movs	r2, #192	; 0xc0
 801c7de:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801c7e0:	4b23      	ldr	r3, [pc, #140]	; (801c870 <MX_LWIP_Init+0xcc>)
 801c7e2:	22a8      	movs	r2, #168	; 0xa8
 801c7e4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801c7e6:	4b22      	ldr	r3, [pc, #136]	; (801c870 <MX_LWIP_Init+0xcc>)
 801c7e8:	220c      	movs	r2, #12
 801c7ea:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801c7ec:	4b20      	ldr	r3, [pc, #128]	; (801c870 <MX_LWIP_Init+0xcc>)
 801c7ee:	2201      	movs	r2, #1
 801c7f0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801c7f2:	4b20      	ldr	r3, [pc, #128]	; (801c874 <MX_LWIP_Init+0xd0>)
 801c7f4:	781b      	ldrb	r3, [r3, #0]
 801c7f6:	2b01      	cmp	r3, #1
 801c7f8:	d002      	beq.n	801c800 <MX_LWIP_Init+0x5c>
 801c7fa:	2b02      	cmp	r3, #2
 801c7fc:	d03c      	beq.n	801c878 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801c7fe:	e162      	b.n	801cac6 <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801c800:	4b1c      	ldr	r3, [pc, #112]	; (801c874 <MX_LWIP_Init+0xd0>)
 801c802:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 801c806:	4b18      	ldr	r3, [pc, #96]	; (801c868 <MX_LWIP_Init+0xc4>)
 801c808:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801c80a:	4b1a      	ldr	r3, [pc, #104]	; (801c874 <MX_LWIP_Init+0xd0>)
 801c80c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 801c810:	4b15      	ldr	r3, [pc, #84]	; (801c868 <MX_LWIP_Init+0xc4>)
 801c812:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801c814:	4b17      	ldr	r3, [pc, #92]	; (801c874 <MX_LWIP_Init+0xd0>)
 801c816:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 801c81a:	4b13      	ldr	r3, [pc, #76]	; (801c868 <MX_LWIP_Init+0xc4>)
 801c81c:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801c81e:	4b15      	ldr	r3, [pc, #84]	; (801c874 <MX_LWIP_Init+0xd0>)
 801c820:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 801c824:	4b10      	ldr	r3, [pc, #64]	; (801c868 <MX_LWIP_Init+0xc4>)
 801c826:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801c828:	4b10      	ldr	r3, [pc, #64]	; (801c86c <MX_LWIP_Init+0xc8>)
 801c82a:	22ff      	movs	r2, #255	; 0xff
 801c82c:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801c82e:	4b0f      	ldr	r3, [pc, #60]	; (801c86c <MX_LWIP_Init+0xc8>)
 801c830:	22ff      	movs	r2, #255	; 0xff
 801c832:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801c834:	4b0d      	ldr	r3, [pc, #52]	; (801c86c <MX_LWIP_Init+0xc8>)
 801c836:	22ff      	movs	r2, #255	; 0xff
 801c838:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801c83a:	4b0c      	ldr	r3, [pc, #48]	; (801c86c <MX_LWIP_Init+0xc8>)
 801c83c:	2200      	movs	r2, #0
 801c83e:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801c840:	4b0c      	ldr	r3, [pc, #48]	; (801c874 <MX_LWIP_Init+0xd0>)
 801c842:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 801c846:	4b0a      	ldr	r3, [pc, #40]	; (801c870 <MX_LWIP_Init+0xcc>)
 801c848:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801c84a:	4b0a      	ldr	r3, [pc, #40]	; (801c874 <MX_LWIP_Init+0xd0>)
 801c84c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 801c850:	4b07      	ldr	r3, [pc, #28]	; (801c870 <MX_LWIP_Init+0xcc>)
 801c852:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801c854:	4b07      	ldr	r3, [pc, #28]	; (801c874 <MX_LWIP_Init+0xd0>)
 801c856:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 801c85a:	4b05      	ldr	r3, [pc, #20]	; (801c870 <MX_LWIP_Init+0xcc>)
 801c85c:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801c85e:	4b04      	ldr	r3, [pc, #16]	; (801c870 <MX_LWIP_Init+0xcc>)
 801c860:	2201      	movs	r2, #1
 801c862:	70da      	strb	r2, [r3, #3]
		break;
 801c864:	e03b      	b.n	801c8de <MX_LWIP_Init+0x13a>
 801c866:	bf00      	nop
 801c868:	2000bd50 	.word	0x2000bd50
 801c86c:	2000bd54 	.word	0x2000bd54
 801c870:	2000bd58 	.word	0x2000bd58
 801c874:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801c878:	4b94      	ldr	r3, [pc, #592]	; (801cacc <MX_LWIP_Init+0x328>)
 801c87a:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 801c87e:	4b94      	ldr	r3, [pc, #592]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c880:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801c882:	4b92      	ldr	r3, [pc, #584]	; (801cacc <MX_LWIP_Init+0x328>)
 801c884:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 801c888:	4b91      	ldr	r3, [pc, #580]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c88a:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801c88c:	4b8f      	ldr	r3, [pc, #572]	; (801cacc <MX_LWIP_Init+0x328>)
 801c88e:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 801c892:	4b8f      	ldr	r3, [pc, #572]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c894:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801c896:	4b8d      	ldr	r3, [pc, #564]	; (801cacc <MX_LWIP_Init+0x328>)
 801c898:	f893 22ac 	ldrb.w	r2, [r3, #684]	; 0x2ac
 801c89c:	4b8c      	ldr	r3, [pc, #560]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c89e:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801c8a0:	4b8c      	ldr	r3, [pc, #560]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c8a2:	22ff      	movs	r2, #255	; 0xff
 801c8a4:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801c8a6:	4b8b      	ldr	r3, [pc, #556]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c8a8:	22ff      	movs	r2, #255	; 0xff
 801c8aa:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801c8ac:	4b89      	ldr	r3, [pc, #548]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c8ae:	22ff      	movs	r2, #255	; 0xff
 801c8b0:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801c8b2:	4b88      	ldr	r3, [pc, #544]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c8b4:	2200      	movs	r2, #0
 801c8b6:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801c8b8:	4b84      	ldr	r3, [pc, #528]	; (801cacc <MX_LWIP_Init+0x328>)
 801c8ba:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 801c8be:	4b86      	ldr	r3, [pc, #536]	; (801cad8 <MX_LWIP_Init+0x334>)
 801c8c0:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801c8c2:	4b82      	ldr	r3, [pc, #520]	; (801cacc <MX_LWIP_Init+0x328>)
 801c8c4:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 801c8c8:	4b83      	ldr	r3, [pc, #524]	; (801cad8 <MX_LWIP_Init+0x334>)
 801c8ca:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801c8cc:	4b7f      	ldr	r3, [pc, #508]	; (801cacc <MX_LWIP_Init+0x328>)
 801c8ce:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 801c8d2:	4b81      	ldr	r3, [pc, #516]	; (801cad8 <MX_LWIP_Init+0x334>)
 801c8d4:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801c8d6:	4b80      	ldr	r3, [pc, #512]	; (801cad8 <MX_LWIP_Init+0x334>)
 801c8d8:	2201      	movs	r2, #1
 801c8da:	70da      	strb	r2, [r3, #3]
		break;
 801c8dc:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801c8de:	f000 fd42 	bl	801d366 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801c8e2:	4b7b      	ldr	r3, [pc, #492]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c8e4:	781b      	ldrb	r3, [r3, #0]
 801c8e6:	061a      	lsls	r2, r3, #24
 801c8e8:	4b79      	ldr	r3, [pc, #484]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c8ea:	785b      	ldrb	r3, [r3, #1]
 801c8ec:	041b      	lsls	r3, r3, #16
 801c8ee:	431a      	orrs	r2, r3
 801c8f0:	4b77      	ldr	r3, [pc, #476]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c8f2:	789b      	ldrb	r3, [r3, #2]
 801c8f4:	021b      	lsls	r3, r3, #8
 801c8f6:	4313      	orrs	r3, r2
 801c8f8:	4a75      	ldr	r2, [pc, #468]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c8fa:	78d2      	ldrb	r2, [r2, #3]
 801c8fc:	4313      	orrs	r3, r2
 801c8fe:	061a      	lsls	r2, r3, #24
 801c900:	4b73      	ldr	r3, [pc, #460]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c902:	781b      	ldrb	r3, [r3, #0]
 801c904:	0619      	lsls	r1, r3, #24
 801c906:	4b72      	ldr	r3, [pc, #456]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c908:	785b      	ldrb	r3, [r3, #1]
 801c90a:	041b      	lsls	r3, r3, #16
 801c90c:	4319      	orrs	r1, r3
 801c90e:	4b70      	ldr	r3, [pc, #448]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c910:	789b      	ldrb	r3, [r3, #2]
 801c912:	021b      	lsls	r3, r3, #8
 801c914:	430b      	orrs	r3, r1
 801c916:	496e      	ldr	r1, [pc, #440]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c918:	78c9      	ldrb	r1, [r1, #3]
 801c91a:	430b      	orrs	r3, r1
 801c91c:	021b      	lsls	r3, r3, #8
 801c91e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c922:	431a      	orrs	r2, r3
 801c924:	4b6a      	ldr	r3, [pc, #424]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c926:	781b      	ldrb	r3, [r3, #0]
 801c928:	0619      	lsls	r1, r3, #24
 801c92a:	4b69      	ldr	r3, [pc, #420]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c92c:	785b      	ldrb	r3, [r3, #1]
 801c92e:	041b      	lsls	r3, r3, #16
 801c930:	4319      	orrs	r1, r3
 801c932:	4b67      	ldr	r3, [pc, #412]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c934:	789b      	ldrb	r3, [r3, #2]
 801c936:	021b      	lsls	r3, r3, #8
 801c938:	430b      	orrs	r3, r1
 801c93a:	4965      	ldr	r1, [pc, #404]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c93c:	78c9      	ldrb	r1, [r1, #3]
 801c93e:	430b      	orrs	r3, r1
 801c940:	0a1b      	lsrs	r3, r3, #8
 801c942:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c946:	431a      	orrs	r2, r3
 801c948:	4b61      	ldr	r3, [pc, #388]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c94a:	781b      	ldrb	r3, [r3, #0]
 801c94c:	0619      	lsls	r1, r3, #24
 801c94e:	4b60      	ldr	r3, [pc, #384]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c950:	785b      	ldrb	r3, [r3, #1]
 801c952:	041b      	lsls	r3, r3, #16
 801c954:	4319      	orrs	r1, r3
 801c956:	4b5e      	ldr	r3, [pc, #376]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c958:	789b      	ldrb	r3, [r3, #2]
 801c95a:	021b      	lsls	r3, r3, #8
 801c95c:	430b      	orrs	r3, r1
 801c95e:	495c      	ldr	r1, [pc, #368]	; (801cad0 <MX_LWIP_Init+0x32c>)
 801c960:	78c9      	ldrb	r1, [r1, #3]
 801c962:	430b      	orrs	r3, r1
 801c964:	0e1b      	lsrs	r3, r3, #24
 801c966:	4313      	orrs	r3, r2
 801c968:	4a5c      	ldr	r2, [pc, #368]	; (801cadc <MX_LWIP_Init+0x338>)
 801c96a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801c96c:	4b59      	ldr	r3, [pc, #356]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c96e:	781b      	ldrb	r3, [r3, #0]
 801c970:	061a      	lsls	r2, r3, #24
 801c972:	4b58      	ldr	r3, [pc, #352]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c974:	785b      	ldrb	r3, [r3, #1]
 801c976:	041b      	lsls	r3, r3, #16
 801c978:	431a      	orrs	r2, r3
 801c97a:	4b56      	ldr	r3, [pc, #344]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c97c:	789b      	ldrb	r3, [r3, #2]
 801c97e:	021b      	lsls	r3, r3, #8
 801c980:	4313      	orrs	r3, r2
 801c982:	4a54      	ldr	r2, [pc, #336]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c984:	78d2      	ldrb	r2, [r2, #3]
 801c986:	4313      	orrs	r3, r2
 801c988:	061a      	lsls	r2, r3, #24
 801c98a:	4b52      	ldr	r3, [pc, #328]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c98c:	781b      	ldrb	r3, [r3, #0]
 801c98e:	0619      	lsls	r1, r3, #24
 801c990:	4b50      	ldr	r3, [pc, #320]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c992:	785b      	ldrb	r3, [r3, #1]
 801c994:	041b      	lsls	r3, r3, #16
 801c996:	4319      	orrs	r1, r3
 801c998:	4b4e      	ldr	r3, [pc, #312]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c99a:	789b      	ldrb	r3, [r3, #2]
 801c99c:	021b      	lsls	r3, r3, #8
 801c99e:	430b      	orrs	r3, r1
 801c9a0:	494c      	ldr	r1, [pc, #304]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c9a2:	78c9      	ldrb	r1, [r1, #3]
 801c9a4:	430b      	orrs	r3, r1
 801c9a6:	021b      	lsls	r3, r3, #8
 801c9a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c9ac:	431a      	orrs	r2, r3
 801c9ae:	4b49      	ldr	r3, [pc, #292]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c9b0:	781b      	ldrb	r3, [r3, #0]
 801c9b2:	0619      	lsls	r1, r3, #24
 801c9b4:	4b47      	ldr	r3, [pc, #284]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c9b6:	785b      	ldrb	r3, [r3, #1]
 801c9b8:	041b      	lsls	r3, r3, #16
 801c9ba:	4319      	orrs	r1, r3
 801c9bc:	4b45      	ldr	r3, [pc, #276]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c9be:	789b      	ldrb	r3, [r3, #2]
 801c9c0:	021b      	lsls	r3, r3, #8
 801c9c2:	430b      	orrs	r3, r1
 801c9c4:	4943      	ldr	r1, [pc, #268]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c9c6:	78c9      	ldrb	r1, [r1, #3]
 801c9c8:	430b      	orrs	r3, r1
 801c9ca:	0a1b      	lsrs	r3, r3, #8
 801c9cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c9d0:	431a      	orrs	r2, r3
 801c9d2:	4b40      	ldr	r3, [pc, #256]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c9d4:	781b      	ldrb	r3, [r3, #0]
 801c9d6:	0619      	lsls	r1, r3, #24
 801c9d8:	4b3e      	ldr	r3, [pc, #248]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c9da:	785b      	ldrb	r3, [r3, #1]
 801c9dc:	041b      	lsls	r3, r3, #16
 801c9de:	4319      	orrs	r1, r3
 801c9e0:	4b3c      	ldr	r3, [pc, #240]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c9e2:	789b      	ldrb	r3, [r3, #2]
 801c9e4:	021b      	lsls	r3, r3, #8
 801c9e6:	430b      	orrs	r3, r1
 801c9e8:	493a      	ldr	r1, [pc, #232]	; (801cad4 <MX_LWIP_Init+0x330>)
 801c9ea:	78c9      	ldrb	r1, [r1, #3]
 801c9ec:	430b      	orrs	r3, r1
 801c9ee:	0e1b      	lsrs	r3, r3, #24
 801c9f0:	4313      	orrs	r3, r2
 801c9f2:	4a3b      	ldr	r2, [pc, #236]	; (801cae0 <MX_LWIP_Init+0x33c>)
 801c9f4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801c9f6:	4b38      	ldr	r3, [pc, #224]	; (801cad8 <MX_LWIP_Init+0x334>)
 801c9f8:	781b      	ldrb	r3, [r3, #0]
 801c9fa:	061a      	lsls	r2, r3, #24
 801c9fc:	4b36      	ldr	r3, [pc, #216]	; (801cad8 <MX_LWIP_Init+0x334>)
 801c9fe:	785b      	ldrb	r3, [r3, #1]
 801ca00:	041b      	lsls	r3, r3, #16
 801ca02:	431a      	orrs	r2, r3
 801ca04:	4b34      	ldr	r3, [pc, #208]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca06:	789b      	ldrb	r3, [r3, #2]
 801ca08:	021b      	lsls	r3, r3, #8
 801ca0a:	4313      	orrs	r3, r2
 801ca0c:	4a32      	ldr	r2, [pc, #200]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca0e:	78d2      	ldrb	r2, [r2, #3]
 801ca10:	4313      	orrs	r3, r2
 801ca12:	061a      	lsls	r2, r3, #24
 801ca14:	4b30      	ldr	r3, [pc, #192]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca16:	781b      	ldrb	r3, [r3, #0]
 801ca18:	0619      	lsls	r1, r3, #24
 801ca1a:	4b2f      	ldr	r3, [pc, #188]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca1c:	785b      	ldrb	r3, [r3, #1]
 801ca1e:	041b      	lsls	r3, r3, #16
 801ca20:	4319      	orrs	r1, r3
 801ca22:	4b2d      	ldr	r3, [pc, #180]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca24:	789b      	ldrb	r3, [r3, #2]
 801ca26:	021b      	lsls	r3, r3, #8
 801ca28:	430b      	orrs	r3, r1
 801ca2a:	492b      	ldr	r1, [pc, #172]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca2c:	78c9      	ldrb	r1, [r1, #3]
 801ca2e:	430b      	orrs	r3, r1
 801ca30:	021b      	lsls	r3, r3, #8
 801ca32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ca36:	431a      	orrs	r2, r3
 801ca38:	4b27      	ldr	r3, [pc, #156]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca3a:	781b      	ldrb	r3, [r3, #0]
 801ca3c:	0619      	lsls	r1, r3, #24
 801ca3e:	4b26      	ldr	r3, [pc, #152]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca40:	785b      	ldrb	r3, [r3, #1]
 801ca42:	041b      	lsls	r3, r3, #16
 801ca44:	4319      	orrs	r1, r3
 801ca46:	4b24      	ldr	r3, [pc, #144]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca48:	789b      	ldrb	r3, [r3, #2]
 801ca4a:	021b      	lsls	r3, r3, #8
 801ca4c:	430b      	orrs	r3, r1
 801ca4e:	4922      	ldr	r1, [pc, #136]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca50:	78c9      	ldrb	r1, [r1, #3]
 801ca52:	430b      	orrs	r3, r1
 801ca54:	0a1b      	lsrs	r3, r3, #8
 801ca56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ca5a:	431a      	orrs	r2, r3
 801ca5c:	4b1e      	ldr	r3, [pc, #120]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca5e:	781b      	ldrb	r3, [r3, #0]
 801ca60:	0619      	lsls	r1, r3, #24
 801ca62:	4b1d      	ldr	r3, [pc, #116]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca64:	785b      	ldrb	r3, [r3, #1]
 801ca66:	041b      	lsls	r3, r3, #16
 801ca68:	4319      	orrs	r1, r3
 801ca6a:	4b1b      	ldr	r3, [pc, #108]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca6c:	789b      	ldrb	r3, [r3, #2]
 801ca6e:	021b      	lsls	r3, r3, #8
 801ca70:	430b      	orrs	r3, r1
 801ca72:	4919      	ldr	r1, [pc, #100]	; (801cad8 <MX_LWIP_Init+0x334>)
 801ca74:	78c9      	ldrb	r1, [r1, #3]
 801ca76:	430b      	orrs	r3, r1
 801ca78:	0e1b      	lsrs	r3, r3, #24
 801ca7a:	4313      	orrs	r3, r2
 801ca7c:	4a19      	ldr	r2, [pc, #100]	; (801cae4 <MX_LWIP_Init+0x340>)
 801ca7e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801ca80:	4b19      	ldr	r3, [pc, #100]	; (801cae8 <MX_LWIP_Init+0x344>)
 801ca82:	9302      	str	r3, [sp, #8]
 801ca84:	4b19      	ldr	r3, [pc, #100]	; (801caec <MX_LWIP_Init+0x348>)
 801ca86:	9301      	str	r3, [sp, #4]
 801ca88:	2300      	movs	r3, #0
 801ca8a:	9300      	str	r3, [sp, #0]
 801ca8c:	4b15      	ldr	r3, [pc, #84]	; (801cae4 <MX_LWIP_Init+0x340>)
 801ca8e:	4a14      	ldr	r2, [pc, #80]	; (801cae0 <MX_LWIP_Init+0x33c>)
 801ca90:	4912      	ldr	r1, [pc, #72]	; (801cadc <MX_LWIP_Init+0x338>)
 801ca92:	4817      	ldr	r0, [pc, #92]	; (801caf0 <MX_LWIP_Init+0x34c>)
 801ca94:	f001 f998 	bl	801ddc8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801ca98:	4815      	ldr	r0, [pc, #84]	; (801caf0 <MX_LWIP_Init+0x34c>)
 801ca9a:	f001 fb49 	bl	801e130 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801ca9e:	4b14      	ldr	r3, [pc, #80]	; (801caf0 <MX_LWIP_Init+0x34c>)
 801caa0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801caa4:	089b      	lsrs	r3, r3, #2
 801caa6:	f003 0301 	and.w	r3, r3, #1
 801caaa:	b2db      	uxtb	r3, r3
 801caac:	2b00      	cmp	r3, #0
 801caae:	d003      	beq.n	801cab8 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801cab0:	480f      	ldr	r0, [pc, #60]	; (801caf0 <MX_LWIP_Init+0x34c>)
 801cab2:	f001 fb4d 	bl	801e150 <netif_set_up>
 801cab6:	e002      	b.n	801cabe <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801cab8:	480d      	ldr	r0, [pc, #52]	; (801caf0 <MX_LWIP_Init+0x34c>)
 801caba:	f001 fbb5 	bl	801e228 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801cabe:	490d      	ldr	r1, [pc, #52]	; (801caf4 <MX_LWIP_Init+0x350>)
 801cac0:	480b      	ldr	r0, [pc, #44]	; (801caf0 <MX_LWIP_Init+0x34c>)
 801cac2:	f001 fc47 	bl	801e354 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801cac6:	46bd      	mov	sp, r7
 801cac8:	bd80      	pop	{r7, pc}
 801caca:	bf00      	nop
 801cacc:	20000304 	.word	0x20000304
 801cad0:	2000bd50 	.word	0x2000bd50
 801cad4:	2000bd54 	.word	0x2000bd54
 801cad8:	2000bd58 	.word	0x2000bd58
 801cadc:	2000bd44 	.word	0x2000bd44
 801cae0:	2000bd48 	.word	0x2000bd48
 801cae4:	2000bd4c 	.word	0x2000bd4c
 801cae8:	08022111 	.word	0x08022111
 801caec:	0801ce85 	.word	0x0801ce85
 801caf0:	2000bd04 	.word	0x2000bd04
 801caf4:	0801cb49 	.word	0x0801cb49

0801caf8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801caf8:	b580      	push	{r7, lr}
 801cafa:	b082      	sub	sp, #8
 801cafc:	af00      	add	r7, sp, #0
 801cafe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801cb00:	f7f8 fd26 	bl	8015550 <HAL_GetTick>
 801cb04:	4602      	mov	r2, r0
 801cb06:	4b08      	ldr	r3, [pc, #32]	; (801cb28 <Ethernet_Link_Periodic_Handle+0x30>)
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	1ad3      	subs	r3, r2, r3
 801cb0c:	2b63      	cmp	r3, #99	; 0x63
 801cb0e:	d907      	bls.n	801cb20 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801cb10:	f7f8 fd1e 	bl	8015550 <HAL_GetTick>
 801cb14:	4603      	mov	r3, r0
 801cb16:	4a04      	ldr	r2, [pc, #16]	; (801cb28 <Ethernet_Link_Periodic_Handle+0x30>)
 801cb18:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 801cb1a:	6878      	ldr	r0, [r7, #4]
 801cb1c:	f000 fb10 	bl	801d140 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801cb20:	bf00      	nop
 801cb22:	3708      	adds	r7, #8
 801cb24:	46bd      	mov	sp, r7
 801cb26:	bd80      	pop	{r7, pc}
 801cb28:	2000bd00 	.word	0x2000bd00

0801cb2c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801cb30:	4804      	ldr	r0, [pc, #16]	; (801cb44 <MX_LWIP_Process+0x18>)
 801cb32:	f000 f987 	bl	801ce44 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 801cb36:	f002 fb83 	bl	801f240 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 801cb3a:	4802      	ldr	r0, [pc, #8]	; (801cb44 <MX_LWIP_Process+0x18>)
 801cb3c:	f7ff ffdc 	bl	801caf8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801cb40:	bf00      	nop
 801cb42:	bd80      	pop	{r7, pc}
 801cb44:	2000bd04 	.word	0x2000bd04

0801cb48 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801cb48:	b480      	push	{r7}
 801cb4a:	b083      	sub	sp, #12
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801cb50:	bf00      	nop
 801cb52:	370c      	adds	r7, #12
 801cb54:	46bd      	mov	sp, r7
 801cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb5a:	4770      	bx	lr

0801cb5c <SCB_InvalidateDCache_by_Addr>:
{
 801cb5c:	b480      	push	{r7}
 801cb5e:	b087      	sub	sp, #28
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	6078      	str	r0, [r7, #4]
 801cb64:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801cb66:	683b      	ldr	r3, [r7, #0]
 801cb68:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801cb6e:	2320      	movs	r3, #32
 801cb70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801cb72:	f3bf 8f4f 	dsb	sy
}
 801cb76:	bf00      	nop
    while (op_size > 0) {
 801cb78:	e00b      	b.n	801cb92 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801cb7a:	4a0d      	ldr	r2, [pc, #52]	; (801cbb0 <SCB_InvalidateDCache_by_Addr+0x54>)
 801cb7c:	693b      	ldr	r3, [r7, #16]
 801cb7e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	693a      	ldr	r2, [r7, #16]
 801cb86:	4413      	add	r3, r2
 801cb88:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801cb8a:	697a      	ldr	r2, [r7, #20]
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	1ad3      	subs	r3, r2, r3
 801cb90:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801cb92:	697b      	ldr	r3, [r7, #20]
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	dcf0      	bgt.n	801cb7a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801cb98:	f3bf 8f4f 	dsb	sy
}
 801cb9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801cb9e:	f3bf 8f6f 	isb	sy
}
 801cba2:	bf00      	nop
}
 801cba4:	bf00      	nop
 801cba6:	371c      	adds	r7, #28
 801cba8:	46bd      	mov	sp, r7
 801cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbae:	4770      	bx	lr
 801cbb0:	e000ed00 	.word	0xe000ed00

0801cbb4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801cbb4:	b580      	push	{r7, lr}
 801cbb6:	b084      	sub	sp, #16
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801cbc0:	4b47      	ldr	r3, [pc, #284]	; (801cce0 <low_level_init+0x12c>)
 801cbc2:	4a48      	ldr	r2, [pc, #288]	; (801cce4 <low_level_init+0x130>)
 801cbc4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801cbc6:	2300      	movs	r3, #0
 801cbc8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801cbca:	2380      	movs	r3, #128	; 0x80
 801cbcc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801cbce:	23e1      	movs	r3, #225	; 0xe1
 801cbd0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801cbda:	2300      	movs	r3, #0
 801cbdc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801cbde:	4a40      	ldr	r2, [pc, #256]	; (801cce0 <low_level_init+0x12c>)
 801cbe0:	f107 0308 	add.w	r3, r7, #8
 801cbe4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801cbe6:	4b3e      	ldr	r3, [pc, #248]	; (801cce0 <low_level_init+0x12c>)
 801cbe8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801cbec:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801cbee:	4b3c      	ldr	r3, [pc, #240]	; (801cce0 <low_level_init+0x12c>)
 801cbf0:	4a3d      	ldr	r2, [pc, #244]	; (801cce8 <low_level_init+0x134>)
 801cbf2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801cbf4:	4b3a      	ldr	r3, [pc, #232]	; (801cce0 <low_level_init+0x12c>)
 801cbf6:	4a3d      	ldr	r2, [pc, #244]	; (801ccec <low_level_init+0x138>)
 801cbf8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801cbfa:	4b39      	ldr	r3, [pc, #228]	; (801cce0 <low_level_init+0x12c>)
 801cbfc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801cc00:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 801cc02:	4b3b      	ldr	r3, [pc, #236]	; (801ccf0 <low_level_init+0x13c>)
 801cc04:	781b      	ldrb	r3, [r3, #0]
 801cc06:	2b01      	cmp	r3, #1
 801cc08:	d002      	beq.n	801cc10 <low_level_init+0x5c>
 801cc0a:	2b02      	cmp	r3, #2
 801cc0c:	d004      	beq.n	801cc18 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 801cc0e:	e063      	b.n	801ccd8 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 801cc10:	4b33      	ldr	r3, [pc, #204]	; (801cce0 <low_level_init+0x12c>)
 801cc12:	4a38      	ldr	r2, [pc, #224]	; (801ccf4 <low_level_init+0x140>)
 801cc14:	605a      	str	r2, [r3, #4]
		break;
 801cc16:	e003      	b.n	801cc20 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 801cc18:	4b31      	ldr	r3, [pc, #196]	; (801cce0 <low_level_init+0x12c>)
 801cc1a:	4a37      	ldr	r2, [pc, #220]	; (801ccf8 <low_level_init+0x144>)
 801cc1c:	605a      	str	r2, [r3, #4]
		break;
 801cc1e:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801cc20:	482f      	ldr	r0, [pc, #188]	; (801cce0 <low_level_init+0x12c>)
 801cc22:	f7f9 fdbb 	bl	801679c <HAL_ETH_Init>
 801cc26:	4603      	mov	r3, r0
 801cc28:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801cc2a:	2238      	movs	r2, #56	; 0x38
 801cc2c:	2100      	movs	r1, #0
 801cc2e:	4833      	ldr	r0, [pc, #204]	; (801ccfc <low_level_init+0x148>)
 801cc30:	f005 fbb0 	bl	8022394 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801cc34:	4b31      	ldr	r3, [pc, #196]	; (801ccfc <low_level_init+0x148>)
 801cc36:	2221      	movs	r2, #33	; 0x21
 801cc38:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801cc3a:	4b30      	ldr	r3, [pc, #192]	; (801ccfc <low_level_init+0x148>)
 801cc3c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801cc40:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801cc42:	4b2e      	ldr	r3, [pc, #184]	; (801ccfc <low_level_init+0x148>)
 801cc44:	2200      	movs	r2, #0
 801cc46:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801cc48:	482d      	ldr	r0, [pc, #180]	; (801cd00 <low_level_init+0x14c>)
 801cc4a:	f000 ff3d 	bl	801dac8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	2206      	movs	r2, #6
 801cc52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801cc56:	4b22      	ldr	r3, [pc, #136]	; (801cce0 <low_level_init+0x12c>)
 801cc58:	685b      	ldr	r3, [r3, #4]
 801cc5a:	781a      	ldrb	r2, [r3, #0]
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801cc62:	4b1f      	ldr	r3, [pc, #124]	; (801cce0 <low_level_init+0x12c>)
 801cc64:	685b      	ldr	r3, [r3, #4]
 801cc66:	785a      	ldrb	r2, [r3, #1]
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801cc6e:	4b1c      	ldr	r3, [pc, #112]	; (801cce0 <low_level_init+0x12c>)
 801cc70:	685b      	ldr	r3, [r3, #4]
 801cc72:	789a      	ldrb	r2, [r3, #2]
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801cc7a:	4b19      	ldr	r3, [pc, #100]	; (801cce0 <low_level_init+0x12c>)
 801cc7c:	685b      	ldr	r3, [r3, #4]
 801cc7e:	78da      	ldrb	r2, [r3, #3]
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801cc86:	4b16      	ldr	r3, [pc, #88]	; (801cce0 <low_level_init+0x12c>)
 801cc88:	685b      	ldr	r3, [r3, #4]
 801cc8a:	791a      	ldrb	r2, [r3, #4]
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801cc92:	4b13      	ldr	r3, [pc, #76]	; (801cce0 <low_level_init+0x12c>)
 801cc94:	685b      	ldr	r3, [r3, #4]
 801cc96:	795a      	ldrb	r2, [r3, #5]
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801cca4:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ccac:	f043 030a 	orr.w	r3, r3, #10
 801ccb0:	b2da      	uxtb	r2, r3
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801ccb8:	4912      	ldr	r1, [pc, #72]	; (801cd04 <low_level_init+0x150>)
 801ccba:	4813      	ldr	r0, [pc, #76]	; (801cd08 <low_level_init+0x154>)
 801ccbc:	f7f8 fa87 	bl	80151ce <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801ccc0:	4811      	ldr	r0, [pc, #68]	; (801cd08 <low_level_init+0x154>)
 801ccc2:	f7f8 fab6 	bl	8015232 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801ccc6:	7bfb      	ldrb	r3, [r7, #15]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d103      	bne.n	801ccd4 <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801cccc:	6878      	ldr	r0, [r7, #4]
 801ccce:	f000 fa37 	bl	801d140 <ethernet_link_check_state>
 801ccd2:	e001      	b.n	801ccd8 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 801ccd4:	f7f6 feb0 	bl	8013a38 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801ccd8:	3710      	adds	r7, #16
 801ccda:	46bd      	mov	sp, r7
 801ccdc:	bd80      	pop	{r7, pc}
 801ccde:	bf00      	nop
 801cce0:	20010658 	.word	0x20010658
 801cce4:	40028000 	.word	0x40028000
 801cce8:	20000244 	.word	0x20000244
 801ccec:	200001a4 	.word	0x200001a4
 801ccf0:	20000304 	.word	0x20000304
 801ccf4:	20000349 	.word	0x20000349
 801ccf8:	200005b7 	.word	0x200005b7
 801ccfc:	20010708 	.word	0x20010708
 801cd00:	08028fbc 	.word	0x08028fbc
 801cd04:	20000128 	.word	0x20000128
 801cd08:	20010740 	.word	0x20010740

0801cd0c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b092      	sub	sp, #72	; 0x48
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	6078      	str	r0, [r7, #4]
 801cd14:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801cd16:	2300      	movs	r3, #0
 801cd18:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801cd1a:	2300      	movs	r3, #0
 801cd1c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801cd1e:	2300      	movs	r3, #0
 801cd20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801cd24:	f107 030c 	add.w	r3, r7, #12
 801cd28:	2230      	movs	r2, #48	; 0x30
 801cd2a:	2100      	movs	r1, #0
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	f005 fb31 	bl	8022394 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801cd32:	f107 030c 	add.w	r3, r7, #12
 801cd36:	2230      	movs	r2, #48	; 0x30
 801cd38:	2100      	movs	r1, #0
 801cd3a:	4618      	mov	r0, r3
 801cd3c:	f005 fb2a 	bl	8022394 <memset>

  for(q = p; q != NULL; q = q->next)
 801cd40:	683b      	ldr	r3, [r7, #0]
 801cd42:	643b      	str	r3, [r7, #64]	; 0x40
 801cd44:	e045      	b.n	801cdd2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801cd46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd48:	2b03      	cmp	r3, #3
 801cd4a:	d902      	bls.n	801cd52 <low_level_output+0x46>
      return ERR_IF;
 801cd4c:	f06f 030b 	mvn.w	r3, #11
 801cd50:	e055      	b.n	801cdfe <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801cd52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cd54:	6859      	ldr	r1, [r3, #4]
 801cd56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cd58:	4613      	mov	r3, r2
 801cd5a:	005b      	lsls	r3, r3, #1
 801cd5c:	4413      	add	r3, r2
 801cd5e:	009b      	lsls	r3, r3, #2
 801cd60:	3348      	adds	r3, #72	; 0x48
 801cd62:	443b      	add	r3, r7
 801cd64:	3b3c      	subs	r3, #60	; 0x3c
 801cd66:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801cd68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cd6a:	895b      	ldrh	r3, [r3, #10]
 801cd6c:	4619      	mov	r1, r3
 801cd6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cd70:	4613      	mov	r3, r2
 801cd72:	005b      	lsls	r3, r3, #1
 801cd74:	4413      	add	r3, r2
 801cd76:	009b      	lsls	r3, r3, #2
 801cd78:	3348      	adds	r3, #72	; 0x48
 801cd7a:	443b      	add	r3, r7
 801cd7c:	3b38      	subs	r3, #56	; 0x38
 801cd7e:	6019      	str	r1, [r3, #0]

    if(i>0)
 801cd80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d011      	beq.n	801cdaa <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801cd86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd88:	1e5a      	subs	r2, r3, #1
 801cd8a:	f107 000c 	add.w	r0, r7, #12
 801cd8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801cd90:	460b      	mov	r3, r1
 801cd92:	005b      	lsls	r3, r3, #1
 801cd94:	440b      	add	r3, r1
 801cd96:	009b      	lsls	r3, r3, #2
 801cd98:	18c1      	adds	r1, r0, r3
 801cd9a:	4613      	mov	r3, r2
 801cd9c:	005b      	lsls	r3, r3, #1
 801cd9e:	4413      	add	r3, r2
 801cda0:	009b      	lsls	r3, r3, #2
 801cda2:	3348      	adds	r3, #72	; 0x48
 801cda4:	443b      	add	r3, r7
 801cda6:	3b34      	subs	r3, #52	; 0x34
 801cda8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801cdaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cdac:	681b      	ldr	r3, [r3, #0]
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d109      	bne.n	801cdc6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801cdb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cdb4:	4613      	mov	r3, r2
 801cdb6:	005b      	lsls	r3, r3, #1
 801cdb8:	4413      	add	r3, r2
 801cdba:	009b      	lsls	r3, r3, #2
 801cdbc:	3348      	adds	r3, #72	; 0x48
 801cdbe:	443b      	add	r3, r7
 801cdc0:	3b34      	subs	r3, #52	; 0x34
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	601a      	str	r2, [r3, #0]
    }

    i++;
 801cdc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdc8:	3301      	adds	r3, #1
 801cdca:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801cdcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	643b      	str	r3, [r7, #64]	; 0x40
 801cdd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d1b6      	bne.n	801cd46 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801cdd8:	683b      	ldr	r3, [r7, #0]
 801cdda:	891b      	ldrh	r3, [r3, #8]
 801cddc:	461a      	mov	r2, r3
 801cdde:	4b0a      	ldr	r3, [pc, #40]	; (801ce08 <low_level_output+0xfc>)
 801cde0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801cde2:	4a09      	ldr	r2, [pc, #36]	; (801ce08 <low_level_output+0xfc>)
 801cde4:	f107 030c 	add.w	r3, r7, #12
 801cde8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801cdea:	4a07      	ldr	r2, [pc, #28]	; (801ce08 <low_level_output+0xfc>)
 801cdec:	683b      	ldr	r3, [r7, #0]
 801cdee:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801cdf0:	2214      	movs	r2, #20
 801cdf2:	4905      	ldr	r1, [pc, #20]	; (801ce08 <low_level_output+0xfc>)
 801cdf4:	4805      	ldr	r0, [pc, #20]	; (801ce0c <low_level_output+0x100>)
 801cdf6:	f7f9 fe05 	bl	8016a04 <HAL_ETH_Transmit>

  return errval;
 801cdfa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801cdfe:	4618      	mov	r0, r3
 801ce00:	3748      	adds	r7, #72	; 0x48
 801ce02:	46bd      	mov	sp, r7
 801ce04:	bd80      	pop	{r7, pc}
 801ce06:	bf00      	nop
 801ce08:	20010708 	.word	0x20010708
 801ce0c:	20010658 	.word	0x20010658

0801ce10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b084      	sub	sp, #16
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801ce18:	2300      	movs	r3, #0
 801ce1a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801ce1c:	4b07      	ldr	r3, [pc, #28]	; (801ce3c <low_level_input+0x2c>)
 801ce1e:	781b      	ldrb	r3, [r3, #0]
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d105      	bne.n	801ce30 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801ce24:	f107 030c 	add.w	r3, r7, #12
 801ce28:	4619      	mov	r1, r3
 801ce2a:	4805      	ldr	r0, [pc, #20]	; (801ce40 <low_level_input+0x30>)
 801ce2c:	f7f9 fe7e 	bl	8016b2c <HAL_ETH_ReadData>
  }

  return p;
 801ce30:	68fb      	ldr	r3, [r7, #12]
}
 801ce32:	4618      	mov	r0, r3
 801ce34:	3710      	adds	r7, #16
 801ce36:	46bd      	mov	sp, r7
 801ce38:	bd80      	pop	{r7, pc}
 801ce3a:	bf00      	nop
 801ce3c:	20010654 	.word	0x20010654
 801ce40:	20010658 	.word	0x20010658

0801ce44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b084      	sub	sp, #16
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801ce4c:	2300      	movs	r3, #0
 801ce4e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801ce50:	6878      	ldr	r0, [r7, #4]
 801ce52:	f7ff ffdd 	bl	801ce10 <low_level_input>
 801ce56:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d00a      	beq.n	801ce74 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	691b      	ldr	r3, [r3, #16]
 801ce62:	6879      	ldr	r1, [r7, #4]
 801ce64:	68f8      	ldr	r0, [r7, #12]
 801ce66:	4798      	blx	r3
 801ce68:	4603      	mov	r3, r0
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d002      	beq.n	801ce74 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801ce6e:	68f8      	ldr	r0, [r7, #12]
 801ce70:	f001 fe40 	bl	801eaf4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d1ea      	bne.n	801ce50 <ethernetif_input+0xc>
}
 801ce7a:	bf00      	nop
 801ce7c:	bf00      	nop
 801ce7e:	3710      	adds	r7, #16
 801ce80:	46bd      	mov	sp, r7
 801ce82:	bd80      	pop	{r7, pc}

0801ce84 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801ce84:	b580      	push	{r7, lr}
 801ce86:	b082      	sub	sp, #8
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d106      	bne.n	801cea0 <ethernetif_init+0x1c>
 801ce92:	4b0e      	ldr	r3, [pc, #56]	; (801cecc <ethernetif_init+0x48>)
 801ce94:	f240 1287 	movw	r2, #391	; 0x187
 801ce98:	490d      	ldr	r1, [pc, #52]	; (801ced0 <ethernetif_init+0x4c>)
 801ce9a:	480e      	ldr	r0, [pc, #56]	; (801ced4 <ethernetif_init+0x50>)
 801ce9c:	f005 fb62 	bl	8022564 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	2273      	movs	r2, #115	; 0x73
 801cea4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	2274      	movs	r2, #116	; 0x74
 801ceac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	4a09      	ldr	r2, [pc, #36]	; (801ced8 <ethernetif_init+0x54>)
 801ceb4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	4a08      	ldr	r2, [pc, #32]	; (801cedc <ethernetif_init+0x58>)
 801ceba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801cebc:	6878      	ldr	r0, [r7, #4]
 801cebe:	f7ff fe79 	bl	801cbb4 <low_level_init>

  return ERR_OK;
 801cec2:	2300      	movs	r3, #0
}
 801cec4:	4618      	mov	r0, r3
 801cec6:	3708      	adds	r7, #8
 801cec8:	46bd      	mov	sp, r7
 801ceca:	bd80      	pop	{r7, pc}
 801cecc:	08027170 	.word	0x08027170
 801ced0:	080271dc 	.word	0x080271dc
 801ced4:	080271ec 	.word	0x080271ec
 801ced8:	080204a1 	.word	0x080204a1
 801cedc:	0801cd0d 	.word	0x0801cd0d

0801cee0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801cee0:	b580      	push	{r7, lr}
 801cee2:	b084      	sub	sp, #16
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801ceec:	68f9      	ldr	r1, [r7, #12]
 801ceee:	4807      	ldr	r0, [pc, #28]	; (801cf0c <pbuf_free_custom+0x2c>)
 801cef0:	f000 fecc 	bl	801dc8c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801cef4:	4b06      	ldr	r3, [pc, #24]	; (801cf10 <pbuf_free_custom+0x30>)
 801cef6:	781b      	ldrb	r3, [r3, #0]
 801cef8:	2b01      	cmp	r3, #1
 801cefa:	d102      	bne.n	801cf02 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801cefc:	4b04      	ldr	r3, [pc, #16]	; (801cf10 <pbuf_free_custom+0x30>)
 801cefe:	2200      	movs	r2, #0
 801cf00:	701a      	strb	r2, [r3, #0]
  }
}
 801cf02:	bf00      	nop
 801cf04:	3710      	adds	r7, #16
 801cf06:	46bd      	mov	sp, r7
 801cf08:	bd80      	pop	{r7, pc}
 801cf0a:	bf00      	nop
 801cf0c:	08028fbc 	.word	0x08028fbc
 801cf10:	20010654 	.word	0x20010654

0801cf14 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801cf14:	b580      	push	{r7, lr}
 801cf16:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801cf18:	f7f8 fb1a 	bl	8015550 <HAL_GetTick>
 801cf1c:	4603      	mov	r3, r0
}
 801cf1e:	4618      	mov	r0, r3
 801cf20:	bd80      	pop	{r7, pc}
	...

0801cf24 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801cf24:	b580      	push	{r7, lr}
 801cf26:	b08e      	sub	sp, #56	; 0x38
 801cf28:	af00      	add	r7, sp, #0
 801cf2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cf2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cf30:	2200      	movs	r2, #0
 801cf32:	601a      	str	r2, [r3, #0]
 801cf34:	605a      	str	r2, [r3, #4]
 801cf36:	609a      	str	r2, [r3, #8]
 801cf38:	60da      	str	r2, [r3, #12]
 801cf3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	4a52      	ldr	r2, [pc, #328]	; (801d08c <HAL_ETH_MspInit+0x168>)
 801cf42:	4293      	cmp	r3, r2
 801cf44:	f040 809e 	bne.w	801d084 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801cf48:	4b51      	ldr	r3, [pc, #324]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf4c:	4a50      	ldr	r2, [pc, #320]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801cf52:	6313      	str	r3, [r2, #48]	; 0x30
 801cf54:	4b4e      	ldr	r3, [pc, #312]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801cf5c:	623b      	str	r3, [r7, #32]
 801cf5e:	6a3b      	ldr	r3, [r7, #32]
 801cf60:	4b4b      	ldr	r3, [pc, #300]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf64:	4a4a      	ldr	r2, [pc, #296]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801cf6a:	6313      	str	r3, [r2, #48]	; 0x30
 801cf6c:	4b48      	ldr	r3, [pc, #288]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801cf74:	61fb      	str	r3, [r7, #28]
 801cf76:	69fb      	ldr	r3, [r7, #28]
 801cf78:	4b45      	ldr	r3, [pc, #276]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf7c:	4a44      	ldr	r2, [pc, #272]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801cf82:	6313      	str	r3, [r2, #48]	; 0x30
 801cf84:	4b42      	ldr	r3, [pc, #264]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801cf8c:	61bb      	str	r3, [r7, #24]
 801cf8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801cf90:	4b3f      	ldr	r3, [pc, #252]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf94:	4a3e      	ldr	r2, [pc, #248]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf96:	f043 0304 	orr.w	r3, r3, #4
 801cf9a:	6313      	str	r3, [r2, #48]	; 0x30
 801cf9c:	4b3c      	ldr	r3, [pc, #240]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cf9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfa0:	f003 0304 	and.w	r3, r3, #4
 801cfa4:	617b      	str	r3, [r7, #20]
 801cfa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cfa8:	4b39      	ldr	r3, [pc, #228]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cfaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfac:	4a38      	ldr	r2, [pc, #224]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cfae:	f043 0301 	orr.w	r3, r3, #1
 801cfb2:	6313      	str	r3, [r2, #48]	; 0x30
 801cfb4:	4b36      	ldr	r3, [pc, #216]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cfb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfb8:	f003 0301 	and.w	r3, r3, #1
 801cfbc:	613b      	str	r3, [r7, #16]
 801cfbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801cfc0:	4b33      	ldr	r3, [pc, #204]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfc4:	4a32      	ldr	r2, [pc, #200]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cfc6:	f043 0302 	orr.w	r3, r3, #2
 801cfca:	6313      	str	r3, [r2, #48]	; 0x30
 801cfcc:	4b30      	ldr	r3, [pc, #192]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cfce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfd0:	f003 0302 	and.w	r3, r3, #2
 801cfd4:	60fb      	str	r3, [r7, #12]
 801cfd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801cfd8:	4b2d      	ldr	r3, [pc, #180]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cfda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfdc:	4a2c      	ldr	r2, [pc, #176]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cfde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cfe2:	6313      	str	r3, [r2, #48]	; 0x30
 801cfe4:	4b2a      	ldr	r3, [pc, #168]	; (801d090 <HAL_ETH_MspInit+0x16c>)
 801cfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cfec:	60bb      	str	r3, [r7, #8]
 801cfee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801cff0:	2332      	movs	r3, #50	; 0x32
 801cff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cff4:	2302      	movs	r3, #2
 801cff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cff8:	2300      	movs	r3, #0
 801cffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cffc:	2303      	movs	r3, #3
 801cffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d000:	230b      	movs	r3, #11
 801d002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d008:	4619      	mov	r1, r3
 801d00a:	4822      	ldr	r0, [pc, #136]	; (801d094 <HAL_ETH_MspInit+0x170>)
 801d00c:	f7fa fdac 	bl	8017b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801d010:	2386      	movs	r3, #134	; 0x86
 801d012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d014:	2302      	movs	r3, #2
 801d016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d018:	2300      	movs	r3, #0
 801d01a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d01c:	2303      	movs	r3, #3
 801d01e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d020:	230b      	movs	r3, #11
 801d022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d028:	4619      	mov	r1, r3
 801d02a:	481b      	ldr	r0, [pc, #108]	; (801d098 <HAL_ETH_MspInit+0x174>)
 801d02c:	f7fa fd9c 	bl	8017b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801d030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d036:	2302      	movs	r3, #2
 801d038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d03a:	2300      	movs	r3, #0
 801d03c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d03e:	2303      	movs	r3, #3
 801d040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d042:	230b      	movs	r3, #11
 801d044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801d046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d04a:	4619      	mov	r1, r3
 801d04c:	4813      	ldr	r0, [pc, #76]	; (801d09c <HAL_ETH_MspInit+0x178>)
 801d04e:	f7fa fd8b 	bl	8017b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801d052:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801d056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d058:	2302      	movs	r3, #2
 801d05a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d05c:	2300      	movs	r3, #0
 801d05e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d060:	2303      	movs	r3, #3
 801d062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d064:	230b      	movs	r3, #11
 801d066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801d068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d06c:	4619      	mov	r1, r3
 801d06e:	480c      	ldr	r0, [pc, #48]	; (801d0a0 <HAL_ETH_MspInit+0x17c>)
 801d070:	f7fa fd7a 	bl	8017b68 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801d074:	2200      	movs	r2, #0
 801d076:	2101      	movs	r1, #1
 801d078:	203d      	movs	r0, #61	; 0x3d
 801d07a:	f7f9 fa4a 	bl	8016512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801d07e:	203d      	movs	r0, #61	; 0x3d
 801d080:	f7f9 fa63 	bl	801654a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801d084:	bf00      	nop
 801d086:	3738      	adds	r7, #56	; 0x38
 801d088:	46bd      	mov	sp, r7
 801d08a:	bd80      	pop	{r7, pc}
 801d08c:	40028000 	.word	0x40028000
 801d090:	40023800 	.word	0x40023800
 801d094:	40020800 	.word	0x40020800
 801d098:	40020000 	.word	0x40020000
 801d09c:	40020400 	.word	0x40020400
 801d0a0:	40021800 	.word	0x40021800

0801d0a4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801d0a4:	b580      	push	{r7, lr}
 801d0a6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801d0a8:	4802      	ldr	r0, [pc, #8]	; (801d0b4 <ETH_PHY_IO_Init+0x10>)
 801d0aa:	f7fa f903 	bl	80172b4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801d0ae:	2300      	movs	r3, #0
}
 801d0b0:	4618      	mov	r0, r3
 801d0b2:	bd80      	pop	{r7, pc}
 801d0b4:	20010658 	.word	0x20010658

0801d0b8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801d0b8:	b480      	push	{r7}
 801d0ba:	af00      	add	r7, sp, #0
  return 0;
 801d0bc:	2300      	movs	r3, #0
}
 801d0be:	4618      	mov	r0, r3
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0c6:	4770      	bx	lr

0801d0c8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b084      	sub	sp, #16
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	60f8      	str	r0, [r7, #12]
 801d0d0:	60b9      	str	r1, [r7, #8]
 801d0d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	68ba      	ldr	r2, [r7, #8]
 801d0d8:	68f9      	ldr	r1, [r7, #12]
 801d0da:	4807      	ldr	r0, [pc, #28]	; (801d0f8 <ETH_PHY_IO_ReadReg+0x30>)
 801d0dc:	f7f9 ff52 	bl	8016f84 <HAL_ETH_ReadPHYRegister>
 801d0e0:	4603      	mov	r3, r0
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d002      	beq.n	801d0ec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801d0e6:	f04f 33ff 	mov.w	r3, #4294967295
 801d0ea:	e000      	b.n	801d0ee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801d0ec:	2300      	movs	r3, #0
}
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	3710      	adds	r7, #16
 801d0f2:	46bd      	mov	sp, r7
 801d0f4:	bd80      	pop	{r7, pc}
 801d0f6:	bf00      	nop
 801d0f8:	20010658 	.word	0x20010658

0801d0fc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801d0fc:	b580      	push	{r7, lr}
 801d0fe:	b084      	sub	sp, #16
 801d100:	af00      	add	r7, sp, #0
 801d102:	60f8      	str	r0, [r7, #12]
 801d104:	60b9      	str	r1, [r7, #8]
 801d106:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	68ba      	ldr	r2, [r7, #8]
 801d10c:	68f9      	ldr	r1, [r7, #12]
 801d10e:	4807      	ldr	r0, [pc, #28]	; (801d12c <ETH_PHY_IO_WriteReg+0x30>)
 801d110:	f7f9 ff83 	bl	801701a <HAL_ETH_WritePHYRegister>
 801d114:	4603      	mov	r3, r0
 801d116:	2b00      	cmp	r3, #0
 801d118:	d002      	beq.n	801d120 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801d11a:	f04f 33ff 	mov.w	r3, #4294967295
 801d11e:	e000      	b.n	801d122 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801d120:	2300      	movs	r3, #0
}
 801d122:	4618      	mov	r0, r3
 801d124:	3710      	adds	r7, #16
 801d126:	46bd      	mov	sp, r7
 801d128:	bd80      	pop	{r7, pc}
 801d12a:	bf00      	nop
 801d12c:	20010658 	.word	0x20010658

0801d130 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801d130:	b580      	push	{r7, lr}
 801d132:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801d134:	f7f8 fa0c 	bl	8015550 <HAL_GetTick>
 801d138:	4603      	mov	r3, r0
}
 801d13a:	4618      	mov	r0, r3
 801d13c:	bd80      	pop	{r7, pc}
	...

0801d140 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801d140:	b580      	push	{r7, lr}
 801d142:	b0a0      	sub	sp, #128	; 0x80
 801d144:	af00      	add	r7, sp, #0
 801d146:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801d148:	f107 030c 	add.w	r3, r7, #12
 801d14c:	2264      	movs	r2, #100	; 0x64
 801d14e:	2100      	movs	r1, #0
 801d150:	4618      	mov	r0, r3
 801d152:	f005 f91f 	bl	8022394 <memset>
  int32_t PHYLinkState = 0;
 801d156:	2300      	movs	r3, #0
 801d158:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801d15a:	2300      	movs	r3, #0
 801d15c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d15e:	2300      	movs	r3, #0
 801d160:	67bb      	str	r3, [r7, #120]	; 0x78
 801d162:	2300      	movs	r3, #0
 801d164:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801d166:	483a      	ldr	r0, [pc, #232]	; (801d250 <ethernet_link_check_state+0x110>)
 801d168:	f7f8 f90b 	bl	8015382 <DP83848_GetLinkState>
 801d16c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d174:	089b      	lsrs	r3, r3, #2
 801d176:	f003 0301 	and.w	r3, r3, #1
 801d17a:	b2db      	uxtb	r3, r3
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d00c      	beq.n	801d19a <ethernet_link_check_state+0x5a>
 801d180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d182:	2b01      	cmp	r3, #1
 801d184:	dc09      	bgt.n	801d19a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801d186:	4833      	ldr	r0, [pc, #204]	; (801d254 <ethernet_link_check_state+0x114>)
 801d188:	f7f9 fbe3 	bl	8016952 <HAL_ETH_Stop>
    netif_set_down(netif);
 801d18c:	6878      	ldr	r0, [r7, #4]
 801d18e:	f001 f84b 	bl	801e228 <netif_set_down>
    netif_set_link_down(netif);
 801d192:	6878      	ldr	r0, [r7, #4]
 801d194:	f001 f8ae 	bl	801e2f4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801d198:	e055      	b.n	801d246 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d1a0:	f003 0304 	and.w	r3, r3, #4
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d14e      	bne.n	801d246 <ethernet_link_check_state+0x106>
 801d1a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1aa:	2b01      	cmp	r3, #1
 801d1ac:	dd4b      	ble.n	801d246 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801d1ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1b0:	3b02      	subs	r3, #2
 801d1b2:	2b03      	cmp	r3, #3
 801d1b4:	d82a      	bhi.n	801d20c <ethernet_link_check_state+0xcc>
 801d1b6:	a201      	add	r2, pc, #4	; (adr r2, 801d1bc <ethernet_link_check_state+0x7c>)
 801d1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1bc:	0801d1cd 	.word	0x0801d1cd
 801d1c0:	0801d1df 	.word	0x0801d1df
 801d1c4:	0801d1ef 	.word	0x0801d1ef
 801d1c8:	0801d1ff 	.word	0x0801d1ff
      duplex = ETH_FULLDUPLEX_MODE;
 801d1cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d1d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d1d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d1d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d1d8:	2301      	movs	r3, #1
 801d1da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d1dc:	e017      	b.n	801d20e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d1de:	2300      	movs	r3, #0
 801d1e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d1e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d1e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d1e8:	2301      	movs	r3, #1
 801d1ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d1ec:	e00f      	b.n	801d20e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801d1ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d1f2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d1f8:	2301      	movs	r3, #1
 801d1fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d1fc:	e007      	b.n	801d20e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d1fe:	2300      	movs	r3, #0
 801d200:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d202:	2300      	movs	r3, #0
 801d204:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d206:	2301      	movs	r3, #1
 801d208:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d20a:	e000      	b.n	801d20e <ethernet_link_check_state+0xce>
      break;
 801d20c:	bf00      	nop
    if(linkchanged)
 801d20e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d210:	2b00      	cmp	r3, #0
 801d212:	d018      	beq.n	801d246 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801d214:	f107 030c 	add.w	r3, r7, #12
 801d218:	4619      	mov	r1, r3
 801d21a:	480e      	ldr	r0, [pc, #56]	; (801d254 <ethernet_link_check_state+0x114>)
 801d21c:	f7f9 ff46 	bl	80170ac <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801d220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d222:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801d224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d226:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801d228:	f107 030c 	add.w	r3, r7, #12
 801d22c:	4619      	mov	r1, r3
 801d22e:	4809      	ldr	r0, [pc, #36]	; (801d254 <ethernet_link_check_state+0x114>)
 801d230:	f7fa f826 	bl	8017280 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 801d234:	4807      	ldr	r0, [pc, #28]	; (801d254 <ethernet_link_check_state+0x114>)
 801d236:	f7f9 fb2d 	bl	8016894 <HAL_ETH_Start>
      netif_set_up(netif);
 801d23a:	6878      	ldr	r0, [r7, #4]
 801d23c:	f000 ff88 	bl	801e150 <netif_set_up>
      netif_set_link_up(netif);
 801d240:	6878      	ldr	r0, [r7, #4]
 801d242:	f001 f823 	bl	801e28c <netif_set_link_up>
}
 801d246:	bf00      	nop
 801d248:	3780      	adds	r7, #128	; 0x80
 801d24a:	46bd      	mov	sp, r7
 801d24c:	bd80      	pop	{r7, pc}
 801d24e:	bf00      	nop
 801d250:	20010740 	.word	0x20010740
 801d254:	20010658 	.word	0x20010658

0801d258 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801d258:	b580      	push	{r7, lr}
 801d25a:	b086      	sub	sp, #24
 801d25c:	af02      	add	r7, sp, #8
 801d25e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801d260:	4812      	ldr	r0, [pc, #72]	; (801d2ac <HAL_ETH_RxAllocateCallback+0x54>)
 801d262:	f000 fca5 	bl	801dbb0 <memp_malloc_pool>
 801d266:	60f8      	str	r0, [r7, #12]
	if (p)
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d014      	beq.n	801d298 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801d26e:	68fb      	ldr	r3, [r7, #12]
 801d270:	f103 0214 	add.w	r2, r3, #20
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	4a0d      	ldr	r2, [pc, #52]	; (801d2b0 <HAL_ETH_RxAllocateCallback+0x58>)
 801d27c:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801d286:	9201      	str	r2, [sp, #4]
 801d288:	9300      	str	r3, [sp, #0]
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	2241      	movs	r2, #65	; 0x41
 801d28e:	2100      	movs	r1, #0
 801d290:	2000      	movs	r0, #0
 801d292:	f001 fa75 	bl	801e780 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801d296:	e005      	b.n	801d2a4 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 801d298:	4b06      	ldr	r3, [pc, #24]	; (801d2b4 <HAL_ETH_RxAllocateCallback+0x5c>)
 801d29a:	2201      	movs	r2, #1
 801d29c:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	2200      	movs	r2, #0
 801d2a2:	601a      	str	r2, [r3, #0]
}
 801d2a4:	bf00      	nop
 801d2a6:	3710      	adds	r7, #16
 801d2a8:	46bd      	mov	sp, r7
 801d2aa:	bd80      	pop	{r7, pc}
 801d2ac:	08028fbc 	.word	0x08028fbc
 801d2b0:	0801cee1 	.word	0x0801cee1
 801d2b4:	20010654 	.word	0x20010654

0801d2b8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801d2b8:	b580      	push	{r7, lr}
 801d2ba:	b088      	sub	sp, #32
 801d2bc:	af00      	add	r7, sp, #0
 801d2be:	60f8      	str	r0, [r7, #12]
 801d2c0:	60b9      	str	r1, [r7, #8]
 801d2c2:	607a      	str	r2, [r7, #4]
 801d2c4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 801d2c6:	68fb      	ldr	r3, [r7, #12]
 801d2c8:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801d2ca:	68bb      	ldr	r3, [r7, #8]
 801d2cc:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 801d2ce:	2300      	movs	r3, #0
 801d2d0:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	3b14      	subs	r3, #20
 801d2d6:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 801d2d8:	69fb      	ldr	r3, [r7, #28]
 801d2da:	2200      	movs	r2, #0
 801d2dc:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 801d2de:	69fb      	ldr	r3, [r7, #28]
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 801d2e4:	69fb      	ldr	r3, [r7, #28]
 801d2e6:	887a      	ldrh	r2, [r7, #2]
 801d2e8:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 801d2ea:	69bb      	ldr	r3, [r7, #24]
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d103      	bne.n	801d2fa <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 801d2f2:	69bb      	ldr	r3, [r7, #24]
 801d2f4:	69fa      	ldr	r2, [r7, #28]
 801d2f6:	601a      	str	r2, [r3, #0]
 801d2f8:	e003      	b.n	801d302 <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 801d2fa:	697b      	ldr	r3, [r7, #20]
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	69fa      	ldr	r2, [r7, #28]
 801d300:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 801d302:	697b      	ldr	r3, [r7, #20]
 801d304:	69fa      	ldr	r2, [r7, #28]
 801d306:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 801d308:	69bb      	ldr	r3, [r7, #24]
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	61fb      	str	r3, [r7, #28]
 801d30e:	e009      	b.n	801d324 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 801d310:	69fb      	ldr	r3, [r7, #28]
 801d312:	891a      	ldrh	r2, [r3, #8]
 801d314:	887b      	ldrh	r3, [r7, #2]
 801d316:	4413      	add	r3, r2
 801d318:	b29a      	uxth	r2, r3
 801d31a:	69fb      	ldr	r3, [r7, #28]
 801d31c:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 801d31e:	69fb      	ldr	r3, [r7, #28]
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	61fb      	str	r3, [r7, #28]
 801d324:	69fb      	ldr	r3, [r7, #28]
 801d326:	2b00      	cmp	r3, #0
 801d328:	d1f2      	bne.n	801d310 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801d32a:	887b      	ldrh	r3, [r7, #2]
 801d32c:	4619      	mov	r1, r3
 801d32e:	6878      	ldr	r0, [r7, #4]
 801d330:	f7ff fc14 	bl	801cb5c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801d334:	bf00      	nop
 801d336:	3720      	adds	r7, #32
 801d338:	46bd      	mov	sp, r7
 801d33a:	bd80      	pop	{r7, pc}

0801d33c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801d33c:	b480      	push	{r7}
 801d33e:	b083      	sub	sp, #12
 801d340:	af00      	add	r7, sp, #0
 801d342:	4603      	mov	r3, r0
 801d344:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801d346:	88fb      	ldrh	r3, [r7, #6]
 801d348:	021b      	lsls	r3, r3, #8
 801d34a:	b21a      	sxth	r2, r3
 801d34c:	88fb      	ldrh	r3, [r7, #6]
 801d34e:	0a1b      	lsrs	r3, r3, #8
 801d350:	b29b      	uxth	r3, r3
 801d352:	b21b      	sxth	r3, r3
 801d354:	4313      	orrs	r3, r2
 801d356:	b21b      	sxth	r3, r3
 801d358:	b29b      	uxth	r3, r3
}
 801d35a:	4618      	mov	r0, r3
 801d35c:	370c      	adds	r7, #12
 801d35e:	46bd      	mov	sp, r7
 801d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d364:	4770      	bx	lr

0801d366 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801d366:	b580      	push	{r7, lr}
 801d368:	b082      	sub	sp, #8
 801d36a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801d36c:	2300      	movs	r3, #0
 801d36e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801d370:	f000 f8d2 	bl	801d518 <mem_init>
  memp_init();
 801d374:	f000 fbd8 	bl	801db28 <memp_init>
  pbuf_init();
  netif_init();
 801d378:	f000 fcfc 	bl	801dd74 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801d37c:	f001 ff9a 	bl	801f2b4 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801d380:	f001 ff16 	bl	801f1b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801d384:	bf00      	nop
 801d386:	3708      	adds	r7, #8
 801d388:	46bd      	mov	sp, r7
 801d38a:	bd80      	pop	{r7, pc}

0801d38c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801d38c:	b480      	push	{r7}
 801d38e:	b083      	sub	sp, #12
 801d390:	af00      	add	r7, sp, #0
 801d392:	4603      	mov	r3, r0
 801d394:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801d396:	4b05      	ldr	r3, [pc, #20]	; (801d3ac <ptr_to_mem+0x20>)
 801d398:	681a      	ldr	r2, [r3, #0]
 801d39a:	88fb      	ldrh	r3, [r7, #6]
 801d39c:	4413      	add	r3, r2
}
 801d39e:	4618      	mov	r0, r3
 801d3a0:	370c      	adds	r7, #12
 801d3a2:	46bd      	mov	sp, r7
 801d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3a8:	4770      	bx	lr
 801d3aa:	bf00      	nop
 801d3ac:	20010dcc 	.word	0x20010dcc

0801d3b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801d3b0:	b480      	push	{r7}
 801d3b2:	b083      	sub	sp, #12
 801d3b4:	af00      	add	r7, sp, #0
 801d3b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801d3b8:	4b05      	ldr	r3, [pc, #20]	; (801d3d0 <mem_to_ptr+0x20>)
 801d3ba:	681b      	ldr	r3, [r3, #0]
 801d3bc:	687a      	ldr	r2, [r7, #4]
 801d3be:	1ad3      	subs	r3, r2, r3
 801d3c0:	b29b      	uxth	r3, r3
}
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	370c      	adds	r7, #12
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3cc:	4770      	bx	lr
 801d3ce:	bf00      	nop
 801d3d0:	20010dcc 	.word	0x20010dcc

0801d3d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801d3d4:	b590      	push	{r4, r7, lr}
 801d3d6:	b085      	sub	sp, #20
 801d3d8:	af00      	add	r7, sp, #0
 801d3da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801d3dc:	4b45      	ldr	r3, [pc, #276]	; (801d4f4 <plug_holes+0x120>)
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	687a      	ldr	r2, [r7, #4]
 801d3e2:	429a      	cmp	r2, r3
 801d3e4:	d206      	bcs.n	801d3f4 <plug_holes+0x20>
 801d3e6:	4b44      	ldr	r3, [pc, #272]	; (801d4f8 <plug_holes+0x124>)
 801d3e8:	f240 12df 	movw	r2, #479	; 0x1df
 801d3ec:	4943      	ldr	r1, [pc, #268]	; (801d4fc <plug_holes+0x128>)
 801d3ee:	4844      	ldr	r0, [pc, #272]	; (801d500 <plug_holes+0x12c>)
 801d3f0:	f005 f8b8 	bl	8022564 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801d3f4:	4b43      	ldr	r3, [pc, #268]	; (801d504 <plug_holes+0x130>)
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	687a      	ldr	r2, [r7, #4]
 801d3fa:	429a      	cmp	r2, r3
 801d3fc:	d306      	bcc.n	801d40c <plug_holes+0x38>
 801d3fe:	4b3e      	ldr	r3, [pc, #248]	; (801d4f8 <plug_holes+0x124>)
 801d400:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d404:	4940      	ldr	r1, [pc, #256]	; (801d508 <plug_holes+0x134>)
 801d406:	483e      	ldr	r0, [pc, #248]	; (801d500 <plug_holes+0x12c>)
 801d408:	f005 f8ac 	bl	8022564 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	791b      	ldrb	r3, [r3, #4]
 801d410:	2b00      	cmp	r3, #0
 801d412:	d006      	beq.n	801d422 <plug_holes+0x4e>
 801d414:	4b38      	ldr	r3, [pc, #224]	; (801d4f8 <plug_holes+0x124>)
 801d416:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d41a:	493c      	ldr	r1, [pc, #240]	; (801d50c <plug_holes+0x138>)
 801d41c:	4838      	ldr	r0, [pc, #224]	; (801d500 <plug_holes+0x12c>)
 801d41e:	f005 f8a1 	bl	8022564 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	881b      	ldrh	r3, [r3, #0]
 801d426:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d42a:	d906      	bls.n	801d43a <plug_holes+0x66>
 801d42c:	4b32      	ldr	r3, [pc, #200]	; (801d4f8 <plug_holes+0x124>)
 801d42e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801d432:	4937      	ldr	r1, [pc, #220]	; (801d510 <plug_holes+0x13c>)
 801d434:	4832      	ldr	r0, [pc, #200]	; (801d500 <plug_holes+0x12c>)
 801d436:	f005 f895 	bl	8022564 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	881b      	ldrh	r3, [r3, #0]
 801d43e:	4618      	mov	r0, r3
 801d440:	f7ff ffa4 	bl	801d38c <ptr_to_mem>
 801d444:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801d446:	687a      	ldr	r2, [r7, #4]
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	429a      	cmp	r2, r3
 801d44c:	d024      	beq.n	801d498 <plug_holes+0xc4>
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	791b      	ldrb	r3, [r3, #4]
 801d452:	2b00      	cmp	r3, #0
 801d454:	d120      	bne.n	801d498 <plug_holes+0xc4>
 801d456:	4b2b      	ldr	r3, [pc, #172]	; (801d504 <plug_holes+0x130>)
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	68fa      	ldr	r2, [r7, #12]
 801d45c:	429a      	cmp	r2, r3
 801d45e:	d01b      	beq.n	801d498 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801d460:	4b2c      	ldr	r3, [pc, #176]	; (801d514 <plug_holes+0x140>)
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	68fa      	ldr	r2, [r7, #12]
 801d466:	429a      	cmp	r2, r3
 801d468:	d102      	bne.n	801d470 <plug_holes+0x9c>
      lfree = mem;
 801d46a:	4a2a      	ldr	r2, [pc, #168]	; (801d514 <plug_holes+0x140>)
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	881a      	ldrh	r2, [r3, #0]
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	881b      	ldrh	r3, [r3, #0]
 801d47c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d480:	d00a      	beq.n	801d498 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	881b      	ldrh	r3, [r3, #0]
 801d486:	4618      	mov	r0, r3
 801d488:	f7ff ff80 	bl	801d38c <ptr_to_mem>
 801d48c:	4604      	mov	r4, r0
 801d48e:	6878      	ldr	r0, [r7, #4]
 801d490:	f7ff ff8e 	bl	801d3b0 <mem_to_ptr>
 801d494:	4603      	mov	r3, r0
 801d496:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	885b      	ldrh	r3, [r3, #2]
 801d49c:	4618      	mov	r0, r3
 801d49e:	f7ff ff75 	bl	801d38c <ptr_to_mem>
 801d4a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801d4a4:	68ba      	ldr	r2, [r7, #8]
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	429a      	cmp	r2, r3
 801d4aa:	d01f      	beq.n	801d4ec <plug_holes+0x118>
 801d4ac:	68bb      	ldr	r3, [r7, #8]
 801d4ae:	791b      	ldrb	r3, [r3, #4]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d11b      	bne.n	801d4ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801d4b4:	4b17      	ldr	r3, [pc, #92]	; (801d514 <plug_holes+0x140>)
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	687a      	ldr	r2, [r7, #4]
 801d4ba:	429a      	cmp	r2, r3
 801d4bc:	d102      	bne.n	801d4c4 <plug_holes+0xf0>
      lfree = pmem;
 801d4be:	4a15      	ldr	r2, [pc, #84]	; (801d514 <plug_holes+0x140>)
 801d4c0:	68bb      	ldr	r3, [r7, #8]
 801d4c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	881a      	ldrh	r2, [r3, #0]
 801d4c8:	68bb      	ldr	r3, [r7, #8]
 801d4ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	881b      	ldrh	r3, [r3, #0]
 801d4d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d4d4:	d00a      	beq.n	801d4ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	881b      	ldrh	r3, [r3, #0]
 801d4da:	4618      	mov	r0, r3
 801d4dc:	f7ff ff56 	bl	801d38c <ptr_to_mem>
 801d4e0:	4604      	mov	r4, r0
 801d4e2:	68b8      	ldr	r0, [r7, #8]
 801d4e4:	f7ff ff64 	bl	801d3b0 <mem_to_ptr>
 801d4e8:	4603      	mov	r3, r0
 801d4ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801d4ec:	bf00      	nop
 801d4ee:	3714      	adds	r7, #20
 801d4f0:	46bd      	mov	sp, r7
 801d4f2:	bd90      	pop	{r4, r7, pc}
 801d4f4:	20010dcc 	.word	0x20010dcc
 801d4f8:	08027214 	.word	0x08027214
 801d4fc:	08027290 	.word	0x08027290
 801d500:	080272a8 	.word	0x080272a8
 801d504:	20010dd0 	.word	0x20010dd0
 801d508:	080272d0 	.word	0x080272d0
 801d50c:	080272ec 	.word	0x080272ec
 801d510:	08027308 	.word	0x08027308
 801d514:	20010dd4 	.word	0x20010dd4

0801d518 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801d518:	b580      	push	{r7, lr}
 801d51a:	b082      	sub	sp, #8
 801d51c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801d51e:	4b18      	ldr	r3, [pc, #96]	; (801d580 <mem_init+0x68>)
 801d520:	3303      	adds	r3, #3
 801d522:	f023 0303 	bic.w	r3, r3, #3
 801d526:	461a      	mov	r2, r3
 801d528:	4b16      	ldr	r3, [pc, #88]	; (801d584 <mem_init+0x6c>)
 801d52a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801d52c:	4b15      	ldr	r3, [pc, #84]	; (801d584 <mem_init+0x6c>)
 801d52e:	681b      	ldr	r3, [r3, #0]
 801d530:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d538:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	2200      	movs	r2, #0
 801d53e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	2200      	movs	r2, #0
 801d544:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801d546:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801d54a:	f7ff ff1f 	bl	801d38c <ptr_to_mem>
 801d54e:	4603      	mov	r3, r0
 801d550:	4a0d      	ldr	r2, [pc, #52]	; (801d588 <mem_init+0x70>)
 801d552:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801d554:	4b0c      	ldr	r3, [pc, #48]	; (801d588 <mem_init+0x70>)
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	2201      	movs	r2, #1
 801d55a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801d55c:	4b0a      	ldr	r3, [pc, #40]	; (801d588 <mem_init+0x70>)
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d564:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801d566:	4b08      	ldr	r3, [pc, #32]	; (801d588 <mem_init+0x70>)
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d56e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801d570:	4b04      	ldr	r3, [pc, #16]	; (801d584 <mem_init+0x6c>)
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	4a05      	ldr	r2, [pc, #20]	; (801d58c <mem_init+0x74>)
 801d576:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801d578:	bf00      	nop
 801d57a:	3708      	adds	r7, #8
 801d57c:	46bd      	mov	sp, r7
 801d57e:	bd80      	pop	{r7, pc}
 801d580:	20010778 	.word	0x20010778
 801d584:	20010dcc 	.word	0x20010dcc
 801d588:	20010dd0 	.word	0x20010dd0
 801d58c:	20010dd4 	.word	0x20010dd4

0801d590 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801d590:	b580      	push	{r7, lr}
 801d592:	b086      	sub	sp, #24
 801d594:	af00      	add	r7, sp, #0
 801d596:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801d598:	6878      	ldr	r0, [r7, #4]
 801d59a:	f7ff ff09 	bl	801d3b0 <mem_to_ptr>
 801d59e:	4603      	mov	r3, r0
 801d5a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	881b      	ldrh	r3, [r3, #0]
 801d5a6:	4618      	mov	r0, r3
 801d5a8:	f7ff fef0 	bl	801d38c <ptr_to_mem>
 801d5ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	885b      	ldrh	r3, [r3, #2]
 801d5b2:	4618      	mov	r0, r3
 801d5b4:	f7ff feea 	bl	801d38c <ptr_to_mem>
 801d5b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	881b      	ldrh	r3, [r3, #0]
 801d5be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d5c2:	d818      	bhi.n	801d5f6 <mem_link_valid+0x66>
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	885b      	ldrh	r3, [r3, #2]
 801d5c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d5cc:	d813      	bhi.n	801d5f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d5d2:	8afa      	ldrh	r2, [r7, #22]
 801d5d4:	429a      	cmp	r2, r3
 801d5d6:	d004      	beq.n	801d5e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	881b      	ldrh	r3, [r3, #0]
 801d5dc:	8afa      	ldrh	r2, [r7, #22]
 801d5de:	429a      	cmp	r2, r3
 801d5e0:	d109      	bne.n	801d5f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d5e2:	4b08      	ldr	r3, [pc, #32]	; (801d604 <mem_link_valid+0x74>)
 801d5e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d5e6:	693a      	ldr	r2, [r7, #16]
 801d5e8:	429a      	cmp	r2, r3
 801d5ea:	d006      	beq.n	801d5fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d5ec:	693b      	ldr	r3, [r7, #16]
 801d5ee:	885b      	ldrh	r3, [r3, #2]
 801d5f0:	8afa      	ldrh	r2, [r7, #22]
 801d5f2:	429a      	cmp	r2, r3
 801d5f4:	d001      	beq.n	801d5fa <mem_link_valid+0x6a>
    return 0;
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	e000      	b.n	801d5fc <mem_link_valid+0x6c>
  }
  return 1;
 801d5fa:	2301      	movs	r3, #1
}
 801d5fc:	4618      	mov	r0, r3
 801d5fe:	3718      	adds	r7, #24
 801d600:	46bd      	mov	sp, r7
 801d602:	bd80      	pop	{r7, pc}
 801d604:	20010dd0 	.word	0x20010dd0

0801d608 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801d608:	b580      	push	{r7, lr}
 801d60a:	b084      	sub	sp, #16
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	2b00      	cmp	r3, #0
 801d614:	d04c      	beq.n	801d6b0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	f003 0303 	and.w	r3, r3, #3
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	d007      	beq.n	801d630 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801d620:	4b25      	ldr	r3, [pc, #148]	; (801d6b8 <mem_free+0xb0>)
 801d622:	f240 2273 	movw	r2, #627	; 0x273
 801d626:	4925      	ldr	r1, [pc, #148]	; (801d6bc <mem_free+0xb4>)
 801d628:	4825      	ldr	r0, [pc, #148]	; (801d6c0 <mem_free+0xb8>)
 801d62a:	f004 ff9b 	bl	8022564 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d62e:	e040      	b.n	801d6b2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	3b08      	subs	r3, #8
 801d634:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801d636:	4b23      	ldr	r3, [pc, #140]	; (801d6c4 <mem_free+0xbc>)
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	68fa      	ldr	r2, [r7, #12]
 801d63c:	429a      	cmp	r2, r3
 801d63e:	d306      	bcc.n	801d64e <mem_free+0x46>
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	f103 020c 	add.w	r2, r3, #12
 801d646:	4b20      	ldr	r3, [pc, #128]	; (801d6c8 <mem_free+0xc0>)
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	429a      	cmp	r2, r3
 801d64c:	d907      	bls.n	801d65e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801d64e:	4b1a      	ldr	r3, [pc, #104]	; (801d6b8 <mem_free+0xb0>)
 801d650:	f240 227f 	movw	r2, #639	; 0x27f
 801d654:	491d      	ldr	r1, [pc, #116]	; (801d6cc <mem_free+0xc4>)
 801d656:	481a      	ldr	r0, [pc, #104]	; (801d6c0 <mem_free+0xb8>)
 801d658:	f004 ff84 	bl	8022564 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d65c:	e029      	b.n	801d6b2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801d65e:	68fb      	ldr	r3, [r7, #12]
 801d660:	791b      	ldrb	r3, [r3, #4]
 801d662:	2b00      	cmp	r3, #0
 801d664:	d107      	bne.n	801d676 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801d666:	4b14      	ldr	r3, [pc, #80]	; (801d6b8 <mem_free+0xb0>)
 801d668:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801d66c:	4918      	ldr	r1, [pc, #96]	; (801d6d0 <mem_free+0xc8>)
 801d66e:	4814      	ldr	r0, [pc, #80]	; (801d6c0 <mem_free+0xb8>)
 801d670:	f004 ff78 	bl	8022564 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d674:	e01d      	b.n	801d6b2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801d676:	68f8      	ldr	r0, [r7, #12]
 801d678:	f7ff ff8a 	bl	801d590 <mem_link_valid>
 801d67c:	4603      	mov	r3, r0
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d107      	bne.n	801d692 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801d682:	4b0d      	ldr	r3, [pc, #52]	; (801d6b8 <mem_free+0xb0>)
 801d684:	f240 2295 	movw	r2, #661	; 0x295
 801d688:	4912      	ldr	r1, [pc, #72]	; (801d6d4 <mem_free+0xcc>)
 801d68a:	480d      	ldr	r0, [pc, #52]	; (801d6c0 <mem_free+0xb8>)
 801d68c:	f004 ff6a 	bl	8022564 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d690:	e00f      	b.n	801d6b2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	2200      	movs	r2, #0
 801d696:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801d698:	4b0f      	ldr	r3, [pc, #60]	; (801d6d8 <mem_free+0xd0>)
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	68fa      	ldr	r2, [r7, #12]
 801d69e:	429a      	cmp	r2, r3
 801d6a0:	d202      	bcs.n	801d6a8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801d6a2:	4a0d      	ldr	r2, [pc, #52]	; (801d6d8 <mem_free+0xd0>)
 801d6a4:	68fb      	ldr	r3, [r7, #12]
 801d6a6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801d6a8:	68f8      	ldr	r0, [r7, #12]
 801d6aa:	f7ff fe93 	bl	801d3d4 <plug_holes>
 801d6ae:	e000      	b.n	801d6b2 <mem_free+0xaa>
    return;
 801d6b0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801d6b2:	3710      	adds	r7, #16
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	bd80      	pop	{r7, pc}
 801d6b8:	08027214 	.word	0x08027214
 801d6bc:	08027334 	.word	0x08027334
 801d6c0:	080272a8 	.word	0x080272a8
 801d6c4:	20010dcc 	.word	0x20010dcc
 801d6c8:	20010dd0 	.word	0x20010dd0
 801d6cc:	08027358 	.word	0x08027358
 801d6d0:	08027374 	.word	0x08027374
 801d6d4:	0802739c 	.word	0x0802739c
 801d6d8:	20010dd4 	.word	0x20010dd4

0801d6dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801d6dc:	b580      	push	{r7, lr}
 801d6de:	b088      	sub	sp, #32
 801d6e0:	af00      	add	r7, sp, #0
 801d6e2:	6078      	str	r0, [r7, #4]
 801d6e4:	460b      	mov	r3, r1
 801d6e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801d6e8:	887b      	ldrh	r3, [r7, #2]
 801d6ea:	3303      	adds	r3, #3
 801d6ec:	b29b      	uxth	r3, r3
 801d6ee:	f023 0303 	bic.w	r3, r3, #3
 801d6f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801d6f4:	8bfb      	ldrh	r3, [r7, #30]
 801d6f6:	2b0b      	cmp	r3, #11
 801d6f8:	d801      	bhi.n	801d6fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801d6fa:	230c      	movs	r3, #12
 801d6fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801d6fe:	8bfb      	ldrh	r3, [r7, #30]
 801d700:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d704:	d803      	bhi.n	801d70e <mem_trim+0x32>
 801d706:	8bfa      	ldrh	r2, [r7, #30]
 801d708:	887b      	ldrh	r3, [r7, #2]
 801d70a:	429a      	cmp	r2, r3
 801d70c:	d201      	bcs.n	801d712 <mem_trim+0x36>
    return NULL;
 801d70e:	2300      	movs	r3, #0
 801d710:	e0cc      	b.n	801d8ac <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801d712:	4b68      	ldr	r3, [pc, #416]	; (801d8b4 <mem_trim+0x1d8>)
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	687a      	ldr	r2, [r7, #4]
 801d718:	429a      	cmp	r2, r3
 801d71a:	d304      	bcc.n	801d726 <mem_trim+0x4a>
 801d71c:	4b66      	ldr	r3, [pc, #408]	; (801d8b8 <mem_trim+0x1dc>)
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	687a      	ldr	r2, [r7, #4]
 801d722:	429a      	cmp	r2, r3
 801d724:	d306      	bcc.n	801d734 <mem_trim+0x58>
 801d726:	4b65      	ldr	r3, [pc, #404]	; (801d8bc <mem_trim+0x1e0>)
 801d728:	f240 22d1 	movw	r2, #721	; 0x2d1
 801d72c:	4964      	ldr	r1, [pc, #400]	; (801d8c0 <mem_trim+0x1e4>)
 801d72e:	4865      	ldr	r0, [pc, #404]	; (801d8c4 <mem_trim+0x1e8>)
 801d730:	f004 ff18 	bl	8022564 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801d734:	4b5f      	ldr	r3, [pc, #380]	; (801d8b4 <mem_trim+0x1d8>)
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	687a      	ldr	r2, [r7, #4]
 801d73a:	429a      	cmp	r2, r3
 801d73c:	d304      	bcc.n	801d748 <mem_trim+0x6c>
 801d73e:	4b5e      	ldr	r3, [pc, #376]	; (801d8b8 <mem_trim+0x1dc>)
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	687a      	ldr	r2, [r7, #4]
 801d744:	429a      	cmp	r2, r3
 801d746:	d301      	bcc.n	801d74c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	e0af      	b.n	801d8ac <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	3b08      	subs	r3, #8
 801d750:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801d752:	69b8      	ldr	r0, [r7, #24]
 801d754:	f7ff fe2c 	bl	801d3b0 <mem_to_ptr>
 801d758:	4603      	mov	r3, r0
 801d75a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801d75c:	69bb      	ldr	r3, [r7, #24]
 801d75e:	881a      	ldrh	r2, [r3, #0]
 801d760:	8afb      	ldrh	r3, [r7, #22]
 801d762:	1ad3      	subs	r3, r2, r3
 801d764:	b29b      	uxth	r3, r3
 801d766:	3b08      	subs	r3, #8
 801d768:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801d76a:	8bfa      	ldrh	r2, [r7, #30]
 801d76c:	8abb      	ldrh	r3, [r7, #20]
 801d76e:	429a      	cmp	r2, r3
 801d770:	d906      	bls.n	801d780 <mem_trim+0xa4>
 801d772:	4b52      	ldr	r3, [pc, #328]	; (801d8bc <mem_trim+0x1e0>)
 801d774:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801d778:	4953      	ldr	r1, [pc, #332]	; (801d8c8 <mem_trim+0x1ec>)
 801d77a:	4852      	ldr	r0, [pc, #328]	; (801d8c4 <mem_trim+0x1e8>)
 801d77c:	f004 fef2 	bl	8022564 <iprintf>
  if (newsize > size) {
 801d780:	8bfa      	ldrh	r2, [r7, #30]
 801d782:	8abb      	ldrh	r3, [r7, #20]
 801d784:	429a      	cmp	r2, r3
 801d786:	d901      	bls.n	801d78c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801d788:	2300      	movs	r3, #0
 801d78a:	e08f      	b.n	801d8ac <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801d78c:	8bfa      	ldrh	r2, [r7, #30]
 801d78e:	8abb      	ldrh	r3, [r7, #20]
 801d790:	429a      	cmp	r2, r3
 801d792:	d101      	bne.n	801d798 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	e089      	b.n	801d8ac <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801d798:	69bb      	ldr	r3, [r7, #24]
 801d79a:	881b      	ldrh	r3, [r3, #0]
 801d79c:	4618      	mov	r0, r3
 801d79e:	f7ff fdf5 	bl	801d38c <ptr_to_mem>
 801d7a2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801d7a4:	693b      	ldr	r3, [r7, #16]
 801d7a6:	791b      	ldrb	r3, [r3, #4]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d13f      	bne.n	801d82c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801d7ac:	69bb      	ldr	r3, [r7, #24]
 801d7ae:	881b      	ldrh	r3, [r3, #0]
 801d7b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d7b4:	d106      	bne.n	801d7c4 <mem_trim+0xe8>
 801d7b6:	4b41      	ldr	r3, [pc, #260]	; (801d8bc <mem_trim+0x1e0>)
 801d7b8:	f240 22f5 	movw	r2, #757	; 0x2f5
 801d7bc:	4943      	ldr	r1, [pc, #268]	; (801d8cc <mem_trim+0x1f0>)
 801d7be:	4841      	ldr	r0, [pc, #260]	; (801d8c4 <mem_trim+0x1e8>)
 801d7c0:	f004 fed0 	bl	8022564 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801d7c4:	693b      	ldr	r3, [r7, #16]
 801d7c6:	881b      	ldrh	r3, [r3, #0]
 801d7c8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801d7ca:	8afa      	ldrh	r2, [r7, #22]
 801d7cc:	8bfb      	ldrh	r3, [r7, #30]
 801d7ce:	4413      	add	r3, r2
 801d7d0:	b29b      	uxth	r3, r3
 801d7d2:	3308      	adds	r3, #8
 801d7d4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801d7d6:	4b3e      	ldr	r3, [pc, #248]	; (801d8d0 <mem_trim+0x1f4>)
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	693a      	ldr	r2, [r7, #16]
 801d7dc:	429a      	cmp	r2, r3
 801d7de:	d106      	bne.n	801d7ee <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801d7e0:	89fb      	ldrh	r3, [r7, #14]
 801d7e2:	4618      	mov	r0, r3
 801d7e4:	f7ff fdd2 	bl	801d38c <ptr_to_mem>
 801d7e8:	4603      	mov	r3, r0
 801d7ea:	4a39      	ldr	r2, [pc, #228]	; (801d8d0 <mem_trim+0x1f4>)
 801d7ec:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801d7ee:	89fb      	ldrh	r3, [r7, #14]
 801d7f0:	4618      	mov	r0, r3
 801d7f2:	f7ff fdcb 	bl	801d38c <ptr_to_mem>
 801d7f6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801d7f8:	693b      	ldr	r3, [r7, #16]
 801d7fa:	2200      	movs	r2, #0
 801d7fc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801d7fe:	693b      	ldr	r3, [r7, #16]
 801d800:	89ba      	ldrh	r2, [r7, #12]
 801d802:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801d804:	693b      	ldr	r3, [r7, #16]
 801d806:	8afa      	ldrh	r2, [r7, #22]
 801d808:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801d80a:	69bb      	ldr	r3, [r7, #24]
 801d80c:	89fa      	ldrh	r2, [r7, #14]
 801d80e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801d810:	693b      	ldr	r3, [r7, #16]
 801d812:	881b      	ldrh	r3, [r3, #0]
 801d814:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d818:	d047      	beq.n	801d8aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801d81a:	693b      	ldr	r3, [r7, #16]
 801d81c:	881b      	ldrh	r3, [r3, #0]
 801d81e:	4618      	mov	r0, r3
 801d820:	f7ff fdb4 	bl	801d38c <ptr_to_mem>
 801d824:	4602      	mov	r2, r0
 801d826:	89fb      	ldrh	r3, [r7, #14]
 801d828:	8053      	strh	r3, [r2, #2]
 801d82a:	e03e      	b.n	801d8aa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801d82c:	8bfb      	ldrh	r3, [r7, #30]
 801d82e:	f103 0214 	add.w	r2, r3, #20
 801d832:	8abb      	ldrh	r3, [r7, #20]
 801d834:	429a      	cmp	r2, r3
 801d836:	d838      	bhi.n	801d8aa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801d838:	8afa      	ldrh	r2, [r7, #22]
 801d83a:	8bfb      	ldrh	r3, [r7, #30]
 801d83c:	4413      	add	r3, r2
 801d83e:	b29b      	uxth	r3, r3
 801d840:	3308      	adds	r3, #8
 801d842:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801d844:	69bb      	ldr	r3, [r7, #24]
 801d846:	881b      	ldrh	r3, [r3, #0]
 801d848:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d84c:	d106      	bne.n	801d85c <mem_trim+0x180>
 801d84e:	4b1b      	ldr	r3, [pc, #108]	; (801d8bc <mem_trim+0x1e0>)
 801d850:	f240 3216 	movw	r2, #790	; 0x316
 801d854:	491d      	ldr	r1, [pc, #116]	; (801d8cc <mem_trim+0x1f0>)
 801d856:	481b      	ldr	r0, [pc, #108]	; (801d8c4 <mem_trim+0x1e8>)
 801d858:	f004 fe84 	bl	8022564 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801d85c:	89fb      	ldrh	r3, [r7, #14]
 801d85e:	4618      	mov	r0, r3
 801d860:	f7ff fd94 	bl	801d38c <ptr_to_mem>
 801d864:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801d866:	4b1a      	ldr	r3, [pc, #104]	; (801d8d0 <mem_trim+0x1f4>)
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	693a      	ldr	r2, [r7, #16]
 801d86c:	429a      	cmp	r2, r3
 801d86e:	d202      	bcs.n	801d876 <mem_trim+0x19a>
      lfree = mem2;
 801d870:	4a17      	ldr	r2, [pc, #92]	; (801d8d0 <mem_trim+0x1f4>)
 801d872:	693b      	ldr	r3, [r7, #16]
 801d874:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801d876:	693b      	ldr	r3, [r7, #16]
 801d878:	2200      	movs	r2, #0
 801d87a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801d87c:	69bb      	ldr	r3, [r7, #24]
 801d87e:	881a      	ldrh	r2, [r3, #0]
 801d880:	693b      	ldr	r3, [r7, #16]
 801d882:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801d884:	693b      	ldr	r3, [r7, #16]
 801d886:	8afa      	ldrh	r2, [r7, #22]
 801d888:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801d88a:	69bb      	ldr	r3, [r7, #24]
 801d88c:	89fa      	ldrh	r2, [r7, #14]
 801d88e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801d890:	693b      	ldr	r3, [r7, #16]
 801d892:	881b      	ldrh	r3, [r3, #0]
 801d894:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d898:	d007      	beq.n	801d8aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801d89a:	693b      	ldr	r3, [r7, #16]
 801d89c:	881b      	ldrh	r3, [r3, #0]
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f7ff fd74 	bl	801d38c <ptr_to_mem>
 801d8a4:	4602      	mov	r2, r0
 801d8a6:	89fb      	ldrh	r3, [r7, #14]
 801d8a8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801d8aa:	687b      	ldr	r3, [r7, #4]
}
 801d8ac:	4618      	mov	r0, r3
 801d8ae:	3720      	adds	r7, #32
 801d8b0:	46bd      	mov	sp, r7
 801d8b2:	bd80      	pop	{r7, pc}
 801d8b4:	20010dcc 	.word	0x20010dcc
 801d8b8:	20010dd0 	.word	0x20010dd0
 801d8bc:	08027214 	.word	0x08027214
 801d8c0:	080273d0 	.word	0x080273d0
 801d8c4:	080272a8 	.word	0x080272a8
 801d8c8:	080273e8 	.word	0x080273e8
 801d8cc:	08027408 	.word	0x08027408
 801d8d0:	20010dd4 	.word	0x20010dd4

0801d8d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b088      	sub	sp, #32
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	4603      	mov	r3, r0
 801d8dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801d8de:	88fb      	ldrh	r3, [r7, #6]
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	d101      	bne.n	801d8e8 <mem_malloc+0x14>
    return NULL;
 801d8e4:	2300      	movs	r3, #0
 801d8e6:	e0d9      	b.n	801da9c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801d8e8:	88fb      	ldrh	r3, [r7, #6]
 801d8ea:	3303      	adds	r3, #3
 801d8ec:	b29b      	uxth	r3, r3
 801d8ee:	f023 0303 	bic.w	r3, r3, #3
 801d8f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801d8f4:	8bbb      	ldrh	r3, [r7, #28]
 801d8f6:	2b0b      	cmp	r3, #11
 801d8f8:	d801      	bhi.n	801d8fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801d8fa:	230c      	movs	r3, #12
 801d8fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801d8fe:	8bbb      	ldrh	r3, [r7, #28]
 801d900:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d904:	d803      	bhi.n	801d90e <mem_malloc+0x3a>
 801d906:	8bba      	ldrh	r2, [r7, #28]
 801d908:	88fb      	ldrh	r3, [r7, #6]
 801d90a:	429a      	cmp	r2, r3
 801d90c:	d201      	bcs.n	801d912 <mem_malloc+0x3e>
    return NULL;
 801d90e:	2300      	movs	r3, #0
 801d910:	e0c4      	b.n	801da9c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801d912:	4b64      	ldr	r3, [pc, #400]	; (801daa4 <mem_malloc+0x1d0>)
 801d914:	681b      	ldr	r3, [r3, #0]
 801d916:	4618      	mov	r0, r3
 801d918:	f7ff fd4a 	bl	801d3b0 <mem_to_ptr>
 801d91c:	4603      	mov	r3, r0
 801d91e:	83fb      	strh	r3, [r7, #30]
 801d920:	e0b4      	b.n	801da8c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801d922:	8bfb      	ldrh	r3, [r7, #30]
 801d924:	4618      	mov	r0, r3
 801d926:	f7ff fd31 	bl	801d38c <ptr_to_mem>
 801d92a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801d92c:	697b      	ldr	r3, [r7, #20]
 801d92e:	791b      	ldrb	r3, [r3, #4]
 801d930:	2b00      	cmp	r3, #0
 801d932:	f040 80a4 	bne.w	801da7e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801d936:	697b      	ldr	r3, [r7, #20]
 801d938:	881b      	ldrh	r3, [r3, #0]
 801d93a:	461a      	mov	r2, r3
 801d93c:	8bfb      	ldrh	r3, [r7, #30]
 801d93e:	1ad3      	subs	r3, r2, r3
 801d940:	f1a3 0208 	sub.w	r2, r3, #8
 801d944:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801d946:	429a      	cmp	r2, r3
 801d948:	f0c0 8099 	bcc.w	801da7e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801d94c:	697b      	ldr	r3, [r7, #20]
 801d94e:	881b      	ldrh	r3, [r3, #0]
 801d950:	461a      	mov	r2, r3
 801d952:	8bfb      	ldrh	r3, [r7, #30]
 801d954:	1ad3      	subs	r3, r2, r3
 801d956:	f1a3 0208 	sub.w	r2, r3, #8
 801d95a:	8bbb      	ldrh	r3, [r7, #28]
 801d95c:	3314      	adds	r3, #20
 801d95e:	429a      	cmp	r2, r3
 801d960:	d333      	bcc.n	801d9ca <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801d962:	8bfa      	ldrh	r2, [r7, #30]
 801d964:	8bbb      	ldrh	r3, [r7, #28]
 801d966:	4413      	add	r3, r2
 801d968:	b29b      	uxth	r3, r3
 801d96a:	3308      	adds	r3, #8
 801d96c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801d96e:	8a7b      	ldrh	r3, [r7, #18]
 801d970:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d974:	d106      	bne.n	801d984 <mem_malloc+0xb0>
 801d976:	4b4c      	ldr	r3, [pc, #304]	; (801daa8 <mem_malloc+0x1d4>)
 801d978:	f240 3287 	movw	r2, #903	; 0x387
 801d97c:	494b      	ldr	r1, [pc, #300]	; (801daac <mem_malloc+0x1d8>)
 801d97e:	484c      	ldr	r0, [pc, #304]	; (801dab0 <mem_malloc+0x1dc>)
 801d980:	f004 fdf0 	bl	8022564 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801d984:	8a7b      	ldrh	r3, [r7, #18]
 801d986:	4618      	mov	r0, r3
 801d988:	f7ff fd00 	bl	801d38c <ptr_to_mem>
 801d98c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	2200      	movs	r2, #0
 801d992:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801d994:	697b      	ldr	r3, [r7, #20]
 801d996:	881a      	ldrh	r2, [r3, #0]
 801d998:	68fb      	ldr	r3, [r7, #12]
 801d99a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801d99c:	68fb      	ldr	r3, [r7, #12]
 801d99e:	8bfa      	ldrh	r2, [r7, #30]
 801d9a0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801d9a2:	697b      	ldr	r3, [r7, #20]
 801d9a4:	8a7a      	ldrh	r2, [r7, #18]
 801d9a6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801d9a8:	697b      	ldr	r3, [r7, #20]
 801d9aa:	2201      	movs	r2, #1
 801d9ac:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	881b      	ldrh	r3, [r3, #0]
 801d9b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d9b6:	d00b      	beq.n	801d9d0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	881b      	ldrh	r3, [r3, #0]
 801d9bc:	4618      	mov	r0, r3
 801d9be:	f7ff fce5 	bl	801d38c <ptr_to_mem>
 801d9c2:	4602      	mov	r2, r0
 801d9c4:	8a7b      	ldrh	r3, [r7, #18]
 801d9c6:	8053      	strh	r3, [r2, #2]
 801d9c8:	e002      	b.n	801d9d0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801d9ca:	697b      	ldr	r3, [r7, #20]
 801d9cc:	2201      	movs	r2, #1
 801d9ce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801d9d0:	4b34      	ldr	r3, [pc, #208]	; (801daa4 <mem_malloc+0x1d0>)
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	697a      	ldr	r2, [r7, #20]
 801d9d6:	429a      	cmp	r2, r3
 801d9d8:	d127      	bne.n	801da2a <mem_malloc+0x156>
          struct mem *cur = lfree;
 801d9da:	4b32      	ldr	r3, [pc, #200]	; (801daa4 <mem_malloc+0x1d0>)
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801d9e0:	e005      	b.n	801d9ee <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801d9e2:	69bb      	ldr	r3, [r7, #24]
 801d9e4:	881b      	ldrh	r3, [r3, #0]
 801d9e6:	4618      	mov	r0, r3
 801d9e8:	f7ff fcd0 	bl	801d38c <ptr_to_mem>
 801d9ec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801d9ee:	69bb      	ldr	r3, [r7, #24]
 801d9f0:	791b      	ldrb	r3, [r3, #4]
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d004      	beq.n	801da00 <mem_malloc+0x12c>
 801d9f6:	4b2f      	ldr	r3, [pc, #188]	; (801dab4 <mem_malloc+0x1e0>)
 801d9f8:	681b      	ldr	r3, [r3, #0]
 801d9fa:	69ba      	ldr	r2, [r7, #24]
 801d9fc:	429a      	cmp	r2, r3
 801d9fe:	d1f0      	bne.n	801d9e2 <mem_malloc+0x10e>
          }
          lfree = cur;
 801da00:	4a28      	ldr	r2, [pc, #160]	; (801daa4 <mem_malloc+0x1d0>)
 801da02:	69bb      	ldr	r3, [r7, #24]
 801da04:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801da06:	4b27      	ldr	r3, [pc, #156]	; (801daa4 <mem_malloc+0x1d0>)
 801da08:	681a      	ldr	r2, [r3, #0]
 801da0a:	4b2a      	ldr	r3, [pc, #168]	; (801dab4 <mem_malloc+0x1e0>)
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	429a      	cmp	r2, r3
 801da10:	d00b      	beq.n	801da2a <mem_malloc+0x156>
 801da12:	4b24      	ldr	r3, [pc, #144]	; (801daa4 <mem_malloc+0x1d0>)
 801da14:	681b      	ldr	r3, [r3, #0]
 801da16:	791b      	ldrb	r3, [r3, #4]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d006      	beq.n	801da2a <mem_malloc+0x156>
 801da1c:	4b22      	ldr	r3, [pc, #136]	; (801daa8 <mem_malloc+0x1d4>)
 801da1e:	f240 32b5 	movw	r2, #949	; 0x3b5
 801da22:	4925      	ldr	r1, [pc, #148]	; (801dab8 <mem_malloc+0x1e4>)
 801da24:	4822      	ldr	r0, [pc, #136]	; (801dab0 <mem_malloc+0x1dc>)
 801da26:	f004 fd9d 	bl	8022564 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801da2a:	8bba      	ldrh	r2, [r7, #28]
 801da2c:	697b      	ldr	r3, [r7, #20]
 801da2e:	4413      	add	r3, r2
 801da30:	3308      	adds	r3, #8
 801da32:	4a20      	ldr	r2, [pc, #128]	; (801dab4 <mem_malloc+0x1e0>)
 801da34:	6812      	ldr	r2, [r2, #0]
 801da36:	4293      	cmp	r3, r2
 801da38:	d906      	bls.n	801da48 <mem_malloc+0x174>
 801da3a:	4b1b      	ldr	r3, [pc, #108]	; (801daa8 <mem_malloc+0x1d4>)
 801da3c:	f240 32b9 	movw	r2, #953	; 0x3b9
 801da40:	491e      	ldr	r1, [pc, #120]	; (801dabc <mem_malloc+0x1e8>)
 801da42:	481b      	ldr	r0, [pc, #108]	; (801dab0 <mem_malloc+0x1dc>)
 801da44:	f004 fd8e 	bl	8022564 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801da48:	697b      	ldr	r3, [r7, #20]
 801da4a:	f003 0303 	and.w	r3, r3, #3
 801da4e:	2b00      	cmp	r3, #0
 801da50:	d006      	beq.n	801da60 <mem_malloc+0x18c>
 801da52:	4b15      	ldr	r3, [pc, #84]	; (801daa8 <mem_malloc+0x1d4>)
 801da54:	f240 32bb 	movw	r2, #955	; 0x3bb
 801da58:	4919      	ldr	r1, [pc, #100]	; (801dac0 <mem_malloc+0x1ec>)
 801da5a:	4815      	ldr	r0, [pc, #84]	; (801dab0 <mem_malloc+0x1dc>)
 801da5c:	f004 fd82 	bl	8022564 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801da60:	697b      	ldr	r3, [r7, #20]
 801da62:	f003 0303 	and.w	r3, r3, #3
 801da66:	2b00      	cmp	r3, #0
 801da68:	d006      	beq.n	801da78 <mem_malloc+0x1a4>
 801da6a:	4b0f      	ldr	r3, [pc, #60]	; (801daa8 <mem_malloc+0x1d4>)
 801da6c:	f240 32bd 	movw	r2, #957	; 0x3bd
 801da70:	4914      	ldr	r1, [pc, #80]	; (801dac4 <mem_malloc+0x1f0>)
 801da72:	480f      	ldr	r0, [pc, #60]	; (801dab0 <mem_malloc+0x1dc>)
 801da74:	f004 fd76 	bl	8022564 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801da78:	697b      	ldr	r3, [r7, #20]
 801da7a:	3308      	adds	r3, #8
 801da7c:	e00e      	b.n	801da9c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801da7e:	8bfb      	ldrh	r3, [r7, #30]
 801da80:	4618      	mov	r0, r3
 801da82:	f7ff fc83 	bl	801d38c <ptr_to_mem>
 801da86:	4603      	mov	r3, r0
 801da88:	881b      	ldrh	r3, [r3, #0]
 801da8a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801da8c:	8bfa      	ldrh	r2, [r7, #30]
 801da8e:	8bbb      	ldrh	r3, [r7, #28]
 801da90:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801da94:	429a      	cmp	r2, r3
 801da96:	f4ff af44 	bcc.w	801d922 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801da9a:	2300      	movs	r3, #0
}
 801da9c:	4618      	mov	r0, r3
 801da9e:	3720      	adds	r7, #32
 801daa0:	46bd      	mov	sp, r7
 801daa2:	bd80      	pop	{r7, pc}
 801daa4:	20010dd4 	.word	0x20010dd4
 801daa8:	08027214 	.word	0x08027214
 801daac:	08027408 	.word	0x08027408
 801dab0:	080272a8 	.word	0x080272a8
 801dab4:	20010dd0 	.word	0x20010dd0
 801dab8:	0802741c 	.word	0x0802741c
 801dabc:	08027438 	.word	0x08027438
 801dac0:	08027468 	.word	0x08027468
 801dac4:	08027498 	.word	0x08027498

0801dac8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801dac8:	b480      	push	{r7}
 801daca:	b085      	sub	sp, #20
 801dacc:	af00      	add	r7, sp, #0
 801dace:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	689b      	ldr	r3, [r3, #8]
 801dad4:	2200      	movs	r2, #0
 801dad6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	685b      	ldr	r3, [r3, #4]
 801dadc:	3303      	adds	r3, #3
 801dade:	f023 0303 	bic.w	r3, r3, #3
 801dae2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801dae4:	2300      	movs	r3, #0
 801dae6:	60fb      	str	r3, [r7, #12]
 801dae8:	e011      	b.n	801db0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	689b      	ldr	r3, [r3, #8]
 801daee:	681a      	ldr	r2, [r3, #0]
 801daf0:	68bb      	ldr	r3, [r7, #8]
 801daf2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	689b      	ldr	r3, [r3, #8]
 801daf8:	68ba      	ldr	r2, [r7, #8]
 801dafa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	881b      	ldrh	r3, [r3, #0]
 801db00:	461a      	mov	r2, r3
 801db02:	68bb      	ldr	r3, [r7, #8]
 801db04:	4413      	add	r3, r2
 801db06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	3301      	adds	r3, #1
 801db0c:	60fb      	str	r3, [r7, #12]
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	885b      	ldrh	r3, [r3, #2]
 801db12:	461a      	mov	r2, r3
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	4293      	cmp	r3, r2
 801db18:	dbe7      	blt.n	801daea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801db1a:	bf00      	nop
 801db1c:	bf00      	nop
 801db1e:	3714      	adds	r7, #20
 801db20:	46bd      	mov	sp, r7
 801db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db26:	4770      	bx	lr

0801db28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801db28:	b580      	push	{r7, lr}
 801db2a:	b082      	sub	sp, #8
 801db2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801db2e:	2300      	movs	r3, #0
 801db30:	80fb      	strh	r3, [r7, #6]
 801db32:	e009      	b.n	801db48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801db34:	88fb      	ldrh	r3, [r7, #6]
 801db36:	4a08      	ldr	r2, [pc, #32]	; (801db58 <memp_init+0x30>)
 801db38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801db3c:	4618      	mov	r0, r3
 801db3e:	f7ff ffc3 	bl	801dac8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801db42:	88fb      	ldrh	r3, [r7, #6]
 801db44:	3301      	adds	r3, #1
 801db46:	80fb      	strh	r3, [r7, #6]
 801db48:	88fb      	ldrh	r3, [r7, #6]
 801db4a:	2b05      	cmp	r3, #5
 801db4c:	d9f2      	bls.n	801db34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801db4e:	bf00      	nop
 801db50:	bf00      	nop
 801db52:	3708      	adds	r7, #8
 801db54:	46bd      	mov	sp, r7
 801db56:	bd80      	pop	{r7, pc}
 801db58:	08029010 	.word	0x08029010

0801db5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801db5c:	b580      	push	{r7, lr}
 801db5e:	b084      	sub	sp, #16
 801db60:	af00      	add	r7, sp, #0
 801db62:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	689b      	ldr	r3, [r3, #8]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d012      	beq.n	801db98 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	689b      	ldr	r3, [r3, #8]
 801db76:	68fa      	ldr	r2, [r7, #12]
 801db78:	6812      	ldr	r2, [r2, #0]
 801db7a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801db7c:	68fb      	ldr	r3, [r7, #12]
 801db7e:	f003 0303 	and.w	r3, r3, #3
 801db82:	2b00      	cmp	r3, #0
 801db84:	d006      	beq.n	801db94 <do_memp_malloc_pool+0x38>
 801db86:	4b07      	ldr	r3, [pc, #28]	; (801dba4 <do_memp_malloc_pool+0x48>)
 801db88:	f44f 728c 	mov.w	r2, #280	; 0x118
 801db8c:	4906      	ldr	r1, [pc, #24]	; (801dba8 <do_memp_malloc_pool+0x4c>)
 801db8e:	4807      	ldr	r0, [pc, #28]	; (801dbac <do_memp_malloc_pool+0x50>)
 801db90:	f004 fce8 	bl	8022564 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801db94:	68fb      	ldr	r3, [r7, #12]
 801db96:	e000      	b.n	801db9a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801db98:	2300      	movs	r3, #0
}
 801db9a:	4618      	mov	r0, r3
 801db9c:	3710      	adds	r7, #16
 801db9e:	46bd      	mov	sp, r7
 801dba0:	bd80      	pop	{r7, pc}
 801dba2:	bf00      	nop
 801dba4:	080274bc 	.word	0x080274bc
 801dba8:	0802753c 	.word	0x0802753c
 801dbac:	08027560 	.word	0x08027560

0801dbb0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801dbb0:	b580      	push	{r7, lr}
 801dbb2:	b082      	sub	sp, #8
 801dbb4:	af00      	add	r7, sp, #0
 801dbb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d106      	bne.n	801dbcc <memp_malloc_pool+0x1c>
 801dbbe:	4b0a      	ldr	r3, [pc, #40]	; (801dbe8 <memp_malloc_pool+0x38>)
 801dbc0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801dbc4:	4909      	ldr	r1, [pc, #36]	; (801dbec <memp_malloc_pool+0x3c>)
 801dbc6:	480a      	ldr	r0, [pc, #40]	; (801dbf0 <memp_malloc_pool+0x40>)
 801dbc8:	f004 fccc 	bl	8022564 <iprintf>
  if (desc == NULL) {
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d101      	bne.n	801dbd6 <memp_malloc_pool+0x26>
    return NULL;
 801dbd2:	2300      	movs	r3, #0
 801dbd4:	e003      	b.n	801dbde <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801dbd6:	6878      	ldr	r0, [r7, #4]
 801dbd8:	f7ff ffc0 	bl	801db5c <do_memp_malloc_pool>
 801dbdc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801dbde:	4618      	mov	r0, r3
 801dbe0:	3708      	adds	r7, #8
 801dbe2:	46bd      	mov	sp, r7
 801dbe4:	bd80      	pop	{r7, pc}
 801dbe6:	bf00      	nop
 801dbe8:	080274bc 	.word	0x080274bc
 801dbec:	08027588 	.word	0x08027588
 801dbf0:	08027560 	.word	0x08027560

0801dbf4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801dbf4:	b580      	push	{r7, lr}
 801dbf6:	b084      	sub	sp, #16
 801dbf8:	af00      	add	r7, sp, #0
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801dbfe:	79fb      	ldrb	r3, [r7, #7]
 801dc00:	2b05      	cmp	r3, #5
 801dc02:	d908      	bls.n	801dc16 <memp_malloc+0x22>
 801dc04:	4b0a      	ldr	r3, [pc, #40]	; (801dc30 <memp_malloc+0x3c>)
 801dc06:	f240 1257 	movw	r2, #343	; 0x157
 801dc0a:	490a      	ldr	r1, [pc, #40]	; (801dc34 <memp_malloc+0x40>)
 801dc0c:	480a      	ldr	r0, [pc, #40]	; (801dc38 <memp_malloc+0x44>)
 801dc0e:	f004 fca9 	bl	8022564 <iprintf>
 801dc12:	2300      	movs	r3, #0
 801dc14:	e008      	b.n	801dc28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801dc16:	79fb      	ldrb	r3, [r7, #7]
 801dc18:	4a08      	ldr	r2, [pc, #32]	; (801dc3c <memp_malloc+0x48>)
 801dc1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f7ff ff9c 	bl	801db5c <do_memp_malloc_pool>
 801dc24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801dc26:	68fb      	ldr	r3, [r7, #12]
}
 801dc28:	4618      	mov	r0, r3
 801dc2a:	3710      	adds	r7, #16
 801dc2c:	46bd      	mov	sp, r7
 801dc2e:	bd80      	pop	{r7, pc}
 801dc30:	080274bc 	.word	0x080274bc
 801dc34:	0802759c 	.word	0x0802759c
 801dc38:	08027560 	.word	0x08027560
 801dc3c:	08029010 	.word	0x08029010

0801dc40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801dc40:	b580      	push	{r7, lr}
 801dc42:	b084      	sub	sp, #16
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	6078      	str	r0, [r7, #4]
 801dc48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801dc4a:	683b      	ldr	r3, [r7, #0]
 801dc4c:	f003 0303 	and.w	r3, r3, #3
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d006      	beq.n	801dc62 <do_memp_free_pool+0x22>
 801dc54:	4b0a      	ldr	r3, [pc, #40]	; (801dc80 <do_memp_free_pool+0x40>)
 801dc56:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801dc5a:	490a      	ldr	r1, [pc, #40]	; (801dc84 <do_memp_free_pool+0x44>)
 801dc5c:	480a      	ldr	r0, [pc, #40]	; (801dc88 <do_memp_free_pool+0x48>)
 801dc5e:	f004 fc81 	bl	8022564 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801dc62:	683b      	ldr	r3, [r7, #0]
 801dc64:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	689b      	ldr	r3, [r3, #8]
 801dc6a:	681a      	ldr	r2, [r3, #0]
 801dc6c:	68fb      	ldr	r3, [r7, #12]
 801dc6e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	689b      	ldr	r3, [r3, #8]
 801dc74:	68fa      	ldr	r2, [r7, #12]
 801dc76:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801dc78:	bf00      	nop
 801dc7a:	3710      	adds	r7, #16
 801dc7c:	46bd      	mov	sp, r7
 801dc7e:	bd80      	pop	{r7, pc}
 801dc80:	080274bc 	.word	0x080274bc
 801dc84:	080275bc 	.word	0x080275bc
 801dc88:	08027560 	.word	0x08027560

0801dc8c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801dc8c:	b580      	push	{r7, lr}
 801dc8e:	b082      	sub	sp, #8
 801dc90:	af00      	add	r7, sp, #0
 801dc92:	6078      	str	r0, [r7, #4]
 801dc94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d106      	bne.n	801dcaa <memp_free_pool+0x1e>
 801dc9c:	4b0a      	ldr	r3, [pc, #40]	; (801dcc8 <memp_free_pool+0x3c>)
 801dc9e:	f240 1295 	movw	r2, #405	; 0x195
 801dca2:	490a      	ldr	r1, [pc, #40]	; (801dccc <memp_free_pool+0x40>)
 801dca4:	480a      	ldr	r0, [pc, #40]	; (801dcd0 <memp_free_pool+0x44>)
 801dca6:	f004 fc5d 	bl	8022564 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	d007      	beq.n	801dcc0 <memp_free_pool+0x34>
 801dcb0:	683b      	ldr	r3, [r7, #0]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d004      	beq.n	801dcc0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801dcb6:	6839      	ldr	r1, [r7, #0]
 801dcb8:	6878      	ldr	r0, [r7, #4]
 801dcba:	f7ff ffc1 	bl	801dc40 <do_memp_free_pool>
 801dcbe:	e000      	b.n	801dcc2 <memp_free_pool+0x36>
    return;
 801dcc0:	bf00      	nop
}
 801dcc2:	3708      	adds	r7, #8
 801dcc4:	46bd      	mov	sp, r7
 801dcc6:	bd80      	pop	{r7, pc}
 801dcc8:	080274bc 	.word	0x080274bc
 801dccc:	08027588 	.word	0x08027588
 801dcd0:	08027560 	.word	0x08027560

0801dcd4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801dcd4:	b580      	push	{r7, lr}
 801dcd6:	b082      	sub	sp, #8
 801dcd8:	af00      	add	r7, sp, #0
 801dcda:	4603      	mov	r3, r0
 801dcdc:	6039      	str	r1, [r7, #0]
 801dcde:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801dce0:	79fb      	ldrb	r3, [r7, #7]
 801dce2:	2b05      	cmp	r3, #5
 801dce4:	d907      	bls.n	801dcf6 <memp_free+0x22>
 801dce6:	4b0c      	ldr	r3, [pc, #48]	; (801dd18 <memp_free+0x44>)
 801dce8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801dcec:	490b      	ldr	r1, [pc, #44]	; (801dd1c <memp_free+0x48>)
 801dcee:	480c      	ldr	r0, [pc, #48]	; (801dd20 <memp_free+0x4c>)
 801dcf0:	f004 fc38 	bl	8022564 <iprintf>
 801dcf4:	e00c      	b.n	801dd10 <memp_free+0x3c>

  if (mem == NULL) {
 801dcf6:	683b      	ldr	r3, [r7, #0]
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d008      	beq.n	801dd0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801dcfc:	79fb      	ldrb	r3, [r7, #7]
 801dcfe:	4a09      	ldr	r2, [pc, #36]	; (801dd24 <memp_free+0x50>)
 801dd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dd04:	6839      	ldr	r1, [r7, #0]
 801dd06:	4618      	mov	r0, r3
 801dd08:	f7ff ff9a 	bl	801dc40 <do_memp_free_pool>
 801dd0c:	e000      	b.n	801dd10 <memp_free+0x3c>
    return;
 801dd0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801dd10:	3708      	adds	r7, #8
 801dd12:	46bd      	mov	sp, r7
 801dd14:	bd80      	pop	{r7, pc}
 801dd16:	bf00      	nop
 801dd18:	080274bc 	.word	0x080274bc
 801dd1c:	080275dc 	.word	0x080275dc
 801dd20:	08027560 	.word	0x08027560
 801dd24:	08029010 	.word	0x08029010

0801dd28 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 801dd28:	b580      	push	{r7, lr}
 801dd2a:	b082      	sub	sp, #8
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	d105      	bne.n	801dd42 <netif_loopif_init+0x1a>
 801dd36:	4b0b      	ldr	r3, [pc, #44]	; (801dd64 <netif_loopif_init+0x3c>)
 801dd38:	2299      	movs	r2, #153	; 0x99
 801dd3a:	490b      	ldr	r1, [pc, #44]	; (801dd68 <netif_loopif_init+0x40>)
 801dd3c:	480b      	ldr	r0, [pc, #44]	; (801dd6c <netif_loopif_init+0x44>)
 801dd3e:	f004 fc11 	bl	8022564 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	226c      	movs	r2, #108	; 0x6c
 801dd46:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	226f      	movs	r2, #111	; 0x6f
 801dd4e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	4a06      	ldr	r2, [pc, #24]	; (801dd70 <netif_loopif_init+0x48>)
 801dd56:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 801dd58:	2300      	movs	r3, #0
}
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	3708      	adds	r7, #8
 801dd5e:	46bd      	mov	sp, r7
 801dd60:	bd80      	pop	{r7, pc}
 801dd62:	bf00      	nop
 801dd64:	080275f8 	.word	0x080275f8
 801dd68:	08027678 	.word	0x08027678
 801dd6c:	0802769c 	.word	0x0802769c
 801dd70:	0801e455 	.word	0x0801e455

0801dd74 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801dd74:	b580      	push	{r7, lr}
 801dd76:	b088      	sub	sp, #32
 801dd78:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 801dd7a:	4b0f      	ldr	r3, [pc, #60]	; (801ddb8 <netif_init+0x44>)
 801dd7c:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 801dd7e:	4b0e      	ldr	r3, [pc, #56]	; (801ddb8 <netif_init+0x44>)
 801dd80:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 801dd82:	23ff      	movs	r3, #255	; 0xff
 801dd84:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 801dd86:	1d3b      	adds	r3, r7, #4
 801dd88:	f107 0208 	add.w	r2, r7, #8
 801dd8c:	f107 010c 	add.w	r1, r7, #12
 801dd90:	480a      	ldr	r0, [pc, #40]	; (801ddbc <netif_init+0x48>)
 801dd92:	9002      	str	r0, [sp, #8]
 801dd94:	480a      	ldr	r0, [pc, #40]	; (801ddc0 <netif_init+0x4c>)
 801dd96:	9001      	str	r0, [sp, #4]
 801dd98:	2000      	movs	r0, #0
 801dd9a:	9000      	str	r0, [sp, #0]
 801dd9c:	4809      	ldr	r0, [pc, #36]	; (801ddc4 <netif_init+0x50>)
 801dd9e:	f000 f813 	bl	801ddc8 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 801dda2:	4808      	ldr	r0, [pc, #32]	; (801ddc4 <netif_init+0x50>)
 801dda4:	f000 fa72 	bl	801e28c <netif_set_link_up>
  netif_set_up(&loop_netif);
 801dda8:	4806      	ldr	r0, [pc, #24]	; (801ddc4 <netif_init+0x50>)
 801ddaa:	f000 f9d1 	bl	801e150 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 801ddae:	bf00      	nop
 801ddb0:	3710      	adds	r7, #16
 801ddb2:	46bd      	mov	sp, r7
 801ddb4:	bd80      	pop	{r7, pc}
 801ddb6:	bf00      	nop
 801ddb8:	0100007f 	.word	0x0100007f
 801ddbc:	08020ef1 	.word	0x08020ef1
 801ddc0:	0801dd29 	.word	0x0801dd29
 801ddc4:	20013d7c 	.word	0x20013d7c

0801ddc8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801ddc8:	b580      	push	{r7, lr}
 801ddca:	b086      	sub	sp, #24
 801ddcc:	af00      	add	r7, sp, #0
 801ddce:	60f8      	str	r0, [r7, #12]
 801ddd0:	60b9      	str	r1, [r7, #8]
 801ddd2:	607a      	str	r2, [r7, #4]
 801ddd4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801ddd6:	68fb      	ldr	r3, [r7, #12]
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d108      	bne.n	801ddee <netif_add+0x26>
 801dddc:	4b5a      	ldr	r3, [pc, #360]	; (801df48 <netif_add+0x180>)
 801ddde:	f240 1227 	movw	r2, #295	; 0x127
 801dde2:	495a      	ldr	r1, [pc, #360]	; (801df4c <netif_add+0x184>)
 801dde4:	485a      	ldr	r0, [pc, #360]	; (801df50 <netif_add+0x188>)
 801dde6:	f004 fbbd 	bl	8022564 <iprintf>
 801ddea:	2300      	movs	r3, #0
 801ddec:	e0a8      	b.n	801df40 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d108      	bne.n	801de06 <netif_add+0x3e>
 801ddf4:	4b54      	ldr	r3, [pc, #336]	; (801df48 <netif_add+0x180>)
 801ddf6:	f44f 7294 	mov.w	r2, #296	; 0x128
 801ddfa:	4956      	ldr	r1, [pc, #344]	; (801df54 <netif_add+0x18c>)
 801ddfc:	4854      	ldr	r0, [pc, #336]	; (801df50 <netif_add+0x188>)
 801ddfe:	f004 fbb1 	bl	8022564 <iprintf>
 801de02:	2300      	movs	r3, #0
 801de04:	e09c      	b.n	801df40 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801de06:	68bb      	ldr	r3, [r7, #8]
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d101      	bne.n	801de10 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801de0c:	4b52      	ldr	r3, [pc, #328]	; (801df58 <netif_add+0x190>)
 801de0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	2b00      	cmp	r3, #0
 801de14:	d101      	bne.n	801de1a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801de16:	4b50      	ldr	r3, [pc, #320]	; (801df58 <netif_add+0x190>)
 801de18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801de1a:	683b      	ldr	r3, [r7, #0]
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d101      	bne.n	801de24 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801de20:	4b4d      	ldr	r3, [pc, #308]	; (801df58 <netif_add+0x190>)
 801de22:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801de24:	68fb      	ldr	r3, [r7, #12]
 801de26:	2200      	movs	r2, #0
 801de28:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801de2a:	68fb      	ldr	r3, [r7, #12]
 801de2c:	2200      	movs	r2, #0
 801de2e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801de30:	68fb      	ldr	r3, [r7, #12]
 801de32:	2200      	movs	r2, #0
 801de34:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801de36:	68fb      	ldr	r3, [r7, #12]
 801de38:	4a48      	ldr	r2, [pc, #288]	; (801df5c <netif_add+0x194>)
 801de3a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	2200      	movs	r2, #0
 801de40:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	2200      	movs	r2, #0
 801de46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	2200      	movs	r2, #0
 801de4e:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	2200      	movs	r2, #0
 801de54:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	2200      	movs	r2, #0
 801de5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801de5c:	68fb      	ldr	r3, [r7, #12]
 801de5e:	6a3a      	ldr	r2, [r7, #32]
 801de60:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801de62:	4b3f      	ldr	r3, [pc, #252]	; (801df60 <netif_add+0x198>)
 801de64:	781a      	ldrb	r2, [r3, #0]
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801de6c:	68fb      	ldr	r3, [r7, #12]
 801de6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de70:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801de72:	683b      	ldr	r3, [r7, #0]
 801de74:	687a      	ldr	r2, [r7, #4]
 801de76:	68b9      	ldr	r1, [r7, #8]
 801de78:	68f8      	ldr	r0, [r7, #12]
 801de7a:	f000 f90f 	bl	801e09c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801de7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de80:	68f8      	ldr	r0, [r7, #12]
 801de82:	4798      	blx	r3
 801de84:	4603      	mov	r3, r0
 801de86:	2b00      	cmp	r3, #0
 801de88:	d001      	beq.n	801de8e <netif_add+0xc6>
    return NULL;
 801de8a:	2300      	movs	r3, #0
 801de8c:	e058      	b.n	801df40 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801de8e:	68fb      	ldr	r3, [r7, #12]
 801de90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801de94:	2bff      	cmp	r3, #255	; 0xff
 801de96:	d103      	bne.n	801dea0 <netif_add+0xd8>
        netif->num = 0;
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	2200      	movs	r2, #0
 801de9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801dea0:	2300      	movs	r3, #0
 801dea2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801dea4:	4b2f      	ldr	r3, [pc, #188]	; (801df64 <netif_add+0x19c>)
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	617b      	str	r3, [r7, #20]
 801deaa:	e02b      	b.n	801df04 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801deac:	697a      	ldr	r2, [r7, #20]
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	429a      	cmp	r2, r3
 801deb2:	d106      	bne.n	801dec2 <netif_add+0xfa>
 801deb4:	4b24      	ldr	r3, [pc, #144]	; (801df48 <netif_add+0x180>)
 801deb6:	f240 128b 	movw	r2, #395	; 0x18b
 801deba:	492b      	ldr	r1, [pc, #172]	; (801df68 <netif_add+0x1a0>)
 801debc:	4824      	ldr	r0, [pc, #144]	; (801df50 <netif_add+0x188>)
 801debe:	f004 fb51 	bl	8022564 <iprintf>
        num_netifs++;
 801dec2:	693b      	ldr	r3, [r7, #16]
 801dec4:	3301      	adds	r3, #1
 801dec6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801dec8:	693b      	ldr	r3, [r7, #16]
 801deca:	2bff      	cmp	r3, #255	; 0xff
 801decc:	dd06      	ble.n	801dedc <netif_add+0x114>
 801dece:	4b1e      	ldr	r3, [pc, #120]	; (801df48 <netif_add+0x180>)
 801ded0:	f240 128d 	movw	r2, #397	; 0x18d
 801ded4:	4925      	ldr	r1, [pc, #148]	; (801df6c <netif_add+0x1a4>)
 801ded6:	481e      	ldr	r0, [pc, #120]	; (801df50 <netif_add+0x188>)
 801ded8:	f004 fb44 	bl	8022564 <iprintf>
        if (netif2->num == netif->num) {
 801dedc:	697b      	ldr	r3, [r7, #20]
 801dede:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dee8:	429a      	cmp	r2, r3
 801deea:	d108      	bne.n	801defe <netif_add+0x136>
          netif->num++;
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801def2:	3301      	adds	r3, #1
 801def4:	b2da      	uxtb	r2, r3
 801def6:	68fb      	ldr	r3, [r7, #12]
 801def8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801defc:	e005      	b.n	801df0a <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801defe:	697b      	ldr	r3, [r7, #20]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	617b      	str	r3, [r7, #20]
 801df04:	697b      	ldr	r3, [r7, #20]
 801df06:	2b00      	cmp	r3, #0
 801df08:	d1d0      	bne.n	801deac <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 801df0a:	697b      	ldr	r3, [r7, #20]
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d1be      	bne.n	801de8e <netif_add+0xc6>
  }
  if (netif->num == 254) {
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801df16:	2bfe      	cmp	r3, #254	; 0xfe
 801df18:	d103      	bne.n	801df22 <netif_add+0x15a>
    netif_num = 0;
 801df1a:	4b11      	ldr	r3, [pc, #68]	; (801df60 <netif_add+0x198>)
 801df1c:	2200      	movs	r2, #0
 801df1e:	701a      	strb	r2, [r3, #0]
 801df20:	e006      	b.n	801df30 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801df28:	3301      	adds	r3, #1
 801df2a:	b2da      	uxtb	r2, r3
 801df2c:	4b0c      	ldr	r3, [pc, #48]	; (801df60 <netif_add+0x198>)
 801df2e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801df30:	4b0c      	ldr	r3, [pc, #48]	; (801df64 <netif_add+0x19c>)
 801df32:	681a      	ldr	r2, [r3, #0]
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801df38:	4a0a      	ldr	r2, [pc, #40]	; (801df64 <netif_add+0x19c>)
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801df3e:	68fb      	ldr	r3, [r7, #12]
}
 801df40:	4618      	mov	r0, r3
 801df42:	3718      	adds	r7, #24
 801df44:	46bd      	mov	sp, r7
 801df46:	bd80      	pop	{r7, pc}
 801df48:	080275f8 	.word	0x080275f8
 801df4c:	080276fc 	.word	0x080276fc
 801df50:	0802769c 	.word	0x0802769c
 801df54:	08027718 	.word	0x08027718
 801df58:	08029038 	.word	0x08029038
 801df5c:	0801e473 	.word	0x0801e473
 801df60:	20013d78 	.word	0x20013d78
 801df64:	20013d70 	.word	0x20013d70
 801df68:	0802773c 	.word	0x0802773c
 801df6c:	08027750 	.word	0x08027750

0801df70 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801df70:	b580      	push	{r7, lr}
 801df72:	b082      	sub	sp, #8
 801df74:	af00      	add	r7, sp, #0
 801df76:	6078      	str	r0, [r7, #4]
 801df78:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801df7a:	6839      	ldr	r1, [r7, #0]
 801df7c:	6878      	ldr	r0, [r7, #4]
 801df7e:	f001 fe13 	bl	801fba8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801df82:	bf00      	nop
 801df84:	3708      	adds	r7, #8
 801df86:	46bd      	mov	sp, r7
 801df88:	bd80      	pop	{r7, pc}
	...

0801df8c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801df8c:	b580      	push	{r7, lr}
 801df8e:	b086      	sub	sp, #24
 801df90:	af00      	add	r7, sp, #0
 801df92:	60f8      	str	r0, [r7, #12]
 801df94:	60b9      	str	r1, [r7, #8]
 801df96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801df98:	68bb      	ldr	r3, [r7, #8]
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	d106      	bne.n	801dfac <netif_do_set_ipaddr+0x20>
 801df9e:	4b1d      	ldr	r3, [pc, #116]	; (801e014 <netif_do_set_ipaddr+0x88>)
 801dfa0:	f240 12cb 	movw	r2, #459	; 0x1cb
 801dfa4:	491c      	ldr	r1, [pc, #112]	; (801e018 <netif_do_set_ipaddr+0x8c>)
 801dfa6:	481d      	ldr	r0, [pc, #116]	; (801e01c <netif_do_set_ipaddr+0x90>)
 801dfa8:	f004 fadc 	bl	8022564 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d106      	bne.n	801dfc0 <netif_do_set_ipaddr+0x34>
 801dfb2:	4b18      	ldr	r3, [pc, #96]	; (801e014 <netif_do_set_ipaddr+0x88>)
 801dfb4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801dfb8:	4917      	ldr	r1, [pc, #92]	; (801e018 <netif_do_set_ipaddr+0x8c>)
 801dfba:	4818      	ldr	r0, [pc, #96]	; (801e01c <netif_do_set_ipaddr+0x90>)
 801dfbc:	f004 fad2 	bl	8022564 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801dfc0:	68bb      	ldr	r3, [r7, #8]
 801dfc2:	681a      	ldr	r2, [r3, #0]
 801dfc4:	68fb      	ldr	r3, [r7, #12]
 801dfc6:	3304      	adds	r3, #4
 801dfc8:	681b      	ldr	r3, [r3, #0]
 801dfca:	429a      	cmp	r2, r3
 801dfcc:	d01c      	beq.n	801e008 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801dfce:	68bb      	ldr	r3, [r7, #8]
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801dfd4:	68fb      	ldr	r3, [r7, #12]
 801dfd6:	3304      	adds	r3, #4
 801dfd8:	681a      	ldr	r2, [r3, #0]
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801dfde:	f107 0314 	add.w	r3, r7, #20
 801dfe2:	4619      	mov	r1, r3
 801dfe4:	6878      	ldr	r0, [r7, #4]
 801dfe6:	f7ff ffc3 	bl	801df70 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801dfea:	68bb      	ldr	r3, [r7, #8]
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d002      	beq.n	801dff6 <netif_do_set_ipaddr+0x6a>
 801dff0:	68bb      	ldr	r3, [r7, #8]
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	e000      	b.n	801dff8 <netif_do_set_ipaddr+0x6c>
 801dff6:	2300      	movs	r3, #0
 801dff8:	68fa      	ldr	r2, [r7, #12]
 801dffa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801dffc:	2101      	movs	r1, #1
 801dffe:	68f8      	ldr	r0, [r7, #12]
 801e000:	f000 f8d2 	bl	801e1a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801e004:	2301      	movs	r3, #1
 801e006:	e000      	b.n	801e00a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801e008:	2300      	movs	r3, #0
}
 801e00a:	4618      	mov	r0, r3
 801e00c:	3718      	adds	r7, #24
 801e00e:	46bd      	mov	sp, r7
 801e010:	bd80      	pop	{r7, pc}
 801e012:	bf00      	nop
 801e014:	080275f8 	.word	0x080275f8
 801e018:	08027780 	.word	0x08027780
 801e01c:	0802769c 	.word	0x0802769c

0801e020 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801e020:	b480      	push	{r7}
 801e022:	b085      	sub	sp, #20
 801e024:	af00      	add	r7, sp, #0
 801e026:	60f8      	str	r0, [r7, #12]
 801e028:	60b9      	str	r1, [r7, #8]
 801e02a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801e02c:	68bb      	ldr	r3, [r7, #8]
 801e02e:	681a      	ldr	r2, [r3, #0]
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	3308      	adds	r3, #8
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	429a      	cmp	r2, r3
 801e038:	d00a      	beq.n	801e050 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801e03a:	68bb      	ldr	r3, [r7, #8]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d002      	beq.n	801e046 <netif_do_set_netmask+0x26>
 801e040:	68bb      	ldr	r3, [r7, #8]
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	e000      	b.n	801e048 <netif_do_set_netmask+0x28>
 801e046:	2300      	movs	r3, #0
 801e048:	68fa      	ldr	r2, [r7, #12]
 801e04a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801e04c:	2301      	movs	r3, #1
 801e04e:	e000      	b.n	801e052 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801e050:	2300      	movs	r3, #0
}
 801e052:	4618      	mov	r0, r3
 801e054:	3714      	adds	r7, #20
 801e056:	46bd      	mov	sp, r7
 801e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e05c:	4770      	bx	lr

0801e05e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801e05e:	b480      	push	{r7}
 801e060:	b085      	sub	sp, #20
 801e062:	af00      	add	r7, sp, #0
 801e064:	60f8      	str	r0, [r7, #12]
 801e066:	60b9      	str	r1, [r7, #8]
 801e068:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801e06a:	68bb      	ldr	r3, [r7, #8]
 801e06c:	681a      	ldr	r2, [r3, #0]
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	330c      	adds	r3, #12
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	429a      	cmp	r2, r3
 801e076:	d00a      	beq.n	801e08e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801e078:	68bb      	ldr	r3, [r7, #8]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d002      	beq.n	801e084 <netif_do_set_gw+0x26>
 801e07e:	68bb      	ldr	r3, [r7, #8]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	e000      	b.n	801e086 <netif_do_set_gw+0x28>
 801e084:	2300      	movs	r3, #0
 801e086:	68fa      	ldr	r2, [r7, #12]
 801e088:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801e08a:	2301      	movs	r3, #1
 801e08c:	e000      	b.n	801e090 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801e08e:	2300      	movs	r3, #0
}
 801e090:	4618      	mov	r0, r3
 801e092:	3714      	adds	r7, #20
 801e094:	46bd      	mov	sp, r7
 801e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e09a:	4770      	bx	lr

0801e09c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b088      	sub	sp, #32
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	60f8      	str	r0, [r7, #12]
 801e0a4:	60b9      	str	r1, [r7, #8]
 801e0a6:	607a      	str	r2, [r7, #4]
 801e0a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801e0aa:	2300      	movs	r3, #0
 801e0ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801e0b2:	68bb      	ldr	r3, [r7, #8]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d101      	bne.n	801e0bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801e0b8:	4b1c      	ldr	r3, [pc, #112]	; (801e12c <netif_set_addr+0x90>)
 801e0ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d101      	bne.n	801e0c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801e0c2:	4b1a      	ldr	r3, [pc, #104]	; (801e12c <netif_set_addr+0x90>)
 801e0c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e0c6:	683b      	ldr	r3, [r7, #0]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d101      	bne.n	801e0d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801e0cc:	4b17      	ldr	r3, [pc, #92]	; (801e12c <netif_set_addr+0x90>)
 801e0ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801e0d0:	68bb      	ldr	r3, [r7, #8]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	d003      	beq.n	801e0de <netif_set_addr+0x42>
 801e0d6:	68bb      	ldr	r3, [r7, #8]
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d101      	bne.n	801e0e2 <netif_set_addr+0x46>
 801e0de:	2301      	movs	r3, #1
 801e0e0:	e000      	b.n	801e0e4 <netif_set_addr+0x48>
 801e0e2:	2300      	movs	r3, #0
 801e0e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 801e0e6:	697b      	ldr	r3, [r7, #20]
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	d006      	beq.n	801e0fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e0ec:	f107 0310 	add.w	r3, r7, #16
 801e0f0:	461a      	mov	r2, r3
 801e0f2:	68b9      	ldr	r1, [r7, #8]
 801e0f4:	68f8      	ldr	r0, [r7, #12]
 801e0f6:	f7ff ff49 	bl	801df8c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801e0fa:	69fa      	ldr	r2, [r7, #28]
 801e0fc:	6879      	ldr	r1, [r7, #4]
 801e0fe:	68f8      	ldr	r0, [r7, #12]
 801e100:	f7ff ff8e 	bl	801e020 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801e104:	69ba      	ldr	r2, [r7, #24]
 801e106:	6839      	ldr	r1, [r7, #0]
 801e108:	68f8      	ldr	r0, [r7, #12]
 801e10a:	f7ff ffa8 	bl	801e05e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801e10e:	697b      	ldr	r3, [r7, #20]
 801e110:	2b00      	cmp	r3, #0
 801e112:	d106      	bne.n	801e122 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e114:	f107 0310 	add.w	r3, r7, #16
 801e118:	461a      	mov	r2, r3
 801e11a:	68b9      	ldr	r1, [r7, #8]
 801e11c:	68f8      	ldr	r0, [r7, #12]
 801e11e:	f7ff ff35 	bl	801df8c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801e122:	bf00      	nop
 801e124:	3720      	adds	r7, #32
 801e126:	46bd      	mov	sp, r7
 801e128:	bd80      	pop	{r7, pc}
 801e12a:	bf00      	nop
 801e12c:	08029038 	.word	0x08029038

0801e130 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801e130:	b480      	push	{r7}
 801e132:	b083      	sub	sp, #12
 801e134:	af00      	add	r7, sp, #0
 801e136:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801e138:	4a04      	ldr	r2, [pc, #16]	; (801e14c <netif_set_default+0x1c>)
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801e13e:	bf00      	nop
 801e140:	370c      	adds	r7, #12
 801e142:	46bd      	mov	sp, r7
 801e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e148:	4770      	bx	lr
 801e14a:	bf00      	nop
 801e14c:	20013d74 	.word	0x20013d74

0801e150 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801e150:	b580      	push	{r7, lr}
 801e152:	b082      	sub	sp, #8
 801e154:	af00      	add	r7, sp, #0
 801e156:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d107      	bne.n	801e16e <netif_set_up+0x1e>
 801e15e:	4b0f      	ldr	r3, [pc, #60]	; (801e19c <netif_set_up+0x4c>)
 801e160:	f44f 7254 	mov.w	r2, #848	; 0x350
 801e164:	490e      	ldr	r1, [pc, #56]	; (801e1a0 <netif_set_up+0x50>)
 801e166:	480f      	ldr	r0, [pc, #60]	; (801e1a4 <netif_set_up+0x54>)
 801e168:	f004 f9fc 	bl	8022564 <iprintf>
 801e16c:	e013      	b.n	801e196 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e174:	f003 0301 	and.w	r3, r3, #1
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d10c      	bne.n	801e196 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e182:	f043 0301 	orr.w	r3, r3, #1
 801e186:	b2da      	uxtb	r2, r3
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e18e:	2103      	movs	r1, #3
 801e190:	6878      	ldr	r0, [r7, #4]
 801e192:	f000 f809 	bl	801e1a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801e196:	3708      	adds	r7, #8
 801e198:	46bd      	mov	sp, r7
 801e19a:	bd80      	pop	{r7, pc}
 801e19c:	080275f8 	.word	0x080275f8
 801e1a0:	080277f0 	.word	0x080277f0
 801e1a4:	0802769c 	.word	0x0802769c

0801e1a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	b082      	sub	sp, #8
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
 801e1b0:	460b      	mov	r3, r1
 801e1b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d106      	bne.n	801e1c8 <netif_issue_reports+0x20>
 801e1ba:	4b18      	ldr	r3, [pc, #96]	; (801e21c <netif_issue_reports+0x74>)
 801e1bc:	f240 326d 	movw	r2, #877	; 0x36d
 801e1c0:	4917      	ldr	r1, [pc, #92]	; (801e220 <netif_issue_reports+0x78>)
 801e1c2:	4818      	ldr	r0, [pc, #96]	; (801e224 <netif_issue_reports+0x7c>)
 801e1c4:	f004 f9ce 	bl	8022564 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e1ce:	f003 0304 	and.w	r3, r3, #4
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d01e      	beq.n	801e214 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e1dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d017      	beq.n	801e214 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e1e4:	78fb      	ldrb	r3, [r7, #3]
 801e1e6:	f003 0301 	and.w	r3, r3, #1
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	d013      	beq.n	801e216 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	3304      	adds	r3, #4
 801e1f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d00e      	beq.n	801e216 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e1fe:	f003 0308 	and.w	r3, r3, #8
 801e202:	2b00      	cmp	r3, #0
 801e204:	d007      	beq.n	801e216 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	3304      	adds	r3, #4
 801e20a:	4619      	mov	r1, r3
 801e20c:	6878      	ldr	r0, [r7, #4]
 801e20e:	f002 fc35 	bl	8020a7c <etharp_request>
 801e212:	e000      	b.n	801e216 <netif_issue_reports+0x6e>
    return;
 801e214:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801e216:	3708      	adds	r7, #8
 801e218:	46bd      	mov	sp, r7
 801e21a:	bd80      	pop	{r7, pc}
 801e21c:	080275f8 	.word	0x080275f8
 801e220:	0802780c 	.word	0x0802780c
 801e224:	0802769c 	.word	0x0802769c

0801e228 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801e228:	b580      	push	{r7, lr}
 801e22a:	b082      	sub	sp, #8
 801e22c:	af00      	add	r7, sp, #0
 801e22e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	2b00      	cmp	r3, #0
 801e234:	d107      	bne.n	801e246 <netif_set_down+0x1e>
 801e236:	4b12      	ldr	r3, [pc, #72]	; (801e280 <netif_set_down+0x58>)
 801e238:	f240 329b 	movw	r2, #923	; 0x39b
 801e23c:	4911      	ldr	r1, [pc, #68]	; (801e284 <netif_set_down+0x5c>)
 801e23e:	4812      	ldr	r0, [pc, #72]	; (801e288 <netif_set_down+0x60>)
 801e240:	f004 f990 	bl	8022564 <iprintf>
 801e244:	e019      	b.n	801e27a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e24c:	f003 0301 	and.w	r3, r3, #1
 801e250:	2b00      	cmp	r3, #0
 801e252:	d012      	beq.n	801e27a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e25a:	f023 0301 	bic.w	r3, r3, #1
 801e25e:	b2da      	uxtb	r2, r3
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e26c:	f003 0308 	and.w	r3, r3, #8
 801e270:	2b00      	cmp	r3, #0
 801e272:	d002      	beq.n	801e27a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801e274:	6878      	ldr	r0, [r7, #4]
 801e276:	f001 ffbf 	bl	80201f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801e27a:	3708      	adds	r7, #8
 801e27c:	46bd      	mov	sp, r7
 801e27e:	bd80      	pop	{r7, pc}
 801e280:	080275f8 	.word	0x080275f8
 801e284:	08027830 	.word	0x08027830
 801e288:	0802769c 	.word	0x0802769c

0801e28c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801e28c:	b580      	push	{r7, lr}
 801e28e:	b082      	sub	sp, #8
 801e290:	af00      	add	r7, sp, #0
 801e292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	2b00      	cmp	r3, #0
 801e298:	d107      	bne.n	801e2aa <netif_set_link_up+0x1e>
 801e29a:	4b13      	ldr	r3, [pc, #76]	; (801e2e8 <netif_set_link_up+0x5c>)
 801e29c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801e2a0:	4912      	ldr	r1, [pc, #72]	; (801e2ec <netif_set_link_up+0x60>)
 801e2a2:	4813      	ldr	r0, [pc, #76]	; (801e2f0 <netif_set_link_up+0x64>)
 801e2a4:	f004 f95e 	bl	8022564 <iprintf>
 801e2a8:	e01b      	b.n	801e2e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e2b0:	f003 0304 	and.w	r3, r3, #4
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d114      	bne.n	801e2e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e2be:	f043 0304 	orr.w	r3, r3, #4
 801e2c2:	b2da      	uxtb	r2, r3
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e2ca:	2103      	movs	r1, #3
 801e2cc:	6878      	ldr	r0, [r7, #4]
 801e2ce:	f7ff ff6b 	bl	801e1a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	69db      	ldr	r3, [r3, #28]
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	d003      	beq.n	801e2e2 <netif_set_link_up+0x56>
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	69db      	ldr	r3, [r3, #28]
 801e2de:	6878      	ldr	r0, [r7, #4]
 801e2e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e2e2:	3708      	adds	r7, #8
 801e2e4:	46bd      	mov	sp, r7
 801e2e6:	bd80      	pop	{r7, pc}
 801e2e8:	080275f8 	.word	0x080275f8
 801e2ec:	08027850 	.word	0x08027850
 801e2f0:	0802769c 	.word	0x0802769c

0801e2f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801e2f4:	b580      	push	{r7, lr}
 801e2f6:	b082      	sub	sp, #8
 801e2f8:	af00      	add	r7, sp, #0
 801e2fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d107      	bne.n	801e312 <netif_set_link_down+0x1e>
 801e302:	4b11      	ldr	r3, [pc, #68]	; (801e348 <netif_set_link_down+0x54>)
 801e304:	f240 4206 	movw	r2, #1030	; 0x406
 801e308:	4910      	ldr	r1, [pc, #64]	; (801e34c <netif_set_link_down+0x58>)
 801e30a:	4811      	ldr	r0, [pc, #68]	; (801e350 <netif_set_link_down+0x5c>)
 801e30c:	f004 f92a 	bl	8022564 <iprintf>
 801e310:	e017      	b.n	801e342 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e318:	f003 0304 	and.w	r3, r3, #4
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d010      	beq.n	801e342 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e326:	f023 0304 	bic.w	r3, r3, #4
 801e32a:	b2da      	uxtb	r2, r3
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	69db      	ldr	r3, [r3, #28]
 801e336:	2b00      	cmp	r3, #0
 801e338:	d003      	beq.n	801e342 <netif_set_link_down+0x4e>
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	69db      	ldr	r3, [r3, #28]
 801e33e:	6878      	ldr	r0, [r7, #4]
 801e340:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e342:	3708      	adds	r7, #8
 801e344:	46bd      	mov	sp, r7
 801e346:	bd80      	pop	{r7, pc}
 801e348:	080275f8 	.word	0x080275f8
 801e34c:	08027874 	.word	0x08027874
 801e350:	0802769c 	.word	0x0802769c

0801e354 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801e354:	b480      	push	{r7}
 801e356:	b083      	sub	sp, #12
 801e358:	af00      	add	r7, sp, #0
 801e35a:	6078      	str	r0, [r7, #4]
 801e35c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	2b00      	cmp	r3, #0
 801e362:	d002      	beq.n	801e36a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	683a      	ldr	r2, [r7, #0]
 801e368:	61da      	str	r2, [r3, #28]
  }
}
 801e36a:	bf00      	nop
 801e36c:	370c      	adds	r7, #12
 801e36e:	46bd      	mov	sp, r7
 801e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e374:	4770      	bx	lr
	...

0801e378 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 801e378:	b580      	push	{r7, lr}
 801e37a:	b086      	sub	sp, #24
 801e37c:	af00      	add	r7, sp, #0
 801e37e:	6078      	str	r0, [r7, #4]
 801e380:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	2b00      	cmp	r3, #0
 801e386:	d106      	bne.n	801e396 <netif_loop_output+0x1e>
 801e388:	4b2d      	ldr	r3, [pc, #180]	; (801e440 <netif_loop_output+0xc8>)
 801e38a:	f240 424b 	movw	r2, #1099	; 0x44b
 801e38e:	492d      	ldr	r1, [pc, #180]	; (801e444 <netif_loop_output+0xcc>)
 801e390:	482d      	ldr	r0, [pc, #180]	; (801e448 <netif_loop_output+0xd0>)
 801e392:	f004 f8e7 	bl	8022564 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 801e396:	683b      	ldr	r3, [r7, #0]
 801e398:	2b00      	cmp	r3, #0
 801e39a:	d106      	bne.n	801e3aa <netif_loop_output+0x32>
 801e39c:	4b28      	ldr	r3, [pc, #160]	; (801e440 <netif_loop_output+0xc8>)
 801e39e:	f240 424c 	movw	r2, #1100	; 0x44c
 801e3a2:	492a      	ldr	r1, [pc, #168]	; (801e44c <netif_loop_output+0xd4>)
 801e3a4:	4828      	ldr	r0, [pc, #160]	; (801e448 <netif_loop_output+0xd0>)
 801e3a6:	f004 f8dd 	bl	8022564 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801e3aa:	683b      	ldr	r3, [r7, #0]
 801e3ac:	891b      	ldrh	r3, [r3, #8]
 801e3ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e3b2:	4619      	mov	r1, r3
 801e3b4:	200e      	movs	r0, #14
 801e3b6:	f000 f8bb 	bl	801e530 <pbuf_alloc>
 801e3ba:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 801e3bc:	693b      	ldr	r3, [r7, #16]
 801e3be:	2b00      	cmp	r3, #0
 801e3c0:	d102      	bne.n	801e3c8 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 801e3c2:	f04f 33ff 	mov.w	r3, #4294967295
 801e3c6:	e037      	b.n	801e438 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 801e3c8:	6839      	ldr	r1, [r7, #0]
 801e3ca:	6938      	ldr	r0, [r7, #16]
 801e3cc:	f000 fcba 	bl	801ed44 <pbuf_copy>
 801e3d0:	4603      	mov	r3, r0
 801e3d2:	73fb      	strb	r3, [r7, #15]
 801e3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d005      	beq.n	801e3e8 <netif_loop_output+0x70>
    pbuf_free(r);
 801e3dc:	6938      	ldr	r0, [r7, #16]
 801e3de:	f000 fb89 	bl	801eaf4 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 801e3e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e3e6:	e027      	b.n	801e438 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 801e3e8:	693b      	ldr	r3, [r7, #16]
 801e3ea:	617b      	str	r3, [r7, #20]
 801e3ec:	e002      	b.n	801e3f4 <netif_loop_output+0x7c>
 801e3ee:	697b      	ldr	r3, [r7, #20]
 801e3f0:	681b      	ldr	r3, [r3, #0]
 801e3f2:	617b      	str	r3, [r7, #20]
 801e3f4:	697b      	ldr	r3, [r7, #20]
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d1f8      	bne.n	801e3ee <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e400:	2b00      	cmp	r3, #0
 801e402:	d012      	beq.n	801e42a <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e408:	2b00      	cmp	r3, #0
 801e40a:	d106      	bne.n	801e41a <netif_loop_output+0xa2>
 801e40c:	4b0c      	ldr	r3, [pc, #48]	; (801e440 <netif_loop_output+0xc8>)
 801e40e:	f240 4277 	movw	r2, #1143	; 0x477
 801e412:	490f      	ldr	r1, [pc, #60]	; (801e450 <netif_loop_output+0xd8>)
 801e414:	480c      	ldr	r0, [pc, #48]	; (801e448 <netif_loop_output+0xd0>)
 801e416:	f004 f8a5 	bl	8022564 <iprintf>
    netif->loop_last->next = r;
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e41e:	693a      	ldr	r2, [r7, #16]
 801e420:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 801e422:	687b      	ldr	r3, [r7, #4]
 801e424:	697a      	ldr	r2, [r7, #20]
 801e426:	63da      	str	r2, [r3, #60]	; 0x3c
 801e428:	e005      	b.n	801e436 <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	693a      	ldr	r2, [r7, #16]
 801e42e:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	697a      	ldr	r2, [r7, #20]
 801e434:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 801e436:	2300      	movs	r3, #0
}
 801e438:	4618      	mov	r0, r3
 801e43a:	3718      	adds	r7, #24
 801e43c:	46bd      	mov	sp, r7
 801e43e:	bd80      	pop	{r7, pc}
 801e440:	080275f8 	.word	0x080275f8
 801e444:	08027898 	.word	0x08027898
 801e448:	0802769c 	.word	0x0802769c
 801e44c:	080278bc 	.word	0x080278bc
 801e450:	080278dc 	.word	0x080278dc

0801e454 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 801e454:	b580      	push	{r7, lr}
 801e456:	b084      	sub	sp, #16
 801e458:	af00      	add	r7, sp, #0
 801e45a:	60f8      	str	r0, [r7, #12]
 801e45c:	60b9      	str	r1, [r7, #8]
 801e45e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 801e460:	68b9      	ldr	r1, [r7, #8]
 801e462:	68f8      	ldr	r0, [r7, #12]
 801e464:	f7ff ff88 	bl	801e378 <netif_loop_output>
 801e468:	4603      	mov	r3, r0
}
 801e46a:	4618      	mov	r0, r3
 801e46c:	3710      	adds	r7, #16
 801e46e:	46bd      	mov	sp, r7
 801e470:	bd80      	pop	{r7, pc}

0801e472 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801e472:	b480      	push	{r7}
 801e474:	b085      	sub	sp, #20
 801e476:	af00      	add	r7, sp, #0
 801e478:	60f8      	str	r0, [r7, #12]
 801e47a:	60b9      	str	r1, [r7, #8]
 801e47c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801e47e:	f06f 030b 	mvn.w	r3, #11
}
 801e482:	4618      	mov	r0, r3
 801e484:	3714      	adds	r7, #20
 801e486:	46bd      	mov	sp, r7
 801e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e48c:	4770      	bx	lr
	...

0801e490 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801e490:	b480      	push	{r7}
 801e492:	b085      	sub	sp, #20
 801e494:	af00      	add	r7, sp, #0
 801e496:	4603      	mov	r3, r0
 801e498:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801e49a:	79fb      	ldrb	r3, [r7, #7]
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d013      	beq.n	801e4c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801e4a0:	4b0d      	ldr	r3, [pc, #52]	; (801e4d8 <netif_get_by_index+0x48>)
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	60fb      	str	r3, [r7, #12]
 801e4a6:	e00c      	b.n	801e4c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e4ae:	3301      	adds	r3, #1
 801e4b0:	b2db      	uxtb	r3, r3
 801e4b2:	79fa      	ldrb	r2, [r7, #7]
 801e4b4:	429a      	cmp	r2, r3
 801e4b6:	d101      	bne.n	801e4bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 801e4b8:	68fb      	ldr	r3, [r7, #12]
 801e4ba:	e006      	b.n	801e4ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801e4bc:	68fb      	ldr	r3, [r7, #12]
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	60fb      	str	r3, [r7, #12]
 801e4c2:	68fb      	ldr	r3, [r7, #12]
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	d1ef      	bne.n	801e4a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801e4c8:	2300      	movs	r3, #0
}
 801e4ca:	4618      	mov	r0, r3
 801e4cc:	3714      	adds	r7, #20
 801e4ce:	46bd      	mov	sp, r7
 801e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4d4:	4770      	bx	lr
 801e4d6:	bf00      	nop
 801e4d8:	20013d70 	.word	0x20013d70

0801e4dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801e4dc:	b480      	push	{r7}
 801e4de:	b085      	sub	sp, #20
 801e4e0:	af00      	add	r7, sp, #0
 801e4e2:	60f8      	str	r0, [r7, #12]
 801e4e4:	60b9      	str	r1, [r7, #8]
 801e4e6:	4611      	mov	r1, r2
 801e4e8:	461a      	mov	r2, r3
 801e4ea:	460b      	mov	r3, r1
 801e4ec:	80fb      	strh	r3, [r7, #6]
 801e4ee:	4613      	mov	r3, r2
 801e4f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801e4f2:	68fb      	ldr	r3, [r7, #12]
 801e4f4:	2200      	movs	r2, #0
 801e4f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801e4f8:	68fb      	ldr	r3, [r7, #12]
 801e4fa:	68ba      	ldr	r2, [r7, #8]
 801e4fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801e4fe:	68fb      	ldr	r3, [r7, #12]
 801e500:	88fa      	ldrh	r2, [r7, #6]
 801e502:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801e504:	68fb      	ldr	r3, [r7, #12]
 801e506:	88ba      	ldrh	r2, [r7, #4]
 801e508:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801e50a:	8b3b      	ldrh	r3, [r7, #24]
 801e50c:	b2da      	uxtb	r2, r3
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801e512:	68fb      	ldr	r3, [r7, #12]
 801e514:	7f3a      	ldrb	r2, [r7, #28]
 801e516:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	2201      	movs	r2, #1
 801e51c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801e51e:	68fb      	ldr	r3, [r7, #12]
 801e520:	2200      	movs	r2, #0
 801e522:	73da      	strb	r2, [r3, #15]
}
 801e524:	bf00      	nop
 801e526:	3714      	adds	r7, #20
 801e528:	46bd      	mov	sp, r7
 801e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e52e:	4770      	bx	lr

0801e530 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801e530:	b580      	push	{r7, lr}
 801e532:	b08c      	sub	sp, #48	; 0x30
 801e534:	af02      	add	r7, sp, #8
 801e536:	4603      	mov	r3, r0
 801e538:	71fb      	strb	r3, [r7, #7]
 801e53a:	460b      	mov	r3, r1
 801e53c:	80bb      	strh	r3, [r7, #4]
 801e53e:	4613      	mov	r3, r2
 801e540:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801e542:	79fb      	ldrb	r3, [r7, #7]
 801e544:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801e546:	887b      	ldrh	r3, [r7, #2]
 801e548:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e54c:	d07d      	beq.n	801e64a <pbuf_alloc+0x11a>
 801e54e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e552:	f300 80c6 	bgt.w	801e6e2 <pbuf_alloc+0x1b2>
 801e556:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e55a:	d010      	beq.n	801e57e <pbuf_alloc+0x4e>
 801e55c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e560:	f300 80bf 	bgt.w	801e6e2 <pbuf_alloc+0x1b2>
 801e564:	2b01      	cmp	r3, #1
 801e566:	d002      	beq.n	801e56e <pbuf_alloc+0x3e>
 801e568:	2b41      	cmp	r3, #65	; 0x41
 801e56a:	f040 80ba 	bne.w	801e6e2 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801e56e:	887a      	ldrh	r2, [r7, #2]
 801e570:	88bb      	ldrh	r3, [r7, #4]
 801e572:	4619      	mov	r1, r3
 801e574:	2000      	movs	r0, #0
 801e576:	f000 f8cf 	bl	801e718 <pbuf_alloc_reference>
 801e57a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801e57c:	e0bb      	b.n	801e6f6 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801e57e:	2300      	movs	r3, #0
 801e580:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801e582:	2300      	movs	r3, #0
 801e584:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801e586:	88bb      	ldrh	r3, [r7, #4]
 801e588:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801e58a:	2005      	movs	r0, #5
 801e58c:	f7ff fb32 	bl	801dbf4 <memp_malloc>
 801e590:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801e592:	693b      	ldr	r3, [r7, #16]
 801e594:	2b00      	cmp	r3, #0
 801e596:	d107      	bne.n	801e5a8 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d002      	beq.n	801e5a4 <pbuf_alloc+0x74>
            pbuf_free(p);
 801e59e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e5a0:	f000 faa8 	bl	801eaf4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801e5a4:	2300      	movs	r3, #0
 801e5a6:	e0a7      	b.n	801e6f8 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801e5a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e5aa:	3303      	adds	r3, #3
 801e5ac:	b29b      	uxth	r3, r3
 801e5ae:	f023 0303 	bic.w	r3, r3, #3
 801e5b2:	b29b      	uxth	r3, r3
 801e5b4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801e5b8:	b29b      	uxth	r3, r3
 801e5ba:	8b7a      	ldrh	r2, [r7, #26]
 801e5bc:	4293      	cmp	r3, r2
 801e5be:	bf28      	it	cs
 801e5c0:	4613      	movcs	r3, r2
 801e5c2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801e5c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e5c6:	3310      	adds	r3, #16
 801e5c8:	693a      	ldr	r2, [r7, #16]
 801e5ca:	4413      	add	r3, r2
 801e5cc:	3303      	adds	r3, #3
 801e5ce:	f023 0303 	bic.w	r3, r3, #3
 801e5d2:	4618      	mov	r0, r3
 801e5d4:	89f9      	ldrh	r1, [r7, #14]
 801e5d6:	8b7a      	ldrh	r2, [r7, #26]
 801e5d8:	2300      	movs	r3, #0
 801e5da:	9301      	str	r3, [sp, #4]
 801e5dc:	887b      	ldrh	r3, [r7, #2]
 801e5de:	9300      	str	r3, [sp, #0]
 801e5e0:	460b      	mov	r3, r1
 801e5e2:	4601      	mov	r1, r0
 801e5e4:	6938      	ldr	r0, [r7, #16]
 801e5e6:	f7ff ff79 	bl	801e4dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801e5ea:	693b      	ldr	r3, [r7, #16]
 801e5ec:	685b      	ldr	r3, [r3, #4]
 801e5ee:	f003 0303 	and.w	r3, r3, #3
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	d006      	beq.n	801e604 <pbuf_alloc+0xd4>
 801e5f6:	4b42      	ldr	r3, [pc, #264]	; (801e700 <pbuf_alloc+0x1d0>)
 801e5f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e5fc:	4941      	ldr	r1, [pc, #260]	; (801e704 <pbuf_alloc+0x1d4>)
 801e5fe:	4842      	ldr	r0, [pc, #264]	; (801e708 <pbuf_alloc+0x1d8>)
 801e600:	f003 ffb0 	bl	8022564 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801e604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e606:	3303      	adds	r3, #3
 801e608:	f023 0303 	bic.w	r3, r3, #3
 801e60c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801e610:	d106      	bne.n	801e620 <pbuf_alloc+0xf0>
 801e612:	4b3b      	ldr	r3, [pc, #236]	; (801e700 <pbuf_alloc+0x1d0>)
 801e614:	f44f 7281 	mov.w	r2, #258	; 0x102
 801e618:	493c      	ldr	r1, [pc, #240]	; (801e70c <pbuf_alloc+0x1dc>)
 801e61a:	483b      	ldr	r0, [pc, #236]	; (801e708 <pbuf_alloc+0x1d8>)
 801e61c:	f003 ffa2 	bl	8022564 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e622:	2b00      	cmp	r3, #0
 801e624:	d102      	bne.n	801e62c <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801e626:	693b      	ldr	r3, [r7, #16]
 801e628:	627b      	str	r3, [r7, #36]	; 0x24
 801e62a:	e002      	b.n	801e632 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801e62c:	69fb      	ldr	r3, [r7, #28]
 801e62e:	693a      	ldr	r2, [r7, #16]
 801e630:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801e632:	693b      	ldr	r3, [r7, #16]
 801e634:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801e636:	8b7a      	ldrh	r2, [r7, #26]
 801e638:	89fb      	ldrh	r3, [r7, #14]
 801e63a:	1ad3      	subs	r3, r2, r3
 801e63c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801e63e:	2300      	movs	r3, #0
 801e640:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801e642:	8b7b      	ldrh	r3, [r7, #26]
 801e644:	2b00      	cmp	r3, #0
 801e646:	d1a0      	bne.n	801e58a <pbuf_alloc+0x5a>
      break;
 801e648:	e055      	b.n	801e6f6 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801e64a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e64c:	3303      	adds	r3, #3
 801e64e:	b29b      	uxth	r3, r3
 801e650:	f023 0303 	bic.w	r3, r3, #3
 801e654:	b29a      	uxth	r2, r3
 801e656:	88bb      	ldrh	r3, [r7, #4]
 801e658:	3303      	adds	r3, #3
 801e65a:	b29b      	uxth	r3, r3
 801e65c:	f023 0303 	bic.w	r3, r3, #3
 801e660:	b29b      	uxth	r3, r3
 801e662:	4413      	add	r3, r2
 801e664:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801e666:	8b3b      	ldrh	r3, [r7, #24]
 801e668:	3310      	adds	r3, #16
 801e66a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e66c:	8b3a      	ldrh	r2, [r7, #24]
 801e66e:	88bb      	ldrh	r3, [r7, #4]
 801e670:	3303      	adds	r3, #3
 801e672:	f023 0303 	bic.w	r3, r3, #3
 801e676:	429a      	cmp	r2, r3
 801e678:	d306      	bcc.n	801e688 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801e67a:	8afa      	ldrh	r2, [r7, #22]
 801e67c:	88bb      	ldrh	r3, [r7, #4]
 801e67e:	3303      	adds	r3, #3
 801e680:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e684:	429a      	cmp	r2, r3
 801e686:	d201      	bcs.n	801e68c <pbuf_alloc+0x15c>
        return NULL;
 801e688:	2300      	movs	r3, #0
 801e68a:	e035      	b.n	801e6f8 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801e68c:	8afb      	ldrh	r3, [r7, #22]
 801e68e:	4618      	mov	r0, r3
 801e690:	f7ff f920 	bl	801d8d4 <mem_malloc>
 801e694:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e698:	2b00      	cmp	r3, #0
 801e69a:	d101      	bne.n	801e6a0 <pbuf_alloc+0x170>
        return NULL;
 801e69c:	2300      	movs	r3, #0
 801e69e:	e02b      	b.n	801e6f8 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801e6a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e6a2:	3310      	adds	r3, #16
 801e6a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e6a6:	4413      	add	r3, r2
 801e6a8:	3303      	adds	r3, #3
 801e6aa:	f023 0303 	bic.w	r3, r3, #3
 801e6ae:	4618      	mov	r0, r3
 801e6b0:	88b9      	ldrh	r1, [r7, #4]
 801e6b2:	88ba      	ldrh	r2, [r7, #4]
 801e6b4:	2300      	movs	r3, #0
 801e6b6:	9301      	str	r3, [sp, #4]
 801e6b8:	887b      	ldrh	r3, [r7, #2]
 801e6ba:	9300      	str	r3, [sp, #0]
 801e6bc:	460b      	mov	r3, r1
 801e6be:	4601      	mov	r1, r0
 801e6c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e6c2:	f7ff ff0b 	bl	801e4dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6c8:	685b      	ldr	r3, [r3, #4]
 801e6ca:	f003 0303 	and.w	r3, r3, #3
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	d010      	beq.n	801e6f4 <pbuf_alloc+0x1c4>
 801e6d2:	4b0b      	ldr	r3, [pc, #44]	; (801e700 <pbuf_alloc+0x1d0>)
 801e6d4:	f44f 7291 	mov.w	r2, #290	; 0x122
 801e6d8:	490d      	ldr	r1, [pc, #52]	; (801e710 <pbuf_alloc+0x1e0>)
 801e6da:	480b      	ldr	r0, [pc, #44]	; (801e708 <pbuf_alloc+0x1d8>)
 801e6dc:	f003 ff42 	bl	8022564 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801e6e0:	e008      	b.n	801e6f4 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801e6e2:	4b07      	ldr	r3, [pc, #28]	; (801e700 <pbuf_alloc+0x1d0>)
 801e6e4:	f240 1227 	movw	r2, #295	; 0x127
 801e6e8:	490a      	ldr	r1, [pc, #40]	; (801e714 <pbuf_alloc+0x1e4>)
 801e6ea:	4807      	ldr	r0, [pc, #28]	; (801e708 <pbuf_alloc+0x1d8>)
 801e6ec:	f003 ff3a 	bl	8022564 <iprintf>
      return NULL;
 801e6f0:	2300      	movs	r3, #0
 801e6f2:	e001      	b.n	801e6f8 <pbuf_alloc+0x1c8>
      break;
 801e6f4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801e6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e6f8:	4618      	mov	r0, r3
 801e6fa:	3728      	adds	r7, #40	; 0x28
 801e6fc:	46bd      	mov	sp, r7
 801e6fe:	bd80      	pop	{r7, pc}
 801e700:	0802797c 	.word	0x0802797c
 801e704:	080279fc 	.word	0x080279fc
 801e708:	08027a2c 	.word	0x08027a2c
 801e70c:	08027a54 	.word	0x08027a54
 801e710:	08027a88 	.word	0x08027a88
 801e714:	08027ab4 	.word	0x08027ab4

0801e718 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801e718:	b580      	push	{r7, lr}
 801e71a:	b086      	sub	sp, #24
 801e71c:	af02      	add	r7, sp, #8
 801e71e:	6078      	str	r0, [r7, #4]
 801e720:	460b      	mov	r3, r1
 801e722:	807b      	strh	r3, [r7, #2]
 801e724:	4613      	mov	r3, r2
 801e726:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801e728:	883b      	ldrh	r3, [r7, #0]
 801e72a:	2b41      	cmp	r3, #65	; 0x41
 801e72c:	d009      	beq.n	801e742 <pbuf_alloc_reference+0x2a>
 801e72e:	883b      	ldrh	r3, [r7, #0]
 801e730:	2b01      	cmp	r3, #1
 801e732:	d006      	beq.n	801e742 <pbuf_alloc_reference+0x2a>
 801e734:	4b0f      	ldr	r3, [pc, #60]	; (801e774 <pbuf_alloc_reference+0x5c>)
 801e736:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801e73a:	490f      	ldr	r1, [pc, #60]	; (801e778 <pbuf_alloc_reference+0x60>)
 801e73c:	480f      	ldr	r0, [pc, #60]	; (801e77c <pbuf_alloc_reference+0x64>)
 801e73e:	f003 ff11 	bl	8022564 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801e742:	2004      	movs	r0, #4
 801e744:	f7ff fa56 	bl	801dbf4 <memp_malloc>
 801e748:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d101      	bne.n	801e754 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801e750:	2300      	movs	r3, #0
 801e752:	e00b      	b.n	801e76c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801e754:	8879      	ldrh	r1, [r7, #2]
 801e756:	887a      	ldrh	r2, [r7, #2]
 801e758:	2300      	movs	r3, #0
 801e75a:	9301      	str	r3, [sp, #4]
 801e75c:	883b      	ldrh	r3, [r7, #0]
 801e75e:	9300      	str	r3, [sp, #0]
 801e760:	460b      	mov	r3, r1
 801e762:	6879      	ldr	r1, [r7, #4]
 801e764:	68f8      	ldr	r0, [r7, #12]
 801e766:	f7ff feb9 	bl	801e4dc <pbuf_init_alloced_pbuf>
  return p;
 801e76a:	68fb      	ldr	r3, [r7, #12]
}
 801e76c:	4618      	mov	r0, r3
 801e76e:	3710      	adds	r7, #16
 801e770:	46bd      	mov	sp, r7
 801e772:	bd80      	pop	{r7, pc}
 801e774:	0802797c 	.word	0x0802797c
 801e778:	08027ad0 	.word	0x08027ad0
 801e77c:	08027a2c 	.word	0x08027a2c

0801e780 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801e780:	b580      	push	{r7, lr}
 801e782:	b088      	sub	sp, #32
 801e784:	af02      	add	r7, sp, #8
 801e786:	607b      	str	r3, [r7, #4]
 801e788:	4603      	mov	r3, r0
 801e78a:	73fb      	strb	r3, [r7, #15]
 801e78c:	460b      	mov	r3, r1
 801e78e:	81bb      	strh	r3, [r7, #12]
 801e790:	4613      	mov	r3, r2
 801e792:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801e794:	7bfb      	ldrb	r3, [r7, #15]
 801e796:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801e798:	8a7b      	ldrh	r3, [r7, #18]
 801e79a:	3303      	adds	r3, #3
 801e79c:	f023 0203 	bic.w	r2, r3, #3
 801e7a0:	89bb      	ldrh	r3, [r7, #12]
 801e7a2:	441a      	add	r2, r3
 801e7a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e7a6:	429a      	cmp	r2, r3
 801e7a8:	d901      	bls.n	801e7ae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801e7aa:	2300      	movs	r3, #0
 801e7ac:	e018      	b.n	801e7e0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801e7ae:	6a3b      	ldr	r3, [r7, #32]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d007      	beq.n	801e7c4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801e7b4:	8a7b      	ldrh	r3, [r7, #18]
 801e7b6:	3303      	adds	r3, #3
 801e7b8:	f023 0303 	bic.w	r3, r3, #3
 801e7bc:	6a3a      	ldr	r2, [r7, #32]
 801e7be:	4413      	add	r3, r2
 801e7c0:	617b      	str	r3, [r7, #20]
 801e7c2:	e001      	b.n	801e7c8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801e7c4:	2300      	movs	r3, #0
 801e7c6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801e7c8:	6878      	ldr	r0, [r7, #4]
 801e7ca:	89b9      	ldrh	r1, [r7, #12]
 801e7cc:	89ba      	ldrh	r2, [r7, #12]
 801e7ce:	2302      	movs	r3, #2
 801e7d0:	9301      	str	r3, [sp, #4]
 801e7d2:	897b      	ldrh	r3, [r7, #10]
 801e7d4:	9300      	str	r3, [sp, #0]
 801e7d6:	460b      	mov	r3, r1
 801e7d8:	6979      	ldr	r1, [r7, #20]
 801e7da:	f7ff fe7f 	bl	801e4dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801e7de:	687b      	ldr	r3, [r7, #4]
}
 801e7e0:	4618      	mov	r0, r3
 801e7e2:	3718      	adds	r7, #24
 801e7e4:	46bd      	mov	sp, r7
 801e7e6:	bd80      	pop	{r7, pc}

0801e7e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801e7e8:	b580      	push	{r7, lr}
 801e7ea:	b084      	sub	sp, #16
 801e7ec:	af00      	add	r7, sp, #0
 801e7ee:	6078      	str	r0, [r7, #4]
 801e7f0:	460b      	mov	r3, r1
 801e7f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d106      	bne.n	801e808 <pbuf_realloc+0x20>
 801e7fa:	4b3a      	ldr	r3, [pc, #232]	; (801e8e4 <pbuf_realloc+0xfc>)
 801e7fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801e800:	4939      	ldr	r1, [pc, #228]	; (801e8e8 <pbuf_realloc+0x100>)
 801e802:	483a      	ldr	r0, [pc, #232]	; (801e8ec <pbuf_realloc+0x104>)
 801e804:	f003 feae 	bl	8022564 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	891b      	ldrh	r3, [r3, #8]
 801e80c:	887a      	ldrh	r2, [r7, #2]
 801e80e:	429a      	cmp	r2, r3
 801e810:	d263      	bcs.n	801e8da <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	891a      	ldrh	r2, [r3, #8]
 801e816:	887b      	ldrh	r3, [r7, #2]
 801e818:	1ad3      	subs	r3, r2, r3
 801e81a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801e81c:	887b      	ldrh	r3, [r7, #2]
 801e81e:	817b      	strh	r3, [r7, #10]
  q = p;
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801e824:	e018      	b.n	801e858 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801e826:	68fb      	ldr	r3, [r7, #12]
 801e828:	895b      	ldrh	r3, [r3, #10]
 801e82a:	897a      	ldrh	r2, [r7, #10]
 801e82c:	1ad3      	subs	r3, r2, r3
 801e82e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	891a      	ldrh	r2, [r3, #8]
 801e834:	893b      	ldrh	r3, [r7, #8]
 801e836:	1ad3      	subs	r3, r2, r3
 801e838:	b29a      	uxth	r2, r3
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801e83e:	68fb      	ldr	r3, [r7, #12]
 801e840:	681b      	ldr	r3, [r3, #0]
 801e842:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	2b00      	cmp	r3, #0
 801e848:	d106      	bne.n	801e858 <pbuf_realloc+0x70>
 801e84a:	4b26      	ldr	r3, [pc, #152]	; (801e8e4 <pbuf_realloc+0xfc>)
 801e84c:	f240 12af 	movw	r2, #431	; 0x1af
 801e850:	4927      	ldr	r1, [pc, #156]	; (801e8f0 <pbuf_realloc+0x108>)
 801e852:	4826      	ldr	r0, [pc, #152]	; (801e8ec <pbuf_realloc+0x104>)
 801e854:	f003 fe86 	bl	8022564 <iprintf>
  while (rem_len > q->len) {
 801e858:	68fb      	ldr	r3, [r7, #12]
 801e85a:	895b      	ldrh	r3, [r3, #10]
 801e85c:	897a      	ldrh	r2, [r7, #10]
 801e85e:	429a      	cmp	r2, r3
 801e860:	d8e1      	bhi.n	801e826 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801e862:	68fb      	ldr	r3, [r7, #12]
 801e864:	7b1b      	ldrb	r3, [r3, #12]
 801e866:	f003 030f 	and.w	r3, r3, #15
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d121      	bne.n	801e8b2 <pbuf_realloc+0xca>
 801e86e:	68fb      	ldr	r3, [r7, #12]
 801e870:	895b      	ldrh	r3, [r3, #10]
 801e872:	897a      	ldrh	r2, [r7, #10]
 801e874:	429a      	cmp	r2, r3
 801e876:	d01c      	beq.n	801e8b2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801e878:	68fb      	ldr	r3, [r7, #12]
 801e87a:	7b5b      	ldrb	r3, [r3, #13]
 801e87c:	f003 0302 	and.w	r3, r3, #2
 801e880:	2b00      	cmp	r3, #0
 801e882:	d116      	bne.n	801e8b2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	685a      	ldr	r2, [r3, #4]
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	1ad3      	subs	r3, r2, r3
 801e88c:	b29a      	uxth	r2, r3
 801e88e:	897b      	ldrh	r3, [r7, #10]
 801e890:	4413      	add	r3, r2
 801e892:	b29b      	uxth	r3, r3
 801e894:	4619      	mov	r1, r3
 801e896:	68f8      	ldr	r0, [r7, #12]
 801e898:	f7fe ff20 	bl	801d6dc <mem_trim>
 801e89c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801e89e:	68fb      	ldr	r3, [r7, #12]
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	d106      	bne.n	801e8b2 <pbuf_realloc+0xca>
 801e8a4:	4b0f      	ldr	r3, [pc, #60]	; (801e8e4 <pbuf_realloc+0xfc>)
 801e8a6:	f240 12bd 	movw	r2, #445	; 0x1bd
 801e8aa:	4912      	ldr	r1, [pc, #72]	; (801e8f4 <pbuf_realloc+0x10c>)
 801e8ac:	480f      	ldr	r0, [pc, #60]	; (801e8ec <pbuf_realloc+0x104>)
 801e8ae:	f003 fe59 	bl	8022564 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801e8b2:	68fb      	ldr	r3, [r7, #12]
 801e8b4:	897a      	ldrh	r2, [r7, #10]
 801e8b6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	895a      	ldrh	r2, [r3, #10]
 801e8bc:	68fb      	ldr	r3, [r7, #12]
 801e8be:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801e8c0:	68fb      	ldr	r3, [r7, #12]
 801e8c2:	681b      	ldr	r3, [r3, #0]
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d004      	beq.n	801e8d2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	4618      	mov	r0, r3
 801e8ce:	f000 f911 	bl	801eaf4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801e8d2:	68fb      	ldr	r3, [r7, #12]
 801e8d4:	2200      	movs	r2, #0
 801e8d6:	601a      	str	r2, [r3, #0]
 801e8d8:	e000      	b.n	801e8dc <pbuf_realloc+0xf4>
    return;
 801e8da:	bf00      	nop

}
 801e8dc:	3710      	adds	r7, #16
 801e8de:	46bd      	mov	sp, r7
 801e8e0:	bd80      	pop	{r7, pc}
 801e8e2:	bf00      	nop
 801e8e4:	0802797c 	.word	0x0802797c
 801e8e8:	08027ae4 	.word	0x08027ae4
 801e8ec:	08027a2c 	.word	0x08027a2c
 801e8f0:	08027afc 	.word	0x08027afc
 801e8f4:	08027b14 	.word	0x08027b14

0801e8f8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801e8f8:	b580      	push	{r7, lr}
 801e8fa:	b086      	sub	sp, #24
 801e8fc:	af00      	add	r7, sp, #0
 801e8fe:	60f8      	str	r0, [r7, #12]
 801e900:	60b9      	str	r1, [r7, #8]
 801e902:	4613      	mov	r3, r2
 801e904:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801e906:	68fb      	ldr	r3, [r7, #12]
 801e908:	2b00      	cmp	r3, #0
 801e90a:	d106      	bne.n	801e91a <pbuf_add_header_impl+0x22>
 801e90c:	4b2b      	ldr	r3, [pc, #172]	; (801e9bc <pbuf_add_header_impl+0xc4>)
 801e90e:	f240 12df 	movw	r2, #479	; 0x1df
 801e912:	492b      	ldr	r1, [pc, #172]	; (801e9c0 <pbuf_add_header_impl+0xc8>)
 801e914:	482b      	ldr	r0, [pc, #172]	; (801e9c4 <pbuf_add_header_impl+0xcc>)
 801e916:	f003 fe25 	bl	8022564 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801e91a:	68fb      	ldr	r3, [r7, #12]
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d003      	beq.n	801e928 <pbuf_add_header_impl+0x30>
 801e920:	68bb      	ldr	r3, [r7, #8]
 801e922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e926:	d301      	bcc.n	801e92c <pbuf_add_header_impl+0x34>
    return 1;
 801e928:	2301      	movs	r3, #1
 801e92a:	e043      	b.n	801e9b4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801e92c:	68bb      	ldr	r3, [r7, #8]
 801e92e:	2b00      	cmp	r3, #0
 801e930:	d101      	bne.n	801e936 <pbuf_add_header_impl+0x3e>
    return 0;
 801e932:	2300      	movs	r3, #0
 801e934:	e03e      	b.n	801e9b4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801e936:	68bb      	ldr	r3, [r7, #8]
 801e938:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	891a      	ldrh	r2, [r3, #8]
 801e93e:	8a7b      	ldrh	r3, [r7, #18]
 801e940:	4413      	add	r3, r2
 801e942:	b29b      	uxth	r3, r3
 801e944:	8a7a      	ldrh	r2, [r7, #18]
 801e946:	429a      	cmp	r2, r3
 801e948:	d901      	bls.n	801e94e <pbuf_add_header_impl+0x56>
    return 1;
 801e94a:	2301      	movs	r3, #1
 801e94c:	e032      	b.n	801e9b4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801e94e:	68fb      	ldr	r3, [r7, #12]
 801e950:	7b1b      	ldrb	r3, [r3, #12]
 801e952:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801e954:	8a3b      	ldrh	r3, [r7, #16]
 801e956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	d00c      	beq.n	801e978 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801e95e:	68fb      	ldr	r3, [r7, #12]
 801e960:	685a      	ldr	r2, [r3, #4]
 801e962:	68bb      	ldr	r3, [r7, #8]
 801e964:	425b      	negs	r3, r3
 801e966:	4413      	add	r3, r2
 801e968:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	3310      	adds	r3, #16
 801e96e:	697a      	ldr	r2, [r7, #20]
 801e970:	429a      	cmp	r2, r3
 801e972:	d20d      	bcs.n	801e990 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801e974:	2301      	movs	r3, #1
 801e976:	e01d      	b.n	801e9b4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801e978:	79fb      	ldrb	r3, [r7, #7]
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	d006      	beq.n	801e98c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	685a      	ldr	r2, [r3, #4]
 801e982:	68bb      	ldr	r3, [r7, #8]
 801e984:	425b      	negs	r3, r3
 801e986:	4413      	add	r3, r2
 801e988:	617b      	str	r3, [r7, #20]
 801e98a:	e001      	b.n	801e990 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801e98c:	2301      	movs	r3, #1
 801e98e:	e011      	b.n	801e9b4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801e990:	68fb      	ldr	r3, [r7, #12]
 801e992:	697a      	ldr	r2, [r7, #20]
 801e994:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801e996:	68fb      	ldr	r3, [r7, #12]
 801e998:	895a      	ldrh	r2, [r3, #10]
 801e99a:	8a7b      	ldrh	r3, [r7, #18]
 801e99c:	4413      	add	r3, r2
 801e99e:	b29a      	uxth	r2, r3
 801e9a0:	68fb      	ldr	r3, [r7, #12]
 801e9a2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801e9a4:	68fb      	ldr	r3, [r7, #12]
 801e9a6:	891a      	ldrh	r2, [r3, #8]
 801e9a8:	8a7b      	ldrh	r3, [r7, #18]
 801e9aa:	4413      	add	r3, r2
 801e9ac:	b29a      	uxth	r2, r3
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	811a      	strh	r2, [r3, #8]


  return 0;
 801e9b2:	2300      	movs	r3, #0
}
 801e9b4:	4618      	mov	r0, r3
 801e9b6:	3718      	adds	r7, #24
 801e9b8:	46bd      	mov	sp, r7
 801e9ba:	bd80      	pop	{r7, pc}
 801e9bc:	0802797c 	.word	0x0802797c
 801e9c0:	08027b30 	.word	0x08027b30
 801e9c4:	08027a2c 	.word	0x08027a2c

0801e9c8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801e9c8:	b580      	push	{r7, lr}
 801e9ca:	b082      	sub	sp, #8
 801e9cc:	af00      	add	r7, sp, #0
 801e9ce:	6078      	str	r0, [r7, #4]
 801e9d0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801e9d2:	2200      	movs	r2, #0
 801e9d4:	6839      	ldr	r1, [r7, #0]
 801e9d6:	6878      	ldr	r0, [r7, #4]
 801e9d8:	f7ff ff8e 	bl	801e8f8 <pbuf_add_header_impl>
 801e9dc:	4603      	mov	r3, r0
}
 801e9de:	4618      	mov	r0, r3
 801e9e0:	3708      	adds	r7, #8
 801e9e2:	46bd      	mov	sp, r7
 801e9e4:	bd80      	pop	{r7, pc}
	...

0801e9e8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801e9e8:	b580      	push	{r7, lr}
 801e9ea:	b084      	sub	sp, #16
 801e9ec:	af00      	add	r7, sp, #0
 801e9ee:	6078      	str	r0, [r7, #4]
 801e9f0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	d106      	bne.n	801ea06 <pbuf_remove_header+0x1e>
 801e9f8:	4b20      	ldr	r3, [pc, #128]	; (801ea7c <pbuf_remove_header+0x94>)
 801e9fa:	f240 224b 	movw	r2, #587	; 0x24b
 801e9fe:	4920      	ldr	r1, [pc, #128]	; (801ea80 <pbuf_remove_header+0x98>)
 801ea00:	4820      	ldr	r0, [pc, #128]	; (801ea84 <pbuf_remove_header+0x9c>)
 801ea02:	f003 fdaf 	bl	8022564 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	d003      	beq.n	801ea14 <pbuf_remove_header+0x2c>
 801ea0c:	683b      	ldr	r3, [r7, #0]
 801ea0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ea12:	d301      	bcc.n	801ea18 <pbuf_remove_header+0x30>
    return 1;
 801ea14:	2301      	movs	r3, #1
 801ea16:	e02c      	b.n	801ea72 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801ea18:	683b      	ldr	r3, [r7, #0]
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d101      	bne.n	801ea22 <pbuf_remove_header+0x3a>
    return 0;
 801ea1e:	2300      	movs	r3, #0
 801ea20:	e027      	b.n	801ea72 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801ea22:	683b      	ldr	r3, [r7, #0]
 801ea24:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	895b      	ldrh	r3, [r3, #10]
 801ea2a:	89fa      	ldrh	r2, [r7, #14]
 801ea2c:	429a      	cmp	r2, r3
 801ea2e:	d908      	bls.n	801ea42 <pbuf_remove_header+0x5a>
 801ea30:	4b12      	ldr	r3, [pc, #72]	; (801ea7c <pbuf_remove_header+0x94>)
 801ea32:	f240 2255 	movw	r2, #597	; 0x255
 801ea36:	4914      	ldr	r1, [pc, #80]	; (801ea88 <pbuf_remove_header+0xa0>)
 801ea38:	4812      	ldr	r0, [pc, #72]	; (801ea84 <pbuf_remove_header+0x9c>)
 801ea3a:	f003 fd93 	bl	8022564 <iprintf>
 801ea3e:	2301      	movs	r3, #1
 801ea40:	e017      	b.n	801ea72 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	685b      	ldr	r3, [r3, #4]
 801ea46:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801ea48:	687b      	ldr	r3, [r7, #4]
 801ea4a:	685a      	ldr	r2, [r3, #4]
 801ea4c:	683b      	ldr	r3, [r7, #0]
 801ea4e:	441a      	add	r2, r3
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	895a      	ldrh	r2, [r3, #10]
 801ea58:	89fb      	ldrh	r3, [r7, #14]
 801ea5a:	1ad3      	subs	r3, r2, r3
 801ea5c:	b29a      	uxth	r2, r3
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	891a      	ldrh	r2, [r3, #8]
 801ea66:	89fb      	ldrh	r3, [r7, #14]
 801ea68:	1ad3      	subs	r3, r2, r3
 801ea6a:	b29a      	uxth	r2, r3
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801ea70:	2300      	movs	r3, #0
}
 801ea72:	4618      	mov	r0, r3
 801ea74:	3710      	adds	r7, #16
 801ea76:	46bd      	mov	sp, r7
 801ea78:	bd80      	pop	{r7, pc}
 801ea7a:	bf00      	nop
 801ea7c:	0802797c 	.word	0x0802797c
 801ea80:	08027b30 	.word	0x08027b30
 801ea84:	08027a2c 	.word	0x08027a2c
 801ea88:	08027b3c 	.word	0x08027b3c

0801ea8c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801ea8c:	b580      	push	{r7, lr}
 801ea8e:	b082      	sub	sp, #8
 801ea90:	af00      	add	r7, sp, #0
 801ea92:	6078      	str	r0, [r7, #4]
 801ea94:	460b      	mov	r3, r1
 801ea96:	807b      	strh	r3, [r7, #2]
 801ea98:	4613      	mov	r3, r2
 801ea9a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801ea9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eaa0:	2b00      	cmp	r3, #0
 801eaa2:	da08      	bge.n	801eab6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801eaa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eaa8:	425b      	negs	r3, r3
 801eaaa:	4619      	mov	r1, r3
 801eaac:	6878      	ldr	r0, [r7, #4]
 801eaae:	f7ff ff9b 	bl	801e9e8 <pbuf_remove_header>
 801eab2:	4603      	mov	r3, r0
 801eab4:	e007      	b.n	801eac6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801eab6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eaba:	787a      	ldrb	r2, [r7, #1]
 801eabc:	4619      	mov	r1, r3
 801eabe:	6878      	ldr	r0, [r7, #4]
 801eac0:	f7ff ff1a 	bl	801e8f8 <pbuf_add_header_impl>
 801eac4:	4603      	mov	r3, r0
  }
}
 801eac6:	4618      	mov	r0, r3
 801eac8:	3708      	adds	r7, #8
 801eaca:	46bd      	mov	sp, r7
 801eacc:	bd80      	pop	{r7, pc}

0801eace <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801eace:	b580      	push	{r7, lr}
 801ead0:	b082      	sub	sp, #8
 801ead2:	af00      	add	r7, sp, #0
 801ead4:	6078      	str	r0, [r7, #4]
 801ead6:	460b      	mov	r3, r1
 801ead8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801eada:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eade:	2201      	movs	r2, #1
 801eae0:	4619      	mov	r1, r3
 801eae2:	6878      	ldr	r0, [r7, #4]
 801eae4:	f7ff ffd2 	bl	801ea8c <pbuf_header_impl>
 801eae8:	4603      	mov	r3, r0
}
 801eaea:	4618      	mov	r0, r3
 801eaec:	3708      	adds	r7, #8
 801eaee:	46bd      	mov	sp, r7
 801eaf0:	bd80      	pop	{r7, pc}
	...

0801eaf4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801eaf4:	b580      	push	{r7, lr}
 801eaf6:	b086      	sub	sp, #24
 801eaf8:	af00      	add	r7, sp, #0
 801eafa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d10b      	bne.n	801eb1a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d106      	bne.n	801eb16 <pbuf_free+0x22>
 801eb08:	4b38      	ldr	r3, [pc, #224]	; (801ebec <pbuf_free+0xf8>)
 801eb0a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801eb0e:	4938      	ldr	r1, [pc, #224]	; (801ebf0 <pbuf_free+0xfc>)
 801eb10:	4838      	ldr	r0, [pc, #224]	; (801ebf4 <pbuf_free+0x100>)
 801eb12:	f003 fd27 	bl	8022564 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801eb16:	2300      	movs	r3, #0
 801eb18:	e063      	b.n	801ebe2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801eb1e:	e05c      	b.n	801ebda <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	7b9b      	ldrb	r3, [r3, #14]
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	d106      	bne.n	801eb36 <pbuf_free+0x42>
 801eb28:	4b30      	ldr	r3, [pc, #192]	; (801ebec <pbuf_free+0xf8>)
 801eb2a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801eb2e:	4932      	ldr	r1, [pc, #200]	; (801ebf8 <pbuf_free+0x104>)
 801eb30:	4830      	ldr	r0, [pc, #192]	; (801ebf4 <pbuf_free+0x100>)
 801eb32:	f003 fd17 	bl	8022564 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	7b9b      	ldrb	r3, [r3, #14]
 801eb3a:	3b01      	subs	r3, #1
 801eb3c:	b2da      	uxtb	r2, r3
 801eb3e:	687b      	ldr	r3, [r7, #4]
 801eb40:	739a      	strb	r2, [r3, #14]
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	7b9b      	ldrb	r3, [r3, #14]
 801eb46:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801eb48:	7dbb      	ldrb	r3, [r7, #22]
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d143      	bne.n	801ebd6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	681b      	ldr	r3, [r3, #0]
 801eb52:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	7b1b      	ldrb	r3, [r3, #12]
 801eb58:	f003 030f 	and.w	r3, r3, #15
 801eb5c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	7b5b      	ldrb	r3, [r3, #13]
 801eb62:	f003 0302 	and.w	r3, r3, #2
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	d011      	beq.n	801eb8e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801eb6a:	687b      	ldr	r3, [r7, #4]
 801eb6c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801eb6e:	68bb      	ldr	r3, [r7, #8]
 801eb70:	691b      	ldr	r3, [r3, #16]
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	d106      	bne.n	801eb84 <pbuf_free+0x90>
 801eb76:	4b1d      	ldr	r3, [pc, #116]	; (801ebec <pbuf_free+0xf8>)
 801eb78:	f240 22ff 	movw	r2, #767	; 0x2ff
 801eb7c:	491f      	ldr	r1, [pc, #124]	; (801ebfc <pbuf_free+0x108>)
 801eb7e:	481d      	ldr	r0, [pc, #116]	; (801ebf4 <pbuf_free+0x100>)
 801eb80:	f003 fcf0 	bl	8022564 <iprintf>
        pc->custom_free_function(p);
 801eb84:	68bb      	ldr	r3, [r7, #8]
 801eb86:	691b      	ldr	r3, [r3, #16]
 801eb88:	6878      	ldr	r0, [r7, #4]
 801eb8a:	4798      	blx	r3
 801eb8c:	e01d      	b.n	801ebca <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801eb8e:	7bfb      	ldrb	r3, [r7, #15]
 801eb90:	2b02      	cmp	r3, #2
 801eb92:	d104      	bne.n	801eb9e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801eb94:	6879      	ldr	r1, [r7, #4]
 801eb96:	2005      	movs	r0, #5
 801eb98:	f7ff f89c 	bl	801dcd4 <memp_free>
 801eb9c:	e015      	b.n	801ebca <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801eb9e:	7bfb      	ldrb	r3, [r7, #15]
 801eba0:	2b01      	cmp	r3, #1
 801eba2:	d104      	bne.n	801ebae <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801eba4:	6879      	ldr	r1, [r7, #4]
 801eba6:	2004      	movs	r0, #4
 801eba8:	f7ff f894 	bl	801dcd4 <memp_free>
 801ebac:	e00d      	b.n	801ebca <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801ebae:	7bfb      	ldrb	r3, [r7, #15]
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	d103      	bne.n	801ebbc <pbuf_free+0xc8>
          mem_free(p);
 801ebb4:	6878      	ldr	r0, [r7, #4]
 801ebb6:	f7fe fd27 	bl	801d608 <mem_free>
 801ebba:	e006      	b.n	801ebca <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801ebbc:	4b0b      	ldr	r3, [pc, #44]	; (801ebec <pbuf_free+0xf8>)
 801ebbe:	f240 320f 	movw	r2, #783	; 0x30f
 801ebc2:	490f      	ldr	r1, [pc, #60]	; (801ec00 <pbuf_free+0x10c>)
 801ebc4:	480b      	ldr	r0, [pc, #44]	; (801ebf4 <pbuf_free+0x100>)
 801ebc6:	f003 fccd 	bl	8022564 <iprintf>
        }
      }
      count++;
 801ebca:	7dfb      	ldrb	r3, [r7, #23]
 801ebcc:	3301      	adds	r3, #1
 801ebce:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801ebd0:	693b      	ldr	r3, [r7, #16]
 801ebd2:	607b      	str	r3, [r7, #4]
 801ebd4:	e001      	b.n	801ebda <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801ebd6:	2300      	movs	r3, #0
 801ebd8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801ebda:	687b      	ldr	r3, [r7, #4]
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d19f      	bne.n	801eb20 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801ebe0:	7dfb      	ldrb	r3, [r7, #23]
}
 801ebe2:	4618      	mov	r0, r3
 801ebe4:	3718      	adds	r7, #24
 801ebe6:	46bd      	mov	sp, r7
 801ebe8:	bd80      	pop	{r7, pc}
 801ebea:	bf00      	nop
 801ebec:	0802797c 	.word	0x0802797c
 801ebf0:	08027b30 	.word	0x08027b30
 801ebf4:	08027a2c 	.word	0x08027a2c
 801ebf8:	08027b5c 	.word	0x08027b5c
 801ebfc:	08027b74 	.word	0x08027b74
 801ec00:	08027b98 	.word	0x08027b98

0801ec04 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801ec04:	b480      	push	{r7}
 801ec06:	b085      	sub	sp, #20
 801ec08:	af00      	add	r7, sp, #0
 801ec0a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801ec0c:	2300      	movs	r3, #0
 801ec0e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801ec10:	e005      	b.n	801ec1e <pbuf_clen+0x1a>
    ++len;
 801ec12:	89fb      	ldrh	r3, [r7, #14]
 801ec14:	3301      	adds	r3, #1
 801ec16:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d1f6      	bne.n	801ec12 <pbuf_clen+0xe>
  }
  return len;
 801ec24:	89fb      	ldrh	r3, [r7, #14]
}
 801ec26:	4618      	mov	r0, r3
 801ec28:	3714      	adds	r7, #20
 801ec2a:	46bd      	mov	sp, r7
 801ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec30:	4770      	bx	lr
	...

0801ec34 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801ec34:	b580      	push	{r7, lr}
 801ec36:	b082      	sub	sp, #8
 801ec38:	af00      	add	r7, sp, #0
 801ec3a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	d010      	beq.n	801ec64 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	7b9b      	ldrb	r3, [r3, #14]
 801ec46:	3301      	adds	r3, #1
 801ec48:	b2da      	uxtb	r2, r3
 801ec4a:	687b      	ldr	r3, [r7, #4]
 801ec4c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	7b9b      	ldrb	r3, [r3, #14]
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d106      	bne.n	801ec64 <pbuf_ref+0x30>
 801ec56:	4b05      	ldr	r3, [pc, #20]	; (801ec6c <pbuf_ref+0x38>)
 801ec58:	f240 3242 	movw	r2, #834	; 0x342
 801ec5c:	4904      	ldr	r1, [pc, #16]	; (801ec70 <pbuf_ref+0x3c>)
 801ec5e:	4805      	ldr	r0, [pc, #20]	; (801ec74 <pbuf_ref+0x40>)
 801ec60:	f003 fc80 	bl	8022564 <iprintf>
  }
}
 801ec64:	bf00      	nop
 801ec66:	3708      	adds	r7, #8
 801ec68:	46bd      	mov	sp, r7
 801ec6a:	bd80      	pop	{r7, pc}
 801ec6c:	0802797c 	.word	0x0802797c
 801ec70:	08027bac 	.word	0x08027bac
 801ec74:	08027a2c 	.word	0x08027a2c

0801ec78 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801ec78:	b580      	push	{r7, lr}
 801ec7a:	b084      	sub	sp, #16
 801ec7c:	af00      	add	r7, sp, #0
 801ec7e:	6078      	str	r0, [r7, #4]
 801ec80:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d002      	beq.n	801ec8e <pbuf_cat+0x16>
 801ec88:	683b      	ldr	r3, [r7, #0]
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	d107      	bne.n	801ec9e <pbuf_cat+0x26>
 801ec8e:	4b20      	ldr	r3, [pc, #128]	; (801ed10 <pbuf_cat+0x98>)
 801ec90:	f240 3259 	movw	r2, #857	; 0x359
 801ec94:	491f      	ldr	r1, [pc, #124]	; (801ed14 <pbuf_cat+0x9c>)
 801ec96:	4820      	ldr	r0, [pc, #128]	; (801ed18 <pbuf_cat+0xa0>)
 801ec98:	f003 fc64 	bl	8022564 <iprintf>
 801ec9c:	e034      	b.n	801ed08 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	60fb      	str	r3, [r7, #12]
 801eca2:	e00a      	b.n	801ecba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801eca4:	68fb      	ldr	r3, [r7, #12]
 801eca6:	891a      	ldrh	r2, [r3, #8]
 801eca8:	683b      	ldr	r3, [r7, #0]
 801ecaa:	891b      	ldrh	r3, [r3, #8]
 801ecac:	4413      	add	r3, r2
 801ecae:	b29a      	uxth	r2, r3
 801ecb0:	68fb      	ldr	r3, [r7, #12]
 801ecb2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801ecb4:	68fb      	ldr	r3, [r7, #12]
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	60fb      	str	r3, [r7, #12]
 801ecba:	68fb      	ldr	r3, [r7, #12]
 801ecbc:	681b      	ldr	r3, [r3, #0]
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d1f0      	bne.n	801eca4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	891a      	ldrh	r2, [r3, #8]
 801ecc6:	68fb      	ldr	r3, [r7, #12]
 801ecc8:	895b      	ldrh	r3, [r3, #10]
 801ecca:	429a      	cmp	r2, r3
 801eccc:	d006      	beq.n	801ecdc <pbuf_cat+0x64>
 801ecce:	4b10      	ldr	r3, [pc, #64]	; (801ed10 <pbuf_cat+0x98>)
 801ecd0:	f240 3262 	movw	r2, #866	; 0x362
 801ecd4:	4911      	ldr	r1, [pc, #68]	; (801ed1c <pbuf_cat+0xa4>)
 801ecd6:	4810      	ldr	r0, [pc, #64]	; (801ed18 <pbuf_cat+0xa0>)
 801ecd8:	f003 fc44 	bl	8022564 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801ecdc:	68fb      	ldr	r3, [r7, #12]
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d006      	beq.n	801ecf2 <pbuf_cat+0x7a>
 801ece4:	4b0a      	ldr	r3, [pc, #40]	; (801ed10 <pbuf_cat+0x98>)
 801ece6:	f240 3263 	movw	r2, #867	; 0x363
 801ecea:	490d      	ldr	r1, [pc, #52]	; (801ed20 <pbuf_cat+0xa8>)
 801ecec:	480a      	ldr	r0, [pc, #40]	; (801ed18 <pbuf_cat+0xa0>)
 801ecee:	f003 fc39 	bl	8022564 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ecf2:	68fb      	ldr	r3, [r7, #12]
 801ecf4:	891a      	ldrh	r2, [r3, #8]
 801ecf6:	683b      	ldr	r3, [r7, #0]
 801ecf8:	891b      	ldrh	r3, [r3, #8]
 801ecfa:	4413      	add	r3, r2
 801ecfc:	b29a      	uxth	r2, r3
 801ecfe:	68fb      	ldr	r3, [r7, #12]
 801ed00:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801ed02:	68fb      	ldr	r3, [r7, #12]
 801ed04:	683a      	ldr	r2, [r7, #0]
 801ed06:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801ed08:	3710      	adds	r7, #16
 801ed0a:	46bd      	mov	sp, r7
 801ed0c:	bd80      	pop	{r7, pc}
 801ed0e:	bf00      	nop
 801ed10:	0802797c 	.word	0x0802797c
 801ed14:	08027bc0 	.word	0x08027bc0
 801ed18:	08027a2c 	.word	0x08027a2c
 801ed1c:	08027bf8 	.word	0x08027bf8
 801ed20:	08027c28 	.word	0x08027c28

0801ed24 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801ed24:	b580      	push	{r7, lr}
 801ed26:	b082      	sub	sp, #8
 801ed28:	af00      	add	r7, sp, #0
 801ed2a:	6078      	str	r0, [r7, #4]
 801ed2c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801ed2e:	6839      	ldr	r1, [r7, #0]
 801ed30:	6878      	ldr	r0, [r7, #4]
 801ed32:	f7ff ffa1 	bl	801ec78 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801ed36:	6838      	ldr	r0, [r7, #0]
 801ed38:	f7ff ff7c 	bl	801ec34 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801ed3c:	bf00      	nop
 801ed3e:	3708      	adds	r7, #8
 801ed40:	46bd      	mov	sp, r7
 801ed42:	bd80      	pop	{r7, pc}

0801ed44 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801ed44:	b580      	push	{r7, lr}
 801ed46:	b086      	sub	sp, #24
 801ed48:	af00      	add	r7, sp, #0
 801ed4a:	6078      	str	r0, [r7, #4]
 801ed4c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801ed4e:	2300      	movs	r3, #0
 801ed50:	617b      	str	r3, [r7, #20]
 801ed52:	2300      	movs	r3, #0
 801ed54:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d008      	beq.n	801ed6e <pbuf_copy+0x2a>
 801ed5c:	683b      	ldr	r3, [r7, #0]
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d005      	beq.n	801ed6e <pbuf_copy+0x2a>
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	891a      	ldrh	r2, [r3, #8]
 801ed66:	683b      	ldr	r3, [r7, #0]
 801ed68:	891b      	ldrh	r3, [r3, #8]
 801ed6a:	429a      	cmp	r2, r3
 801ed6c:	d209      	bcs.n	801ed82 <pbuf_copy+0x3e>
 801ed6e:	4b57      	ldr	r3, [pc, #348]	; (801eecc <pbuf_copy+0x188>)
 801ed70:	f240 32c9 	movw	r2, #969	; 0x3c9
 801ed74:	4956      	ldr	r1, [pc, #344]	; (801eed0 <pbuf_copy+0x18c>)
 801ed76:	4857      	ldr	r0, [pc, #348]	; (801eed4 <pbuf_copy+0x190>)
 801ed78:	f003 fbf4 	bl	8022564 <iprintf>
 801ed7c:	f06f 030f 	mvn.w	r3, #15
 801ed80:	e09f      	b.n	801eec2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	895b      	ldrh	r3, [r3, #10]
 801ed86:	461a      	mov	r2, r3
 801ed88:	697b      	ldr	r3, [r7, #20]
 801ed8a:	1ad2      	subs	r2, r2, r3
 801ed8c:	683b      	ldr	r3, [r7, #0]
 801ed8e:	895b      	ldrh	r3, [r3, #10]
 801ed90:	4619      	mov	r1, r3
 801ed92:	693b      	ldr	r3, [r7, #16]
 801ed94:	1acb      	subs	r3, r1, r3
 801ed96:	429a      	cmp	r2, r3
 801ed98:	d306      	bcc.n	801eda8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801ed9a:	683b      	ldr	r3, [r7, #0]
 801ed9c:	895b      	ldrh	r3, [r3, #10]
 801ed9e:	461a      	mov	r2, r3
 801eda0:	693b      	ldr	r3, [r7, #16]
 801eda2:	1ad3      	subs	r3, r2, r3
 801eda4:	60fb      	str	r3, [r7, #12]
 801eda6:	e005      	b.n	801edb4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	895b      	ldrh	r3, [r3, #10]
 801edac:	461a      	mov	r2, r3
 801edae:	697b      	ldr	r3, [r7, #20]
 801edb0:	1ad3      	subs	r3, r2, r3
 801edb2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	685a      	ldr	r2, [r3, #4]
 801edb8:	697b      	ldr	r3, [r7, #20]
 801edba:	18d0      	adds	r0, r2, r3
 801edbc:	683b      	ldr	r3, [r7, #0]
 801edbe:	685a      	ldr	r2, [r3, #4]
 801edc0:	693b      	ldr	r3, [r7, #16]
 801edc2:	4413      	add	r3, r2
 801edc4:	68fa      	ldr	r2, [r7, #12]
 801edc6:	4619      	mov	r1, r3
 801edc8:	f003 fabc 	bl	8022344 <memcpy>
    offset_to += len;
 801edcc:	697a      	ldr	r2, [r7, #20]
 801edce:	68fb      	ldr	r3, [r7, #12]
 801edd0:	4413      	add	r3, r2
 801edd2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801edd4:	693a      	ldr	r2, [r7, #16]
 801edd6:	68fb      	ldr	r3, [r7, #12]
 801edd8:	4413      	add	r3, r2
 801edda:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	895b      	ldrh	r3, [r3, #10]
 801ede0:	461a      	mov	r2, r3
 801ede2:	697b      	ldr	r3, [r7, #20]
 801ede4:	4293      	cmp	r3, r2
 801ede6:	d906      	bls.n	801edf6 <pbuf_copy+0xb2>
 801ede8:	4b38      	ldr	r3, [pc, #224]	; (801eecc <pbuf_copy+0x188>)
 801edea:	f240 32d9 	movw	r2, #985	; 0x3d9
 801edee:	493a      	ldr	r1, [pc, #232]	; (801eed8 <pbuf_copy+0x194>)
 801edf0:	4838      	ldr	r0, [pc, #224]	; (801eed4 <pbuf_copy+0x190>)
 801edf2:	f003 fbb7 	bl	8022564 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801edf6:	683b      	ldr	r3, [r7, #0]
 801edf8:	895b      	ldrh	r3, [r3, #10]
 801edfa:	461a      	mov	r2, r3
 801edfc:	693b      	ldr	r3, [r7, #16]
 801edfe:	4293      	cmp	r3, r2
 801ee00:	d906      	bls.n	801ee10 <pbuf_copy+0xcc>
 801ee02:	4b32      	ldr	r3, [pc, #200]	; (801eecc <pbuf_copy+0x188>)
 801ee04:	f240 32da 	movw	r2, #986	; 0x3da
 801ee08:	4934      	ldr	r1, [pc, #208]	; (801eedc <pbuf_copy+0x198>)
 801ee0a:	4832      	ldr	r0, [pc, #200]	; (801eed4 <pbuf_copy+0x190>)
 801ee0c:	f003 fbaa 	bl	8022564 <iprintf>
    if (offset_from >= p_from->len) {
 801ee10:	683b      	ldr	r3, [r7, #0]
 801ee12:	895b      	ldrh	r3, [r3, #10]
 801ee14:	461a      	mov	r2, r3
 801ee16:	693b      	ldr	r3, [r7, #16]
 801ee18:	4293      	cmp	r3, r2
 801ee1a:	d304      	bcc.n	801ee26 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801ee20:	683b      	ldr	r3, [r7, #0]
 801ee22:	681b      	ldr	r3, [r3, #0]
 801ee24:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	895b      	ldrh	r3, [r3, #10]
 801ee2a:	461a      	mov	r2, r3
 801ee2c:	697b      	ldr	r3, [r7, #20]
 801ee2e:	4293      	cmp	r3, r2
 801ee30:	d114      	bne.n	801ee5c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801ee32:	2300      	movs	r3, #0
 801ee34:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d10c      	bne.n	801ee5c <pbuf_copy+0x118>
 801ee42:	683b      	ldr	r3, [r7, #0]
 801ee44:	2b00      	cmp	r3, #0
 801ee46:	d009      	beq.n	801ee5c <pbuf_copy+0x118>
 801ee48:	4b20      	ldr	r3, [pc, #128]	; (801eecc <pbuf_copy+0x188>)
 801ee4a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801ee4e:	4924      	ldr	r1, [pc, #144]	; (801eee0 <pbuf_copy+0x19c>)
 801ee50:	4820      	ldr	r0, [pc, #128]	; (801eed4 <pbuf_copy+0x190>)
 801ee52:	f003 fb87 	bl	8022564 <iprintf>
 801ee56:	f06f 030f 	mvn.w	r3, #15
 801ee5a:	e032      	b.n	801eec2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801ee5c:	683b      	ldr	r3, [r7, #0]
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	d013      	beq.n	801ee8a <pbuf_copy+0x146>
 801ee62:	683b      	ldr	r3, [r7, #0]
 801ee64:	895a      	ldrh	r2, [r3, #10]
 801ee66:	683b      	ldr	r3, [r7, #0]
 801ee68:	891b      	ldrh	r3, [r3, #8]
 801ee6a:	429a      	cmp	r2, r3
 801ee6c:	d10d      	bne.n	801ee8a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ee6e:	683b      	ldr	r3, [r7, #0]
 801ee70:	681b      	ldr	r3, [r3, #0]
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d009      	beq.n	801ee8a <pbuf_copy+0x146>
 801ee76:	4b15      	ldr	r3, [pc, #84]	; (801eecc <pbuf_copy+0x188>)
 801ee78:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801ee7c:	4919      	ldr	r1, [pc, #100]	; (801eee4 <pbuf_copy+0x1a0>)
 801ee7e:	4815      	ldr	r0, [pc, #84]	; (801eed4 <pbuf_copy+0x190>)
 801ee80:	f003 fb70 	bl	8022564 <iprintf>
 801ee84:	f06f 0305 	mvn.w	r3, #5
 801ee88:	e01b      	b.n	801eec2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	d013      	beq.n	801eeb8 <pbuf_copy+0x174>
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	895a      	ldrh	r2, [r3, #10]
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	891b      	ldrh	r3, [r3, #8]
 801ee98:	429a      	cmp	r2, r3
 801ee9a:	d10d      	bne.n	801eeb8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	d009      	beq.n	801eeb8 <pbuf_copy+0x174>
 801eea4:	4b09      	ldr	r3, [pc, #36]	; (801eecc <pbuf_copy+0x188>)
 801eea6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801eeaa:	490e      	ldr	r1, [pc, #56]	; (801eee4 <pbuf_copy+0x1a0>)
 801eeac:	4809      	ldr	r0, [pc, #36]	; (801eed4 <pbuf_copy+0x190>)
 801eeae:	f003 fb59 	bl	8022564 <iprintf>
 801eeb2:	f06f 0305 	mvn.w	r3, #5
 801eeb6:	e004      	b.n	801eec2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801eeb8:	683b      	ldr	r3, [r7, #0]
 801eeba:	2b00      	cmp	r3, #0
 801eebc:	f47f af61 	bne.w	801ed82 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801eec0:	2300      	movs	r3, #0
}
 801eec2:	4618      	mov	r0, r3
 801eec4:	3718      	adds	r7, #24
 801eec6:	46bd      	mov	sp, r7
 801eec8:	bd80      	pop	{r7, pc}
 801eeca:	bf00      	nop
 801eecc:	0802797c 	.word	0x0802797c
 801eed0:	08027c74 	.word	0x08027c74
 801eed4:	08027a2c 	.word	0x08027a2c
 801eed8:	08027ca4 	.word	0x08027ca4
 801eedc:	08027cbc 	.word	0x08027cbc
 801eee0:	08027cd8 	.word	0x08027cd8
 801eee4:	08027ce8 	.word	0x08027ce8

0801eee8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801eee8:	b580      	push	{r7, lr}
 801eeea:	b088      	sub	sp, #32
 801eeec:	af00      	add	r7, sp, #0
 801eeee:	60f8      	str	r0, [r7, #12]
 801eef0:	60b9      	str	r1, [r7, #8]
 801eef2:	4613      	mov	r3, r2
 801eef4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801eef6:	88fb      	ldrh	r3, [r7, #6]
 801eef8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801eefa:	2300      	movs	r3, #0
 801eefc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801eefe:	68fb      	ldr	r3, [r7, #12]
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d109      	bne.n	801ef18 <pbuf_take+0x30>
 801ef04:	4b3a      	ldr	r3, [pc, #232]	; (801eff0 <pbuf_take+0x108>)
 801ef06:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801ef0a:	493a      	ldr	r1, [pc, #232]	; (801eff4 <pbuf_take+0x10c>)
 801ef0c:	483a      	ldr	r0, [pc, #232]	; (801eff8 <pbuf_take+0x110>)
 801ef0e:	f003 fb29 	bl	8022564 <iprintf>
 801ef12:	f06f 030f 	mvn.w	r3, #15
 801ef16:	e067      	b.n	801efe8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801ef18:	68bb      	ldr	r3, [r7, #8]
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d109      	bne.n	801ef32 <pbuf_take+0x4a>
 801ef1e:	4b34      	ldr	r3, [pc, #208]	; (801eff0 <pbuf_take+0x108>)
 801ef20:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801ef24:	4935      	ldr	r1, [pc, #212]	; (801effc <pbuf_take+0x114>)
 801ef26:	4834      	ldr	r0, [pc, #208]	; (801eff8 <pbuf_take+0x110>)
 801ef28:	f003 fb1c 	bl	8022564 <iprintf>
 801ef2c:	f06f 030f 	mvn.w	r3, #15
 801ef30:	e05a      	b.n	801efe8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	891b      	ldrh	r3, [r3, #8]
 801ef36:	88fa      	ldrh	r2, [r7, #6]
 801ef38:	429a      	cmp	r2, r3
 801ef3a:	d909      	bls.n	801ef50 <pbuf_take+0x68>
 801ef3c:	4b2c      	ldr	r3, [pc, #176]	; (801eff0 <pbuf_take+0x108>)
 801ef3e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801ef42:	492f      	ldr	r1, [pc, #188]	; (801f000 <pbuf_take+0x118>)
 801ef44:	482c      	ldr	r0, [pc, #176]	; (801eff8 <pbuf_take+0x110>)
 801ef46:	f003 fb0d 	bl	8022564 <iprintf>
 801ef4a:	f04f 33ff 	mov.w	r3, #4294967295
 801ef4e:	e04b      	b.n	801efe8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801ef50:	68fb      	ldr	r3, [r7, #12]
 801ef52:	2b00      	cmp	r3, #0
 801ef54:	d007      	beq.n	801ef66 <pbuf_take+0x7e>
 801ef56:	68bb      	ldr	r3, [r7, #8]
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d004      	beq.n	801ef66 <pbuf_take+0x7e>
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	891b      	ldrh	r3, [r3, #8]
 801ef60:	88fa      	ldrh	r2, [r7, #6]
 801ef62:	429a      	cmp	r2, r3
 801ef64:	d902      	bls.n	801ef6c <pbuf_take+0x84>
    return ERR_ARG;
 801ef66:	f06f 030f 	mvn.w	r3, #15
 801ef6a:	e03d      	b.n	801efe8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801ef6c:	68fb      	ldr	r3, [r7, #12]
 801ef6e:	61fb      	str	r3, [r7, #28]
 801ef70:	e028      	b.n	801efc4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801ef72:	69fb      	ldr	r3, [r7, #28]
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d106      	bne.n	801ef86 <pbuf_take+0x9e>
 801ef78:	4b1d      	ldr	r3, [pc, #116]	; (801eff0 <pbuf_take+0x108>)
 801ef7a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801ef7e:	4921      	ldr	r1, [pc, #132]	; (801f004 <pbuf_take+0x11c>)
 801ef80:	481d      	ldr	r0, [pc, #116]	; (801eff8 <pbuf_take+0x110>)
 801ef82:	f003 faef 	bl	8022564 <iprintf>
    buf_copy_len = total_copy_len;
 801ef86:	697b      	ldr	r3, [r7, #20]
 801ef88:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801ef8a:	69fb      	ldr	r3, [r7, #28]
 801ef8c:	895b      	ldrh	r3, [r3, #10]
 801ef8e:	461a      	mov	r2, r3
 801ef90:	69bb      	ldr	r3, [r7, #24]
 801ef92:	4293      	cmp	r3, r2
 801ef94:	d902      	bls.n	801ef9c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801ef96:	69fb      	ldr	r3, [r7, #28]
 801ef98:	895b      	ldrh	r3, [r3, #10]
 801ef9a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801ef9c:	69fb      	ldr	r3, [r7, #28]
 801ef9e:	6858      	ldr	r0, [r3, #4]
 801efa0:	68ba      	ldr	r2, [r7, #8]
 801efa2:	693b      	ldr	r3, [r7, #16]
 801efa4:	4413      	add	r3, r2
 801efa6:	69ba      	ldr	r2, [r7, #24]
 801efa8:	4619      	mov	r1, r3
 801efaa:	f003 f9cb 	bl	8022344 <memcpy>
    total_copy_len -= buf_copy_len;
 801efae:	697a      	ldr	r2, [r7, #20]
 801efb0:	69bb      	ldr	r3, [r7, #24]
 801efb2:	1ad3      	subs	r3, r2, r3
 801efb4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801efb6:	693a      	ldr	r2, [r7, #16]
 801efb8:	69bb      	ldr	r3, [r7, #24]
 801efba:	4413      	add	r3, r2
 801efbc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801efbe:	69fb      	ldr	r3, [r7, #28]
 801efc0:	681b      	ldr	r3, [r3, #0]
 801efc2:	61fb      	str	r3, [r7, #28]
 801efc4:	697b      	ldr	r3, [r7, #20]
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	d1d3      	bne.n	801ef72 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801efca:	697b      	ldr	r3, [r7, #20]
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d103      	bne.n	801efd8 <pbuf_take+0xf0>
 801efd0:	88fb      	ldrh	r3, [r7, #6]
 801efd2:	693a      	ldr	r2, [r7, #16]
 801efd4:	429a      	cmp	r2, r3
 801efd6:	d006      	beq.n	801efe6 <pbuf_take+0xfe>
 801efd8:	4b05      	ldr	r3, [pc, #20]	; (801eff0 <pbuf_take+0x108>)
 801efda:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801efde:	490a      	ldr	r1, [pc, #40]	; (801f008 <pbuf_take+0x120>)
 801efe0:	4805      	ldr	r0, [pc, #20]	; (801eff8 <pbuf_take+0x110>)
 801efe2:	f003 fabf 	bl	8022564 <iprintf>
  return ERR_OK;
 801efe6:	2300      	movs	r3, #0
}
 801efe8:	4618      	mov	r0, r3
 801efea:	3720      	adds	r7, #32
 801efec:	46bd      	mov	sp, r7
 801efee:	bd80      	pop	{r7, pc}
 801eff0:	0802797c 	.word	0x0802797c
 801eff4:	08027da4 	.word	0x08027da4
 801eff8:	08027a2c 	.word	0x08027a2c
 801effc:	08027dbc 	.word	0x08027dbc
 801f000:	08027dd8 	.word	0x08027dd8
 801f004:	08027df8 	.word	0x08027df8
 801f008:	08027e10 	.word	0x08027e10

0801f00c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801f00c:	b580      	push	{r7, lr}
 801f00e:	b084      	sub	sp, #16
 801f010:	af00      	add	r7, sp, #0
 801f012:	4603      	mov	r3, r0
 801f014:	603a      	str	r2, [r7, #0]
 801f016:	71fb      	strb	r3, [r7, #7]
 801f018:	460b      	mov	r3, r1
 801f01a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801f01c:	683b      	ldr	r3, [r7, #0]
 801f01e:	8919      	ldrh	r1, [r3, #8]
 801f020:	88ba      	ldrh	r2, [r7, #4]
 801f022:	79fb      	ldrb	r3, [r7, #7]
 801f024:	4618      	mov	r0, r3
 801f026:	f7ff fa83 	bl	801e530 <pbuf_alloc>
 801f02a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801f02c:	68fb      	ldr	r3, [r7, #12]
 801f02e:	2b00      	cmp	r3, #0
 801f030:	d101      	bne.n	801f036 <pbuf_clone+0x2a>
    return NULL;
 801f032:	2300      	movs	r3, #0
 801f034:	e011      	b.n	801f05a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801f036:	6839      	ldr	r1, [r7, #0]
 801f038:	68f8      	ldr	r0, [r7, #12]
 801f03a:	f7ff fe83 	bl	801ed44 <pbuf_copy>
 801f03e:	4603      	mov	r3, r0
 801f040:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801f042:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f046:	2b00      	cmp	r3, #0
 801f048:	d006      	beq.n	801f058 <pbuf_clone+0x4c>
 801f04a:	4b06      	ldr	r3, [pc, #24]	; (801f064 <pbuf_clone+0x58>)
 801f04c:	f240 5224 	movw	r2, #1316	; 0x524
 801f050:	4905      	ldr	r1, [pc, #20]	; (801f068 <pbuf_clone+0x5c>)
 801f052:	4806      	ldr	r0, [pc, #24]	; (801f06c <pbuf_clone+0x60>)
 801f054:	f003 fa86 	bl	8022564 <iprintf>
  return q;
 801f058:	68fb      	ldr	r3, [r7, #12]
}
 801f05a:	4618      	mov	r0, r3
 801f05c:	3710      	adds	r7, #16
 801f05e:	46bd      	mov	sp, r7
 801f060:	bd80      	pop	{r7, pc}
 801f062:	bf00      	nop
 801f064:	0802797c 	.word	0x0802797c
 801f068:	08027e40 	.word	0x08027e40
 801f06c:	08027a2c 	.word	0x08027a2c

0801f070 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f070:	b580      	push	{r7, lr}
 801f072:	b086      	sub	sp, #24
 801f074:	af00      	add	r7, sp, #0
 801f076:	60f8      	str	r0, [r7, #12]
 801f078:	60b9      	str	r1, [r7, #8]
 801f07a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f07c:	2003      	movs	r0, #3
 801f07e:	f7fe fdb9 	bl	801dbf4 <memp_malloc>
 801f082:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f084:	693b      	ldr	r3, [r7, #16]
 801f086:	2b00      	cmp	r3, #0
 801f088:	d109      	bne.n	801f09e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f08a:	693b      	ldr	r3, [r7, #16]
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d151      	bne.n	801f134 <sys_timeout_abs+0xc4>
 801f090:	4b2a      	ldr	r3, [pc, #168]	; (801f13c <sys_timeout_abs+0xcc>)
 801f092:	22be      	movs	r2, #190	; 0xbe
 801f094:	492a      	ldr	r1, [pc, #168]	; (801f140 <sys_timeout_abs+0xd0>)
 801f096:	482b      	ldr	r0, [pc, #172]	; (801f144 <sys_timeout_abs+0xd4>)
 801f098:	f003 fa64 	bl	8022564 <iprintf>
    return;
 801f09c:	e04a      	b.n	801f134 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f09e:	693b      	ldr	r3, [r7, #16]
 801f0a0:	2200      	movs	r2, #0
 801f0a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f0a4:	693b      	ldr	r3, [r7, #16]
 801f0a6:	68ba      	ldr	r2, [r7, #8]
 801f0a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f0aa:	693b      	ldr	r3, [r7, #16]
 801f0ac:	687a      	ldr	r2, [r7, #4]
 801f0ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f0b0:	693b      	ldr	r3, [r7, #16]
 801f0b2:	68fa      	ldr	r2, [r7, #12]
 801f0b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f0b6:	4b24      	ldr	r3, [pc, #144]	; (801f148 <sys_timeout_abs+0xd8>)
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	2b00      	cmp	r3, #0
 801f0bc:	d103      	bne.n	801f0c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f0be:	4a22      	ldr	r2, [pc, #136]	; (801f148 <sys_timeout_abs+0xd8>)
 801f0c0:	693b      	ldr	r3, [r7, #16]
 801f0c2:	6013      	str	r3, [r2, #0]
    return;
 801f0c4:	e037      	b.n	801f136 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f0c6:	693b      	ldr	r3, [r7, #16]
 801f0c8:	685a      	ldr	r2, [r3, #4]
 801f0ca:	4b1f      	ldr	r3, [pc, #124]	; (801f148 <sys_timeout_abs+0xd8>)
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	685b      	ldr	r3, [r3, #4]
 801f0d0:	1ad3      	subs	r3, r2, r3
 801f0d2:	0fdb      	lsrs	r3, r3, #31
 801f0d4:	f003 0301 	and.w	r3, r3, #1
 801f0d8:	b2db      	uxtb	r3, r3
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d007      	beq.n	801f0ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f0de:	4b1a      	ldr	r3, [pc, #104]	; (801f148 <sys_timeout_abs+0xd8>)
 801f0e0:	681a      	ldr	r2, [r3, #0]
 801f0e2:	693b      	ldr	r3, [r7, #16]
 801f0e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f0e6:	4a18      	ldr	r2, [pc, #96]	; (801f148 <sys_timeout_abs+0xd8>)
 801f0e8:	693b      	ldr	r3, [r7, #16]
 801f0ea:	6013      	str	r3, [r2, #0]
 801f0ec:	e023      	b.n	801f136 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f0ee:	4b16      	ldr	r3, [pc, #88]	; (801f148 <sys_timeout_abs+0xd8>)
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	617b      	str	r3, [r7, #20]
 801f0f4:	e01a      	b.n	801f12c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f0f6:	697b      	ldr	r3, [r7, #20]
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d00b      	beq.n	801f116 <sys_timeout_abs+0xa6>
 801f0fe:	693b      	ldr	r3, [r7, #16]
 801f100:	685a      	ldr	r2, [r3, #4]
 801f102:	697b      	ldr	r3, [r7, #20]
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	685b      	ldr	r3, [r3, #4]
 801f108:	1ad3      	subs	r3, r2, r3
 801f10a:	0fdb      	lsrs	r3, r3, #31
 801f10c:	f003 0301 	and.w	r3, r3, #1
 801f110:	b2db      	uxtb	r3, r3
 801f112:	2b00      	cmp	r3, #0
 801f114:	d007      	beq.n	801f126 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f116:	697b      	ldr	r3, [r7, #20]
 801f118:	681a      	ldr	r2, [r3, #0]
 801f11a:	693b      	ldr	r3, [r7, #16]
 801f11c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f11e:	697b      	ldr	r3, [r7, #20]
 801f120:	693a      	ldr	r2, [r7, #16]
 801f122:	601a      	str	r2, [r3, #0]
        break;
 801f124:	e007      	b.n	801f136 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f126:	697b      	ldr	r3, [r7, #20]
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	617b      	str	r3, [r7, #20]
 801f12c:	697b      	ldr	r3, [r7, #20]
 801f12e:	2b00      	cmp	r3, #0
 801f130:	d1e1      	bne.n	801f0f6 <sys_timeout_abs+0x86>
 801f132:	e000      	b.n	801f136 <sys_timeout_abs+0xc6>
    return;
 801f134:	bf00      	nop
      }
    }
  }
}
 801f136:	3718      	adds	r7, #24
 801f138:	46bd      	mov	sp, r7
 801f13a:	bd80      	pop	{r7, pc}
 801f13c:	08027e54 	.word	0x08027e54
 801f140:	08027ed8 	.word	0x08027ed8
 801f144:	08027f18 	.word	0x08027f18
 801f148:	20013dbc 	.word	0x20013dbc

0801f14c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f14c:	b580      	push	{r7, lr}
 801f14e:	b086      	sub	sp, #24
 801f150:	af00      	add	r7, sp, #0
 801f152:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f158:	697b      	ldr	r3, [r7, #20]
 801f15a:	685b      	ldr	r3, [r3, #4]
 801f15c:	4798      	blx	r3

  now = sys_now();
 801f15e:	f7fd fed9 	bl	801cf14 <sys_now>
 801f162:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f164:	697b      	ldr	r3, [r7, #20]
 801f166:	681a      	ldr	r2, [r3, #0]
 801f168:	4b0f      	ldr	r3, [pc, #60]	; (801f1a8 <lwip_cyclic_timer+0x5c>)
 801f16a:	681b      	ldr	r3, [r3, #0]
 801f16c:	4413      	add	r3, r2
 801f16e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f170:	68fa      	ldr	r2, [r7, #12]
 801f172:	693b      	ldr	r3, [r7, #16]
 801f174:	1ad3      	subs	r3, r2, r3
 801f176:	0fdb      	lsrs	r3, r3, #31
 801f178:	f003 0301 	and.w	r3, r3, #1
 801f17c:	b2db      	uxtb	r3, r3
 801f17e:	2b00      	cmp	r3, #0
 801f180:	d009      	beq.n	801f196 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f182:	697b      	ldr	r3, [r7, #20]
 801f184:	681a      	ldr	r2, [r3, #0]
 801f186:	693b      	ldr	r3, [r7, #16]
 801f188:	4413      	add	r3, r2
 801f18a:	687a      	ldr	r2, [r7, #4]
 801f18c:	4907      	ldr	r1, [pc, #28]	; (801f1ac <lwip_cyclic_timer+0x60>)
 801f18e:	4618      	mov	r0, r3
 801f190:	f7ff ff6e 	bl	801f070 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f194:	e004      	b.n	801f1a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f196:	687a      	ldr	r2, [r7, #4]
 801f198:	4904      	ldr	r1, [pc, #16]	; (801f1ac <lwip_cyclic_timer+0x60>)
 801f19a:	68f8      	ldr	r0, [r7, #12]
 801f19c:	f7ff ff68 	bl	801f070 <sys_timeout_abs>
}
 801f1a0:	bf00      	nop
 801f1a2:	3718      	adds	r7, #24
 801f1a4:	46bd      	mov	sp, r7
 801f1a6:	bd80      	pop	{r7, pc}
 801f1a8:	20013dc0 	.word	0x20013dc0
 801f1ac:	0801f14d 	.word	0x0801f14d

0801f1b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f1b0:	b580      	push	{r7, lr}
 801f1b2:	b082      	sub	sp, #8
 801f1b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f1b6:	2300      	movs	r3, #0
 801f1b8:	607b      	str	r3, [r7, #4]
 801f1ba:	e00e      	b.n	801f1da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f1bc:	4a0b      	ldr	r2, [pc, #44]	; (801f1ec <sys_timeouts_init+0x3c>)
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	00db      	lsls	r3, r3, #3
 801f1c8:	4a08      	ldr	r2, [pc, #32]	; (801f1ec <sys_timeouts_init+0x3c>)
 801f1ca:	4413      	add	r3, r2
 801f1cc:	461a      	mov	r2, r3
 801f1ce:	4908      	ldr	r1, [pc, #32]	; (801f1f0 <sys_timeouts_init+0x40>)
 801f1d0:	f000 f810 	bl	801f1f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	3301      	adds	r3, #1
 801f1d8:	607b      	str	r3, [r7, #4]
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	2b01      	cmp	r3, #1
 801f1de:	d9ed      	bls.n	801f1bc <sys_timeouts_init+0xc>
  }
}
 801f1e0:	bf00      	nop
 801f1e2:	bf00      	nop
 801f1e4:	3708      	adds	r7, #8
 801f1e6:	46bd      	mov	sp, r7
 801f1e8:	bd80      	pop	{r7, pc}
 801f1ea:	bf00      	nop
 801f1ec:	08029028 	.word	0x08029028
 801f1f0:	0801f14d 	.word	0x0801f14d

0801f1f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f1f4:	b580      	push	{r7, lr}
 801f1f6:	b086      	sub	sp, #24
 801f1f8:	af00      	add	r7, sp, #0
 801f1fa:	60f8      	str	r0, [r7, #12]
 801f1fc:	60b9      	str	r1, [r7, #8]
 801f1fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f200:	68fb      	ldr	r3, [r7, #12]
 801f202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f206:	d306      	bcc.n	801f216 <sys_timeout+0x22>
 801f208:	4b0a      	ldr	r3, [pc, #40]	; (801f234 <sys_timeout+0x40>)
 801f20a:	f240 1229 	movw	r2, #297	; 0x129
 801f20e:	490a      	ldr	r1, [pc, #40]	; (801f238 <sys_timeout+0x44>)
 801f210:	480a      	ldr	r0, [pc, #40]	; (801f23c <sys_timeout+0x48>)
 801f212:	f003 f9a7 	bl	8022564 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f216:	f7fd fe7d 	bl	801cf14 <sys_now>
 801f21a:	4602      	mov	r2, r0
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	4413      	add	r3, r2
 801f220:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f222:	687a      	ldr	r2, [r7, #4]
 801f224:	68b9      	ldr	r1, [r7, #8]
 801f226:	6978      	ldr	r0, [r7, #20]
 801f228:	f7ff ff22 	bl	801f070 <sys_timeout_abs>
#endif
}
 801f22c:	bf00      	nop
 801f22e:	3718      	adds	r7, #24
 801f230:	46bd      	mov	sp, r7
 801f232:	bd80      	pop	{r7, pc}
 801f234:	08027e54 	.word	0x08027e54
 801f238:	08027f40 	.word	0x08027f40
 801f23c:	08027f18 	.word	0x08027f18

0801f240 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f240:	b580      	push	{r7, lr}
 801f242:	b084      	sub	sp, #16
 801f244:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f246:	f7fd fe65 	bl	801cf14 <sys_now>
 801f24a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f24c:	4b17      	ldr	r3, [pc, #92]	; (801f2ac <sys_check_timeouts+0x6c>)
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f252:	68bb      	ldr	r3, [r7, #8]
 801f254:	2b00      	cmp	r3, #0
 801f256:	d022      	beq.n	801f29e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f258:	68bb      	ldr	r3, [r7, #8]
 801f25a:	685b      	ldr	r3, [r3, #4]
 801f25c:	68fa      	ldr	r2, [r7, #12]
 801f25e:	1ad3      	subs	r3, r2, r3
 801f260:	0fdb      	lsrs	r3, r3, #31
 801f262:	f003 0301 	and.w	r3, r3, #1
 801f266:	b2db      	uxtb	r3, r3
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d11a      	bne.n	801f2a2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f26c:	68bb      	ldr	r3, [r7, #8]
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	4a0e      	ldr	r2, [pc, #56]	; (801f2ac <sys_check_timeouts+0x6c>)
 801f272:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f274:	68bb      	ldr	r3, [r7, #8]
 801f276:	689b      	ldr	r3, [r3, #8]
 801f278:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f27a:	68bb      	ldr	r3, [r7, #8]
 801f27c:	68db      	ldr	r3, [r3, #12]
 801f27e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f280:	68bb      	ldr	r3, [r7, #8]
 801f282:	685b      	ldr	r3, [r3, #4]
 801f284:	4a0a      	ldr	r2, [pc, #40]	; (801f2b0 <sys_check_timeouts+0x70>)
 801f286:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f288:	68b9      	ldr	r1, [r7, #8]
 801f28a:	2003      	movs	r0, #3
 801f28c:	f7fe fd22 	bl	801dcd4 <memp_free>
    if (handler != NULL) {
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	2b00      	cmp	r3, #0
 801f294:	d0da      	beq.n	801f24c <sys_check_timeouts+0xc>
      handler(arg);
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	6838      	ldr	r0, [r7, #0]
 801f29a:	4798      	blx	r3
  do {
 801f29c:	e7d6      	b.n	801f24c <sys_check_timeouts+0xc>
      return;
 801f29e:	bf00      	nop
 801f2a0:	e000      	b.n	801f2a4 <sys_check_timeouts+0x64>
      return;
 801f2a2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f2a4:	3710      	adds	r7, #16
 801f2a6:	46bd      	mov	sp, r7
 801f2a8:	bd80      	pop	{r7, pc}
 801f2aa:	bf00      	nop
 801f2ac:	20013dbc 	.word	0x20013dbc
 801f2b0:	20013dc0 	.word	0x20013dc0

0801f2b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f2b4:	b580      	push	{r7, lr}
 801f2b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f2b8:	f003 f9f8 	bl	80226ac <rand>
 801f2bc:	4603      	mov	r3, r0
 801f2be:	b29b      	uxth	r3, r3
 801f2c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f2c4:	b29b      	uxth	r3, r3
 801f2c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f2ca:	b29a      	uxth	r2, r3
 801f2cc:	4b01      	ldr	r3, [pc, #4]	; (801f2d4 <udp_init+0x20>)
 801f2ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f2d0:	bf00      	nop
 801f2d2:	bd80      	pop	{r7, pc}
 801f2d4:	2000013c 	.word	0x2000013c

0801f2d8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f2d8:	b480      	push	{r7}
 801f2da:	b083      	sub	sp, #12
 801f2dc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f2de:	2300      	movs	r3, #0
 801f2e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f2e2:	4b17      	ldr	r3, [pc, #92]	; (801f340 <udp_new_port+0x68>)
 801f2e4:	881b      	ldrh	r3, [r3, #0]
 801f2e6:	1c5a      	adds	r2, r3, #1
 801f2e8:	b291      	uxth	r1, r2
 801f2ea:	4a15      	ldr	r2, [pc, #84]	; (801f340 <udp_new_port+0x68>)
 801f2ec:	8011      	strh	r1, [r2, #0]
 801f2ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f2f2:	4293      	cmp	r3, r2
 801f2f4:	d103      	bne.n	801f2fe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f2f6:	4b12      	ldr	r3, [pc, #72]	; (801f340 <udp_new_port+0x68>)
 801f2f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f2fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f2fe:	4b11      	ldr	r3, [pc, #68]	; (801f344 <udp_new_port+0x6c>)
 801f300:	681b      	ldr	r3, [r3, #0]
 801f302:	603b      	str	r3, [r7, #0]
 801f304:	e011      	b.n	801f32a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f306:	683b      	ldr	r3, [r7, #0]
 801f308:	8a5a      	ldrh	r2, [r3, #18]
 801f30a:	4b0d      	ldr	r3, [pc, #52]	; (801f340 <udp_new_port+0x68>)
 801f30c:	881b      	ldrh	r3, [r3, #0]
 801f30e:	429a      	cmp	r2, r3
 801f310:	d108      	bne.n	801f324 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f312:	88fb      	ldrh	r3, [r7, #6]
 801f314:	3301      	adds	r3, #1
 801f316:	80fb      	strh	r3, [r7, #6]
 801f318:	88fb      	ldrh	r3, [r7, #6]
 801f31a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f31e:	d3e0      	bcc.n	801f2e2 <udp_new_port+0xa>
        return 0;
 801f320:	2300      	movs	r3, #0
 801f322:	e007      	b.n	801f334 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f324:	683b      	ldr	r3, [r7, #0]
 801f326:	68db      	ldr	r3, [r3, #12]
 801f328:	603b      	str	r3, [r7, #0]
 801f32a:	683b      	ldr	r3, [r7, #0]
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d1ea      	bne.n	801f306 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f330:	4b03      	ldr	r3, [pc, #12]	; (801f340 <udp_new_port+0x68>)
 801f332:	881b      	ldrh	r3, [r3, #0]
}
 801f334:	4618      	mov	r0, r3
 801f336:	370c      	adds	r7, #12
 801f338:	46bd      	mov	sp, r7
 801f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f33e:	4770      	bx	lr
 801f340:	2000013c 	.word	0x2000013c
 801f344:	20013dc4 	.word	0x20013dc4

0801f348 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f348:	b580      	push	{r7, lr}
 801f34a:	b084      	sub	sp, #16
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	60f8      	str	r0, [r7, #12]
 801f350:	60b9      	str	r1, [r7, #8]
 801f352:	4613      	mov	r3, r2
 801f354:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f356:	68fb      	ldr	r3, [r7, #12]
 801f358:	2b00      	cmp	r3, #0
 801f35a:	d105      	bne.n	801f368 <udp_input_local_match+0x20>
 801f35c:	4b27      	ldr	r3, [pc, #156]	; (801f3fc <udp_input_local_match+0xb4>)
 801f35e:	2287      	movs	r2, #135	; 0x87
 801f360:	4927      	ldr	r1, [pc, #156]	; (801f400 <udp_input_local_match+0xb8>)
 801f362:	4828      	ldr	r0, [pc, #160]	; (801f404 <udp_input_local_match+0xbc>)
 801f364:	f003 f8fe 	bl	8022564 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f368:	68bb      	ldr	r3, [r7, #8]
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d105      	bne.n	801f37a <udp_input_local_match+0x32>
 801f36e:	4b23      	ldr	r3, [pc, #140]	; (801f3fc <udp_input_local_match+0xb4>)
 801f370:	2288      	movs	r2, #136	; 0x88
 801f372:	4925      	ldr	r1, [pc, #148]	; (801f408 <udp_input_local_match+0xc0>)
 801f374:	4823      	ldr	r0, [pc, #140]	; (801f404 <udp_input_local_match+0xbc>)
 801f376:	f003 f8f5 	bl	8022564 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	7a1b      	ldrb	r3, [r3, #8]
 801f37e:	2b00      	cmp	r3, #0
 801f380:	d00b      	beq.n	801f39a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f382:	68fb      	ldr	r3, [r7, #12]
 801f384:	7a1a      	ldrb	r2, [r3, #8]
 801f386:	4b21      	ldr	r3, [pc, #132]	; (801f40c <udp_input_local_match+0xc4>)
 801f388:	685b      	ldr	r3, [r3, #4]
 801f38a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f38e:	3301      	adds	r3, #1
 801f390:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f392:	429a      	cmp	r2, r3
 801f394:	d001      	beq.n	801f39a <udp_input_local_match+0x52>
    return 0;
 801f396:	2300      	movs	r3, #0
 801f398:	e02b      	b.n	801f3f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f39a:	79fb      	ldrb	r3, [r7, #7]
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d018      	beq.n	801f3d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f3a0:	68fb      	ldr	r3, [r7, #12]
 801f3a2:	2b00      	cmp	r3, #0
 801f3a4:	d013      	beq.n	801f3ce <udp_input_local_match+0x86>
 801f3a6:	68fb      	ldr	r3, [r7, #12]
 801f3a8:	681b      	ldr	r3, [r3, #0]
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d00f      	beq.n	801f3ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f3ae:	4b17      	ldr	r3, [pc, #92]	; (801f40c <udp_input_local_match+0xc4>)
 801f3b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3b6:	d00a      	beq.n	801f3ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f3b8:	68fb      	ldr	r3, [r7, #12]
 801f3ba:	681a      	ldr	r2, [r3, #0]
 801f3bc:	4b13      	ldr	r3, [pc, #76]	; (801f40c <udp_input_local_match+0xc4>)
 801f3be:	695b      	ldr	r3, [r3, #20]
 801f3c0:	405a      	eors	r2, r3
 801f3c2:	68bb      	ldr	r3, [r7, #8]
 801f3c4:	3308      	adds	r3, #8
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f3ca:	2b00      	cmp	r3, #0
 801f3cc:	d110      	bne.n	801f3f0 <udp_input_local_match+0xa8>
          return 1;
 801f3ce:	2301      	movs	r3, #1
 801f3d0:	e00f      	b.n	801f3f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	d009      	beq.n	801f3ec <udp_input_local_match+0xa4>
 801f3d8:	68fb      	ldr	r3, [r7, #12]
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d005      	beq.n	801f3ec <udp_input_local_match+0xa4>
 801f3e0:	68fb      	ldr	r3, [r7, #12]
 801f3e2:	681a      	ldr	r2, [r3, #0]
 801f3e4:	4b09      	ldr	r3, [pc, #36]	; (801f40c <udp_input_local_match+0xc4>)
 801f3e6:	695b      	ldr	r3, [r3, #20]
 801f3e8:	429a      	cmp	r2, r3
 801f3ea:	d101      	bne.n	801f3f0 <udp_input_local_match+0xa8>
        return 1;
 801f3ec:	2301      	movs	r3, #1
 801f3ee:	e000      	b.n	801f3f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f3f0:	2300      	movs	r3, #0
}
 801f3f2:	4618      	mov	r0, r3
 801f3f4:	3710      	adds	r7, #16
 801f3f6:	46bd      	mov	sp, r7
 801f3f8:	bd80      	pop	{r7, pc}
 801f3fa:	bf00      	nop
 801f3fc:	08027f8c 	.word	0x08027f8c
 801f400:	08028008 	.word	0x08028008
 801f404:	0802802c 	.word	0x0802802c
 801f408:	08028054 	.word	0x08028054
 801f40c:	20010760 	.word	0x20010760

0801f410 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f410:	b590      	push	{r4, r7, lr}
 801f412:	b08d      	sub	sp, #52	; 0x34
 801f414:	af02      	add	r7, sp, #8
 801f416:	6078      	str	r0, [r7, #4]
 801f418:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f41a:	2300      	movs	r3, #0
 801f41c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	2b00      	cmp	r3, #0
 801f422:	d105      	bne.n	801f430 <udp_input+0x20>
 801f424:	4b7c      	ldr	r3, [pc, #496]	; (801f618 <udp_input+0x208>)
 801f426:	22cf      	movs	r2, #207	; 0xcf
 801f428:	497c      	ldr	r1, [pc, #496]	; (801f61c <udp_input+0x20c>)
 801f42a:	487d      	ldr	r0, [pc, #500]	; (801f620 <udp_input+0x210>)
 801f42c:	f003 f89a 	bl	8022564 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f430:	683b      	ldr	r3, [r7, #0]
 801f432:	2b00      	cmp	r3, #0
 801f434:	d105      	bne.n	801f442 <udp_input+0x32>
 801f436:	4b78      	ldr	r3, [pc, #480]	; (801f618 <udp_input+0x208>)
 801f438:	22d0      	movs	r2, #208	; 0xd0
 801f43a:	497a      	ldr	r1, [pc, #488]	; (801f624 <udp_input+0x214>)
 801f43c:	4878      	ldr	r0, [pc, #480]	; (801f620 <udp_input+0x210>)
 801f43e:	f003 f891 	bl	8022564 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	895b      	ldrh	r3, [r3, #10]
 801f446:	2b07      	cmp	r3, #7
 801f448:	d803      	bhi.n	801f452 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f44a:	6878      	ldr	r0, [r7, #4]
 801f44c:	f7ff fb52 	bl	801eaf4 <pbuf_free>
    goto end;
 801f450:	e0de      	b.n	801f610 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f452:	687b      	ldr	r3, [r7, #4]
 801f454:	685b      	ldr	r3, [r3, #4]
 801f456:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f458:	4b73      	ldr	r3, [pc, #460]	; (801f628 <udp_input+0x218>)
 801f45a:	695b      	ldr	r3, [r3, #20]
 801f45c:	4a72      	ldr	r2, [pc, #456]	; (801f628 <udp_input+0x218>)
 801f45e:	6812      	ldr	r2, [r2, #0]
 801f460:	4611      	mov	r1, r2
 801f462:	4618      	mov	r0, r3
 801f464:	f001 ff44 	bl	80212f0 <ip4_addr_isbroadcast_u32>
 801f468:	4603      	mov	r3, r0
 801f46a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f46c:	697b      	ldr	r3, [r7, #20]
 801f46e:	881b      	ldrh	r3, [r3, #0]
 801f470:	b29b      	uxth	r3, r3
 801f472:	4618      	mov	r0, r3
 801f474:	f7fd ff62 	bl	801d33c <lwip_htons>
 801f478:	4603      	mov	r3, r0
 801f47a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f47c:	697b      	ldr	r3, [r7, #20]
 801f47e:	885b      	ldrh	r3, [r3, #2]
 801f480:	b29b      	uxth	r3, r3
 801f482:	4618      	mov	r0, r3
 801f484:	f7fd ff5a 	bl	801d33c <lwip_htons>
 801f488:	4603      	mov	r3, r0
 801f48a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f48c:	2300      	movs	r3, #0
 801f48e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f490:	2300      	movs	r3, #0
 801f492:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f494:	2300      	movs	r3, #0
 801f496:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f498:	4b64      	ldr	r3, [pc, #400]	; (801f62c <udp_input+0x21c>)
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	627b      	str	r3, [r7, #36]	; 0x24
 801f49e:	e054      	b.n	801f54a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4a2:	8a5b      	ldrh	r3, [r3, #18]
 801f4a4:	89fa      	ldrh	r2, [r7, #14]
 801f4a6:	429a      	cmp	r2, r3
 801f4a8:	d14a      	bne.n	801f540 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f4aa:	7cfb      	ldrb	r3, [r7, #19]
 801f4ac:	461a      	mov	r2, r3
 801f4ae:	6839      	ldr	r1, [r7, #0]
 801f4b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f4b2:	f7ff ff49 	bl	801f348 <udp_input_local_match>
 801f4b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d041      	beq.n	801f540 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4be:	7c1b      	ldrb	r3, [r3, #16]
 801f4c0:	f003 0304 	and.w	r3, r3, #4
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d11d      	bne.n	801f504 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f4c8:	69fb      	ldr	r3, [r7, #28]
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	d102      	bne.n	801f4d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4d0:	61fb      	str	r3, [r7, #28]
 801f4d2:	e017      	b.n	801f504 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f4d4:	7cfb      	ldrb	r3, [r7, #19]
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d014      	beq.n	801f504 <udp_input+0xf4>
 801f4da:	4b53      	ldr	r3, [pc, #332]	; (801f628 <udp_input+0x218>)
 801f4dc:	695b      	ldr	r3, [r3, #20]
 801f4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f4e2:	d10f      	bne.n	801f504 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f4e4:	69fb      	ldr	r3, [r7, #28]
 801f4e6:	681a      	ldr	r2, [r3, #0]
 801f4e8:	683b      	ldr	r3, [r7, #0]
 801f4ea:	3304      	adds	r3, #4
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	429a      	cmp	r2, r3
 801f4f0:	d008      	beq.n	801f504 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4f4:	681a      	ldr	r2, [r3, #0]
 801f4f6:	683b      	ldr	r3, [r7, #0]
 801f4f8:	3304      	adds	r3, #4
 801f4fa:	681b      	ldr	r3, [r3, #0]
 801f4fc:	429a      	cmp	r2, r3
 801f4fe:	d101      	bne.n	801f504 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f502:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f506:	8a9b      	ldrh	r3, [r3, #20]
 801f508:	8a3a      	ldrh	r2, [r7, #16]
 801f50a:	429a      	cmp	r2, r3
 801f50c:	d118      	bne.n	801f540 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f510:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f512:	2b00      	cmp	r3, #0
 801f514:	d005      	beq.n	801f522 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f518:	685a      	ldr	r2, [r3, #4]
 801f51a:	4b43      	ldr	r3, [pc, #268]	; (801f628 <udp_input+0x218>)
 801f51c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f51e:	429a      	cmp	r2, r3
 801f520:	d10e      	bne.n	801f540 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f522:	6a3b      	ldr	r3, [r7, #32]
 801f524:	2b00      	cmp	r3, #0
 801f526:	d014      	beq.n	801f552 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f52a:	68da      	ldr	r2, [r3, #12]
 801f52c:	6a3b      	ldr	r3, [r7, #32]
 801f52e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f530:	4b3e      	ldr	r3, [pc, #248]	; (801f62c <udp_input+0x21c>)
 801f532:	681a      	ldr	r2, [r3, #0]
 801f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f536:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f538:	4a3c      	ldr	r2, [pc, #240]	; (801f62c <udp_input+0x21c>)
 801f53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f53c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f53e:	e008      	b.n	801f552 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f542:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f546:	68db      	ldr	r3, [r3, #12]
 801f548:	627b      	str	r3, [r7, #36]	; 0x24
 801f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	d1a7      	bne.n	801f4a0 <udp_input+0x90>
 801f550:	e000      	b.n	801f554 <udp_input+0x144>
        break;
 801f552:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f556:	2b00      	cmp	r3, #0
 801f558:	d101      	bne.n	801f55e <udp_input+0x14e>
    pcb = uncon_pcb;
 801f55a:	69fb      	ldr	r3, [r7, #28]
 801f55c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f560:	2b00      	cmp	r3, #0
 801f562:	d002      	beq.n	801f56a <udp_input+0x15a>
    for_us = 1;
 801f564:	2301      	movs	r3, #1
 801f566:	76fb      	strb	r3, [r7, #27]
 801f568:	e00a      	b.n	801f580 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f56a:	683b      	ldr	r3, [r7, #0]
 801f56c:	3304      	adds	r3, #4
 801f56e:	681a      	ldr	r2, [r3, #0]
 801f570:	4b2d      	ldr	r3, [pc, #180]	; (801f628 <udp_input+0x218>)
 801f572:	695b      	ldr	r3, [r3, #20]
 801f574:	429a      	cmp	r2, r3
 801f576:	bf0c      	ite	eq
 801f578:	2301      	moveq	r3, #1
 801f57a:	2300      	movne	r3, #0
 801f57c:	b2db      	uxtb	r3, r3
 801f57e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f580:	7efb      	ldrb	r3, [r7, #27]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d041      	beq.n	801f60a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f586:	2108      	movs	r1, #8
 801f588:	6878      	ldr	r0, [r7, #4]
 801f58a:	f7ff fa2d 	bl	801e9e8 <pbuf_remove_header>
 801f58e:	4603      	mov	r3, r0
 801f590:	2b00      	cmp	r3, #0
 801f592:	d00a      	beq.n	801f5aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f594:	4b20      	ldr	r3, [pc, #128]	; (801f618 <udp_input+0x208>)
 801f596:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f59a:	4925      	ldr	r1, [pc, #148]	; (801f630 <udp_input+0x220>)
 801f59c:	4820      	ldr	r0, [pc, #128]	; (801f620 <udp_input+0x210>)
 801f59e:	f002 ffe1 	bl	8022564 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f5a2:	6878      	ldr	r0, [r7, #4]
 801f5a4:	f7ff faa6 	bl	801eaf4 <pbuf_free>
      goto end;
 801f5a8:	e032      	b.n	801f610 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d012      	beq.n	801f5d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5b2:	699b      	ldr	r3, [r3, #24]
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	d00a      	beq.n	801f5ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5ba:	699c      	ldr	r4, [r3, #24]
 801f5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5be:	69d8      	ldr	r0, [r3, #28]
 801f5c0:	8a3b      	ldrh	r3, [r7, #16]
 801f5c2:	9300      	str	r3, [sp, #0]
 801f5c4:	4b1b      	ldr	r3, [pc, #108]	; (801f634 <udp_input+0x224>)
 801f5c6:	687a      	ldr	r2, [r7, #4]
 801f5c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f5ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f5cc:	e021      	b.n	801f612 <udp_input+0x202>
        pbuf_free(p);
 801f5ce:	6878      	ldr	r0, [r7, #4]
 801f5d0:	f7ff fa90 	bl	801eaf4 <pbuf_free>
        goto end;
 801f5d4:	e01c      	b.n	801f610 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f5d6:	7cfb      	ldrb	r3, [r7, #19]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d112      	bne.n	801f602 <udp_input+0x1f2>
 801f5dc:	4b12      	ldr	r3, [pc, #72]	; (801f628 <udp_input+0x218>)
 801f5de:	695b      	ldr	r3, [r3, #20]
 801f5e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f5e4:	2be0      	cmp	r3, #224	; 0xe0
 801f5e6:	d00c      	beq.n	801f602 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f5e8:	4b0f      	ldr	r3, [pc, #60]	; (801f628 <udp_input+0x218>)
 801f5ea:	899b      	ldrh	r3, [r3, #12]
 801f5ec:	3308      	adds	r3, #8
 801f5ee:	b29b      	uxth	r3, r3
 801f5f0:	b21b      	sxth	r3, r3
 801f5f2:	4619      	mov	r1, r3
 801f5f4:	6878      	ldr	r0, [r7, #4]
 801f5f6:	f7ff fa6a 	bl	801eace <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f5fa:	2103      	movs	r1, #3
 801f5fc:	6878      	ldr	r0, [r7, #4]
 801f5fe:	f001 fb53 	bl	8020ca8 <icmp_dest_unreach>
      pbuf_free(p);
 801f602:	6878      	ldr	r0, [r7, #4]
 801f604:	f7ff fa76 	bl	801eaf4 <pbuf_free>
  return;
 801f608:	e003      	b.n	801f612 <udp_input+0x202>
    pbuf_free(p);
 801f60a:	6878      	ldr	r0, [r7, #4]
 801f60c:	f7ff fa72 	bl	801eaf4 <pbuf_free>
  return;
 801f610:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f612:	372c      	adds	r7, #44	; 0x2c
 801f614:	46bd      	mov	sp, r7
 801f616:	bd90      	pop	{r4, r7, pc}
 801f618:	08027f8c 	.word	0x08027f8c
 801f61c:	0802807c 	.word	0x0802807c
 801f620:	0802802c 	.word	0x0802802c
 801f624:	08028094 	.word	0x08028094
 801f628:	20010760 	.word	0x20010760
 801f62c:	20013dc4 	.word	0x20013dc4
 801f630:	080280b0 	.word	0x080280b0
 801f634:	20010770 	.word	0x20010770

0801f638 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801f638:	b580      	push	{r7, lr}
 801f63a:	b088      	sub	sp, #32
 801f63c:	af02      	add	r7, sp, #8
 801f63e:	60f8      	str	r0, [r7, #12]
 801f640:	60b9      	str	r1, [r7, #8]
 801f642:	607a      	str	r2, [r7, #4]
 801f644:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f646:	68fb      	ldr	r3, [r7, #12]
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d109      	bne.n	801f660 <udp_sendto+0x28>
 801f64c:	4b23      	ldr	r3, [pc, #140]	; (801f6dc <udp_sendto+0xa4>)
 801f64e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f652:	4923      	ldr	r1, [pc, #140]	; (801f6e0 <udp_sendto+0xa8>)
 801f654:	4823      	ldr	r0, [pc, #140]	; (801f6e4 <udp_sendto+0xac>)
 801f656:	f002 ff85 	bl	8022564 <iprintf>
 801f65a:	f06f 030f 	mvn.w	r3, #15
 801f65e:	e038      	b.n	801f6d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f660:	68bb      	ldr	r3, [r7, #8]
 801f662:	2b00      	cmp	r3, #0
 801f664:	d109      	bne.n	801f67a <udp_sendto+0x42>
 801f666:	4b1d      	ldr	r3, [pc, #116]	; (801f6dc <udp_sendto+0xa4>)
 801f668:	f240 2219 	movw	r2, #537	; 0x219
 801f66c:	491e      	ldr	r1, [pc, #120]	; (801f6e8 <udp_sendto+0xb0>)
 801f66e:	481d      	ldr	r0, [pc, #116]	; (801f6e4 <udp_sendto+0xac>)
 801f670:	f002 ff78 	bl	8022564 <iprintf>
 801f674:	f06f 030f 	mvn.w	r3, #15
 801f678:	e02b      	b.n	801f6d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f67a:	687b      	ldr	r3, [r7, #4]
 801f67c:	2b00      	cmp	r3, #0
 801f67e:	d109      	bne.n	801f694 <udp_sendto+0x5c>
 801f680:	4b16      	ldr	r3, [pc, #88]	; (801f6dc <udp_sendto+0xa4>)
 801f682:	f240 221a 	movw	r2, #538	; 0x21a
 801f686:	4919      	ldr	r1, [pc, #100]	; (801f6ec <udp_sendto+0xb4>)
 801f688:	4816      	ldr	r0, [pc, #88]	; (801f6e4 <udp_sendto+0xac>)
 801f68a:	f002 ff6b 	bl	8022564 <iprintf>
 801f68e:	f06f 030f 	mvn.w	r3, #15
 801f692:	e01e      	b.n	801f6d2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f694:	68fb      	ldr	r3, [r7, #12]
 801f696:	7a1b      	ldrb	r3, [r3, #8]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d006      	beq.n	801f6aa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801f69c:	68fb      	ldr	r3, [r7, #12]
 801f69e:	7a1b      	ldrb	r3, [r3, #8]
 801f6a0:	4618      	mov	r0, r3
 801f6a2:	f7fe fef5 	bl	801e490 <netif_get_by_index>
 801f6a6:	6178      	str	r0, [r7, #20]
 801f6a8:	e003      	b.n	801f6b2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f6aa:	6878      	ldr	r0, [r7, #4]
 801f6ac:	f001 fb86 	bl	8020dbc <ip4_route>
 801f6b0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801f6b2:	697b      	ldr	r3, [r7, #20]
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d102      	bne.n	801f6be <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801f6b8:	f06f 0303 	mvn.w	r3, #3
 801f6bc:	e009      	b.n	801f6d2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f6be:	887a      	ldrh	r2, [r7, #2]
 801f6c0:	697b      	ldr	r3, [r7, #20]
 801f6c2:	9300      	str	r3, [sp, #0]
 801f6c4:	4613      	mov	r3, r2
 801f6c6:	687a      	ldr	r2, [r7, #4]
 801f6c8:	68b9      	ldr	r1, [r7, #8]
 801f6ca:	68f8      	ldr	r0, [r7, #12]
 801f6cc:	f000 f810 	bl	801f6f0 <udp_sendto_if>
 801f6d0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f6d2:	4618      	mov	r0, r3
 801f6d4:	3718      	adds	r7, #24
 801f6d6:	46bd      	mov	sp, r7
 801f6d8:	bd80      	pop	{r7, pc}
 801f6da:	bf00      	nop
 801f6dc:	08027f8c 	.word	0x08027f8c
 801f6e0:	080280fc 	.word	0x080280fc
 801f6e4:	0802802c 	.word	0x0802802c
 801f6e8:	08028114 	.word	0x08028114
 801f6ec:	08028130 	.word	0x08028130

0801f6f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801f6f0:	b580      	push	{r7, lr}
 801f6f2:	b088      	sub	sp, #32
 801f6f4:	af02      	add	r7, sp, #8
 801f6f6:	60f8      	str	r0, [r7, #12]
 801f6f8:	60b9      	str	r1, [r7, #8]
 801f6fa:	607a      	str	r2, [r7, #4]
 801f6fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f6fe:	68fb      	ldr	r3, [r7, #12]
 801f700:	2b00      	cmp	r3, #0
 801f702:	d109      	bne.n	801f718 <udp_sendto_if+0x28>
 801f704:	4b2e      	ldr	r3, [pc, #184]	; (801f7c0 <udp_sendto_if+0xd0>)
 801f706:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f70a:	492e      	ldr	r1, [pc, #184]	; (801f7c4 <udp_sendto_if+0xd4>)
 801f70c:	482e      	ldr	r0, [pc, #184]	; (801f7c8 <udp_sendto_if+0xd8>)
 801f70e:	f002 ff29 	bl	8022564 <iprintf>
 801f712:	f06f 030f 	mvn.w	r3, #15
 801f716:	e04f      	b.n	801f7b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f718:	68bb      	ldr	r3, [r7, #8]
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d109      	bne.n	801f732 <udp_sendto_if+0x42>
 801f71e:	4b28      	ldr	r3, [pc, #160]	; (801f7c0 <udp_sendto_if+0xd0>)
 801f720:	f240 2281 	movw	r2, #641	; 0x281
 801f724:	4929      	ldr	r1, [pc, #164]	; (801f7cc <udp_sendto_if+0xdc>)
 801f726:	4828      	ldr	r0, [pc, #160]	; (801f7c8 <udp_sendto_if+0xd8>)
 801f728:	f002 ff1c 	bl	8022564 <iprintf>
 801f72c:	f06f 030f 	mvn.w	r3, #15
 801f730:	e042      	b.n	801f7b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	2b00      	cmp	r3, #0
 801f736:	d109      	bne.n	801f74c <udp_sendto_if+0x5c>
 801f738:	4b21      	ldr	r3, [pc, #132]	; (801f7c0 <udp_sendto_if+0xd0>)
 801f73a:	f240 2282 	movw	r2, #642	; 0x282
 801f73e:	4924      	ldr	r1, [pc, #144]	; (801f7d0 <udp_sendto_if+0xe0>)
 801f740:	4821      	ldr	r0, [pc, #132]	; (801f7c8 <udp_sendto_if+0xd8>)
 801f742:	f002 ff0f 	bl	8022564 <iprintf>
 801f746:	f06f 030f 	mvn.w	r3, #15
 801f74a:	e035      	b.n	801f7b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f74c:	6a3b      	ldr	r3, [r7, #32]
 801f74e:	2b00      	cmp	r3, #0
 801f750:	d109      	bne.n	801f766 <udp_sendto_if+0x76>
 801f752:	4b1b      	ldr	r3, [pc, #108]	; (801f7c0 <udp_sendto_if+0xd0>)
 801f754:	f240 2283 	movw	r2, #643	; 0x283
 801f758:	491e      	ldr	r1, [pc, #120]	; (801f7d4 <udp_sendto_if+0xe4>)
 801f75a:	481b      	ldr	r0, [pc, #108]	; (801f7c8 <udp_sendto_if+0xd8>)
 801f75c:	f002 ff02 	bl	8022564 <iprintf>
 801f760:	f06f 030f 	mvn.w	r3, #15
 801f764:	e028      	b.n	801f7b8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f766:	68fb      	ldr	r3, [r7, #12]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	d009      	beq.n	801f780 <udp_sendto_if+0x90>
 801f76c:	68fb      	ldr	r3, [r7, #12]
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	2b00      	cmp	r3, #0
 801f772:	d005      	beq.n	801f780 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	681b      	ldr	r3, [r3, #0]
 801f778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f77c:	2be0      	cmp	r3, #224	; 0xe0
 801f77e:	d103      	bne.n	801f788 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801f780:	6a3b      	ldr	r3, [r7, #32]
 801f782:	3304      	adds	r3, #4
 801f784:	617b      	str	r3, [r7, #20]
 801f786:	e00b      	b.n	801f7a0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f788:	68fb      	ldr	r3, [r7, #12]
 801f78a:	681a      	ldr	r2, [r3, #0]
 801f78c:	6a3b      	ldr	r3, [r7, #32]
 801f78e:	3304      	adds	r3, #4
 801f790:	681b      	ldr	r3, [r3, #0]
 801f792:	429a      	cmp	r2, r3
 801f794:	d002      	beq.n	801f79c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801f796:	f06f 0303 	mvn.w	r3, #3
 801f79a:	e00d      	b.n	801f7b8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801f79c:	68fb      	ldr	r3, [r7, #12]
 801f79e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f7a0:	887a      	ldrh	r2, [r7, #2]
 801f7a2:	697b      	ldr	r3, [r7, #20]
 801f7a4:	9301      	str	r3, [sp, #4]
 801f7a6:	6a3b      	ldr	r3, [r7, #32]
 801f7a8:	9300      	str	r3, [sp, #0]
 801f7aa:	4613      	mov	r3, r2
 801f7ac:	687a      	ldr	r2, [r7, #4]
 801f7ae:	68b9      	ldr	r1, [r7, #8]
 801f7b0:	68f8      	ldr	r0, [r7, #12]
 801f7b2:	f000 f811 	bl	801f7d8 <udp_sendto_if_src>
 801f7b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f7b8:	4618      	mov	r0, r3
 801f7ba:	3718      	adds	r7, #24
 801f7bc:	46bd      	mov	sp, r7
 801f7be:	bd80      	pop	{r7, pc}
 801f7c0:	08027f8c 	.word	0x08027f8c
 801f7c4:	0802814c 	.word	0x0802814c
 801f7c8:	0802802c 	.word	0x0802802c
 801f7cc:	08028168 	.word	0x08028168
 801f7d0:	08028184 	.word	0x08028184
 801f7d4:	080281a4 	.word	0x080281a4

0801f7d8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801f7d8:	b580      	push	{r7, lr}
 801f7da:	b08c      	sub	sp, #48	; 0x30
 801f7dc:	af04      	add	r7, sp, #16
 801f7de:	60f8      	str	r0, [r7, #12]
 801f7e0:	60b9      	str	r1, [r7, #8]
 801f7e2:	607a      	str	r2, [r7, #4]
 801f7e4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f7e6:	68fb      	ldr	r3, [r7, #12]
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d109      	bne.n	801f800 <udp_sendto_if_src+0x28>
 801f7ec:	4b65      	ldr	r3, [pc, #404]	; (801f984 <udp_sendto_if_src+0x1ac>)
 801f7ee:	f240 22d1 	movw	r2, #721	; 0x2d1
 801f7f2:	4965      	ldr	r1, [pc, #404]	; (801f988 <udp_sendto_if_src+0x1b0>)
 801f7f4:	4865      	ldr	r0, [pc, #404]	; (801f98c <udp_sendto_if_src+0x1b4>)
 801f7f6:	f002 feb5 	bl	8022564 <iprintf>
 801f7fa:	f06f 030f 	mvn.w	r3, #15
 801f7fe:	e0bc      	b.n	801f97a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f800:	68bb      	ldr	r3, [r7, #8]
 801f802:	2b00      	cmp	r3, #0
 801f804:	d109      	bne.n	801f81a <udp_sendto_if_src+0x42>
 801f806:	4b5f      	ldr	r3, [pc, #380]	; (801f984 <udp_sendto_if_src+0x1ac>)
 801f808:	f240 22d2 	movw	r2, #722	; 0x2d2
 801f80c:	4960      	ldr	r1, [pc, #384]	; (801f990 <udp_sendto_if_src+0x1b8>)
 801f80e:	485f      	ldr	r0, [pc, #380]	; (801f98c <udp_sendto_if_src+0x1b4>)
 801f810:	f002 fea8 	bl	8022564 <iprintf>
 801f814:	f06f 030f 	mvn.w	r3, #15
 801f818:	e0af      	b.n	801f97a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	d109      	bne.n	801f834 <udp_sendto_if_src+0x5c>
 801f820:	4b58      	ldr	r3, [pc, #352]	; (801f984 <udp_sendto_if_src+0x1ac>)
 801f822:	f240 22d3 	movw	r2, #723	; 0x2d3
 801f826:	495b      	ldr	r1, [pc, #364]	; (801f994 <udp_sendto_if_src+0x1bc>)
 801f828:	4858      	ldr	r0, [pc, #352]	; (801f98c <udp_sendto_if_src+0x1b4>)
 801f82a:	f002 fe9b 	bl	8022564 <iprintf>
 801f82e:	f06f 030f 	mvn.w	r3, #15
 801f832:	e0a2      	b.n	801f97a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f836:	2b00      	cmp	r3, #0
 801f838:	d109      	bne.n	801f84e <udp_sendto_if_src+0x76>
 801f83a:	4b52      	ldr	r3, [pc, #328]	; (801f984 <udp_sendto_if_src+0x1ac>)
 801f83c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801f840:	4955      	ldr	r1, [pc, #340]	; (801f998 <udp_sendto_if_src+0x1c0>)
 801f842:	4852      	ldr	r0, [pc, #328]	; (801f98c <udp_sendto_if_src+0x1b4>)
 801f844:	f002 fe8e 	bl	8022564 <iprintf>
 801f848:	f06f 030f 	mvn.w	r3, #15
 801f84c:	e095      	b.n	801f97a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f850:	2b00      	cmp	r3, #0
 801f852:	d109      	bne.n	801f868 <udp_sendto_if_src+0x90>
 801f854:	4b4b      	ldr	r3, [pc, #300]	; (801f984 <udp_sendto_if_src+0x1ac>)
 801f856:	f240 22d5 	movw	r2, #725	; 0x2d5
 801f85a:	4950      	ldr	r1, [pc, #320]	; (801f99c <udp_sendto_if_src+0x1c4>)
 801f85c:	484b      	ldr	r0, [pc, #300]	; (801f98c <udp_sendto_if_src+0x1b4>)
 801f85e:	f002 fe81 	bl	8022564 <iprintf>
 801f862:	f06f 030f 	mvn.w	r3, #15
 801f866:	e088      	b.n	801f97a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801f868:	68fb      	ldr	r3, [r7, #12]
 801f86a:	8a5b      	ldrh	r3, [r3, #18]
 801f86c:	2b00      	cmp	r3, #0
 801f86e:	d10f      	bne.n	801f890 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f870:	68f9      	ldr	r1, [r7, #12]
 801f872:	68fb      	ldr	r3, [r7, #12]
 801f874:	8a5b      	ldrh	r3, [r3, #18]
 801f876:	461a      	mov	r2, r3
 801f878:	68f8      	ldr	r0, [r7, #12]
 801f87a:	f000 f893 	bl	801f9a4 <udp_bind>
 801f87e:	4603      	mov	r3, r0
 801f880:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801f882:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f886:	2b00      	cmp	r3, #0
 801f888:	d002      	beq.n	801f890 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801f88a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f88e:	e074      	b.n	801f97a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801f890:	68bb      	ldr	r3, [r7, #8]
 801f892:	891b      	ldrh	r3, [r3, #8]
 801f894:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801f898:	4293      	cmp	r3, r2
 801f89a:	d902      	bls.n	801f8a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801f89c:	f04f 33ff 	mov.w	r3, #4294967295
 801f8a0:	e06b      	b.n	801f97a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801f8a2:	2108      	movs	r1, #8
 801f8a4:	68b8      	ldr	r0, [r7, #8]
 801f8a6:	f7ff f88f 	bl	801e9c8 <pbuf_add_header>
 801f8aa:	4603      	mov	r3, r0
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d015      	beq.n	801f8dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801f8b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f8b4:	2108      	movs	r1, #8
 801f8b6:	2022      	movs	r0, #34	; 0x22
 801f8b8:	f7fe fe3a 	bl	801e530 <pbuf_alloc>
 801f8bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801f8be:	69fb      	ldr	r3, [r7, #28]
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d102      	bne.n	801f8ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801f8c4:	f04f 33ff 	mov.w	r3, #4294967295
 801f8c8:	e057      	b.n	801f97a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801f8ca:	68bb      	ldr	r3, [r7, #8]
 801f8cc:	891b      	ldrh	r3, [r3, #8]
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	d006      	beq.n	801f8e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801f8d2:	68b9      	ldr	r1, [r7, #8]
 801f8d4:	69f8      	ldr	r0, [r7, #28]
 801f8d6:	f7ff fa25 	bl	801ed24 <pbuf_chain>
 801f8da:	e001      	b.n	801f8e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801f8dc:	68bb      	ldr	r3, [r7, #8]
 801f8de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f8e0:	69fb      	ldr	r3, [r7, #28]
 801f8e2:	895b      	ldrh	r3, [r3, #10]
 801f8e4:	2b07      	cmp	r3, #7
 801f8e6:	d806      	bhi.n	801f8f6 <udp_sendto_if_src+0x11e>
 801f8e8:	4b26      	ldr	r3, [pc, #152]	; (801f984 <udp_sendto_if_src+0x1ac>)
 801f8ea:	f240 320d 	movw	r2, #781	; 0x30d
 801f8ee:	492c      	ldr	r1, [pc, #176]	; (801f9a0 <udp_sendto_if_src+0x1c8>)
 801f8f0:	4826      	ldr	r0, [pc, #152]	; (801f98c <udp_sendto_if_src+0x1b4>)
 801f8f2:	f002 fe37 	bl	8022564 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801f8f6:	69fb      	ldr	r3, [r7, #28]
 801f8f8:	685b      	ldr	r3, [r3, #4]
 801f8fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801f8fc:	68fb      	ldr	r3, [r7, #12]
 801f8fe:	8a5b      	ldrh	r3, [r3, #18]
 801f900:	4618      	mov	r0, r3
 801f902:	f7fd fd1b 	bl	801d33c <lwip_htons>
 801f906:	4603      	mov	r3, r0
 801f908:	461a      	mov	r2, r3
 801f90a:	697b      	ldr	r3, [r7, #20]
 801f90c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801f90e:	887b      	ldrh	r3, [r7, #2]
 801f910:	4618      	mov	r0, r3
 801f912:	f7fd fd13 	bl	801d33c <lwip_htons>
 801f916:	4603      	mov	r3, r0
 801f918:	461a      	mov	r2, r3
 801f91a:	697b      	ldr	r3, [r7, #20]
 801f91c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801f91e:	697b      	ldr	r3, [r7, #20]
 801f920:	2200      	movs	r2, #0
 801f922:	719a      	strb	r2, [r3, #6]
 801f924:	2200      	movs	r2, #0
 801f926:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801f928:	69fb      	ldr	r3, [r7, #28]
 801f92a:	891b      	ldrh	r3, [r3, #8]
 801f92c:	4618      	mov	r0, r3
 801f92e:	f7fd fd05 	bl	801d33c <lwip_htons>
 801f932:	4603      	mov	r3, r0
 801f934:	461a      	mov	r2, r3
 801f936:	697b      	ldr	r3, [r7, #20]
 801f938:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801f93a:	2311      	movs	r3, #17
 801f93c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801f93e:	68fb      	ldr	r3, [r7, #12]
 801f940:	7adb      	ldrb	r3, [r3, #11]
 801f942:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f944:	68fb      	ldr	r3, [r7, #12]
 801f946:	7a9b      	ldrb	r3, [r3, #10]
 801f948:	7cb9      	ldrb	r1, [r7, #18]
 801f94a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f94c:	9202      	str	r2, [sp, #8]
 801f94e:	7cfa      	ldrb	r2, [r7, #19]
 801f950:	9201      	str	r2, [sp, #4]
 801f952:	9300      	str	r3, [sp, #0]
 801f954:	460b      	mov	r3, r1
 801f956:	687a      	ldr	r2, [r7, #4]
 801f958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f95a:	69f8      	ldr	r0, [r7, #28]
 801f95c:	f001 fc0c 	bl	8021178 <ip4_output_if_src>
 801f960:	4603      	mov	r3, r0
 801f962:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801f964:	69fa      	ldr	r2, [r7, #28]
 801f966:	68bb      	ldr	r3, [r7, #8]
 801f968:	429a      	cmp	r2, r3
 801f96a:	d004      	beq.n	801f976 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801f96c:	69f8      	ldr	r0, [r7, #28]
 801f96e:	f7ff f8c1 	bl	801eaf4 <pbuf_free>
    q = NULL;
 801f972:	2300      	movs	r3, #0
 801f974:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801f976:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801f97a:	4618      	mov	r0, r3
 801f97c:	3720      	adds	r7, #32
 801f97e:	46bd      	mov	sp, r7
 801f980:	bd80      	pop	{r7, pc}
 801f982:	bf00      	nop
 801f984:	08027f8c 	.word	0x08027f8c
 801f988:	080281c4 	.word	0x080281c4
 801f98c:	0802802c 	.word	0x0802802c
 801f990:	080281e4 	.word	0x080281e4
 801f994:	08028204 	.word	0x08028204
 801f998:	08028228 	.word	0x08028228
 801f99c:	0802824c 	.word	0x0802824c
 801f9a0:	08028270 	.word	0x08028270

0801f9a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f9a4:	b580      	push	{r7, lr}
 801f9a6:	b086      	sub	sp, #24
 801f9a8:	af00      	add	r7, sp, #0
 801f9aa:	60f8      	str	r0, [r7, #12]
 801f9ac:	60b9      	str	r1, [r7, #8]
 801f9ae:	4613      	mov	r3, r2
 801f9b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801f9b2:	68bb      	ldr	r3, [r7, #8]
 801f9b4:	2b00      	cmp	r3, #0
 801f9b6:	d101      	bne.n	801f9bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801f9b8:	4b39      	ldr	r3, [pc, #228]	; (801faa0 <udp_bind+0xfc>)
 801f9ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	2b00      	cmp	r3, #0
 801f9c0:	d109      	bne.n	801f9d6 <udp_bind+0x32>
 801f9c2:	4b38      	ldr	r3, [pc, #224]	; (801faa4 <udp_bind+0x100>)
 801f9c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 801f9c8:	4937      	ldr	r1, [pc, #220]	; (801faa8 <udp_bind+0x104>)
 801f9ca:	4838      	ldr	r0, [pc, #224]	; (801faac <udp_bind+0x108>)
 801f9cc:	f002 fdca 	bl	8022564 <iprintf>
 801f9d0:	f06f 030f 	mvn.w	r3, #15
 801f9d4:	e060      	b.n	801fa98 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801f9d6:	2300      	movs	r3, #0
 801f9d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f9da:	4b35      	ldr	r3, [pc, #212]	; (801fab0 <udp_bind+0x10c>)
 801f9dc:	681b      	ldr	r3, [r3, #0]
 801f9de:	617b      	str	r3, [r7, #20]
 801f9e0:	e009      	b.n	801f9f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801f9e2:	68fa      	ldr	r2, [r7, #12]
 801f9e4:	697b      	ldr	r3, [r7, #20]
 801f9e6:	429a      	cmp	r2, r3
 801f9e8:	d102      	bne.n	801f9f0 <udp_bind+0x4c>
      rebind = 1;
 801f9ea:	2301      	movs	r3, #1
 801f9ec:	74fb      	strb	r3, [r7, #19]
      break;
 801f9ee:	e005      	b.n	801f9fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f9f0:	697b      	ldr	r3, [r7, #20]
 801f9f2:	68db      	ldr	r3, [r3, #12]
 801f9f4:	617b      	str	r3, [r7, #20]
 801f9f6:	697b      	ldr	r3, [r7, #20]
 801f9f8:	2b00      	cmp	r3, #0
 801f9fa:	d1f2      	bne.n	801f9e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801f9fc:	88fb      	ldrh	r3, [r7, #6]
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d109      	bne.n	801fa16 <udp_bind+0x72>
    port = udp_new_port();
 801fa02:	f7ff fc69 	bl	801f2d8 <udp_new_port>
 801fa06:	4603      	mov	r3, r0
 801fa08:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fa0a:	88fb      	ldrh	r3, [r7, #6]
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	d12c      	bne.n	801fa6a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fa10:	f06f 0307 	mvn.w	r3, #7
 801fa14:	e040      	b.n	801fa98 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa16:	4b26      	ldr	r3, [pc, #152]	; (801fab0 <udp_bind+0x10c>)
 801fa18:	681b      	ldr	r3, [r3, #0]
 801fa1a:	617b      	str	r3, [r7, #20]
 801fa1c:	e022      	b.n	801fa64 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801fa1e:	68fa      	ldr	r2, [r7, #12]
 801fa20:	697b      	ldr	r3, [r7, #20]
 801fa22:	429a      	cmp	r2, r3
 801fa24:	d01b      	beq.n	801fa5e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fa26:	697b      	ldr	r3, [r7, #20]
 801fa28:	8a5b      	ldrh	r3, [r3, #18]
 801fa2a:	88fa      	ldrh	r2, [r7, #6]
 801fa2c:	429a      	cmp	r2, r3
 801fa2e:	d116      	bne.n	801fa5e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa30:	697b      	ldr	r3, [r7, #20]
 801fa32:	681a      	ldr	r2, [r3, #0]
 801fa34:	68bb      	ldr	r3, [r7, #8]
 801fa36:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fa38:	429a      	cmp	r2, r3
 801fa3a:	d00d      	beq.n	801fa58 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa3c:	68bb      	ldr	r3, [r7, #8]
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	d00a      	beq.n	801fa58 <udp_bind+0xb4>
 801fa42:	68bb      	ldr	r3, [r7, #8]
 801fa44:	681b      	ldr	r3, [r3, #0]
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d006      	beq.n	801fa58 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fa4a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa4c:	2b00      	cmp	r3, #0
 801fa4e:	d003      	beq.n	801fa58 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fa50:	697b      	ldr	r3, [r7, #20]
 801fa52:	681b      	ldr	r3, [r3, #0]
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d102      	bne.n	801fa5e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fa58:	f06f 0307 	mvn.w	r3, #7
 801fa5c:	e01c      	b.n	801fa98 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa5e:	697b      	ldr	r3, [r7, #20]
 801fa60:	68db      	ldr	r3, [r3, #12]
 801fa62:	617b      	str	r3, [r7, #20]
 801fa64:	697b      	ldr	r3, [r7, #20]
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d1d9      	bne.n	801fa1e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fa6a:	68bb      	ldr	r3, [r7, #8]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d002      	beq.n	801fa76 <udp_bind+0xd2>
 801fa70:	68bb      	ldr	r3, [r7, #8]
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	e000      	b.n	801fa78 <udp_bind+0xd4>
 801fa76:	2300      	movs	r3, #0
 801fa78:	68fa      	ldr	r2, [r7, #12]
 801fa7a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fa7c:	68fb      	ldr	r3, [r7, #12]
 801fa7e:	88fa      	ldrh	r2, [r7, #6]
 801fa80:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fa82:	7cfb      	ldrb	r3, [r7, #19]
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d106      	bne.n	801fa96 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fa88:	4b09      	ldr	r3, [pc, #36]	; (801fab0 <udp_bind+0x10c>)
 801fa8a:	681a      	ldr	r2, [r3, #0]
 801fa8c:	68fb      	ldr	r3, [r7, #12]
 801fa8e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fa90:	4a07      	ldr	r2, [pc, #28]	; (801fab0 <udp_bind+0x10c>)
 801fa92:	68fb      	ldr	r3, [r7, #12]
 801fa94:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fa96:	2300      	movs	r3, #0
}
 801fa98:	4618      	mov	r0, r3
 801fa9a:	3718      	adds	r7, #24
 801fa9c:	46bd      	mov	sp, r7
 801fa9e:	bd80      	pop	{r7, pc}
 801faa0:	08029038 	.word	0x08029038
 801faa4:	08027f8c 	.word	0x08027f8c
 801faa8:	080282a0 	.word	0x080282a0
 801faac:	0802802c 	.word	0x0802802c
 801fab0:	20013dc4 	.word	0x20013dc4

0801fab4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801fab4:	b580      	push	{r7, lr}
 801fab6:	b084      	sub	sp, #16
 801fab8:	af00      	add	r7, sp, #0
 801faba:	60f8      	str	r0, [r7, #12]
 801fabc:	60b9      	str	r1, [r7, #8]
 801fabe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	2b00      	cmp	r3, #0
 801fac4:	d107      	bne.n	801fad6 <udp_recv+0x22>
 801fac6:	4b08      	ldr	r3, [pc, #32]	; (801fae8 <udp_recv+0x34>)
 801fac8:	f240 428a 	movw	r2, #1162	; 0x48a
 801facc:	4907      	ldr	r1, [pc, #28]	; (801faec <udp_recv+0x38>)
 801face:	4808      	ldr	r0, [pc, #32]	; (801faf0 <udp_recv+0x3c>)
 801fad0:	f002 fd48 	bl	8022564 <iprintf>
 801fad4:	e005      	b.n	801fae2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fad6:	68fb      	ldr	r3, [r7, #12]
 801fad8:	68ba      	ldr	r2, [r7, #8]
 801fada:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801fadc:	68fb      	ldr	r3, [r7, #12]
 801fade:	687a      	ldr	r2, [r7, #4]
 801fae0:	61da      	str	r2, [r3, #28]
}
 801fae2:	3710      	adds	r7, #16
 801fae4:	46bd      	mov	sp, r7
 801fae6:	bd80      	pop	{r7, pc}
 801fae8:	08027f8c 	.word	0x08027f8c
 801faec:	0802830c 	.word	0x0802830c
 801faf0:	0802802c 	.word	0x0802802c

0801faf4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801faf4:	b580      	push	{r7, lr}
 801faf6:	b084      	sub	sp, #16
 801faf8:	af00      	add	r7, sp, #0
 801fafa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	d107      	bne.n	801fb12 <udp_remove+0x1e>
 801fb02:	4b19      	ldr	r3, [pc, #100]	; (801fb68 <udp_remove+0x74>)
 801fb04:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801fb08:	4918      	ldr	r1, [pc, #96]	; (801fb6c <udp_remove+0x78>)
 801fb0a:	4819      	ldr	r0, [pc, #100]	; (801fb70 <udp_remove+0x7c>)
 801fb0c:	f002 fd2a 	bl	8022564 <iprintf>
 801fb10:	e026      	b.n	801fb60 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fb12:	4b18      	ldr	r3, [pc, #96]	; (801fb74 <udp_remove+0x80>)
 801fb14:	681b      	ldr	r3, [r3, #0]
 801fb16:	687a      	ldr	r2, [r7, #4]
 801fb18:	429a      	cmp	r2, r3
 801fb1a:	d105      	bne.n	801fb28 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801fb1c:	4b15      	ldr	r3, [pc, #84]	; (801fb74 <udp_remove+0x80>)
 801fb1e:	681b      	ldr	r3, [r3, #0]
 801fb20:	68db      	ldr	r3, [r3, #12]
 801fb22:	4a14      	ldr	r2, [pc, #80]	; (801fb74 <udp_remove+0x80>)
 801fb24:	6013      	str	r3, [r2, #0]
 801fb26:	e017      	b.n	801fb58 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fb28:	4b12      	ldr	r3, [pc, #72]	; (801fb74 <udp_remove+0x80>)
 801fb2a:	681b      	ldr	r3, [r3, #0]
 801fb2c:	60fb      	str	r3, [r7, #12]
 801fb2e:	e010      	b.n	801fb52 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fb30:	68fb      	ldr	r3, [r7, #12]
 801fb32:	68db      	ldr	r3, [r3, #12]
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	d009      	beq.n	801fb4c <udp_remove+0x58>
 801fb38:	68fb      	ldr	r3, [r7, #12]
 801fb3a:	68db      	ldr	r3, [r3, #12]
 801fb3c:	687a      	ldr	r2, [r7, #4]
 801fb3e:	429a      	cmp	r2, r3
 801fb40:	d104      	bne.n	801fb4c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	68da      	ldr	r2, [r3, #12]
 801fb46:	68fb      	ldr	r3, [r7, #12]
 801fb48:	60da      	str	r2, [r3, #12]
        break;
 801fb4a:	e005      	b.n	801fb58 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fb4c:	68fb      	ldr	r3, [r7, #12]
 801fb4e:	68db      	ldr	r3, [r3, #12]
 801fb50:	60fb      	str	r3, [r7, #12]
 801fb52:	68fb      	ldr	r3, [r7, #12]
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	d1eb      	bne.n	801fb30 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fb58:	6879      	ldr	r1, [r7, #4]
 801fb5a:	2000      	movs	r0, #0
 801fb5c:	f7fe f8ba 	bl	801dcd4 <memp_free>
}
 801fb60:	3710      	adds	r7, #16
 801fb62:	46bd      	mov	sp, r7
 801fb64:	bd80      	pop	{r7, pc}
 801fb66:	bf00      	nop
 801fb68:	08027f8c 	.word	0x08027f8c
 801fb6c:	08028324 	.word	0x08028324
 801fb70:	0802802c 	.word	0x0802802c
 801fb74:	20013dc4 	.word	0x20013dc4

0801fb78 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fb78:	b580      	push	{r7, lr}
 801fb7a:	b082      	sub	sp, #8
 801fb7c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fb7e:	2000      	movs	r0, #0
 801fb80:	f7fe f838 	bl	801dbf4 <memp_malloc>
 801fb84:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	d007      	beq.n	801fb9c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fb8c:	2220      	movs	r2, #32
 801fb8e:	2100      	movs	r1, #0
 801fb90:	6878      	ldr	r0, [r7, #4]
 801fb92:	f002 fbff 	bl	8022394 <memset>
    pcb->ttl = UDP_TTL;
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	22ff      	movs	r2, #255	; 0xff
 801fb9a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801fb9c:	687b      	ldr	r3, [r7, #4]
}
 801fb9e:	4618      	mov	r0, r3
 801fba0:	3708      	adds	r7, #8
 801fba2:	46bd      	mov	sp, r7
 801fba4:	bd80      	pop	{r7, pc}
	...

0801fba8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801fba8:	b480      	push	{r7}
 801fbaa:	b085      	sub	sp, #20
 801fbac:	af00      	add	r7, sp, #0
 801fbae:	6078      	str	r0, [r7, #4]
 801fbb0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	2b00      	cmp	r3, #0
 801fbb6:	d01e      	beq.n	801fbf6 <udp_netif_ip_addr_changed+0x4e>
 801fbb8:	687b      	ldr	r3, [r7, #4]
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	2b00      	cmp	r3, #0
 801fbbe:	d01a      	beq.n	801fbf6 <udp_netif_ip_addr_changed+0x4e>
 801fbc0:	683b      	ldr	r3, [r7, #0]
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	d017      	beq.n	801fbf6 <udp_netif_ip_addr_changed+0x4e>
 801fbc6:	683b      	ldr	r3, [r7, #0]
 801fbc8:	681b      	ldr	r3, [r3, #0]
 801fbca:	2b00      	cmp	r3, #0
 801fbcc:	d013      	beq.n	801fbf6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fbce:	4b0d      	ldr	r3, [pc, #52]	; (801fc04 <udp_netif_ip_addr_changed+0x5c>)
 801fbd0:	681b      	ldr	r3, [r3, #0]
 801fbd2:	60fb      	str	r3, [r7, #12]
 801fbd4:	e00c      	b.n	801fbf0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801fbd6:	68fb      	ldr	r3, [r7, #12]
 801fbd8:	681a      	ldr	r2, [r3, #0]
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	429a      	cmp	r2, r3
 801fbe0:	d103      	bne.n	801fbea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801fbe2:	683b      	ldr	r3, [r7, #0]
 801fbe4:	681a      	ldr	r2, [r3, #0]
 801fbe6:	68fb      	ldr	r3, [r7, #12]
 801fbe8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fbea:	68fb      	ldr	r3, [r7, #12]
 801fbec:	68db      	ldr	r3, [r3, #12]
 801fbee:	60fb      	str	r3, [r7, #12]
 801fbf0:	68fb      	ldr	r3, [r7, #12]
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d1ef      	bne.n	801fbd6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801fbf6:	bf00      	nop
 801fbf8:	3714      	adds	r7, #20
 801fbfa:	46bd      	mov	sp, r7
 801fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc00:	4770      	bx	lr
 801fc02:	bf00      	nop
 801fc04:	20013dc4 	.word	0x20013dc4

0801fc08 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801fc08:	b580      	push	{r7, lr}
 801fc0a:	b082      	sub	sp, #8
 801fc0c:	af00      	add	r7, sp, #0
 801fc0e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801fc10:	4915      	ldr	r1, [pc, #84]	; (801fc68 <etharp_free_entry+0x60>)
 801fc12:	687a      	ldr	r2, [r7, #4]
 801fc14:	4613      	mov	r3, r2
 801fc16:	005b      	lsls	r3, r3, #1
 801fc18:	4413      	add	r3, r2
 801fc1a:	00db      	lsls	r3, r3, #3
 801fc1c:	440b      	add	r3, r1
 801fc1e:	681b      	ldr	r3, [r3, #0]
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	d013      	beq.n	801fc4c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801fc24:	4910      	ldr	r1, [pc, #64]	; (801fc68 <etharp_free_entry+0x60>)
 801fc26:	687a      	ldr	r2, [r7, #4]
 801fc28:	4613      	mov	r3, r2
 801fc2a:	005b      	lsls	r3, r3, #1
 801fc2c:	4413      	add	r3, r2
 801fc2e:	00db      	lsls	r3, r3, #3
 801fc30:	440b      	add	r3, r1
 801fc32:	681b      	ldr	r3, [r3, #0]
 801fc34:	4618      	mov	r0, r3
 801fc36:	f7fe ff5d 	bl	801eaf4 <pbuf_free>
    arp_table[i].q = NULL;
 801fc3a:	490b      	ldr	r1, [pc, #44]	; (801fc68 <etharp_free_entry+0x60>)
 801fc3c:	687a      	ldr	r2, [r7, #4]
 801fc3e:	4613      	mov	r3, r2
 801fc40:	005b      	lsls	r3, r3, #1
 801fc42:	4413      	add	r3, r2
 801fc44:	00db      	lsls	r3, r3, #3
 801fc46:	440b      	add	r3, r1
 801fc48:	2200      	movs	r2, #0
 801fc4a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801fc4c:	4906      	ldr	r1, [pc, #24]	; (801fc68 <etharp_free_entry+0x60>)
 801fc4e:	687a      	ldr	r2, [r7, #4]
 801fc50:	4613      	mov	r3, r2
 801fc52:	005b      	lsls	r3, r3, #1
 801fc54:	4413      	add	r3, r2
 801fc56:	00db      	lsls	r3, r3, #3
 801fc58:	440b      	add	r3, r1
 801fc5a:	3314      	adds	r3, #20
 801fc5c:	2200      	movs	r2, #0
 801fc5e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801fc60:	bf00      	nop
 801fc62:	3708      	adds	r7, #8
 801fc64:	46bd      	mov	sp, r7
 801fc66:	bd80      	pop	{r7, pc}
 801fc68:	20013dc8 	.word	0x20013dc8

0801fc6c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801fc6c:	b580      	push	{r7, lr}
 801fc6e:	b082      	sub	sp, #8
 801fc70:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fc72:	2300      	movs	r3, #0
 801fc74:	607b      	str	r3, [r7, #4]
 801fc76:	e096      	b.n	801fda6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801fc78:	494f      	ldr	r1, [pc, #316]	; (801fdb8 <etharp_tmr+0x14c>)
 801fc7a:	687a      	ldr	r2, [r7, #4]
 801fc7c:	4613      	mov	r3, r2
 801fc7e:	005b      	lsls	r3, r3, #1
 801fc80:	4413      	add	r3, r2
 801fc82:	00db      	lsls	r3, r3, #3
 801fc84:	440b      	add	r3, r1
 801fc86:	3314      	adds	r3, #20
 801fc88:	781b      	ldrb	r3, [r3, #0]
 801fc8a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801fc8c:	78fb      	ldrb	r3, [r7, #3]
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	f000 8086 	beq.w	801fda0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801fc94:	4948      	ldr	r1, [pc, #288]	; (801fdb8 <etharp_tmr+0x14c>)
 801fc96:	687a      	ldr	r2, [r7, #4]
 801fc98:	4613      	mov	r3, r2
 801fc9a:	005b      	lsls	r3, r3, #1
 801fc9c:	4413      	add	r3, r2
 801fc9e:	00db      	lsls	r3, r3, #3
 801fca0:	440b      	add	r3, r1
 801fca2:	3312      	adds	r3, #18
 801fca4:	881b      	ldrh	r3, [r3, #0]
 801fca6:	3301      	adds	r3, #1
 801fca8:	b298      	uxth	r0, r3
 801fcaa:	4943      	ldr	r1, [pc, #268]	; (801fdb8 <etharp_tmr+0x14c>)
 801fcac:	687a      	ldr	r2, [r7, #4]
 801fcae:	4613      	mov	r3, r2
 801fcb0:	005b      	lsls	r3, r3, #1
 801fcb2:	4413      	add	r3, r2
 801fcb4:	00db      	lsls	r3, r3, #3
 801fcb6:	440b      	add	r3, r1
 801fcb8:	3312      	adds	r3, #18
 801fcba:	4602      	mov	r2, r0
 801fcbc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801fcbe:	493e      	ldr	r1, [pc, #248]	; (801fdb8 <etharp_tmr+0x14c>)
 801fcc0:	687a      	ldr	r2, [r7, #4]
 801fcc2:	4613      	mov	r3, r2
 801fcc4:	005b      	lsls	r3, r3, #1
 801fcc6:	4413      	add	r3, r2
 801fcc8:	00db      	lsls	r3, r3, #3
 801fcca:	440b      	add	r3, r1
 801fccc:	3312      	adds	r3, #18
 801fcce:	881b      	ldrh	r3, [r3, #0]
 801fcd0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801fcd4:	d215      	bcs.n	801fd02 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801fcd6:	4938      	ldr	r1, [pc, #224]	; (801fdb8 <etharp_tmr+0x14c>)
 801fcd8:	687a      	ldr	r2, [r7, #4]
 801fcda:	4613      	mov	r3, r2
 801fcdc:	005b      	lsls	r3, r3, #1
 801fcde:	4413      	add	r3, r2
 801fce0:	00db      	lsls	r3, r3, #3
 801fce2:	440b      	add	r3, r1
 801fce4:	3314      	adds	r3, #20
 801fce6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801fce8:	2b01      	cmp	r3, #1
 801fcea:	d10e      	bne.n	801fd0a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801fcec:	4932      	ldr	r1, [pc, #200]	; (801fdb8 <etharp_tmr+0x14c>)
 801fcee:	687a      	ldr	r2, [r7, #4]
 801fcf0:	4613      	mov	r3, r2
 801fcf2:	005b      	lsls	r3, r3, #1
 801fcf4:	4413      	add	r3, r2
 801fcf6:	00db      	lsls	r3, r3, #3
 801fcf8:	440b      	add	r3, r1
 801fcfa:	3312      	adds	r3, #18
 801fcfc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801fcfe:	2b04      	cmp	r3, #4
 801fd00:	d903      	bls.n	801fd0a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801fd02:	6878      	ldr	r0, [r7, #4]
 801fd04:	f7ff ff80 	bl	801fc08 <etharp_free_entry>
 801fd08:	e04a      	b.n	801fda0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801fd0a:	492b      	ldr	r1, [pc, #172]	; (801fdb8 <etharp_tmr+0x14c>)
 801fd0c:	687a      	ldr	r2, [r7, #4]
 801fd0e:	4613      	mov	r3, r2
 801fd10:	005b      	lsls	r3, r3, #1
 801fd12:	4413      	add	r3, r2
 801fd14:	00db      	lsls	r3, r3, #3
 801fd16:	440b      	add	r3, r1
 801fd18:	3314      	adds	r3, #20
 801fd1a:	781b      	ldrb	r3, [r3, #0]
 801fd1c:	2b03      	cmp	r3, #3
 801fd1e:	d10a      	bne.n	801fd36 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801fd20:	4925      	ldr	r1, [pc, #148]	; (801fdb8 <etharp_tmr+0x14c>)
 801fd22:	687a      	ldr	r2, [r7, #4]
 801fd24:	4613      	mov	r3, r2
 801fd26:	005b      	lsls	r3, r3, #1
 801fd28:	4413      	add	r3, r2
 801fd2a:	00db      	lsls	r3, r3, #3
 801fd2c:	440b      	add	r3, r1
 801fd2e:	3314      	adds	r3, #20
 801fd30:	2204      	movs	r2, #4
 801fd32:	701a      	strb	r2, [r3, #0]
 801fd34:	e034      	b.n	801fda0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801fd36:	4920      	ldr	r1, [pc, #128]	; (801fdb8 <etharp_tmr+0x14c>)
 801fd38:	687a      	ldr	r2, [r7, #4]
 801fd3a:	4613      	mov	r3, r2
 801fd3c:	005b      	lsls	r3, r3, #1
 801fd3e:	4413      	add	r3, r2
 801fd40:	00db      	lsls	r3, r3, #3
 801fd42:	440b      	add	r3, r1
 801fd44:	3314      	adds	r3, #20
 801fd46:	781b      	ldrb	r3, [r3, #0]
 801fd48:	2b04      	cmp	r3, #4
 801fd4a:	d10a      	bne.n	801fd62 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801fd4c:	491a      	ldr	r1, [pc, #104]	; (801fdb8 <etharp_tmr+0x14c>)
 801fd4e:	687a      	ldr	r2, [r7, #4]
 801fd50:	4613      	mov	r3, r2
 801fd52:	005b      	lsls	r3, r3, #1
 801fd54:	4413      	add	r3, r2
 801fd56:	00db      	lsls	r3, r3, #3
 801fd58:	440b      	add	r3, r1
 801fd5a:	3314      	adds	r3, #20
 801fd5c:	2202      	movs	r2, #2
 801fd5e:	701a      	strb	r2, [r3, #0]
 801fd60:	e01e      	b.n	801fda0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801fd62:	4915      	ldr	r1, [pc, #84]	; (801fdb8 <etharp_tmr+0x14c>)
 801fd64:	687a      	ldr	r2, [r7, #4]
 801fd66:	4613      	mov	r3, r2
 801fd68:	005b      	lsls	r3, r3, #1
 801fd6a:	4413      	add	r3, r2
 801fd6c:	00db      	lsls	r3, r3, #3
 801fd6e:	440b      	add	r3, r1
 801fd70:	3314      	adds	r3, #20
 801fd72:	781b      	ldrb	r3, [r3, #0]
 801fd74:	2b01      	cmp	r3, #1
 801fd76:	d113      	bne.n	801fda0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801fd78:	490f      	ldr	r1, [pc, #60]	; (801fdb8 <etharp_tmr+0x14c>)
 801fd7a:	687a      	ldr	r2, [r7, #4]
 801fd7c:	4613      	mov	r3, r2
 801fd7e:	005b      	lsls	r3, r3, #1
 801fd80:	4413      	add	r3, r2
 801fd82:	00db      	lsls	r3, r3, #3
 801fd84:	440b      	add	r3, r1
 801fd86:	3308      	adds	r3, #8
 801fd88:	6818      	ldr	r0, [r3, #0]
 801fd8a:	687a      	ldr	r2, [r7, #4]
 801fd8c:	4613      	mov	r3, r2
 801fd8e:	005b      	lsls	r3, r3, #1
 801fd90:	4413      	add	r3, r2
 801fd92:	00db      	lsls	r3, r3, #3
 801fd94:	4a08      	ldr	r2, [pc, #32]	; (801fdb8 <etharp_tmr+0x14c>)
 801fd96:	4413      	add	r3, r2
 801fd98:	3304      	adds	r3, #4
 801fd9a:	4619      	mov	r1, r3
 801fd9c:	f000 fe6e 	bl	8020a7c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	3301      	adds	r3, #1
 801fda4:	607b      	str	r3, [r7, #4]
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	2b31      	cmp	r3, #49	; 0x31
 801fdaa:	f77f af65 	ble.w	801fc78 <etharp_tmr+0xc>
      }
    }
  }
}
 801fdae:	bf00      	nop
 801fdb0:	bf00      	nop
 801fdb2:	3708      	adds	r7, #8
 801fdb4:	46bd      	mov	sp, r7
 801fdb6:	bd80      	pop	{r7, pc}
 801fdb8:	20013dc8 	.word	0x20013dc8

0801fdbc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801fdbc:	b580      	push	{r7, lr}
 801fdbe:	b08a      	sub	sp, #40	; 0x28
 801fdc0:	af00      	add	r7, sp, #0
 801fdc2:	60f8      	str	r0, [r7, #12]
 801fdc4:	460b      	mov	r3, r1
 801fdc6:	607a      	str	r2, [r7, #4]
 801fdc8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801fdca:	2332      	movs	r3, #50	; 0x32
 801fdcc:	84fb      	strh	r3, [r7, #38]	; 0x26
 801fdce:	2332      	movs	r3, #50	; 0x32
 801fdd0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801fdd2:	2332      	movs	r3, #50	; 0x32
 801fdd4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801fdd6:	2300      	movs	r3, #0
 801fdd8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801fdda:	2332      	movs	r3, #50	; 0x32
 801fddc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801fdde:	2300      	movs	r3, #0
 801fde0:	83bb      	strh	r3, [r7, #28]
 801fde2:	2300      	movs	r3, #0
 801fde4:	837b      	strh	r3, [r7, #26]
 801fde6:	2300      	movs	r3, #0
 801fde8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fdea:	2300      	movs	r3, #0
 801fdec:	843b      	strh	r3, [r7, #32]
 801fdee:	e0ae      	b.n	801ff4e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801fdf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fdf4:	49a6      	ldr	r1, [pc, #664]	; (8020090 <etharp_find_entry+0x2d4>)
 801fdf6:	4613      	mov	r3, r2
 801fdf8:	005b      	lsls	r3, r3, #1
 801fdfa:	4413      	add	r3, r2
 801fdfc:	00db      	lsls	r3, r3, #3
 801fdfe:	440b      	add	r3, r1
 801fe00:	3314      	adds	r3, #20
 801fe02:	781b      	ldrb	r3, [r3, #0]
 801fe04:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801fe06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801fe0a:	2b32      	cmp	r3, #50	; 0x32
 801fe0c:	d105      	bne.n	801fe1a <etharp_find_entry+0x5e>
 801fe0e:	7dfb      	ldrb	r3, [r7, #23]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d102      	bne.n	801fe1a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801fe14:	8c3b      	ldrh	r3, [r7, #32]
 801fe16:	847b      	strh	r3, [r7, #34]	; 0x22
 801fe18:	e095      	b.n	801ff46 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801fe1a:	7dfb      	ldrb	r3, [r7, #23]
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	f000 8092 	beq.w	801ff46 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801fe22:	7dfb      	ldrb	r3, [r7, #23]
 801fe24:	2b01      	cmp	r3, #1
 801fe26:	d009      	beq.n	801fe3c <etharp_find_entry+0x80>
 801fe28:	7dfb      	ldrb	r3, [r7, #23]
 801fe2a:	2b01      	cmp	r3, #1
 801fe2c:	d806      	bhi.n	801fe3c <etharp_find_entry+0x80>
 801fe2e:	4b99      	ldr	r3, [pc, #612]	; (8020094 <etharp_find_entry+0x2d8>)
 801fe30:	f240 1223 	movw	r2, #291	; 0x123
 801fe34:	4998      	ldr	r1, [pc, #608]	; (8020098 <etharp_find_entry+0x2dc>)
 801fe36:	4899      	ldr	r0, [pc, #612]	; (802009c <etharp_find_entry+0x2e0>)
 801fe38:	f002 fb94 	bl	8022564 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801fe3c:	68fb      	ldr	r3, [r7, #12]
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	d020      	beq.n	801fe84 <etharp_find_entry+0xc8>
 801fe42:	68fb      	ldr	r3, [r7, #12]
 801fe44:	6819      	ldr	r1, [r3, #0]
 801fe46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fe4a:	4891      	ldr	r0, [pc, #580]	; (8020090 <etharp_find_entry+0x2d4>)
 801fe4c:	4613      	mov	r3, r2
 801fe4e:	005b      	lsls	r3, r3, #1
 801fe50:	4413      	add	r3, r2
 801fe52:	00db      	lsls	r3, r3, #3
 801fe54:	4403      	add	r3, r0
 801fe56:	3304      	adds	r3, #4
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	4299      	cmp	r1, r3
 801fe5c:	d112      	bne.n	801fe84 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	2b00      	cmp	r3, #0
 801fe62:	d00c      	beq.n	801fe7e <etharp_find_entry+0xc2>
 801fe64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fe68:	4989      	ldr	r1, [pc, #548]	; (8020090 <etharp_find_entry+0x2d4>)
 801fe6a:	4613      	mov	r3, r2
 801fe6c:	005b      	lsls	r3, r3, #1
 801fe6e:	4413      	add	r3, r2
 801fe70:	00db      	lsls	r3, r3, #3
 801fe72:	440b      	add	r3, r1
 801fe74:	3308      	adds	r3, #8
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	687a      	ldr	r2, [r7, #4]
 801fe7a:	429a      	cmp	r2, r3
 801fe7c:	d102      	bne.n	801fe84 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801fe7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fe82:	e100      	b.n	8020086 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801fe84:	7dfb      	ldrb	r3, [r7, #23]
 801fe86:	2b01      	cmp	r3, #1
 801fe88:	d140      	bne.n	801ff0c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801fe8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fe8e:	4980      	ldr	r1, [pc, #512]	; (8020090 <etharp_find_entry+0x2d4>)
 801fe90:	4613      	mov	r3, r2
 801fe92:	005b      	lsls	r3, r3, #1
 801fe94:	4413      	add	r3, r2
 801fe96:	00db      	lsls	r3, r3, #3
 801fe98:	440b      	add	r3, r1
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	2b00      	cmp	r3, #0
 801fe9e:	d01a      	beq.n	801fed6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801fea0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fea4:	497a      	ldr	r1, [pc, #488]	; (8020090 <etharp_find_entry+0x2d4>)
 801fea6:	4613      	mov	r3, r2
 801fea8:	005b      	lsls	r3, r3, #1
 801feaa:	4413      	add	r3, r2
 801feac:	00db      	lsls	r3, r3, #3
 801feae:	440b      	add	r3, r1
 801feb0:	3312      	adds	r3, #18
 801feb2:	881b      	ldrh	r3, [r3, #0]
 801feb4:	8bba      	ldrh	r2, [r7, #28]
 801feb6:	429a      	cmp	r2, r3
 801feb8:	d845      	bhi.n	801ff46 <etharp_find_entry+0x18a>
            old_queue = i;
 801feba:	8c3b      	ldrh	r3, [r7, #32]
 801febc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801febe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fec2:	4973      	ldr	r1, [pc, #460]	; (8020090 <etharp_find_entry+0x2d4>)
 801fec4:	4613      	mov	r3, r2
 801fec6:	005b      	lsls	r3, r3, #1
 801fec8:	4413      	add	r3, r2
 801feca:	00db      	lsls	r3, r3, #3
 801fecc:	440b      	add	r3, r1
 801fece:	3312      	adds	r3, #18
 801fed0:	881b      	ldrh	r3, [r3, #0]
 801fed2:	83bb      	strh	r3, [r7, #28]
 801fed4:	e037      	b.n	801ff46 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801fed6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801feda:	496d      	ldr	r1, [pc, #436]	; (8020090 <etharp_find_entry+0x2d4>)
 801fedc:	4613      	mov	r3, r2
 801fede:	005b      	lsls	r3, r3, #1
 801fee0:	4413      	add	r3, r2
 801fee2:	00db      	lsls	r3, r3, #3
 801fee4:	440b      	add	r3, r1
 801fee6:	3312      	adds	r3, #18
 801fee8:	881b      	ldrh	r3, [r3, #0]
 801feea:	8b7a      	ldrh	r2, [r7, #26]
 801feec:	429a      	cmp	r2, r3
 801feee:	d82a      	bhi.n	801ff46 <etharp_find_entry+0x18a>
            old_pending = i;
 801fef0:	8c3b      	ldrh	r3, [r7, #32]
 801fef2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801fef4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fef8:	4965      	ldr	r1, [pc, #404]	; (8020090 <etharp_find_entry+0x2d4>)
 801fefa:	4613      	mov	r3, r2
 801fefc:	005b      	lsls	r3, r3, #1
 801fefe:	4413      	add	r3, r2
 801ff00:	00db      	lsls	r3, r3, #3
 801ff02:	440b      	add	r3, r1
 801ff04:	3312      	adds	r3, #18
 801ff06:	881b      	ldrh	r3, [r3, #0]
 801ff08:	837b      	strh	r3, [r7, #26]
 801ff0a:	e01c      	b.n	801ff46 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ff0c:	7dfb      	ldrb	r3, [r7, #23]
 801ff0e:	2b01      	cmp	r3, #1
 801ff10:	d919      	bls.n	801ff46 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ff12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ff16:	495e      	ldr	r1, [pc, #376]	; (8020090 <etharp_find_entry+0x2d4>)
 801ff18:	4613      	mov	r3, r2
 801ff1a:	005b      	lsls	r3, r3, #1
 801ff1c:	4413      	add	r3, r2
 801ff1e:	00db      	lsls	r3, r3, #3
 801ff20:	440b      	add	r3, r1
 801ff22:	3312      	adds	r3, #18
 801ff24:	881b      	ldrh	r3, [r3, #0]
 801ff26:	8b3a      	ldrh	r2, [r7, #24]
 801ff28:	429a      	cmp	r2, r3
 801ff2a:	d80c      	bhi.n	801ff46 <etharp_find_entry+0x18a>
            old_stable = i;
 801ff2c:	8c3b      	ldrh	r3, [r7, #32]
 801ff2e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ff30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ff34:	4956      	ldr	r1, [pc, #344]	; (8020090 <etharp_find_entry+0x2d4>)
 801ff36:	4613      	mov	r3, r2
 801ff38:	005b      	lsls	r3, r3, #1
 801ff3a:	4413      	add	r3, r2
 801ff3c:	00db      	lsls	r3, r3, #3
 801ff3e:	440b      	add	r3, r1
 801ff40:	3312      	adds	r3, #18
 801ff42:	881b      	ldrh	r3, [r3, #0]
 801ff44:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff46:	8c3b      	ldrh	r3, [r7, #32]
 801ff48:	3301      	adds	r3, #1
 801ff4a:	b29b      	uxth	r3, r3
 801ff4c:	843b      	strh	r3, [r7, #32]
 801ff4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ff52:	2b31      	cmp	r3, #49	; 0x31
 801ff54:	f77f af4c 	ble.w	801fdf0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801ff58:	7afb      	ldrb	r3, [r7, #11]
 801ff5a:	f003 0302 	and.w	r3, r3, #2
 801ff5e:	2b00      	cmp	r3, #0
 801ff60:	d108      	bne.n	801ff74 <etharp_find_entry+0x1b8>
 801ff62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ff66:	2b32      	cmp	r3, #50	; 0x32
 801ff68:	d107      	bne.n	801ff7a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801ff6a:	7afb      	ldrb	r3, [r7, #11]
 801ff6c:	f003 0301 	and.w	r3, r3, #1
 801ff70:	2b00      	cmp	r3, #0
 801ff72:	d102      	bne.n	801ff7a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801ff74:	f04f 33ff 	mov.w	r3, #4294967295
 801ff78:	e085      	b.n	8020086 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801ff7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ff7e:	2b31      	cmp	r3, #49	; 0x31
 801ff80:	dc02      	bgt.n	801ff88 <etharp_find_entry+0x1cc>
    i = empty;
 801ff82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ff84:	843b      	strh	r3, [r7, #32]
 801ff86:	e039      	b.n	801fffc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ff88:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801ff8c:	2b31      	cmp	r3, #49	; 0x31
 801ff8e:	dc14      	bgt.n	801ffba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ff90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ff92:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ff94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ff98:	493d      	ldr	r1, [pc, #244]	; (8020090 <etharp_find_entry+0x2d4>)
 801ff9a:	4613      	mov	r3, r2
 801ff9c:	005b      	lsls	r3, r3, #1
 801ff9e:	4413      	add	r3, r2
 801ffa0:	00db      	lsls	r3, r3, #3
 801ffa2:	440b      	add	r3, r1
 801ffa4:	681b      	ldr	r3, [r3, #0]
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d018      	beq.n	801ffdc <etharp_find_entry+0x220>
 801ffaa:	4b3a      	ldr	r3, [pc, #232]	; (8020094 <etharp_find_entry+0x2d8>)
 801ffac:	f240 126d 	movw	r2, #365	; 0x16d
 801ffb0:	493b      	ldr	r1, [pc, #236]	; (80200a0 <etharp_find_entry+0x2e4>)
 801ffb2:	483a      	ldr	r0, [pc, #232]	; (802009c <etharp_find_entry+0x2e0>)
 801ffb4:	f002 fad6 	bl	8022564 <iprintf>
 801ffb8:	e010      	b.n	801ffdc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ffba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ffbe:	2b31      	cmp	r3, #49	; 0x31
 801ffc0:	dc02      	bgt.n	801ffc8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ffc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ffc4:	843b      	strh	r3, [r7, #32]
 801ffc6:	e009      	b.n	801ffdc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ffc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ffcc:	2b31      	cmp	r3, #49	; 0x31
 801ffce:	dc02      	bgt.n	801ffd6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ffd0:	8bfb      	ldrh	r3, [r7, #30]
 801ffd2:	843b      	strh	r3, [r7, #32]
 801ffd4:	e002      	b.n	801ffdc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ffd6:	f04f 33ff 	mov.w	r3, #4294967295
 801ffda:	e054      	b.n	8020086 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ffdc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ffe0:	2b31      	cmp	r3, #49	; 0x31
 801ffe2:	dd06      	ble.n	801fff2 <etharp_find_entry+0x236>
 801ffe4:	4b2b      	ldr	r3, [pc, #172]	; (8020094 <etharp_find_entry+0x2d8>)
 801ffe6:	f240 127f 	movw	r2, #383	; 0x17f
 801ffea:	492e      	ldr	r1, [pc, #184]	; (80200a4 <etharp_find_entry+0x2e8>)
 801ffec:	482b      	ldr	r0, [pc, #172]	; (802009c <etharp_find_entry+0x2e0>)
 801ffee:	f002 fab9 	bl	8022564 <iprintf>
    etharp_free_entry(i);
 801fff2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fff6:	4618      	mov	r0, r3
 801fff8:	f7ff fe06 	bl	801fc08 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801fffc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020000:	2b31      	cmp	r3, #49	; 0x31
 8020002:	dd06      	ble.n	8020012 <etharp_find_entry+0x256>
 8020004:	4b23      	ldr	r3, [pc, #140]	; (8020094 <etharp_find_entry+0x2d8>)
 8020006:	f240 1283 	movw	r2, #387	; 0x183
 802000a:	4926      	ldr	r1, [pc, #152]	; (80200a4 <etharp_find_entry+0x2e8>)
 802000c:	4823      	ldr	r0, [pc, #140]	; (802009c <etharp_find_entry+0x2e0>)
 802000e:	f002 faa9 	bl	8022564 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8020012:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020016:	491e      	ldr	r1, [pc, #120]	; (8020090 <etharp_find_entry+0x2d4>)
 8020018:	4613      	mov	r3, r2
 802001a:	005b      	lsls	r3, r3, #1
 802001c:	4413      	add	r3, r2
 802001e:	00db      	lsls	r3, r3, #3
 8020020:	440b      	add	r3, r1
 8020022:	3314      	adds	r3, #20
 8020024:	781b      	ldrb	r3, [r3, #0]
 8020026:	2b00      	cmp	r3, #0
 8020028:	d006      	beq.n	8020038 <etharp_find_entry+0x27c>
 802002a:	4b1a      	ldr	r3, [pc, #104]	; (8020094 <etharp_find_entry+0x2d8>)
 802002c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8020030:	491d      	ldr	r1, [pc, #116]	; (80200a8 <etharp_find_entry+0x2ec>)
 8020032:	481a      	ldr	r0, [pc, #104]	; (802009c <etharp_find_entry+0x2e0>)
 8020034:	f002 fa96 	bl	8022564 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020038:	68fb      	ldr	r3, [r7, #12]
 802003a:	2b00      	cmp	r3, #0
 802003c:	d00b      	beq.n	8020056 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 802003e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020042:	68fb      	ldr	r3, [r7, #12]
 8020044:	6819      	ldr	r1, [r3, #0]
 8020046:	4812      	ldr	r0, [pc, #72]	; (8020090 <etharp_find_entry+0x2d4>)
 8020048:	4613      	mov	r3, r2
 802004a:	005b      	lsls	r3, r3, #1
 802004c:	4413      	add	r3, r2
 802004e:	00db      	lsls	r3, r3, #3
 8020050:	4403      	add	r3, r0
 8020052:	3304      	adds	r3, #4
 8020054:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8020056:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802005a:	490d      	ldr	r1, [pc, #52]	; (8020090 <etharp_find_entry+0x2d4>)
 802005c:	4613      	mov	r3, r2
 802005e:	005b      	lsls	r3, r3, #1
 8020060:	4413      	add	r3, r2
 8020062:	00db      	lsls	r3, r3, #3
 8020064:	440b      	add	r3, r1
 8020066:	3312      	adds	r3, #18
 8020068:	2200      	movs	r2, #0
 802006a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 802006c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020070:	4907      	ldr	r1, [pc, #28]	; (8020090 <etharp_find_entry+0x2d4>)
 8020072:	4613      	mov	r3, r2
 8020074:	005b      	lsls	r3, r3, #1
 8020076:	4413      	add	r3, r2
 8020078:	00db      	lsls	r3, r3, #3
 802007a:	440b      	add	r3, r1
 802007c:	3308      	adds	r3, #8
 802007e:	687a      	ldr	r2, [r7, #4]
 8020080:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8020082:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8020086:	4618      	mov	r0, r3
 8020088:	3728      	adds	r7, #40	; 0x28
 802008a:	46bd      	mov	sp, r7
 802008c:	bd80      	pop	{r7, pc}
 802008e:	bf00      	nop
 8020090:	20013dc8 	.word	0x20013dc8
 8020094:	0802833c 	.word	0x0802833c
 8020098:	080283c0 	.word	0x080283c0
 802009c:	08028400 	.word	0x08028400
 80200a0:	08028428 	.word	0x08028428
 80200a4:	08028440 	.word	0x08028440
 80200a8:	08028454 	.word	0x08028454

080200ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80200ac:	b580      	push	{r7, lr}
 80200ae:	b088      	sub	sp, #32
 80200b0:	af02      	add	r7, sp, #8
 80200b2:	60f8      	str	r0, [r7, #12]
 80200b4:	60b9      	str	r1, [r7, #8]
 80200b6:	607a      	str	r2, [r7, #4]
 80200b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80200ba:	68fb      	ldr	r3, [r7, #12]
 80200bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80200c0:	2b06      	cmp	r3, #6
 80200c2:	d006      	beq.n	80200d2 <etharp_update_arp_entry+0x26>
 80200c4:	4b48      	ldr	r3, [pc, #288]	; (80201e8 <etharp_update_arp_entry+0x13c>)
 80200c6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80200ca:	4948      	ldr	r1, [pc, #288]	; (80201ec <etharp_update_arp_entry+0x140>)
 80200cc:	4848      	ldr	r0, [pc, #288]	; (80201f0 <etharp_update_arp_entry+0x144>)
 80200ce:	f002 fa49 	bl	8022564 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80200d2:	68bb      	ldr	r3, [r7, #8]
 80200d4:	2b00      	cmp	r3, #0
 80200d6:	d012      	beq.n	80200fe <etharp_update_arp_entry+0x52>
 80200d8:	68bb      	ldr	r3, [r7, #8]
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	2b00      	cmp	r3, #0
 80200de:	d00e      	beq.n	80200fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80200e0:	68bb      	ldr	r3, [r7, #8]
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	68f9      	ldr	r1, [r7, #12]
 80200e6:	4618      	mov	r0, r3
 80200e8:	f001 f902 	bl	80212f0 <ip4_addr_isbroadcast_u32>
 80200ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d105      	bne.n	80200fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80200f2:	68bb      	ldr	r3, [r7, #8]
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80200fa:	2be0      	cmp	r3, #224	; 0xe0
 80200fc:	d102      	bne.n	8020104 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80200fe:	f06f 030f 	mvn.w	r3, #15
 8020102:	e06c      	b.n	80201de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8020104:	78fb      	ldrb	r3, [r7, #3]
 8020106:	68fa      	ldr	r2, [r7, #12]
 8020108:	4619      	mov	r1, r3
 802010a:	68b8      	ldr	r0, [r7, #8]
 802010c:	f7ff fe56 	bl	801fdbc <etharp_find_entry>
 8020110:	4603      	mov	r3, r0
 8020112:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8020114:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020118:	2b00      	cmp	r3, #0
 802011a:	da02      	bge.n	8020122 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 802011c:	8afb      	ldrh	r3, [r7, #22]
 802011e:	b25b      	sxtb	r3, r3
 8020120:	e05d      	b.n	80201de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8020122:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020126:	4933      	ldr	r1, [pc, #204]	; (80201f4 <etharp_update_arp_entry+0x148>)
 8020128:	4613      	mov	r3, r2
 802012a:	005b      	lsls	r3, r3, #1
 802012c:	4413      	add	r3, r2
 802012e:	00db      	lsls	r3, r3, #3
 8020130:	440b      	add	r3, r1
 8020132:	3314      	adds	r3, #20
 8020134:	2202      	movs	r2, #2
 8020136:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8020138:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802013c:	492d      	ldr	r1, [pc, #180]	; (80201f4 <etharp_update_arp_entry+0x148>)
 802013e:	4613      	mov	r3, r2
 8020140:	005b      	lsls	r3, r3, #1
 8020142:	4413      	add	r3, r2
 8020144:	00db      	lsls	r3, r3, #3
 8020146:	440b      	add	r3, r1
 8020148:	3308      	adds	r3, #8
 802014a:	68fa      	ldr	r2, [r7, #12]
 802014c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802014e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020152:	4613      	mov	r3, r2
 8020154:	005b      	lsls	r3, r3, #1
 8020156:	4413      	add	r3, r2
 8020158:	00db      	lsls	r3, r3, #3
 802015a:	3308      	adds	r3, #8
 802015c:	4a25      	ldr	r2, [pc, #148]	; (80201f4 <etharp_update_arp_entry+0x148>)
 802015e:	4413      	add	r3, r2
 8020160:	3304      	adds	r3, #4
 8020162:	2206      	movs	r2, #6
 8020164:	6879      	ldr	r1, [r7, #4]
 8020166:	4618      	mov	r0, r3
 8020168:	f002 f8ec 	bl	8022344 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 802016c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020170:	4920      	ldr	r1, [pc, #128]	; (80201f4 <etharp_update_arp_entry+0x148>)
 8020172:	4613      	mov	r3, r2
 8020174:	005b      	lsls	r3, r3, #1
 8020176:	4413      	add	r3, r2
 8020178:	00db      	lsls	r3, r3, #3
 802017a:	440b      	add	r3, r1
 802017c:	3312      	adds	r3, #18
 802017e:	2200      	movs	r2, #0
 8020180:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8020182:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020186:	491b      	ldr	r1, [pc, #108]	; (80201f4 <etharp_update_arp_entry+0x148>)
 8020188:	4613      	mov	r3, r2
 802018a:	005b      	lsls	r3, r3, #1
 802018c:	4413      	add	r3, r2
 802018e:	00db      	lsls	r3, r3, #3
 8020190:	440b      	add	r3, r1
 8020192:	681b      	ldr	r3, [r3, #0]
 8020194:	2b00      	cmp	r3, #0
 8020196:	d021      	beq.n	80201dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8020198:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802019c:	4915      	ldr	r1, [pc, #84]	; (80201f4 <etharp_update_arp_entry+0x148>)
 802019e:	4613      	mov	r3, r2
 80201a0:	005b      	lsls	r3, r3, #1
 80201a2:	4413      	add	r3, r2
 80201a4:	00db      	lsls	r3, r3, #3
 80201a6:	440b      	add	r3, r1
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80201ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80201b0:	4910      	ldr	r1, [pc, #64]	; (80201f4 <etharp_update_arp_entry+0x148>)
 80201b2:	4613      	mov	r3, r2
 80201b4:	005b      	lsls	r3, r3, #1
 80201b6:	4413      	add	r3, r2
 80201b8:	00db      	lsls	r3, r3, #3
 80201ba:	440b      	add	r3, r1
 80201bc:	2200      	movs	r2, #0
 80201be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80201c0:	68fb      	ldr	r3, [r7, #12]
 80201c2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80201c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80201ca:	9300      	str	r3, [sp, #0]
 80201cc:	687b      	ldr	r3, [r7, #4]
 80201ce:	6939      	ldr	r1, [r7, #16]
 80201d0:	68f8      	ldr	r0, [r7, #12]
 80201d2:	f002 f82b 	bl	802222c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80201d6:	6938      	ldr	r0, [r7, #16]
 80201d8:	f7fe fc8c 	bl	801eaf4 <pbuf_free>
  }
  return ERR_OK;
 80201dc:	2300      	movs	r3, #0
}
 80201de:	4618      	mov	r0, r3
 80201e0:	3718      	adds	r7, #24
 80201e2:	46bd      	mov	sp, r7
 80201e4:	bd80      	pop	{r7, pc}
 80201e6:	bf00      	nop
 80201e8:	0802833c 	.word	0x0802833c
 80201ec:	08028480 	.word	0x08028480
 80201f0:	08028400 	.word	0x08028400
 80201f4:	20013dc8 	.word	0x20013dc8

080201f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80201f8:	b580      	push	{r7, lr}
 80201fa:	b084      	sub	sp, #16
 80201fc:	af00      	add	r7, sp, #0
 80201fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020200:	2300      	movs	r3, #0
 8020202:	60fb      	str	r3, [r7, #12]
 8020204:	e01e      	b.n	8020244 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8020206:	4913      	ldr	r1, [pc, #76]	; (8020254 <etharp_cleanup_netif+0x5c>)
 8020208:	68fa      	ldr	r2, [r7, #12]
 802020a:	4613      	mov	r3, r2
 802020c:	005b      	lsls	r3, r3, #1
 802020e:	4413      	add	r3, r2
 8020210:	00db      	lsls	r3, r3, #3
 8020212:	440b      	add	r3, r1
 8020214:	3314      	adds	r3, #20
 8020216:	781b      	ldrb	r3, [r3, #0]
 8020218:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802021a:	7afb      	ldrb	r3, [r7, #11]
 802021c:	2b00      	cmp	r3, #0
 802021e:	d00e      	beq.n	802023e <etharp_cleanup_netif+0x46>
 8020220:	490c      	ldr	r1, [pc, #48]	; (8020254 <etharp_cleanup_netif+0x5c>)
 8020222:	68fa      	ldr	r2, [r7, #12]
 8020224:	4613      	mov	r3, r2
 8020226:	005b      	lsls	r3, r3, #1
 8020228:	4413      	add	r3, r2
 802022a:	00db      	lsls	r3, r3, #3
 802022c:	440b      	add	r3, r1
 802022e:	3308      	adds	r3, #8
 8020230:	681b      	ldr	r3, [r3, #0]
 8020232:	687a      	ldr	r2, [r7, #4]
 8020234:	429a      	cmp	r2, r3
 8020236:	d102      	bne.n	802023e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8020238:	68f8      	ldr	r0, [r7, #12]
 802023a:	f7ff fce5 	bl	801fc08 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802023e:	68fb      	ldr	r3, [r7, #12]
 8020240:	3301      	adds	r3, #1
 8020242:	60fb      	str	r3, [r7, #12]
 8020244:	68fb      	ldr	r3, [r7, #12]
 8020246:	2b31      	cmp	r3, #49	; 0x31
 8020248:	dddd      	ble.n	8020206 <etharp_cleanup_netif+0xe>
    }
  }
}
 802024a:	bf00      	nop
 802024c:	bf00      	nop
 802024e:	3710      	adds	r7, #16
 8020250:	46bd      	mov	sp, r7
 8020252:	bd80      	pop	{r7, pc}
 8020254:	20013dc8 	.word	0x20013dc8

08020258 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8020258:	b5b0      	push	{r4, r5, r7, lr}
 802025a:	b08a      	sub	sp, #40	; 0x28
 802025c:	af04      	add	r7, sp, #16
 802025e:	6078      	str	r0, [r7, #4]
 8020260:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8020262:	683b      	ldr	r3, [r7, #0]
 8020264:	2b00      	cmp	r3, #0
 8020266:	d107      	bne.n	8020278 <etharp_input+0x20>
 8020268:	4b3d      	ldr	r3, [pc, #244]	; (8020360 <etharp_input+0x108>)
 802026a:	f240 228a 	movw	r2, #650	; 0x28a
 802026e:	493d      	ldr	r1, [pc, #244]	; (8020364 <etharp_input+0x10c>)
 8020270:	483d      	ldr	r0, [pc, #244]	; (8020368 <etharp_input+0x110>)
 8020272:	f002 f977 	bl	8022564 <iprintf>
 8020276:	e06f      	b.n	8020358 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	685b      	ldr	r3, [r3, #4]
 802027c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802027e:	693b      	ldr	r3, [r7, #16]
 8020280:	881b      	ldrh	r3, [r3, #0]
 8020282:	b29b      	uxth	r3, r3
 8020284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020288:	d10c      	bne.n	80202a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802028a:	693b      	ldr	r3, [r7, #16]
 802028c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802028e:	2b06      	cmp	r3, #6
 8020290:	d108      	bne.n	80202a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020292:	693b      	ldr	r3, [r7, #16]
 8020294:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020296:	2b04      	cmp	r3, #4
 8020298:	d104      	bne.n	80202a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802029a:	693b      	ldr	r3, [r7, #16]
 802029c:	885b      	ldrh	r3, [r3, #2]
 802029e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80202a0:	2b08      	cmp	r3, #8
 80202a2:	d003      	beq.n	80202ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80202a4:	6878      	ldr	r0, [r7, #4]
 80202a6:	f7fe fc25 	bl	801eaf4 <pbuf_free>
    return;
 80202aa:	e055      	b.n	8020358 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80202ac:	693b      	ldr	r3, [r7, #16]
 80202ae:	330e      	adds	r3, #14
 80202b0:	681b      	ldr	r3, [r3, #0]
 80202b2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80202b4:	693b      	ldr	r3, [r7, #16]
 80202b6:	3318      	adds	r3, #24
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80202bc:	683b      	ldr	r3, [r7, #0]
 80202be:	3304      	adds	r3, #4
 80202c0:	681b      	ldr	r3, [r3, #0]
 80202c2:	2b00      	cmp	r3, #0
 80202c4:	d102      	bne.n	80202cc <etharp_input+0x74>
    for_us = 0;
 80202c6:	2300      	movs	r3, #0
 80202c8:	75fb      	strb	r3, [r7, #23]
 80202ca:	e009      	b.n	80202e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80202cc:	68ba      	ldr	r2, [r7, #8]
 80202ce:	683b      	ldr	r3, [r7, #0]
 80202d0:	3304      	adds	r3, #4
 80202d2:	681b      	ldr	r3, [r3, #0]
 80202d4:	429a      	cmp	r2, r3
 80202d6:	bf0c      	ite	eq
 80202d8:	2301      	moveq	r3, #1
 80202da:	2300      	movne	r3, #0
 80202dc:	b2db      	uxtb	r3, r3
 80202de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80202e0:	693b      	ldr	r3, [r7, #16]
 80202e2:	f103 0208 	add.w	r2, r3, #8
 80202e6:	7dfb      	ldrb	r3, [r7, #23]
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d001      	beq.n	80202f0 <etharp_input+0x98>
 80202ec:	2301      	movs	r3, #1
 80202ee:	e000      	b.n	80202f2 <etharp_input+0x9a>
 80202f0:	2302      	movs	r3, #2
 80202f2:	f107 010c 	add.w	r1, r7, #12
 80202f6:	6838      	ldr	r0, [r7, #0]
 80202f8:	f7ff fed8 	bl	80200ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80202fc:	693b      	ldr	r3, [r7, #16]
 80202fe:	88db      	ldrh	r3, [r3, #6]
 8020300:	b29b      	uxth	r3, r3
 8020302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020306:	d003      	beq.n	8020310 <etharp_input+0xb8>
 8020308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802030c:	d01e      	beq.n	802034c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 802030e:	e020      	b.n	8020352 <etharp_input+0xfa>
      if (for_us) {
 8020310:	7dfb      	ldrb	r3, [r7, #23]
 8020312:	2b00      	cmp	r3, #0
 8020314:	d01c      	beq.n	8020350 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8020316:	683b      	ldr	r3, [r7, #0]
 8020318:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 802031c:	693b      	ldr	r3, [r7, #16]
 802031e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8020322:	683b      	ldr	r3, [r7, #0]
 8020324:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8020328:	683b      	ldr	r3, [r7, #0]
 802032a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 802032c:	693a      	ldr	r2, [r7, #16]
 802032e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8020330:	2102      	movs	r1, #2
 8020332:	9103      	str	r1, [sp, #12]
 8020334:	f107 010c 	add.w	r1, r7, #12
 8020338:	9102      	str	r1, [sp, #8]
 802033a:	9201      	str	r2, [sp, #4]
 802033c:	9300      	str	r3, [sp, #0]
 802033e:	462b      	mov	r3, r5
 8020340:	4622      	mov	r2, r4
 8020342:	4601      	mov	r1, r0
 8020344:	6838      	ldr	r0, [r7, #0]
 8020346:	f000 faeb 	bl	8020920 <etharp_raw>
      break;
 802034a:	e001      	b.n	8020350 <etharp_input+0xf8>
      break;
 802034c:	bf00      	nop
 802034e:	e000      	b.n	8020352 <etharp_input+0xfa>
      break;
 8020350:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8020352:	6878      	ldr	r0, [r7, #4]
 8020354:	f7fe fbce 	bl	801eaf4 <pbuf_free>
}
 8020358:	3718      	adds	r7, #24
 802035a:	46bd      	mov	sp, r7
 802035c:	bdb0      	pop	{r4, r5, r7, pc}
 802035e:	bf00      	nop
 8020360:	0802833c 	.word	0x0802833c
 8020364:	080284d8 	.word	0x080284d8
 8020368:	08028400 	.word	0x08028400

0802036c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 802036c:	b580      	push	{r7, lr}
 802036e:	b086      	sub	sp, #24
 8020370:	af02      	add	r7, sp, #8
 8020372:	60f8      	str	r0, [r7, #12]
 8020374:	60b9      	str	r1, [r7, #8]
 8020376:	4613      	mov	r3, r2
 8020378:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802037a:	79fa      	ldrb	r2, [r7, #7]
 802037c:	4944      	ldr	r1, [pc, #272]	; (8020490 <etharp_output_to_arp_index+0x124>)
 802037e:	4613      	mov	r3, r2
 8020380:	005b      	lsls	r3, r3, #1
 8020382:	4413      	add	r3, r2
 8020384:	00db      	lsls	r3, r3, #3
 8020386:	440b      	add	r3, r1
 8020388:	3314      	adds	r3, #20
 802038a:	781b      	ldrb	r3, [r3, #0]
 802038c:	2b01      	cmp	r3, #1
 802038e:	d806      	bhi.n	802039e <etharp_output_to_arp_index+0x32>
 8020390:	4b40      	ldr	r3, [pc, #256]	; (8020494 <etharp_output_to_arp_index+0x128>)
 8020392:	f240 22ee 	movw	r2, #750	; 0x2ee
 8020396:	4940      	ldr	r1, [pc, #256]	; (8020498 <etharp_output_to_arp_index+0x12c>)
 8020398:	4840      	ldr	r0, [pc, #256]	; (802049c <etharp_output_to_arp_index+0x130>)
 802039a:	f002 f8e3 	bl	8022564 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802039e:	79fa      	ldrb	r2, [r7, #7]
 80203a0:	493b      	ldr	r1, [pc, #236]	; (8020490 <etharp_output_to_arp_index+0x124>)
 80203a2:	4613      	mov	r3, r2
 80203a4:	005b      	lsls	r3, r3, #1
 80203a6:	4413      	add	r3, r2
 80203a8:	00db      	lsls	r3, r3, #3
 80203aa:	440b      	add	r3, r1
 80203ac:	3314      	adds	r3, #20
 80203ae:	781b      	ldrb	r3, [r3, #0]
 80203b0:	2b02      	cmp	r3, #2
 80203b2:	d153      	bne.n	802045c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80203b4:	79fa      	ldrb	r2, [r7, #7]
 80203b6:	4936      	ldr	r1, [pc, #216]	; (8020490 <etharp_output_to_arp_index+0x124>)
 80203b8:	4613      	mov	r3, r2
 80203ba:	005b      	lsls	r3, r3, #1
 80203bc:	4413      	add	r3, r2
 80203be:	00db      	lsls	r3, r3, #3
 80203c0:	440b      	add	r3, r1
 80203c2:	3312      	adds	r3, #18
 80203c4:	881b      	ldrh	r3, [r3, #0]
 80203c6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80203ca:	d919      	bls.n	8020400 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80203cc:	79fa      	ldrb	r2, [r7, #7]
 80203ce:	4613      	mov	r3, r2
 80203d0:	005b      	lsls	r3, r3, #1
 80203d2:	4413      	add	r3, r2
 80203d4:	00db      	lsls	r3, r3, #3
 80203d6:	4a2e      	ldr	r2, [pc, #184]	; (8020490 <etharp_output_to_arp_index+0x124>)
 80203d8:	4413      	add	r3, r2
 80203da:	3304      	adds	r3, #4
 80203dc:	4619      	mov	r1, r3
 80203de:	68f8      	ldr	r0, [r7, #12]
 80203e0:	f000 fb4c 	bl	8020a7c <etharp_request>
 80203e4:	4603      	mov	r3, r0
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	d138      	bne.n	802045c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80203ea:	79fa      	ldrb	r2, [r7, #7]
 80203ec:	4928      	ldr	r1, [pc, #160]	; (8020490 <etharp_output_to_arp_index+0x124>)
 80203ee:	4613      	mov	r3, r2
 80203f0:	005b      	lsls	r3, r3, #1
 80203f2:	4413      	add	r3, r2
 80203f4:	00db      	lsls	r3, r3, #3
 80203f6:	440b      	add	r3, r1
 80203f8:	3314      	adds	r3, #20
 80203fa:	2203      	movs	r2, #3
 80203fc:	701a      	strb	r2, [r3, #0]
 80203fe:	e02d      	b.n	802045c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8020400:	79fa      	ldrb	r2, [r7, #7]
 8020402:	4923      	ldr	r1, [pc, #140]	; (8020490 <etharp_output_to_arp_index+0x124>)
 8020404:	4613      	mov	r3, r2
 8020406:	005b      	lsls	r3, r3, #1
 8020408:	4413      	add	r3, r2
 802040a:	00db      	lsls	r3, r3, #3
 802040c:	440b      	add	r3, r1
 802040e:	3312      	adds	r3, #18
 8020410:	881b      	ldrh	r3, [r3, #0]
 8020412:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8020416:	d321      	bcc.n	802045c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020418:	79fa      	ldrb	r2, [r7, #7]
 802041a:	4613      	mov	r3, r2
 802041c:	005b      	lsls	r3, r3, #1
 802041e:	4413      	add	r3, r2
 8020420:	00db      	lsls	r3, r3, #3
 8020422:	4a1b      	ldr	r2, [pc, #108]	; (8020490 <etharp_output_to_arp_index+0x124>)
 8020424:	4413      	add	r3, r2
 8020426:	1d19      	adds	r1, r3, #4
 8020428:	79fa      	ldrb	r2, [r7, #7]
 802042a:	4613      	mov	r3, r2
 802042c:	005b      	lsls	r3, r3, #1
 802042e:	4413      	add	r3, r2
 8020430:	00db      	lsls	r3, r3, #3
 8020432:	3308      	adds	r3, #8
 8020434:	4a16      	ldr	r2, [pc, #88]	; (8020490 <etharp_output_to_arp_index+0x124>)
 8020436:	4413      	add	r3, r2
 8020438:	3304      	adds	r3, #4
 802043a:	461a      	mov	r2, r3
 802043c:	68f8      	ldr	r0, [r7, #12]
 802043e:	f000 fafb 	bl	8020a38 <etharp_request_dst>
 8020442:	4603      	mov	r3, r0
 8020444:	2b00      	cmp	r3, #0
 8020446:	d109      	bne.n	802045c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020448:	79fa      	ldrb	r2, [r7, #7]
 802044a:	4911      	ldr	r1, [pc, #68]	; (8020490 <etharp_output_to_arp_index+0x124>)
 802044c:	4613      	mov	r3, r2
 802044e:	005b      	lsls	r3, r3, #1
 8020450:	4413      	add	r3, r2
 8020452:	00db      	lsls	r3, r3, #3
 8020454:	440b      	add	r3, r1
 8020456:	3314      	adds	r3, #20
 8020458:	2203      	movs	r2, #3
 802045a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 802045c:	68fb      	ldr	r3, [r7, #12]
 802045e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8020462:	79fa      	ldrb	r2, [r7, #7]
 8020464:	4613      	mov	r3, r2
 8020466:	005b      	lsls	r3, r3, #1
 8020468:	4413      	add	r3, r2
 802046a:	00db      	lsls	r3, r3, #3
 802046c:	3308      	adds	r3, #8
 802046e:	4a08      	ldr	r2, [pc, #32]	; (8020490 <etharp_output_to_arp_index+0x124>)
 8020470:	4413      	add	r3, r2
 8020472:	3304      	adds	r3, #4
 8020474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020478:	9200      	str	r2, [sp, #0]
 802047a:	460a      	mov	r2, r1
 802047c:	68b9      	ldr	r1, [r7, #8]
 802047e:	68f8      	ldr	r0, [r7, #12]
 8020480:	f001 fed4 	bl	802222c <ethernet_output>
 8020484:	4603      	mov	r3, r0
}
 8020486:	4618      	mov	r0, r3
 8020488:	3710      	adds	r7, #16
 802048a:	46bd      	mov	sp, r7
 802048c:	bd80      	pop	{r7, pc}
 802048e:	bf00      	nop
 8020490:	20013dc8 	.word	0x20013dc8
 8020494:	0802833c 	.word	0x0802833c
 8020498:	080284f8 	.word	0x080284f8
 802049c:	08028400 	.word	0x08028400

080204a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80204a0:	b580      	push	{r7, lr}
 80204a2:	b08a      	sub	sp, #40	; 0x28
 80204a4:	af02      	add	r7, sp, #8
 80204a6:	60f8      	str	r0, [r7, #12]
 80204a8:	60b9      	str	r1, [r7, #8]
 80204aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80204b0:	68fb      	ldr	r3, [r7, #12]
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d106      	bne.n	80204c4 <etharp_output+0x24>
 80204b6:	4b73      	ldr	r3, [pc, #460]	; (8020684 <etharp_output+0x1e4>)
 80204b8:	f240 321e 	movw	r2, #798	; 0x31e
 80204bc:	4972      	ldr	r1, [pc, #456]	; (8020688 <etharp_output+0x1e8>)
 80204be:	4873      	ldr	r0, [pc, #460]	; (802068c <etharp_output+0x1ec>)
 80204c0:	f002 f850 	bl	8022564 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80204c4:	68bb      	ldr	r3, [r7, #8]
 80204c6:	2b00      	cmp	r3, #0
 80204c8:	d106      	bne.n	80204d8 <etharp_output+0x38>
 80204ca:	4b6e      	ldr	r3, [pc, #440]	; (8020684 <etharp_output+0x1e4>)
 80204cc:	f240 321f 	movw	r2, #799	; 0x31f
 80204d0:	496f      	ldr	r1, [pc, #444]	; (8020690 <etharp_output+0x1f0>)
 80204d2:	486e      	ldr	r0, [pc, #440]	; (802068c <etharp_output+0x1ec>)
 80204d4:	f002 f846 	bl	8022564 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	2b00      	cmp	r3, #0
 80204dc:	d106      	bne.n	80204ec <etharp_output+0x4c>
 80204de:	4b69      	ldr	r3, [pc, #420]	; (8020684 <etharp_output+0x1e4>)
 80204e0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80204e4:	496b      	ldr	r1, [pc, #428]	; (8020694 <etharp_output+0x1f4>)
 80204e6:	4869      	ldr	r0, [pc, #420]	; (802068c <etharp_output+0x1ec>)
 80204e8:	f002 f83c 	bl	8022564 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	681b      	ldr	r3, [r3, #0]
 80204f0:	68f9      	ldr	r1, [r7, #12]
 80204f2:	4618      	mov	r0, r3
 80204f4:	f000 fefc 	bl	80212f0 <ip4_addr_isbroadcast_u32>
 80204f8:	4603      	mov	r3, r0
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d002      	beq.n	8020504 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80204fe:	4b66      	ldr	r3, [pc, #408]	; (8020698 <etharp_output+0x1f8>)
 8020500:	61fb      	str	r3, [r7, #28]
 8020502:	e0af      	b.n	8020664 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	681b      	ldr	r3, [r3, #0]
 8020508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802050c:	2be0      	cmp	r3, #224	; 0xe0
 802050e:	d118      	bne.n	8020542 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8020510:	2301      	movs	r3, #1
 8020512:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8020514:	2300      	movs	r3, #0
 8020516:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020518:	235e      	movs	r3, #94	; 0x5e
 802051a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	3301      	adds	r3, #1
 8020520:	781b      	ldrb	r3, [r3, #0]
 8020522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020526:	b2db      	uxtb	r3, r3
 8020528:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	3302      	adds	r3, #2
 802052e:	781b      	ldrb	r3, [r3, #0]
 8020530:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8020532:	687b      	ldr	r3, [r7, #4]
 8020534:	3303      	adds	r3, #3
 8020536:	781b      	ldrb	r3, [r3, #0]
 8020538:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 802053a:	f107 0310 	add.w	r3, r7, #16
 802053e:	61fb      	str	r3, [r7, #28]
 8020540:	e090      	b.n	8020664 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020542:	687b      	ldr	r3, [r7, #4]
 8020544:	681a      	ldr	r2, [r3, #0]
 8020546:	68fb      	ldr	r3, [r7, #12]
 8020548:	3304      	adds	r3, #4
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	405a      	eors	r2, r3
 802054e:	68fb      	ldr	r3, [r7, #12]
 8020550:	3308      	adds	r3, #8
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	4013      	ands	r3, r2
 8020556:	2b00      	cmp	r3, #0
 8020558:	d012      	beq.n	8020580 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020560:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8020564:	4293      	cmp	r3, r2
 8020566:	d00b      	beq.n	8020580 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020568:	68fb      	ldr	r3, [r7, #12]
 802056a:	330c      	adds	r3, #12
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	2b00      	cmp	r3, #0
 8020570:	d003      	beq.n	802057a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8020572:	68fb      	ldr	r3, [r7, #12]
 8020574:	330c      	adds	r3, #12
 8020576:	61bb      	str	r3, [r7, #24]
 8020578:	e002      	b.n	8020580 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 802057a:	f06f 0303 	mvn.w	r3, #3
 802057e:	e07d      	b.n	802067c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020580:	4b46      	ldr	r3, [pc, #280]	; (802069c <etharp_output+0x1fc>)
 8020582:	781b      	ldrb	r3, [r3, #0]
 8020584:	4619      	mov	r1, r3
 8020586:	4a46      	ldr	r2, [pc, #280]	; (80206a0 <etharp_output+0x200>)
 8020588:	460b      	mov	r3, r1
 802058a:	005b      	lsls	r3, r3, #1
 802058c:	440b      	add	r3, r1
 802058e:	00db      	lsls	r3, r3, #3
 8020590:	4413      	add	r3, r2
 8020592:	3314      	adds	r3, #20
 8020594:	781b      	ldrb	r3, [r3, #0]
 8020596:	2b01      	cmp	r3, #1
 8020598:	d925      	bls.n	80205e6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 802059a:	4b40      	ldr	r3, [pc, #256]	; (802069c <etharp_output+0x1fc>)
 802059c:	781b      	ldrb	r3, [r3, #0]
 802059e:	4619      	mov	r1, r3
 80205a0:	4a3f      	ldr	r2, [pc, #252]	; (80206a0 <etharp_output+0x200>)
 80205a2:	460b      	mov	r3, r1
 80205a4:	005b      	lsls	r3, r3, #1
 80205a6:	440b      	add	r3, r1
 80205a8:	00db      	lsls	r3, r3, #3
 80205aa:	4413      	add	r3, r2
 80205ac:	3308      	adds	r3, #8
 80205ae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80205b0:	68fa      	ldr	r2, [r7, #12]
 80205b2:	429a      	cmp	r2, r3
 80205b4:	d117      	bne.n	80205e6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80205b6:	69bb      	ldr	r3, [r7, #24]
 80205b8:	681a      	ldr	r2, [r3, #0]
 80205ba:	4b38      	ldr	r3, [pc, #224]	; (802069c <etharp_output+0x1fc>)
 80205bc:	781b      	ldrb	r3, [r3, #0]
 80205be:	4618      	mov	r0, r3
 80205c0:	4937      	ldr	r1, [pc, #220]	; (80206a0 <etharp_output+0x200>)
 80205c2:	4603      	mov	r3, r0
 80205c4:	005b      	lsls	r3, r3, #1
 80205c6:	4403      	add	r3, r0
 80205c8:	00db      	lsls	r3, r3, #3
 80205ca:	440b      	add	r3, r1
 80205cc:	3304      	adds	r3, #4
 80205ce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80205d0:	429a      	cmp	r2, r3
 80205d2:	d108      	bne.n	80205e6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80205d4:	4b31      	ldr	r3, [pc, #196]	; (802069c <etharp_output+0x1fc>)
 80205d6:	781b      	ldrb	r3, [r3, #0]
 80205d8:	461a      	mov	r2, r3
 80205da:	68b9      	ldr	r1, [r7, #8]
 80205dc:	68f8      	ldr	r0, [r7, #12]
 80205de:	f7ff fec5 	bl	802036c <etharp_output_to_arp_index>
 80205e2:	4603      	mov	r3, r0
 80205e4:	e04a      	b.n	802067c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80205e6:	2300      	movs	r3, #0
 80205e8:	75fb      	strb	r3, [r7, #23]
 80205ea:	e031      	b.n	8020650 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80205ec:	7dfa      	ldrb	r2, [r7, #23]
 80205ee:	492c      	ldr	r1, [pc, #176]	; (80206a0 <etharp_output+0x200>)
 80205f0:	4613      	mov	r3, r2
 80205f2:	005b      	lsls	r3, r3, #1
 80205f4:	4413      	add	r3, r2
 80205f6:	00db      	lsls	r3, r3, #3
 80205f8:	440b      	add	r3, r1
 80205fa:	3314      	adds	r3, #20
 80205fc:	781b      	ldrb	r3, [r3, #0]
 80205fe:	2b01      	cmp	r3, #1
 8020600:	d923      	bls.n	802064a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8020602:	7dfa      	ldrb	r2, [r7, #23]
 8020604:	4926      	ldr	r1, [pc, #152]	; (80206a0 <etharp_output+0x200>)
 8020606:	4613      	mov	r3, r2
 8020608:	005b      	lsls	r3, r3, #1
 802060a:	4413      	add	r3, r2
 802060c:	00db      	lsls	r3, r3, #3
 802060e:	440b      	add	r3, r1
 8020610:	3308      	adds	r3, #8
 8020612:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020614:	68fa      	ldr	r2, [r7, #12]
 8020616:	429a      	cmp	r2, r3
 8020618:	d117      	bne.n	802064a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 802061a:	69bb      	ldr	r3, [r7, #24]
 802061c:	6819      	ldr	r1, [r3, #0]
 802061e:	7dfa      	ldrb	r2, [r7, #23]
 8020620:	481f      	ldr	r0, [pc, #124]	; (80206a0 <etharp_output+0x200>)
 8020622:	4613      	mov	r3, r2
 8020624:	005b      	lsls	r3, r3, #1
 8020626:	4413      	add	r3, r2
 8020628:	00db      	lsls	r3, r3, #3
 802062a:	4403      	add	r3, r0
 802062c:	3304      	adds	r3, #4
 802062e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020630:	4299      	cmp	r1, r3
 8020632:	d10a      	bne.n	802064a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020634:	4a19      	ldr	r2, [pc, #100]	; (802069c <etharp_output+0x1fc>)
 8020636:	7dfb      	ldrb	r3, [r7, #23]
 8020638:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 802063a:	7dfb      	ldrb	r3, [r7, #23]
 802063c:	461a      	mov	r2, r3
 802063e:	68b9      	ldr	r1, [r7, #8]
 8020640:	68f8      	ldr	r0, [r7, #12]
 8020642:	f7ff fe93 	bl	802036c <etharp_output_to_arp_index>
 8020646:	4603      	mov	r3, r0
 8020648:	e018      	b.n	802067c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802064a:	7dfb      	ldrb	r3, [r7, #23]
 802064c:	3301      	adds	r3, #1
 802064e:	75fb      	strb	r3, [r7, #23]
 8020650:	7dfb      	ldrb	r3, [r7, #23]
 8020652:	2b31      	cmp	r3, #49	; 0x31
 8020654:	d9ca      	bls.n	80205ec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020656:	68ba      	ldr	r2, [r7, #8]
 8020658:	69b9      	ldr	r1, [r7, #24]
 802065a:	68f8      	ldr	r0, [r7, #12]
 802065c:	f000 f822 	bl	80206a4 <etharp_query>
 8020660:	4603      	mov	r3, r0
 8020662:	e00b      	b.n	802067c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020664:	68fb      	ldr	r3, [r7, #12]
 8020666:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802066a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802066e:	9300      	str	r3, [sp, #0]
 8020670:	69fb      	ldr	r3, [r7, #28]
 8020672:	68b9      	ldr	r1, [r7, #8]
 8020674:	68f8      	ldr	r0, [r7, #12]
 8020676:	f001 fdd9 	bl	802222c <ethernet_output>
 802067a:	4603      	mov	r3, r0
}
 802067c:	4618      	mov	r0, r3
 802067e:	3720      	adds	r7, #32
 8020680:	46bd      	mov	sp, r7
 8020682:	bd80      	pop	{r7, pc}
 8020684:	0802833c 	.word	0x0802833c
 8020688:	080284d8 	.word	0x080284d8
 802068c:	08028400 	.word	0x08028400
 8020690:	08028528 	.word	0x08028528
 8020694:	080284c8 	.word	0x080284c8
 8020698:	0802903c 	.word	0x0802903c
 802069c:	20014278 	.word	0x20014278
 80206a0:	20013dc8 	.word	0x20013dc8

080206a4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80206a4:	b580      	push	{r7, lr}
 80206a6:	b08c      	sub	sp, #48	; 0x30
 80206a8:	af02      	add	r7, sp, #8
 80206aa:	60f8      	str	r0, [r7, #12]
 80206ac:	60b9      	str	r1, [r7, #8]
 80206ae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80206b0:	68fb      	ldr	r3, [r7, #12]
 80206b2:	332a      	adds	r3, #42	; 0x2a
 80206b4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80206b6:	23ff      	movs	r3, #255	; 0xff
 80206b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80206bc:	2300      	movs	r3, #0
 80206be:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80206c0:	68bb      	ldr	r3, [r7, #8]
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	68f9      	ldr	r1, [r7, #12]
 80206c6:	4618      	mov	r0, r3
 80206c8:	f000 fe12 	bl	80212f0 <ip4_addr_isbroadcast_u32>
 80206cc:	4603      	mov	r3, r0
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	d10c      	bne.n	80206ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80206d2:	68bb      	ldr	r3, [r7, #8]
 80206d4:	681b      	ldr	r3, [r3, #0]
 80206d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80206da:	2be0      	cmp	r3, #224	; 0xe0
 80206dc:	d006      	beq.n	80206ec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80206de:	68bb      	ldr	r3, [r7, #8]
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	d003      	beq.n	80206ec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80206e4:	68bb      	ldr	r3, [r7, #8]
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d102      	bne.n	80206f2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80206ec:	f06f 030f 	mvn.w	r3, #15
 80206f0:	e101      	b.n	80208f6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80206f2:	68fa      	ldr	r2, [r7, #12]
 80206f4:	2101      	movs	r1, #1
 80206f6:	68b8      	ldr	r0, [r7, #8]
 80206f8:	f7ff fb60 	bl	801fdbc <etharp_find_entry>
 80206fc:	4603      	mov	r3, r0
 80206fe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020700:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020704:	2b00      	cmp	r3, #0
 8020706:	da02      	bge.n	802070e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020708:	8a7b      	ldrh	r3, [r7, #18]
 802070a:	b25b      	sxtb	r3, r3
 802070c:	e0f3      	b.n	80208f6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802070e:	8a7b      	ldrh	r3, [r7, #18]
 8020710:	2b7e      	cmp	r3, #126	; 0x7e
 8020712:	d906      	bls.n	8020722 <etharp_query+0x7e>
 8020714:	4b7a      	ldr	r3, [pc, #488]	; (8020900 <etharp_query+0x25c>)
 8020716:	f240 32c1 	movw	r2, #961	; 0x3c1
 802071a:	497a      	ldr	r1, [pc, #488]	; (8020904 <etharp_query+0x260>)
 802071c:	487a      	ldr	r0, [pc, #488]	; (8020908 <etharp_query+0x264>)
 802071e:	f001 ff21 	bl	8022564 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020722:	8a7b      	ldrh	r3, [r7, #18]
 8020724:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020726:	7c7a      	ldrb	r2, [r7, #17]
 8020728:	4978      	ldr	r1, [pc, #480]	; (802090c <etharp_query+0x268>)
 802072a:	4613      	mov	r3, r2
 802072c:	005b      	lsls	r3, r3, #1
 802072e:	4413      	add	r3, r2
 8020730:	00db      	lsls	r3, r3, #3
 8020732:	440b      	add	r3, r1
 8020734:	3314      	adds	r3, #20
 8020736:	781b      	ldrb	r3, [r3, #0]
 8020738:	2b00      	cmp	r3, #0
 802073a:	d115      	bne.n	8020768 <etharp_query+0xc4>
    is_new_entry = 1;
 802073c:	2301      	movs	r3, #1
 802073e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020740:	7c7a      	ldrb	r2, [r7, #17]
 8020742:	4972      	ldr	r1, [pc, #456]	; (802090c <etharp_query+0x268>)
 8020744:	4613      	mov	r3, r2
 8020746:	005b      	lsls	r3, r3, #1
 8020748:	4413      	add	r3, r2
 802074a:	00db      	lsls	r3, r3, #3
 802074c:	440b      	add	r3, r1
 802074e:	3314      	adds	r3, #20
 8020750:	2201      	movs	r2, #1
 8020752:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020754:	7c7a      	ldrb	r2, [r7, #17]
 8020756:	496d      	ldr	r1, [pc, #436]	; (802090c <etharp_query+0x268>)
 8020758:	4613      	mov	r3, r2
 802075a:	005b      	lsls	r3, r3, #1
 802075c:	4413      	add	r3, r2
 802075e:	00db      	lsls	r3, r3, #3
 8020760:	440b      	add	r3, r1
 8020762:	3308      	adds	r3, #8
 8020764:	68fa      	ldr	r2, [r7, #12]
 8020766:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020768:	7c7a      	ldrb	r2, [r7, #17]
 802076a:	4968      	ldr	r1, [pc, #416]	; (802090c <etharp_query+0x268>)
 802076c:	4613      	mov	r3, r2
 802076e:	005b      	lsls	r3, r3, #1
 8020770:	4413      	add	r3, r2
 8020772:	00db      	lsls	r3, r3, #3
 8020774:	440b      	add	r3, r1
 8020776:	3314      	adds	r3, #20
 8020778:	781b      	ldrb	r3, [r3, #0]
 802077a:	2b01      	cmp	r3, #1
 802077c:	d011      	beq.n	80207a2 <etharp_query+0xfe>
 802077e:	7c7a      	ldrb	r2, [r7, #17]
 8020780:	4962      	ldr	r1, [pc, #392]	; (802090c <etharp_query+0x268>)
 8020782:	4613      	mov	r3, r2
 8020784:	005b      	lsls	r3, r3, #1
 8020786:	4413      	add	r3, r2
 8020788:	00db      	lsls	r3, r3, #3
 802078a:	440b      	add	r3, r1
 802078c:	3314      	adds	r3, #20
 802078e:	781b      	ldrb	r3, [r3, #0]
 8020790:	2b01      	cmp	r3, #1
 8020792:	d806      	bhi.n	80207a2 <etharp_query+0xfe>
 8020794:	4b5a      	ldr	r3, [pc, #360]	; (8020900 <etharp_query+0x25c>)
 8020796:	f240 32cd 	movw	r2, #973	; 0x3cd
 802079a:	495d      	ldr	r1, [pc, #372]	; (8020910 <etharp_query+0x26c>)
 802079c:	485a      	ldr	r0, [pc, #360]	; (8020908 <etharp_query+0x264>)
 802079e:	f001 fee1 	bl	8022564 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80207a2:	6a3b      	ldr	r3, [r7, #32]
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d102      	bne.n	80207ae <etharp_query+0x10a>
 80207a8:	687b      	ldr	r3, [r7, #4]
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d10c      	bne.n	80207c8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80207ae:	68b9      	ldr	r1, [r7, #8]
 80207b0:	68f8      	ldr	r0, [r7, #12]
 80207b2:	f000 f963 	bl	8020a7c <etharp_request>
 80207b6:	4603      	mov	r3, r0
 80207b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80207bc:	687b      	ldr	r3, [r7, #4]
 80207be:	2b00      	cmp	r3, #0
 80207c0:	d102      	bne.n	80207c8 <etharp_query+0x124>
      return result;
 80207c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80207c6:	e096      	b.n	80208f6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80207c8:	687b      	ldr	r3, [r7, #4]
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d106      	bne.n	80207dc <etharp_query+0x138>
 80207ce:	4b4c      	ldr	r3, [pc, #304]	; (8020900 <etharp_query+0x25c>)
 80207d0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80207d4:	494f      	ldr	r1, [pc, #316]	; (8020914 <etharp_query+0x270>)
 80207d6:	484c      	ldr	r0, [pc, #304]	; (8020908 <etharp_query+0x264>)
 80207d8:	f001 fec4 	bl	8022564 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80207dc:	7c7a      	ldrb	r2, [r7, #17]
 80207de:	494b      	ldr	r1, [pc, #300]	; (802090c <etharp_query+0x268>)
 80207e0:	4613      	mov	r3, r2
 80207e2:	005b      	lsls	r3, r3, #1
 80207e4:	4413      	add	r3, r2
 80207e6:	00db      	lsls	r3, r3, #3
 80207e8:	440b      	add	r3, r1
 80207ea:	3314      	adds	r3, #20
 80207ec:	781b      	ldrb	r3, [r3, #0]
 80207ee:	2b01      	cmp	r3, #1
 80207f0:	d917      	bls.n	8020822 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80207f2:	4a49      	ldr	r2, [pc, #292]	; (8020918 <etharp_query+0x274>)
 80207f4:	7c7b      	ldrb	r3, [r7, #17]
 80207f6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80207f8:	7c7a      	ldrb	r2, [r7, #17]
 80207fa:	4613      	mov	r3, r2
 80207fc:	005b      	lsls	r3, r3, #1
 80207fe:	4413      	add	r3, r2
 8020800:	00db      	lsls	r3, r3, #3
 8020802:	3308      	adds	r3, #8
 8020804:	4a41      	ldr	r2, [pc, #260]	; (802090c <etharp_query+0x268>)
 8020806:	4413      	add	r3, r2
 8020808:	3304      	adds	r3, #4
 802080a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802080e:	9200      	str	r2, [sp, #0]
 8020810:	697a      	ldr	r2, [r7, #20]
 8020812:	6879      	ldr	r1, [r7, #4]
 8020814:	68f8      	ldr	r0, [r7, #12]
 8020816:	f001 fd09 	bl	802222c <ethernet_output>
 802081a:	4603      	mov	r3, r0
 802081c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020820:	e067      	b.n	80208f2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020822:	7c7a      	ldrb	r2, [r7, #17]
 8020824:	4939      	ldr	r1, [pc, #228]	; (802090c <etharp_query+0x268>)
 8020826:	4613      	mov	r3, r2
 8020828:	005b      	lsls	r3, r3, #1
 802082a:	4413      	add	r3, r2
 802082c:	00db      	lsls	r3, r3, #3
 802082e:	440b      	add	r3, r1
 8020830:	3314      	adds	r3, #20
 8020832:	781b      	ldrb	r3, [r3, #0]
 8020834:	2b01      	cmp	r3, #1
 8020836:	d15c      	bne.n	80208f2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020838:	2300      	movs	r3, #0
 802083a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020840:	e01c      	b.n	802087c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020842:	69fb      	ldr	r3, [r7, #28]
 8020844:	895a      	ldrh	r2, [r3, #10]
 8020846:	69fb      	ldr	r3, [r7, #28]
 8020848:	891b      	ldrh	r3, [r3, #8]
 802084a:	429a      	cmp	r2, r3
 802084c:	d10a      	bne.n	8020864 <etharp_query+0x1c0>
 802084e:	69fb      	ldr	r3, [r7, #28]
 8020850:	681b      	ldr	r3, [r3, #0]
 8020852:	2b00      	cmp	r3, #0
 8020854:	d006      	beq.n	8020864 <etharp_query+0x1c0>
 8020856:	4b2a      	ldr	r3, [pc, #168]	; (8020900 <etharp_query+0x25c>)
 8020858:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802085c:	492f      	ldr	r1, [pc, #188]	; (802091c <etharp_query+0x278>)
 802085e:	482a      	ldr	r0, [pc, #168]	; (8020908 <etharp_query+0x264>)
 8020860:	f001 fe80 	bl	8022564 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020864:	69fb      	ldr	r3, [r7, #28]
 8020866:	7b1b      	ldrb	r3, [r3, #12]
 8020868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802086c:	2b00      	cmp	r3, #0
 802086e:	d002      	beq.n	8020876 <etharp_query+0x1d2>
        copy_needed = 1;
 8020870:	2301      	movs	r3, #1
 8020872:	61bb      	str	r3, [r7, #24]
        break;
 8020874:	e005      	b.n	8020882 <etharp_query+0x1de>
      }
      p = p->next;
 8020876:	69fb      	ldr	r3, [r7, #28]
 8020878:	681b      	ldr	r3, [r3, #0]
 802087a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802087c:	69fb      	ldr	r3, [r7, #28]
 802087e:	2b00      	cmp	r3, #0
 8020880:	d1df      	bne.n	8020842 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020882:	69bb      	ldr	r3, [r7, #24]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d007      	beq.n	8020898 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020888:	687a      	ldr	r2, [r7, #4]
 802088a:	f44f 7120 	mov.w	r1, #640	; 0x280
 802088e:	200e      	movs	r0, #14
 8020890:	f7fe fbbc 	bl	801f00c <pbuf_clone>
 8020894:	61f8      	str	r0, [r7, #28]
 8020896:	e004      	b.n	80208a2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 802089c:	69f8      	ldr	r0, [r7, #28]
 802089e:	f7fe f9c9 	bl	801ec34 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80208a2:	69fb      	ldr	r3, [r7, #28]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d021      	beq.n	80208ec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80208a8:	7c7a      	ldrb	r2, [r7, #17]
 80208aa:	4918      	ldr	r1, [pc, #96]	; (802090c <etharp_query+0x268>)
 80208ac:	4613      	mov	r3, r2
 80208ae:	005b      	lsls	r3, r3, #1
 80208b0:	4413      	add	r3, r2
 80208b2:	00db      	lsls	r3, r3, #3
 80208b4:	440b      	add	r3, r1
 80208b6:	681b      	ldr	r3, [r3, #0]
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	d00a      	beq.n	80208d2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80208bc:	7c7a      	ldrb	r2, [r7, #17]
 80208be:	4913      	ldr	r1, [pc, #76]	; (802090c <etharp_query+0x268>)
 80208c0:	4613      	mov	r3, r2
 80208c2:	005b      	lsls	r3, r3, #1
 80208c4:	4413      	add	r3, r2
 80208c6:	00db      	lsls	r3, r3, #3
 80208c8:	440b      	add	r3, r1
 80208ca:	681b      	ldr	r3, [r3, #0]
 80208cc:	4618      	mov	r0, r3
 80208ce:	f7fe f911 	bl	801eaf4 <pbuf_free>
      }
      arp_table[i].q = p;
 80208d2:	7c7a      	ldrb	r2, [r7, #17]
 80208d4:	490d      	ldr	r1, [pc, #52]	; (802090c <etharp_query+0x268>)
 80208d6:	4613      	mov	r3, r2
 80208d8:	005b      	lsls	r3, r3, #1
 80208da:	4413      	add	r3, r2
 80208dc:	00db      	lsls	r3, r3, #3
 80208de:	440b      	add	r3, r1
 80208e0:	69fa      	ldr	r2, [r7, #28]
 80208e2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80208e4:	2300      	movs	r3, #0
 80208e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80208ea:	e002      	b.n	80208f2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80208ec:	23ff      	movs	r3, #255	; 0xff
 80208ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80208f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80208f6:	4618      	mov	r0, r3
 80208f8:	3728      	adds	r7, #40	; 0x28
 80208fa:	46bd      	mov	sp, r7
 80208fc:	bd80      	pop	{r7, pc}
 80208fe:	bf00      	nop
 8020900:	0802833c 	.word	0x0802833c
 8020904:	08028534 	.word	0x08028534
 8020908:	08028400 	.word	0x08028400
 802090c:	20013dc8 	.word	0x20013dc8
 8020910:	08028544 	.word	0x08028544
 8020914:	08028528 	.word	0x08028528
 8020918:	20014278 	.word	0x20014278
 802091c:	0802856c 	.word	0x0802856c

08020920 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020920:	b580      	push	{r7, lr}
 8020922:	b08a      	sub	sp, #40	; 0x28
 8020924:	af02      	add	r7, sp, #8
 8020926:	60f8      	str	r0, [r7, #12]
 8020928:	60b9      	str	r1, [r7, #8]
 802092a:	607a      	str	r2, [r7, #4]
 802092c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802092e:	2300      	movs	r3, #0
 8020930:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020932:	68fb      	ldr	r3, [r7, #12]
 8020934:	2b00      	cmp	r3, #0
 8020936:	d106      	bne.n	8020946 <etharp_raw+0x26>
 8020938:	4b3a      	ldr	r3, [pc, #232]	; (8020a24 <etharp_raw+0x104>)
 802093a:	f240 4257 	movw	r2, #1111	; 0x457
 802093e:	493a      	ldr	r1, [pc, #232]	; (8020a28 <etharp_raw+0x108>)
 8020940:	483a      	ldr	r0, [pc, #232]	; (8020a2c <etharp_raw+0x10c>)
 8020942:	f001 fe0f 	bl	8022564 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020946:	f44f 7220 	mov.w	r2, #640	; 0x280
 802094a:	211c      	movs	r1, #28
 802094c:	200e      	movs	r0, #14
 802094e:	f7fd fdef 	bl	801e530 <pbuf_alloc>
 8020952:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020954:	69bb      	ldr	r3, [r7, #24]
 8020956:	2b00      	cmp	r3, #0
 8020958:	d102      	bne.n	8020960 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 802095a:	f04f 33ff 	mov.w	r3, #4294967295
 802095e:	e05d      	b.n	8020a1c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020960:	69bb      	ldr	r3, [r7, #24]
 8020962:	895b      	ldrh	r3, [r3, #10]
 8020964:	2b1b      	cmp	r3, #27
 8020966:	d806      	bhi.n	8020976 <etharp_raw+0x56>
 8020968:	4b2e      	ldr	r3, [pc, #184]	; (8020a24 <etharp_raw+0x104>)
 802096a:	f240 4262 	movw	r2, #1122	; 0x462
 802096e:	4930      	ldr	r1, [pc, #192]	; (8020a30 <etharp_raw+0x110>)
 8020970:	482e      	ldr	r0, [pc, #184]	; (8020a2c <etharp_raw+0x10c>)
 8020972:	f001 fdf7 	bl	8022564 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020976:	69bb      	ldr	r3, [r7, #24]
 8020978:	685b      	ldr	r3, [r3, #4]
 802097a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802097c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802097e:	4618      	mov	r0, r3
 8020980:	f7fc fcdc 	bl	801d33c <lwip_htons>
 8020984:	4603      	mov	r3, r0
 8020986:	461a      	mov	r2, r3
 8020988:	697b      	ldr	r3, [r7, #20]
 802098a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 802098c:	68fb      	ldr	r3, [r7, #12]
 802098e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020992:	2b06      	cmp	r3, #6
 8020994:	d006      	beq.n	80209a4 <etharp_raw+0x84>
 8020996:	4b23      	ldr	r3, [pc, #140]	; (8020a24 <etharp_raw+0x104>)
 8020998:	f240 4269 	movw	r2, #1129	; 0x469
 802099c:	4925      	ldr	r1, [pc, #148]	; (8020a34 <etharp_raw+0x114>)
 802099e:	4823      	ldr	r0, [pc, #140]	; (8020a2c <etharp_raw+0x10c>)
 80209a0:	f001 fde0 	bl	8022564 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80209a4:	697b      	ldr	r3, [r7, #20]
 80209a6:	3308      	adds	r3, #8
 80209a8:	2206      	movs	r2, #6
 80209aa:	6839      	ldr	r1, [r7, #0]
 80209ac:	4618      	mov	r0, r3
 80209ae:	f001 fcc9 	bl	8022344 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80209b2:	697b      	ldr	r3, [r7, #20]
 80209b4:	3312      	adds	r3, #18
 80209b6:	2206      	movs	r2, #6
 80209b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80209ba:	4618      	mov	r0, r3
 80209bc:	f001 fcc2 	bl	8022344 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80209c0:	697b      	ldr	r3, [r7, #20]
 80209c2:	330e      	adds	r3, #14
 80209c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80209c6:	6812      	ldr	r2, [r2, #0]
 80209c8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80209ca:	697b      	ldr	r3, [r7, #20]
 80209cc:	3318      	adds	r3, #24
 80209ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80209d0:	6812      	ldr	r2, [r2, #0]
 80209d2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80209d4:	697b      	ldr	r3, [r7, #20]
 80209d6:	2200      	movs	r2, #0
 80209d8:	701a      	strb	r2, [r3, #0]
 80209da:	2200      	movs	r2, #0
 80209dc:	f042 0201 	orr.w	r2, r2, #1
 80209e0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80209e2:	697b      	ldr	r3, [r7, #20]
 80209e4:	2200      	movs	r2, #0
 80209e6:	f042 0208 	orr.w	r2, r2, #8
 80209ea:	709a      	strb	r2, [r3, #2]
 80209ec:	2200      	movs	r2, #0
 80209ee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80209f0:	697b      	ldr	r3, [r7, #20]
 80209f2:	2206      	movs	r2, #6
 80209f4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80209f6:	697b      	ldr	r3, [r7, #20]
 80209f8:	2204      	movs	r2, #4
 80209fa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80209fc:	f640 0306 	movw	r3, #2054	; 0x806
 8020a00:	9300      	str	r3, [sp, #0]
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	68ba      	ldr	r2, [r7, #8]
 8020a06:	69b9      	ldr	r1, [r7, #24]
 8020a08:	68f8      	ldr	r0, [r7, #12]
 8020a0a:	f001 fc0f 	bl	802222c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020a0e:	69b8      	ldr	r0, [r7, #24]
 8020a10:	f7fe f870 	bl	801eaf4 <pbuf_free>
  p = NULL;
 8020a14:	2300      	movs	r3, #0
 8020a16:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020a18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020a1c:	4618      	mov	r0, r3
 8020a1e:	3720      	adds	r7, #32
 8020a20:	46bd      	mov	sp, r7
 8020a22:	bd80      	pop	{r7, pc}
 8020a24:	0802833c 	.word	0x0802833c
 8020a28:	080284d8 	.word	0x080284d8
 8020a2c:	08028400 	.word	0x08028400
 8020a30:	08028588 	.word	0x08028588
 8020a34:	080285bc 	.word	0x080285bc

08020a38 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020a38:	b580      	push	{r7, lr}
 8020a3a:	b088      	sub	sp, #32
 8020a3c:	af04      	add	r7, sp, #16
 8020a3e:	60f8      	str	r0, [r7, #12]
 8020a40:	60b9      	str	r1, [r7, #8]
 8020a42:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020a44:	68fb      	ldr	r3, [r7, #12]
 8020a46:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020a4a:	68fb      	ldr	r3, [r7, #12]
 8020a4c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8020a50:	68fb      	ldr	r3, [r7, #12]
 8020a52:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020a54:	2201      	movs	r2, #1
 8020a56:	9203      	str	r2, [sp, #12]
 8020a58:	68ba      	ldr	r2, [r7, #8]
 8020a5a:	9202      	str	r2, [sp, #8]
 8020a5c:	4a06      	ldr	r2, [pc, #24]	; (8020a78 <etharp_request_dst+0x40>)
 8020a5e:	9201      	str	r2, [sp, #4]
 8020a60:	9300      	str	r3, [sp, #0]
 8020a62:	4603      	mov	r3, r0
 8020a64:	687a      	ldr	r2, [r7, #4]
 8020a66:	68f8      	ldr	r0, [r7, #12]
 8020a68:	f7ff ff5a 	bl	8020920 <etharp_raw>
 8020a6c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8020a6e:	4618      	mov	r0, r3
 8020a70:	3710      	adds	r7, #16
 8020a72:	46bd      	mov	sp, r7
 8020a74:	bd80      	pop	{r7, pc}
 8020a76:	bf00      	nop
 8020a78:	08029044 	.word	0x08029044

08020a7c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	b082      	sub	sp, #8
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
 8020a84:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020a86:	4a05      	ldr	r2, [pc, #20]	; (8020a9c <etharp_request+0x20>)
 8020a88:	6839      	ldr	r1, [r7, #0]
 8020a8a:	6878      	ldr	r0, [r7, #4]
 8020a8c:	f7ff ffd4 	bl	8020a38 <etharp_request_dst>
 8020a90:	4603      	mov	r3, r0
}
 8020a92:	4618      	mov	r0, r3
 8020a94:	3708      	adds	r7, #8
 8020a96:	46bd      	mov	sp, r7
 8020a98:	bd80      	pop	{r7, pc}
 8020a9a:	bf00      	nop
 8020a9c:	0802903c 	.word	0x0802903c

08020aa0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020aa0:	b580      	push	{r7, lr}
 8020aa2:	b08e      	sub	sp, #56	; 0x38
 8020aa4:	af04      	add	r7, sp, #16
 8020aa6:	6078      	str	r0, [r7, #4]
 8020aa8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8020aaa:	4b79      	ldr	r3, [pc, #484]	; (8020c90 <icmp_input+0x1f0>)
 8020aac:	689b      	ldr	r3, [r3, #8]
 8020aae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ab2:	781b      	ldrb	r3, [r3, #0]
 8020ab4:	f003 030f 	and.w	r3, r3, #15
 8020ab8:	b2db      	uxtb	r3, r3
 8020aba:	009b      	lsls	r3, r3, #2
 8020abc:	b2db      	uxtb	r3, r3
 8020abe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020ac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ac2:	2b13      	cmp	r3, #19
 8020ac4:	f240 80cd 	bls.w	8020c62 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	895b      	ldrh	r3, [r3, #10]
 8020acc:	2b03      	cmp	r3, #3
 8020ace:	f240 80ca 	bls.w	8020c66 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	685b      	ldr	r3, [r3, #4]
 8020ad6:	781b      	ldrb	r3, [r3, #0]
 8020ad8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020adc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	f000 80b7 	beq.w	8020c54 <icmp_input+0x1b4>
 8020ae6:	2b08      	cmp	r3, #8
 8020ae8:	f040 80b7 	bne.w	8020c5a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020aec:	4b69      	ldr	r3, [pc, #420]	; (8020c94 <icmp_input+0x1f4>)
 8020aee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020af0:	4b67      	ldr	r3, [pc, #412]	; (8020c90 <icmp_input+0x1f0>)
 8020af2:	695b      	ldr	r3, [r3, #20]
 8020af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020af8:	2be0      	cmp	r3, #224	; 0xe0
 8020afa:	f000 80bb 	beq.w	8020c74 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020afe:	4b64      	ldr	r3, [pc, #400]	; (8020c90 <icmp_input+0x1f0>)
 8020b00:	695b      	ldr	r3, [r3, #20]
 8020b02:	4a63      	ldr	r2, [pc, #396]	; (8020c90 <icmp_input+0x1f0>)
 8020b04:	6812      	ldr	r2, [r2, #0]
 8020b06:	4611      	mov	r1, r2
 8020b08:	4618      	mov	r0, r3
 8020b0a:	f000 fbf1 	bl	80212f0 <ip4_addr_isbroadcast_u32>
 8020b0e:	4603      	mov	r3, r0
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	f040 80b1 	bne.w	8020c78 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	891b      	ldrh	r3, [r3, #8]
 8020b1a:	2b07      	cmp	r3, #7
 8020b1c:	f240 80a5 	bls.w	8020c6a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020b22:	330e      	adds	r3, #14
 8020b24:	4619      	mov	r1, r3
 8020b26:	6878      	ldr	r0, [r7, #4]
 8020b28:	f7fd ff4e 	bl	801e9c8 <pbuf_add_header>
 8020b2c:	4603      	mov	r3, r0
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d04b      	beq.n	8020bca <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020b32:	687b      	ldr	r3, [r7, #4]
 8020b34:	891a      	ldrh	r2, [r3, #8]
 8020b36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020b38:	4413      	add	r3, r2
 8020b3a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	891b      	ldrh	r3, [r3, #8]
 8020b40:	8b7a      	ldrh	r2, [r7, #26]
 8020b42:	429a      	cmp	r2, r3
 8020b44:	f0c0 809a 	bcc.w	8020c7c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8020b48:	8b7b      	ldrh	r3, [r7, #26]
 8020b4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020b4e:	4619      	mov	r1, r3
 8020b50:	200e      	movs	r0, #14
 8020b52:	f7fd fced 	bl	801e530 <pbuf_alloc>
 8020b56:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8020b58:	697b      	ldr	r3, [r7, #20]
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	f000 8090 	beq.w	8020c80 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8020b60:	697b      	ldr	r3, [r7, #20]
 8020b62:	895b      	ldrh	r3, [r3, #10]
 8020b64:	461a      	mov	r2, r3
 8020b66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020b68:	3308      	adds	r3, #8
 8020b6a:	429a      	cmp	r2, r3
 8020b6c:	d203      	bcs.n	8020b76 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8020b6e:	6978      	ldr	r0, [r7, #20]
 8020b70:	f7fd ffc0 	bl	801eaf4 <pbuf_free>
          goto icmperr;
 8020b74:	e085      	b.n	8020c82 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8020b76:	697b      	ldr	r3, [r7, #20]
 8020b78:	685b      	ldr	r3, [r3, #4]
 8020b7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020b7e:	4618      	mov	r0, r3
 8020b80:	f001 fbe0 	bl	8022344 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8020b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020b86:	4619      	mov	r1, r3
 8020b88:	6978      	ldr	r0, [r7, #20]
 8020b8a:	f7fd ff2d 	bl	801e9e8 <pbuf_remove_header>
 8020b8e:	4603      	mov	r3, r0
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	d009      	beq.n	8020ba8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8020b94:	4b40      	ldr	r3, [pc, #256]	; (8020c98 <icmp_input+0x1f8>)
 8020b96:	22b6      	movs	r2, #182	; 0xb6
 8020b98:	4940      	ldr	r1, [pc, #256]	; (8020c9c <icmp_input+0x1fc>)
 8020b9a:	4841      	ldr	r0, [pc, #260]	; (8020ca0 <icmp_input+0x200>)
 8020b9c:	f001 fce2 	bl	8022564 <iprintf>
          pbuf_free(r);
 8020ba0:	6978      	ldr	r0, [r7, #20]
 8020ba2:	f7fd ffa7 	bl	801eaf4 <pbuf_free>
          goto icmperr;
 8020ba6:	e06c      	b.n	8020c82 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020ba8:	6879      	ldr	r1, [r7, #4]
 8020baa:	6978      	ldr	r0, [r7, #20]
 8020bac:	f7fe f8ca 	bl	801ed44 <pbuf_copy>
 8020bb0:	4603      	mov	r3, r0
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	d003      	beq.n	8020bbe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8020bb6:	6978      	ldr	r0, [r7, #20]
 8020bb8:	f7fd ff9c 	bl	801eaf4 <pbuf_free>
          goto icmperr;
 8020bbc:	e061      	b.n	8020c82 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8020bbe:	6878      	ldr	r0, [r7, #4]
 8020bc0:	f7fd ff98 	bl	801eaf4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020bc4:	697b      	ldr	r3, [r7, #20]
 8020bc6:	607b      	str	r3, [r7, #4]
 8020bc8:	e00f      	b.n	8020bea <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020bcc:	330e      	adds	r3, #14
 8020bce:	4619      	mov	r1, r3
 8020bd0:	6878      	ldr	r0, [r7, #4]
 8020bd2:	f7fd ff09 	bl	801e9e8 <pbuf_remove_header>
 8020bd6:	4603      	mov	r3, r0
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d006      	beq.n	8020bea <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020bdc:	4b2e      	ldr	r3, [pc, #184]	; (8020c98 <icmp_input+0x1f8>)
 8020bde:	22c7      	movs	r2, #199	; 0xc7
 8020be0:	4930      	ldr	r1, [pc, #192]	; (8020ca4 <icmp_input+0x204>)
 8020be2:	482f      	ldr	r0, [pc, #188]	; (8020ca0 <icmp_input+0x200>)
 8020be4:	f001 fcbe 	bl	8022564 <iprintf>
          goto icmperr;
 8020be8:	e04b      	b.n	8020c82 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	685b      	ldr	r3, [r3, #4]
 8020bee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020bf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020bf2:	4619      	mov	r1, r3
 8020bf4:	6878      	ldr	r0, [r7, #4]
 8020bf6:	f7fd fee7 	bl	801e9c8 <pbuf_add_header>
 8020bfa:	4603      	mov	r3, r0
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d12b      	bne.n	8020c58 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8020c00:	687b      	ldr	r3, [r7, #4]
 8020c02:	685b      	ldr	r3, [r3, #4]
 8020c04:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8020c06:	69fb      	ldr	r3, [r7, #28]
 8020c08:	681a      	ldr	r2, [r3, #0]
 8020c0a:	68fb      	ldr	r3, [r7, #12]
 8020c0c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020c0e:	4b20      	ldr	r3, [pc, #128]	; (8020c90 <icmp_input+0x1f0>)
 8020c10:	691a      	ldr	r2, [r3, #16]
 8020c12:	68fb      	ldr	r3, [r7, #12]
 8020c14:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8020c16:	693b      	ldr	r3, [r7, #16]
 8020c18:	2200      	movs	r2, #0
 8020c1a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8020c1c:	693b      	ldr	r3, [r7, #16]
 8020c1e:	2200      	movs	r2, #0
 8020c20:	709a      	strb	r2, [r3, #2]
 8020c22:	2200      	movs	r2, #0
 8020c24:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8020c26:	68fb      	ldr	r3, [r7, #12]
 8020c28:	22ff      	movs	r2, #255	; 0xff
 8020c2a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8020c2c:	68fb      	ldr	r3, [r7, #12]
 8020c2e:	2200      	movs	r2, #0
 8020c30:	729a      	strb	r2, [r3, #10]
 8020c32:	2200      	movs	r2, #0
 8020c34:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020c36:	683b      	ldr	r3, [r7, #0]
 8020c38:	9302      	str	r3, [sp, #8]
 8020c3a:	2301      	movs	r3, #1
 8020c3c:	9301      	str	r3, [sp, #4]
 8020c3e:	2300      	movs	r3, #0
 8020c40:	9300      	str	r3, [sp, #0]
 8020c42:	23ff      	movs	r3, #255	; 0xff
 8020c44:	2200      	movs	r2, #0
 8020c46:	69f9      	ldr	r1, [r7, #28]
 8020c48:	6878      	ldr	r0, [r7, #4]
 8020c4a:	f000 fa6b 	bl	8021124 <ip4_output_if>
 8020c4e:	4603      	mov	r3, r0
 8020c50:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8020c52:	e001      	b.n	8020c58 <icmp_input+0x1b8>
      break;
 8020c54:	bf00      	nop
 8020c56:	e000      	b.n	8020c5a <icmp_input+0x1ba>
      break;
 8020c58:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8020c5a:	6878      	ldr	r0, [r7, #4]
 8020c5c:	f7fd ff4a 	bl	801eaf4 <pbuf_free>
  return;
 8020c60:	e013      	b.n	8020c8a <icmp_input+0x1ea>
    goto lenerr;
 8020c62:	bf00      	nop
 8020c64:	e002      	b.n	8020c6c <icmp_input+0x1cc>
    goto lenerr;
 8020c66:	bf00      	nop
 8020c68:	e000      	b.n	8020c6c <icmp_input+0x1cc>
        goto lenerr;
 8020c6a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8020c6c:	6878      	ldr	r0, [r7, #4]
 8020c6e:	f7fd ff41 	bl	801eaf4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020c72:	e00a      	b.n	8020c8a <icmp_input+0x1ea>
        goto icmperr;
 8020c74:	bf00      	nop
 8020c76:	e004      	b.n	8020c82 <icmp_input+0x1e2>
        goto icmperr;
 8020c78:	bf00      	nop
 8020c7a:	e002      	b.n	8020c82 <icmp_input+0x1e2>
          goto icmperr;
 8020c7c:	bf00      	nop
 8020c7e:	e000      	b.n	8020c82 <icmp_input+0x1e2>
          goto icmperr;
 8020c80:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8020c82:	6878      	ldr	r0, [r7, #4]
 8020c84:	f7fd ff36 	bl	801eaf4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020c88:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8020c8a:	3728      	adds	r7, #40	; 0x28
 8020c8c:	46bd      	mov	sp, r7
 8020c8e:	bd80      	pop	{r7, pc}
 8020c90:	20010760 	.word	0x20010760
 8020c94:	20010774 	.word	0x20010774
 8020c98:	08028600 	.word	0x08028600
 8020c9c:	08028684 	.word	0x08028684
 8020ca0:	080286bc 	.word	0x080286bc
 8020ca4:	080286e4 	.word	0x080286e4

08020ca8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8020ca8:	b580      	push	{r7, lr}
 8020caa:	b082      	sub	sp, #8
 8020cac:	af00      	add	r7, sp, #0
 8020cae:	6078      	str	r0, [r7, #4]
 8020cb0:	460b      	mov	r3, r1
 8020cb2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8020cb4:	78fb      	ldrb	r3, [r7, #3]
 8020cb6:	461a      	mov	r2, r3
 8020cb8:	2103      	movs	r1, #3
 8020cba:	6878      	ldr	r0, [r7, #4]
 8020cbc:	f000 f814 	bl	8020ce8 <icmp_send_response>
}
 8020cc0:	bf00      	nop
 8020cc2:	3708      	adds	r7, #8
 8020cc4:	46bd      	mov	sp, r7
 8020cc6:	bd80      	pop	{r7, pc}

08020cc8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8020cc8:	b580      	push	{r7, lr}
 8020cca:	b082      	sub	sp, #8
 8020ccc:	af00      	add	r7, sp, #0
 8020cce:	6078      	str	r0, [r7, #4]
 8020cd0:	460b      	mov	r3, r1
 8020cd2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8020cd4:	78fb      	ldrb	r3, [r7, #3]
 8020cd6:	461a      	mov	r2, r3
 8020cd8:	210b      	movs	r1, #11
 8020cda:	6878      	ldr	r0, [r7, #4]
 8020cdc:	f000 f804 	bl	8020ce8 <icmp_send_response>
}
 8020ce0:	bf00      	nop
 8020ce2:	3708      	adds	r7, #8
 8020ce4:	46bd      	mov	sp, r7
 8020ce6:	bd80      	pop	{r7, pc}

08020ce8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8020ce8:	b580      	push	{r7, lr}
 8020cea:	b08c      	sub	sp, #48	; 0x30
 8020cec:	af04      	add	r7, sp, #16
 8020cee:	6078      	str	r0, [r7, #4]
 8020cf0:	460b      	mov	r3, r1
 8020cf2:	70fb      	strb	r3, [r7, #3]
 8020cf4:	4613      	mov	r3, r2
 8020cf6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8020cf8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020cfc:	2124      	movs	r1, #36	; 0x24
 8020cfe:	2022      	movs	r0, #34	; 0x22
 8020d00:	f7fd fc16 	bl	801e530 <pbuf_alloc>
 8020d04:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8020d06:	69fb      	ldr	r3, [r7, #28]
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	d04c      	beq.n	8020da6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8020d0c:	69fb      	ldr	r3, [r7, #28]
 8020d0e:	895b      	ldrh	r3, [r3, #10]
 8020d10:	2b23      	cmp	r3, #35	; 0x23
 8020d12:	d806      	bhi.n	8020d22 <icmp_send_response+0x3a>
 8020d14:	4b26      	ldr	r3, [pc, #152]	; (8020db0 <icmp_send_response+0xc8>)
 8020d16:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8020d1a:	4926      	ldr	r1, [pc, #152]	; (8020db4 <icmp_send_response+0xcc>)
 8020d1c:	4826      	ldr	r0, [pc, #152]	; (8020db8 <icmp_send_response+0xd0>)
 8020d1e:	f001 fc21 	bl	8022564 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	685b      	ldr	r3, [r3, #4]
 8020d26:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8020d28:	69fb      	ldr	r3, [r7, #28]
 8020d2a:	685b      	ldr	r3, [r3, #4]
 8020d2c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8020d2e:	697b      	ldr	r3, [r7, #20]
 8020d30:	78fa      	ldrb	r2, [r7, #3]
 8020d32:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8020d34:	697b      	ldr	r3, [r7, #20]
 8020d36:	78ba      	ldrb	r2, [r7, #2]
 8020d38:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8020d3a:	697b      	ldr	r3, [r7, #20]
 8020d3c:	2200      	movs	r2, #0
 8020d3e:	711a      	strb	r2, [r3, #4]
 8020d40:	2200      	movs	r2, #0
 8020d42:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8020d44:	697b      	ldr	r3, [r7, #20]
 8020d46:	2200      	movs	r2, #0
 8020d48:	719a      	strb	r2, [r3, #6]
 8020d4a:	2200      	movs	r2, #0
 8020d4c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8020d4e:	69fb      	ldr	r3, [r7, #28]
 8020d50:	685b      	ldr	r3, [r3, #4]
 8020d52:	f103 0008 	add.w	r0, r3, #8
 8020d56:	687b      	ldr	r3, [r7, #4]
 8020d58:	685b      	ldr	r3, [r3, #4]
 8020d5a:	221c      	movs	r2, #28
 8020d5c:	4619      	mov	r1, r3
 8020d5e:	f001 faf1 	bl	8022344 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8020d62:	69bb      	ldr	r3, [r7, #24]
 8020d64:	68db      	ldr	r3, [r3, #12]
 8020d66:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8020d68:	f107 030c 	add.w	r3, r7, #12
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	f000 f825 	bl	8020dbc <ip4_route>
 8020d72:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8020d74:	693b      	ldr	r3, [r7, #16]
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d011      	beq.n	8020d9e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8020d7a:	697b      	ldr	r3, [r7, #20]
 8020d7c:	2200      	movs	r2, #0
 8020d7e:	709a      	strb	r2, [r3, #2]
 8020d80:	2200      	movs	r2, #0
 8020d82:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8020d84:	f107 020c 	add.w	r2, r7, #12
 8020d88:	693b      	ldr	r3, [r7, #16]
 8020d8a:	9302      	str	r3, [sp, #8]
 8020d8c:	2301      	movs	r3, #1
 8020d8e:	9301      	str	r3, [sp, #4]
 8020d90:	2300      	movs	r3, #0
 8020d92:	9300      	str	r3, [sp, #0]
 8020d94:	23ff      	movs	r3, #255	; 0xff
 8020d96:	2100      	movs	r1, #0
 8020d98:	69f8      	ldr	r0, [r7, #28]
 8020d9a:	f000 f9c3 	bl	8021124 <ip4_output_if>
  }
  pbuf_free(q);
 8020d9e:	69f8      	ldr	r0, [r7, #28]
 8020da0:	f7fd fea8 	bl	801eaf4 <pbuf_free>
 8020da4:	e000      	b.n	8020da8 <icmp_send_response+0xc0>
    return;
 8020da6:	bf00      	nop
}
 8020da8:	3720      	adds	r7, #32
 8020daa:	46bd      	mov	sp, r7
 8020dac:	bd80      	pop	{r7, pc}
 8020dae:	bf00      	nop
 8020db0:	08028600 	.word	0x08028600
 8020db4:	08028718 	.word	0x08028718
 8020db8:	080286bc 	.word	0x080286bc

08020dbc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8020dbc:	b480      	push	{r7}
 8020dbe:	b085      	sub	sp, #20
 8020dc0:	af00      	add	r7, sp, #0
 8020dc2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8020dc4:	4b33      	ldr	r3, [pc, #204]	; (8020e94 <ip4_route+0xd8>)
 8020dc6:	681b      	ldr	r3, [r3, #0]
 8020dc8:	60fb      	str	r3, [r7, #12]
 8020dca:	e036      	b.n	8020e3a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020dcc:	68fb      	ldr	r3, [r7, #12]
 8020dce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020dd2:	f003 0301 	and.w	r3, r3, #1
 8020dd6:	b2db      	uxtb	r3, r3
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d02b      	beq.n	8020e34 <ip4_route+0x78>
 8020ddc:	68fb      	ldr	r3, [r7, #12]
 8020dde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020de2:	089b      	lsrs	r3, r3, #2
 8020de4:	f003 0301 	and.w	r3, r3, #1
 8020de8:	b2db      	uxtb	r3, r3
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	d022      	beq.n	8020e34 <ip4_route+0x78>
 8020dee:	68fb      	ldr	r3, [r7, #12]
 8020df0:	3304      	adds	r3, #4
 8020df2:	681b      	ldr	r3, [r3, #0]
 8020df4:	2b00      	cmp	r3, #0
 8020df6:	d01d      	beq.n	8020e34 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	681a      	ldr	r2, [r3, #0]
 8020dfc:	68fb      	ldr	r3, [r7, #12]
 8020dfe:	3304      	adds	r3, #4
 8020e00:	681b      	ldr	r3, [r3, #0]
 8020e02:	405a      	eors	r2, r3
 8020e04:	68fb      	ldr	r3, [r7, #12]
 8020e06:	3308      	adds	r3, #8
 8020e08:	681b      	ldr	r3, [r3, #0]
 8020e0a:	4013      	ands	r3, r2
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d101      	bne.n	8020e14 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8020e10:	68fb      	ldr	r3, [r7, #12]
 8020e12:	e038      	b.n	8020e86 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8020e14:	68fb      	ldr	r3, [r7, #12]
 8020e16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020e1a:	f003 0302 	and.w	r3, r3, #2
 8020e1e:	2b00      	cmp	r3, #0
 8020e20:	d108      	bne.n	8020e34 <ip4_route+0x78>
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	681a      	ldr	r2, [r3, #0]
 8020e26:	68fb      	ldr	r3, [r7, #12]
 8020e28:	330c      	adds	r3, #12
 8020e2a:	681b      	ldr	r3, [r3, #0]
 8020e2c:	429a      	cmp	r2, r3
 8020e2e:	d101      	bne.n	8020e34 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8020e30:	68fb      	ldr	r3, [r7, #12]
 8020e32:	e028      	b.n	8020e86 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8020e34:	68fb      	ldr	r3, [r7, #12]
 8020e36:	681b      	ldr	r3, [r3, #0]
 8020e38:	60fb      	str	r3, [r7, #12]
 8020e3a:	68fb      	ldr	r3, [r7, #12]
 8020e3c:	2b00      	cmp	r3, #0
 8020e3e:	d1c5      	bne.n	8020dcc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020e40:	4b15      	ldr	r3, [pc, #84]	; (8020e98 <ip4_route+0xdc>)
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	d01a      	beq.n	8020e7e <ip4_route+0xc2>
 8020e48:	4b13      	ldr	r3, [pc, #76]	; (8020e98 <ip4_route+0xdc>)
 8020e4a:	681b      	ldr	r3, [r3, #0]
 8020e4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020e50:	f003 0301 	and.w	r3, r3, #1
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	d012      	beq.n	8020e7e <ip4_route+0xc2>
 8020e58:	4b0f      	ldr	r3, [pc, #60]	; (8020e98 <ip4_route+0xdc>)
 8020e5a:	681b      	ldr	r3, [r3, #0]
 8020e5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020e60:	f003 0304 	and.w	r3, r3, #4
 8020e64:	2b00      	cmp	r3, #0
 8020e66:	d00a      	beq.n	8020e7e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020e68:	4b0b      	ldr	r3, [pc, #44]	; (8020e98 <ip4_route+0xdc>)
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	3304      	adds	r3, #4
 8020e6e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020e70:	2b00      	cmp	r3, #0
 8020e72:	d004      	beq.n	8020e7e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020e74:	687b      	ldr	r3, [r7, #4]
 8020e76:	681b      	ldr	r3, [r3, #0]
 8020e78:	b2db      	uxtb	r3, r3
 8020e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8020e7c:	d101      	bne.n	8020e82 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8020e7e:	2300      	movs	r3, #0
 8020e80:	e001      	b.n	8020e86 <ip4_route+0xca>
  }

  return netif_default;
 8020e82:	4b05      	ldr	r3, [pc, #20]	; (8020e98 <ip4_route+0xdc>)
 8020e84:	681b      	ldr	r3, [r3, #0]
}
 8020e86:	4618      	mov	r0, r3
 8020e88:	3714      	adds	r7, #20
 8020e8a:	46bd      	mov	sp, r7
 8020e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e90:	4770      	bx	lr
 8020e92:	bf00      	nop
 8020e94:	20013d70 	.word	0x20013d70
 8020e98:	20013d74 	.word	0x20013d74

08020e9c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8020e9c:	b580      	push	{r7, lr}
 8020e9e:	b082      	sub	sp, #8
 8020ea0:	af00      	add	r7, sp, #0
 8020ea2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020eaa:	f003 0301 	and.w	r3, r3, #1
 8020eae:	b2db      	uxtb	r3, r3
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d016      	beq.n	8020ee2 <ip4_input_accept+0x46>
 8020eb4:	687b      	ldr	r3, [r7, #4]
 8020eb6:	3304      	adds	r3, #4
 8020eb8:	681b      	ldr	r3, [r3, #0]
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d011      	beq.n	8020ee2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8020ebe:	4b0b      	ldr	r3, [pc, #44]	; (8020eec <ip4_input_accept+0x50>)
 8020ec0:	695a      	ldr	r2, [r3, #20]
 8020ec2:	687b      	ldr	r3, [r7, #4]
 8020ec4:	3304      	adds	r3, #4
 8020ec6:	681b      	ldr	r3, [r3, #0]
 8020ec8:	429a      	cmp	r2, r3
 8020eca:	d008      	beq.n	8020ede <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8020ecc:	4b07      	ldr	r3, [pc, #28]	; (8020eec <ip4_input_accept+0x50>)
 8020ece:	695b      	ldr	r3, [r3, #20]
 8020ed0:	6879      	ldr	r1, [r7, #4]
 8020ed2:	4618      	mov	r0, r3
 8020ed4:	f000 fa0c 	bl	80212f0 <ip4_addr_isbroadcast_u32>
 8020ed8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	d001      	beq.n	8020ee2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8020ede:	2301      	movs	r3, #1
 8020ee0:	e000      	b.n	8020ee4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8020ee2:	2300      	movs	r3, #0
}
 8020ee4:	4618      	mov	r0, r3
 8020ee6:	3708      	adds	r7, #8
 8020ee8:	46bd      	mov	sp, r7
 8020eea:	bd80      	pop	{r7, pc}
 8020eec:	20010760 	.word	0x20010760

08020ef0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8020ef0:	b580      	push	{r7, lr}
 8020ef2:	b086      	sub	sp, #24
 8020ef4:	af00      	add	r7, sp, #0
 8020ef6:	6078      	str	r0, [r7, #4]
 8020ef8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	685b      	ldr	r3, [r3, #4]
 8020efe:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8020f00:	697b      	ldr	r3, [r7, #20]
 8020f02:	781b      	ldrb	r3, [r3, #0]
 8020f04:	091b      	lsrs	r3, r3, #4
 8020f06:	b2db      	uxtb	r3, r3
 8020f08:	2b04      	cmp	r3, #4
 8020f0a:	d004      	beq.n	8020f16 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8020f0c:	6878      	ldr	r0, [r7, #4]
 8020f0e:	f7fd fdf1 	bl	801eaf4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8020f12:	2300      	movs	r3, #0
 8020f14:	e0fd      	b.n	8021112 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8020f16:	697b      	ldr	r3, [r7, #20]
 8020f18:	781b      	ldrb	r3, [r3, #0]
 8020f1a:	f003 030f 	and.w	r3, r3, #15
 8020f1e:	b2db      	uxtb	r3, r3
 8020f20:	009b      	lsls	r3, r3, #2
 8020f22:	b2db      	uxtb	r3, r3
 8020f24:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8020f26:	697b      	ldr	r3, [r7, #20]
 8020f28:	885b      	ldrh	r3, [r3, #2]
 8020f2a:	b29b      	uxth	r3, r3
 8020f2c:	4618      	mov	r0, r3
 8020f2e:	f7fc fa05 	bl	801d33c <lwip_htons>
 8020f32:	4603      	mov	r3, r0
 8020f34:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	891b      	ldrh	r3, [r3, #8]
 8020f3a:	89ba      	ldrh	r2, [r7, #12]
 8020f3c:	429a      	cmp	r2, r3
 8020f3e:	d204      	bcs.n	8020f4a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8020f40:	89bb      	ldrh	r3, [r7, #12]
 8020f42:	4619      	mov	r1, r3
 8020f44:	6878      	ldr	r0, [r7, #4]
 8020f46:	f7fd fc4f 	bl	801e7e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	895b      	ldrh	r3, [r3, #10]
 8020f4e:	89fa      	ldrh	r2, [r7, #14]
 8020f50:	429a      	cmp	r2, r3
 8020f52:	d807      	bhi.n	8020f64 <ip4_input+0x74>
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	891b      	ldrh	r3, [r3, #8]
 8020f58:	89ba      	ldrh	r2, [r7, #12]
 8020f5a:	429a      	cmp	r2, r3
 8020f5c:	d802      	bhi.n	8020f64 <ip4_input+0x74>
 8020f5e:	89fb      	ldrh	r3, [r7, #14]
 8020f60:	2b13      	cmp	r3, #19
 8020f62:	d804      	bhi.n	8020f6e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8020f64:	6878      	ldr	r0, [r7, #4]
 8020f66:	f7fd fdc5 	bl	801eaf4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8020f6a:	2300      	movs	r3, #0
 8020f6c:	e0d1      	b.n	8021112 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8020f6e:	697b      	ldr	r3, [r7, #20]
 8020f70:	691b      	ldr	r3, [r3, #16]
 8020f72:	4a6a      	ldr	r2, [pc, #424]	; (802111c <ip4_input+0x22c>)
 8020f74:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8020f76:	697b      	ldr	r3, [r7, #20]
 8020f78:	68db      	ldr	r3, [r3, #12]
 8020f7a:	4a68      	ldr	r2, [pc, #416]	; (802111c <ip4_input+0x22c>)
 8020f7c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020f7e:	4b67      	ldr	r3, [pc, #412]	; (802111c <ip4_input+0x22c>)
 8020f80:	695b      	ldr	r3, [r3, #20]
 8020f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020f86:	2be0      	cmp	r3, #224	; 0xe0
 8020f88:	d112      	bne.n	8020fb0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020f90:	f003 0301 	and.w	r3, r3, #1
 8020f94:	b2db      	uxtb	r3, r3
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d007      	beq.n	8020faa <ip4_input+0xba>
 8020f9a:	683b      	ldr	r3, [r7, #0]
 8020f9c:	3304      	adds	r3, #4
 8020f9e:	681b      	ldr	r3, [r3, #0]
 8020fa0:	2b00      	cmp	r3, #0
 8020fa2:	d002      	beq.n	8020faa <ip4_input+0xba>
      netif = inp;
 8020fa4:	683b      	ldr	r3, [r7, #0]
 8020fa6:	613b      	str	r3, [r7, #16]
 8020fa8:	e02a      	b.n	8021000 <ip4_input+0x110>
    } else {
      netif = NULL;
 8020faa:	2300      	movs	r3, #0
 8020fac:	613b      	str	r3, [r7, #16]
 8020fae:	e027      	b.n	8021000 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8020fb0:	6838      	ldr	r0, [r7, #0]
 8020fb2:	f7ff ff73 	bl	8020e9c <ip4_input_accept>
 8020fb6:	4603      	mov	r3, r0
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	d002      	beq.n	8020fc2 <ip4_input+0xd2>
      netif = inp;
 8020fbc:	683b      	ldr	r3, [r7, #0]
 8020fbe:	613b      	str	r3, [r7, #16]
 8020fc0:	e01e      	b.n	8021000 <ip4_input+0x110>
    } else {
      netif = NULL;
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8020fc6:	4b55      	ldr	r3, [pc, #340]	; (802111c <ip4_input+0x22c>)
 8020fc8:	695b      	ldr	r3, [r3, #20]
 8020fca:	b2db      	uxtb	r3, r3
 8020fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8020fce:	d017      	beq.n	8021000 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8020fd0:	4b53      	ldr	r3, [pc, #332]	; (8021120 <ip4_input+0x230>)
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	613b      	str	r3, [r7, #16]
 8020fd6:	e00e      	b.n	8020ff6 <ip4_input+0x106>
          if (netif == inp) {
 8020fd8:	693a      	ldr	r2, [r7, #16]
 8020fda:	683b      	ldr	r3, [r7, #0]
 8020fdc:	429a      	cmp	r2, r3
 8020fde:	d006      	beq.n	8020fee <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8020fe0:	6938      	ldr	r0, [r7, #16]
 8020fe2:	f7ff ff5b 	bl	8020e9c <ip4_input_accept>
 8020fe6:	4603      	mov	r3, r0
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	d108      	bne.n	8020ffe <ip4_input+0x10e>
 8020fec:	e000      	b.n	8020ff0 <ip4_input+0x100>
            continue;
 8020fee:	bf00      	nop
        NETIF_FOREACH(netif) {
 8020ff0:	693b      	ldr	r3, [r7, #16]
 8020ff2:	681b      	ldr	r3, [r3, #0]
 8020ff4:	613b      	str	r3, [r7, #16]
 8020ff6:	693b      	ldr	r3, [r7, #16]
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	d1ed      	bne.n	8020fd8 <ip4_input+0xe8>
 8020ffc:	e000      	b.n	8021000 <ip4_input+0x110>
            break;
 8020ffe:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021000:	4b46      	ldr	r3, [pc, #280]	; (802111c <ip4_input+0x22c>)
 8021002:	691b      	ldr	r3, [r3, #16]
 8021004:	6839      	ldr	r1, [r7, #0]
 8021006:	4618      	mov	r0, r3
 8021008:	f000 f972 	bl	80212f0 <ip4_addr_isbroadcast_u32>
 802100c:	4603      	mov	r3, r0
 802100e:	2b00      	cmp	r3, #0
 8021010:	d105      	bne.n	802101e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8021012:	4b42      	ldr	r3, [pc, #264]	; (802111c <ip4_input+0x22c>)
 8021014:	691b      	ldr	r3, [r3, #16]
 8021016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802101a:	2be0      	cmp	r3, #224	; 0xe0
 802101c:	d104      	bne.n	8021028 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 802101e:	6878      	ldr	r0, [r7, #4]
 8021020:	f7fd fd68 	bl	801eaf4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8021024:	2300      	movs	r3, #0
 8021026:	e074      	b.n	8021112 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8021028:	693b      	ldr	r3, [r7, #16]
 802102a:	2b00      	cmp	r3, #0
 802102c:	d104      	bne.n	8021038 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 802102e:	6878      	ldr	r0, [r7, #4]
 8021030:	f7fd fd60 	bl	801eaf4 <pbuf_free>
    return ERR_OK;
 8021034:	2300      	movs	r3, #0
 8021036:	e06c      	b.n	8021112 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8021038:	697b      	ldr	r3, [r7, #20]
 802103a:	88db      	ldrh	r3, [r3, #6]
 802103c:	b29b      	uxth	r3, r3
 802103e:	461a      	mov	r2, r3
 8021040:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8021044:	4013      	ands	r3, r2
 8021046:	2b00      	cmp	r3, #0
 8021048:	d00b      	beq.n	8021062 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 802104a:	6878      	ldr	r0, [r7, #4]
 802104c:	f000 fd26 	bl	8021a9c <ip4_reass>
 8021050:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8021052:	687b      	ldr	r3, [r7, #4]
 8021054:	2b00      	cmp	r3, #0
 8021056:	d101      	bne.n	802105c <ip4_input+0x16c>
      return ERR_OK;
 8021058:	2300      	movs	r3, #0
 802105a:	e05a      	b.n	8021112 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	685b      	ldr	r3, [r3, #4]
 8021060:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8021062:	4a2e      	ldr	r2, [pc, #184]	; (802111c <ip4_input+0x22c>)
 8021064:	693b      	ldr	r3, [r7, #16]
 8021066:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8021068:	4a2c      	ldr	r2, [pc, #176]	; (802111c <ip4_input+0x22c>)
 802106a:	683b      	ldr	r3, [r7, #0]
 802106c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 802106e:	4a2b      	ldr	r2, [pc, #172]	; (802111c <ip4_input+0x22c>)
 8021070:	697b      	ldr	r3, [r7, #20]
 8021072:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8021074:	697b      	ldr	r3, [r7, #20]
 8021076:	781b      	ldrb	r3, [r3, #0]
 8021078:	f003 030f 	and.w	r3, r3, #15
 802107c:	b2db      	uxtb	r3, r3
 802107e:	009b      	lsls	r3, r3, #2
 8021080:	b2db      	uxtb	r3, r3
 8021082:	b29a      	uxth	r2, r3
 8021084:	4b25      	ldr	r3, [pc, #148]	; (802111c <ip4_input+0x22c>)
 8021086:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8021088:	89fb      	ldrh	r3, [r7, #14]
 802108a:	4619      	mov	r1, r3
 802108c:	6878      	ldr	r0, [r7, #4]
 802108e:	f7fd fcab 	bl	801e9e8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8021092:	697b      	ldr	r3, [r7, #20]
 8021094:	7a5b      	ldrb	r3, [r3, #9]
 8021096:	2b01      	cmp	r3, #1
 8021098:	d006      	beq.n	80210a8 <ip4_input+0x1b8>
 802109a:	2b11      	cmp	r3, #17
 802109c:	d109      	bne.n	80210b2 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 802109e:	6839      	ldr	r1, [r7, #0]
 80210a0:	6878      	ldr	r0, [r7, #4]
 80210a2:	f7fe f9b5 	bl	801f410 <udp_input>
        break;
 80210a6:	e021      	b.n	80210ec <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80210a8:	6839      	ldr	r1, [r7, #0]
 80210aa:	6878      	ldr	r0, [r7, #4]
 80210ac:	f7ff fcf8 	bl	8020aa0 <icmp_input>
        break;
 80210b0:	e01c      	b.n	80210ec <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80210b2:	4b1a      	ldr	r3, [pc, #104]	; (802111c <ip4_input+0x22c>)
 80210b4:	695b      	ldr	r3, [r3, #20]
 80210b6:	6939      	ldr	r1, [r7, #16]
 80210b8:	4618      	mov	r0, r3
 80210ba:	f000 f919 	bl	80212f0 <ip4_addr_isbroadcast_u32>
 80210be:	4603      	mov	r3, r0
 80210c0:	2b00      	cmp	r3, #0
 80210c2:	d10f      	bne.n	80210e4 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80210c4:	4b15      	ldr	r3, [pc, #84]	; (802111c <ip4_input+0x22c>)
 80210c6:	695b      	ldr	r3, [r3, #20]
 80210c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80210cc:	2be0      	cmp	r3, #224	; 0xe0
 80210ce:	d009      	beq.n	80210e4 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80210d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80210d4:	4619      	mov	r1, r3
 80210d6:	6878      	ldr	r0, [r7, #4]
 80210d8:	f7fd fcf9 	bl	801eace <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80210dc:	2102      	movs	r1, #2
 80210de:	6878      	ldr	r0, [r7, #4]
 80210e0:	f7ff fde2 	bl	8020ca8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80210e4:	6878      	ldr	r0, [r7, #4]
 80210e6:	f7fd fd05 	bl	801eaf4 <pbuf_free>
        break;
 80210ea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80210ec:	4b0b      	ldr	r3, [pc, #44]	; (802111c <ip4_input+0x22c>)
 80210ee:	2200      	movs	r2, #0
 80210f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80210f2:	4b0a      	ldr	r3, [pc, #40]	; (802111c <ip4_input+0x22c>)
 80210f4:	2200      	movs	r2, #0
 80210f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80210f8:	4b08      	ldr	r3, [pc, #32]	; (802111c <ip4_input+0x22c>)
 80210fa:	2200      	movs	r2, #0
 80210fc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80210fe:	4b07      	ldr	r3, [pc, #28]	; (802111c <ip4_input+0x22c>)
 8021100:	2200      	movs	r2, #0
 8021102:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8021104:	4b05      	ldr	r3, [pc, #20]	; (802111c <ip4_input+0x22c>)
 8021106:	2200      	movs	r2, #0
 8021108:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 802110a:	4b04      	ldr	r3, [pc, #16]	; (802111c <ip4_input+0x22c>)
 802110c:	2200      	movs	r2, #0
 802110e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8021110:	2300      	movs	r3, #0
}
 8021112:	4618      	mov	r0, r3
 8021114:	3718      	adds	r7, #24
 8021116:	46bd      	mov	sp, r7
 8021118:	bd80      	pop	{r7, pc}
 802111a:	bf00      	nop
 802111c:	20010760 	.word	0x20010760
 8021120:	20013d70 	.word	0x20013d70

08021124 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8021124:	b580      	push	{r7, lr}
 8021126:	b08a      	sub	sp, #40	; 0x28
 8021128:	af04      	add	r7, sp, #16
 802112a:	60f8      	str	r0, [r7, #12]
 802112c:	60b9      	str	r1, [r7, #8]
 802112e:	607a      	str	r2, [r7, #4]
 8021130:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8021132:	68bb      	ldr	r3, [r7, #8]
 8021134:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	2b00      	cmp	r3, #0
 802113a:	d009      	beq.n	8021150 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 802113c:	68bb      	ldr	r3, [r7, #8]
 802113e:	2b00      	cmp	r3, #0
 8021140:	d003      	beq.n	802114a <ip4_output_if+0x26>
 8021142:	68bb      	ldr	r3, [r7, #8]
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	2b00      	cmp	r3, #0
 8021148:	d102      	bne.n	8021150 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802114c:	3304      	adds	r3, #4
 802114e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8021150:	78fa      	ldrb	r2, [r7, #3]
 8021152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021154:	9302      	str	r3, [sp, #8]
 8021156:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802115a:	9301      	str	r3, [sp, #4]
 802115c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8021160:	9300      	str	r3, [sp, #0]
 8021162:	4613      	mov	r3, r2
 8021164:	687a      	ldr	r2, [r7, #4]
 8021166:	6979      	ldr	r1, [r7, #20]
 8021168:	68f8      	ldr	r0, [r7, #12]
 802116a:	f000 f805 	bl	8021178 <ip4_output_if_src>
 802116e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8021170:	4618      	mov	r0, r3
 8021172:	3718      	adds	r7, #24
 8021174:	46bd      	mov	sp, r7
 8021176:	bd80      	pop	{r7, pc}

08021178 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8021178:	b580      	push	{r7, lr}
 802117a:	b088      	sub	sp, #32
 802117c:	af00      	add	r7, sp, #0
 802117e:	60f8      	str	r0, [r7, #12]
 8021180:	60b9      	str	r1, [r7, #8]
 8021182:	607a      	str	r2, [r7, #4]
 8021184:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8021186:	68fb      	ldr	r3, [r7, #12]
 8021188:	7b9b      	ldrb	r3, [r3, #14]
 802118a:	2b01      	cmp	r3, #1
 802118c:	d006      	beq.n	802119c <ip4_output_if_src+0x24>
 802118e:	4b52      	ldr	r3, [pc, #328]	; (80212d8 <ip4_output_if_src+0x160>)
 8021190:	f44f 7255 	mov.w	r2, #852	; 0x354
 8021194:	4951      	ldr	r1, [pc, #324]	; (80212dc <ip4_output_if_src+0x164>)
 8021196:	4852      	ldr	r0, [pc, #328]	; (80212e0 <ip4_output_if_src+0x168>)
 8021198:	f001 f9e4 	bl	8022564 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d060      	beq.n	8021264 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80211a2:	2314      	movs	r3, #20
 80211a4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80211a6:	2114      	movs	r1, #20
 80211a8:	68f8      	ldr	r0, [r7, #12]
 80211aa:	f7fd fc0d 	bl	801e9c8 <pbuf_add_header>
 80211ae:	4603      	mov	r3, r0
 80211b0:	2b00      	cmp	r3, #0
 80211b2:	d002      	beq.n	80211ba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80211b4:	f06f 0301 	mvn.w	r3, #1
 80211b8:	e089      	b.n	80212ce <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80211ba:	68fb      	ldr	r3, [r7, #12]
 80211bc:	685b      	ldr	r3, [r3, #4]
 80211be:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80211c0:	68fb      	ldr	r3, [r7, #12]
 80211c2:	895b      	ldrh	r3, [r3, #10]
 80211c4:	2b13      	cmp	r3, #19
 80211c6:	d806      	bhi.n	80211d6 <ip4_output_if_src+0x5e>
 80211c8:	4b43      	ldr	r3, [pc, #268]	; (80212d8 <ip4_output_if_src+0x160>)
 80211ca:	f44f 7262 	mov.w	r2, #904	; 0x388
 80211ce:	4945      	ldr	r1, [pc, #276]	; (80212e4 <ip4_output_if_src+0x16c>)
 80211d0:	4843      	ldr	r0, [pc, #268]	; (80212e0 <ip4_output_if_src+0x168>)
 80211d2:	f001 f9c7 	bl	8022564 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80211d6:	69fb      	ldr	r3, [r7, #28]
 80211d8:	78fa      	ldrb	r2, [r7, #3]
 80211da:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80211dc:	69fb      	ldr	r3, [r7, #28]
 80211de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80211e2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	681a      	ldr	r2, [r3, #0]
 80211e8:	69fb      	ldr	r3, [r7, #28]
 80211ea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80211ec:	8b7b      	ldrh	r3, [r7, #26]
 80211ee:	089b      	lsrs	r3, r3, #2
 80211f0:	b29b      	uxth	r3, r3
 80211f2:	b2db      	uxtb	r3, r3
 80211f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80211f8:	b2da      	uxtb	r2, r3
 80211fa:	69fb      	ldr	r3, [r7, #28]
 80211fc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80211fe:	69fb      	ldr	r3, [r7, #28]
 8021200:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021204:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021206:	68fb      	ldr	r3, [r7, #12]
 8021208:	891b      	ldrh	r3, [r3, #8]
 802120a:	4618      	mov	r0, r3
 802120c:	f7fc f896 	bl	801d33c <lwip_htons>
 8021210:	4603      	mov	r3, r0
 8021212:	461a      	mov	r2, r3
 8021214:	69fb      	ldr	r3, [r7, #28]
 8021216:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8021218:	69fb      	ldr	r3, [r7, #28]
 802121a:	2200      	movs	r2, #0
 802121c:	719a      	strb	r2, [r3, #6]
 802121e:	2200      	movs	r2, #0
 8021220:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021222:	4b31      	ldr	r3, [pc, #196]	; (80212e8 <ip4_output_if_src+0x170>)
 8021224:	881b      	ldrh	r3, [r3, #0]
 8021226:	4618      	mov	r0, r3
 8021228:	f7fc f888 	bl	801d33c <lwip_htons>
 802122c:	4603      	mov	r3, r0
 802122e:	461a      	mov	r2, r3
 8021230:	69fb      	ldr	r3, [r7, #28]
 8021232:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021234:	4b2c      	ldr	r3, [pc, #176]	; (80212e8 <ip4_output_if_src+0x170>)
 8021236:	881b      	ldrh	r3, [r3, #0]
 8021238:	3301      	adds	r3, #1
 802123a:	b29a      	uxth	r2, r3
 802123c:	4b2a      	ldr	r3, [pc, #168]	; (80212e8 <ip4_output_if_src+0x170>)
 802123e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8021240:	68bb      	ldr	r3, [r7, #8]
 8021242:	2b00      	cmp	r3, #0
 8021244:	d104      	bne.n	8021250 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021246:	4b29      	ldr	r3, [pc, #164]	; (80212ec <ip4_output_if_src+0x174>)
 8021248:	681a      	ldr	r2, [r3, #0]
 802124a:	69fb      	ldr	r3, [r7, #28]
 802124c:	60da      	str	r2, [r3, #12]
 802124e:	e003      	b.n	8021258 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8021250:	68bb      	ldr	r3, [r7, #8]
 8021252:	681a      	ldr	r2, [r3, #0]
 8021254:	69fb      	ldr	r3, [r7, #28]
 8021256:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8021258:	69fb      	ldr	r3, [r7, #28]
 802125a:	2200      	movs	r2, #0
 802125c:	729a      	strb	r2, [r3, #10]
 802125e:	2200      	movs	r2, #0
 8021260:	72da      	strb	r2, [r3, #11]
 8021262:	e00f      	b.n	8021284 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8021264:	68fb      	ldr	r3, [r7, #12]
 8021266:	895b      	ldrh	r3, [r3, #10]
 8021268:	2b13      	cmp	r3, #19
 802126a:	d802      	bhi.n	8021272 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802126c:	f06f 0301 	mvn.w	r3, #1
 8021270:	e02d      	b.n	80212ce <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8021272:	68fb      	ldr	r3, [r7, #12]
 8021274:	685b      	ldr	r3, [r3, #4]
 8021276:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021278:	69fb      	ldr	r3, [r7, #28]
 802127a:	691b      	ldr	r3, [r3, #16]
 802127c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802127e:	f107 0314 	add.w	r3, r7, #20
 8021282:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	681a      	ldr	r2, [r3, #0]
 8021288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802128a:	3304      	adds	r3, #4
 802128c:	681b      	ldr	r3, [r3, #0]
 802128e:	429a      	cmp	r2, r3
 8021290:	d105      	bne.n	802129e <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 8021292:	68f9      	ldr	r1, [r7, #12]
 8021294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021296:	f7fd f86f 	bl	801e378 <netif_loop_output>
 802129a:	4603      	mov	r3, r0
 802129c:	e017      	b.n	80212ce <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 802129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80212a2:	2b00      	cmp	r3, #0
 80212a4:	d00c      	beq.n	80212c0 <ip4_output_if_src+0x148>
 80212a6:	68fb      	ldr	r3, [r7, #12]
 80212a8:	891a      	ldrh	r2, [r3, #8]
 80212aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80212ae:	429a      	cmp	r2, r3
 80212b0:	d906      	bls.n	80212c0 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 80212b2:	687a      	ldr	r2, [r7, #4]
 80212b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80212b6:	68f8      	ldr	r0, [r7, #12]
 80212b8:	f000 fde4 	bl	8021e84 <ip4_frag>
 80212bc:	4603      	mov	r3, r0
 80212be:	e006      	b.n	80212ce <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80212c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212c2:	695b      	ldr	r3, [r3, #20]
 80212c4:	687a      	ldr	r2, [r7, #4]
 80212c6:	68f9      	ldr	r1, [r7, #12]
 80212c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212ca:	4798      	blx	r3
 80212cc:	4603      	mov	r3, r0
}
 80212ce:	4618      	mov	r0, r3
 80212d0:	3720      	adds	r7, #32
 80212d2:	46bd      	mov	sp, r7
 80212d4:	bd80      	pop	{r7, pc}
 80212d6:	bf00      	nop
 80212d8:	08028744 	.word	0x08028744
 80212dc:	080287c8 	.word	0x080287c8
 80212e0:	080287d4 	.word	0x080287d4
 80212e4:	080287fc 	.word	0x080287fc
 80212e8:	2001427a 	.word	0x2001427a
 80212ec:	08029038 	.word	0x08029038

080212f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80212f0:	b480      	push	{r7}
 80212f2:	b085      	sub	sp, #20
 80212f4:	af00      	add	r7, sp, #0
 80212f6:	6078      	str	r0, [r7, #4]
 80212f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80212fa:	687b      	ldr	r3, [r7, #4]
 80212fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80212fe:	687b      	ldr	r3, [r7, #4]
 8021300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021304:	d002      	beq.n	802130c <ip4_addr_isbroadcast_u32+0x1c>
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	2b00      	cmp	r3, #0
 802130a:	d101      	bne.n	8021310 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 802130c:	2301      	movs	r3, #1
 802130e:	e02a      	b.n	8021366 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021310:	683b      	ldr	r3, [r7, #0]
 8021312:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021316:	f003 0302 	and.w	r3, r3, #2
 802131a:	2b00      	cmp	r3, #0
 802131c:	d101      	bne.n	8021322 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802131e:	2300      	movs	r3, #0
 8021320:	e021      	b.n	8021366 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8021322:	683b      	ldr	r3, [r7, #0]
 8021324:	3304      	adds	r3, #4
 8021326:	681b      	ldr	r3, [r3, #0]
 8021328:	687a      	ldr	r2, [r7, #4]
 802132a:	429a      	cmp	r2, r3
 802132c:	d101      	bne.n	8021332 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802132e:	2300      	movs	r3, #0
 8021330:	e019      	b.n	8021366 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021332:	68fa      	ldr	r2, [r7, #12]
 8021334:	683b      	ldr	r3, [r7, #0]
 8021336:	3304      	adds	r3, #4
 8021338:	681b      	ldr	r3, [r3, #0]
 802133a:	405a      	eors	r2, r3
 802133c:	683b      	ldr	r3, [r7, #0]
 802133e:	3308      	adds	r3, #8
 8021340:	681b      	ldr	r3, [r3, #0]
 8021342:	4013      	ands	r3, r2
 8021344:	2b00      	cmp	r3, #0
 8021346:	d10d      	bne.n	8021364 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021348:	683b      	ldr	r3, [r7, #0]
 802134a:	3308      	adds	r3, #8
 802134c:	681b      	ldr	r3, [r3, #0]
 802134e:	43da      	mvns	r2, r3
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021354:	683b      	ldr	r3, [r7, #0]
 8021356:	3308      	adds	r3, #8
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802135c:	429a      	cmp	r2, r3
 802135e:	d101      	bne.n	8021364 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8021360:	2301      	movs	r3, #1
 8021362:	e000      	b.n	8021366 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8021364:	2300      	movs	r3, #0
  }
}
 8021366:	4618      	mov	r0, r3
 8021368:	3714      	adds	r7, #20
 802136a:	46bd      	mov	sp, r7
 802136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021370:	4770      	bx	lr
	...

08021374 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8021374:	b580      	push	{r7, lr}
 8021376:	b082      	sub	sp, #8
 8021378:	af00      	add	r7, sp, #0
 802137a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 802137c:	2210      	movs	r2, #16
 802137e:	4904      	ldr	r1, [pc, #16]	; (8021390 <ip4addr_ntoa+0x1c>)
 8021380:	6878      	ldr	r0, [r7, #4]
 8021382:	f000 f807 	bl	8021394 <ip4addr_ntoa_r>
 8021386:	4603      	mov	r3, r0
}
 8021388:	4618      	mov	r0, r3
 802138a:	3708      	adds	r7, #8
 802138c:	46bd      	mov	sp, r7
 802138e:	bd80      	pop	{r7, pc}
 8021390:	2001427c 	.word	0x2001427c

08021394 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8021394:	b480      	push	{r7}
 8021396:	b08d      	sub	sp, #52	; 0x34
 8021398:	af00      	add	r7, sp, #0
 802139a:	60f8      	str	r0, [r7, #12]
 802139c:	60b9      	str	r1, [r7, #8]
 802139e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80213a0:	2300      	movs	r3, #0
 80213a2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80213a4:	68fb      	ldr	r3, [r7, #12]
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80213aa:	68bb      	ldr	r3, [r7, #8]
 80213ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80213ae:	f107 0318 	add.w	r3, r7, #24
 80213b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80213b4:	2300      	movs	r3, #0
 80213b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80213ba:	e058      	b.n	802146e <ip4addr_ntoa_r+0xda>
    i = 0;
 80213bc:	2300      	movs	r3, #0
 80213be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80213c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213c4:	781a      	ldrb	r2, [r3, #0]
 80213c6:	4b32      	ldr	r3, [pc, #200]	; (8021490 <ip4addr_ntoa_r+0xfc>)
 80213c8:	fba3 1302 	umull	r1, r3, r3, r2
 80213cc:	08d9      	lsrs	r1, r3, #3
 80213ce:	460b      	mov	r3, r1
 80213d0:	009b      	lsls	r3, r3, #2
 80213d2:	440b      	add	r3, r1
 80213d4:	005b      	lsls	r3, r3, #1
 80213d6:	1ad3      	subs	r3, r2, r3
 80213d8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80213da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213dc:	781b      	ldrb	r3, [r3, #0]
 80213de:	4a2c      	ldr	r2, [pc, #176]	; (8021490 <ip4addr_ntoa_r+0xfc>)
 80213e0:	fba2 2303 	umull	r2, r3, r2, r3
 80213e4:	08db      	lsrs	r3, r3, #3
 80213e6:	b2da      	uxtb	r2, r3
 80213e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213ea:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80213ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80213f0:	1c5a      	adds	r2, r3, #1
 80213f2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80213f6:	4619      	mov	r1, r3
 80213f8:	7ffb      	ldrb	r3, [r7, #31]
 80213fa:	3330      	adds	r3, #48	; 0x30
 80213fc:	b2da      	uxtb	r2, r3
 80213fe:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8021402:	443b      	add	r3, r7
 8021404:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8021408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802140a:	781b      	ldrb	r3, [r3, #0]
 802140c:	2b00      	cmp	r3, #0
 802140e:	d1d8      	bne.n	80213c2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8021410:	e011      	b.n	8021436 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8021412:	6a3b      	ldr	r3, [r7, #32]
 8021414:	1c5a      	adds	r2, r3, #1
 8021416:	623a      	str	r2, [r7, #32]
 8021418:	687a      	ldr	r2, [r7, #4]
 802141a:	429a      	cmp	r2, r3
 802141c:	dc01      	bgt.n	8021422 <ip4addr_ntoa_r+0x8e>
        return NULL;
 802141e:	2300      	movs	r3, #0
 8021420:	e030      	b.n	8021484 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8021422:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021428:	1c59      	adds	r1, r3, #1
 802142a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802142c:	3230      	adds	r2, #48	; 0x30
 802142e:	443a      	add	r2, r7
 8021430:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8021434:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8021436:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802143a:	1e5a      	subs	r2, r3, #1
 802143c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8021440:	2b00      	cmp	r3, #0
 8021442:	d1e6      	bne.n	8021412 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8021444:	6a3b      	ldr	r3, [r7, #32]
 8021446:	1c5a      	adds	r2, r3, #1
 8021448:	623a      	str	r2, [r7, #32]
 802144a:	687a      	ldr	r2, [r7, #4]
 802144c:	429a      	cmp	r2, r3
 802144e:	dc01      	bgt.n	8021454 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8021450:	2300      	movs	r3, #0
 8021452:	e017      	b.n	8021484 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8021454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021456:	1c5a      	adds	r2, r3, #1
 8021458:	62fa      	str	r2, [r7, #44]	; 0x2c
 802145a:	222e      	movs	r2, #46	; 0x2e
 802145c:	701a      	strb	r2, [r3, #0]
    ap++;
 802145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021460:	3301      	adds	r3, #1
 8021462:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8021464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021468:	3301      	adds	r3, #1
 802146a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802146e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021472:	2b03      	cmp	r3, #3
 8021474:	d9a2      	bls.n	80213bc <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8021476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021478:	3b01      	subs	r3, #1
 802147a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802147c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802147e:	2200      	movs	r2, #0
 8021480:	701a      	strb	r2, [r3, #0]
  return buf;
 8021482:	68bb      	ldr	r3, [r7, #8]
}
 8021484:	4618      	mov	r0, r3
 8021486:	3734      	adds	r7, #52	; 0x34
 8021488:	46bd      	mov	sp, r7
 802148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802148e:	4770      	bx	lr
 8021490:	cccccccd 	.word	0xcccccccd

08021494 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8021494:	b580      	push	{r7, lr}
 8021496:	b084      	sub	sp, #16
 8021498:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 802149a:	2300      	movs	r3, #0
 802149c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802149e:	4b12      	ldr	r3, [pc, #72]	; (80214e8 <ip_reass_tmr+0x54>)
 80214a0:	681b      	ldr	r3, [r3, #0]
 80214a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80214a4:	e018      	b.n	80214d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80214a6:	68fb      	ldr	r3, [r7, #12]
 80214a8:	7fdb      	ldrb	r3, [r3, #31]
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d00b      	beq.n	80214c6 <ip_reass_tmr+0x32>
      r->timer--;
 80214ae:	68fb      	ldr	r3, [r7, #12]
 80214b0:	7fdb      	ldrb	r3, [r3, #31]
 80214b2:	3b01      	subs	r3, #1
 80214b4:	b2da      	uxtb	r2, r3
 80214b6:	68fb      	ldr	r3, [r7, #12]
 80214b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80214ba:	68fb      	ldr	r3, [r7, #12]
 80214bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80214be:	68fb      	ldr	r3, [r7, #12]
 80214c0:	681b      	ldr	r3, [r3, #0]
 80214c2:	60fb      	str	r3, [r7, #12]
 80214c4:	e008      	b.n	80214d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80214c6:	68fb      	ldr	r3, [r7, #12]
 80214c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80214ca:	68fb      	ldr	r3, [r7, #12]
 80214cc:	681b      	ldr	r3, [r3, #0]
 80214ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80214d0:	68b9      	ldr	r1, [r7, #8]
 80214d2:	6878      	ldr	r0, [r7, #4]
 80214d4:	f000 f80a 	bl	80214ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80214d8:	68fb      	ldr	r3, [r7, #12]
 80214da:	2b00      	cmp	r3, #0
 80214dc:	d1e3      	bne.n	80214a6 <ip_reass_tmr+0x12>
    }
  }
}
 80214de:	bf00      	nop
 80214e0:	bf00      	nop
 80214e2:	3710      	adds	r7, #16
 80214e4:	46bd      	mov	sp, r7
 80214e6:	bd80      	pop	{r7, pc}
 80214e8:	2001428c 	.word	0x2001428c

080214ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80214ec:	b580      	push	{r7, lr}
 80214ee:	b088      	sub	sp, #32
 80214f0:	af00      	add	r7, sp, #0
 80214f2:	6078      	str	r0, [r7, #4]
 80214f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80214f6:	2300      	movs	r3, #0
 80214f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80214fa:	683a      	ldr	r2, [r7, #0]
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	429a      	cmp	r2, r3
 8021500:	d105      	bne.n	802150e <ip_reass_free_complete_datagram+0x22>
 8021502:	4b45      	ldr	r3, [pc, #276]	; (8021618 <ip_reass_free_complete_datagram+0x12c>)
 8021504:	22ab      	movs	r2, #171	; 0xab
 8021506:	4945      	ldr	r1, [pc, #276]	; (802161c <ip_reass_free_complete_datagram+0x130>)
 8021508:	4845      	ldr	r0, [pc, #276]	; (8021620 <ip_reass_free_complete_datagram+0x134>)
 802150a:	f001 f82b 	bl	8022564 <iprintf>
  if (prev != NULL) {
 802150e:	683b      	ldr	r3, [r7, #0]
 8021510:	2b00      	cmp	r3, #0
 8021512:	d00a      	beq.n	802152a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021514:	683b      	ldr	r3, [r7, #0]
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	687a      	ldr	r2, [r7, #4]
 802151a:	429a      	cmp	r2, r3
 802151c:	d005      	beq.n	802152a <ip_reass_free_complete_datagram+0x3e>
 802151e:	4b3e      	ldr	r3, [pc, #248]	; (8021618 <ip_reass_free_complete_datagram+0x12c>)
 8021520:	22ad      	movs	r2, #173	; 0xad
 8021522:	4940      	ldr	r1, [pc, #256]	; (8021624 <ip_reass_free_complete_datagram+0x138>)
 8021524:	483e      	ldr	r0, [pc, #248]	; (8021620 <ip_reass_free_complete_datagram+0x134>)
 8021526:	f001 f81d 	bl	8022564 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 802152a:	687b      	ldr	r3, [r7, #4]
 802152c:	685b      	ldr	r3, [r3, #4]
 802152e:	685b      	ldr	r3, [r3, #4]
 8021530:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021532:	697b      	ldr	r3, [r7, #20]
 8021534:	889b      	ldrh	r3, [r3, #4]
 8021536:	b29b      	uxth	r3, r3
 8021538:	2b00      	cmp	r3, #0
 802153a:	d12a      	bne.n	8021592 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	685b      	ldr	r3, [r3, #4]
 8021540:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021542:	697b      	ldr	r3, [r7, #20]
 8021544:	681a      	ldr	r2, [r3, #0]
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802154a:	69bb      	ldr	r3, [r7, #24]
 802154c:	6858      	ldr	r0, [r3, #4]
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	3308      	adds	r3, #8
 8021552:	2214      	movs	r2, #20
 8021554:	4619      	mov	r1, r3
 8021556:	f000 fef5 	bl	8022344 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802155a:	2101      	movs	r1, #1
 802155c:	69b8      	ldr	r0, [r7, #24]
 802155e:	f7ff fbb3 	bl	8020cc8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021562:	69b8      	ldr	r0, [r7, #24]
 8021564:	f7fd fb4e 	bl	801ec04 <pbuf_clen>
 8021568:	4603      	mov	r3, r0
 802156a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 802156c:	8bfa      	ldrh	r2, [r7, #30]
 802156e:	8a7b      	ldrh	r3, [r7, #18]
 8021570:	4413      	add	r3, r2
 8021572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021576:	db05      	blt.n	8021584 <ip_reass_free_complete_datagram+0x98>
 8021578:	4b27      	ldr	r3, [pc, #156]	; (8021618 <ip_reass_free_complete_datagram+0x12c>)
 802157a:	22bc      	movs	r2, #188	; 0xbc
 802157c:	492a      	ldr	r1, [pc, #168]	; (8021628 <ip_reass_free_complete_datagram+0x13c>)
 802157e:	4828      	ldr	r0, [pc, #160]	; (8021620 <ip_reass_free_complete_datagram+0x134>)
 8021580:	f000 fff0 	bl	8022564 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021584:	8bfa      	ldrh	r2, [r7, #30]
 8021586:	8a7b      	ldrh	r3, [r7, #18]
 8021588:	4413      	add	r3, r2
 802158a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 802158c:	69b8      	ldr	r0, [r7, #24]
 802158e:	f7fd fab1 	bl	801eaf4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8021592:	687b      	ldr	r3, [r7, #4]
 8021594:	685b      	ldr	r3, [r3, #4]
 8021596:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8021598:	e01f      	b.n	80215da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 802159a:	69bb      	ldr	r3, [r7, #24]
 802159c:	685b      	ldr	r3, [r3, #4]
 802159e:	617b      	str	r3, [r7, #20]
    pcur = p;
 80215a0:	69bb      	ldr	r3, [r7, #24]
 80215a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80215a4:	697b      	ldr	r3, [r7, #20]
 80215a6:	681b      	ldr	r3, [r3, #0]
 80215a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80215aa:	68f8      	ldr	r0, [r7, #12]
 80215ac:	f7fd fb2a 	bl	801ec04 <pbuf_clen>
 80215b0:	4603      	mov	r3, r0
 80215b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80215b4:	8bfa      	ldrh	r2, [r7, #30]
 80215b6:	8a7b      	ldrh	r3, [r7, #18]
 80215b8:	4413      	add	r3, r2
 80215ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80215be:	db05      	blt.n	80215cc <ip_reass_free_complete_datagram+0xe0>
 80215c0:	4b15      	ldr	r3, [pc, #84]	; (8021618 <ip_reass_free_complete_datagram+0x12c>)
 80215c2:	22cc      	movs	r2, #204	; 0xcc
 80215c4:	4918      	ldr	r1, [pc, #96]	; (8021628 <ip_reass_free_complete_datagram+0x13c>)
 80215c6:	4816      	ldr	r0, [pc, #88]	; (8021620 <ip_reass_free_complete_datagram+0x134>)
 80215c8:	f000 ffcc 	bl	8022564 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80215cc:	8bfa      	ldrh	r2, [r7, #30]
 80215ce:	8a7b      	ldrh	r3, [r7, #18]
 80215d0:	4413      	add	r3, r2
 80215d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80215d4:	68f8      	ldr	r0, [r7, #12]
 80215d6:	f7fd fa8d 	bl	801eaf4 <pbuf_free>
  while (p != NULL) {
 80215da:	69bb      	ldr	r3, [r7, #24]
 80215dc:	2b00      	cmp	r3, #0
 80215de:	d1dc      	bne.n	802159a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80215e0:	6839      	ldr	r1, [r7, #0]
 80215e2:	6878      	ldr	r0, [r7, #4]
 80215e4:	f000 f8c2 	bl	802176c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80215e8:	4b10      	ldr	r3, [pc, #64]	; (802162c <ip_reass_free_complete_datagram+0x140>)
 80215ea:	881b      	ldrh	r3, [r3, #0]
 80215ec:	8bfa      	ldrh	r2, [r7, #30]
 80215ee:	429a      	cmp	r2, r3
 80215f0:	d905      	bls.n	80215fe <ip_reass_free_complete_datagram+0x112>
 80215f2:	4b09      	ldr	r3, [pc, #36]	; (8021618 <ip_reass_free_complete_datagram+0x12c>)
 80215f4:	22d2      	movs	r2, #210	; 0xd2
 80215f6:	490e      	ldr	r1, [pc, #56]	; (8021630 <ip_reass_free_complete_datagram+0x144>)
 80215f8:	4809      	ldr	r0, [pc, #36]	; (8021620 <ip_reass_free_complete_datagram+0x134>)
 80215fa:	f000 ffb3 	bl	8022564 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80215fe:	4b0b      	ldr	r3, [pc, #44]	; (802162c <ip_reass_free_complete_datagram+0x140>)
 8021600:	881a      	ldrh	r2, [r3, #0]
 8021602:	8bfb      	ldrh	r3, [r7, #30]
 8021604:	1ad3      	subs	r3, r2, r3
 8021606:	b29a      	uxth	r2, r3
 8021608:	4b08      	ldr	r3, [pc, #32]	; (802162c <ip_reass_free_complete_datagram+0x140>)
 802160a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 802160c:	8bfb      	ldrh	r3, [r7, #30]
}
 802160e:	4618      	mov	r0, r3
 8021610:	3720      	adds	r7, #32
 8021612:	46bd      	mov	sp, r7
 8021614:	bd80      	pop	{r7, pc}
 8021616:	bf00      	nop
 8021618:	0802882c 	.word	0x0802882c
 802161c:	080288b4 	.word	0x080288b4
 8021620:	080288c0 	.word	0x080288c0
 8021624:	080288e8 	.word	0x080288e8
 8021628:	080288fc 	.word	0x080288fc
 802162c:	20014290 	.word	0x20014290
 8021630:	0802891c 	.word	0x0802891c

08021634 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021634:	b580      	push	{r7, lr}
 8021636:	b08a      	sub	sp, #40	; 0x28
 8021638:	af00      	add	r7, sp, #0
 802163a:	6078      	str	r0, [r7, #4]
 802163c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802163e:	2300      	movs	r3, #0
 8021640:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021642:	2300      	movs	r3, #0
 8021644:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021646:	2300      	movs	r3, #0
 8021648:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802164a:	2300      	movs	r3, #0
 802164c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802164e:	2300      	movs	r3, #0
 8021650:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021652:	4b28      	ldr	r3, [pc, #160]	; (80216f4 <ip_reass_remove_oldest_datagram+0xc0>)
 8021654:	681b      	ldr	r3, [r3, #0]
 8021656:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021658:	e030      	b.n	80216bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802165c:	695a      	ldr	r2, [r3, #20]
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	68db      	ldr	r3, [r3, #12]
 8021662:	429a      	cmp	r2, r3
 8021664:	d10c      	bne.n	8021680 <ip_reass_remove_oldest_datagram+0x4c>
 8021666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021668:	699a      	ldr	r2, [r3, #24]
 802166a:	687b      	ldr	r3, [r7, #4]
 802166c:	691b      	ldr	r3, [r3, #16]
 802166e:	429a      	cmp	r2, r3
 8021670:	d106      	bne.n	8021680 <ip_reass_remove_oldest_datagram+0x4c>
 8021672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021674:	899a      	ldrh	r2, [r3, #12]
 8021676:	687b      	ldr	r3, [r7, #4]
 8021678:	889b      	ldrh	r3, [r3, #4]
 802167a:	b29b      	uxth	r3, r3
 802167c:	429a      	cmp	r2, r3
 802167e:	d014      	beq.n	80216aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021680:	693b      	ldr	r3, [r7, #16]
 8021682:	3301      	adds	r3, #1
 8021684:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8021686:	6a3b      	ldr	r3, [r7, #32]
 8021688:	2b00      	cmp	r3, #0
 802168a:	d104      	bne.n	8021696 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 802168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802168e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021690:	69fb      	ldr	r3, [r7, #28]
 8021692:	61bb      	str	r3, [r7, #24]
 8021694:	e009      	b.n	80216aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8021696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021698:	7fda      	ldrb	r2, [r3, #31]
 802169a:	6a3b      	ldr	r3, [r7, #32]
 802169c:	7fdb      	ldrb	r3, [r3, #31]
 802169e:	429a      	cmp	r2, r3
 80216a0:	d803      	bhi.n	80216aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80216a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80216a6:	69fb      	ldr	r3, [r7, #28]
 80216a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80216aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d001      	beq.n	80216b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80216b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80216b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216b8:	681b      	ldr	r3, [r3, #0]
 80216ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80216bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216be:	2b00      	cmp	r3, #0
 80216c0:	d1cb      	bne.n	802165a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80216c2:	6a3b      	ldr	r3, [r7, #32]
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	d008      	beq.n	80216da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80216c8:	69b9      	ldr	r1, [r7, #24]
 80216ca:	6a38      	ldr	r0, [r7, #32]
 80216cc:	f7ff ff0e 	bl	80214ec <ip_reass_free_complete_datagram>
 80216d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80216d2:	697a      	ldr	r2, [r7, #20]
 80216d4:	68fb      	ldr	r3, [r7, #12]
 80216d6:	4413      	add	r3, r2
 80216d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80216da:	697a      	ldr	r2, [r7, #20]
 80216dc:	683b      	ldr	r3, [r7, #0]
 80216de:	429a      	cmp	r2, r3
 80216e0:	da02      	bge.n	80216e8 <ip_reass_remove_oldest_datagram+0xb4>
 80216e2:	693b      	ldr	r3, [r7, #16]
 80216e4:	2b01      	cmp	r3, #1
 80216e6:	dcac      	bgt.n	8021642 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80216e8:	697b      	ldr	r3, [r7, #20]
}
 80216ea:	4618      	mov	r0, r3
 80216ec:	3728      	adds	r7, #40	; 0x28
 80216ee:	46bd      	mov	sp, r7
 80216f0:	bd80      	pop	{r7, pc}
 80216f2:	bf00      	nop
 80216f4:	2001428c 	.word	0x2001428c

080216f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80216f8:	b580      	push	{r7, lr}
 80216fa:	b084      	sub	sp, #16
 80216fc:	af00      	add	r7, sp, #0
 80216fe:	6078      	str	r0, [r7, #4]
 8021700:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021702:	2001      	movs	r0, #1
 8021704:	f7fc fa76 	bl	801dbf4 <memp_malloc>
 8021708:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802170a:	68fb      	ldr	r3, [r7, #12]
 802170c:	2b00      	cmp	r3, #0
 802170e:	d110      	bne.n	8021732 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021710:	6839      	ldr	r1, [r7, #0]
 8021712:	6878      	ldr	r0, [r7, #4]
 8021714:	f7ff ff8e 	bl	8021634 <ip_reass_remove_oldest_datagram>
 8021718:	4602      	mov	r2, r0
 802171a:	683b      	ldr	r3, [r7, #0]
 802171c:	4293      	cmp	r3, r2
 802171e:	dc03      	bgt.n	8021728 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021720:	2001      	movs	r0, #1
 8021722:	f7fc fa67 	bl	801dbf4 <memp_malloc>
 8021726:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021728:	68fb      	ldr	r3, [r7, #12]
 802172a:	2b00      	cmp	r3, #0
 802172c:	d101      	bne.n	8021732 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802172e:	2300      	movs	r3, #0
 8021730:	e016      	b.n	8021760 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021732:	2220      	movs	r2, #32
 8021734:	2100      	movs	r1, #0
 8021736:	68f8      	ldr	r0, [r7, #12]
 8021738:	f000 fe2c 	bl	8022394 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 802173c:	68fb      	ldr	r3, [r7, #12]
 802173e:	220f      	movs	r2, #15
 8021740:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021742:	4b09      	ldr	r3, [pc, #36]	; (8021768 <ip_reass_enqueue_new_datagram+0x70>)
 8021744:	681a      	ldr	r2, [r3, #0]
 8021746:	68fb      	ldr	r3, [r7, #12]
 8021748:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 802174a:	4a07      	ldr	r2, [pc, #28]	; (8021768 <ip_reass_enqueue_new_datagram+0x70>)
 802174c:	68fb      	ldr	r3, [r7, #12]
 802174e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021750:	68fb      	ldr	r3, [r7, #12]
 8021752:	3308      	adds	r3, #8
 8021754:	2214      	movs	r2, #20
 8021756:	6879      	ldr	r1, [r7, #4]
 8021758:	4618      	mov	r0, r3
 802175a:	f000 fdf3 	bl	8022344 <memcpy>
  return ipr;
 802175e:	68fb      	ldr	r3, [r7, #12]
}
 8021760:	4618      	mov	r0, r3
 8021762:	3710      	adds	r7, #16
 8021764:	46bd      	mov	sp, r7
 8021766:	bd80      	pop	{r7, pc}
 8021768:	2001428c 	.word	0x2001428c

0802176c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 802176c:	b580      	push	{r7, lr}
 802176e:	b082      	sub	sp, #8
 8021770:	af00      	add	r7, sp, #0
 8021772:	6078      	str	r0, [r7, #4]
 8021774:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021776:	4b10      	ldr	r3, [pc, #64]	; (80217b8 <ip_reass_dequeue_datagram+0x4c>)
 8021778:	681b      	ldr	r3, [r3, #0]
 802177a:	687a      	ldr	r2, [r7, #4]
 802177c:	429a      	cmp	r2, r3
 802177e:	d104      	bne.n	802178a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	681b      	ldr	r3, [r3, #0]
 8021784:	4a0c      	ldr	r2, [pc, #48]	; (80217b8 <ip_reass_dequeue_datagram+0x4c>)
 8021786:	6013      	str	r3, [r2, #0]
 8021788:	e00d      	b.n	80217a6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802178a:	683b      	ldr	r3, [r7, #0]
 802178c:	2b00      	cmp	r3, #0
 802178e:	d106      	bne.n	802179e <ip_reass_dequeue_datagram+0x32>
 8021790:	4b0a      	ldr	r3, [pc, #40]	; (80217bc <ip_reass_dequeue_datagram+0x50>)
 8021792:	f240 1245 	movw	r2, #325	; 0x145
 8021796:	490a      	ldr	r1, [pc, #40]	; (80217c0 <ip_reass_dequeue_datagram+0x54>)
 8021798:	480a      	ldr	r0, [pc, #40]	; (80217c4 <ip_reass_dequeue_datagram+0x58>)
 802179a:	f000 fee3 	bl	8022564 <iprintf>
    prev->next = ipr->next;
 802179e:	687b      	ldr	r3, [r7, #4]
 80217a0:	681a      	ldr	r2, [r3, #0]
 80217a2:	683b      	ldr	r3, [r7, #0]
 80217a4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80217a6:	6879      	ldr	r1, [r7, #4]
 80217a8:	2001      	movs	r0, #1
 80217aa:	f7fc fa93 	bl	801dcd4 <memp_free>
}
 80217ae:	bf00      	nop
 80217b0:	3708      	adds	r7, #8
 80217b2:	46bd      	mov	sp, r7
 80217b4:	bd80      	pop	{r7, pc}
 80217b6:	bf00      	nop
 80217b8:	2001428c 	.word	0x2001428c
 80217bc:	0802882c 	.word	0x0802882c
 80217c0:	08028940 	.word	0x08028940
 80217c4:	080288c0 	.word	0x080288c0

080217c8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80217c8:	b580      	push	{r7, lr}
 80217ca:	b08c      	sub	sp, #48	; 0x30
 80217cc:	af00      	add	r7, sp, #0
 80217ce:	60f8      	str	r0, [r7, #12]
 80217d0:	60b9      	str	r1, [r7, #8]
 80217d2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80217d4:	2300      	movs	r3, #0
 80217d6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80217d8:	2301      	movs	r3, #1
 80217da:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80217dc:	68bb      	ldr	r3, [r7, #8]
 80217de:	685b      	ldr	r3, [r3, #4]
 80217e0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80217e2:	69fb      	ldr	r3, [r7, #28]
 80217e4:	885b      	ldrh	r3, [r3, #2]
 80217e6:	b29b      	uxth	r3, r3
 80217e8:	4618      	mov	r0, r3
 80217ea:	f7fb fda7 	bl	801d33c <lwip_htons>
 80217ee:	4603      	mov	r3, r0
 80217f0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80217f2:	69fb      	ldr	r3, [r7, #28]
 80217f4:	781b      	ldrb	r3, [r3, #0]
 80217f6:	f003 030f 	and.w	r3, r3, #15
 80217fa:	b2db      	uxtb	r3, r3
 80217fc:	009b      	lsls	r3, r3, #2
 80217fe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021800:	7e7b      	ldrb	r3, [r7, #25]
 8021802:	b29b      	uxth	r3, r3
 8021804:	8b7a      	ldrh	r2, [r7, #26]
 8021806:	429a      	cmp	r2, r3
 8021808:	d202      	bcs.n	8021810 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802180a:	f04f 33ff 	mov.w	r3, #4294967295
 802180e:	e135      	b.n	8021a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021810:	7e7b      	ldrb	r3, [r7, #25]
 8021812:	b29b      	uxth	r3, r3
 8021814:	8b7a      	ldrh	r2, [r7, #26]
 8021816:	1ad3      	subs	r3, r2, r3
 8021818:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802181a:	69fb      	ldr	r3, [r7, #28]
 802181c:	88db      	ldrh	r3, [r3, #6]
 802181e:	b29b      	uxth	r3, r3
 8021820:	4618      	mov	r0, r3
 8021822:	f7fb fd8b 	bl	801d33c <lwip_htons>
 8021826:	4603      	mov	r3, r0
 8021828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802182c:	b29b      	uxth	r3, r3
 802182e:	00db      	lsls	r3, r3, #3
 8021830:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021832:	68bb      	ldr	r3, [r7, #8]
 8021834:	685b      	ldr	r3, [r3, #4]
 8021836:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802183a:	2200      	movs	r2, #0
 802183c:	701a      	strb	r2, [r3, #0]
 802183e:	2200      	movs	r2, #0
 8021840:	705a      	strb	r2, [r3, #1]
 8021842:	2200      	movs	r2, #0
 8021844:	709a      	strb	r2, [r3, #2]
 8021846:	2200      	movs	r2, #0
 8021848:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802184c:	8afa      	ldrh	r2, [r7, #22]
 802184e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021850:	8afa      	ldrh	r2, [r7, #22]
 8021852:	8b7b      	ldrh	r3, [r7, #26]
 8021854:	4413      	add	r3, r2
 8021856:	b29a      	uxth	r2, r3
 8021858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802185a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 802185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802185e:	88db      	ldrh	r3, [r3, #6]
 8021860:	b29b      	uxth	r3, r3
 8021862:	8afa      	ldrh	r2, [r7, #22]
 8021864:	429a      	cmp	r2, r3
 8021866:	d902      	bls.n	802186e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021868:	f04f 33ff 	mov.w	r3, #4294967295
 802186c:	e106      	b.n	8021a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802186e:	68fb      	ldr	r3, [r7, #12]
 8021870:	685b      	ldr	r3, [r3, #4]
 8021872:	627b      	str	r3, [r7, #36]	; 0x24
 8021874:	e068      	b.n	8021948 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021878:	685b      	ldr	r3, [r3, #4]
 802187a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 802187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802187e:	889b      	ldrh	r3, [r3, #4]
 8021880:	b29a      	uxth	r2, r3
 8021882:	693b      	ldr	r3, [r7, #16]
 8021884:	889b      	ldrh	r3, [r3, #4]
 8021886:	b29b      	uxth	r3, r3
 8021888:	429a      	cmp	r2, r3
 802188a:	d235      	bcs.n	80218f8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 802188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021890:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021894:	2b00      	cmp	r3, #0
 8021896:	d020      	beq.n	80218da <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802189a:	889b      	ldrh	r3, [r3, #4]
 802189c:	b29a      	uxth	r2, r3
 802189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218a0:	88db      	ldrh	r3, [r3, #6]
 80218a2:	b29b      	uxth	r3, r3
 80218a4:	429a      	cmp	r2, r3
 80218a6:	d307      	bcc.n	80218b8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80218a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218aa:	88db      	ldrh	r3, [r3, #6]
 80218ac:	b29a      	uxth	r2, r3
 80218ae:	693b      	ldr	r3, [r7, #16]
 80218b0:	889b      	ldrh	r3, [r3, #4]
 80218b2:	b29b      	uxth	r3, r3
 80218b4:	429a      	cmp	r2, r3
 80218b6:	d902      	bls.n	80218be <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80218b8:	f04f 33ff 	mov.w	r3, #4294967295
 80218bc:	e0de      	b.n	8021a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80218be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218c0:	68ba      	ldr	r2, [r7, #8]
 80218c2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80218c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218c6:	88db      	ldrh	r3, [r3, #6]
 80218c8:	b29a      	uxth	r2, r3
 80218ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218cc:	889b      	ldrh	r3, [r3, #4]
 80218ce:	b29b      	uxth	r3, r3
 80218d0:	429a      	cmp	r2, r3
 80218d2:	d03d      	beq.n	8021950 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80218d4:	2300      	movs	r3, #0
 80218d6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80218d8:	e03a      	b.n	8021950 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80218da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218dc:	88db      	ldrh	r3, [r3, #6]
 80218de:	b29a      	uxth	r2, r3
 80218e0:	693b      	ldr	r3, [r7, #16]
 80218e2:	889b      	ldrh	r3, [r3, #4]
 80218e4:	b29b      	uxth	r3, r3
 80218e6:	429a      	cmp	r2, r3
 80218e8:	d902      	bls.n	80218f0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80218ea:	f04f 33ff 	mov.w	r3, #4294967295
 80218ee:	e0c5      	b.n	8021a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	68ba      	ldr	r2, [r7, #8]
 80218f4:	605a      	str	r2, [r3, #4]
      break;
 80218f6:	e02b      	b.n	8021950 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80218f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218fa:	889b      	ldrh	r3, [r3, #4]
 80218fc:	b29a      	uxth	r2, r3
 80218fe:	693b      	ldr	r3, [r7, #16]
 8021900:	889b      	ldrh	r3, [r3, #4]
 8021902:	b29b      	uxth	r3, r3
 8021904:	429a      	cmp	r2, r3
 8021906:	d102      	bne.n	802190e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021908:	f04f 33ff 	mov.w	r3, #4294967295
 802190c:	e0b6      	b.n	8021a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021910:	889b      	ldrh	r3, [r3, #4]
 8021912:	b29a      	uxth	r2, r3
 8021914:	693b      	ldr	r3, [r7, #16]
 8021916:	88db      	ldrh	r3, [r3, #6]
 8021918:	b29b      	uxth	r3, r3
 802191a:	429a      	cmp	r2, r3
 802191c:	d202      	bcs.n	8021924 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802191e:	f04f 33ff 	mov.w	r3, #4294967295
 8021922:	e0ab      	b.n	8021a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021926:	2b00      	cmp	r3, #0
 8021928:	d009      	beq.n	802193e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 802192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802192c:	88db      	ldrh	r3, [r3, #6]
 802192e:	b29a      	uxth	r2, r3
 8021930:	693b      	ldr	r3, [r7, #16]
 8021932:	889b      	ldrh	r3, [r3, #4]
 8021934:	b29b      	uxth	r3, r3
 8021936:	429a      	cmp	r2, r3
 8021938:	d001      	beq.n	802193e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802193a:	2300      	movs	r3, #0
 802193c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 802193e:	693b      	ldr	r3, [r7, #16]
 8021940:	681b      	ldr	r3, [r3, #0]
 8021942:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021944:	693b      	ldr	r3, [r7, #16]
 8021946:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802194a:	2b00      	cmp	r3, #0
 802194c:	d193      	bne.n	8021876 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 802194e:	e000      	b.n	8021952 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021950:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021954:	2b00      	cmp	r3, #0
 8021956:	d12d      	bne.n	80219b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802195a:	2b00      	cmp	r3, #0
 802195c:	d01c      	beq.n	8021998 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 802195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021960:	88db      	ldrh	r3, [r3, #6]
 8021962:	b29a      	uxth	r2, r3
 8021964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021966:	889b      	ldrh	r3, [r3, #4]
 8021968:	b29b      	uxth	r3, r3
 802196a:	429a      	cmp	r2, r3
 802196c:	d906      	bls.n	802197c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 802196e:	4b45      	ldr	r3, [pc, #276]	; (8021a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021970:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021974:	4944      	ldr	r1, [pc, #272]	; (8021a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021976:	4845      	ldr	r0, [pc, #276]	; (8021a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021978:	f000 fdf4 	bl	8022564 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 802197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802197e:	68ba      	ldr	r2, [r7, #8]
 8021980:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021984:	88db      	ldrh	r3, [r3, #6]
 8021986:	b29a      	uxth	r2, r3
 8021988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802198a:	889b      	ldrh	r3, [r3, #4]
 802198c:	b29b      	uxth	r3, r3
 802198e:	429a      	cmp	r2, r3
 8021990:	d010      	beq.n	80219b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021992:	2300      	movs	r3, #0
 8021994:	623b      	str	r3, [r7, #32]
 8021996:	e00d      	b.n	80219b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8021998:	68fb      	ldr	r3, [r7, #12]
 802199a:	685b      	ldr	r3, [r3, #4]
 802199c:	2b00      	cmp	r3, #0
 802199e:	d006      	beq.n	80219ae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80219a0:	4b38      	ldr	r3, [pc, #224]	; (8021a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80219a2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80219a6:	493a      	ldr	r1, [pc, #232]	; (8021a90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80219a8:	4838      	ldr	r0, [pc, #224]	; (8021a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80219aa:	f000 fddb 	bl	8022564 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80219ae:	68fb      	ldr	r3, [r7, #12]
 80219b0:	68ba      	ldr	r2, [r7, #8]
 80219b2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80219b4:	687b      	ldr	r3, [r7, #4]
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	d105      	bne.n	80219c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80219ba:	68fb      	ldr	r3, [r7, #12]
 80219bc:	7f9b      	ldrb	r3, [r3, #30]
 80219be:	f003 0301 	and.w	r3, r3, #1
 80219c2:	2b00      	cmp	r3, #0
 80219c4:	d059      	beq.n	8021a7a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80219c6:	6a3b      	ldr	r3, [r7, #32]
 80219c8:	2b00      	cmp	r3, #0
 80219ca:	d04f      	beq.n	8021a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80219cc:	68fb      	ldr	r3, [r7, #12]
 80219ce:	685b      	ldr	r3, [r3, #4]
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d006      	beq.n	80219e2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80219d4:	68fb      	ldr	r3, [r7, #12]
 80219d6:	685b      	ldr	r3, [r3, #4]
 80219d8:	685b      	ldr	r3, [r3, #4]
 80219da:	889b      	ldrh	r3, [r3, #4]
 80219dc:	b29b      	uxth	r3, r3
 80219de:	2b00      	cmp	r3, #0
 80219e0:	d002      	beq.n	80219e8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80219e2:	2300      	movs	r3, #0
 80219e4:	623b      	str	r3, [r7, #32]
 80219e6:	e041      	b.n	8021a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80219e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219ea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80219ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219ee:	681b      	ldr	r3, [r3, #0]
 80219f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80219f2:	e012      	b.n	8021a1a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80219f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219f6:	685b      	ldr	r3, [r3, #4]
 80219f8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80219fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219fc:	88db      	ldrh	r3, [r3, #6]
 80219fe:	b29a      	uxth	r2, r3
 8021a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a02:	889b      	ldrh	r3, [r3, #4]
 8021a04:	b29b      	uxth	r3, r3
 8021a06:	429a      	cmp	r2, r3
 8021a08:	d002      	beq.n	8021a10 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021a0a:	2300      	movs	r3, #0
 8021a0c:	623b      	str	r3, [r7, #32]
            break;
 8021a0e:	e007      	b.n	8021a20 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a12:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a16:	681b      	ldr	r3, [r3, #0]
 8021a18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d1e9      	bne.n	80219f4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021a20:	6a3b      	ldr	r3, [r7, #32]
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d022      	beq.n	8021a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021a26:	68fb      	ldr	r3, [r7, #12]
 8021a28:	685b      	ldr	r3, [r3, #4]
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	d106      	bne.n	8021a3c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021a2e:	4b15      	ldr	r3, [pc, #84]	; (8021a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021a30:	f240 12df 	movw	r2, #479	; 0x1df
 8021a34:	4917      	ldr	r1, [pc, #92]	; (8021a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021a36:	4815      	ldr	r0, [pc, #84]	; (8021a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021a38:	f000 fd94 	bl	8022564 <iprintf>
          LWIP_ASSERT("sanity check",
 8021a3c:	68fb      	ldr	r3, [r7, #12]
 8021a3e:	685b      	ldr	r3, [r3, #4]
 8021a40:	685b      	ldr	r3, [r3, #4]
 8021a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021a44:	429a      	cmp	r2, r3
 8021a46:	d106      	bne.n	8021a56 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021a48:	4b0e      	ldr	r3, [pc, #56]	; (8021a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021a4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021a4e:	4911      	ldr	r1, [pc, #68]	; (8021a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021a50:	480e      	ldr	r0, [pc, #56]	; (8021a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021a52:	f000 fd87 	bl	8022564 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a58:	681b      	ldr	r3, [r3, #0]
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d006      	beq.n	8021a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8021a5e:	4b09      	ldr	r3, [pc, #36]	; (8021a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021a60:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021a64:	490c      	ldr	r1, [pc, #48]	; (8021a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021a66:	4809      	ldr	r0, [pc, #36]	; (8021a8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021a68:	f000 fd7c 	bl	8022564 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8021a6c:	6a3b      	ldr	r3, [r7, #32]
 8021a6e:	2b00      	cmp	r3, #0
 8021a70:	bf14      	ite	ne
 8021a72:	2301      	movne	r3, #1
 8021a74:	2300      	moveq	r3, #0
 8021a76:	b2db      	uxtb	r3, r3
 8021a78:	e000      	b.n	8021a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8021a7a:	2300      	movs	r3, #0
}
 8021a7c:	4618      	mov	r0, r3
 8021a7e:	3730      	adds	r7, #48	; 0x30
 8021a80:	46bd      	mov	sp, r7
 8021a82:	bd80      	pop	{r7, pc}
 8021a84:	0802882c 	.word	0x0802882c
 8021a88:	0802895c 	.word	0x0802895c
 8021a8c:	080288c0 	.word	0x080288c0
 8021a90:	0802897c 	.word	0x0802897c
 8021a94:	080289b4 	.word	0x080289b4
 8021a98:	080289c4 	.word	0x080289c4

08021a9c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8021a9c:	b580      	push	{r7, lr}
 8021a9e:	b08e      	sub	sp, #56	; 0x38
 8021aa0:	af00      	add	r7, sp, #0
 8021aa2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	685b      	ldr	r3, [r3, #4]
 8021aa8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8021aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021aac:	781b      	ldrb	r3, [r3, #0]
 8021aae:	f003 030f 	and.w	r3, r3, #15
 8021ab2:	b2db      	uxtb	r3, r3
 8021ab4:	009b      	lsls	r3, r3, #2
 8021ab6:	b2db      	uxtb	r3, r3
 8021ab8:	2b14      	cmp	r3, #20
 8021aba:	f040 8171 	bne.w	8021da0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ac0:	88db      	ldrh	r3, [r3, #6]
 8021ac2:	b29b      	uxth	r3, r3
 8021ac4:	4618      	mov	r0, r3
 8021ac6:	f7fb fc39 	bl	801d33c <lwip_htons>
 8021aca:	4603      	mov	r3, r0
 8021acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021ad0:	b29b      	uxth	r3, r3
 8021ad2:	00db      	lsls	r3, r3, #3
 8021ad4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ad8:	885b      	ldrh	r3, [r3, #2]
 8021ada:	b29b      	uxth	r3, r3
 8021adc:	4618      	mov	r0, r3
 8021ade:	f7fb fc2d 	bl	801d33c <lwip_htons>
 8021ae2:	4603      	mov	r3, r0
 8021ae4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8021ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ae8:	781b      	ldrb	r3, [r3, #0]
 8021aea:	f003 030f 	and.w	r3, r3, #15
 8021aee:	b2db      	uxtb	r3, r3
 8021af0:	009b      	lsls	r3, r3, #2
 8021af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8021af6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021afa:	b29b      	uxth	r3, r3
 8021afc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021afe:	429a      	cmp	r2, r3
 8021b00:	f0c0 8150 	bcc.w	8021da4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021b08:	b29b      	uxth	r3, r3
 8021b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021b0c:	1ad3      	subs	r3, r2, r3
 8021b0e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021b10:	6878      	ldr	r0, [r7, #4]
 8021b12:	f7fd f877 	bl	801ec04 <pbuf_clen>
 8021b16:	4603      	mov	r3, r0
 8021b18:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8021b1a:	4b8c      	ldr	r3, [pc, #560]	; (8021d4c <ip4_reass+0x2b0>)
 8021b1c:	881b      	ldrh	r3, [r3, #0]
 8021b1e:	461a      	mov	r2, r3
 8021b20:	8c3b      	ldrh	r3, [r7, #32]
 8021b22:	4413      	add	r3, r2
 8021b24:	2b0a      	cmp	r3, #10
 8021b26:	dd10      	ble.n	8021b4a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021b28:	8c3b      	ldrh	r3, [r7, #32]
 8021b2a:	4619      	mov	r1, r3
 8021b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021b2e:	f7ff fd81 	bl	8021634 <ip_reass_remove_oldest_datagram>
 8021b32:	4603      	mov	r3, r0
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	f000 8137 	beq.w	8021da8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8021b3a:	4b84      	ldr	r3, [pc, #528]	; (8021d4c <ip4_reass+0x2b0>)
 8021b3c:	881b      	ldrh	r3, [r3, #0]
 8021b3e:	461a      	mov	r2, r3
 8021b40:	8c3b      	ldrh	r3, [r7, #32]
 8021b42:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021b44:	2b0a      	cmp	r3, #10
 8021b46:	f300 812f 	bgt.w	8021da8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021b4a:	4b81      	ldr	r3, [pc, #516]	; (8021d50 <ip4_reass+0x2b4>)
 8021b4c:	681b      	ldr	r3, [r3, #0]
 8021b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8021b50:	e015      	b.n	8021b7e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b54:	695a      	ldr	r2, [r3, #20]
 8021b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b58:	68db      	ldr	r3, [r3, #12]
 8021b5a:	429a      	cmp	r2, r3
 8021b5c:	d10c      	bne.n	8021b78 <ip4_reass+0xdc>
 8021b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b60:	699a      	ldr	r2, [r3, #24]
 8021b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b64:	691b      	ldr	r3, [r3, #16]
 8021b66:	429a      	cmp	r2, r3
 8021b68:	d106      	bne.n	8021b78 <ip4_reass+0xdc>
 8021b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b6c:	899a      	ldrh	r2, [r3, #12]
 8021b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b70:	889b      	ldrh	r3, [r3, #4]
 8021b72:	b29b      	uxth	r3, r3
 8021b74:	429a      	cmp	r2, r3
 8021b76:	d006      	beq.n	8021b86 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8021b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b80:	2b00      	cmp	r3, #0
 8021b82:	d1e6      	bne.n	8021b52 <ip4_reass+0xb6>
 8021b84:	e000      	b.n	8021b88 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8021b86:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8021b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b8a:	2b00      	cmp	r3, #0
 8021b8c:	d109      	bne.n	8021ba2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8021b8e:	8c3b      	ldrh	r3, [r7, #32]
 8021b90:	4619      	mov	r1, r3
 8021b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021b94:	f7ff fdb0 	bl	80216f8 <ip_reass_enqueue_new_datagram>
 8021b98:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8021b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b9c:	2b00      	cmp	r3, #0
 8021b9e:	d11c      	bne.n	8021bda <ip4_reass+0x13e>
      goto nullreturn;
 8021ba0:	e105      	b.n	8021dae <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ba4:	88db      	ldrh	r3, [r3, #6]
 8021ba6:	b29b      	uxth	r3, r3
 8021ba8:	4618      	mov	r0, r3
 8021baa:	f7fb fbc7 	bl	801d33c <lwip_htons>
 8021bae:	4603      	mov	r3, r0
 8021bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021bb4:	2b00      	cmp	r3, #0
 8021bb6:	d110      	bne.n	8021bda <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bba:	89db      	ldrh	r3, [r3, #14]
 8021bbc:	4618      	mov	r0, r3
 8021bbe:	f7fb fbbd 	bl	801d33c <lwip_htons>
 8021bc2:	4603      	mov	r3, r0
 8021bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021bc8:	2b00      	cmp	r3, #0
 8021bca:	d006      	beq.n	8021bda <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bce:	3308      	adds	r3, #8
 8021bd0:	2214      	movs	r2, #20
 8021bd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021bd4:	4618      	mov	r0, r3
 8021bd6:	f000 fbb5 	bl	8022344 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8021bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bdc:	88db      	ldrh	r3, [r3, #6]
 8021bde:	b29b      	uxth	r3, r3
 8021be0:	f003 0320 	and.w	r3, r3, #32
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	bf0c      	ite	eq
 8021be8:	2301      	moveq	r3, #1
 8021bea:	2300      	movne	r3, #0
 8021bec:	b2db      	uxtb	r3, r3
 8021bee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021bf0:	69fb      	ldr	r3, [r7, #28]
 8021bf2:	2b00      	cmp	r3, #0
 8021bf4:	d00e      	beq.n	8021c14 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8021bf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021bf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021bfa:	4413      	add	r3, r2
 8021bfc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021bfe:	8b7a      	ldrh	r2, [r7, #26]
 8021c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021c02:	429a      	cmp	r2, r3
 8021c04:	f0c0 80a0 	bcc.w	8021d48 <ip4_reass+0x2ac>
 8021c08:	8b7b      	ldrh	r3, [r7, #26]
 8021c0a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8021c0e:	4293      	cmp	r3, r2
 8021c10:	f200 809a 	bhi.w	8021d48 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8021c14:	69fa      	ldr	r2, [r7, #28]
 8021c16:	6879      	ldr	r1, [r7, #4]
 8021c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021c1a:	f7ff fdd5 	bl	80217c8 <ip_reass_chain_frag_into_datagram_and_validate>
 8021c1e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8021c20:	697b      	ldr	r3, [r7, #20]
 8021c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021c26:	f000 809b 	beq.w	8021d60 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021c2a:	4b48      	ldr	r3, [pc, #288]	; (8021d4c <ip4_reass+0x2b0>)
 8021c2c:	881a      	ldrh	r2, [r3, #0]
 8021c2e:	8c3b      	ldrh	r3, [r7, #32]
 8021c30:	4413      	add	r3, r2
 8021c32:	b29a      	uxth	r2, r3
 8021c34:	4b45      	ldr	r3, [pc, #276]	; (8021d4c <ip4_reass+0x2b0>)
 8021c36:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8021c38:	69fb      	ldr	r3, [r7, #28]
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d00d      	beq.n	8021c5a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8021c3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021c40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021c42:	4413      	add	r3, r2
 8021c44:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8021c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c48:	8a7a      	ldrh	r2, [r7, #18]
 8021c4a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8021c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c4e:	7f9b      	ldrb	r3, [r3, #30]
 8021c50:	f043 0301 	orr.w	r3, r3, #1
 8021c54:	b2da      	uxtb	r2, r3
 8021c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c58:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8021c5a:	697b      	ldr	r3, [r7, #20]
 8021c5c:	2b01      	cmp	r3, #1
 8021c5e:	d171      	bne.n	8021d44 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8021c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c62:	8b9b      	ldrh	r3, [r3, #28]
 8021c64:	3314      	adds	r3, #20
 8021c66:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8021c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c6a:	685b      	ldr	r3, [r3, #4]
 8021c6c:	685b      	ldr	r3, [r3, #4]
 8021c6e:	681b      	ldr	r3, [r3, #0]
 8021c70:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8021c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c74:	685b      	ldr	r3, [r3, #4]
 8021c76:	685b      	ldr	r3, [r3, #4]
 8021c78:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8021c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c7c:	3308      	adds	r3, #8
 8021c7e:	2214      	movs	r2, #20
 8021c80:	4619      	mov	r1, r3
 8021c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021c84:	f000 fb5e 	bl	8022344 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8021c88:	8a3b      	ldrh	r3, [r7, #16]
 8021c8a:	4618      	mov	r0, r3
 8021c8c:	f7fb fb56 	bl	801d33c <lwip_htons>
 8021c90:	4603      	mov	r3, r0
 8021c92:	461a      	mov	r2, r3
 8021c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c96:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8021c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c9a:	2200      	movs	r2, #0
 8021c9c:	719a      	strb	r2, [r3, #6]
 8021c9e:	2200      	movs	r2, #0
 8021ca0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ca4:	2200      	movs	r2, #0
 8021ca6:	729a      	strb	r2, [r3, #10]
 8021ca8:	2200      	movs	r2, #0
 8021caa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8021cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cae:	685b      	ldr	r3, [r3, #4]
 8021cb0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8021cb2:	e00d      	b.n	8021cd0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8021cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021cb6:	685b      	ldr	r3, [r3, #4]
 8021cb8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8021cba:	2114      	movs	r1, #20
 8021cbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021cbe:	f7fc fe93 	bl	801e9e8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8021cc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021cc4:	6878      	ldr	r0, [r7, #4]
 8021cc6:	f7fc ffd7 	bl	801ec78 <pbuf_cat>
      r = iprh->next_pbuf;
 8021cca:	68fb      	ldr	r3, [r7, #12]
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8021cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	d1ee      	bne.n	8021cb4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8021cd6:	4b1e      	ldr	r3, [pc, #120]	; (8021d50 <ip4_reass+0x2b4>)
 8021cd8:	681b      	ldr	r3, [r3, #0]
 8021cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021cdc:	429a      	cmp	r2, r3
 8021cde:	d102      	bne.n	8021ce6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8021ce0:	2300      	movs	r3, #0
 8021ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021ce4:	e010      	b.n	8021d08 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021ce6:	4b1a      	ldr	r3, [pc, #104]	; (8021d50 <ip4_reass+0x2b4>)
 8021ce8:	681b      	ldr	r3, [r3, #0]
 8021cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021cec:	e007      	b.n	8021cfe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8021cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cf0:	681b      	ldr	r3, [r3, #0]
 8021cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021cf4:	429a      	cmp	r2, r3
 8021cf6:	d006      	beq.n	8021d06 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cfa:	681b      	ldr	r3, [r3, #0]
 8021cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d1f4      	bne.n	8021cee <ip4_reass+0x252>
 8021d04:	e000      	b.n	8021d08 <ip4_reass+0x26c>
          break;
 8021d06:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8021d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021d0c:	f7ff fd2e 	bl	802176c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8021d10:	6878      	ldr	r0, [r7, #4]
 8021d12:	f7fc ff77 	bl	801ec04 <pbuf_clen>
 8021d16:	4603      	mov	r3, r0
 8021d18:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8021d1a:	4b0c      	ldr	r3, [pc, #48]	; (8021d4c <ip4_reass+0x2b0>)
 8021d1c:	881b      	ldrh	r3, [r3, #0]
 8021d1e:	8c3a      	ldrh	r2, [r7, #32]
 8021d20:	429a      	cmp	r2, r3
 8021d22:	d906      	bls.n	8021d32 <ip4_reass+0x296>
 8021d24:	4b0b      	ldr	r3, [pc, #44]	; (8021d54 <ip4_reass+0x2b8>)
 8021d26:	f240 229b 	movw	r2, #667	; 0x29b
 8021d2a:	490b      	ldr	r1, [pc, #44]	; (8021d58 <ip4_reass+0x2bc>)
 8021d2c:	480b      	ldr	r0, [pc, #44]	; (8021d5c <ip4_reass+0x2c0>)
 8021d2e:	f000 fc19 	bl	8022564 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8021d32:	4b06      	ldr	r3, [pc, #24]	; (8021d4c <ip4_reass+0x2b0>)
 8021d34:	881a      	ldrh	r2, [r3, #0]
 8021d36:	8c3b      	ldrh	r3, [r7, #32]
 8021d38:	1ad3      	subs	r3, r2, r3
 8021d3a:	b29a      	uxth	r2, r3
 8021d3c:	4b03      	ldr	r3, [pc, #12]	; (8021d4c <ip4_reass+0x2b0>)
 8021d3e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	e038      	b.n	8021db6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8021d44:	2300      	movs	r3, #0
 8021d46:	e036      	b.n	8021db6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8021d48:	bf00      	nop
 8021d4a:	e00a      	b.n	8021d62 <ip4_reass+0x2c6>
 8021d4c:	20014290 	.word	0x20014290
 8021d50:	2001428c 	.word	0x2001428c
 8021d54:	0802882c 	.word	0x0802882c
 8021d58:	080289e8 	.word	0x080289e8
 8021d5c:	080288c0 	.word	0x080288c0
    goto nullreturn_ipr;
 8021d60:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8021d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d106      	bne.n	8021d76 <ip4_reass+0x2da>
 8021d68:	4b15      	ldr	r3, [pc, #84]	; (8021dc0 <ip4_reass+0x324>)
 8021d6a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8021d6e:	4915      	ldr	r1, [pc, #84]	; (8021dc4 <ip4_reass+0x328>)
 8021d70:	4815      	ldr	r0, [pc, #84]	; (8021dc8 <ip4_reass+0x32c>)
 8021d72:	f000 fbf7 	bl	8022564 <iprintf>
  if (ipr->p == NULL) {
 8021d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d78:	685b      	ldr	r3, [r3, #4]
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	d116      	bne.n	8021dac <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8021d7e:	4b13      	ldr	r3, [pc, #76]	; (8021dcc <ip4_reass+0x330>)
 8021d80:	681b      	ldr	r3, [r3, #0]
 8021d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021d84:	429a      	cmp	r2, r3
 8021d86:	d006      	beq.n	8021d96 <ip4_reass+0x2fa>
 8021d88:	4b0d      	ldr	r3, [pc, #52]	; (8021dc0 <ip4_reass+0x324>)
 8021d8a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8021d8e:	4910      	ldr	r1, [pc, #64]	; (8021dd0 <ip4_reass+0x334>)
 8021d90:	480d      	ldr	r0, [pc, #52]	; (8021dc8 <ip4_reass+0x32c>)
 8021d92:	f000 fbe7 	bl	8022564 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8021d96:	2100      	movs	r1, #0
 8021d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021d9a:	f7ff fce7 	bl	802176c <ip_reass_dequeue_datagram>
 8021d9e:	e006      	b.n	8021dae <ip4_reass+0x312>
    goto nullreturn;
 8021da0:	bf00      	nop
 8021da2:	e004      	b.n	8021dae <ip4_reass+0x312>
    goto nullreturn;
 8021da4:	bf00      	nop
 8021da6:	e002      	b.n	8021dae <ip4_reass+0x312>
      goto nullreturn;
 8021da8:	bf00      	nop
 8021daa:	e000      	b.n	8021dae <ip4_reass+0x312>
  }

nullreturn:
 8021dac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8021dae:	6878      	ldr	r0, [r7, #4]
 8021db0:	f7fc fea0 	bl	801eaf4 <pbuf_free>
  return NULL;
 8021db4:	2300      	movs	r3, #0
}
 8021db6:	4618      	mov	r0, r3
 8021db8:	3738      	adds	r7, #56	; 0x38
 8021dba:	46bd      	mov	sp, r7
 8021dbc:	bd80      	pop	{r7, pc}
 8021dbe:	bf00      	nop
 8021dc0:	0802882c 	.word	0x0802882c
 8021dc4:	08028a04 	.word	0x08028a04
 8021dc8:	080288c0 	.word	0x080288c0
 8021dcc:	2001428c 	.word	0x2001428c
 8021dd0:	08028a10 	.word	0x08028a10

08021dd4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8021dd4:	b580      	push	{r7, lr}
 8021dd6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8021dd8:	2002      	movs	r0, #2
 8021dda:	f7fb ff0b 	bl	801dbf4 <memp_malloc>
 8021dde:	4603      	mov	r3, r0
}
 8021de0:	4618      	mov	r0, r3
 8021de2:	bd80      	pop	{r7, pc}

08021de4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021de4:	b580      	push	{r7, lr}
 8021de6:	b082      	sub	sp, #8
 8021de8:	af00      	add	r7, sp, #0
 8021dea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d106      	bne.n	8021e00 <ip_frag_free_pbuf_custom_ref+0x1c>
 8021df2:	4b07      	ldr	r3, [pc, #28]	; (8021e10 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021df4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8021df8:	4906      	ldr	r1, [pc, #24]	; (8021e14 <ip_frag_free_pbuf_custom_ref+0x30>)
 8021dfa:	4807      	ldr	r0, [pc, #28]	; (8021e18 <ip_frag_free_pbuf_custom_ref+0x34>)
 8021dfc:	f000 fbb2 	bl	8022564 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021e00:	6879      	ldr	r1, [r7, #4]
 8021e02:	2002      	movs	r0, #2
 8021e04:	f7fb ff66 	bl	801dcd4 <memp_free>
}
 8021e08:	bf00      	nop
 8021e0a:	3708      	adds	r7, #8
 8021e0c:	46bd      	mov	sp, r7
 8021e0e:	bd80      	pop	{r7, pc}
 8021e10:	0802882c 	.word	0x0802882c
 8021e14:	08028a30 	.word	0x08028a30
 8021e18:	080288c0 	.word	0x080288c0

08021e1c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021e1c:	b580      	push	{r7, lr}
 8021e1e:	b084      	sub	sp, #16
 8021e20:	af00      	add	r7, sp, #0
 8021e22:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8021e24:	687b      	ldr	r3, [r7, #4]
 8021e26:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021e28:	68fb      	ldr	r3, [r7, #12]
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	d106      	bne.n	8021e3c <ipfrag_free_pbuf_custom+0x20>
 8021e2e:	4b11      	ldr	r3, [pc, #68]	; (8021e74 <ipfrag_free_pbuf_custom+0x58>)
 8021e30:	f240 22ce 	movw	r2, #718	; 0x2ce
 8021e34:	4910      	ldr	r1, [pc, #64]	; (8021e78 <ipfrag_free_pbuf_custom+0x5c>)
 8021e36:	4811      	ldr	r0, [pc, #68]	; (8021e7c <ipfrag_free_pbuf_custom+0x60>)
 8021e38:	f000 fb94 	bl	8022564 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8021e3c:	68fa      	ldr	r2, [r7, #12]
 8021e3e:	687b      	ldr	r3, [r7, #4]
 8021e40:	429a      	cmp	r2, r3
 8021e42:	d006      	beq.n	8021e52 <ipfrag_free_pbuf_custom+0x36>
 8021e44:	4b0b      	ldr	r3, [pc, #44]	; (8021e74 <ipfrag_free_pbuf_custom+0x58>)
 8021e46:	f240 22cf 	movw	r2, #719	; 0x2cf
 8021e4a:	490d      	ldr	r1, [pc, #52]	; (8021e80 <ipfrag_free_pbuf_custom+0x64>)
 8021e4c:	480b      	ldr	r0, [pc, #44]	; (8021e7c <ipfrag_free_pbuf_custom+0x60>)
 8021e4e:	f000 fb89 	bl	8022564 <iprintf>
  if (pcr->original != NULL) {
 8021e52:	68fb      	ldr	r3, [r7, #12]
 8021e54:	695b      	ldr	r3, [r3, #20]
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d004      	beq.n	8021e64 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8021e5a:	68fb      	ldr	r3, [r7, #12]
 8021e5c:	695b      	ldr	r3, [r3, #20]
 8021e5e:	4618      	mov	r0, r3
 8021e60:	f7fc fe48 	bl	801eaf4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8021e64:	68f8      	ldr	r0, [r7, #12]
 8021e66:	f7ff ffbd 	bl	8021de4 <ip_frag_free_pbuf_custom_ref>
}
 8021e6a:	bf00      	nop
 8021e6c:	3710      	adds	r7, #16
 8021e6e:	46bd      	mov	sp, r7
 8021e70:	bd80      	pop	{r7, pc}
 8021e72:	bf00      	nop
 8021e74:	0802882c 	.word	0x0802882c
 8021e78:	08028a3c 	.word	0x08028a3c
 8021e7c:	080288c0 	.word	0x080288c0
 8021e80:	08028a48 	.word	0x08028a48

08021e84 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8021e84:	b580      	push	{r7, lr}
 8021e86:	b094      	sub	sp, #80	; 0x50
 8021e88:	af02      	add	r7, sp, #8
 8021e8a:	60f8      	str	r0, [r7, #12]
 8021e8c:	60b9      	str	r1, [r7, #8]
 8021e8e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8021e90:	2300      	movs	r3, #0
 8021e92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8021e96:	68bb      	ldr	r3, [r7, #8]
 8021e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021e9a:	3b14      	subs	r3, #20
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	da00      	bge.n	8021ea2 <ip4_frag+0x1e>
 8021ea0:	3307      	adds	r3, #7
 8021ea2:	10db      	asrs	r3, r3, #3
 8021ea4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8021ea6:	2314      	movs	r3, #20
 8021ea8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8021eaa:	68fb      	ldr	r3, [r7, #12]
 8021eac:	685b      	ldr	r3, [r3, #4]
 8021eae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8021eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021eb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8021eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021eb6:	781b      	ldrb	r3, [r3, #0]
 8021eb8:	f003 030f 	and.w	r3, r3, #15
 8021ebc:	b2db      	uxtb	r3, r3
 8021ebe:	009b      	lsls	r3, r3, #2
 8021ec0:	b2db      	uxtb	r3, r3
 8021ec2:	2b14      	cmp	r3, #20
 8021ec4:	d002      	beq.n	8021ecc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8021ec6:	f06f 0305 	mvn.w	r3, #5
 8021eca:	e110      	b.n	80220ee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8021ecc:	68fb      	ldr	r3, [r7, #12]
 8021ece:	895b      	ldrh	r3, [r3, #10]
 8021ed0:	2b13      	cmp	r3, #19
 8021ed2:	d809      	bhi.n	8021ee8 <ip4_frag+0x64>
 8021ed4:	4b88      	ldr	r3, [pc, #544]	; (80220f8 <ip4_frag+0x274>)
 8021ed6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8021eda:	4988      	ldr	r1, [pc, #544]	; (80220fc <ip4_frag+0x278>)
 8021edc:	4888      	ldr	r0, [pc, #544]	; (8022100 <ip4_frag+0x27c>)
 8021ede:	f000 fb41 	bl	8022564 <iprintf>
 8021ee2:	f06f 0305 	mvn.w	r3, #5
 8021ee6:	e102      	b.n	80220ee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8021ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021eea:	88db      	ldrh	r3, [r3, #6]
 8021eec:	b29b      	uxth	r3, r3
 8021eee:	4618      	mov	r0, r3
 8021ef0:	f7fb fa24 	bl	801d33c <lwip_htons>
 8021ef4:	4603      	mov	r3, r0
 8021ef6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8021ef8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021efa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021efe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8021f02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021f08:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8021f0a:	68fb      	ldr	r3, [r7, #12]
 8021f0c:	891b      	ldrh	r3, [r3, #8]
 8021f0e:	3b14      	subs	r3, #20
 8021f10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8021f14:	e0e1      	b.n	80220da <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8021f16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021f18:	00db      	lsls	r3, r3, #3
 8021f1a:	b29b      	uxth	r3, r3
 8021f1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021f20:	4293      	cmp	r3, r2
 8021f22:	bf28      	it	cs
 8021f24:	4613      	movcs	r3, r2
 8021f26:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8021f28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021f2c:	2114      	movs	r1, #20
 8021f2e:	200e      	movs	r0, #14
 8021f30:	f7fc fafe 	bl	801e530 <pbuf_alloc>
 8021f34:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8021f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	f000 80d5 	beq.w	80220e8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8021f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f40:	895b      	ldrh	r3, [r3, #10]
 8021f42:	2b13      	cmp	r3, #19
 8021f44:	d806      	bhi.n	8021f54 <ip4_frag+0xd0>
 8021f46:	4b6c      	ldr	r3, [pc, #432]	; (80220f8 <ip4_frag+0x274>)
 8021f48:	f44f 7249 	mov.w	r2, #804	; 0x324
 8021f4c:	496d      	ldr	r1, [pc, #436]	; (8022104 <ip4_frag+0x280>)
 8021f4e:	486c      	ldr	r0, [pc, #432]	; (8022100 <ip4_frag+0x27c>)
 8021f50:	f000 fb08 	bl	8022564 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8021f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f56:	685b      	ldr	r3, [r3, #4]
 8021f58:	2214      	movs	r2, #20
 8021f5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021f5c:	4618      	mov	r0, r3
 8021f5e:	f000 f9f1 	bl	8022344 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8021f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f64:	685b      	ldr	r3, [r3, #4]
 8021f66:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8021f68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021f6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8021f6e:	e064      	b.n	802203a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8021f70:	68fb      	ldr	r3, [r7, #12]
 8021f72:	895a      	ldrh	r2, [r3, #10]
 8021f74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021f76:	1ad3      	subs	r3, r2, r3
 8021f78:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8021f7a:	68fb      	ldr	r3, [r7, #12]
 8021f7c:	895b      	ldrh	r3, [r3, #10]
 8021f7e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021f80:	429a      	cmp	r2, r3
 8021f82:	d906      	bls.n	8021f92 <ip4_frag+0x10e>
 8021f84:	4b5c      	ldr	r3, [pc, #368]	; (80220f8 <ip4_frag+0x274>)
 8021f86:	f240 322d 	movw	r2, #813	; 0x32d
 8021f8a:	495f      	ldr	r1, [pc, #380]	; (8022108 <ip4_frag+0x284>)
 8021f8c:	485c      	ldr	r0, [pc, #368]	; (8022100 <ip4_frag+0x27c>)
 8021f8e:	f000 fae9 	bl	8022564 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8021f92:	8bfa      	ldrh	r2, [r7, #30]
 8021f94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021f98:	4293      	cmp	r3, r2
 8021f9a:	bf28      	it	cs
 8021f9c:	4613      	movcs	r3, r2
 8021f9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8021fa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d105      	bne.n	8021fb6 <ip4_frag+0x132>
        poff = 0;
 8021faa:	2300      	movs	r3, #0
 8021fac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021fae:	68fb      	ldr	r3, [r7, #12]
 8021fb0:	681b      	ldr	r3, [r3, #0]
 8021fb2:	60fb      	str	r3, [r7, #12]
        continue;
 8021fb4:	e041      	b.n	802203a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8021fb6:	f7ff ff0d 	bl	8021dd4 <ip_frag_alloc_pbuf_custom_ref>
 8021fba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8021fbc:	69bb      	ldr	r3, [r7, #24]
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d103      	bne.n	8021fca <ip4_frag+0x146>
        pbuf_free(rambuf);
 8021fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021fc4:	f7fc fd96 	bl	801eaf4 <pbuf_free>
        goto memerr;
 8021fc8:	e08f      	b.n	80220ea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8021fca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8021fcc:	68fb      	ldr	r3, [r7, #12]
 8021fce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8021fd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021fd2:	4413      	add	r3, r2
 8021fd4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8021fd8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8021fdc:	9201      	str	r2, [sp, #4]
 8021fde:	9300      	str	r3, [sp, #0]
 8021fe0:	4603      	mov	r3, r0
 8021fe2:	2241      	movs	r2, #65	; 0x41
 8021fe4:	2000      	movs	r0, #0
 8021fe6:	f7fc fbcb 	bl	801e780 <pbuf_alloced_custom>
 8021fea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8021fec:	697b      	ldr	r3, [r7, #20]
 8021fee:	2b00      	cmp	r3, #0
 8021ff0:	d106      	bne.n	8022000 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8021ff2:	69b8      	ldr	r0, [r7, #24]
 8021ff4:	f7ff fef6 	bl	8021de4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8021ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021ffa:	f7fc fd7b 	bl	801eaf4 <pbuf_free>
        goto memerr;
 8021ffe:	e074      	b.n	80220ea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8022000:	68f8      	ldr	r0, [r7, #12]
 8022002:	f7fc fe17 	bl	801ec34 <pbuf_ref>
      pcr->original = p;
 8022006:	69bb      	ldr	r3, [r7, #24]
 8022008:	68fa      	ldr	r2, [r7, #12]
 802200a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802200c:	69bb      	ldr	r3, [r7, #24]
 802200e:	4a3f      	ldr	r2, [pc, #252]	; (802210c <ip4_frag+0x288>)
 8022010:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8022012:	6979      	ldr	r1, [r7, #20]
 8022014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022016:	f7fc fe2f 	bl	801ec78 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802201a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802201e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022022:	1ad3      	subs	r3, r2, r3
 8022024:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8022028:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802202c:	2b00      	cmp	r3, #0
 802202e:	d004      	beq.n	802203a <ip4_frag+0x1b6>
        poff = 0;
 8022030:	2300      	movs	r3, #0
 8022032:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022034:	68fb      	ldr	r3, [r7, #12]
 8022036:	681b      	ldr	r3, [r3, #0]
 8022038:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802203a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802203e:	2b00      	cmp	r3, #0
 8022040:	d196      	bne.n	8021f70 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8022042:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022044:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022048:	4413      	add	r3, r2
 802204a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 802204c:	68bb      	ldr	r3, [r7, #8]
 802204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022050:	f1a3 0213 	sub.w	r2, r3, #19
 8022054:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8022058:	429a      	cmp	r2, r3
 802205a:	bfcc      	ite	gt
 802205c:	2301      	movgt	r3, #1
 802205e:	2300      	movle	r3, #0
 8022060:	b2db      	uxtb	r3, r3
 8022062:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8022064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8022068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802206c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 802206e:	6a3b      	ldr	r3, [r7, #32]
 8022070:	2b00      	cmp	r3, #0
 8022072:	d002      	beq.n	802207a <ip4_frag+0x1f6>
 8022074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022076:	2b00      	cmp	r3, #0
 8022078:	d003      	beq.n	8022082 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802207a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802207c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022080:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8022082:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022084:	4618      	mov	r0, r3
 8022086:	f7fb f959 	bl	801d33c <lwip_htons>
 802208a:	4603      	mov	r3, r0
 802208c:	461a      	mov	r2, r3
 802208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022090:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8022092:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022094:	3314      	adds	r3, #20
 8022096:	b29b      	uxth	r3, r3
 8022098:	4618      	mov	r0, r3
 802209a:	f7fb f94f 	bl	801d33c <lwip_htons>
 802209e:	4603      	mov	r3, r0
 80220a0:	461a      	mov	r2, r3
 80220a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80220a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220a8:	2200      	movs	r2, #0
 80220aa:	729a      	strb	r2, [r3, #10]
 80220ac:	2200      	movs	r2, #0
 80220ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80220b0:	68bb      	ldr	r3, [r7, #8]
 80220b2:	695b      	ldr	r3, [r3, #20]
 80220b4:	687a      	ldr	r2, [r7, #4]
 80220b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80220b8:	68b8      	ldr	r0, [r7, #8]
 80220ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80220bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80220be:	f7fc fd19 	bl	801eaf4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80220c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80220c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80220c8:	1ad3      	subs	r3, r2, r3
 80220ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80220ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80220d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80220d4:	4413      	add	r3, r2
 80220d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80220da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80220de:	2b00      	cmp	r3, #0
 80220e0:	f47f af19 	bne.w	8021f16 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80220e4:	2300      	movs	r3, #0
 80220e6:	e002      	b.n	80220ee <ip4_frag+0x26a>
      goto memerr;
 80220e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80220ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80220ee:	4618      	mov	r0, r3
 80220f0:	3748      	adds	r7, #72	; 0x48
 80220f2:	46bd      	mov	sp, r7
 80220f4:	bd80      	pop	{r7, pc}
 80220f6:	bf00      	nop
 80220f8:	0802882c 	.word	0x0802882c
 80220fc:	08028a54 	.word	0x08028a54
 8022100:	080288c0 	.word	0x080288c0
 8022104:	08028a70 	.word	0x08028a70
 8022108:	08028a90 	.word	0x08028a90
 802210c:	08021e1d 	.word	0x08021e1d

08022110 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022110:	b580      	push	{r7, lr}
 8022112:	b086      	sub	sp, #24
 8022114:	af00      	add	r7, sp, #0
 8022116:	6078      	str	r0, [r7, #4]
 8022118:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802211a:	230e      	movs	r3, #14
 802211c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	895b      	ldrh	r3, [r3, #10]
 8022122:	2b0e      	cmp	r3, #14
 8022124:	d96e      	bls.n	8022204 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	7bdb      	ldrb	r3, [r3, #15]
 802212a:	2b00      	cmp	r3, #0
 802212c:	d106      	bne.n	802213c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 802212e:	683b      	ldr	r3, [r7, #0]
 8022130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022134:	3301      	adds	r3, #1
 8022136:	b2da      	uxtb	r2, r3
 8022138:	687b      	ldr	r3, [r7, #4]
 802213a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 802213c:	687b      	ldr	r3, [r7, #4]
 802213e:	685b      	ldr	r3, [r3, #4]
 8022140:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8022142:	693b      	ldr	r3, [r7, #16]
 8022144:	7b1a      	ldrb	r2, [r3, #12]
 8022146:	7b5b      	ldrb	r3, [r3, #13]
 8022148:	021b      	lsls	r3, r3, #8
 802214a:	4313      	orrs	r3, r2
 802214c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802214e:	693b      	ldr	r3, [r7, #16]
 8022150:	781b      	ldrb	r3, [r3, #0]
 8022152:	f003 0301 	and.w	r3, r3, #1
 8022156:	2b00      	cmp	r3, #0
 8022158:	d023      	beq.n	80221a2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802215a:	693b      	ldr	r3, [r7, #16]
 802215c:	781b      	ldrb	r3, [r3, #0]
 802215e:	2b01      	cmp	r3, #1
 8022160:	d10f      	bne.n	8022182 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022162:	693b      	ldr	r3, [r7, #16]
 8022164:	785b      	ldrb	r3, [r3, #1]
 8022166:	2b00      	cmp	r3, #0
 8022168:	d11b      	bne.n	80221a2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802216a:	693b      	ldr	r3, [r7, #16]
 802216c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802216e:	2b5e      	cmp	r3, #94	; 0x5e
 8022170:	d117      	bne.n	80221a2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8022172:	687b      	ldr	r3, [r7, #4]
 8022174:	7b5b      	ldrb	r3, [r3, #13]
 8022176:	f043 0310 	orr.w	r3, r3, #16
 802217a:	b2da      	uxtb	r2, r3
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	735a      	strb	r2, [r3, #13]
 8022180:	e00f      	b.n	80221a2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8022182:	693b      	ldr	r3, [r7, #16]
 8022184:	2206      	movs	r2, #6
 8022186:	4928      	ldr	r1, [pc, #160]	; (8022228 <ethernet_input+0x118>)
 8022188:	4618      	mov	r0, r3
 802218a:	f000 f8cb 	bl	8022324 <memcmp>
 802218e:	4603      	mov	r3, r0
 8022190:	2b00      	cmp	r3, #0
 8022192:	d106      	bne.n	80221a2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	7b5b      	ldrb	r3, [r3, #13]
 8022198:	f043 0308 	orr.w	r3, r3, #8
 802219c:	b2da      	uxtb	r2, r3
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80221a2:	89fb      	ldrh	r3, [r7, #14]
 80221a4:	2b08      	cmp	r3, #8
 80221a6:	d003      	beq.n	80221b0 <ethernet_input+0xa0>
 80221a8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80221ac:	d014      	beq.n	80221d8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80221ae:	e032      	b.n	8022216 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80221b0:	683b      	ldr	r3, [r7, #0]
 80221b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80221b6:	f003 0308 	and.w	r3, r3, #8
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d024      	beq.n	8022208 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80221be:	8afb      	ldrh	r3, [r7, #22]
 80221c0:	4619      	mov	r1, r3
 80221c2:	6878      	ldr	r0, [r7, #4]
 80221c4:	f7fc fc10 	bl	801e9e8 <pbuf_remove_header>
 80221c8:	4603      	mov	r3, r0
 80221ca:	2b00      	cmp	r3, #0
 80221cc:	d11e      	bne.n	802220c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80221ce:	6839      	ldr	r1, [r7, #0]
 80221d0:	6878      	ldr	r0, [r7, #4]
 80221d2:	f7fe fe8d 	bl	8020ef0 <ip4_input>
      break;
 80221d6:	e013      	b.n	8022200 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80221d8:	683b      	ldr	r3, [r7, #0]
 80221da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80221de:	f003 0308 	and.w	r3, r3, #8
 80221e2:	2b00      	cmp	r3, #0
 80221e4:	d014      	beq.n	8022210 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80221e6:	8afb      	ldrh	r3, [r7, #22]
 80221e8:	4619      	mov	r1, r3
 80221ea:	6878      	ldr	r0, [r7, #4]
 80221ec:	f7fc fbfc 	bl	801e9e8 <pbuf_remove_header>
 80221f0:	4603      	mov	r3, r0
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	d10e      	bne.n	8022214 <ethernet_input+0x104>
        etharp_input(p, netif);
 80221f6:	6839      	ldr	r1, [r7, #0]
 80221f8:	6878      	ldr	r0, [r7, #4]
 80221fa:	f7fe f82d 	bl	8020258 <etharp_input>
      break;
 80221fe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022200:	2300      	movs	r3, #0
 8022202:	e00c      	b.n	802221e <ethernet_input+0x10e>
    goto free_and_return;
 8022204:	bf00      	nop
 8022206:	e006      	b.n	8022216 <ethernet_input+0x106>
        goto free_and_return;
 8022208:	bf00      	nop
 802220a:	e004      	b.n	8022216 <ethernet_input+0x106>
        goto free_and_return;
 802220c:	bf00      	nop
 802220e:	e002      	b.n	8022216 <ethernet_input+0x106>
        goto free_and_return;
 8022210:	bf00      	nop
 8022212:	e000      	b.n	8022216 <ethernet_input+0x106>
        goto free_and_return;
 8022214:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022216:	6878      	ldr	r0, [r7, #4]
 8022218:	f7fc fc6c 	bl	801eaf4 <pbuf_free>
  return ERR_OK;
 802221c:	2300      	movs	r3, #0
}
 802221e:	4618      	mov	r0, r3
 8022220:	3718      	adds	r7, #24
 8022222:	46bd      	mov	sp, r7
 8022224:	bd80      	pop	{r7, pc}
 8022226:	bf00      	nop
 8022228:	0802903c 	.word	0x0802903c

0802222c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 802222c:	b580      	push	{r7, lr}
 802222e:	b086      	sub	sp, #24
 8022230:	af00      	add	r7, sp, #0
 8022232:	60f8      	str	r0, [r7, #12]
 8022234:	60b9      	str	r1, [r7, #8]
 8022236:	607a      	str	r2, [r7, #4]
 8022238:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802223a:	8c3b      	ldrh	r3, [r7, #32]
 802223c:	4618      	mov	r0, r3
 802223e:	f7fb f87d 	bl	801d33c <lwip_htons>
 8022242:	4603      	mov	r3, r0
 8022244:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8022246:	210e      	movs	r1, #14
 8022248:	68b8      	ldr	r0, [r7, #8]
 802224a:	f7fc fbbd 	bl	801e9c8 <pbuf_add_header>
 802224e:	4603      	mov	r3, r0
 8022250:	2b00      	cmp	r3, #0
 8022252:	d125      	bne.n	80222a0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022254:	68bb      	ldr	r3, [r7, #8]
 8022256:	685b      	ldr	r3, [r3, #4]
 8022258:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802225a:	693b      	ldr	r3, [r7, #16]
 802225c:	8afa      	ldrh	r2, [r7, #22]
 802225e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8022260:	693b      	ldr	r3, [r7, #16]
 8022262:	2206      	movs	r2, #6
 8022264:	6839      	ldr	r1, [r7, #0]
 8022266:	4618      	mov	r0, r3
 8022268:	f000 f86c 	bl	8022344 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802226c:	693b      	ldr	r3, [r7, #16]
 802226e:	3306      	adds	r3, #6
 8022270:	2206      	movs	r2, #6
 8022272:	6879      	ldr	r1, [r7, #4]
 8022274:	4618      	mov	r0, r3
 8022276:	f000 f865 	bl	8022344 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802227a:	68fb      	ldr	r3, [r7, #12]
 802227c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022280:	2b06      	cmp	r3, #6
 8022282:	d006      	beq.n	8022292 <ethernet_output+0x66>
 8022284:	4b0a      	ldr	r3, [pc, #40]	; (80222b0 <ethernet_output+0x84>)
 8022286:	f44f 7299 	mov.w	r2, #306	; 0x132
 802228a:	490a      	ldr	r1, [pc, #40]	; (80222b4 <ethernet_output+0x88>)
 802228c:	480a      	ldr	r0, [pc, #40]	; (80222b8 <ethernet_output+0x8c>)
 802228e:	f000 f969 	bl	8022564 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022292:	68fb      	ldr	r3, [r7, #12]
 8022294:	699b      	ldr	r3, [r3, #24]
 8022296:	68b9      	ldr	r1, [r7, #8]
 8022298:	68f8      	ldr	r0, [r7, #12]
 802229a:	4798      	blx	r3
 802229c:	4603      	mov	r3, r0
 802229e:	e002      	b.n	80222a6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80222a0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80222a2:	f06f 0301 	mvn.w	r3, #1
}
 80222a6:	4618      	mov	r0, r3
 80222a8:	3718      	adds	r7, #24
 80222aa:	46bd      	mov	sp, r7
 80222ac:	bd80      	pop	{r7, pc}
 80222ae:	bf00      	nop
 80222b0:	08028aa0 	.word	0x08028aa0
 80222b4:	08028b24 	.word	0x08028b24
 80222b8:	08028b58 	.word	0x08028b58

080222bc <__libc_init_array>:
 80222bc:	b570      	push	{r4, r5, r6, lr}
 80222be:	4d0d      	ldr	r5, [pc, #52]	; (80222f4 <__libc_init_array+0x38>)
 80222c0:	4c0d      	ldr	r4, [pc, #52]	; (80222f8 <__libc_init_array+0x3c>)
 80222c2:	1b64      	subs	r4, r4, r5
 80222c4:	10a4      	asrs	r4, r4, #2
 80222c6:	2600      	movs	r6, #0
 80222c8:	42a6      	cmp	r6, r4
 80222ca:	d109      	bne.n	80222e0 <__libc_init_array+0x24>
 80222cc:	4d0b      	ldr	r5, [pc, #44]	; (80222fc <__libc_init_array+0x40>)
 80222ce:	4c0c      	ldr	r4, [pc, #48]	; (8022300 <__libc_init_array+0x44>)
 80222d0:	f001 fbfe 	bl	8023ad0 <_init>
 80222d4:	1b64      	subs	r4, r4, r5
 80222d6:	10a4      	asrs	r4, r4, #2
 80222d8:	2600      	movs	r6, #0
 80222da:	42a6      	cmp	r6, r4
 80222dc:	d105      	bne.n	80222ea <__libc_init_array+0x2e>
 80222de:	bd70      	pop	{r4, r5, r6, pc}
 80222e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80222e4:	4798      	blx	r3
 80222e6:	3601      	adds	r6, #1
 80222e8:	e7ee      	b.n	80222c8 <__libc_init_array+0xc>
 80222ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80222ee:	4798      	blx	r3
 80222f0:	3601      	adds	r6, #1
 80222f2:	e7f2      	b.n	80222da <__libc_init_array+0x1e>
 80222f4:	0802919c 	.word	0x0802919c
 80222f8:	0802919c 	.word	0x0802919c
 80222fc:	0802919c 	.word	0x0802919c
 8022300:	080291a0 	.word	0x080291a0

08022304 <malloc>:
 8022304:	4b02      	ldr	r3, [pc, #8]	; (8022310 <malloc+0xc>)
 8022306:	4601      	mov	r1, r0
 8022308:	6818      	ldr	r0, [r3, #0]
 802230a:	f000 b8b7 	b.w	802247c <_malloc_r>
 802230e:	bf00      	nop
 8022310:	20000140 	.word	0x20000140

08022314 <free>:
 8022314:	4b02      	ldr	r3, [pc, #8]	; (8022320 <free+0xc>)
 8022316:	4601      	mov	r1, r0
 8022318:	6818      	ldr	r0, [r3, #0]
 802231a:	f000 b843 	b.w	80223a4 <_free_r>
 802231e:	bf00      	nop
 8022320:	20000140 	.word	0x20000140

08022324 <memcmp>:
 8022324:	b510      	push	{r4, lr}
 8022326:	3901      	subs	r1, #1
 8022328:	4402      	add	r2, r0
 802232a:	4290      	cmp	r0, r2
 802232c:	d101      	bne.n	8022332 <memcmp+0xe>
 802232e:	2000      	movs	r0, #0
 8022330:	e005      	b.n	802233e <memcmp+0x1a>
 8022332:	7803      	ldrb	r3, [r0, #0]
 8022334:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022338:	42a3      	cmp	r3, r4
 802233a:	d001      	beq.n	8022340 <memcmp+0x1c>
 802233c:	1b18      	subs	r0, r3, r4
 802233e:	bd10      	pop	{r4, pc}
 8022340:	3001      	adds	r0, #1
 8022342:	e7f2      	b.n	802232a <memcmp+0x6>

08022344 <memcpy>:
 8022344:	440a      	add	r2, r1
 8022346:	4291      	cmp	r1, r2
 8022348:	f100 33ff 	add.w	r3, r0, #4294967295
 802234c:	d100      	bne.n	8022350 <memcpy+0xc>
 802234e:	4770      	bx	lr
 8022350:	b510      	push	{r4, lr}
 8022352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022356:	f803 4f01 	strb.w	r4, [r3, #1]!
 802235a:	4291      	cmp	r1, r2
 802235c:	d1f9      	bne.n	8022352 <memcpy+0xe>
 802235e:	bd10      	pop	{r4, pc}

08022360 <memmove>:
 8022360:	4288      	cmp	r0, r1
 8022362:	b510      	push	{r4, lr}
 8022364:	eb01 0402 	add.w	r4, r1, r2
 8022368:	d902      	bls.n	8022370 <memmove+0x10>
 802236a:	4284      	cmp	r4, r0
 802236c:	4623      	mov	r3, r4
 802236e:	d807      	bhi.n	8022380 <memmove+0x20>
 8022370:	1e43      	subs	r3, r0, #1
 8022372:	42a1      	cmp	r1, r4
 8022374:	d008      	beq.n	8022388 <memmove+0x28>
 8022376:	f811 2b01 	ldrb.w	r2, [r1], #1
 802237a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802237e:	e7f8      	b.n	8022372 <memmove+0x12>
 8022380:	4402      	add	r2, r0
 8022382:	4601      	mov	r1, r0
 8022384:	428a      	cmp	r2, r1
 8022386:	d100      	bne.n	802238a <memmove+0x2a>
 8022388:	bd10      	pop	{r4, pc}
 802238a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802238e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022392:	e7f7      	b.n	8022384 <memmove+0x24>

08022394 <memset>:
 8022394:	4402      	add	r2, r0
 8022396:	4603      	mov	r3, r0
 8022398:	4293      	cmp	r3, r2
 802239a:	d100      	bne.n	802239e <memset+0xa>
 802239c:	4770      	bx	lr
 802239e:	f803 1b01 	strb.w	r1, [r3], #1
 80223a2:	e7f9      	b.n	8022398 <memset+0x4>

080223a4 <_free_r>:
 80223a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80223a6:	2900      	cmp	r1, #0
 80223a8:	d044      	beq.n	8022434 <_free_r+0x90>
 80223aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80223ae:	9001      	str	r0, [sp, #4]
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	f1a1 0404 	sub.w	r4, r1, #4
 80223b6:	bfb8      	it	lt
 80223b8:	18e4      	addlt	r4, r4, r3
 80223ba:	f000 fdbb 	bl	8022f34 <__malloc_lock>
 80223be:	4a1e      	ldr	r2, [pc, #120]	; (8022438 <_free_r+0x94>)
 80223c0:	9801      	ldr	r0, [sp, #4]
 80223c2:	6813      	ldr	r3, [r2, #0]
 80223c4:	b933      	cbnz	r3, 80223d4 <_free_r+0x30>
 80223c6:	6063      	str	r3, [r4, #4]
 80223c8:	6014      	str	r4, [r2, #0]
 80223ca:	b003      	add	sp, #12
 80223cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80223d0:	f000 bdb6 	b.w	8022f40 <__malloc_unlock>
 80223d4:	42a3      	cmp	r3, r4
 80223d6:	d908      	bls.n	80223ea <_free_r+0x46>
 80223d8:	6825      	ldr	r5, [r4, #0]
 80223da:	1961      	adds	r1, r4, r5
 80223dc:	428b      	cmp	r3, r1
 80223de:	bf01      	itttt	eq
 80223e0:	6819      	ldreq	r1, [r3, #0]
 80223e2:	685b      	ldreq	r3, [r3, #4]
 80223e4:	1949      	addeq	r1, r1, r5
 80223e6:	6021      	streq	r1, [r4, #0]
 80223e8:	e7ed      	b.n	80223c6 <_free_r+0x22>
 80223ea:	461a      	mov	r2, r3
 80223ec:	685b      	ldr	r3, [r3, #4]
 80223ee:	b10b      	cbz	r3, 80223f4 <_free_r+0x50>
 80223f0:	42a3      	cmp	r3, r4
 80223f2:	d9fa      	bls.n	80223ea <_free_r+0x46>
 80223f4:	6811      	ldr	r1, [r2, #0]
 80223f6:	1855      	adds	r5, r2, r1
 80223f8:	42a5      	cmp	r5, r4
 80223fa:	d10b      	bne.n	8022414 <_free_r+0x70>
 80223fc:	6824      	ldr	r4, [r4, #0]
 80223fe:	4421      	add	r1, r4
 8022400:	1854      	adds	r4, r2, r1
 8022402:	42a3      	cmp	r3, r4
 8022404:	6011      	str	r1, [r2, #0]
 8022406:	d1e0      	bne.n	80223ca <_free_r+0x26>
 8022408:	681c      	ldr	r4, [r3, #0]
 802240a:	685b      	ldr	r3, [r3, #4]
 802240c:	6053      	str	r3, [r2, #4]
 802240e:	4421      	add	r1, r4
 8022410:	6011      	str	r1, [r2, #0]
 8022412:	e7da      	b.n	80223ca <_free_r+0x26>
 8022414:	d902      	bls.n	802241c <_free_r+0x78>
 8022416:	230c      	movs	r3, #12
 8022418:	6003      	str	r3, [r0, #0]
 802241a:	e7d6      	b.n	80223ca <_free_r+0x26>
 802241c:	6825      	ldr	r5, [r4, #0]
 802241e:	1961      	adds	r1, r4, r5
 8022420:	428b      	cmp	r3, r1
 8022422:	bf04      	itt	eq
 8022424:	6819      	ldreq	r1, [r3, #0]
 8022426:	685b      	ldreq	r3, [r3, #4]
 8022428:	6063      	str	r3, [r4, #4]
 802242a:	bf04      	itt	eq
 802242c:	1949      	addeq	r1, r1, r5
 802242e:	6021      	streq	r1, [r4, #0]
 8022430:	6054      	str	r4, [r2, #4]
 8022432:	e7ca      	b.n	80223ca <_free_r+0x26>
 8022434:	b003      	add	sp, #12
 8022436:	bd30      	pop	{r4, r5, pc}
 8022438:	20014294 	.word	0x20014294

0802243c <sbrk_aligned>:
 802243c:	b570      	push	{r4, r5, r6, lr}
 802243e:	4e0e      	ldr	r6, [pc, #56]	; (8022478 <sbrk_aligned+0x3c>)
 8022440:	460c      	mov	r4, r1
 8022442:	6831      	ldr	r1, [r6, #0]
 8022444:	4605      	mov	r5, r0
 8022446:	b911      	cbnz	r1, 802244e <sbrk_aligned+0x12>
 8022448:	f000 f96e 	bl	8022728 <_sbrk_r>
 802244c:	6030      	str	r0, [r6, #0]
 802244e:	4621      	mov	r1, r4
 8022450:	4628      	mov	r0, r5
 8022452:	f000 f969 	bl	8022728 <_sbrk_r>
 8022456:	1c43      	adds	r3, r0, #1
 8022458:	d00a      	beq.n	8022470 <sbrk_aligned+0x34>
 802245a:	1cc4      	adds	r4, r0, #3
 802245c:	f024 0403 	bic.w	r4, r4, #3
 8022460:	42a0      	cmp	r0, r4
 8022462:	d007      	beq.n	8022474 <sbrk_aligned+0x38>
 8022464:	1a21      	subs	r1, r4, r0
 8022466:	4628      	mov	r0, r5
 8022468:	f000 f95e 	bl	8022728 <_sbrk_r>
 802246c:	3001      	adds	r0, #1
 802246e:	d101      	bne.n	8022474 <sbrk_aligned+0x38>
 8022470:	f04f 34ff 	mov.w	r4, #4294967295
 8022474:	4620      	mov	r0, r4
 8022476:	bd70      	pop	{r4, r5, r6, pc}
 8022478:	20014298 	.word	0x20014298

0802247c <_malloc_r>:
 802247c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022480:	1ccd      	adds	r5, r1, #3
 8022482:	f025 0503 	bic.w	r5, r5, #3
 8022486:	3508      	adds	r5, #8
 8022488:	2d0c      	cmp	r5, #12
 802248a:	bf38      	it	cc
 802248c:	250c      	movcc	r5, #12
 802248e:	2d00      	cmp	r5, #0
 8022490:	4607      	mov	r7, r0
 8022492:	db01      	blt.n	8022498 <_malloc_r+0x1c>
 8022494:	42a9      	cmp	r1, r5
 8022496:	d905      	bls.n	80224a4 <_malloc_r+0x28>
 8022498:	230c      	movs	r3, #12
 802249a:	603b      	str	r3, [r7, #0]
 802249c:	2600      	movs	r6, #0
 802249e:	4630      	mov	r0, r6
 80224a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224a4:	4e2e      	ldr	r6, [pc, #184]	; (8022560 <_malloc_r+0xe4>)
 80224a6:	f000 fd45 	bl	8022f34 <__malloc_lock>
 80224aa:	6833      	ldr	r3, [r6, #0]
 80224ac:	461c      	mov	r4, r3
 80224ae:	bb34      	cbnz	r4, 80224fe <_malloc_r+0x82>
 80224b0:	4629      	mov	r1, r5
 80224b2:	4638      	mov	r0, r7
 80224b4:	f7ff ffc2 	bl	802243c <sbrk_aligned>
 80224b8:	1c43      	adds	r3, r0, #1
 80224ba:	4604      	mov	r4, r0
 80224bc:	d14d      	bne.n	802255a <_malloc_r+0xde>
 80224be:	6834      	ldr	r4, [r6, #0]
 80224c0:	4626      	mov	r6, r4
 80224c2:	2e00      	cmp	r6, #0
 80224c4:	d140      	bne.n	8022548 <_malloc_r+0xcc>
 80224c6:	6823      	ldr	r3, [r4, #0]
 80224c8:	4631      	mov	r1, r6
 80224ca:	4638      	mov	r0, r7
 80224cc:	eb04 0803 	add.w	r8, r4, r3
 80224d0:	f000 f92a 	bl	8022728 <_sbrk_r>
 80224d4:	4580      	cmp	r8, r0
 80224d6:	d13a      	bne.n	802254e <_malloc_r+0xd2>
 80224d8:	6821      	ldr	r1, [r4, #0]
 80224da:	3503      	adds	r5, #3
 80224dc:	1a6d      	subs	r5, r5, r1
 80224de:	f025 0503 	bic.w	r5, r5, #3
 80224e2:	3508      	adds	r5, #8
 80224e4:	2d0c      	cmp	r5, #12
 80224e6:	bf38      	it	cc
 80224e8:	250c      	movcc	r5, #12
 80224ea:	4629      	mov	r1, r5
 80224ec:	4638      	mov	r0, r7
 80224ee:	f7ff ffa5 	bl	802243c <sbrk_aligned>
 80224f2:	3001      	adds	r0, #1
 80224f4:	d02b      	beq.n	802254e <_malloc_r+0xd2>
 80224f6:	6823      	ldr	r3, [r4, #0]
 80224f8:	442b      	add	r3, r5
 80224fa:	6023      	str	r3, [r4, #0]
 80224fc:	e00e      	b.n	802251c <_malloc_r+0xa0>
 80224fe:	6822      	ldr	r2, [r4, #0]
 8022500:	1b52      	subs	r2, r2, r5
 8022502:	d41e      	bmi.n	8022542 <_malloc_r+0xc6>
 8022504:	2a0b      	cmp	r2, #11
 8022506:	d916      	bls.n	8022536 <_malloc_r+0xba>
 8022508:	1961      	adds	r1, r4, r5
 802250a:	42a3      	cmp	r3, r4
 802250c:	6025      	str	r5, [r4, #0]
 802250e:	bf18      	it	ne
 8022510:	6059      	strne	r1, [r3, #4]
 8022512:	6863      	ldr	r3, [r4, #4]
 8022514:	bf08      	it	eq
 8022516:	6031      	streq	r1, [r6, #0]
 8022518:	5162      	str	r2, [r4, r5]
 802251a:	604b      	str	r3, [r1, #4]
 802251c:	4638      	mov	r0, r7
 802251e:	f104 060b 	add.w	r6, r4, #11
 8022522:	f000 fd0d 	bl	8022f40 <__malloc_unlock>
 8022526:	f026 0607 	bic.w	r6, r6, #7
 802252a:	1d23      	adds	r3, r4, #4
 802252c:	1af2      	subs	r2, r6, r3
 802252e:	d0b6      	beq.n	802249e <_malloc_r+0x22>
 8022530:	1b9b      	subs	r3, r3, r6
 8022532:	50a3      	str	r3, [r4, r2]
 8022534:	e7b3      	b.n	802249e <_malloc_r+0x22>
 8022536:	6862      	ldr	r2, [r4, #4]
 8022538:	42a3      	cmp	r3, r4
 802253a:	bf0c      	ite	eq
 802253c:	6032      	streq	r2, [r6, #0]
 802253e:	605a      	strne	r2, [r3, #4]
 8022540:	e7ec      	b.n	802251c <_malloc_r+0xa0>
 8022542:	4623      	mov	r3, r4
 8022544:	6864      	ldr	r4, [r4, #4]
 8022546:	e7b2      	b.n	80224ae <_malloc_r+0x32>
 8022548:	4634      	mov	r4, r6
 802254a:	6876      	ldr	r6, [r6, #4]
 802254c:	e7b9      	b.n	80224c2 <_malloc_r+0x46>
 802254e:	230c      	movs	r3, #12
 8022550:	603b      	str	r3, [r7, #0]
 8022552:	4638      	mov	r0, r7
 8022554:	f000 fcf4 	bl	8022f40 <__malloc_unlock>
 8022558:	e7a1      	b.n	802249e <_malloc_r+0x22>
 802255a:	6025      	str	r5, [r4, #0]
 802255c:	e7de      	b.n	802251c <_malloc_r+0xa0>
 802255e:	bf00      	nop
 8022560:	20014294 	.word	0x20014294

08022564 <iprintf>:
 8022564:	b40f      	push	{r0, r1, r2, r3}
 8022566:	4b0a      	ldr	r3, [pc, #40]	; (8022590 <iprintf+0x2c>)
 8022568:	b513      	push	{r0, r1, r4, lr}
 802256a:	681c      	ldr	r4, [r3, #0]
 802256c:	b124      	cbz	r4, 8022578 <iprintf+0x14>
 802256e:	69a3      	ldr	r3, [r4, #24]
 8022570:	b913      	cbnz	r3, 8022578 <iprintf+0x14>
 8022572:	4620      	mov	r0, r4
 8022574:	f000 fbc6 	bl	8022d04 <__sinit>
 8022578:	ab05      	add	r3, sp, #20
 802257a:	9a04      	ldr	r2, [sp, #16]
 802257c:	68a1      	ldr	r1, [r4, #8]
 802257e:	9301      	str	r3, [sp, #4]
 8022580:	4620      	mov	r0, r4
 8022582:	f000 fe69 	bl	8023258 <_vfiprintf_r>
 8022586:	b002      	add	sp, #8
 8022588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802258c:	b004      	add	sp, #16
 802258e:	4770      	bx	lr
 8022590:	20000140 	.word	0x20000140

08022594 <putchar>:
 8022594:	4b09      	ldr	r3, [pc, #36]	; (80225bc <putchar+0x28>)
 8022596:	b513      	push	{r0, r1, r4, lr}
 8022598:	681c      	ldr	r4, [r3, #0]
 802259a:	4601      	mov	r1, r0
 802259c:	b134      	cbz	r4, 80225ac <putchar+0x18>
 802259e:	69a3      	ldr	r3, [r4, #24]
 80225a0:	b923      	cbnz	r3, 80225ac <putchar+0x18>
 80225a2:	9001      	str	r0, [sp, #4]
 80225a4:	4620      	mov	r0, r4
 80225a6:	f000 fbad 	bl	8022d04 <__sinit>
 80225aa:	9901      	ldr	r1, [sp, #4]
 80225ac:	68a2      	ldr	r2, [r4, #8]
 80225ae:	4620      	mov	r0, r4
 80225b0:	b002      	add	sp, #8
 80225b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225b6:	f001 b913 	b.w	80237e0 <_putc_r>
 80225ba:	bf00      	nop
 80225bc:	20000140 	.word	0x20000140

080225c0 <_puts_r>:
 80225c0:	b570      	push	{r4, r5, r6, lr}
 80225c2:	460e      	mov	r6, r1
 80225c4:	4605      	mov	r5, r0
 80225c6:	b118      	cbz	r0, 80225d0 <_puts_r+0x10>
 80225c8:	6983      	ldr	r3, [r0, #24]
 80225ca:	b90b      	cbnz	r3, 80225d0 <_puts_r+0x10>
 80225cc:	f000 fb9a 	bl	8022d04 <__sinit>
 80225d0:	69ab      	ldr	r3, [r5, #24]
 80225d2:	68ac      	ldr	r4, [r5, #8]
 80225d4:	b913      	cbnz	r3, 80225dc <_puts_r+0x1c>
 80225d6:	4628      	mov	r0, r5
 80225d8:	f000 fb94 	bl	8022d04 <__sinit>
 80225dc:	4b2c      	ldr	r3, [pc, #176]	; (8022690 <_puts_r+0xd0>)
 80225de:	429c      	cmp	r4, r3
 80225e0:	d120      	bne.n	8022624 <_puts_r+0x64>
 80225e2:	686c      	ldr	r4, [r5, #4]
 80225e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80225e6:	07db      	lsls	r3, r3, #31
 80225e8:	d405      	bmi.n	80225f6 <_puts_r+0x36>
 80225ea:	89a3      	ldrh	r3, [r4, #12]
 80225ec:	0598      	lsls	r0, r3, #22
 80225ee:	d402      	bmi.n	80225f6 <_puts_r+0x36>
 80225f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80225f2:	f000 fc37 	bl	8022e64 <__retarget_lock_acquire_recursive>
 80225f6:	89a3      	ldrh	r3, [r4, #12]
 80225f8:	0719      	lsls	r1, r3, #28
 80225fa:	d51d      	bpl.n	8022638 <_puts_r+0x78>
 80225fc:	6923      	ldr	r3, [r4, #16]
 80225fe:	b1db      	cbz	r3, 8022638 <_puts_r+0x78>
 8022600:	3e01      	subs	r6, #1
 8022602:	68a3      	ldr	r3, [r4, #8]
 8022604:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022608:	3b01      	subs	r3, #1
 802260a:	60a3      	str	r3, [r4, #8]
 802260c:	bb39      	cbnz	r1, 802265e <_puts_r+0x9e>
 802260e:	2b00      	cmp	r3, #0
 8022610:	da38      	bge.n	8022684 <_puts_r+0xc4>
 8022612:	4622      	mov	r2, r4
 8022614:	210a      	movs	r1, #10
 8022616:	4628      	mov	r0, r5
 8022618:	f000 f97c 	bl	8022914 <__swbuf_r>
 802261c:	3001      	adds	r0, #1
 802261e:	d011      	beq.n	8022644 <_puts_r+0x84>
 8022620:	250a      	movs	r5, #10
 8022622:	e011      	b.n	8022648 <_puts_r+0x88>
 8022624:	4b1b      	ldr	r3, [pc, #108]	; (8022694 <_puts_r+0xd4>)
 8022626:	429c      	cmp	r4, r3
 8022628:	d101      	bne.n	802262e <_puts_r+0x6e>
 802262a:	68ac      	ldr	r4, [r5, #8]
 802262c:	e7da      	b.n	80225e4 <_puts_r+0x24>
 802262e:	4b1a      	ldr	r3, [pc, #104]	; (8022698 <_puts_r+0xd8>)
 8022630:	429c      	cmp	r4, r3
 8022632:	bf08      	it	eq
 8022634:	68ec      	ldreq	r4, [r5, #12]
 8022636:	e7d5      	b.n	80225e4 <_puts_r+0x24>
 8022638:	4621      	mov	r1, r4
 802263a:	4628      	mov	r0, r5
 802263c:	f000 f9bc 	bl	80229b8 <__swsetup_r>
 8022640:	2800      	cmp	r0, #0
 8022642:	d0dd      	beq.n	8022600 <_puts_r+0x40>
 8022644:	f04f 35ff 	mov.w	r5, #4294967295
 8022648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802264a:	07da      	lsls	r2, r3, #31
 802264c:	d405      	bmi.n	802265a <_puts_r+0x9a>
 802264e:	89a3      	ldrh	r3, [r4, #12]
 8022650:	059b      	lsls	r3, r3, #22
 8022652:	d402      	bmi.n	802265a <_puts_r+0x9a>
 8022654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022656:	f000 fc06 	bl	8022e66 <__retarget_lock_release_recursive>
 802265a:	4628      	mov	r0, r5
 802265c:	bd70      	pop	{r4, r5, r6, pc}
 802265e:	2b00      	cmp	r3, #0
 8022660:	da04      	bge.n	802266c <_puts_r+0xac>
 8022662:	69a2      	ldr	r2, [r4, #24]
 8022664:	429a      	cmp	r2, r3
 8022666:	dc06      	bgt.n	8022676 <_puts_r+0xb6>
 8022668:	290a      	cmp	r1, #10
 802266a:	d004      	beq.n	8022676 <_puts_r+0xb6>
 802266c:	6823      	ldr	r3, [r4, #0]
 802266e:	1c5a      	adds	r2, r3, #1
 8022670:	6022      	str	r2, [r4, #0]
 8022672:	7019      	strb	r1, [r3, #0]
 8022674:	e7c5      	b.n	8022602 <_puts_r+0x42>
 8022676:	4622      	mov	r2, r4
 8022678:	4628      	mov	r0, r5
 802267a:	f000 f94b 	bl	8022914 <__swbuf_r>
 802267e:	3001      	adds	r0, #1
 8022680:	d1bf      	bne.n	8022602 <_puts_r+0x42>
 8022682:	e7df      	b.n	8022644 <_puts_r+0x84>
 8022684:	6823      	ldr	r3, [r4, #0]
 8022686:	250a      	movs	r5, #10
 8022688:	1c5a      	adds	r2, r3, #1
 802268a:	6022      	str	r2, [r4, #0]
 802268c:	701d      	strb	r5, [r3, #0]
 802268e:	e7db      	b.n	8022648 <_puts_r+0x88>
 8022690:	08029120 	.word	0x08029120
 8022694:	08029140 	.word	0x08029140
 8022698:	08029100 	.word	0x08029100

0802269c <puts>:
 802269c:	4b02      	ldr	r3, [pc, #8]	; (80226a8 <puts+0xc>)
 802269e:	4601      	mov	r1, r0
 80226a0:	6818      	ldr	r0, [r3, #0]
 80226a2:	f7ff bf8d 	b.w	80225c0 <_puts_r>
 80226a6:	bf00      	nop
 80226a8:	20000140 	.word	0x20000140

080226ac <rand>:
 80226ac:	4b16      	ldr	r3, [pc, #88]	; (8022708 <rand+0x5c>)
 80226ae:	b510      	push	{r4, lr}
 80226b0:	681c      	ldr	r4, [r3, #0]
 80226b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80226b4:	b9b3      	cbnz	r3, 80226e4 <rand+0x38>
 80226b6:	2018      	movs	r0, #24
 80226b8:	f7ff fe24 	bl	8022304 <malloc>
 80226bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80226be:	b928      	cbnz	r0, 80226cc <rand+0x20>
 80226c0:	4602      	mov	r2, r0
 80226c2:	4b12      	ldr	r3, [pc, #72]	; (802270c <rand+0x60>)
 80226c4:	4812      	ldr	r0, [pc, #72]	; (8022710 <rand+0x64>)
 80226c6:	214e      	movs	r1, #78	; 0x4e
 80226c8:	f000 f9e4 	bl	8022a94 <__assert_func>
 80226cc:	4a11      	ldr	r2, [pc, #68]	; (8022714 <rand+0x68>)
 80226ce:	4b12      	ldr	r3, [pc, #72]	; (8022718 <rand+0x6c>)
 80226d0:	e9c0 2300 	strd	r2, r3, [r0]
 80226d4:	4b11      	ldr	r3, [pc, #68]	; (802271c <rand+0x70>)
 80226d6:	6083      	str	r3, [r0, #8]
 80226d8:	230b      	movs	r3, #11
 80226da:	8183      	strh	r3, [r0, #12]
 80226dc:	2201      	movs	r2, #1
 80226de:	2300      	movs	r3, #0
 80226e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80226e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80226e6:	4a0e      	ldr	r2, [pc, #56]	; (8022720 <rand+0x74>)
 80226e8:	6920      	ldr	r0, [r4, #16]
 80226ea:	6963      	ldr	r3, [r4, #20]
 80226ec:	490d      	ldr	r1, [pc, #52]	; (8022724 <rand+0x78>)
 80226ee:	4342      	muls	r2, r0
 80226f0:	fb01 2203 	mla	r2, r1, r3, r2
 80226f4:	fba0 0101 	umull	r0, r1, r0, r1
 80226f8:	1c43      	adds	r3, r0, #1
 80226fa:	eb42 0001 	adc.w	r0, r2, r1
 80226fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8022702:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022706:	bd10      	pop	{r4, pc}
 8022708:	20000140 	.word	0x20000140
 802270c:	08029050 	.word	0x08029050
 8022710:	08029067 	.word	0x08029067
 8022714:	abcd330e 	.word	0xabcd330e
 8022718:	e66d1234 	.word	0xe66d1234
 802271c:	0005deec 	.word	0x0005deec
 8022720:	5851f42d 	.word	0x5851f42d
 8022724:	4c957f2d 	.word	0x4c957f2d

08022728 <_sbrk_r>:
 8022728:	b538      	push	{r3, r4, r5, lr}
 802272a:	4d06      	ldr	r5, [pc, #24]	; (8022744 <_sbrk_r+0x1c>)
 802272c:	2300      	movs	r3, #0
 802272e:	4604      	mov	r4, r0
 8022730:	4608      	mov	r0, r1
 8022732:	602b      	str	r3, [r5, #0]
 8022734:	f7f2 f888 	bl	8014848 <_sbrk>
 8022738:	1c43      	adds	r3, r0, #1
 802273a:	d102      	bne.n	8022742 <_sbrk_r+0x1a>
 802273c:	682b      	ldr	r3, [r5, #0]
 802273e:	b103      	cbz	r3, 8022742 <_sbrk_r+0x1a>
 8022740:	6023      	str	r3, [r4, #0]
 8022742:	bd38      	pop	{r3, r4, r5, pc}
 8022744:	2001429c 	.word	0x2001429c

08022748 <setvbuf>:
 8022748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802274c:	461d      	mov	r5, r3
 802274e:	4b5d      	ldr	r3, [pc, #372]	; (80228c4 <setvbuf+0x17c>)
 8022750:	681f      	ldr	r7, [r3, #0]
 8022752:	4604      	mov	r4, r0
 8022754:	460e      	mov	r6, r1
 8022756:	4690      	mov	r8, r2
 8022758:	b127      	cbz	r7, 8022764 <setvbuf+0x1c>
 802275a:	69bb      	ldr	r3, [r7, #24]
 802275c:	b913      	cbnz	r3, 8022764 <setvbuf+0x1c>
 802275e:	4638      	mov	r0, r7
 8022760:	f000 fad0 	bl	8022d04 <__sinit>
 8022764:	4b58      	ldr	r3, [pc, #352]	; (80228c8 <setvbuf+0x180>)
 8022766:	429c      	cmp	r4, r3
 8022768:	d167      	bne.n	802283a <setvbuf+0xf2>
 802276a:	687c      	ldr	r4, [r7, #4]
 802276c:	f1b8 0f02 	cmp.w	r8, #2
 8022770:	d006      	beq.n	8022780 <setvbuf+0x38>
 8022772:	f1b8 0f01 	cmp.w	r8, #1
 8022776:	f200 809f 	bhi.w	80228b8 <setvbuf+0x170>
 802277a:	2d00      	cmp	r5, #0
 802277c:	f2c0 809c 	blt.w	80228b8 <setvbuf+0x170>
 8022780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022782:	07db      	lsls	r3, r3, #31
 8022784:	d405      	bmi.n	8022792 <setvbuf+0x4a>
 8022786:	89a3      	ldrh	r3, [r4, #12]
 8022788:	0598      	lsls	r0, r3, #22
 802278a:	d402      	bmi.n	8022792 <setvbuf+0x4a>
 802278c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802278e:	f000 fb69 	bl	8022e64 <__retarget_lock_acquire_recursive>
 8022792:	4621      	mov	r1, r4
 8022794:	4638      	mov	r0, r7
 8022796:	f000 fa21 	bl	8022bdc <_fflush_r>
 802279a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802279c:	b141      	cbz	r1, 80227b0 <setvbuf+0x68>
 802279e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80227a2:	4299      	cmp	r1, r3
 80227a4:	d002      	beq.n	80227ac <setvbuf+0x64>
 80227a6:	4638      	mov	r0, r7
 80227a8:	f7ff fdfc 	bl	80223a4 <_free_r>
 80227ac:	2300      	movs	r3, #0
 80227ae:	6363      	str	r3, [r4, #52]	; 0x34
 80227b0:	2300      	movs	r3, #0
 80227b2:	61a3      	str	r3, [r4, #24]
 80227b4:	6063      	str	r3, [r4, #4]
 80227b6:	89a3      	ldrh	r3, [r4, #12]
 80227b8:	0619      	lsls	r1, r3, #24
 80227ba:	d503      	bpl.n	80227c4 <setvbuf+0x7c>
 80227bc:	6921      	ldr	r1, [r4, #16]
 80227be:	4638      	mov	r0, r7
 80227c0:	f7ff fdf0 	bl	80223a4 <_free_r>
 80227c4:	89a3      	ldrh	r3, [r4, #12]
 80227c6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80227ca:	f023 0303 	bic.w	r3, r3, #3
 80227ce:	f1b8 0f02 	cmp.w	r8, #2
 80227d2:	81a3      	strh	r3, [r4, #12]
 80227d4:	d06c      	beq.n	80228b0 <setvbuf+0x168>
 80227d6:	ab01      	add	r3, sp, #4
 80227d8:	466a      	mov	r2, sp
 80227da:	4621      	mov	r1, r4
 80227dc:	4638      	mov	r0, r7
 80227de:	f000 fb43 	bl	8022e68 <__swhatbuf_r>
 80227e2:	89a3      	ldrh	r3, [r4, #12]
 80227e4:	4318      	orrs	r0, r3
 80227e6:	81a0      	strh	r0, [r4, #12]
 80227e8:	2d00      	cmp	r5, #0
 80227ea:	d130      	bne.n	802284e <setvbuf+0x106>
 80227ec:	9d00      	ldr	r5, [sp, #0]
 80227ee:	4628      	mov	r0, r5
 80227f0:	f7ff fd88 	bl	8022304 <malloc>
 80227f4:	4606      	mov	r6, r0
 80227f6:	2800      	cmp	r0, #0
 80227f8:	d155      	bne.n	80228a6 <setvbuf+0x15e>
 80227fa:	f8dd 9000 	ldr.w	r9, [sp]
 80227fe:	45a9      	cmp	r9, r5
 8022800:	d14a      	bne.n	8022898 <setvbuf+0x150>
 8022802:	f04f 35ff 	mov.w	r5, #4294967295
 8022806:	2200      	movs	r2, #0
 8022808:	60a2      	str	r2, [r4, #8]
 802280a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 802280e:	6022      	str	r2, [r4, #0]
 8022810:	6122      	str	r2, [r4, #16]
 8022812:	2201      	movs	r2, #1
 8022814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022818:	6162      	str	r2, [r4, #20]
 802281a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802281c:	f043 0302 	orr.w	r3, r3, #2
 8022820:	07d2      	lsls	r2, r2, #31
 8022822:	81a3      	strh	r3, [r4, #12]
 8022824:	d405      	bmi.n	8022832 <setvbuf+0xea>
 8022826:	f413 7f00 	tst.w	r3, #512	; 0x200
 802282a:	d102      	bne.n	8022832 <setvbuf+0xea>
 802282c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802282e:	f000 fb1a 	bl	8022e66 <__retarget_lock_release_recursive>
 8022832:	4628      	mov	r0, r5
 8022834:	b003      	add	sp, #12
 8022836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802283a:	4b24      	ldr	r3, [pc, #144]	; (80228cc <setvbuf+0x184>)
 802283c:	429c      	cmp	r4, r3
 802283e:	d101      	bne.n	8022844 <setvbuf+0xfc>
 8022840:	68bc      	ldr	r4, [r7, #8]
 8022842:	e793      	b.n	802276c <setvbuf+0x24>
 8022844:	4b22      	ldr	r3, [pc, #136]	; (80228d0 <setvbuf+0x188>)
 8022846:	429c      	cmp	r4, r3
 8022848:	bf08      	it	eq
 802284a:	68fc      	ldreq	r4, [r7, #12]
 802284c:	e78e      	b.n	802276c <setvbuf+0x24>
 802284e:	2e00      	cmp	r6, #0
 8022850:	d0cd      	beq.n	80227ee <setvbuf+0xa6>
 8022852:	69bb      	ldr	r3, [r7, #24]
 8022854:	b913      	cbnz	r3, 802285c <setvbuf+0x114>
 8022856:	4638      	mov	r0, r7
 8022858:	f000 fa54 	bl	8022d04 <__sinit>
 802285c:	f1b8 0f01 	cmp.w	r8, #1
 8022860:	bf08      	it	eq
 8022862:	89a3      	ldrheq	r3, [r4, #12]
 8022864:	6026      	str	r6, [r4, #0]
 8022866:	bf04      	itt	eq
 8022868:	f043 0301 	orreq.w	r3, r3, #1
 802286c:	81a3      	strheq	r3, [r4, #12]
 802286e:	89a2      	ldrh	r2, [r4, #12]
 8022870:	f012 0308 	ands.w	r3, r2, #8
 8022874:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8022878:	d01c      	beq.n	80228b4 <setvbuf+0x16c>
 802287a:	07d3      	lsls	r3, r2, #31
 802287c:	bf41      	itttt	mi
 802287e:	2300      	movmi	r3, #0
 8022880:	426d      	negmi	r5, r5
 8022882:	60a3      	strmi	r3, [r4, #8]
 8022884:	61a5      	strmi	r5, [r4, #24]
 8022886:	bf58      	it	pl
 8022888:	60a5      	strpl	r5, [r4, #8]
 802288a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 802288c:	f015 0501 	ands.w	r5, r5, #1
 8022890:	d115      	bne.n	80228be <setvbuf+0x176>
 8022892:	f412 7f00 	tst.w	r2, #512	; 0x200
 8022896:	e7c8      	b.n	802282a <setvbuf+0xe2>
 8022898:	4648      	mov	r0, r9
 802289a:	f7ff fd33 	bl	8022304 <malloc>
 802289e:	4606      	mov	r6, r0
 80228a0:	2800      	cmp	r0, #0
 80228a2:	d0ae      	beq.n	8022802 <setvbuf+0xba>
 80228a4:	464d      	mov	r5, r9
 80228a6:	89a3      	ldrh	r3, [r4, #12]
 80228a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80228ac:	81a3      	strh	r3, [r4, #12]
 80228ae:	e7d0      	b.n	8022852 <setvbuf+0x10a>
 80228b0:	2500      	movs	r5, #0
 80228b2:	e7a8      	b.n	8022806 <setvbuf+0xbe>
 80228b4:	60a3      	str	r3, [r4, #8]
 80228b6:	e7e8      	b.n	802288a <setvbuf+0x142>
 80228b8:	f04f 35ff 	mov.w	r5, #4294967295
 80228bc:	e7b9      	b.n	8022832 <setvbuf+0xea>
 80228be:	2500      	movs	r5, #0
 80228c0:	e7b7      	b.n	8022832 <setvbuf+0xea>
 80228c2:	bf00      	nop
 80228c4:	20000140 	.word	0x20000140
 80228c8:	08029120 	.word	0x08029120
 80228cc:	08029140 	.word	0x08029140
 80228d0:	08029100 	.word	0x08029100

080228d4 <siprintf>:
 80228d4:	b40e      	push	{r1, r2, r3}
 80228d6:	b500      	push	{lr}
 80228d8:	b09c      	sub	sp, #112	; 0x70
 80228da:	ab1d      	add	r3, sp, #116	; 0x74
 80228dc:	9002      	str	r0, [sp, #8]
 80228de:	9006      	str	r0, [sp, #24]
 80228e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80228e4:	4809      	ldr	r0, [pc, #36]	; (802290c <siprintf+0x38>)
 80228e6:	9107      	str	r1, [sp, #28]
 80228e8:	9104      	str	r1, [sp, #16]
 80228ea:	4909      	ldr	r1, [pc, #36]	; (8022910 <siprintf+0x3c>)
 80228ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80228f0:	9105      	str	r1, [sp, #20]
 80228f2:	6800      	ldr	r0, [r0, #0]
 80228f4:	9301      	str	r3, [sp, #4]
 80228f6:	a902      	add	r1, sp, #8
 80228f8:	f000 fb84 	bl	8023004 <_svfiprintf_r>
 80228fc:	9b02      	ldr	r3, [sp, #8]
 80228fe:	2200      	movs	r2, #0
 8022900:	701a      	strb	r2, [r3, #0]
 8022902:	b01c      	add	sp, #112	; 0x70
 8022904:	f85d eb04 	ldr.w	lr, [sp], #4
 8022908:	b003      	add	sp, #12
 802290a:	4770      	bx	lr
 802290c:	20000140 	.word	0x20000140
 8022910:	ffff0208 	.word	0xffff0208

08022914 <__swbuf_r>:
 8022914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022916:	460e      	mov	r6, r1
 8022918:	4614      	mov	r4, r2
 802291a:	4605      	mov	r5, r0
 802291c:	b118      	cbz	r0, 8022926 <__swbuf_r+0x12>
 802291e:	6983      	ldr	r3, [r0, #24]
 8022920:	b90b      	cbnz	r3, 8022926 <__swbuf_r+0x12>
 8022922:	f000 f9ef 	bl	8022d04 <__sinit>
 8022926:	4b21      	ldr	r3, [pc, #132]	; (80229ac <__swbuf_r+0x98>)
 8022928:	429c      	cmp	r4, r3
 802292a:	d12b      	bne.n	8022984 <__swbuf_r+0x70>
 802292c:	686c      	ldr	r4, [r5, #4]
 802292e:	69a3      	ldr	r3, [r4, #24]
 8022930:	60a3      	str	r3, [r4, #8]
 8022932:	89a3      	ldrh	r3, [r4, #12]
 8022934:	071a      	lsls	r2, r3, #28
 8022936:	d52f      	bpl.n	8022998 <__swbuf_r+0x84>
 8022938:	6923      	ldr	r3, [r4, #16]
 802293a:	b36b      	cbz	r3, 8022998 <__swbuf_r+0x84>
 802293c:	6923      	ldr	r3, [r4, #16]
 802293e:	6820      	ldr	r0, [r4, #0]
 8022940:	1ac0      	subs	r0, r0, r3
 8022942:	6963      	ldr	r3, [r4, #20]
 8022944:	b2f6      	uxtb	r6, r6
 8022946:	4283      	cmp	r3, r0
 8022948:	4637      	mov	r7, r6
 802294a:	dc04      	bgt.n	8022956 <__swbuf_r+0x42>
 802294c:	4621      	mov	r1, r4
 802294e:	4628      	mov	r0, r5
 8022950:	f000 f944 	bl	8022bdc <_fflush_r>
 8022954:	bb30      	cbnz	r0, 80229a4 <__swbuf_r+0x90>
 8022956:	68a3      	ldr	r3, [r4, #8]
 8022958:	3b01      	subs	r3, #1
 802295a:	60a3      	str	r3, [r4, #8]
 802295c:	6823      	ldr	r3, [r4, #0]
 802295e:	1c5a      	adds	r2, r3, #1
 8022960:	6022      	str	r2, [r4, #0]
 8022962:	701e      	strb	r6, [r3, #0]
 8022964:	6963      	ldr	r3, [r4, #20]
 8022966:	3001      	adds	r0, #1
 8022968:	4283      	cmp	r3, r0
 802296a:	d004      	beq.n	8022976 <__swbuf_r+0x62>
 802296c:	89a3      	ldrh	r3, [r4, #12]
 802296e:	07db      	lsls	r3, r3, #31
 8022970:	d506      	bpl.n	8022980 <__swbuf_r+0x6c>
 8022972:	2e0a      	cmp	r6, #10
 8022974:	d104      	bne.n	8022980 <__swbuf_r+0x6c>
 8022976:	4621      	mov	r1, r4
 8022978:	4628      	mov	r0, r5
 802297a:	f000 f92f 	bl	8022bdc <_fflush_r>
 802297e:	b988      	cbnz	r0, 80229a4 <__swbuf_r+0x90>
 8022980:	4638      	mov	r0, r7
 8022982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022984:	4b0a      	ldr	r3, [pc, #40]	; (80229b0 <__swbuf_r+0x9c>)
 8022986:	429c      	cmp	r4, r3
 8022988:	d101      	bne.n	802298e <__swbuf_r+0x7a>
 802298a:	68ac      	ldr	r4, [r5, #8]
 802298c:	e7cf      	b.n	802292e <__swbuf_r+0x1a>
 802298e:	4b09      	ldr	r3, [pc, #36]	; (80229b4 <__swbuf_r+0xa0>)
 8022990:	429c      	cmp	r4, r3
 8022992:	bf08      	it	eq
 8022994:	68ec      	ldreq	r4, [r5, #12]
 8022996:	e7ca      	b.n	802292e <__swbuf_r+0x1a>
 8022998:	4621      	mov	r1, r4
 802299a:	4628      	mov	r0, r5
 802299c:	f000 f80c 	bl	80229b8 <__swsetup_r>
 80229a0:	2800      	cmp	r0, #0
 80229a2:	d0cb      	beq.n	802293c <__swbuf_r+0x28>
 80229a4:	f04f 37ff 	mov.w	r7, #4294967295
 80229a8:	e7ea      	b.n	8022980 <__swbuf_r+0x6c>
 80229aa:	bf00      	nop
 80229ac:	08029120 	.word	0x08029120
 80229b0:	08029140 	.word	0x08029140
 80229b4:	08029100 	.word	0x08029100

080229b8 <__swsetup_r>:
 80229b8:	4b32      	ldr	r3, [pc, #200]	; (8022a84 <__swsetup_r+0xcc>)
 80229ba:	b570      	push	{r4, r5, r6, lr}
 80229bc:	681d      	ldr	r5, [r3, #0]
 80229be:	4606      	mov	r6, r0
 80229c0:	460c      	mov	r4, r1
 80229c2:	b125      	cbz	r5, 80229ce <__swsetup_r+0x16>
 80229c4:	69ab      	ldr	r3, [r5, #24]
 80229c6:	b913      	cbnz	r3, 80229ce <__swsetup_r+0x16>
 80229c8:	4628      	mov	r0, r5
 80229ca:	f000 f99b 	bl	8022d04 <__sinit>
 80229ce:	4b2e      	ldr	r3, [pc, #184]	; (8022a88 <__swsetup_r+0xd0>)
 80229d0:	429c      	cmp	r4, r3
 80229d2:	d10f      	bne.n	80229f4 <__swsetup_r+0x3c>
 80229d4:	686c      	ldr	r4, [r5, #4]
 80229d6:	89a3      	ldrh	r3, [r4, #12]
 80229d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80229dc:	0719      	lsls	r1, r3, #28
 80229de:	d42c      	bmi.n	8022a3a <__swsetup_r+0x82>
 80229e0:	06dd      	lsls	r5, r3, #27
 80229e2:	d411      	bmi.n	8022a08 <__swsetup_r+0x50>
 80229e4:	2309      	movs	r3, #9
 80229e6:	6033      	str	r3, [r6, #0]
 80229e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80229ec:	81a3      	strh	r3, [r4, #12]
 80229ee:	f04f 30ff 	mov.w	r0, #4294967295
 80229f2:	e03e      	b.n	8022a72 <__swsetup_r+0xba>
 80229f4:	4b25      	ldr	r3, [pc, #148]	; (8022a8c <__swsetup_r+0xd4>)
 80229f6:	429c      	cmp	r4, r3
 80229f8:	d101      	bne.n	80229fe <__swsetup_r+0x46>
 80229fa:	68ac      	ldr	r4, [r5, #8]
 80229fc:	e7eb      	b.n	80229d6 <__swsetup_r+0x1e>
 80229fe:	4b24      	ldr	r3, [pc, #144]	; (8022a90 <__swsetup_r+0xd8>)
 8022a00:	429c      	cmp	r4, r3
 8022a02:	bf08      	it	eq
 8022a04:	68ec      	ldreq	r4, [r5, #12]
 8022a06:	e7e6      	b.n	80229d6 <__swsetup_r+0x1e>
 8022a08:	0758      	lsls	r0, r3, #29
 8022a0a:	d512      	bpl.n	8022a32 <__swsetup_r+0x7a>
 8022a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022a0e:	b141      	cbz	r1, 8022a22 <__swsetup_r+0x6a>
 8022a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022a14:	4299      	cmp	r1, r3
 8022a16:	d002      	beq.n	8022a1e <__swsetup_r+0x66>
 8022a18:	4630      	mov	r0, r6
 8022a1a:	f7ff fcc3 	bl	80223a4 <_free_r>
 8022a1e:	2300      	movs	r3, #0
 8022a20:	6363      	str	r3, [r4, #52]	; 0x34
 8022a22:	89a3      	ldrh	r3, [r4, #12]
 8022a24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022a28:	81a3      	strh	r3, [r4, #12]
 8022a2a:	2300      	movs	r3, #0
 8022a2c:	6063      	str	r3, [r4, #4]
 8022a2e:	6923      	ldr	r3, [r4, #16]
 8022a30:	6023      	str	r3, [r4, #0]
 8022a32:	89a3      	ldrh	r3, [r4, #12]
 8022a34:	f043 0308 	orr.w	r3, r3, #8
 8022a38:	81a3      	strh	r3, [r4, #12]
 8022a3a:	6923      	ldr	r3, [r4, #16]
 8022a3c:	b94b      	cbnz	r3, 8022a52 <__swsetup_r+0x9a>
 8022a3e:	89a3      	ldrh	r3, [r4, #12]
 8022a40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022a48:	d003      	beq.n	8022a52 <__swsetup_r+0x9a>
 8022a4a:	4621      	mov	r1, r4
 8022a4c:	4630      	mov	r0, r6
 8022a4e:	f000 fa31 	bl	8022eb4 <__smakebuf_r>
 8022a52:	89a0      	ldrh	r0, [r4, #12]
 8022a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022a58:	f010 0301 	ands.w	r3, r0, #1
 8022a5c:	d00a      	beq.n	8022a74 <__swsetup_r+0xbc>
 8022a5e:	2300      	movs	r3, #0
 8022a60:	60a3      	str	r3, [r4, #8]
 8022a62:	6963      	ldr	r3, [r4, #20]
 8022a64:	425b      	negs	r3, r3
 8022a66:	61a3      	str	r3, [r4, #24]
 8022a68:	6923      	ldr	r3, [r4, #16]
 8022a6a:	b943      	cbnz	r3, 8022a7e <__swsetup_r+0xc6>
 8022a6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022a70:	d1ba      	bne.n	80229e8 <__swsetup_r+0x30>
 8022a72:	bd70      	pop	{r4, r5, r6, pc}
 8022a74:	0781      	lsls	r1, r0, #30
 8022a76:	bf58      	it	pl
 8022a78:	6963      	ldrpl	r3, [r4, #20]
 8022a7a:	60a3      	str	r3, [r4, #8]
 8022a7c:	e7f4      	b.n	8022a68 <__swsetup_r+0xb0>
 8022a7e:	2000      	movs	r0, #0
 8022a80:	e7f7      	b.n	8022a72 <__swsetup_r+0xba>
 8022a82:	bf00      	nop
 8022a84:	20000140 	.word	0x20000140
 8022a88:	08029120 	.word	0x08029120
 8022a8c:	08029140 	.word	0x08029140
 8022a90:	08029100 	.word	0x08029100

08022a94 <__assert_func>:
 8022a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022a96:	4614      	mov	r4, r2
 8022a98:	461a      	mov	r2, r3
 8022a9a:	4b09      	ldr	r3, [pc, #36]	; (8022ac0 <__assert_func+0x2c>)
 8022a9c:	681b      	ldr	r3, [r3, #0]
 8022a9e:	4605      	mov	r5, r0
 8022aa0:	68d8      	ldr	r0, [r3, #12]
 8022aa2:	b14c      	cbz	r4, 8022ab8 <__assert_func+0x24>
 8022aa4:	4b07      	ldr	r3, [pc, #28]	; (8022ac4 <__assert_func+0x30>)
 8022aa6:	9100      	str	r1, [sp, #0]
 8022aa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022aac:	4906      	ldr	r1, [pc, #24]	; (8022ac8 <__assert_func+0x34>)
 8022aae:	462b      	mov	r3, r5
 8022ab0:	f000 f9a6 	bl	8022e00 <fiprintf>
 8022ab4:	f000 ff32 	bl	802391c <abort>
 8022ab8:	4b04      	ldr	r3, [pc, #16]	; (8022acc <__assert_func+0x38>)
 8022aba:	461c      	mov	r4, r3
 8022abc:	e7f3      	b.n	8022aa6 <__assert_func+0x12>
 8022abe:	bf00      	nop
 8022ac0:	20000140 	.word	0x20000140
 8022ac4:	080290c2 	.word	0x080290c2
 8022ac8:	080290cf 	.word	0x080290cf
 8022acc:	080290fd 	.word	0x080290fd

08022ad0 <__sflush_r>:
 8022ad0:	898a      	ldrh	r2, [r1, #12]
 8022ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ad6:	4605      	mov	r5, r0
 8022ad8:	0710      	lsls	r0, r2, #28
 8022ada:	460c      	mov	r4, r1
 8022adc:	d458      	bmi.n	8022b90 <__sflush_r+0xc0>
 8022ade:	684b      	ldr	r3, [r1, #4]
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	dc05      	bgt.n	8022af0 <__sflush_r+0x20>
 8022ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022ae6:	2b00      	cmp	r3, #0
 8022ae8:	dc02      	bgt.n	8022af0 <__sflush_r+0x20>
 8022aea:	2000      	movs	r0, #0
 8022aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022af2:	2e00      	cmp	r6, #0
 8022af4:	d0f9      	beq.n	8022aea <__sflush_r+0x1a>
 8022af6:	2300      	movs	r3, #0
 8022af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022afc:	682f      	ldr	r7, [r5, #0]
 8022afe:	602b      	str	r3, [r5, #0]
 8022b00:	d032      	beq.n	8022b68 <__sflush_r+0x98>
 8022b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022b04:	89a3      	ldrh	r3, [r4, #12]
 8022b06:	075a      	lsls	r2, r3, #29
 8022b08:	d505      	bpl.n	8022b16 <__sflush_r+0x46>
 8022b0a:	6863      	ldr	r3, [r4, #4]
 8022b0c:	1ac0      	subs	r0, r0, r3
 8022b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022b10:	b10b      	cbz	r3, 8022b16 <__sflush_r+0x46>
 8022b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022b14:	1ac0      	subs	r0, r0, r3
 8022b16:	2300      	movs	r3, #0
 8022b18:	4602      	mov	r2, r0
 8022b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022b1c:	6a21      	ldr	r1, [r4, #32]
 8022b1e:	4628      	mov	r0, r5
 8022b20:	47b0      	blx	r6
 8022b22:	1c43      	adds	r3, r0, #1
 8022b24:	89a3      	ldrh	r3, [r4, #12]
 8022b26:	d106      	bne.n	8022b36 <__sflush_r+0x66>
 8022b28:	6829      	ldr	r1, [r5, #0]
 8022b2a:	291d      	cmp	r1, #29
 8022b2c:	d82c      	bhi.n	8022b88 <__sflush_r+0xb8>
 8022b2e:	4a2a      	ldr	r2, [pc, #168]	; (8022bd8 <__sflush_r+0x108>)
 8022b30:	40ca      	lsrs	r2, r1
 8022b32:	07d6      	lsls	r6, r2, #31
 8022b34:	d528      	bpl.n	8022b88 <__sflush_r+0xb8>
 8022b36:	2200      	movs	r2, #0
 8022b38:	6062      	str	r2, [r4, #4]
 8022b3a:	04d9      	lsls	r1, r3, #19
 8022b3c:	6922      	ldr	r2, [r4, #16]
 8022b3e:	6022      	str	r2, [r4, #0]
 8022b40:	d504      	bpl.n	8022b4c <__sflush_r+0x7c>
 8022b42:	1c42      	adds	r2, r0, #1
 8022b44:	d101      	bne.n	8022b4a <__sflush_r+0x7a>
 8022b46:	682b      	ldr	r3, [r5, #0]
 8022b48:	b903      	cbnz	r3, 8022b4c <__sflush_r+0x7c>
 8022b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8022b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022b4e:	602f      	str	r7, [r5, #0]
 8022b50:	2900      	cmp	r1, #0
 8022b52:	d0ca      	beq.n	8022aea <__sflush_r+0x1a>
 8022b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022b58:	4299      	cmp	r1, r3
 8022b5a:	d002      	beq.n	8022b62 <__sflush_r+0x92>
 8022b5c:	4628      	mov	r0, r5
 8022b5e:	f7ff fc21 	bl	80223a4 <_free_r>
 8022b62:	2000      	movs	r0, #0
 8022b64:	6360      	str	r0, [r4, #52]	; 0x34
 8022b66:	e7c1      	b.n	8022aec <__sflush_r+0x1c>
 8022b68:	6a21      	ldr	r1, [r4, #32]
 8022b6a:	2301      	movs	r3, #1
 8022b6c:	4628      	mov	r0, r5
 8022b6e:	47b0      	blx	r6
 8022b70:	1c41      	adds	r1, r0, #1
 8022b72:	d1c7      	bne.n	8022b04 <__sflush_r+0x34>
 8022b74:	682b      	ldr	r3, [r5, #0]
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	d0c4      	beq.n	8022b04 <__sflush_r+0x34>
 8022b7a:	2b1d      	cmp	r3, #29
 8022b7c:	d001      	beq.n	8022b82 <__sflush_r+0xb2>
 8022b7e:	2b16      	cmp	r3, #22
 8022b80:	d101      	bne.n	8022b86 <__sflush_r+0xb6>
 8022b82:	602f      	str	r7, [r5, #0]
 8022b84:	e7b1      	b.n	8022aea <__sflush_r+0x1a>
 8022b86:	89a3      	ldrh	r3, [r4, #12]
 8022b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022b8c:	81a3      	strh	r3, [r4, #12]
 8022b8e:	e7ad      	b.n	8022aec <__sflush_r+0x1c>
 8022b90:	690f      	ldr	r7, [r1, #16]
 8022b92:	2f00      	cmp	r7, #0
 8022b94:	d0a9      	beq.n	8022aea <__sflush_r+0x1a>
 8022b96:	0793      	lsls	r3, r2, #30
 8022b98:	680e      	ldr	r6, [r1, #0]
 8022b9a:	bf08      	it	eq
 8022b9c:	694b      	ldreq	r3, [r1, #20]
 8022b9e:	600f      	str	r7, [r1, #0]
 8022ba0:	bf18      	it	ne
 8022ba2:	2300      	movne	r3, #0
 8022ba4:	eba6 0807 	sub.w	r8, r6, r7
 8022ba8:	608b      	str	r3, [r1, #8]
 8022baa:	f1b8 0f00 	cmp.w	r8, #0
 8022bae:	dd9c      	ble.n	8022aea <__sflush_r+0x1a>
 8022bb0:	6a21      	ldr	r1, [r4, #32]
 8022bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022bb4:	4643      	mov	r3, r8
 8022bb6:	463a      	mov	r2, r7
 8022bb8:	4628      	mov	r0, r5
 8022bba:	47b0      	blx	r6
 8022bbc:	2800      	cmp	r0, #0
 8022bbe:	dc06      	bgt.n	8022bce <__sflush_r+0xfe>
 8022bc0:	89a3      	ldrh	r3, [r4, #12]
 8022bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022bc6:	81a3      	strh	r3, [r4, #12]
 8022bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8022bcc:	e78e      	b.n	8022aec <__sflush_r+0x1c>
 8022bce:	4407      	add	r7, r0
 8022bd0:	eba8 0800 	sub.w	r8, r8, r0
 8022bd4:	e7e9      	b.n	8022baa <__sflush_r+0xda>
 8022bd6:	bf00      	nop
 8022bd8:	20400001 	.word	0x20400001

08022bdc <_fflush_r>:
 8022bdc:	b538      	push	{r3, r4, r5, lr}
 8022bde:	690b      	ldr	r3, [r1, #16]
 8022be0:	4605      	mov	r5, r0
 8022be2:	460c      	mov	r4, r1
 8022be4:	b913      	cbnz	r3, 8022bec <_fflush_r+0x10>
 8022be6:	2500      	movs	r5, #0
 8022be8:	4628      	mov	r0, r5
 8022bea:	bd38      	pop	{r3, r4, r5, pc}
 8022bec:	b118      	cbz	r0, 8022bf6 <_fflush_r+0x1a>
 8022bee:	6983      	ldr	r3, [r0, #24]
 8022bf0:	b90b      	cbnz	r3, 8022bf6 <_fflush_r+0x1a>
 8022bf2:	f000 f887 	bl	8022d04 <__sinit>
 8022bf6:	4b14      	ldr	r3, [pc, #80]	; (8022c48 <_fflush_r+0x6c>)
 8022bf8:	429c      	cmp	r4, r3
 8022bfa:	d11b      	bne.n	8022c34 <_fflush_r+0x58>
 8022bfc:	686c      	ldr	r4, [r5, #4]
 8022bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c02:	2b00      	cmp	r3, #0
 8022c04:	d0ef      	beq.n	8022be6 <_fflush_r+0xa>
 8022c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022c08:	07d0      	lsls	r0, r2, #31
 8022c0a:	d404      	bmi.n	8022c16 <_fflush_r+0x3a>
 8022c0c:	0599      	lsls	r1, r3, #22
 8022c0e:	d402      	bmi.n	8022c16 <_fflush_r+0x3a>
 8022c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c12:	f000 f927 	bl	8022e64 <__retarget_lock_acquire_recursive>
 8022c16:	4628      	mov	r0, r5
 8022c18:	4621      	mov	r1, r4
 8022c1a:	f7ff ff59 	bl	8022ad0 <__sflush_r>
 8022c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022c20:	07da      	lsls	r2, r3, #31
 8022c22:	4605      	mov	r5, r0
 8022c24:	d4e0      	bmi.n	8022be8 <_fflush_r+0xc>
 8022c26:	89a3      	ldrh	r3, [r4, #12]
 8022c28:	059b      	lsls	r3, r3, #22
 8022c2a:	d4dd      	bmi.n	8022be8 <_fflush_r+0xc>
 8022c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c2e:	f000 f91a 	bl	8022e66 <__retarget_lock_release_recursive>
 8022c32:	e7d9      	b.n	8022be8 <_fflush_r+0xc>
 8022c34:	4b05      	ldr	r3, [pc, #20]	; (8022c4c <_fflush_r+0x70>)
 8022c36:	429c      	cmp	r4, r3
 8022c38:	d101      	bne.n	8022c3e <_fflush_r+0x62>
 8022c3a:	68ac      	ldr	r4, [r5, #8]
 8022c3c:	e7df      	b.n	8022bfe <_fflush_r+0x22>
 8022c3e:	4b04      	ldr	r3, [pc, #16]	; (8022c50 <_fflush_r+0x74>)
 8022c40:	429c      	cmp	r4, r3
 8022c42:	bf08      	it	eq
 8022c44:	68ec      	ldreq	r4, [r5, #12]
 8022c46:	e7da      	b.n	8022bfe <_fflush_r+0x22>
 8022c48:	08029120 	.word	0x08029120
 8022c4c:	08029140 	.word	0x08029140
 8022c50:	08029100 	.word	0x08029100

08022c54 <std>:
 8022c54:	2300      	movs	r3, #0
 8022c56:	b510      	push	{r4, lr}
 8022c58:	4604      	mov	r4, r0
 8022c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8022c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022c62:	6083      	str	r3, [r0, #8]
 8022c64:	8181      	strh	r1, [r0, #12]
 8022c66:	6643      	str	r3, [r0, #100]	; 0x64
 8022c68:	81c2      	strh	r2, [r0, #14]
 8022c6a:	6183      	str	r3, [r0, #24]
 8022c6c:	4619      	mov	r1, r3
 8022c6e:	2208      	movs	r2, #8
 8022c70:	305c      	adds	r0, #92	; 0x5c
 8022c72:	f7ff fb8f 	bl	8022394 <memset>
 8022c76:	4b05      	ldr	r3, [pc, #20]	; (8022c8c <std+0x38>)
 8022c78:	6263      	str	r3, [r4, #36]	; 0x24
 8022c7a:	4b05      	ldr	r3, [pc, #20]	; (8022c90 <std+0x3c>)
 8022c7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8022c7e:	4b05      	ldr	r3, [pc, #20]	; (8022c94 <std+0x40>)
 8022c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022c82:	4b05      	ldr	r3, [pc, #20]	; (8022c98 <std+0x44>)
 8022c84:	6224      	str	r4, [r4, #32]
 8022c86:	6323      	str	r3, [r4, #48]	; 0x30
 8022c88:	bd10      	pop	{r4, pc}
 8022c8a:	bf00      	nop
 8022c8c:	08023871 	.word	0x08023871
 8022c90:	08023893 	.word	0x08023893
 8022c94:	080238cb 	.word	0x080238cb
 8022c98:	080238ef 	.word	0x080238ef

08022c9c <_cleanup_r>:
 8022c9c:	4901      	ldr	r1, [pc, #4]	; (8022ca4 <_cleanup_r+0x8>)
 8022c9e:	f000 b8c1 	b.w	8022e24 <_fwalk_reent>
 8022ca2:	bf00      	nop
 8022ca4:	08022bdd 	.word	0x08022bdd

08022ca8 <__sfmoreglue>:
 8022ca8:	b570      	push	{r4, r5, r6, lr}
 8022caa:	2268      	movs	r2, #104	; 0x68
 8022cac:	1e4d      	subs	r5, r1, #1
 8022cae:	4355      	muls	r5, r2
 8022cb0:	460e      	mov	r6, r1
 8022cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022cb6:	f7ff fbe1 	bl	802247c <_malloc_r>
 8022cba:	4604      	mov	r4, r0
 8022cbc:	b140      	cbz	r0, 8022cd0 <__sfmoreglue+0x28>
 8022cbe:	2100      	movs	r1, #0
 8022cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8022cc4:	300c      	adds	r0, #12
 8022cc6:	60a0      	str	r0, [r4, #8]
 8022cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022ccc:	f7ff fb62 	bl	8022394 <memset>
 8022cd0:	4620      	mov	r0, r4
 8022cd2:	bd70      	pop	{r4, r5, r6, pc}

08022cd4 <__sfp_lock_acquire>:
 8022cd4:	4801      	ldr	r0, [pc, #4]	; (8022cdc <__sfp_lock_acquire+0x8>)
 8022cd6:	f000 b8c5 	b.w	8022e64 <__retarget_lock_acquire_recursive>
 8022cda:	bf00      	nop
 8022cdc:	200142a1 	.word	0x200142a1

08022ce0 <__sfp_lock_release>:
 8022ce0:	4801      	ldr	r0, [pc, #4]	; (8022ce8 <__sfp_lock_release+0x8>)
 8022ce2:	f000 b8c0 	b.w	8022e66 <__retarget_lock_release_recursive>
 8022ce6:	bf00      	nop
 8022ce8:	200142a1 	.word	0x200142a1

08022cec <__sinit_lock_acquire>:
 8022cec:	4801      	ldr	r0, [pc, #4]	; (8022cf4 <__sinit_lock_acquire+0x8>)
 8022cee:	f000 b8b9 	b.w	8022e64 <__retarget_lock_acquire_recursive>
 8022cf2:	bf00      	nop
 8022cf4:	200142a2 	.word	0x200142a2

08022cf8 <__sinit_lock_release>:
 8022cf8:	4801      	ldr	r0, [pc, #4]	; (8022d00 <__sinit_lock_release+0x8>)
 8022cfa:	f000 b8b4 	b.w	8022e66 <__retarget_lock_release_recursive>
 8022cfe:	bf00      	nop
 8022d00:	200142a2 	.word	0x200142a2

08022d04 <__sinit>:
 8022d04:	b510      	push	{r4, lr}
 8022d06:	4604      	mov	r4, r0
 8022d08:	f7ff fff0 	bl	8022cec <__sinit_lock_acquire>
 8022d0c:	69a3      	ldr	r3, [r4, #24]
 8022d0e:	b11b      	cbz	r3, 8022d18 <__sinit+0x14>
 8022d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d14:	f7ff bff0 	b.w	8022cf8 <__sinit_lock_release>
 8022d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8022d1e:	4b13      	ldr	r3, [pc, #76]	; (8022d6c <__sinit+0x68>)
 8022d20:	4a13      	ldr	r2, [pc, #76]	; (8022d70 <__sinit+0x6c>)
 8022d22:	681b      	ldr	r3, [r3, #0]
 8022d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8022d26:	42a3      	cmp	r3, r4
 8022d28:	bf04      	itt	eq
 8022d2a:	2301      	moveq	r3, #1
 8022d2c:	61a3      	streq	r3, [r4, #24]
 8022d2e:	4620      	mov	r0, r4
 8022d30:	f000 f820 	bl	8022d74 <__sfp>
 8022d34:	6060      	str	r0, [r4, #4]
 8022d36:	4620      	mov	r0, r4
 8022d38:	f000 f81c 	bl	8022d74 <__sfp>
 8022d3c:	60a0      	str	r0, [r4, #8]
 8022d3e:	4620      	mov	r0, r4
 8022d40:	f000 f818 	bl	8022d74 <__sfp>
 8022d44:	2200      	movs	r2, #0
 8022d46:	60e0      	str	r0, [r4, #12]
 8022d48:	2104      	movs	r1, #4
 8022d4a:	6860      	ldr	r0, [r4, #4]
 8022d4c:	f7ff ff82 	bl	8022c54 <std>
 8022d50:	68a0      	ldr	r0, [r4, #8]
 8022d52:	2201      	movs	r2, #1
 8022d54:	2109      	movs	r1, #9
 8022d56:	f7ff ff7d 	bl	8022c54 <std>
 8022d5a:	68e0      	ldr	r0, [r4, #12]
 8022d5c:	2202      	movs	r2, #2
 8022d5e:	2112      	movs	r1, #18
 8022d60:	f7ff ff78 	bl	8022c54 <std>
 8022d64:	2301      	movs	r3, #1
 8022d66:	61a3      	str	r3, [r4, #24]
 8022d68:	e7d2      	b.n	8022d10 <__sinit+0xc>
 8022d6a:	bf00      	nop
 8022d6c:	0802904c 	.word	0x0802904c
 8022d70:	08022c9d 	.word	0x08022c9d

08022d74 <__sfp>:
 8022d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d76:	4607      	mov	r7, r0
 8022d78:	f7ff ffac 	bl	8022cd4 <__sfp_lock_acquire>
 8022d7c:	4b1e      	ldr	r3, [pc, #120]	; (8022df8 <__sfp+0x84>)
 8022d7e:	681e      	ldr	r6, [r3, #0]
 8022d80:	69b3      	ldr	r3, [r6, #24]
 8022d82:	b913      	cbnz	r3, 8022d8a <__sfp+0x16>
 8022d84:	4630      	mov	r0, r6
 8022d86:	f7ff ffbd 	bl	8022d04 <__sinit>
 8022d8a:	3648      	adds	r6, #72	; 0x48
 8022d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022d90:	3b01      	subs	r3, #1
 8022d92:	d503      	bpl.n	8022d9c <__sfp+0x28>
 8022d94:	6833      	ldr	r3, [r6, #0]
 8022d96:	b30b      	cbz	r3, 8022ddc <__sfp+0x68>
 8022d98:	6836      	ldr	r6, [r6, #0]
 8022d9a:	e7f7      	b.n	8022d8c <__sfp+0x18>
 8022d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022da0:	b9d5      	cbnz	r5, 8022dd8 <__sfp+0x64>
 8022da2:	4b16      	ldr	r3, [pc, #88]	; (8022dfc <__sfp+0x88>)
 8022da4:	60e3      	str	r3, [r4, #12]
 8022da6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022daa:	6665      	str	r5, [r4, #100]	; 0x64
 8022dac:	f000 f859 	bl	8022e62 <__retarget_lock_init_recursive>
 8022db0:	f7ff ff96 	bl	8022ce0 <__sfp_lock_release>
 8022db4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022db8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022dbc:	6025      	str	r5, [r4, #0]
 8022dbe:	61a5      	str	r5, [r4, #24]
 8022dc0:	2208      	movs	r2, #8
 8022dc2:	4629      	mov	r1, r5
 8022dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022dc8:	f7ff fae4 	bl	8022394 <memset>
 8022dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022dd4:	4620      	mov	r0, r4
 8022dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022dd8:	3468      	adds	r4, #104	; 0x68
 8022dda:	e7d9      	b.n	8022d90 <__sfp+0x1c>
 8022ddc:	2104      	movs	r1, #4
 8022dde:	4638      	mov	r0, r7
 8022de0:	f7ff ff62 	bl	8022ca8 <__sfmoreglue>
 8022de4:	4604      	mov	r4, r0
 8022de6:	6030      	str	r0, [r6, #0]
 8022de8:	2800      	cmp	r0, #0
 8022dea:	d1d5      	bne.n	8022d98 <__sfp+0x24>
 8022dec:	f7ff ff78 	bl	8022ce0 <__sfp_lock_release>
 8022df0:	230c      	movs	r3, #12
 8022df2:	603b      	str	r3, [r7, #0]
 8022df4:	e7ee      	b.n	8022dd4 <__sfp+0x60>
 8022df6:	bf00      	nop
 8022df8:	0802904c 	.word	0x0802904c
 8022dfc:	ffff0001 	.word	0xffff0001

08022e00 <fiprintf>:
 8022e00:	b40e      	push	{r1, r2, r3}
 8022e02:	b503      	push	{r0, r1, lr}
 8022e04:	4601      	mov	r1, r0
 8022e06:	ab03      	add	r3, sp, #12
 8022e08:	4805      	ldr	r0, [pc, #20]	; (8022e20 <fiprintf+0x20>)
 8022e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e0e:	6800      	ldr	r0, [r0, #0]
 8022e10:	9301      	str	r3, [sp, #4]
 8022e12:	f000 fa21 	bl	8023258 <_vfiprintf_r>
 8022e16:	b002      	add	sp, #8
 8022e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8022e1c:	b003      	add	sp, #12
 8022e1e:	4770      	bx	lr
 8022e20:	20000140 	.word	0x20000140

08022e24 <_fwalk_reent>:
 8022e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022e28:	4606      	mov	r6, r0
 8022e2a:	4688      	mov	r8, r1
 8022e2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022e30:	2700      	movs	r7, #0
 8022e32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022e36:	f1b9 0901 	subs.w	r9, r9, #1
 8022e3a:	d505      	bpl.n	8022e48 <_fwalk_reent+0x24>
 8022e3c:	6824      	ldr	r4, [r4, #0]
 8022e3e:	2c00      	cmp	r4, #0
 8022e40:	d1f7      	bne.n	8022e32 <_fwalk_reent+0xe>
 8022e42:	4638      	mov	r0, r7
 8022e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022e48:	89ab      	ldrh	r3, [r5, #12]
 8022e4a:	2b01      	cmp	r3, #1
 8022e4c:	d907      	bls.n	8022e5e <_fwalk_reent+0x3a>
 8022e4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022e52:	3301      	adds	r3, #1
 8022e54:	d003      	beq.n	8022e5e <_fwalk_reent+0x3a>
 8022e56:	4629      	mov	r1, r5
 8022e58:	4630      	mov	r0, r6
 8022e5a:	47c0      	blx	r8
 8022e5c:	4307      	orrs	r7, r0
 8022e5e:	3568      	adds	r5, #104	; 0x68
 8022e60:	e7e9      	b.n	8022e36 <_fwalk_reent+0x12>

08022e62 <__retarget_lock_init_recursive>:
 8022e62:	4770      	bx	lr

08022e64 <__retarget_lock_acquire_recursive>:
 8022e64:	4770      	bx	lr

08022e66 <__retarget_lock_release_recursive>:
 8022e66:	4770      	bx	lr

08022e68 <__swhatbuf_r>:
 8022e68:	b570      	push	{r4, r5, r6, lr}
 8022e6a:	460e      	mov	r6, r1
 8022e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e70:	2900      	cmp	r1, #0
 8022e72:	b096      	sub	sp, #88	; 0x58
 8022e74:	4614      	mov	r4, r2
 8022e76:	461d      	mov	r5, r3
 8022e78:	da08      	bge.n	8022e8c <__swhatbuf_r+0x24>
 8022e7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022e7e:	2200      	movs	r2, #0
 8022e80:	602a      	str	r2, [r5, #0]
 8022e82:	061a      	lsls	r2, r3, #24
 8022e84:	d410      	bmi.n	8022ea8 <__swhatbuf_r+0x40>
 8022e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022e8a:	e00e      	b.n	8022eaa <__swhatbuf_r+0x42>
 8022e8c:	466a      	mov	r2, sp
 8022e8e:	f000 fd5d 	bl	802394c <_fstat_r>
 8022e92:	2800      	cmp	r0, #0
 8022e94:	dbf1      	blt.n	8022e7a <__swhatbuf_r+0x12>
 8022e96:	9a01      	ldr	r2, [sp, #4]
 8022e98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022e9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022ea0:	425a      	negs	r2, r3
 8022ea2:	415a      	adcs	r2, r3
 8022ea4:	602a      	str	r2, [r5, #0]
 8022ea6:	e7ee      	b.n	8022e86 <__swhatbuf_r+0x1e>
 8022ea8:	2340      	movs	r3, #64	; 0x40
 8022eaa:	2000      	movs	r0, #0
 8022eac:	6023      	str	r3, [r4, #0]
 8022eae:	b016      	add	sp, #88	; 0x58
 8022eb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08022eb4 <__smakebuf_r>:
 8022eb4:	898b      	ldrh	r3, [r1, #12]
 8022eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022eb8:	079d      	lsls	r5, r3, #30
 8022eba:	4606      	mov	r6, r0
 8022ebc:	460c      	mov	r4, r1
 8022ebe:	d507      	bpl.n	8022ed0 <__smakebuf_r+0x1c>
 8022ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022ec4:	6023      	str	r3, [r4, #0]
 8022ec6:	6123      	str	r3, [r4, #16]
 8022ec8:	2301      	movs	r3, #1
 8022eca:	6163      	str	r3, [r4, #20]
 8022ecc:	b002      	add	sp, #8
 8022ece:	bd70      	pop	{r4, r5, r6, pc}
 8022ed0:	ab01      	add	r3, sp, #4
 8022ed2:	466a      	mov	r2, sp
 8022ed4:	f7ff ffc8 	bl	8022e68 <__swhatbuf_r>
 8022ed8:	9900      	ldr	r1, [sp, #0]
 8022eda:	4605      	mov	r5, r0
 8022edc:	4630      	mov	r0, r6
 8022ede:	f7ff facd 	bl	802247c <_malloc_r>
 8022ee2:	b948      	cbnz	r0, 8022ef8 <__smakebuf_r+0x44>
 8022ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022ee8:	059a      	lsls	r2, r3, #22
 8022eea:	d4ef      	bmi.n	8022ecc <__smakebuf_r+0x18>
 8022eec:	f023 0303 	bic.w	r3, r3, #3
 8022ef0:	f043 0302 	orr.w	r3, r3, #2
 8022ef4:	81a3      	strh	r3, [r4, #12]
 8022ef6:	e7e3      	b.n	8022ec0 <__smakebuf_r+0xc>
 8022ef8:	4b0d      	ldr	r3, [pc, #52]	; (8022f30 <__smakebuf_r+0x7c>)
 8022efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8022efc:	89a3      	ldrh	r3, [r4, #12]
 8022efe:	6020      	str	r0, [r4, #0]
 8022f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022f04:	81a3      	strh	r3, [r4, #12]
 8022f06:	9b00      	ldr	r3, [sp, #0]
 8022f08:	6163      	str	r3, [r4, #20]
 8022f0a:	9b01      	ldr	r3, [sp, #4]
 8022f0c:	6120      	str	r0, [r4, #16]
 8022f0e:	b15b      	cbz	r3, 8022f28 <__smakebuf_r+0x74>
 8022f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022f14:	4630      	mov	r0, r6
 8022f16:	f000 fd2b 	bl	8023970 <_isatty_r>
 8022f1a:	b128      	cbz	r0, 8022f28 <__smakebuf_r+0x74>
 8022f1c:	89a3      	ldrh	r3, [r4, #12]
 8022f1e:	f023 0303 	bic.w	r3, r3, #3
 8022f22:	f043 0301 	orr.w	r3, r3, #1
 8022f26:	81a3      	strh	r3, [r4, #12]
 8022f28:	89a0      	ldrh	r0, [r4, #12]
 8022f2a:	4305      	orrs	r5, r0
 8022f2c:	81a5      	strh	r5, [r4, #12]
 8022f2e:	e7cd      	b.n	8022ecc <__smakebuf_r+0x18>
 8022f30:	08022c9d 	.word	0x08022c9d

08022f34 <__malloc_lock>:
 8022f34:	4801      	ldr	r0, [pc, #4]	; (8022f3c <__malloc_lock+0x8>)
 8022f36:	f7ff bf95 	b.w	8022e64 <__retarget_lock_acquire_recursive>
 8022f3a:	bf00      	nop
 8022f3c:	200142a0 	.word	0x200142a0

08022f40 <__malloc_unlock>:
 8022f40:	4801      	ldr	r0, [pc, #4]	; (8022f48 <__malloc_unlock+0x8>)
 8022f42:	f7ff bf90 	b.w	8022e66 <__retarget_lock_release_recursive>
 8022f46:	bf00      	nop
 8022f48:	200142a0 	.word	0x200142a0

08022f4c <__ssputs_r>:
 8022f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f50:	688e      	ldr	r6, [r1, #8]
 8022f52:	429e      	cmp	r6, r3
 8022f54:	4682      	mov	sl, r0
 8022f56:	460c      	mov	r4, r1
 8022f58:	4690      	mov	r8, r2
 8022f5a:	461f      	mov	r7, r3
 8022f5c:	d838      	bhi.n	8022fd0 <__ssputs_r+0x84>
 8022f5e:	898a      	ldrh	r2, [r1, #12]
 8022f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022f64:	d032      	beq.n	8022fcc <__ssputs_r+0x80>
 8022f66:	6825      	ldr	r5, [r4, #0]
 8022f68:	6909      	ldr	r1, [r1, #16]
 8022f6a:	eba5 0901 	sub.w	r9, r5, r1
 8022f6e:	6965      	ldr	r5, [r4, #20]
 8022f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022f74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022f78:	3301      	adds	r3, #1
 8022f7a:	444b      	add	r3, r9
 8022f7c:	106d      	asrs	r5, r5, #1
 8022f7e:	429d      	cmp	r5, r3
 8022f80:	bf38      	it	cc
 8022f82:	461d      	movcc	r5, r3
 8022f84:	0553      	lsls	r3, r2, #21
 8022f86:	d531      	bpl.n	8022fec <__ssputs_r+0xa0>
 8022f88:	4629      	mov	r1, r5
 8022f8a:	f7ff fa77 	bl	802247c <_malloc_r>
 8022f8e:	4606      	mov	r6, r0
 8022f90:	b950      	cbnz	r0, 8022fa8 <__ssputs_r+0x5c>
 8022f92:	230c      	movs	r3, #12
 8022f94:	f8ca 3000 	str.w	r3, [sl]
 8022f98:	89a3      	ldrh	r3, [r4, #12]
 8022f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f9e:	81a3      	strh	r3, [r4, #12]
 8022fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8022fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022fa8:	6921      	ldr	r1, [r4, #16]
 8022faa:	464a      	mov	r2, r9
 8022fac:	f7ff f9ca 	bl	8022344 <memcpy>
 8022fb0:	89a3      	ldrh	r3, [r4, #12]
 8022fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022fba:	81a3      	strh	r3, [r4, #12]
 8022fbc:	6126      	str	r6, [r4, #16]
 8022fbe:	6165      	str	r5, [r4, #20]
 8022fc0:	444e      	add	r6, r9
 8022fc2:	eba5 0509 	sub.w	r5, r5, r9
 8022fc6:	6026      	str	r6, [r4, #0]
 8022fc8:	60a5      	str	r5, [r4, #8]
 8022fca:	463e      	mov	r6, r7
 8022fcc:	42be      	cmp	r6, r7
 8022fce:	d900      	bls.n	8022fd2 <__ssputs_r+0x86>
 8022fd0:	463e      	mov	r6, r7
 8022fd2:	6820      	ldr	r0, [r4, #0]
 8022fd4:	4632      	mov	r2, r6
 8022fd6:	4641      	mov	r1, r8
 8022fd8:	f7ff f9c2 	bl	8022360 <memmove>
 8022fdc:	68a3      	ldr	r3, [r4, #8]
 8022fde:	1b9b      	subs	r3, r3, r6
 8022fe0:	60a3      	str	r3, [r4, #8]
 8022fe2:	6823      	ldr	r3, [r4, #0]
 8022fe4:	4433      	add	r3, r6
 8022fe6:	6023      	str	r3, [r4, #0]
 8022fe8:	2000      	movs	r0, #0
 8022fea:	e7db      	b.n	8022fa4 <__ssputs_r+0x58>
 8022fec:	462a      	mov	r2, r5
 8022fee:	f000 fce1 	bl	80239b4 <_realloc_r>
 8022ff2:	4606      	mov	r6, r0
 8022ff4:	2800      	cmp	r0, #0
 8022ff6:	d1e1      	bne.n	8022fbc <__ssputs_r+0x70>
 8022ff8:	6921      	ldr	r1, [r4, #16]
 8022ffa:	4650      	mov	r0, sl
 8022ffc:	f7ff f9d2 	bl	80223a4 <_free_r>
 8023000:	e7c7      	b.n	8022f92 <__ssputs_r+0x46>
	...

08023004 <_svfiprintf_r>:
 8023004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023008:	4698      	mov	r8, r3
 802300a:	898b      	ldrh	r3, [r1, #12]
 802300c:	061b      	lsls	r3, r3, #24
 802300e:	b09d      	sub	sp, #116	; 0x74
 8023010:	4607      	mov	r7, r0
 8023012:	460d      	mov	r5, r1
 8023014:	4614      	mov	r4, r2
 8023016:	d50e      	bpl.n	8023036 <_svfiprintf_r+0x32>
 8023018:	690b      	ldr	r3, [r1, #16]
 802301a:	b963      	cbnz	r3, 8023036 <_svfiprintf_r+0x32>
 802301c:	2140      	movs	r1, #64	; 0x40
 802301e:	f7ff fa2d 	bl	802247c <_malloc_r>
 8023022:	6028      	str	r0, [r5, #0]
 8023024:	6128      	str	r0, [r5, #16]
 8023026:	b920      	cbnz	r0, 8023032 <_svfiprintf_r+0x2e>
 8023028:	230c      	movs	r3, #12
 802302a:	603b      	str	r3, [r7, #0]
 802302c:	f04f 30ff 	mov.w	r0, #4294967295
 8023030:	e0d1      	b.n	80231d6 <_svfiprintf_r+0x1d2>
 8023032:	2340      	movs	r3, #64	; 0x40
 8023034:	616b      	str	r3, [r5, #20]
 8023036:	2300      	movs	r3, #0
 8023038:	9309      	str	r3, [sp, #36]	; 0x24
 802303a:	2320      	movs	r3, #32
 802303c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023040:	f8cd 800c 	str.w	r8, [sp, #12]
 8023044:	2330      	movs	r3, #48	; 0x30
 8023046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80231f0 <_svfiprintf_r+0x1ec>
 802304a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802304e:	f04f 0901 	mov.w	r9, #1
 8023052:	4623      	mov	r3, r4
 8023054:	469a      	mov	sl, r3
 8023056:	f813 2b01 	ldrb.w	r2, [r3], #1
 802305a:	b10a      	cbz	r2, 8023060 <_svfiprintf_r+0x5c>
 802305c:	2a25      	cmp	r2, #37	; 0x25
 802305e:	d1f9      	bne.n	8023054 <_svfiprintf_r+0x50>
 8023060:	ebba 0b04 	subs.w	fp, sl, r4
 8023064:	d00b      	beq.n	802307e <_svfiprintf_r+0x7a>
 8023066:	465b      	mov	r3, fp
 8023068:	4622      	mov	r2, r4
 802306a:	4629      	mov	r1, r5
 802306c:	4638      	mov	r0, r7
 802306e:	f7ff ff6d 	bl	8022f4c <__ssputs_r>
 8023072:	3001      	adds	r0, #1
 8023074:	f000 80aa 	beq.w	80231cc <_svfiprintf_r+0x1c8>
 8023078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802307a:	445a      	add	r2, fp
 802307c:	9209      	str	r2, [sp, #36]	; 0x24
 802307e:	f89a 3000 	ldrb.w	r3, [sl]
 8023082:	2b00      	cmp	r3, #0
 8023084:	f000 80a2 	beq.w	80231cc <_svfiprintf_r+0x1c8>
 8023088:	2300      	movs	r3, #0
 802308a:	f04f 32ff 	mov.w	r2, #4294967295
 802308e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023092:	f10a 0a01 	add.w	sl, sl, #1
 8023096:	9304      	str	r3, [sp, #16]
 8023098:	9307      	str	r3, [sp, #28]
 802309a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802309e:	931a      	str	r3, [sp, #104]	; 0x68
 80230a0:	4654      	mov	r4, sl
 80230a2:	2205      	movs	r2, #5
 80230a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230a8:	4851      	ldr	r0, [pc, #324]	; (80231f0 <_svfiprintf_r+0x1ec>)
 80230aa:	f7dd f8e1 	bl	8000270 <memchr>
 80230ae:	9a04      	ldr	r2, [sp, #16]
 80230b0:	b9d8      	cbnz	r0, 80230ea <_svfiprintf_r+0xe6>
 80230b2:	06d0      	lsls	r0, r2, #27
 80230b4:	bf44      	itt	mi
 80230b6:	2320      	movmi	r3, #32
 80230b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230bc:	0711      	lsls	r1, r2, #28
 80230be:	bf44      	itt	mi
 80230c0:	232b      	movmi	r3, #43	; 0x2b
 80230c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230c6:	f89a 3000 	ldrb.w	r3, [sl]
 80230ca:	2b2a      	cmp	r3, #42	; 0x2a
 80230cc:	d015      	beq.n	80230fa <_svfiprintf_r+0xf6>
 80230ce:	9a07      	ldr	r2, [sp, #28]
 80230d0:	4654      	mov	r4, sl
 80230d2:	2000      	movs	r0, #0
 80230d4:	f04f 0c0a 	mov.w	ip, #10
 80230d8:	4621      	mov	r1, r4
 80230da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80230de:	3b30      	subs	r3, #48	; 0x30
 80230e0:	2b09      	cmp	r3, #9
 80230e2:	d94e      	bls.n	8023182 <_svfiprintf_r+0x17e>
 80230e4:	b1b0      	cbz	r0, 8023114 <_svfiprintf_r+0x110>
 80230e6:	9207      	str	r2, [sp, #28]
 80230e8:	e014      	b.n	8023114 <_svfiprintf_r+0x110>
 80230ea:	eba0 0308 	sub.w	r3, r0, r8
 80230ee:	fa09 f303 	lsl.w	r3, r9, r3
 80230f2:	4313      	orrs	r3, r2
 80230f4:	9304      	str	r3, [sp, #16]
 80230f6:	46a2      	mov	sl, r4
 80230f8:	e7d2      	b.n	80230a0 <_svfiprintf_r+0x9c>
 80230fa:	9b03      	ldr	r3, [sp, #12]
 80230fc:	1d19      	adds	r1, r3, #4
 80230fe:	681b      	ldr	r3, [r3, #0]
 8023100:	9103      	str	r1, [sp, #12]
 8023102:	2b00      	cmp	r3, #0
 8023104:	bfbb      	ittet	lt
 8023106:	425b      	neglt	r3, r3
 8023108:	f042 0202 	orrlt.w	r2, r2, #2
 802310c:	9307      	strge	r3, [sp, #28]
 802310e:	9307      	strlt	r3, [sp, #28]
 8023110:	bfb8      	it	lt
 8023112:	9204      	strlt	r2, [sp, #16]
 8023114:	7823      	ldrb	r3, [r4, #0]
 8023116:	2b2e      	cmp	r3, #46	; 0x2e
 8023118:	d10c      	bne.n	8023134 <_svfiprintf_r+0x130>
 802311a:	7863      	ldrb	r3, [r4, #1]
 802311c:	2b2a      	cmp	r3, #42	; 0x2a
 802311e:	d135      	bne.n	802318c <_svfiprintf_r+0x188>
 8023120:	9b03      	ldr	r3, [sp, #12]
 8023122:	1d1a      	adds	r2, r3, #4
 8023124:	681b      	ldr	r3, [r3, #0]
 8023126:	9203      	str	r2, [sp, #12]
 8023128:	2b00      	cmp	r3, #0
 802312a:	bfb8      	it	lt
 802312c:	f04f 33ff 	movlt.w	r3, #4294967295
 8023130:	3402      	adds	r4, #2
 8023132:	9305      	str	r3, [sp, #20]
 8023134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023200 <_svfiprintf_r+0x1fc>
 8023138:	7821      	ldrb	r1, [r4, #0]
 802313a:	2203      	movs	r2, #3
 802313c:	4650      	mov	r0, sl
 802313e:	f7dd f897 	bl	8000270 <memchr>
 8023142:	b140      	cbz	r0, 8023156 <_svfiprintf_r+0x152>
 8023144:	2340      	movs	r3, #64	; 0x40
 8023146:	eba0 000a 	sub.w	r0, r0, sl
 802314a:	fa03 f000 	lsl.w	r0, r3, r0
 802314e:	9b04      	ldr	r3, [sp, #16]
 8023150:	4303      	orrs	r3, r0
 8023152:	3401      	adds	r4, #1
 8023154:	9304      	str	r3, [sp, #16]
 8023156:	f814 1b01 	ldrb.w	r1, [r4], #1
 802315a:	4826      	ldr	r0, [pc, #152]	; (80231f4 <_svfiprintf_r+0x1f0>)
 802315c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023160:	2206      	movs	r2, #6
 8023162:	f7dd f885 	bl	8000270 <memchr>
 8023166:	2800      	cmp	r0, #0
 8023168:	d038      	beq.n	80231dc <_svfiprintf_r+0x1d8>
 802316a:	4b23      	ldr	r3, [pc, #140]	; (80231f8 <_svfiprintf_r+0x1f4>)
 802316c:	bb1b      	cbnz	r3, 80231b6 <_svfiprintf_r+0x1b2>
 802316e:	9b03      	ldr	r3, [sp, #12]
 8023170:	3307      	adds	r3, #7
 8023172:	f023 0307 	bic.w	r3, r3, #7
 8023176:	3308      	adds	r3, #8
 8023178:	9303      	str	r3, [sp, #12]
 802317a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802317c:	4433      	add	r3, r6
 802317e:	9309      	str	r3, [sp, #36]	; 0x24
 8023180:	e767      	b.n	8023052 <_svfiprintf_r+0x4e>
 8023182:	fb0c 3202 	mla	r2, ip, r2, r3
 8023186:	460c      	mov	r4, r1
 8023188:	2001      	movs	r0, #1
 802318a:	e7a5      	b.n	80230d8 <_svfiprintf_r+0xd4>
 802318c:	2300      	movs	r3, #0
 802318e:	3401      	adds	r4, #1
 8023190:	9305      	str	r3, [sp, #20]
 8023192:	4619      	mov	r1, r3
 8023194:	f04f 0c0a 	mov.w	ip, #10
 8023198:	4620      	mov	r0, r4
 802319a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802319e:	3a30      	subs	r2, #48	; 0x30
 80231a0:	2a09      	cmp	r2, #9
 80231a2:	d903      	bls.n	80231ac <_svfiprintf_r+0x1a8>
 80231a4:	2b00      	cmp	r3, #0
 80231a6:	d0c5      	beq.n	8023134 <_svfiprintf_r+0x130>
 80231a8:	9105      	str	r1, [sp, #20]
 80231aa:	e7c3      	b.n	8023134 <_svfiprintf_r+0x130>
 80231ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80231b0:	4604      	mov	r4, r0
 80231b2:	2301      	movs	r3, #1
 80231b4:	e7f0      	b.n	8023198 <_svfiprintf_r+0x194>
 80231b6:	ab03      	add	r3, sp, #12
 80231b8:	9300      	str	r3, [sp, #0]
 80231ba:	462a      	mov	r2, r5
 80231bc:	4b0f      	ldr	r3, [pc, #60]	; (80231fc <_svfiprintf_r+0x1f8>)
 80231be:	a904      	add	r1, sp, #16
 80231c0:	4638      	mov	r0, r7
 80231c2:	f3af 8000 	nop.w
 80231c6:	1c42      	adds	r2, r0, #1
 80231c8:	4606      	mov	r6, r0
 80231ca:	d1d6      	bne.n	802317a <_svfiprintf_r+0x176>
 80231cc:	89ab      	ldrh	r3, [r5, #12]
 80231ce:	065b      	lsls	r3, r3, #25
 80231d0:	f53f af2c 	bmi.w	802302c <_svfiprintf_r+0x28>
 80231d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80231d6:	b01d      	add	sp, #116	; 0x74
 80231d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231dc:	ab03      	add	r3, sp, #12
 80231de:	9300      	str	r3, [sp, #0]
 80231e0:	462a      	mov	r2, r5
 80231e2:	4b06      	ldr	r3, [pc, #24]	; (80231fc <_svfiprintf_r+0x1f8>)
 80231e4:	a904      	add	r1, sp, #16
 80231e6:	4638      	mov	r0, r7
 80231e8:	f000 f9d4 	bl	8023594 <_printf_i>
 80231ec:	e7eb      	b.n	80231c6 <_svfiprintf_r+0x1c2>
 80231ee:	bf00      	nop
 80231f0:	08029160 	.word	0x08029160
 80231f4:	0802916a 	.word	0x0802916a
 80231f8:	00000000 	.word	0x00000000
 80231fc:	08022f4d 	.word	0x08022f4d
 8023200:	08029166 	.word	0x08029166

08023204 <__sfputc_r>:
 8023204:	6893      	ldr	r3, [r2, #8]
 8023206:	3b01      	subs	r3, #1
 8023208:	2b00      	cmp	r3, #0
 802320a:	b410      	push	{r4}
 802320c:	6093      	str	r3, [r2, #8]
 802320e:	da08      	bge.n	8023222 <__sfputc_r+0x1e>
 8023210:	6994      	ldr	r4, [r2, #24]
 8023212:	42a3      	cmp	r3, r4
 8023214:	db01      	blt.n	802321a <__sfputc_r+0x16>
 8023216:	290a      	cmp	r1, #10
 8023218:	d103      	bne.n	8023222 <__sfputc_r+0x1e>
 802321a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802321e:	f7ff bb79 	b.w	8022914 <__swbuf_r>
 8023222:	6813      	ldr	r3, [r2, #0]
 8023224:	1c58      	adds	r0, r3, #1
 8023226:	6010      	str	r0, [r2, #0]
 8023228:	7019      	strb	r1, [r3, #0]
 802322a:	4608      	mov	r0, r1
 802322c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023230:	4770      	bx	lr

08023232 <__sfputs_r>:
 8023232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023234:	4606      	mov	r6, r0
 8023236:	460f      	mov	r7, r1
 8023238:	4614      	mov	r4, r2
 802323a:	18d5      	adds	r5, r2, r3
 802323c:	42ac      	cmp	r4, r5
 802323e:	d101      	bne.n	8023244 <__sfputs_r+0x12>
 8023240:	2000      	movs	r0, #0
 8023242:	e007      	b.n	8023254 <__sfputs_r+0x22>
 8023244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023248:	463a      	mov	r2, r7
 802324a:	4630      	mov	r0, r6
 802324c:	f7ff ffda 	bl	8023204 <__sfputc_r>
 8023250:	1c43      	adds	r3, r0, #1
 8023252:	d1f3      	bne.n	802323c <__sfputs_r+0xa>
 8023254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023258 <_vfiprintf_r>:
 8023258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802325c:	460d      	mov	r5, r1
 802325e:	b09d      	sub	sp, #116	; 0x74
 8023260:	4614      	mov	r4, r2
 8023262:	4698      	mov	r8, r3
 8023264:	4606      	mov	r6, r0
 8023266:	b118      	cbz	r0, 8023270 <_vfiprintf_r+0x18>
 8023268:	6983      	ldr	r3, [r0, #24]
 802326a:	b90b      	cbnz	r3, 8023270 <_vfiprintf_r+0x18>
 802326c:	f7ff fd4a 	bl	8022d04 <__sinit>
 8023270:	4b89      	ldr	r3, [pc, #548]	; (8023498 <_vfiprintf_r+0x240>)
 8023272:	429d      	cmp	r5, r3
 8023274:	d11b      	bne.n	80232ae <_vfiprintf_r+0x56>
 8023276:	6875      	ldr	r5, [r6, #4]
 8023278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802327a:	07d9      	lsls	r1, r3, #31
 802327c:	d405      	bmi.n	802328a <_vfiprintf_r+0x32>
 802327e:	89ab      	ldrh	r3, [r5, #12]
 8023280:	059a      	lsls	r2, r3, #22
 8023282:	d402      	bmi.n	802328a <_vfiprintf_r+0x32>
 8023284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023286:	f7ff fded 	bl	8022e64 <__retarget_lock_acquire_recursive>
 802328a:	89ab      	ldrh	r3, [r5, #12]
 802328c:	071b      	lsls	r3, r3, #28
 802328e:	d501      	bpl.n	8023294 <_vfiprintf_r+0x3c>
 8023290:	692b      	ldr	r3, [r5, #16]
 8023292:	b9eb      	cbnz	r3, 80232d0 <_vfiprintf_r+0x78>
 8023294:	4629      	mov	r1, r5
 8023296:	4630      	mov	r0, r6
 8023298:	f7ff fb8e 	bl	80229b8 <__swsetup_r>
 802329c:	b1c0      	cbz	r0, 80232d0 <_vfiprintf_r+0x78>
 802329e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232a0:	07dc      	lsls	r4, r3, #31
 80232a2:	d50e      	bpl.n	80232c2 <_vfiprintf_r+0x6a>
 80232a4:	f04f 30ff 	mov.w	r0, #4294967295
 80232a8:	b01d      	add	sp, #116	; 0x74
 80232aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ae:	4b7b      	ldr	r3, [pc, #492]	; (802349c <_vfiprintf_r+0x244>)
 80232b0:	429d      	cmp	r5, r3
 80232b2:	d101      	bne.n	80232b8 <_vfiprintf_r+0x60>
 80232b4:	68b5      	ldr	r5, [r6, #8]
 80232b6:	e7df      	b.n	8023278 <_vfiprintf_r+0x20>
 80232b8:	4b79      	ldr	r3, [pc, #484]	; (80234a0 <_vfiprintf_r+0x248>)
 80232ba:	429d      	cmp	r5, r3
 80232bc:	bf08      	it	eq
 80232be:	68f5      	ldreq	r5, [r6, #12]
 80232c0:	e7da      	b.n	8023278 <_vfiprintf_r+0x20>
 80232c2:	89ab      	ldrh	r3, [r5, #12]
 80232c4:	0598      	lsls	r0, r3, #22
 80232c6:	d4ed      	bmi.n	80232a4 <_vfiprintf_r+0x4c>
 80232c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232ca:	f7ff fdcc 	bl	8022e66 <__retarget_lock_release_recursive>
 80232ce:	e7e9      	b.n	80232a4 <_vfiprintf_r+0x4c>
 80232d0:	2300      	movs	r3, #0
 80232d2:	9309      	str	r3, [sp, #36]	; 0x24
 80232d4:	2320      	movs	r3, #32
 80232d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232da:	f8cd 800c 	str.w	r8, [sp, #12]
 80232de:	2330      	movs	r3, #48	; 0x30
 80232e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80234a4 <_vfiprintf_r+0x24c>
 80232e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80232e8:	f04f 0901 	mov.w	r9, #1
 80232ec:	4623      	mov	r3, r4
 80232ee:	469a      	mov	sl, r3
 80232f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80232f4:	b10a      	cbz	r2, 80232fa <_vfiprintf_r+0xa2>
 80232f6:	2a25      	cmp	r2, #37	; 0x25
 80232f8:	d1f9      	bne.n	80232ee <_vfiprintf_r+0x96>
 80232fa:	ebba 0b04 	subs.w	fp, sl, r4
 80232fe:	d00b      	beq.n	8023318 <_vfiprintf_r+0xc0>
 8023300:	465b      	mov	r3, fp
 8023302:	4622      	mov	r2, r4
 8023304:	4629      	mov	r1, r5
 8023306:	4630      	mov	r0, r6
 8023308:	f7ff ff93 	bl	8023232 <__sfputs_r>
 802330c:	3001      	adds	r0, #1
 802330e:	f000 80aa 	beq.w	8023466 <_vfiprintf_r+0x20e>
 8023312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023314:	445a      	add	r2, fp
 8023316:	9209      	str	r2, [sp, #36]	; 0x24
 8023318:	f89a 3000 	ldrb.w	r3, [sl]
 802331c:	2b00      	cmp	r3, #0
 802331e:	f000 80a2 	beq.w	8023466 <_vfiprintf_r+0x20e>
 8023322:	2300      	movs	r3, #0
 8023324:	f04f 32ff 	mov.w	r2, #4294967295
 8023328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802332c:	f10a 0a01 	add.w	sl, sl, #1
 8023330:	9304      	str	r3, [sp, #16]
 8023332:	9307      	str	r3, [sp, #28]
 8023334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023338:	931a      	str	r3, [sp, #104]	; 0x68
 802333a:	4654      	mov	r4, sl
 802333c:	2205      	movs	r2, #5
 802333e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023342:	4858      	ldr	r0, [pc, #352]	; (80234a4 <_vfiprintf_r+0x24c>)
 8023344:	f7dc ff94 	bl	8000270 <memchr>
 8023348:	9a04      	ldr	r2, [sp, #16]
 802334a:	b9d8      	cbnz	r0, 8023384 <_vfiprintf_r+0x12c>
 802334c:	06d1      	lsls	r1, r2, #27
 802334e:	bf44      	itt	mi
 8023350:	2320      	movmi	r3, #32
 8023352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023356:	0713      	lsls	r3, r2, #28
 8023358:	bf44      	itt	mi
 802335a:	232b      	movmi	r3, #43	; 0x2b
 802335c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023360:	f89a 3000 	ldrb.w	r3, [sl]
 8023364:	2b2a      	cmp	r3, #42	; 0x2a
 8023366:	d015      	beq.n	8023394 <_vfiprintf_r+0x13c>
 8023368:	9a07      	ldr	r2, [sp, #28]
 802336a:	4654      	mov	r4, sl
 802336c:	2000      	movs	r0, #0
 802336e:	f04f 0c0a 	mov.w	ip, #10
 8023372:	4621      	mov	r1, r4
 8023374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023378:	3b30      	subs	r3, #48	; 0x30
 802337a:	2b09      	cmp	r3, #9
 802337c:	d94e      	bls.n	802341c <_vfiprintf_r+0x1c4>
 802337e:	b1b0      	cbz	r0, 80233ae <_vfiprintf_r+0x156>
 8023380:	9207      	str	r2, [sp, #28]
 8023382:	e014      	b.n	80233ae <_vfiprintf_r+0x156>
 8023384:	eba0 0308 	sub.w	r3, r0, r8
 8023388:	fa09 f303 	lsl.w	r3, r9, r3
 802338c:	4313      	orrs	r3, r2
 802338e:	9304      	str	r3, [sp, #16]
 8023390:	46a2      	mov	sl, r4
 8023392:	e7d2      	b.n	802333a <_vfiprintf_r+0xe2>
 8023394:	9b03      	ldr	r3, [sp, #12]
 8023396:	1d19      	adds	r1, r3, #4
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	9103      	str	r1, [sp, #12]
 802339c:	2b00      	cmp	r3, #0
 802339e:	bfbb      	ittet	lt
 80233a0:	425b      	neglt	r3, r3
 80233a2:	f042 0202 	orrlt.w	r2, r2, #2
 80233a6:	9307      	strge	r3, [sp, #28]
 80233a8:	9307      	strlt	r3, [sp, #28]
 80233aa:	bfb8      	it	lt
 80233ac:	9204      	strlt	r2, [sp, #16]
 80233ae:	7823      	ldrb	r3, [r4, #0]
 80233b0:	2b2e      	cmp	r3, #46	; 0x2e
 80233b2:	d10c      	bne.n	80233ce <_vfiprintf_r+0x176>
 80233b4:	7863      	ldrb	r3, [r4, #1]
 80233b6:	2b2a      	cmp	r3, #42	; 0x2a
 80233b8:	d135      	bne.n	8023426 <_vfiprintf_r+0x1ce>
 80233ba:	9b03      	ldr	r3, [sp, #12]
 80233bc:	1d1a      	adds	r2, r3, #4
 80233be:	681b      	ldr	r3, [r3, #0]
 80233c0:	9203      	str	r2, [sp, #12]
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	bfb8      	it	lt
 80233c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80233ca:	3402      	adds	r4, #2
 80233cc:	9305      	str	r3, [sp, #20]
 80233ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80234b4 <_vfiprintf_r+0x25c>
 80233d2:	7821      	ldrb	r1, [r4, #0]
 80233d4:	2203      	movs	r2, #3
 80233d6:	4650      	mov	r0, sl
 80233d8:	f7dc ff4a 	bl	8000270 <memchr>
 80233dc:	b140      	cbz	r0, 80233f0 <_vfiprintf_r+0x198>
 80233de:	2340      	movs	r3, #64	; 0x40
 80233e0:	eba0 000a 	sub.w	r0, r0, sl
 80233e4:	fa03 f000 	lsl.w	r0, r3, r0
 80233e8:	9b04      	ldr	r3, [sp, #16]
 80233ea:	4303      	orrs	r3, r0
 80233ec:	3401      	adds	r4, #1
 80233ee:	9304      	str	r3, [sp, #16]
 80233f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233f4:	482c      	ldr	r0, [pc, #176]	; (80234a8 <_vfiprintf_r+0x250>)
 80233f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80233fa:	2206      	movs	r2, #6
 80233fc:	f7dc ff38 	bl	8000270 <memchr>
 8023400:	2800      	cmp	r0, #0
 8023402:	d03f      	beq.n	8023484 <_vfiprintf_r+0x22c>
 8023404:	4b29      	ldr	r3, [pc, #164]	; (80234ac <_vfiprintf_r+0x254>)
 8023406:	bb1b      	cbnz	r3, 8023450 <_vfiprintf_r+0x1f8>
 8023408:	9b03      	ldr	r3, [sp, #12]
 802340a:	3307      	adds	r3, #7
 802340c:	f023 0307 	bic.w	r3, r3, #7
 8023410:	3308      	adds	r3, #8
 8023412:	9303      	str	r3, [sp, #12]
 8023414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023416:	443b      	add	r3, r7
 8023418:	9309      	str	r3, [sp, #36]	; 0x24
 802341a:	e767      	b.n	80232ec <_vfiprintf_r+0x94>
 802341c:	fb0c 3202 	mla	r2, ip, r2, r3
 8023420:	460c      	mov	r4, r1
 8023422:	2001      	movs	r0, #1
 8023424:	e7a5      	b.n	8023372 <_vfiprintf_r+0x11a>
 8023426:	2300      	movs	r3, #0
 8023428:	3401      	adds	r4, #1
 802342a:	9305      	str	r3, [sp, #20]
 802342c:	4619      	mov	r1, r3
 802342e:	f04f 0c0a 	mov.w	ip, #10
 8023432:	4620      	mov	r0, r4
 8023434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023438:	3a30      	subs	r2, #48	; 0x30
 802343a:	2a09      	cmp	r2, #9
 802343c:	d903      	bls.n	8023446 <_vfiprintf_r+0x1ee>
 802343e:	2b00      	cmp	r3, #0
 8023440:	d0c5      	beq.n	80233ce <_vfiprintf_r+0x176>
 8023442:	9105      	str	r1, [sp, #20]
 8023444:	e7c3      	b.n	80233ce <_vfiprintf_r+0x176>
 8023446:	fb0c 2101 	mla	r1, ip, r1, r2
 802344a:	4604      	mov	r4, r0
 802344c:	2301      	movs	r3, #1
 802344e:	e7f0      	b.n	8023432 <_vfiprintf_r+0x1da>
 8023450:	ab03      	add	r3, sp, #12
 8023452:	9300      	str	r3, [sp, #0]
 8023454:	462a      	mov	r2, r5
 8023456:	4b16      	ldr	r3, [pc, #88]	; (80234b0 <_vfiprintf_r+0x258>)
 8023458:	a904      	add	r1, sp, #16
 802345a:	4630      	mov	r0, r6
 802345c:	f3af 8000 	nop.w
 8023460:	4607      	mov	r7, r0
 8023462:	1c78      	adds	r0, r7, #1
 8023464:	d1d6      	bne.n	8023414 <_vfiprintf_r+0x1bc>
 8023466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023468:	07d9      	lsls	r1, r3, #31
 802346a:	d405      	bmi.n	8023478 <_vfiprintf_r+0x220>
 802346c:	89ab      	ldrh	r3, [r5, #12]
 802346e:	059a      	lsls	r2, r3, #22
 8023470:	d402      	bmi.n	8023478 <_vfiprintf_r+0x220>
 8023472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023474:	f7ff fcf7 	bl	8022e66 <__retarget_lock_release_recursive>
 8023478:	89ab      	ldrh	r3, [r5, #12]
 802347a:	065b      	lsls	r3, r3, #25
 802347c:	f53f af12 	bmi.w	80232a4 <_vfiprintf_r+0x4c>
 8023480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023482:	e711      	b.n	80232a8 <_vfiprintf_r+0x50>
 8023484:	ab03      	add	r3, sp, #12
 8023486:	9300      	str	r3, [sp, #0]
 8023488:	462a      	mov	r2, r5
 802348a:	4b09      	ldr	r3, [pc, #36]	; (80234b0 <_vfiprintf_r+0x258>)
 802348c:	a904      	add	r1, sp, #16
 802348e:	4630      	mov	r0, r6
 8023490:	f000 f880 	bl	8023594 <_printf_i>
 8023494:	e7e4      	b.n	8023460 <_vfiprintf_r+0x208>
 8023496:	bf00      	nop
 8023498:	08029120 	.word	0x08029120
 802349c:	08029140 	.word	0x08029140
 80234a0:	08029100 	.word	0x08029100
 80234a4:	08029160 	.word	0x08029160
 80234a8:	0802916a 	.word	0x0802916a
 80234ac:	00000000 	.word	0x00000000
 80234b0:	08023233 	.word	0x08023233
 80234b4:	08029166 	.word	0x08029166

080234b8 <_printf_common>:
 80234b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234bc:	4616      	mov	r6, r2
 80234be:	4699      	mov	r9, r3
 80234c0:	688a      	ldr	r2, [r1, #8]
 80234c2:	690b      	ldr	r3, [r1, #16]
 80234c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80234c8:	4293      	cmp	r3, r2
 80234ca:	bfb8      	it	lt
 80234cc:	4613      	movlt	r3, r2
 80234ce:	6033      	str	r3, [r6, #0]
 80234d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80234d4:	4607      	mov	r7, r0
 80234d6:	460c      	mov	r4, r1
 80234d8:	b10a      	cbz	r2, 80234de <_printf_common+0x26>
 80234da:	3301      	adds	r3, #1
 80234dc:	6033      	str	r3, [r6, #0]
 80234de:	6823      	ldr	r3, [r4, #0]
 80234e0:	0699      	lsls	r1, r3, #26
 80234e2:	bf42      	ittt	mi
 80234e4:	6833      	ldrmi	r3, [r6, #0]
 80234e6:	3302      	addmi	r3, #2
 80234e8:	6033      	strmi	r3, [r6, #0]
 80234ea:	6825      	ldr	r5, [r4, #0]
 80234ec:	f015 0506 	ands.w	r5, r5, #6
 80234f0:	d106      	bne.n	8023500 <_printf_common+0x48>
 80234f2:	f104 0a19 	add.w	sl, r4, #25
 80234f6:	68e3      	ldr	r3, [r4, #12]
 80234f8:	6832      	ldr	r2, [r6, #0]
 80234fa:	1a9b      	subs	r3, r3, r2
 80234fc:	42ab      	cmp	r3, r5
 80234fe:	dc26      	bgt.n	802354e <_printf_common+0x96>
 8023500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023504:	1e13      	subs	r3, r2, #0
 8023506:	6822      	ldr	r2, [r4, #0]
 8023508:	bf18      	it	ne
 802350a:	2301      	movne	r3, #1
 802350c:	0692      	lsls	r2, r2, #26
 802350e:	d42b      	bmi.n	8023568 <_printf_common+0xb0>
 8023510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023514:	4649      	mov	r1, r9
 8023516:	4638      	mov	r0, r7
 8023518:	47c0      	blx	r8
 802351a:	3001      	adds	r0, #1
 802351c:	d01e      	beq.n	802355c <_printf_common+0xa4>
 802351e:	6823      	ldr	r3, [r4, #0]
 8023520:	68e5      	ldr	r5, [r4, #12]
 8023522:	6832      	ldr	r2, [r6, #0]
 8023524:	f003 0306 	and.w	r3, r3, #6
 8023528:	2b04      	cmp	r3, #4
 802352a:	bf08      	it	eq
 802352c:	1aad      	subeq	r5, r5, r2
 802352e:	68a3      	ldr	r3, [r4, #8]
 8023530:	6922      	ldr	r2, [r4, #16]
 8023532:	bf0c      	ite	eq
 8023534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023538:	2500      	movne	r5, #0
 802353a:	4293      	cmp	r3, r2
 802353c:	bfc4      	itt	gt
 802353e:	1a9b      	subgt	r3, r3, r2
 8023540:	18ed      	addgt	r5, r5, r3
 8023542:	2600      	movs	r6, #0
 8023544:	341a      	adds	r4, #26
 8023546:	42b5      	cmp	r5, r6
 8023548:	d11a      	bne.n	8023580 <_printf_common+0xc8>
 802354a:	2000      	movs	r0, #0
 802354c:	e008      	b.n	8023560 <_printf_common+0xa8>
 802354e:	2301      	movs	r3, #1
 8023550:	4652      	mov	r2, sl
 8023552:	4649      	mov	r1, r9
 8023554:	4638      	mov	r0, r7
 8023556:	47c0      	blx	r8
 8023558:	3001      	adds	r0, #1
 802355a:	d103      	bne.n	8023564 <_printf_common+0xac>
 802355c:	f04f 30ff 	mov.w	r0, #4294967295
 8023560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023564:	3501      	adds	r5, #1
 8023566:	e7c6      	b.n	80234f6 <_printf_common+0x3e>
 8023568:	18e1      	adds	r1, r4, r3
 802356a:	1c5a      	adds	r2, r3, #1
 802356c:	2030      	movs	r0, #48	; 0x30
 802356e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023572:	4422      	add	r2, r4
 8023574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802357c:	3302      	adds	r3, #2
 802357e:	e7c7      	b.n	8023510 <_printf_common+0x58>
 8023580:	2301      	movs	r3, #1
 8023582:	4622      	mov	r2, r4
 8023584:	4649      	mov	r1, r9
 8023586:	4638      	mov	r0, r7
 8023588:	47c0      	blx	r8
 802358a:	3001      	adds	r0, #1
 802358c:	d0e6      	beq.n	802355c <_printf_common+0xa4>
 802358e:	3601      	adds	r6, #1
 8023590:	e7d9      	b.n	8023546 <_printf_common+0x8e>
	...

08023594 <_printf_i>:
 8023594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023598:	7e0f      	ldrb	r7, [r1, #24]
 802359a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802359c:	2f78      	cmp	r7, #120	; 0x78
 802359e:	4691      	mov	r9, r2
 80235a0:	4680      	mov	r8, r0
 80235a2:	460c      	mov	r4, r1
 80235a4:	469a      	mov	sl, r3
 80235a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80235aa:	d807      	bhi.n	80235bc <_printf_i+0x28>
 80235ac:	2f62      	cmp	r7, #98	; 0x62
 80235ae:	d80a      	bhi.n	80235c6 <_printf_i+0x32>
 80235b0:	2f00      	cmp	r7, #0
 80235b2:	f000 80d8 	beq.w	8023766 <_printf_i+0x1d2>
 80235b6:	2f58      	cmp	r7, #88	; 0x58
 80235b8:	f000 80a3 	beq.w	8023702 <_printf_i+0x16e>
 80235bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80235c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80235c4:	e03a      	b.n	802363c <_printf_i+0xa8>
 80235c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80235ca:	2b15      	cmp	r3, #21
 80235cc:	d8f6      	bhi.n	80235bc <_printf_i+0x28>
 80235ce:	a101      	add	r1, pc, #4	; (adr r1, 80235d4 <_printf_i+0x40>)
 80235d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80235d4:	0802362d 	.word	0x0802362d
 80235d8:	08023641 	.word	0x08023641
 80235dc:	080235bd 	.word	0x080235bd
 80235e0:	080235bd 	.word	0x080235bd
 80235e4:	080235bd 	.word	0x080235bd
 80235e8:	080235bd 	.word	0x080235bd
 80235ec:	08023641 	.word	0x08023641
 80235f0:	080235bd 	.word	0x080235bd
 80235f4:	080235bd 	.word	0x080235bd
 80235f8:	080235bd 	.word	0x080235bd
 80235fc:	080235bd 	.word	0x080235bd
 8023600:	0802374d 	.word	0x0802374d
 8023604:	08023671 	.word	0x08023671
 8023608:	0802372f 	.word	0x0802372f
 802360c:	080235bd 	.word	0x080235bd
 8023610:	080235bd 	.word	0x080235bd
 8023614:	0802376f 	.word	0x0802376f
 8023618:	080235bd 	.word	0x080235bd
 802361c:	08023671 	.word	0x08023671
 8023620:	080235bd 	.word	0x080235bd
 8023624:	080235bd 	.word	0x080235bd
 8023628:	08023737 	.word	0x08023737
 802362c:	682b      	ldr	r3, [r5, #0]
 802362e:	1d1a      	adds	r2, r3, #4
 8023630:	681b      	ldr	r3, [r3, #0]
 8023632:	602a      	str	r2, [r5, #0]
 8023634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802363c:	2301      	movs	r3, #1
 802363e:	e0a3      	b.n	8023788 <_printf_i+0x1f4>
 8023640:	6820      	ldr	r0, [r4, #0]
 8023642:	6829      	ldr	r1, [r5, #0]
 8023644:	0606      	lsls	r6, r0, #24
 8023646:	f101 0304 	add.w	r3, r1, #4
 802364a:	d50a      	bpl.n	8023662 <_printf_i+0xce>
 802364c:	680e      	ldr	r6, [r1, #0]
 802364e:	602b      	str	r3, [r5, #0]
 8023650:	2e00      	cmp	r6, #0
 8023652:	da03      	bge.n	802365c <_printf_i+0xc8>
 8023654:	232d      	movs	r3, #45	; 0x2d
 8023656:	4276      	negs	r6, r6
 8023658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802365c:	485e      	ldr	r0, [pc, #376]	; (80237d8 <_printf_i+0x244>)
 802365e:	230a      	movs	r3, #10
 8023660:	e019      	b.n	8023696 <_printf_i+0x102>
 8023662:	680e      	ldr	r6, [r1, #0]
 8023664:	602b      	str	r3, [r5, #0]
 8023666:	f010 0f40 	tst.w	r0, #64	; 0x40
 802366a:	bf18      	it	ne
 802366c:	b236      	sxthne	r6, r6
 802366e:	e7ef      	b.n	8023650 <_printf_i+0xbc>
 8023670:	682b      	ldr	r3, [r5, #0]
 8023672:	6820      	ldr	r0, [r4, #0]
 8023674:	1d19      	adds	r1, r3, #4
 8023676:	6029      	str	r1, [r5, #0]
 8023678:	0601      	lsls	r1, r0, #24
 802367a:	d501      	bpl.n	8023680 <_printf_i+0xec>
 802367c:	681e      	ldr	r6, [r3, #0]
 802367e:	e002      	b.n	8023686 <_printf_i+0xf2>
 8023680:	0646      	lsls	r6, r0, #25
 8023682:	d5fb      	bpl.n	802367c <_printf_i+0xe8>
 8023684:	881e      	ldrh	r6, [r3, #0]
 8023686:	4854      	ldr	r0, [pc, #336]	; (80237d8 <_printf_i+0x244>)
 8023688:	2f6f      	cmp	r7, #111	; 0x6f
 802368a:	bf0c      	ite	eq
 802368c:	2308      	moveq	r3, #8
 802368e:	230a      	movne	r3, #10
 8023690:	2100      	movs	r1, #0
 8023692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023696:	6865      	ldr	r5, [r4, #4]
 8023698:	60a5      	str	r5, [r4, #8]
 802369a:	2d00      	cmp	r5, #0
 802369c:	bfa2      	ittt	ge
 802369e:	6821      	ldrge	r1, [r4, #0]
 80236a0:	f021 0104 	bicge.w	r1, r1, #4
 80236a4:	6021      	strge	r1, [r4, #0]
 80236a6:	b90e      	cbnz	r6, 80236ac <_printf_i+0x118>
 80236a8:	2d00      	cmp	r5, #0
 80236aa:	d04d      	beq.n	8023748 <_printf_i+0x1b4>
 80236ac:	4615      	mov	r5, r2
 80236ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80236b2:	fb03 6711 	mls	r7, r3, r1, r6
 80236b6:	5dc7      	ldrb	r7, [r0, r7]
 80236b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80236bc:	4637      	mov	r7, r6
 80236be:	42bb      	cmp	r3, r7
 80236c0:	460e      	mov	r6, r1
 80236c2:	d9f4      	bls.n	80236ae <_printf_i+0x11a>
 80236c4:	2b08      	cmp	r3, #8
 80236c6:	d10b      	bne.n	80236e0 <_printf_i+0x14c>
 80236c8:	6823      	ldr	r3, [r4, #0]
 80236ca:	07de      	lsls	r6, r3, #31
 80236cc:	d508      	bpl.n	80236e0 <_printf_i+0x14c>
 80236ce:	6923      	ldr	r3, [r4, #16]
 80236d0:	6861      	ldr	r1, [r4, #4]
 80236d2:	4299      	cmp	r1, r3
 80236d4:	bfde      	ittt	le
 80236d6:	2330      	movle	r3, #48	; 0x30
 80236d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80236dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80236e0:	1b52      	subs	r2, r2, r5
 80236e2:	6122      	str	r2, [r4, #16]
 80236e4:	f8cd a000 	str.w	sl, [sp]
 80236e8:	464b      	mov	r3, r9
 80236ea:	aa03      	add	r2, sp, #12
 80236ec:	4621      	mov	r1, r4
 80236ee:	4640      	mov	r0, r8
 80236f0:	f7ff fee2 	bl	80234b8 <_printf_common>
 80236f4:	3001      	adds	r0, #1
 80236f6:	d14c      	bne.n	8023792 <_printf_i+0x1fe>
 80236f8:	f04f 30ff 	mov.w	r0, #4294967295
 80236fc:	b004      	add	sp, #16
 80236fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023702:	4835      	ldr	r0, [pc, #212]	; (80237d8 <_printf_i+0x244>)
 8023704:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023708:	6829      	ldr	r1, [r5, #0]
 802370a:	6823      	ldr	r3, [r4, #0]
 802370c:	f851 6b04 	ldr.w	r6, [r1], #4
 8023710:	6029      	str	r1, [r5, #0]
 8023712:	061d      	lsls	r5, r3, #24
 8023714:	d514      	bpl.n	8023740 <_printf_i+0x1ac>
 8023716:	07df      	lsls	r7, r3, #31
 8023718:	bf44      	itt	mi
 802371a:	f043 0320 	orrmi.w	r3, r3, #32
 802371e:	6023      	strmi	r3, [r4, #0]
 8023720:	b91e      	cbnz	r6, 802372a <_printf_i+0x196>
 8023722:	6823      	ldr	r3, [r4, #0]
 8023724:	f023 0320 	bic.w	r3, r3, #32
 8023728:	6023      	str	r3, [r4, #0]
 802372a:	2310      	movs	r3, #16
 802372c:	e7b0      	b.n	8023690 <_printf_i+0xfc>
 802372e:	6823      	ldr	r3, [r4, #0]
 8023730:	f043 0320 	orr.w	r3, r3, #32
 8023734:	6023      	str	r3, [r4, #0]
 8023736:	2378      	movs	r3, #120	; 0x78
 8023738:	4828      	ldr	r0, [pc, #160]	; (80237dc <_printf_i+0x248>)
 802373a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802373e:	e7e3      	b.n	8023708 <_printf_i+0x174>
 8023740:	0659      	lsls	r1, r3, #25
 8023742:	bf48      	it	mi
 8023744:	b2b6      	uxthmi	r6, r6
 8023746:	e7e6      	b.n	8023716 <_printf_i+0x182>
 8023748:	4615      	mov	r5, r2
 802374a:	e7bb      	b.n	80236c4 <_printf_i+0x130>
 802374c:	682b      	ldr	r3, [r5, #0]
 802374e:	6826      	ldr	r6, [r4, #0]
 8023750:	6961      	ldr	r1, [r4, #20]
 8023752:	1d18      	adds	r0, r3, #4
 8023754:	6028      	str	r0, [r5, #0]
 8023756:	0635      	lsls	r5, r6, #24
 8023758:	681b      	ldr	r3, [r3, #0]
 802375a:	d501      	bpl.n	8023760 <_printf_i+0x1cc>
 802375c:	6019      	str	r1, [r3, #0]
 802375e:	e002      	b.n	8023766 <_printf_i+0x1d2>
 8023760:	0670      	lsls	r0, r6, #25
 8023762:	d5fb      	bpl.n	802375c <_printf_i+0x1c8>
 8023764:	8019      	strh	r1, [r3, #0]
 8023766:	2300      	movs	r3, #0
 8023768:	6123      	str	r3, [r4, #16]
 802376a:	4615      	mov	r5, r2
 802376c:	e7ba      	b.n	80236e4 <_printf_i+0x150>
 802376e:	682b      	ldr	r3, [r5, #0]
 8023770:	1d1a      	adds	r2, r3, #4
 8023772:	602a      	str	r2, [r5, #0]
 8023774:	681d      	ldr	r5, [r3, #0]
 8023776:	6862      	ldr	r2, [r4, #4]
 8023778:	2100      	movs	r1, #0
 802377a:	4628      	mov	r0, r5
 802377c:	f7dc fd78 	bl	8000270 <memchr>
 8023780:	b108      	cbz	r0, 8023786 <_printf_i+0x1f2>
 8023782:	1b40      	subs	r0, r0, r5
 8023784:	6060      	str	r0, [r4, #4]
 8023786:	6863      	ldr	r3, [r4, #4]
 8023788:	6123      	str	r3, [r4, #16]
 802378a:	2300      	movs	r3, #0
 802378c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023790:	e7a8      	b.n	80236e4 <_printf_i+0x150>
 8023792:	6923      	ldr	r3, [r4, #16]
 8023794:	462a      	mov	r2, r5
 8023796:	4649      	mov	r1, r9
 8023798:	4640      	mov	r0, r8
 802379a:	47d0      	blx	sl
 802379c:	3001      	adds	r0, #1
 802379e:	d0ab      	beq.n	80236f8 <_printf_i+0x164>
 80237a0:	6823      	ldr	r3, [r4, #0]
 80237a2:	079b      	lsls	r3, r3, #30
 80237a4:	d413      	bmi.n	80237ce <_printf_i+0x23a>
 80237a6:	68e0      	ldr	r0, [r4, #12]
 80237a8:	9b03      	ldr	r3, [sp, #12]
 80237aa:	4298      	cmp	r0, r3
 80237ac:	bfb8      	it	lt
 80237ae:	4618      	movlt	r0, r3
 80237b0:	e7a4      	b.n	80236fc <_printf_i+0x168>
 80237b2:	2301      	movs	r3, #1
 80237b4:	4632      	mov	r2, r6
 80237b6:	4649      	mov	r1, r9
 80237b8:	4640      	mov	r0, r8
 80237ba:	47d0      	blx	sl
 80237bc:	3001      	adds	r0, #1
 80237be:	d09b      	beq.n	80236f8 <_printf_i+0x164>
 80237c0:	3501      	adds	r5, #1
 80237c2:	68e3      	ldr	r3, [r4, #12]
 80237c4:	9903      	ldr	r1, [sp, #12]
 80237c6:	1a5b      	subs	r3, r3, r1
 80237c8:	42ab      	cmp	r3, r5
 80237ca:	dcf2      	bgt.n	80237b2 <_printf_i+0x21e>
 80237cc:	e7eb      	b.n	80237a6 <_printf_i+0x212>
 80237ce:	2500      	movs	r5, #0
 80237d0:	f104 0619 	add.w	r6, r4, #25
 80237d4:	e7f5      	b.n	80237c2 <_printf_i+0x22e>
 80237d6:	bf00      	nop
 80237d8:	08029171 	.word	0x08029171
 80237dc:	08029182 	.word	0x08029182

080237e0 <_putc_r>:
 80237e0:	b570      	push	{r4, r5, r6, lr}
 80237e2:	460d      	mov	r5, r1
 80237e4:	4614      	mov	r4, r2
 80237e6:	4606      	mov	r6, r0
 80237e8:	b118      	cbz	r0, 80237f2 <_putc_r+0x12>
 80237ea:	6983      	ldr	r3, [r0, #24]
 80237ec:	b90b      	cbnz	r3, 80237f2 <_putc_r+0x12>
 80237ee:	f7ff fa89 	bl	8022d04 <__sinit>
 80237f2:	4b1c      	ldr	r3, [pc, #112]	; (8023864 <_putc_r+0x84>)
 80237f4:	429c      	cmp	r4, r3
 80237f6:	d124      	bne.n	8023842 <_putc_r+0x62>
 80237f8:	6874      	ldr	r4, [r6, #4]
 80237fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80237fc:	07d8      	lsls	r0, r3, #31
 80237fe:	d405      	bmi.n	802380c <_putc_r+0x2c>
 8023800:	89a3      	ldrh	r3, [r4, #12]
 8023802:	0599      	lsls	r1, r3, #22
 8023804:	d402      	bmi.n	802380c <_putc_r+0x2c>
 8023806:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023808:	f7ff fb2c 	bl	8022e64 <__retarget_lock_acquire_recursive>
 802380c:	68a3      	ldr	r3, [r4, #8]
 802380e:	3b01      	subs	r3, #1
 8023810:	2b00      	cmp	r3, #0
 8023812:	60a3      	str	r3, [r4, #8]
 8023814:	da05      	bge.n	8023822 <_putc_r+0x42>
 8023816:	69a2      	ldr	r2, [r4, #24]
 8023818:	4293      	cmp	r3, r2
 802381a:	db1c      	blt.n	8023856 <_putc_r+0x76>
 802381c:	b2eb      	uxtb	r3, r5
 802381e:	2b0a      	cmp	r3, #10
 8023820:	d019      	beq.n	8023856 <_putc_r+0x76>
 8023822:	6823      	ldr	r3, [r4, #0]
 8023824:	1c5a      	adds	r2, r3, #1
 8023826:	6022      	str	r2, [r4, #0]
 8023828:	701d      	strb	r5, [r3, #0]
 802382a:	b2ed      	uxtb	r5, r5
 802382c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802382e:	07da      	lsls	r2, r3, #31
 8023830:	d405      	bmi.n	802383e <_putc_r+0x5e>
 8023832:	89a3      	ldrh	r3, [r4, #12]
 8023834:	059b      	lsls	r3, r3, #22
 8023836:	d402      	bmi.n	802383e <_putc_r+0x5e>
 8023838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802383a:	f7ff fb14 	bl	8022e66 <__retarget_lock_release_recursive>
 802383e:	4628      	mov	r0, r5
 8023840:	bd70      	pop	{r4, r5, r6, pc}
 8023842:	4b09      	ldr	r3, [pc, #36]	; (8023868 <_putc_r+0x88>)
 8023844:	429c      	cmp	r4, r3
 8023846:	d101      	bne.n	802384c <_putc_r+0x6c>
 8023848:	68b4      	ldr	r4, [r6, #8]
 802384a:	e7d6      	b.n	80237fa <_putc_r+0x1a>
 802384c:	4b07      	ldr	r3, [pc, #28]	; (802386c <_putc_r+0x8c>)
 802384e:	429c      	cmp	r4, r3
 8023850:	bf08      	it	eq
 8023852:	68f4      	ldreq	r4, [r6, #12]
 8023854:	e7d1      	b.n	80237fa <_putc_r+0x1a>
 8023856:	4629      	mov	r1, r5
 8023858:	4622      	mov	r2, r4
 802385a:	4630      	mov	r0, r6
 802385c:	f7ff f85a 	bl	8022914 <__swbuf_r>
 8023860:	4605      	mov	r5, r0
 8023862:	e7e3      	b.n	802382c <_putc_r+0x4c>
 8023864:	08029120 	.word	0x08029120
 8023868:	08029140 	.word	0x08029140
 802386c:	08029100 	.word	0x08029100

08023870 <__sread>:
 8023870:	b510      	push	{r4, lr}
 8023872:	460c      	mov	r4, r1
 8023874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023878:	f000 f8cc 	bl	8023a14 <_read_r>
 802387c:	2800      	cmp	r0, #0
 802387e:	bfab      	itete	ge
 8023880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023882:	89a3      	ldrhlt	r3, [r4, #12]
 8023884:	181b      	addge	r3, r3, r0
 8023886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802388a:	bfac      	ite	ge
 802388c:	6563      	strge	r3, [r4, #84]	; 0x54
 802388e:	81a3      	strhlt	r3, [r4, #12]
 8023890:	bd10      	pop	{r4, pc}

08023892 <__swrite>:
 8023892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023896:	461f      	mov	r7, r3
 8023898:	898b      	ldrh	r3, [r1, #12]
 802389a:	05db      	lsls	r3, r3, #23
 802389c:	4605      	mov	r5, r0
 802389e:	460c      	mov	r4, r1
 80238a0:	4616      	mov	r6, r2
 80238a2:	d505      	bpl.n	80238b0 <__swrite+0x1e>
 80238a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238a8:	2302      	movs	r3, #2
 80238aa:	2200      	movs	r2, #0
 80238ac:	f000 f870 	bl	8023990 <_lseek_r>
 80238b0:	89a3      	ldrh	r3, [r4, #12]
 80238b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80238b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80238ba:	81a3      	strh	r3, [r4, #12]
 80238bc:	4632      	mov	r2, r6
 80238be:	463b      	mov	r3, r7
 80238c0:	4628      	mov	r0, r5
 80238c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80238c6:	f000 b817 	b.w	80238f8 <_write_r>

080238ca <__sseek>:
 80238ca:	b510      	push	{r4, lr}
 80238cc:	460c      	mov	r4, r1
 80238ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238d2:	f000 f85d 	bl	8023990 <_lseek_r>
 80238d6:	1c43      	adds	r3, r0, #1
 80238d8:	89a3      	ldrh	r3, [r4, #12]
 80238da:	bf15      	itete	ne
 80238dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80238de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80238e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80238e6:	81a3      	strheq	r3, [r4, #12]
 80238e8:	bf18      	it	ne
 80238ea:	81a3      	strhne	r3, [r4, #12]
 80238ec:	bd10      	pop	{r4, pc}

080238ee <__sclose>:
 80238ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238f2:	f000 b81b 	b.w	802392c <_close_r>
	...

080238f8 <_write_r>:
 80238f8:	b538      	push	{r3, r4, r5, lr}
 80238fa:	4d07      	ldr	r5, [pc, #28]	; (8023918 <_write_r+0x20>)
 80238fc:	4604      	mov	r4, r0
 80238fe:	4608      	mov	r0, r1
 8023900:	4611      	mov	r1, r2
 8023902:	2200      	movs	r2, #0
 8023904:	602a      	str	r2, [r5, #0]
 8023906:	461a      	mov	r2, r3
 8023908:	f7f0 ff4d 	bl	80147a6 <_write>
 802390c:	1c43      	adds	r3, r0, #1
 802390e:	d102      	bne.n	8023916 <_write_r+0x1e>
 8023910:	682b      	ldr	r3, [r5, #0]
 8023912:	b103      	cbz	r3, 8023916 <_write_r+0x1e>
 8023914:	6023      	str	r3, [r4, #0]
 8023916:	bd38      	pop	{r3, r4, r5, pc}
 8023918:	2001429c 	.word	0x2001429c

0802391c <abort>:
 802391c:	b508      	push	{r3, lr}
 802391e:	2006      	movs	r0, #6
 8023920:	f000 f8b2 	bl	8023a88 <raise>
 8023924:	2001      	movs	r0, #1
 8023926:	f7f0 ff17 	bl	8014758 <_exit>
	...

0802392c <_close_r>:
 802392c:	b538      	push	{r3, r4, r5, lr}
 802392e:	4d06      	ldr	r5, [pc, #24]	; (8023948 <_close_r+0x1c>)
 8023930:	2300      	movs	r3, #0
 8023932:	4604      	mov	r4, r0
 8023934:	4608      	mov	r0, r1
 8023936:	602b      	str	r3, [r5, #0]
 8023938:	f7f0 ff51 	bl	80147de <_close>
 802393c:	1c43      	adds	r3, r0, #1
 802393e:	d102      	bne.n	8023946 <_close_r+0x1a>
 8023940:	682b      	ldr	r3, [r5, #0]
 8023942:	b103      	cbz	r3, 8023946 <_close_r+0x1a>
 8023944:	6023      	str	r3, [r4, #0]
 8023946:	bd38      	pop	{r3, r4, r5, pc}
 8023948:	2001429c 	.word	0x2001429c

0802394c <_fstat_r>:
 802394c:	b538      	push	{r3, r4, r5, lr}
 802394e:	4d07      	ldr	r5, [pc, #28]	; (802396c <_fstat_r+0x20>)
 8023950:	2300      	movs	r3, #0
 8023952:	4604      	mov	r4, r0
 8023954:	4608      	mov	r0, r1
 8023956:	4611      	mov	r1, r2
 8023958:	602b      	str	r3, [r5, #0]
 802395a:	f7f0 ff4c 	bl	80147f6 <_fstat>
 802395e:	1c43      	adds	r3, r0, #1
 8023960:	d102      	bne.n	8023968 <_fstat_r+0x1c>
 8023962:	682b      	ldr	r3, [r5, #0]
 8023964:	b103      	cbz	r3, 8023968 <_fstat_r+0x1c>
 8023966:	6023      	str	r3, [r4, #0]
 8023968:	bd38      	pop	{r3, r4, r5, pc}
 802396a:	bf00      	nop
 802396c:	2001429c 	.word	0x2001429c

08023970 <_isatty_r>:
 8023970:	b538      	push	{r3, r4, r5, lr}
 8023972:	4d06      	ldr	r5, [pc, #24]	; (802398c <_isatty_r+0x1c>)
 8023974:	2300      	movs	r3, #0
 8023976:	4604      	mov	r4, r0
 8023978:	4608      	mov	r0, r1
 802397a:	602b      	str	r3, [r5, #0]
 802397c:	f7f0 ff4b 	bl	8014816 <_isatty>
 8023980:	1c43      	adds	r3, r0, #1
 8023982:	d102      	bne.n	802398a <_isatty_r+0x1a>
 8023984:	682b      	ldr	r3, [r5, #0]
 8023986:	b103      	cbz	r3, 802398a <_isatty_r+0x1a>
 8023988:	6023      	str	r3, [r4, #0]
 802398a:	bd38      	pop	{r3, r4, r5, pc}
 802398c:	2001429c 	.word	0x2001429c

08023990 <_lseek_r>:
 8023990:	b538      	push	{r3, r4, r5, lr}
 8023992:	4d07      	ldr	r5, [pc, #28]	; (80239b0 <_lseek_r+0x20>)
 8023994:	4604      	mov	r4, r0
 8023996:	4608      	mov	r0, r1
 8023998:	4611      	mov	r1, r2
 802399a:	2200      	movs	r2, #0
 802399c:	602a      	str	r2, [r5, #0]
 802399e:	461a      	mov	r2, r3
 80239a0:	f7f0 ff44 	bl	801482c <_lseek>
 80239a4:	1c43      	adds	r3, r0, #1
 80239a6:	d102      	bne.n	80239ae <_lseek_r+0x1e>
 80239a8:	682b      	ldr	r3, [r5, #0]
 80239aa:	b103      	cbz	r3, 80239ae <_lseek_r+0x1e>
 80239ac:	6023      	str	r3, [r4, #0]
 80239ae:	bd38      	pop	{r3, r4, r5, pc}
 80239b0:	2001429c 	.word	0x2001429c

080239b4 <_realloc_r>:
 80239b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239b8:	4680      	mov	r8, r0
 80239ba:	4614      	mov	r4, r2
 80239bc:	460e      	mov	r6, r1
 80239be:	b921      	cbnz	r1, 80239ca <_realloc_r+0x16>
 80239c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80239c4:	4611      	mov	r1, r2
 80239c6:	f7fe bd59 	b.w	802247c <_malloc_r>
 80239ca:	b92a      	cbnz	r2, 80239d8 <_realloc_r+0x24>
 80239cc:	f7fe fcea 	bl	80223a4 <_free_r>
 80239d0:	4625      	mov	r5, r4
 80239d2:	4628      	mov	r0, r5
 80239d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80239d8:	f000 f872 	bl	8023ac0 <_malloc_usable_size_r>
 80239dc:	4284      	cmp	r4, r0
 80239de:	4607      	mov	r7, r0
 80239e0:	d802      	bhi.n	80239e8 <_realloc_r+0x34>
 80239e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80239e6:	d812      	bhi.n	8023a0e <_realloc_r+0x5a>
 80239e8:	4621      	mov	r1, r4
 80239ea:	4640      	mov	r0, r8
 80239ec:	f7fe fd46 	bl	802247c <_malloc_r>
 80239f0:	4605      	mov	r5, r0
 80239f2:	2800      	cmp	r0, #0
 80239f4:	d0ed      	beq.n	80239d2 <_realloc_r+0x1e>
 80239f6:	42bc      	cmp	r4, r7
 80239f8:	4622      	mov	r2, r4
 80239fa:	4631      	mov	r1, r6
 80239fc:	bf28      	it	cs
 80239fe:	463a      	movcs	r2, r7
 8023a00:	f7fe fca0 	bl	8022344 <memcpy>
 8023a04:	4631      	mov	r1, r6
 8023a06:	4640      	mov	r0, r8
 8023a08:	f7fe fccc 	bl	80223a4 <_free_r>
 8023a0c:	e7e1      	b.n	80239d2 <_realloc_r+0x1e>
 8023a0e:	4635      	mov	r5, r6
 8023a10:	e7df      	b.n	80239d2 <_realloc_r+0x1e>
	...

08023a14 <_read_r>:
 8023a14:	b538      	push	{r3, r4, r5, lr}
 8023a16:	4d07      	ldr	r5, [pc, #28]	; (8023a34 <_read_r+0x20>)
 8023a18:	4604      	mov	r4, r0
 8023a1a:	4608      	mov	r0, r1
 8023a1c:	4611      	mov	r1, r2
 8023a1e:	2200      	movs	r2, #0
 8023a20:	602a      	str	r2, [r5, #0]
 8023a22:	461a      	mov	r2, r3
 8023a24:	f7f0 fea2 	bl	801476c <_read>
 8023a28:	1c43      	adds	r3, r0, #1
 8023a2a:	d102      	bne.n	8023a32 <_read_r+0x1e>
 8023a2c:	682b      	ldr	r3, [r5, #0]
 8023a2e:	b103      	cbz	r3, 8023a32 <_read_r+0x1e>
 8023a30:	6023      	str	r3, [r4, #0]
 8023a32:	bd38      	pop	{r3, r4, r5, pc}
 8023a34:	2001429c 	.word	0x2001429c

08023a38 <_raise_r>:
 8023a38:	291f      	cmp	r1, #31
 8023a3a:	b538      	push	{r3, r4, r5, lr}
 8023a3c:	4604      	mov	r4, r0
 8023a3e:	460d      	mov	r5, r1
 8023a40:	d904      	bls.n	8023a4c <_raise_r+0x14>
 8023a42:	2316      	movs	r3, #22
 8023a44:	6003      	str	r3, [r0, #0]
 8023a46:	f04f 30ff 	mov.w	r0, #4294967295
 8023a4a:	bd38      	pop	{r3, r4, r5, pc}
 8023a4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023a4e:	b112      	cbz	r2, 8023a56 <_raise_r+0x1e>
 8023a50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023a54:	b94b      	cbnz	r3, 8023a6a <_raise_r+0x32>
 8023a56:	4620      	mov	r0, r4
 8023a58:	f000 f830 	bl	8023abc <_getpid_r>
 8023a5c:	462a      	mov	r2, r5
 8023a5e:	4601      	mov	r1, r0
 8023a60:	4620      	mov	r0, r4
 8023a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023a66:	f000 b817 	b.w	8023a98 <_kill_r>
 8023a6a:	2b01      	cmp	r3, #1
 8023a6c:	d00a      	beq.n	8023a84 <_raise_r+0x4c>
 8023a6e:	1c59      	adds	r1, r3, #1
 8023a70:	d103      	bne.n	8023a7a <_raise_r+0x42>
 8023a72:	2316      	movs	r3, #22
 8023a74:	6003      	str	r3, [r0, #0]
 8023a76:	2001      	movs	r0, #1
 8023a78:	e7e7      	b.n	8023a4a <_raise_r+0x12>
 8023a7a:	2400      	movs	r4, #0
 8023a7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023a80:	4628      	mov	r0, r5
 8023a82:	4798      	blx	r3
 8023a84:	2000      	movs	r0, #0
 8023a86:	e7e0      	b.n	8023a4a <_raise_r+0x12>

08023a88 <raise>:
 8023a88:	4b02      	ldr	r3, [pc, #8]	; (8023a94 <raise+0xc>)
 8023a8a:	4601      	mov	r1, r0
 8023a8c:	6818      	ldr	r0, [r3, #0]
 8023a8e:	f7ff bfd3 	b.w	8023a38 <_raise_r>
 8023a92:	bf00      	nop
 8023a94:	20000140 	.word	0x20000140

08023a98 <_kill_r>:
 8023a98:	b538      	push	{r3, r4, r5, lr}
 8023a9a:	4d07      	ldr	r5, [pc, #28]	; (8023ab8 <_kill_r+0x20>)
 8023a9c:	2300      	movs	r3, #0
 8023a9e:	4604      	mov	r4, r0
 8023aa0:	4608      	mov	r0, r1
 8023aa2:	4611      	mov	r1, r2
 8023aa4:	602b      	str	r3, [r5, #0]
 8023aa6:	f7f0 fe45 	bl	8014734 <_kill>
 8023aaa:	1c43      	adds	r3, r0, #1
 8023aac:	d102      	bne.n	8023ab4 <_kill_r+0x1c>
 8023aae:	682b      	ldr	r3, [r5, #0]
 8023ab0:	b103      	cbz	r3, 8023ab4 <_kill_r+0x1c>
 8023ab2:	6023      	str	r3, [r4, #0]
 8023ab4:	bd38      	pop	{r3, r4, r5, pc}
 8023ab6:	bf00      	nop
 8023ab8:	2001429c 	.word	0x2001429c

08023abc <_getpid_r>:
 8023abc:	f7f0 be32 	b.w	8014724 <_getpid>

08023ac0 <_malloc_usable_size_r>:
 8023ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023ac4:	1f18      	subs	r0, r3, #4
 8023ac6:	2b00      	cmp	r3, #0
 8023ac8:	bfbc      	itt	lt
 8023aca:	580b      	ldrlt	r3, [r1, r0]
 8023acc:	18c0      	addlt	r0, r0, r3
 8023ace:	4770      	bx	lr

08023ad0 <_init>:
 8023ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ad2:	bf00      	nop
 8023ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ad6:	bc08      	pop	{r3}
 8023ad8:	469e      	mov	lr, r3
 8023ada:	4770      	bx	lr

08023adc <_fini>:
 8023adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ade:	bf00      	nop
 8023ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ae2:	bc08      	pop	{r3}
 8023ae4:	469e      	mov	lr, r3
 8023ae6:	4770      	bx	lr
