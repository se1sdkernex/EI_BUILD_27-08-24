
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027dc8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005f7c  08027fc8  08027fc8  00037fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802df44  0802df44  000404e4  2**0
                  CONTENTS
  4 .ARM          00000008  0802df44  0802df44  0003df44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802df4c  0802df4c  000404e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802df4c  0802df4c  0003df4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802df50  0802df50  0003df50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  0802df54  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200003a4  0802e2f8  000403a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000444  0802e398  00040444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00015e34  200004e4  0802e438  000404e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20016318  0802e438  00046318  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000404e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a760  00000000  00000000  00040512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000882f  00000000  00000000  0007ac72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002560  00000000  00000000  000834a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002270  00000000  00000000  00085a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00044171  00000000  00000000  00087c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000493ed  00000000  00000000  000cbde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013c552  00000000  00000000  001151d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00251728  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a380  00000000  00000000  00251778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200004e4 	.word	0x200004e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08027fb0 	.word	0x08027fb0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200004e8 	.word	0x200004e8
 800023c:	08027fb0 	.word	0x08027fb0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000fc4 	.word	0x20000fc4
 8000a70:	08027fc8 	.word	0x08027fc8
 8000a74:	08027fd4 	.word	0x08027fd4
 8000a78:	08027fe4 	.word	0x08027fe4
 8000a7c:	08027ff4 	.word	0x08027ff4
 8000a80:	08028008 	.word	0x08028008
 8000a84:	0802801c 	.word	0x0802801c
 8000a88:	08028030 	.word	0x08028030
 8000a8c:	0802803c 	.word	0x0802803c
 8000a90:	200013ac 	.word	0x200013ac

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01e fd8b 	bl	801f5c0 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f026 f8b7 	bl	8026c28 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000dcb8 	.word	0x2000dcb8
 8000ac8:	20000340 	.word	0x20000340

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f01b fc5f 	bl	801c3a0 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f01b fc4f 	bl	801c3a0 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f01b fc3e 	bl	801c3a0 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000fbc 	.word	0x20000fbc
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f025 fe7a 	bl	8026874 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00f fc37 	bl	80103f8 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f018 fc23 	bl	80193e0 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f018 fbd2 	bl	8019360 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f025 ff30 	bl	8026a44 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f025 ffa4 	bl	8026b7c <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f025 fefa 	bl	8026a44 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f025 ff75 	bl	8026b7c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f025 fec8 	bl	8026a44 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f025 ff61 	bl	8026b7c <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f025 feab 	bl	8026a44 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f025 fe9d 	bl	8026a44 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f025 ff36 	bl	8026b7c <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f025 fe7d 	bl	8026a44 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f025 fe6f 	bl	8026a44 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f025 ff08 	bl	8026b7c <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f025 fe4a 	bl	8026a44 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f025 fe28 	bl	8026a44 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f025 fe0f 	bl	8026a44 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f025 fe01 	bl	8026a44 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f025 fdf3 	bl	8026a44 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f025 fe8b 	bl	8026b7c <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f010 f873 	bl	8010f60 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000c074 	.word	0x2000c074
 8000e88:	08028044 	.word	0x08028044
 8000e8c:	20000bba 	.word	0x20000bba
 8000e90:	0802805c 	.word	0x0802805c
 8000e94:	20000ff6 	.word	0x20000ff6
 8000e98:	0802809c 	.word	0x0802809c
 8000e9c:	20000bbb 	.word	0x20000bbb
 8000ea0:	080280b0 	.word	0x080280b0
 8000ea4:	20001028 	.word	0x20001028
 8000ea8:	080280cc 	.word	0x080280cc
 8000eac:	080280e8 	.word	0x080280e8
 8000eb0:	2000308c 	.word	0x2000308c
 8000eb4:	080280f8 	.word	0x080280f8
 8000eb8:	2000105a 	.word	0x2000105a
 8000ebc:	0802810c 	.word	0x0802810c
 8000ec0:	2000108c 	.word	0x2000108c
 8000ec4:	0802811c 	.word	0x0802811c
 8000ec8:	200010be 	.word	0x200010be
 8000ecc:	200010f0 	.word	0x200010f0
 8000ed0:	20001122 	.word	0x20001122
 8000ed4:	08028138 	.word	0x08028138
 8000ed8:	20001154 	.word	0x20001154
 8000edc:	08028148 	.word	0x08028148
 8000ee0:	20001186 	.word	0x20001186

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f025 fc72 	bl	8026804 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000fc4 	.word	0x20000fc4
 8000f48:	200013ac 	.word	0x200013ac

08000f4c <CheckEIPC_DAT_CRC>:
		printf("%s\n",Commands_List[Traverser]);
	}
}

void CheckEIPC_DAT_CRC(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	static uint32_t CheckClk = 0;

	if(HAL_Elaps_Ticks(CheckClk) > FOUR_SEC)
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00f fa4f 	bl	80103f8 <HAL_Elaps_Ticks>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f60:	d921      	bls.n	8000fa6 <CheckEIPC_DAT_CRC+0x5a>
	{
		if((DatCrcXchangeSelf_st.App_CRC != DatCrcXchangeOther_st.App_CRC) && (DatCrcXchangeOther_st.App_CRC != 0))
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <CheckEIPC_DAT_CRC+0x64>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d012      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00e      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
		{
			printf("\nEIPC's are not in Sync.....!!!!!\n");
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <CheckEIPC_DAT_CRC+0x6c>)
 8000f78:	f025 fe00 	bl	8026b7c <puts>
			printf("Self CRC:%04X\n",DatCrcXchangeSelf_st.App_CRC);
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <CheckEIPC_DAT_CRC+0x64>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <CheckEIPC_DAT_CRC+0x70>)
 8000f84:	f025 fd5e 	bl	8026a44 <iprintf>
			printf("Other CRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <CheckEIPC_DAT_CRC+0x74>)
 8000f90:	f025 fd58 	bl	8026a44 <iprintf>
		}


#ifdef EI_1
		TransmitCanPkt(DAT_CRC_EXCHANGE_1);
 8000f94:	f240 2009 	movw	r0, #521	; 0x209
 8000f98:	f00f ffe2 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(DAT_CRC_EXCHANGE_2);
#endif

		CheckClk = HAL_GetTick();
 8000f9c:	f018 fd48 	bl	8019a30 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a02      	ldr	r2, [pc, #8]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000fa4:	6013      	str	r3, [r2, #0]

	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200013b0 	.word	0x200013b0
 8000fb0:	20000bb4 	.word	0x20000bb4
 8000fb4:	20000bb8 	.word	0x20000bb8
 8000fb8:	08028184 	.word	0x08028184
 8000fbc:	080281a8 	.word	0x080281a8
 8000fc0:	080281b8 	.word	0x080281b8

08000fc4 <Check_OnlineDiag_OFC_Modem>:
		0x40
};


void Check_OnlineDiag_OFC_Modem(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	static unsigned int ui_Online_DigChkTics;
	if(HAL_Elaps_Ticks(ui_Online_DigChkTics) > (SEVEN*ONE_SEC))           // wait for 30 Sec
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00f fa13 	bl	80103f8 <HAL_Elaps_Ticks>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d906      	bls.n	8000fea <Check_OnlineDiag_OFC_Modem+0x26>
	{
		Check_Online_Dignostic_RIU();                                //Checking the online dignostic status of network of OFC modem
 8000fdc:	f000 f80a 	bl	8000ff4 <Check_Online_Dignostic_RIU>
		ui_Online_DigChkTics = HAL_GetTick();
 8000fe0:	f018 fd26 	bl	8019a30 <HAL_GetTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a02      	ldr	r2, [pc, #8]	; (8000ff0 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fe8:	6013      	str	r3, [r2, #0]
	}
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20002370 	.word	0x20002370

08000ff4 <Check_Online_Dignostic_RIU>:

void Check_Online_Dignostic_RIU(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	//static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Failure_check_flag,Flag = 4,suc_Hold_Flag =1;
	static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Flag = 4,suc_Hold_Flag =1;
	unsigned char index,insert_index = 0,check_index = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]
 8000ffe:	2300      	movs	r3, #0
 8001000:	717b      	strb	r3, [r7, #5]
	for(index = 0;index< 31; index++)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e069      	b.n	80010dc <Check_Online_Dignostic_RIU+0xe8>
	{
		if(Online_diag_flag[index] == 0)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a6f      	ldr	r2, [pc, #444]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d108      	bne.n	8001024 <Check_Online_Dignostic_RIU+0x30>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],0);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b298      	uxth	r0, r3
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	4a6c      	ldr	r2, [pc, #432]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800101a:	441a      	add	r2, r3
 800101c:	2300      	movs	r3, #0
 800101e:	2102      	movs	r1, #2
 8001020:	f7ff fb84 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 1)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a68      	ldr	r2, [pc, #416]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <Check_Online_Dignostic_RIU+0x4c>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],1);
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	b298      	uxth	r0, r3
 8001032:	797b      	ldrb	r3, [r7, #5]
 8001034:	4a65      	ldr	r2, [pc, #404]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 8001036:	441a      	add	r2, r3
 8001038:	2301      	movs	r3, #1
 800103a:	2102      	movs	r1, #2
 800103c:	f7ff fb76 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 2)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a61      	ldr	r2, [pc, #388]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d108      	bne.n	800105c <Check_Online_Dignostic_RIU+0x68>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],2);
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	b298      	uxth	r0, r3
 800104e:	797b      	ldrb	r3, [r7, #5]
 8001050:	4a5e      	ldr	r2, [pc, #376]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 8001052:	441a      	add	r2, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2102      	movs	r1, #2
 8001058:	f7ff fb68 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 3)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a5a      	ldr	r2, [pc, #360]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d108      	bne.n	8001078 <Check_Online_Dignostic_RIU+0x84>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	b298      	uxth	r0, r3
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	4a57      	ldr	r2, [pc, #348]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800106e:	441a      	add	r2, r3
 8001070:	2303      	movs	r3, #3
 8001072:	2102      	movs	r1, #2
 8001074:	f7ff fb5a 	bl	800072c <InsertBits>

		}
		if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (FIFTEEN*ONE_SEC))
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <Check_Online_Dignostic_RIU+0x1dc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f00f f9bb 	bl	80103f8 <HAL_Elaps_Ticks>
 8001082:	4603      	mov	r3, r0
 8001084:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001088:	4293      	cmp	r3, r2
 800108a:	d913      	bls.n	80010b4 <Check_Online_Dignostic_RIU+0xc0>
		{
			if(Online_diag_flag[index] > 0)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00e      	beq.n	80010b4 <Check_Online_Dignostic_RIU+0xc0>
			{
				InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	b298      	uxth	r0, r3
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800109e:	441a      	add	r2, r3
 80010a0:	2303      	movs	r3, #3
 80010a2:	2102      	movs	r1, #2
 80010a4:	f7ff fb42 	bl	800072c <InsertBits>
				ofc_flag1 = 1;
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
				//	ofc_flag1 = 1;
				printf("##############################################Both fiber link failure ocuired$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
 80010ae:	484a      	ldr	r0, [pc, #296]	; (80011d8 <Check_Online_Dignostic_RIU+0x1e4>)
 80010b0:	f025 fcc8 	bl	8026a44 <iprintf>

			}
		}
		insert_index =	insert_index + 2;
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	3302      	adds	r3, #2
 80010b8:	71bb      	strb	r3, [r7, #6]
		if(insert_index == 8)
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d104      	bne.n	80010ca <Check_Online_Dignostic_RIU+0xd6>
		{
			insert_index = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71bb      	strb	r3, [r7, #6]
			check_index++;
 80010c4:	797b      	ldrb	r3, [r7, #5]
 80010c6:	3301      	adds	r3, #1
 80010c8:	717b      	strb	r3, [r7, #5]
		}
		if((check_index == 7)&&(insert_index == 6))
 80010ca:	797b      	ldrb	r3, [r7, #5]
 80010cc:	2b07      	cmp	r3, #7
 80010ce:	d102      	bne.n	80010d6 <Check_Online_Dignostic_RIU+0xe2>
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d006      	beq.n	80010e4 <Check_Online_Dignostic_RIU+0xf0>
	for(index = 0;index< 31; index++)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	3301      	adds	r3, #1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b1e      	cmp	r3, #30
 80010e0:	d992      	bls.n	8001008 <Check_Online_Dignostic_RIU+0x14>
 80010e2:	e000      	b.n	80010e6 <Check_Online_Dignostic_RIU+0xf2>
		{
			break;
 80010e4:	bf00      	nop
		}
	}
	for(index = 0;index< 31; index++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e010      	b.n	800110e <Check_Online_Dignostic_RIU+0x11a>
	{
		if((Online_diag_flag[index] > 0)&&(Online_diag_flag[index] < 4))
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <Check_Online_Dignostic_RIU+0x114>
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d803      	bhi.n	8001108 <Check_Online_Dignostic_RIU+0x114>
		{
			temp1 = index;
 8001100:	4a36      	ldr	r2, [pc, #216]	; (80011dc <Check_Online_Dignostic_RIU+0x1e8>)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	7013      	strb	r3, [r2, #0]
			break;
 8001106:	e005      	b.n	8001114 <Check_Online_Dignostic_RIU+0x120>
	for(index = 0;index< 31; index++)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3301      	adds	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b1e      	cmp	r3, #30
 8001112:	d9eb      	bls.n	80010ec <Check_Online_Dignostic_RIU+0xf8>
		}
	}
	temp2 = temp1;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <Check_Online_Dignostic_RIU+0x1e8>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 800111a:	701a      	strb	r2, [r3, #0]
	temp3 = index;
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	7013      	strb	r3, [r2, #0]

	if(temp2 != temp3)
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d019      	beq.n	8001162 <Check_Online_Dignostic_RIU+0x16e>
	{
		printf("\n***********************FIBER LINK OK******************************\n");
 800112e:	482e      	ldr	r0, [pc, #184]	; (80011e8 <Check_Online_Dignostic_RIU+0x1f4>)
 8001130:	f025 fd24 	bl	8026b7c <puts>

		//	ofc_flag2 =0;
		suc_Hold_Flag = 1;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
		Failure_check_flag++;
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001144:	701a      	strb	r2, [r3, #0]
		if(ofc_flag1 > 4)
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d90c      	bls.n	8001168 <Check_Online_Dignostic_RIU+0x174>
		{
			ofc_flag1 =0;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
			Failure_check_flag =4;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001156:	2204      	movs	r2, #4
 8001158:	701a      	strb	r2, [r3, #0]
			printf("\n****************************ASSIGNED***********************\n");
 800115a:	4826      	ldr	r0, [pc, #152]	; (80011f4 <Check_Online_Dignostic_RIU+0x200>)
 800115c:	f025 fd0e 	bl	8026b7c <puts>
 8001160:	e002      	b.n	8001168 <Check_Online_Dignostic_RIU+0x174>
			 */
		}

	}
	else
		Failure_check_flag = 0;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
	if(Failure_check_flag == 250)
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2bfa      	cmp	r3, #250	; 0xfa
 800116e:	d102      	bne.n	8001176 <Check_Online_Dignostic_RIU+0x182>
	{
		Failure_check_flag = 6;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001172:	2206      	movs	r2, #6
 8001174:	701a      	strb	r2, [r3, #0]
	}

	if(temp2 == temp3)
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d142      	bne.n	8001208 <Check_Online_Dignostic_RIU+0x214>
	{
		CAN_Trans_flag++;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <Check_Online_Dignostic_RIU+0x204>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <Check_Online_Dignostic_RIU+0x204>)
 800118c:	701a      	strb	r2, [r3, #0]
		printf("\n************************FIBER LINK FAIL*****************************\n");
 800118e:	481b      	ldr	r0, [pc, #108]	; (80011fc <Check_Online_Dignostic_RIU+0x208>)
 8001190:	f025 fcf4 	bl	8026b7c <puts>
		//		Online_diag_flag[index] = 3; //raviteja

		if((4 == Flag)&&(1 == suc_Hold_Flag))
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <Check_Online_Dignostic_RIU+0x20c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d138      	bne.n	800120e <Check_Online_Dignostic_RIU+0x21a>
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d134      	bne.n	800120e <Check_Online_Dignostic_RIU+0x21a>
		{
			if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (12*ONE_SEC))
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <Check_Online_Dignostic_RIU+0x1dc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00f f925 	bl	80103f8 <HAL_Elaps_Ticks>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d92a      	bls.n	800120e <Check_Online_Dignostic_RIU+0x21a>
			{
				suc_Hold_Flag = 0;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
				printf("\n Sending the packet to MIE 1 and MIE 2");
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <Check_Online_Dignostic_RIU+0x210>)
 80011c0:	f025 fc40 	bl	8026a44 <iprintf>
 80011c4:	e023      	b.n	800120e <Check_Online_Dignostic_RIU+0x21a>
 80011c6:	bf00      	nop
 80011c8:	20002368 	.word	0x20002368
 80011cc:	200013b4 	.word	0x200013b4
 80011d0:	20002360 	.word	0x20002360
 80011d4:	20002364 	.word	0x20002364
 80011d8:	080281c8 	.word	0x080281c8
 80011dc:	20002374 	.word	0x20002374
 80011e0:	20002375 	.word	0x20002375
 80011e4:	20002376 	.word	0x20002376
 80011e8:	0802823c 	.word	0x0802823c
 80011ec:	20000308 	.word	0x20000308
 80011f0:	2000235c 	.word	0x2000235c
 80011f4:	08028280 	.word	0x08028280
 80011f8:	20002377 	.word	0x20002377
 80011fc:	080282c0 	.word	0x080282c0
 8001200:	20000309 	.word	0x20000309
 8001204:	08028308 	.word	0x08028308

			}
		}
	}
	else
		CAN_Trans_flag = 0;
 8001208:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
	if(CAN_Trans_flag == 250)
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2bfa      	cmp	r3, #250	; 0xfa
 8001214:	d102      	bne.n	800121c <Check_Online_Dignostic_RIU+0x228>
	{
		CAN_Trans_flag = 6;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001218:	2206      	movs	r2, #6
 800121a:	701a      	strb	r2, [r3, #0]
	}
	if((CAN_Trans_flag > 3) && (CAN_Trans_flag < 6) && (Flag == 2))
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d915      	bls.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d811      	bhi.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d10d      	bne.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
		//			{
		//
		//			printf("\n222222Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
		//			}

		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN FAILURE\n");
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <Check_Online_Dignostic_RIU+0x2d8>)
 8001236:	f025 fca1 	bl	8026b7c <puts>
		default:
			printf("ERROR                  \t");
		}
		 */

		Failure_check_flag = 0;
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		Flag = 4;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001242:	2204      	movs	r2, #4
 8001244:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 8001246:	2206      	movs	r2, #6
 8001248:	2100      	movs	r1, #0
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <Check_Online_Dignostic_RIU+0x2e0>)
 800124c:	f025 fb12 	bl	8026874 <memset>
		//printf("\n111******************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	if(((Failure_check_flag > 3) && (Failure_check_flag < 6)&&(Flag == 4))
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d907      	bls.n	8001268 <Check_Online_Dignostic_RIU+0x274>
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d803      	bhi.n	8001268 <Check_Online_Dignostic_RIU+0x274>
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d003      	beq.n	8001270 <Check_Online_Dignostic_RIU+0x27c>
			||(ofc_flag1 > 1))
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d916      	bls.n	800129e <Check_Online_Dignostic_RIU+0x2aa>
	{
		if(ofc_flag1 >1)
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d904      	bls.n	8001282 <Check_Online_Dignostic_RIU+0x28e>
		{
			ofc_flag1++;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 8001280:	6013      	str	r3, [r2, #0]
			//			{
			//
			//			printf("\n3333333Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
			//			}
		}
		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN OK\n");
 8001282:	4816      	ldr	r0, [pc, #88]	; (80012dc <Check_Online_Dignostic_RIU+0x2e8>)
 8001284:	f025 fc7a 	bl	8026b7c <puts>
			break;
		default:
			printf("ERROR                  \t");
		}
		 */
		CAN_Trans_flag = 0;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		Flag = 2;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 8001294:	2206      	movs	r2, #6
 8001296:	2100      	movs	r1, #0
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <Check_Online_Dignostic_RIU+0x2e0>)
 800129a:	f025 faeb 	bl	8026874 <memset>
		//	printf("\n************************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	memset(suc_ReceivedMessage,'\0',sizeof(suc_ReceivedMessage));
 800129e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80012a2:	2100      	movs	r1, #0
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <Check_Online_Dignostic_RIU+0x2ec>)
 80012a6:	f025 fae5 	bl	8026874 <memset>
	temp2 = 0;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <Check_Online_Dignostic_RIU+0x2f0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	temp3 = 0;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <Check_Online_Dignostic_RIU+0x2f4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	temp1 = 0;
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <Check_Online_Dignostic_RIU+0x2f8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20002377 	.word	0x20002377
 80012c8:	20000309 	.word	0x20000309
 80012cc:	08028330 	.word	0x08028330
 80012d0:	2000235c 	.word	0x2000235c
 80012d4:	20002368 	.word	0x20002368
 80012d8:	20002364 	.word	0x20002364
 80012dc:	08028364 	.word	0x08028364
 80012e0:	200013bc 	.word	0x200013bc
 80012e4:	20002375 	.word	0x20002375
 80012e8:	20002376 	.word	0x20002376
 80012ec:	20002374 	.word	0x20002374

080012f0 <process_to_comReceived>:

void process_to_comReceived(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0


	unsigned int NoofBuffBytes = 0,Dat_Check;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
	//	static unsigned int ui_riucmdTxTics;
	static unsigned char EI_Buffer[300];
	NoofBuffBytes= CommReadAndFormMessage_Cmd(TWO_PORT,EI_Buffer,sizeof(EI_Buffer));
 80012fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012fe:	492f      	ldr	r1, [pc, #188]	; (80013bc <process_to_comReceived+0xcc>)
 8001300:	2002      	movs	r0, #2
 8001302:	f000 f86b 	bl	80013dc <CommReadAndFormMessage_Cmd>
 8001306:	4603      	mov	r3, r0
 8001308:	607b      	str	r3, [r7, #4]

	if(NoofBuffBytes >0)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d051      	beq.n	80013b4 <process_to_comReceived+0xc4>
	{
		if((EI_Buffer[0]>=0x01) &&(EI_Buffer[0] <=0x1F))
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <process_to_comReceived+0xcc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d048      	beq.n	80013aa <process_to_comReceived+0xba>
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <process_to_comReceived+0xcc>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b1f      	cmp	r3, #31
 800131e:	d844      	bhi.n	80013aa <process_to_comReceived+0xba>
		{
			Dat_Check = (int)(EI_Buffer[0]);
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <process_to_comReceived+0xcc>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	603b      	str	r3, [r7, #0]
			if(EI_Buffer[22] == 0xFF)
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <process_to_comReceived+0xcc>)
 8001328:	7d9b      	ldrb	r3, [r3, #22]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d108      	bne.n	8001340 <process_to_comReceived+0x50>
			{
				Online_diag_flag[Dat_Check] =0;
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <process_to_comReceived+0xd0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
				printf("\n*******************************SLAVE_%d OK*****************************\n",Dat_Check);
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	4822      	ldr	r0, [pc, #136]	; (80013c4 <process_to_comReceived+0xd4>)
 800133c:	f025 fb82 	bl	8026a44 <iprintf>
				//ofc_flag1 =0;
			}
			if(EI_Buffer[22] == 0xBF)
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <process_to_comReceived+0xcc>)
 8001342:	7d9b      	ldrb	r3, [r3, #22]
 8001344:	2bbf      	cmp	r3, #191	; 0xbf
 8001346:	d10f      	bne.n	8001368 <process_to_comReceived+0x78>
			{
				Online_diag_flag[Dat_Check] = 1;
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <process_to_comReceived+0xd0>)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
				printf("\n***************************SLAVE_%d FB1_LINK_FAIL*********************\n",Dat_Check);
 8001352:	6839      	ldr	r1, [r7, #0]
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <process_to_comReceived+0xd8>)
 8001356:	f025 fb75 	bl	8026a44 <iprintf>
				//	ofc_flag2 =1;
				if(1 == ofc_flag1)
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <process_to_comReceived+0xdc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <process_to_comReceived+0x78>
				{
					ofc_flag1 = 2;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <process_to_comReceived+0xdc>)
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x7F)
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <process_to_comReceived+0xcc>)
 800136a:	7d9b      	ldrb	r3, [r3, #22]
 800136c:	2b7f      	cmp	r3, #127	; 0x7f
 800136e:	d10f      	bne.n	8001390 <process_to_comReceived+0xa0>
			{
				Online_diag_flag[Dat_Check] = 2;
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <process_to_comReceived+0xd0>)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
				printf("\n********************************SLAVE_%d FB2_LINK_FAIL*******************\n",Dat_Check);
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	4814      	ldr	r0, [pc, #80]	; (80013d0 <process_to_comReceived+0xe0>)
 800137e:	f025 fb61 	bl	8026a44 <iprintf>
				//ofc_flag2 =1;
				if(1 == ofc_flag1)
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <process_to_comReceived+0xdc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d102      	bne.n	8001390 <process_to_comReceived+0xa0>
				{
					ofc_flag1 = 2;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <process_to_comReceived+0xdc>)
 800138c:	2202      	movs	r2, #2
 800138e:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x3F)
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <process_to_comReceived+0xcc>)
 8001392:	7d9b      	ldrb	r3, [r3, #22]
 8001394:	2b3f      	cmp	r3, #63	; 0x3f
 8001396:	d108      	bne.n	80013aa <process_to_comReceived+0xba>
			{
				Online_diag_flag[Dat_Check] = 3;
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <process_to_comReceived+0xd0>)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	2203      	movs	r2, #3
 80013a0:	701a      	strb	r2, [r3, #0]
				printf("\n*****************************SLAVE_%d FB1_&FB2_LINK_FAIL****************\n",Dat_Check);
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <process_to_comReceived+0xe4>)
 80013a6:	f025 fb4d 	bl	8026a44 <iprintf>
			}
		}
		sui_failure_determine_clock = HAL_GetTick();
 80013aa:	f018 fb41 	bl	8019a30 <HAL_GetTick>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <process_to_comReceived+0xe8>)
 80013b2:	6013      	str	r3, [r2, #0]
	}
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20002378 	.word	0x20002378
 80013c0:	20002368 	.word	0x20002368
 80013c4:	08028390 	.word	0x08028390
 80013c8:	080283dc 	.word	0x080283dc
 80013cc:	20002364 	.word	0x20002364
 80013d0:	08028428 	.word	0x08028428
 80013d4:	08028474 	.word	0x08028474
 80013d8:	20002360 	.word	0x20002360

080013dc <CommReadAndFormMessage_Cmd>:

unsigned short int CommReadAndFormMessage_Cmd(unsigned short int us_Port,
		unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	80fb      	strh	r3, [r7, #6]
 80013e8:	4613      	mov	r3, r2
 80013ea:	80bb      	strh	r3, [r7, #4]
	static  char sign1 = 0,sign2 = 0,sign3 = 0,case_check=0;
	static unsigned long int store_index ;
	unsigned char suc_RByte = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
	static unsigned char suc_RcvStatus = 11;
	while(Com_DataReady(us_Port))
 80013f0:	e0a6      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
	{
		suc_RByte = Com_Get_Byte(us_Port);
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f017 fff2 	bl	80193e0 <Com_Get_Byte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
			printf("|%02X|",suc_RByte);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	4619      	mov	r1, r3
 8001404:	4855      	ldr	r0, [pc, #340]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001406:	f025 fb1d 	bl	8026a44 <iprintf>

		switch(suc_RcvStatus)
 800140a:	4b55      	ldr	r3, [pc, #340]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	3b0b      	subs	r3, #11
 8001410:	2b03      	cmp	r3, #3
 8001412:	f200 8091 	bhi.w	8001538 <CommReadAndFormMessage_Cmd+0x15c>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <CommReadAndFormMessage_Cmd+0x40>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	0800142d 	.word	0x0800142d
 8001420:	0800145b 	.word	0x0800145b
 8001424:	08001479 	.word	0x08001479
 8001428:	080014ab 	.word	0x080014ab
		{
		case 11:
			if((suc_RByte >= 0x01) && (suc_RByte <= 0x1F) && (suc_RByte != 0x0E))
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8086 	beq.w	8001540 <CommReadAndFormMessage_Cmd+0x164>
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b1f      	cmp	r3, #31
 8001438:	f200 8082 	bhi.w	8001540 <CommReadAndFormMessage_Cmd+0x164>
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b0e      	cmp	r3, #14
 8001440:	d07e      	beq.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			{
				sign1 = suc_RByte;
 8001442:	4a48      	ldr	r2, [pc, #288]	; (8001564 <CommReadAndFormMessage_Cmd+0x188>)
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	7013      	strb	r3, [r2, #0]
				//	printf("sign11 = %X\n",sign1);
				store_index++;
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a46      	ldr	r2, [pc, #280]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001450:	6013      	str	r3, [r2, #0]
				suc_RcvStatus = 12;
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001454:	220c      	movs	r2, #12
 8001456:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001458:	e072      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>

		case 12:
			if (suc_RByte == FUN_CODE)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d16f      	bne.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			{
				sign2 = suc_RByte;
 8001460:	4a42      	ldr	r2, [pc, #264]	; (800156c <CommReadAndFormMessage_Cmd+0x190>)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	7013      	strb	r3, [r2, #0]
				store_index++;
 8001466:	4b40      	ldr	r3, [pc, #256]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800146e:	6013      	str	r3, [r2, #0]
				//	printf("sign12= %X\n ",sign2);
				suc_RcvStatus = 13;
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001472:	220d      	movs	r2, #13
 8001474:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001476:	e063      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>

		case 13:
			if(suc_RByte == DBYT_CNT)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b1c      	cmp	r3, #28
 800147c:	d10e      	bne.n	800149c <CommReadAndFormMessage_Cmd+0xc0>
			{

				sign3 = suc_RByte;
 800147e:	4a3c      	ldr	r2, [pc, #240]	; (8001570 <CommReadAndFormMessage_Cmd+0x194>)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	7013      	strb	r3, [r2, #0]
				store_index++;
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a37      	ldr	r2, [pc, #220]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800148c:	6013      	str	r3, [r2, #0]
				//	printf("sign13= %X\n ",sign3);
				suc_RcvStatus = 14;
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001490:	220e      	movs	r2, #14
 8001492:	701a      	strb	r2, [r3, #0]
				case_check =1;
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <CommReadAndFormMessage_Cmd+0x198>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e051      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			}
			else
			{
				store_index = 0;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
				suc_RcvStatus = 11;
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 80014a4:	220b      	movs	r2, #11
 80014a6:	701a      	strb	r2, [r3, #0]
			}

			break;
 80014a8:	e04a      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
		case 14:
			puc_ReadMsg[0] = sign1;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <CommReadAndFormMessage_Cmd+0x188>)
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	701a      	strb	r2, [r3, #0]
			// printf("BUFF = %X\n", puc_ReadMsg[0]);
			puc_ReadMsg[1] = sign2;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a2d      	ldr	r2, [pc, #180]	; (800156c <CommReadAndFormMessage_Cmd+0x190>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[2] = sign3;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	3302      	adds	r3, #2
 80014c0:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <CommReadAndFormMessage_Cmd+0x194>)
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[store_index] = suc_RByte;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	701a      	strb	r2, [r3, #0]
			if(store_index < 33)
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d804      	bhi.n	80014e4 <CommReadAndFormMessage_Cmd+0x108>
			{
				store_index++;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014e2:	6013      	str	r3, [r2, #0]
			}
			if(store_index == 33)
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b21      	cmp	r3, #33	; 0x21
 80014ea:	d129      	bne.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			{

				if(Cal_Crc_fun(puc_ReadMsg,(store_index-2)))
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b02      	subs	r3, #2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	6838      	ldr	r0, [r7, #0]
 80014fa:	f000 f841 	bl	8001580 <Cal_Crc_fun>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00e      	beq.n	8001522 <CommReadAndFormMessage_Cmd+0x146>
				{
					//	printf("CRC OK\n");
					case_check = store_index;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <CommReadAndFormMessage_Cmd+0x198>)
 800150c:	701a      	strb	r2, [r3, #0]
					suc_RcvStatus = 11;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001510:	220b      	movs	r2, #11
 8001512:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
					return case_check;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <CommReadAndFormMessage_Cmd+0x198>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	e018      	b.n	8001554 <CommReadAndFormMessage_Cmd+0x178>
				}
				else
				{
					printf("OFC_CRC NOK\n");
 8001522:	4815      	ldr	r0, [pc, #84]	; (8001578 <CommReadAndFormMessage_Cmd+0x19c>)
 8001524:	f025 fb2a 	bl	8026b7c <puts>
					suc_RcvStatus = 11;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 800152a:	220b      	movs	r2, #11
 800152c:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
					return 0;
 8001534:	2300      	movs	r3, #0
 8001536:	e00d      	b.n	8001554 <CommReadAndFormMessage_Cmd+0x178>
			}

			break;
		default:

			printf("In default");
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <CommReadAndFormMessage_Cmd+0x1a0>)
 800153a:	f025 fa83 	bl	8026a44 <iprintf>
			break;
 800153e:	bf00      	nop
	while(Com_DataReady(us_Port))
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f017 ff0b 	bl	8019360 <Com_DataReady>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f af50 	bne.w	80013f2 <CommReadAndFormMessage_Cmd+0x16>


		}
	}
	return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	080284c0 	.word	0x080284c0
 8001560:	2000030a 	.word	0x2000030a
 8001564:	200024a4 	.word	0x200024a4
 8001568:	200024a8 	.word	0x200024a8
 800156c:	200024ac 	.word	0x200024ac
 8001570:	200024ad 	.word	0x200024ad
 8001574:	200024ae 	.word	0x200024ae
 8001578:	080284c8 	.word	0x080284c8
 800157c:	080284d4 	.word	0x080284d4

08001580 <Cal_Crc_fun>:

unsigned char Cal_Crc_fun(unsigned char * Buffer, unsigned short Length)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
	unsigned short Rec_Crc,Cal_Crc;
	//	for(i=0;i<Length;i++)
	//	printf("RECV = %X ",Buffer[i]);
	Cal_Crc = ModBus_CRC16(Buffer,(Length));
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4619      	mov	r1, r3
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f81f 	bl	80015d4 <ModBus_CRC16>
 8001596:	4603      	mov	r3, r0
 8001598:	81fb      	strh	r3, [r7, #14]
	Rec_Crc = (unsigned short int ) (Buffer[Length+1] & 0xff);
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	3301      	adds	r3, #1
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	81bb      	strh	r3, [r7, #12]
	Rec_Crc = (unsigned short int ) (Rec_Crc<<8);
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	81bb      	strh	r3, [r7, #12]
	Rec_Crc |= Buffer[Length] & 0xff;
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	89bb      	ldrh	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	81bb      	strh	r3, [r7, #12]
	//	printf("Cal_Crc = %X Rec_Crc = %X\n",Cal_Crc,Rec_Crc);
	if(Cal_Crc	== Rec_Crc)
 80015bc:	89fa      	ldrh	r2, [r7, #14]
 80015be:	89bb      	ldrh	r3, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d101      	bne.n	80015c8 <Cal_Crc_fun+0x48>
	{
		return 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <Cal_Crc_fun+0x4a>
	}
	else
	{
		return 0;
 80015c8:	2300      	movs	r3, #0
	}
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <ModBus_CRC16>:

unsigned short ModBus_CRC16( unsigned char * Buffer, unsigned short Length )
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
	unsigned char CRCHi = 0xFF;
 80015e0:	23ff      	movs	r3, #255	; 0xff
 80015e2:	73fb      	strb	r3, [r7, #15]
	unsigned char CRCLo = 0xFF;
 80015e4:	23ff      	movs	r3, #255	; 0xff
 80015e6:	73bb      	strb	r3, [r7, #14]
	int Index;
	unsigned short ret;
	//	printf("Length=%d",Length);
	//for(Index = 0;Index<Length;Index++)
	//printf("CAL = %X ",Buffer[Index]);
	while( Length--)
 80015e8:	e013      	b.n	8001612 <ModBus_CRC16+0x3e>
	{
		Index = CRCLo ^ *Buffer++ ;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	4053      	eors	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	60bb      	str	r3, [r7, #8]
		CRCLo = CRCHi ^ CRC_Table_Hi[Index];
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <ModBus_CRC16+0x68>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4053      	eors	r3, r2
 8001606:	73bb      	strb	r3, [r7, #14]
		CRCHi = CRC_Table_Lo[Index];
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <ModBus_CRC16+0x6c>)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	73fb      	strb	r3, [r7, #15]
	while( Length--)
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	807a      	strh	r2, [r7, #2]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e6      	bne.n	80015ea <ModBus_CRC16+0x16>
	}
	//	CRCHi = CRCHi + 0x17;
	//	printf("LOW Byte = %X HIGHER BYTE = %X\n",CRCLo,CRCHi);
	ret=((unsigned short)CRCHi << 8);
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	b29b      	uxth	r3, r3
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	81bb      	strh	r3, [r7, #12]
	ret|= (unsigned short)CRCLo;
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	b29a      	uxth	r2, r3
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	81bb      	strh	r3, [r7, #12]
	return ret;
 800162e:	89bb      	ldrh	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	20000108 	.word	0x20000108
 8001640:	20000208 	.word	0x20000208

08001644 <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0a2      	sub	sp, #136	; 0x88
 8001648:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	227c      	movs	r2, #124	; 0x7c
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f025 f909 	bl	8026874 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 800166e:	e03a      	b.n	80016e6 <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8001670:	f00f fa84 	bl	8010b7c <Get_Eth_Byte>
 8001674:	4603      	mov	r3, r0
 8001676:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 800167a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800167e:	2bf4      	cmp	r3, #244	; 0xf4
 8001680:	d002      	beq.n	8001688 <Process_Hitachi_Packets_Eth+0x44>
 8001682:	2bf6      	cmp	r3, #246	; 0xf6
 8001684:	d00c      	beq.n	80016a0 <Process_Hitachi_Packets_Eth+0x5c>
 8001686:	e01b      	b.n	80016c0 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8001688:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001692:	3388      	adds	r3, #136	; 0x88
 8001694:	443b      	add	r3, r7
 8001696:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800169a:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 800169e:	e01e      	b.n	80016de <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80016a0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80016aa:	3388      	adds	r3, #136	; 0x88
 80016ac:	443b      	add	r3, r7
 80016ae:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80016b2:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80016b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016ba:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80016be:	e00e      	b.n	80016de <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 80016c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00a      	beq.n	80016de <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 80016c8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80016d2:	3388      	adds	r3, #136	; 0x88
 80016d4:	443b      	add	r3, r7
 80016d6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80016da:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80016de:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 80016e6:	f00f fa35 	bl	8010b54 <Is_There_EI_Data>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1bf      	bne.n	8001670 <Process_Hitachi_Packets_Eth+0x2c>
 80016f0:	e000      	b.n	80016f4 <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 80016f2:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80016f4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00d      	beq.n	8001718 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 80016fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d906      	bls.n	8001712 <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001704:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8ab 	bl	8001868 <Convert_Data_format>
		}
		Traverser = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001718:	bf00      	nop
 800171a:	3788      	adds	r7, #136	; 0x88
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0a2      	sub	sp, #136	; 0x88
 8001724:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	227c      	movs	r2, #124	; 0x7c
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f025 f89b 	bl	8026874 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 800174a:	4b43      	ldr	r3, [pc, #268]	; (8001858 <Process_Hitachi_Packets_Com+0x138>)
 800174c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001750:	2b00      	cmp	r3, #0
 8001752:	d07a      	beq.n	800184a <Process_Hitachi_Packets_Com+0x12a>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <Process_Hitachi_Packets_Com+0x13c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f00e fe4d 	bl	80103f8 <HAL_Elaps_Ticks>
 800175e:	4603      	mov	r3, r0
 8001760:	2b13      	cmp	r3, #19
 8001762:	d974      	bls.n	800184e <Process_Hitachi_Packets_Com+0x12e>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 8001764:	e050      	b.n	8001808 <Process_Hitachi_Packets_Com+0xe8>
	{
		Data = Com_Get_Byte(THREE_PORT);
 8001766:	2003      	movs	r0, #3
 8001768:	f017 fe3a 	bl	80193e0 <Com_Get_Byte>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		printf("*%02X*",Data);
 8001772:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001776:	4619      	mov	r1, r3
 8001778:	4839      	ldr	r0, [pc, #228]	; (8001860 <Process_Hitachi_Packets_Com+0x140>)
 800177a:	f025 f963 	bl	8026a44 <iprintf>
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800177e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001782:	2b7e      	cmp	r3, #126	; 0x7e
 8001784:	d90a      	bls.n	800179c <Process_Hitachi_Packets_Com+0x7c>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001786:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	4619      	mov	r1, r3
 800178e:	4835      	ldr	r0, [pc, #212]	; (8001864 <Process_Hitachi_Packets_Com+0x144>)
 8001790:	f025 f958 	bl	8026a44 <iprintf>
			Traverser = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 800179a:	e03d      	b.n	8001818 <Process_Hitachi_Packets_Com+0xf8>
		}
		//printf("%02X ",Data);
		switch(Data)
 800179c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80017a0:	2bf4      	cmp	r3, #244	; 0xf4
 80017a2:	d002      	beq.n	80017aa <Process_Hitachi_Packets_Com+0x8a>
 80017a4:	2bf6      	cmp	r3, #246	; 0xf6
 80017a6:	d00c      	beq.n	80017c2 <Process_Hitachi_Packets_Com+0xa2>
 80017a8:	e01b      	b.n	80017e2 <Process_Hitachi_Packets_Com+0xc2>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80017aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017b4:	3388      	adds	r3, #136	; 0x88
 80017b6:	443b      	add	r3, r7
 80017b8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017bc:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80017c0:	e01e      	b.n	8001800 <Process_Hitachi_Packets_Com+0xe0>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80017c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017cc:	3388      	adds	r3, #136	; 0x88
 80017ce:	443b      	add	r3, r7
 80017d0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017d4:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80017d8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017dc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80017e0:	e00e      	b.n	8001800 <Process_Hitachi_Packets_Com+0xe0>
		default:
			if(Traverser >0)
 80017e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00a      	beq.n	8001800 <Process_Hitachi_Packets_Com+0xe0>
			{
				Temp_array[Traverser++] = Data;
 80017ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017f4:	3388      	adds	r3, #136	; 0x88
 80017f6:	443b      	add	r3, r7
 80017f8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017fc:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8001800:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <Process_Hitachi_Packets_Com+0xf6>
	while(Com_DataReady(THREE_PORT))
 8001808:	2003      	movs	r0, #3
 800180a:	f017 fda9 	bl	8019360 <Com_DataReady>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1a8      	bne.n	8001766 <Process_Hitachi_Packets_Com+0x46>
 8001814:	e000      	b.n	8001818 <Process_Hitachi_Packets_Com+0xf8>
		{
			break;
 8001816:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001818:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800181c:	2b00      	cmp	r3, #0
 800181e:	d017      	beq.n	8001850 <Process_Hitachi_Packets_Com+0x130>
	{
		if(Traverser>15)
 8001820:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d906      	bls.n	8001836 <Process_Hitachi_Packets_Com+0x116>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001828:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f819 	bl	8001868 <Convert_Data_format>
		}
		Traverser = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f025 f816 	bl	8026874 <memset>
 8001848:	e002      	b.n	8001850 <Process_Hitachi_Packets_Com+0x130>
		return;
 800184a:	bf00      	nop
 800184c:	e000      	b.n	8001850 <Process_Hitachi_Packets_Com+0x130>
		return;
 800184e:	bf00      	nop
	}
}
 8001850:	3788      	adds	r7, #136	; 0x88
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000504 	.word	0x20000504
 800185c:	2000c070 	.word	0x2000c070
 8001860:	080284e0 	.word	0x080284e0
 8001864:	080284e8 	.word	0x080284e8

08001868 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0a4      	sub	sp, #144	; 0x90
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	227c      	movs	r2, #124	; 0x7c
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f024 fff7 	bl	8026874 <memset>
	uint16_t des_index=0,src_index=0;
 8001886:	2300      	movs	r3, #0
 8001888:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800188c:	2300      	movs	r3, #0
 800188e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 8001892:	2300      	movs	r3, #0
 8001894:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001898:	2300      	movs	r3, #0
 800189a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800189e:	e034      	b.n	800190a <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 80018a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2bf0      	cmp	r3, #240	; 0xf0
 80018ac:	d118      	bne.n	80018e0 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80018ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	7819      	ldrb	r1, [r3, #0]
 80018b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018bc:	3301      	adds	r3, #1
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018c8:	430a      	orrs	r2, r1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	3390      	adds	r3, #144	; 0x90
 80018ce:	443b      	add	r3, r7
 80018d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80018d4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018d8:	3301      	adds	r3, #1
 80018da:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018de:	e00a      	b.n	80018f6 <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80018e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	441a      	add	r2, r3
 80018e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	3390      	adds	r3, #144	; 0x90
 80018f0:	443b      	add	r3, r7
 80018f2:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80018f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018fa:	3301      	adds	r3, #1
 80018fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001900:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001904:	3301      	adds	r3, #1
 8001906:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	b29b      	uxth	r3, r3
 800190e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8001912:	429a      	cmp	r2, r3
 8001914:	d3c4      	bcc.n	80018a0 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 8001916:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f805 	bl	8001930 <EI_Data_Analyzer>
}
 8001926:	bf00      	nop
 8001928:	3790      	adds	r7, #144	; 0x90
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	77fb      	strb	r3, [r7, #31]
 8001944:	2300      	movs	r3, #0
 8001946:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001950:	f018 f86e 	bl	8019a30 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 8001956:	4ba7      	ldr	r3, [pc, #668]	; (8001bf4 <EI_Data_Analyzer+0x2c4>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d111      	bne.n	8001982 <EI_Data_Analyzer+0x52>
 800195e:	f018 f867 	bl	8019a30 <HAL_GetTick>
 8001962:	4603      	mov	r3, r0
 8001964:	f242 720f 	movw	r2, #9999	; 0x270f
 8001968:	4293      	cmp	r3, r2
 800196a:	d90a      	bls.n	8001982 <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 800196c:	48a2      	ldr	r0, [pc, #648]	; (8001bf8 <EI_Data_Analyzer+0x2c8>)
 800196e:	f025 f905 	bl	8026b7c <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001972:	49a2      	ldr	r1, [pc, #648]	; (8001bfc <EI_Data_Analyzer+0x2cc>)
 8001974:	48a2      	ldr	r0, [pc, #648]	; (8001c00 <EI_Data_Analyzer+0x2d0>)
 8001976:	f7fe fc63 	bl	8000240 <strcmp>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 81a1 	bne.w	8001cc4 <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3303      	adds	r3, #3
 8001986:	461a      	mov	r2, r3
 8001988:	2110      	movs	r1, #16
 800198a:	2000      	movs	r0, #0
 800198c:	f7fe fe42 	bl	8000614 <ExtractBits>
 8001990:	4603      	mov	r3, r0
 8001992:	b29b      	uxth	r3, r3
 8001994:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 8001996:	e00b      	b.n	80019b0 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001998:	7ffb      	ldrb	r3, [r7, #31]
 800199a:	4a9a      	ldr	r2, [pc, #616]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 800199c:	3366      	adds	r3, #102	; 0x66
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d009      	beq.n	80019be <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	3301      	adds	r3, #1
 80019ae:	77fb      	strb	r3, [r7, #31]
 80019b0:	4b94      	ldr	r3, [pc, #592]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 80019b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b6:	7ffa      	ldrb	r2, [r7, #31]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d3ed      	bcc.n	8001998 <EI_Data_Analyzer+0x68>
 80019bc:	e000      	b.n	80019c0 <EI_Data_Analyzer+0x90>
		{
			break;
 80019be:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80019c0:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 80019c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c6:	7ffa      	ldrb	r2, [r7, #31]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d309      	bcc.n	80019e0 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80019cc:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <EI_Data_Analyzer+0x2d8>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f040 8179 	bne.w	8001cc8 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80019d6:	6939      	ldr	r1, [r7, #16]
 80019d8:	488c      	ldr	r0, [pc, #560]	; (8001c0c <EI_Data_Analyzer+0x2dc>)
 80019da:	f025 f833 	bl	8026a44 <iprintf>
		}
		return;
 80019de:	e173      	b.n	8001cc8 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3301      	adds	r3, #1
 80019e4:	461a      	mov	r2, r3
 80019e6:	2110      	movs	r1, #16
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7fe fe13 	bl	8000614 <ExtractBits>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80019f4:	7ffb      	ldrb	r3, [r7, #31]
 80019f6:	4a83      	ldr	r2, [pc, #524]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 80019f8:	3370      	adds	r3, #112	; 0x70
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d012      	beq.n	8001a2c <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 8001a06:	4882      	ldr	r0, [pc, #520]	; (8001c10 <EI_Data_Analyzer+0x2e0>)
 8001a08:	f025 f8b8 	bl	8026b7c <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	4881      	ldr	r0, [pc, #516]	; (8001c14 <EI_Data_Analyzer+0x2e4>)
 8001a10:	f025 f818 	bl	8026a44 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
 8001a16:	4a7b      	ldr	r2, [pc, #492]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001a18:	3370      	adds	r3, #112	; 0x70
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	461a      	mov	r2, r3
 8001a22:	6939      	ldr	r1, [r7, #16]
 8001a24:	487c      	ldr	r0, [pc, #496]	; (8001c18 <EI_Data_Analyzer+0x2e8>)
 8001a26:	f025 f80d 	bl	8026a44 <iprintf>
		return;
 8001a2a:	e14e      	b.n	8001cca <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001a2c:	7ffb      	ldrb	r3, [r7, #31]
 8001a2e:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001a30:	4b7a      	ldr	r3, [pc, #488]	; (8001c1c <EI_Data_Analyzer+0x2ec>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d016      	beq.n	8001a6c <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001a3e:	4b77      	ldr	r3, [pc, #476]	; (8001c1c <EI_Data_Analyzer+0x2ec>)
 8001a40:	791b      	ldrb	r3, [r3, #4]
 8001a42:	7fba      	ldrb	r2, [r7, #30]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d111      	bne.n	8001a6c <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001a48:	4875      	ldr	r0, [pc, #468]	; (8001c20 <EI_Data_Analyzer+0x2f0>)
 8001a4a:	f025 f897 	bl	8026b7c <puts>
			printf("Received:%lu\n",Destin_Address);
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	4874      	ldr	r0, [pc, #464]	; (8001c24 <EI_Data_Analyzer+0x2f4>)
 8001a52:	f024 fff7 	bl	8026a44 <iprintf>
			Destin_Address = 333;
 8001a56:	f240 134d 	movw	r3, #333	; 0x14d
 8001a5a:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001a5c:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a62:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	4870      	ldr	r0, [pc, #448]	; (8001c28 <EI_Data_Analyzer+0x2f8>)
 8001a68:	f024 ffec 	bl	8026a44 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001a6c:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a72:	7fba      	ldrb	r2, [r7, #30]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d307      	bcc.n	8001a88 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001a78:	486c      	ldr	r0, [pc, #432]	; (8001c2c <EI_Data_Analyzer+0x2fc>)
 8001a7a:	f025 f87f 	bl	8026b7c <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	486b      	ldr	r0, [pc, #428]	; (8001c30 <EI_Data_Analyzer+0x300>)
 8001a82:	f024 ffdf 	bl	8026a44 <iprintf>
		return;
 8001a86:	e120      	b.n	8001cca <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001a88:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <EI_Data_Analyzer+0x2d8>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d121      	bne.n	8001ad4 <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
 8001a92:	4a68      	ldr	r2, [pc, #416]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d002      	beq.n	8001aa0 <EI_Data_Analyzer+0x170>
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d004      	beq.n	8001aa8 <EI_Data_Analyzer+0x178>
 8001a9e:	e007      	b.n	8001ab0 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001aa0:	4865      	ldr	r0, [pc, #404]	; (8001c38 <EI_Data_Analyzer+0x308>)
 8001aa2:	f025 f86b 	bl	8026b7c <puts>
			break;
 8001aa6:	e015      	b.n	8001ad4 <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 8001aa8:	4864      	ldr	r0, [pc, #400]	; (8001c3c <EI_Data_Analyzer+0x30c>)
 8001aaa:	f025 f867 	bl	8026b7c <puts>
			break;
 8001aae:	e011      	b.n	8001ad4 <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
 8001ab2:	4a54      	ldr	r2, [pc, #336]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d103      	bne.n	8001ac6 <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 8001abe:	4860      	ldr	r0, [pc, #384]	; (8001c40 <EI_Data_Analyzer+0x310>)
 8001ac0:	f025 f85c 	bl	8026b7c <puts>
 8001ac4:	e006      	b.n	8001ad4 <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 8001ac6:	7ffb      	ldrb	r3, [r7, #31]
 8001ac8:	4a5a      	ldr	r2, [pc, #360]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	4619      	mov	r1, r3
 8001ace:	485d      	ldr	r0, [pc, #372]	; (8001c44 <EI_Data_Analyzer+0x314>)
 8001ad0:	f024 ffb8 	bl	8026a44 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
 8001ad6:	4a5c      	ldr	r2, [pc, #368]	; (8001c48 <EI_Data_Analyzer+0x318>)
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	7ffa      	ldrb	r2, [r7, #31]
 8001ade:	4955      	ldr	r1, [pc, #340]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001ae0:	5c8a      	ldrb	r2, [r1, r2]
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d014      	beq.n	8001b10 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	4958      	ldr	r1, [pc, #352]	; (8001c4c <EI_Data_Analyzer+0x31c>)
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001af0:	7ffb      	ldrb	r3, [r7, #31]
 8001af2:	4957      	ldr	r1, [pc, #348]	; (8001c50 <EI_Data_Analyzer+0x320>)
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001afe:	5cd2      	ldrb	r2, [r2, r3]
 8001b00:	7ffb      	ldrb	r3, [r7, #31]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4a50      	ldr	r2, [pc, #320]	; (8001c48 <EI_Data_Analyzer+0x318>)
 8001b06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001b0a:	4852      	ldr	r0, [pc, #328]	; (8001c54 <EI_Data_Analyzer+0x324>)
 8001b0c:	f025 f836 	bl	8026b7c <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001b10:	7ffa      	ldrb	r2, [r7, #31]
 8001b12:	7ffb      	ldrb	r3, [r7, #31]
 8001b14:	4947      	ldr	r1, [pc, #284]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001b16:	5c89      	ldrb	r1, [r1, r2]
 8001b18:	4a4f      	ldr	r2, [pc, #316]	; (8001c58 <EI_Data_Analyzer+0x328>)
 8001b1a:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001b1c:	7ffb      	ldrb	r3, [r7, #31]
 8001b1e:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <EI_Data_Analyzer+0x32c>)
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00e fc67 	bl	80103f8 <HAL_Elaps_Ticks>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	7ffb      	ldrb	r3, [r7, #31]
 8001b2e:	4935      	ldr	r1, [pc, #212]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001b30:	338a      	adds	r3, #138	; 0x8a
 8001b32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d318      	bcc.n	8001b6c <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	4947      	ldr	r1, [pc, #284]	; (8001c5c <EI_Data_Analyzer+0x32c>)
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001b44:	7ffb      	ldrb	r3, [r7, #31]
 8001b46:	4941      	ldr	r1, [pc, #260]	; (8001c4c <EI_Data_Analyzer+0x31c>)
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	493f      	ldr	r1, [pc, #252]	; (8001c50 <EI_Data_Analyzer+0x320>)
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001b58:	7ffb      	ldrb	r3, [r7, #31]
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001b5c:	3366      	adds	r3, #102	; 0x66
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4619      	mov	r1, r3
 8001b66:	483e      	ldr	r0, [pc, #248]	; (8001c60 <EI_Data_Analyzer+0x330>)
 8001b68:	f024 ff6c 	bl	8026a44 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	493b      	ldr	r1, [pc, #236]	; (8001c5c <EI_Data_Analyzer+0x32c>)
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 8001b76:	2281      	movs	r2, #129	; 0x81
 8001b78:	2100      	movs	r1, #0
 8001b7a:	483a      	ldr	r0, [pc, #232]	; (8001c64 <EI_Data_Analyzer+0x334>)
 8001b7c:	f024 fe7a 	bl	8026874 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	461a      	mov	r2, r3
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4837      	ldr	r0, [pc, #220]	; (8001c64 <EI_Data_Analyzer+0x334>)
 8001b88:	f024 fe4c 	bl	8026824 <memcpy>
	Rx_Print_st.Size = Size;
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <EI_Data_Analyzer+0x334>)
 8001b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3307      	adds	r3, #7
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 8001ba8:	7ffa      	ldrb	r2, [r7, #31]
 8001baa:	492f      	ldr	r1, [pc, #188]	; (8001c68 <EI_Data_Analyzer+0x338>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 8001bbc:	7ffb      	ldrb	r3, [r7, #31]
 8001bbe:	492b      	ldr	r1, [pc, #172]	; (8001c6c <EI_Data_Analyzer+0x33c>)
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f006 fde5 	bl	8008798 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d870      	bhi.n	8001cb8 <EI_Data_Analyzer+0x388>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <EI_Data_Analyzer+0x2ac>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001c71 	.word	0x08001c71
 8001be0:	08001c81 	.word	0x08001c81
 8001be4:	08001c91 	.word	0x08001c91
 8001be8:	08001c99 	.word	0x08001c99
 8001bec:	08001cb9 	.word	0x08001cb9
 8001bf0:	08001ca9 	.word	0x08001ca9
 8001bf4:	2000030b 	.word	0x2000030b
 8001bf8:	08028514 	.word	0x08028514
 8001bfc:	08028554 	.word	0x08028554
 8001c00:	20000505 	.word	0x20000505
 8001c04:	20000504 	.word	0x20000504
 8001c08:	20000bbb 	.word	0x20000bbb
 8001c0c:	08028560 	.word	0x08028560
 8001c10:	0802859c 	.word	0x0802859c
 8001c14:	080285b8 	.word	0x080285b8
 8001c18:	080285dc 	.word	0x080285dc
 8001c1c:	2000308c 	.word	0x2000308c
 8001c20:	08028614 	.word	0x08028614
 8001c24:	08028638 	.word	0x08028638
 8001c28:	08028648 	.word	0x08028648
 8001c2c:	08028658 	.word	0x08028658
 8001c30:	0802868c 	.word	0x0802868c
 8001c34:	2000270c 	.word	0x2000270c
 8001c38:	080286ac 	.word	0x080286ac
 8001c3c:	080286bc 	.word	0x080286bc
 8001c40:	080286cc 	.word	0x080286cc
 8001c44:	080286e4 	.word	0x080286e4
 8001c48:	20002608 	.word	0x20002608
 8001c4c:	20002630 	.word	0x20002630
 8001c50:	20002658 	.word	0x20002658
 8001c54:	08028708 	.word	0x08028708
 8001c58:	200026b0 	.word	0x200026b0
 8001c5c:	200026bc 	.word	0x200026bc
 8001c60:	08028720 	.word	0x08028720
 8001c64:	20003340 	.word	0x20003340
 8001c68:	20002da4 	.word	0x20002da4
 8001c6c:	200024e8 	.word	0x200024e8
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	b2d9      	uxtb	r1, r3
 8001c74:	7fbb      	ldrb	r3, [r7, #30]
 8001c76:	7ffa      	ldrb	r2, [r7, #31]
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f82d 	bl	8001cd8 <Init_Msg_extr>
		break;
 8001c7e:	e024      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	b2d9      	uxtb	r1, r3
 8001c84:	7fbb      	ldrb	r3, [r7, #30]
 8001c86:	7ffa      	ldrb	r2, [r7, #31]
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f001 fbc3 	bl	8003414 <Vital_Msg_extr>
		break;
 8001c8e:	e01c      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001c90:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <EI_Data_Analyzer+0x3a0>)
 8001c92:	f024 ff73 	bl	8026b7c <puts>
		break;
 8001c96:	e018      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	b2d9      	uxtb	r1, r3
 8001c9c:	7fbb      	ldrb	r3, [r7, #30]
 8001c9e:	7ffa      	ldrb	r2, [r7, #31]
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f003 ff3f 	bl	8005b24 <Status_Msg_Extr>
		break;
 8001ca6:	e010      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	b2d9      	uxtb	r1, r3
 8001cac:	7fbb      	ldrb	r3, [r7, #30]
 8001cae:	7ffa      	ldrb	r2, [r7, #31]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f005 f9b9 	bl	8007028 <Service_Msg_Extr>
		break;
 8001cb6:	e008      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <EI_Data_Analyzer+0x3a4>)
 8001cbe:	f024 fec1 	bl	8026a44 <iprintf>
		break;
 8001cc2:	e002      	b.n	8001cca <EI_Data_Analyzer+0x39a>
			return;
 8001cc4:	bf00      	nop
 8001cc6:	e000      	b.n	8001cca <EI_Data_Analyzer+0x39a>
		return;
 8001cc8:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	0802873c 	.word	0x0802873c
 8001cd4:	08028760 	.word	0x08028760

08001cd8 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	70fb      	strb	r3, [r7, #3]
 8001cea:	460b      	mov	r3, r1
 8001cec:	70bb      	strb	r3, [r7, #2]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001d02:	f017 fe95 	bl	8019a30 <HAL_GetTick>
 8001d06:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	83fb      	strh	r3, [r7, #30]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b05      	subs	r3, #5
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f014 f8fc 	bl	8015f18 <CalculateDirectReverseCrc>
 8001d20:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	3b05      	subs	r3, #5
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	441a      	add	r2, r3
 8001d2a:	8bbb      	ldrh	r3, [r7, #28]
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc70 	bl	8000614 <ExtractBits>
 8001d34:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d013      	beq.n	8001d66 <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001d3e:	78bb      	ldrb	r3, [r7, #2]
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <Init_Msg_extr+0x110>)
 8001d42:	3366      	adds	r3, #102	; 0x66
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4827      	ldr	r0, [pc, #156]	; (8001dec <Init_Msg_extr+0x114>)
 8001d4e:	f024 fe79 	bl	8026a44 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	4826      	ldr	r0, [pc, #152]	; (8001df0 <Init_Msg_extr+0x118>)
 8001d56:	f024 fe75 	bl	8026a44 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001d5a:	6979      	ldr	r1, [r7, #20]
 8001d5c:	4825      	ldr	r0, [pc, #148]	; (8001df4 <Init_Msg_extr+0x11c>)
 8001d5e:	f024 fe71 	bl	8026a44 <iprintf>
		return;
 8001d62:	f000 be32 	b.w	80029ca <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 8001d66:	78bb      	ldrb	r3, [r7, #2]
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <Init_Msg_extr+0x120>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001d6e:	78bb      	ldrb	r3, [r7, #2]
 8001d70:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <Init_Msg_extr+0x124>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 021d 	add.w	r2, r3, #29
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	2110      	movs	r1, #16
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fc47 	bl	8000614 <ExtractBits>
 8001d86:	4603      	mov	r3, r0
 8001d88:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001d8a:	78bb      	ldrb	r3, [r7, #2]
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <Init_Msg_extr+0x110>)
 8001d8e:	33f4      	adds	r3, #244	; 0xf4
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	8b7a      	ldrh	r2, [r7, #26]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d03d      	beq.n	8001e18 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001d9c:	78bb      	ldrb	r3, [r7, #2]
 8001d9e:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <Init_Msg_extr+0x128>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <Init_Msg_extr+0x110>)
 8001da8:	3366      	adds	r3, #102	; 0x66
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4814      	ldr	r0, [pc, #80]	; (8001e04 <Init_Msg_extr+0x12c>)
 8001db4:	f024 fe46 	bl	8026a44 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 8001db8:	8b7b      	ldrh	r3, [r7, #26]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4812      	ldr	r0, [pc, #72]	; (8001e08 <Init_Msg_extr+0x130>)
 8001dbe:	f024 fe41 	bl	8026a44 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 8001dc2:	78bb      	ldrb	r3, [r7, #2]
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <Init_Msg_extr+0x110>)
 8001dc6:	33f4      	adds	r3, #244	; 0xf4
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	889b      	ldrh	r3, [r3, #4]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480e      	ldr	r0, [pc, #56]	; (8001e0c <Init_Msg_extr+0x134>)
 8001dd2:	f024 fe37 	bl	8026a44 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001dd6:	490e      	ldr	r1, [pc, #56]	; (8001e10 <Init_Msg_extr+0x138>)
 8001dd8:	480e      	ldr	r0, [pc, #56]	; (8001e14 <Init_Msg_extr+0x13c>)
 8001dda:	f7fe fa31 	bl	8000240 <strcmp>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01d      	beq.n	8001e20 <Init_Msg_extr+0x148>
		{
			return;
 8001de4:	f000 bdf1 	b.w	80029ca <Init_Msg_extr+0xcf2>
 8001de8:	20000504 	.word	0x20000504
 8001dec:	0802877c 	.word	0x0802877c
 8001df0:	08028798 	.word	0x08028798
 8001df4:	080287a8 	.word	0x080287a8
 8001df8:	20002680 	.word	0x20002680
 8001dfc:	20002698 	.word	0x20002698
 8001e00:	2000268c 	.word	0x2000268c
 8001e04:	080287b8 	.word	0x080287b8
 8001e08:	080287f0 	.word	0x080287f0
 8001e0c:	08028814 	.word	0x08028814
 8001e10:	08028554 	.word	0x08028554
 8001e14:	20000505 	.word	0x20000505
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	4aab      	ldr	r2, [pc, #684]	; (80020c8 <Init_Msg_extr+0x3f0>)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001e26:	8bbb      	ldrh	r3, [r7, #28]
 8001e28:	2108      	movs	r1, #8
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fbf2 	bl	8000614 <ExtractBits>
 8001e30:	4603      	mov	r3, r0
 8001e32:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	4aa5      	ldr	r2, [pc, #660]	; (80020cc <Init_Msg_extr+0x3f4>)
 8001e38:	4413      	add	r3, r2
 8001e3a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e3e:	7e7a      	ldrb	r2, [r7, #25]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d01f      	beq.n	8001e84 <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001e44:	78bb      	ldrb	r3, [r7, #2]
 8001e46:	4aa1      	ldr	r2, [pc, #644]	; (80020cc <Init_Msg_extr+0x3f4>)
 8001e48:	3366      	adds	r3, #102	; 0x66
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4619      	mov	r1, r3
 8001e52:	489f      	ldr	r0, [pc, #636]	; (80020d0 <Init_Msg_extr+0x3f8>)
 8001e54:	f024 fdf6 	bl	8026a44 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001e58:	78bb      	ldrb	r3, [r7, #2]
 8001e5a:	4a9c      	ldr	r2, [pc, #624]	; (80020cc <Init_Msg_extr+0x3f4>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e62:	4619      	mov	r1, r3
 8001e64:	489b      	ldr	r0, [pc, #620]	; (80020d4 <Init_Msg_extr+0x3fc>)
 8001e66:	f024 fded 	bl	8026a44 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001e6a:	7e7b      	ldrb	r3, [r7, #25]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	489a      	ldr	r0, [pc, #616]	; (80020d8 <Init_Msg_extr+0x400>)
 8001e70:	f024 fde8 	bl	8026a44 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001e74:	4999      	ldr	r1, [pc, #612]	; (80020dc <Init_Msg_extr+0x404>)
 8001e76:	489a      	ldr	r0, [pc, #616]	; (80020e0 <Init_Msg_extr+0x408>)
 8001e78:	f7fe f9e2 	bl	8000240 <strcmp>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 85a2 	bne.w	80029c8 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001e84:	78bb      	ldrb	r3, [r7, #2]
 8001e86:	4997      	ldr	r1, [pc, #604]	; (80020e4 <Init_Msg_extr+0x40c>)
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001e8e:	78bb      	ldrb	r3, [r7, #2]
 8001e90:	4a95      	ldr	r2, [pc, #596]	; (80020e8 <Init_Msg_extr+0x410>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 8001e96:	78bb      	ldrb	r3, [r7, #2]
 8001e98:	4a94      	ldr	r2, [pc, #592]	; (80020ec <Init_Msg_extr+0x414>)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001e9e:	78bb      	ldrb	r3, [r7, #2]
 8001ea0:	4993      	ldr	r1, [pc, #588]	; (80020f0 <Init_Msg_extr+0x418>)
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 8001ea8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eac:	3308      	adds	r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da00      	bge.n	8001eb4 <Init_Msg_extr+0x1dc>
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	10db      	asrs	r3, r3, #3
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	8bfb      	ldrh	r3, [r7, #30]
 8001eba:	4413      	add	r3, r2
 8001ebc:	83fb      	strh	r3, [r7, #30]
 8001ebe:	8bbb      	ldrh	r3, [r7, #28]
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	425a      	negs	r2, r3
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	f002 0207 	and.w	r2, r2, #7
 8001ed0:	bf58      	it	pl
 8001ed2:	4253      	negpl	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001ed8:	8bfb      	ldrh	r3, [r7, #30]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	441a      	add	r2, r3
 8001ede:	8bbb      	ldrh	r3, [r7, #28]
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb96 	bl	8000614 <ExtractBits>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	78bb      	ldrb	r3, [r7, #2]
 8001eec:	b291      	uxth	r1, r2
 8001eee:	4a81      	ldr	r2, [pc, #516]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001ef0:	015b      	lsls	r3, r3, #5
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3310      	adds	r3, #16
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	4a7d      	ldr	r2, [pc, #500]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001efe:	015b      	lsls	r3, r3, #5
 8001f00:	4413      	add	r3, r2
 8001f02:	3310      	adds	r3, #16
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	487b      	ldr	r0, [pc, #492]	; (80020f8 <Init_Msg_extr+0x420>)
 8001f0a:	f024 fd9b 	bl	8026a44 <iprintf>
	BITSTUFFINC(16);
 8001f0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f12:	3310      	adds	r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da00      	bge.n	8001f1a <Init_Msg_extr+0x242>
 8001f18:	3307      	adds	r3, #7
 8001f1a:	10db      	asrs	r3, r3, #3
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	8bfb      	ldrh	r3, [r7, #30]
 8001f20:	4413      	add	r3, r2
 8001f22:	83fb      	strh	r3, [r7, #30]
 8001f24:	8bbb      	ldrh	r3, [r7, #28]
 8001f26:	3310      	adds	r3, #16
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	425a      	negs	r2, r3
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	f002 0207 	and.w	r2, r2, #7
 8001f36:	bf58      	it	pl
 8001f38:	4253      	negpl	r3, r2
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001f3e:	8bfb      	ldrh	r3, [r7, #30]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	441a      	add	r2, r3
 8001f44:	8bbb      	ldrh	r3, [r7, #28]
 8001f46:	2110      	movs	r1, #16
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fb63 	bl	8000614 <ExtractBits>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	78bb      	ldrb	r3, [r7, #2]
 8001f52:	b291      	uxth	r1, r2
 8001f54:	4a67      	ldr	r2, [pc, #412]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	4413      	add	r3, r2
 8001f5a:	330e      	adds	r3, #14
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001f60:	78bb      	ldrb	r3, [r7, #2]
 8001f62:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	4413      	add	r3, r2
 8001f68:	330e      	adds	r3, #14
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4863      	ldr	r0, [pc, #396]	; (80020fc <Init_Msg_extr+0x424>)
 8001f70:	f024 fd68 	bl	8026a44 <iprintf>
	BITSTUFFINC(16);
 8001f74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f78:	3310      	adds	r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da00      	bge.n	8001f80 <Init_Msg_extr+0x2a8>
 8001f7e:	3307      	adds	r3, #7
 8001f80:	10db      	asrs	r3, r3, #3
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	8bfb      	ldrh	r3, [r7, #30]
 8001f86:	4413      	add	r3, r2
 8001f88:	83fb      	strh	r3, [r7, #30]
 8001f8a:	8bbb      	ldrh	r3, [r7, #28]
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	425a      	negs	r2, r3
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	f002 0207 	and.w	r2, r2, #7
 8001f9c:	bf58      	it	pl
 8001f9e:	4253      	negpl	r3, r2
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fa4:	8bfb      	ldrh	r3, [r7, #30]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	441a      	add	r2, r3
 8001faa:	8bbb      	ldrh	r3, [r7, #28]
 8001fac:	2108      	movs	r1, #8
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fb30 	bl	8000614 <ExtractBits>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	78bb      	ldrb	r3, [r7, #2]
 8001fb8:	b2d1      	uxtb	r1, r2
 8001fba:	4a4e      	ldr	r2, [pc, #312]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001fbc:	015b      	lsls	r3, r3, #5
 8001fbe:	4413      	add	r3, r2
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8001fc4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fc8:	3308      	adds	r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da00      	bge.n	8001fd0 <Init_Msg_extr+0x2f8>
 8001fce:	3307      	adds	r3, #7
 8001fd0:	10db      	asrs	r3, r3, #3
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	8bfb      	ldrh	r3, [r7, #30]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	83fb      	strh	r3, [r7, #30]
 8001fda:	8bbb      	ldrh	r3, [r7, #28]
 8001fdc:	3308      	adds	r3, #8
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	425a      	negs	r2, r3
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	f002 0207 	and.w	r2, r2, #7
 8001fec:	bf58      	it	pl
 8001fee:	4253      	negpl	r3, r2
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	441a      	add	r2, r3
 8001ffa:	8bbb      	ldrh	r3, [r7, #28]
 8001ffc:	2108      	movs	r1, #8
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fb08 	bl	8000614 <ExtractBits>
 8002004:	4602      	mov	r2, r0
 8002006:	78bb      	ldrb	r3, [r7, #2]
 8002008:	b2d1      	uxtb	r1, r2
 800200a:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <Init_Msg_extr+0x41c>)
 800200c:	015b      	lsls	r3, r3, #5
 800200e:	4413      	add	r3, r2
 8002010:	3301      	adds	r3, #1
 8002012:	460a      	mov	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8002016:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800201a:	3308      	adds	r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	da00      	bge.n	8002022 <Init_Msg_extr+0x34a>
 8002020:	3307      	adds	r3, #7
 8002022:	10db      	asrs	r3, r3, #3
 8002024:	b29a      	uxth	r2, r3
 8002026:	8bfb      	ldrh	r3, [r7, #30]
 8002028:	4413      	add	r3, r2
 800202a:	83fb      	strh	r3, [r7, #30]
 800202c:	8bbb      	ldrh	r3, [r7, #28]
 800202e:	3308      	adds	r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21b      	sxth	r3, r3
 8002034:	425a      	negs	r2, r3
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	f002 0207 	and.w	r2, r2, #7
 800203e:	bf58      	it	pl
 8002040:	4253      	negpl	r3, r2
 8002042:	b21b      	sxth	r3, r3
 8002044:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002046:	8bfb      	ldrh	r3, [r7, #30]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	441a      	add	r2, r3
 800204c:	8bbb      	ldrh	r3, [r7, #28]
 800204e:	2108      	movs	r1, #8
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fadf 	bl	8000614 <ExtractBits>
 8002056:	4602      	mov	r2, r0
 8002058:	78bb      	ldrb	r3, [r7, #2]
 800205a:	b2d1      	uxtb	r1, r2
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <Init_Msg_extr+0x41c>)
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	4413      	add	r3, r2
 8002062:	3302      	adds	r3, #2
 8002064:	460a      	mov	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8002068:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800206c:	3308      	adds	r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	da00      	bge.n	8002074 <Init_Msg_extr+0x39c>
 8002072:	3307      	adds	r3, #7
 8002074:	10db      	asrs	r3, r3, #3
 8002076:	b29a      	uxth	r2, r3
 8002078:	8bfb      	ldrh	r3, [r7, #30]
 800207a:	4413      	add	r3, r2
 800207c:	83fb      	strh	r3, [r7, #30]
 800207e:	8bbb      	ldrh	r3, [r7, #28]
 8002080:	3308      	adds	r3, #8
 8002082:	b29b      	uxth	r3, r3
 8002084:	b21b      	sxth	r3, r3
 8002086:	425a      	negs	r2, r3
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	f002 0207 	and.w	r2, r2, #7
 8002090:	bf58      	it	pl
 8002092:	4253      	negpl	r3, r2
 8002094:	b21b      	sxth	r3, r3
 8002096:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002098:	8bfb      	ldrh	r3, [r7, #30]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	441a      	add	r2, r3
 800209e:	8bbb      	ldrh	r3, [r7, #28]
 80020a0:	2110      	movs	r1, #16
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fab6 	bl	8000614 <ExtractBits>
 80020a8:	4602      	mov	r2, r0
 80020aa:	78bb      	ldrb	r3, [r7, #2]
 80020ac:	b291      	uxth	r1, r2
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <Init_Msg_extr+0x428>)
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	460a      	mov	r2, r1
 80020b8:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80020ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020be:	3310      	adds	r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	da1f      	bge.n	8002104 <Init_Msg_extr+0x42c>
 80020c4:	3307      	adds	r3, #7
 80020c6:	e01d      	b.n	8002104 <Init_Msg_extr+0x42c>
 80020c8:	2000268c 	.word	0x2000268c
 80020cc:	20000504 	.word	0x20000504
 80020d0:	08028838 	.word	0x08028838
 80020d4:	08028860 	.word	0x08028860
 80020d8:	08028874 	.word	0x08028874
 80020dc:	08028554 	.word	0x08028554
 80020e0:	20000505 	.word	0x20000505
 80020e4:	20002630 	.word	0x20002630
 80020e8:	20002698 	.word	0x20002698
 80020ec:	20002718 	.word	0x20002718
 80020f0:	20002724 	.word	0x20002724
 80020f4:	20002994 	.word	0x20002994
 80020f8:	08028888 	.word	0x08028888
 80020fc:	08028890 	.word	0x08028890
 8002100:	200028f4 	.word	0x200028f4
 8002104:	10db      	asrs	r3, r3, #3
 8002106:	b29a      	uxth	r2, r3
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	4413      	add	r3, r2
 800210c:	83fb      	strh	r3, [r7, #30]
 800210e:	8bbb      	ldrh	r3, [r7, #28]
 8002110:	3310      	adds	r3, #16
 8002112:	b29b      	uxth	r3, r3
 8002114:	b21b      	sxth	r3, r3
 8002116:	425a      	negs	r2, r3
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	f002 0207 	and.w	r2, r2, #7
 8002120:	bf58      	it	pl
 8002122:	4253      	negpl	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8002128:	78bb      	ldrb	r3, [r7, #2]
 800212a:	4a8e      	ldr	r2, [pc, #568]	; (8002364 <Init_Msg_extr+0x68c>)
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 811d 	beq.w	8002378 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800213e:	8bfb      	ldrh	r3, [r7, #30]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	441a      	add	r2, r3
 8002144:	8bbb      	ldrh	r3, [r7, #28]
 8002146:	2108      	movs	r1, #8
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fa63 	bl	8000614 <ExtractBits>
 800214e:	4603      	mov	r3, r0
 8002150:	78ba      	ldrb	r2, [r7, #2]
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	4984      	ldr	r1, [pc, #528]	; (8002368 <Init_Msg_extr+0x690>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	440b      	add	r3, r1
 8002160:	3305      	adds	r3, #5
 8002162:	4602      	mov	r2, r0
 8002164:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8002166:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800216a:	3308      	adds	r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	da00      	bge.n	8002172 <Init_Msg_extr+0x49a>
 8002170:	3307      	adds	r3, #7
 8002172:	10db      	asrs	r3, r3, #3
 8002174:	b29a      	uxth	r2, r3
 8002176:	8bfb      	ldrh	r3, [r7, #30]
 8002178:	4413      	add	r3, r2
 800217a:	83fb      	strh	r3, [r7, #30]
 800217c:	8bbb      	ldrh	r3, [r7, #28]
 800217e:	3308      	adds	r3, #8
 8002180:	b29b      	uxth	r3, r3
 8002182:	b21b      	sxth	r3, r3
 8002184:	425a      	negs	r2, r3
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	f002 0207 	and.w	r2, r2, #7
 800218e:	bf58      	it	pl
 8002190:	4253      	negpl	r3, r2
 8002192:	b21b      	sxth	r3, r3
 8002194:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002196:	8bfb      	ldrh	r3, [r7, #30]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	441a      	add	r2, r3
 800219c:	8bbb      	ldrh	r3, [r7, #28]
 800219e:	2108      	movs	r1, #8
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fa37 	bl	8000614 <ExtractBits>
 80021a6:	4603      	mov	r3, r0
 80021a8:	78ba      	ldrb	r2, [r7, #2]
 80021aa:	b2d8      	uxtb	r0, r3
 80021ac:	496e      	ldr	r1, [pc, #440]	; (8002368 <Init_Msg_extr+0x690>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	440b      	add	r3, r1
 80021b8:	3304      	adds	r3, #4
 80021ba:	4602      	mov	r2, r0
 80021bc:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80021be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c2:	3308      	adds	r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da00      	bge.n	80021ca <Init_Msg_extr+0x4f2>
 80021c8:	3307      	adds	r3, #7
 80021ca:	10db      	asrs	r3, r3, #3
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	8bfb      	ldrh	r3, [r7, #30]
 80021d0:	4413      	add	r3, r2
 80021d2:	83fb      	strh	r3, [r7, #30]
 80021d4:	8bbb      	ldrh	r3, [r7, #28]
 80021d6:	3308      	adds	r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b21b      	sxth	r3, r3
 80021dc:	425a      	negs	r2, r3
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	f002 0207 	and.w	r2, r2, #7
 80021e6:	bf58      	it	pl
 80021e8:	4253      	negpl	r3, r2
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80021ee:	8bfb      	ldrh	r3, [r7, #30]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	441a      	add	r2, r3
 80021f4:	8bbb      	ldrh	r3, [r7, #28]
 80021f6:	2108      	movs	r1, #8
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fa0b 	bl	8000614 <ExtractBits>
 80021fe:	4603      	mov	r3, r0
 8002200:	78ba      	ldrb	r2, [r7, #2]
 8002202:	b2d8      	uxtb	r0, r3
 8002204:	4958      	ldr	r1, [pc, #352]	; (8002368 <Init_Msg_extr+0x690>)
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	440b      	add	r3, r1
 8002210:	3303      	adds	r3, #3
 8002212:	4602      	mov	r2, r0
 8002214:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8002216:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800221a:	3308      	adds	r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	da00      	bge.n	8002222 <Init_Msg_extr+0x54a>
 8002220:	3307      	adds	r3, #7
 8002222:	10db      	asrs	r3, r3, #3
 8002224:	b29a      	uxth	r2, r3
 8002226:	8bfb      	ldrh	r3, [r7, #30]
 8002228:	4413      	add	r3, r2
 800222a:	83fb      	strh	r3, [r7, #30]
 800222c:	8bbb      	ldrh	r3, [r7, #28]
 800222e:	3308      	adds	r3, #8
 8002230:	b29b      	uxth	r3, r3
 8002232:	b21b      	sxth	r3, r3
 8002234:	425a      	negs	r2, r3
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	f002 0207 	and.w	r2, r2, #7
 800223e:	bf58      	it	pl
 8002240:	4253      	negpl	r3, r2
 8002242:	b21b      	sxth	r3, r3
 8002244:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002246:	8bfb      	ldrh	r3, [r7, #30]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	441a      	add	r2, r3
 800224c:	8bbb      	ldrh	r3, [r7, #28]
 800224e:	2108      	movs	r1, #8
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f9df 	bl	8000614 <ExtractBits>
 8002256:	4603      	mov	r3, r0
 8002258:	78ba      	ldrb	r2, [r7, #2]
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	4942      	ldr	r1, [pc, #264]	; (8002368 <Init_Msg_extr+0x690>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	440b      	add	r3, r1
 8002268:	4602      	mov	r2, r0
 800226a:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 800226c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002270:	3308      	adds	r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	da00      	bge.n	8002278 <Init_Msg_extr+0x5a0>
 8002276:	3307      	adds	r3, #7
 8002278:	10db      	asrs	r3, r3, #3
 800227a:	b29a      	uxth	r2, r3
 800227c:	8bfb      	ldrh	r3, [r7, #30]
 800227e:	4413      	add	r3, r2
 8002280:	83fb      	strh	r3, [r7, #30]
 8002282:	8bbb      	ldrh	r3, [r7, #28]
 8002284:	3308      	adds	r3, #8
 8002286:	b29b      	uxth	r3, r3
 8002288:	b21b      	sxth	r3, r3
 800228a:	425a      	negs	r2, r3
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	f002 0207 	and.w	r2, r2, #7
 8002294:	bf58      	it	pl
 8002296:	4253      	negpl	r3, r2
 8002298:	b21b      	sxth	r3, r3
 800229a:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800229c:	8bfb      	ldrh	r3, [r7, #30]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	441a      	add	r2, r3
 80022a2:	8bbb      	ldrh	r3, [r7, #28]
 80022a4:	2108      	movs	r1, #8
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f9b4 	bl	8000614 <ExtractBits>
 80022ac:	4603      	mov	r3, r0
 80022ae:	78ba      	ldrb	r2, [r7, #2]
 80022b0:	b2d8      	uxtb	r0, r3
 80022b2:	492d      	ldr	r1, [pc, #180]	; (8002368 <Init_Msg_extr+0x690>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	440b      	add	r3, r1
 80022be:	3301      	adds	r3, #1
 80022c0:	4602      	mov	r2, r0
 80022c2:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80022c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022c8:	3308      	adds	r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da00      	bge.n	80022d0 <Init_Msg_extr+0x5f8>
 80022ce:	3307      	adds	r3, #7
 80022d0:	10db      	asrs	r3, r3, #3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	8bfb      	ldrh	r3, [r7, #30]
 80022d6:	4413      	add	r3, r2
 80022d8:	83fb      	strh	r3, [r7, #30]
 80022da:	8bbb      	ldrh	r3, [r7, #28]
 80022dc:	3308      	adds	r3, #8
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	425a      	negs	r2, r3
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	f002 0207 	and.w	r2, r2, #7
 80022ec:	bf58      	it	pl
 80022ee:	4253      	negpl	r3, r2
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80022f4:	8bfb      	ldrh	r3, [r7, #30]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	441a      	add	r2, r3
 80022fa:	8bbb      	ldrh	r3, [r7, #28]
 80022fc:	2108      	movs	r1, #8
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f988 	bl	8000614 <ExtractBits>
 8002304:	4603      	mov	r3, r0
 8002306:	78ba      	ldrb	r2, [r7, #2]
 8002308:	b2d8      	uxtb	r0, r3
 800230a:	4917      	ldr	r1, [pc, #92]	; (8002368 <Init_Msg_extr+0x690>)
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	440b      	add	r3, r1
 8002316:	3302      	adds	r3, #2
 8002318:	4602      	mov	r2, r0
 800231a:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 800231c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Init_Msg_extr+0x650>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	8bfb      	ldrh	r3, [r7, #30]
 800232e:	4413      	add	r3, r2
 8002330:	83fb      	strh	r3, [r7, #30]
 8002332:	8bbb      	ldrh	r3, [r7, #28]
 8002334:	3308      	adds	r3, #8
 8002336:	b29b      	uxth	r3, r3
 8002338:	b21b      	sxth	r3, r3
 800233a:	425a      	negs	r2, r3
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	f002 0207 	and.w	r2, r2, #7
 8002344:	bf58      	it	pl
 8002346:	4253      	negpl	r3, r2
 8002348:	b21b      	sxth	r3, r3
 800234a:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 800234c:	78bb      	ldrb	r3, [r7, #2]
 800234e:	4618      	mov	r0, r3
 8002350:	f007 fada 	bl	8009908 <IS_MLK_EIPC_TIME_MATCHING>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <Init_Msg_extr+0x698>
 800235a:	78bb      	ldrb	r3, [r7, #2]
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <Init_Msg_extr+0x694>)
 800235e:	2100      	movs	r1, #0
 8002360:	54d1      	strb	r1, [r2, r3]
 8002362:	e009      	b.n	8002378 <Init_Msg_extr+0x6a0>
 8002364:	200028f4 	.word	0x200028f4
 8002368:	200028b8 	.word	0x200028b8
 800236c:	20002764 	.word	0x20002764
 8002370:	78bb      	ldrb	r3, [r7, #2]
 8002372:	4aa4      	ldr	r2, [pc, #656]	; (8002604 <Init_Msg_extr+0x92c>)
 8002374:	2101      	movs	r1, #1
 8002376:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002378:	8bfb      	ldrh	r3, [r7, #30]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	441a      	add	r2, r3
 800237e:	8bbb      	ldrh	r3, [r7, #28]
 8002380:	2108      	movs	r1, #8
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f946 	bl	8000614 <ExtractBits>
 8002388:	4602      	mov	r2, r0
 800238a:	78bb      	ldrb	r3, [r7, #2]
 800238c:	b2d1      	uxtb	r1, r2
 800238e:	4a9e      	ldr	r2, [pc, #632]	; (8002608 <Init_Msg_extr+0x930>)
 8002390:	015b      	lsls	r3, r3, #5
 8002392:	4413      	add	r3, r2
 8002394:	3303      	adds	r3, #3
 8002396:	460a      	mov	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 800239a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800239e:	3308      	adds	r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da00      	bge.n	80023a6 <Init_Msg_extr+0x6ce>
 80023a4:	3307      	adds	r3, #7
 80023a6:	10db      	asrs	r3, r3, #3
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	8bfb      	ldrh	r3, [r7, #30]
 80023ac:	4413      	add	r3, r2
 80023ae:	83fb      	strh	r3, [r7, #30]
 80023b0:	8bbb      	ldrh	r3, [r7, #28]
 80023b2:	3308      	adds	r3, #8
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	425a      	negs	r2, r3
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	f002 0207 	and.w	r2, r2, #7
 80023c2:	bf58      	it	pl
 80023c4:	4253      	negpl	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80023ca:	8bfb      	ldrh	r3, [r7, #30]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	441a      	add	r2, r3
 80023d0:	8bbb      	ldrh	r3, [r7, #28]
 80023d2:	2110      	movs	r1, #16
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f91d 	bl	8000614 <ExtractBits>
 80023da:	4602      	mov	r2, r0
 80023dc:	78bb      	ldrb	r3, [r7, #2]
 80023de:	b291      	uxth	r1, r2
 80023e0:	4a89      	ldr	r2, [pc, #548]	; (8002608 <Init_Msg_extr+0x930>)
 80023e2:	015b      	lsls	r3, r3, #5
 80023e4:	4413      	add	r3, r2
 80023e6:	3312      	adds	r3, #18
 80023e8:	460a      	mov	r2, r1
 80023ea:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 80023ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023f0:	3310      	adds	r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da00      	bge.n	80023f8 <Init_Msg_extr+0x720>
 80023f6:	3307      	adds	r3, #7
 80023f8:	10db      	asrs	r3, r3, #3
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	8bfb      	ldrh	r3, [r7, #30]
 80023fe:	4413      	add	r3, r2
 8002400:	83fb      	strh	r3, [r7, #30]
 8002402:	8bbb      	ldrh	r3, [r7, #28]
 8002404:	3310      	adds	r3, #16
 8002406:	b29b      	uxth	r3, r3
 8002408:	b21b      	sxth	r3, r3
 800240a:	425a      	negs	r2, r3
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	f002 0207 	and.w	r2, r2, #7
 8002414:	bf58      	it	pl
 8002416:	4253      	negpl	r3, r2
 8002418:	b21b      	sxth	r3, r3
 800241a:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 800241c:	78bb      	ldrb	r3, [r7, #2]
 800241e:	015b      	lsls	r3, r3, #5
 8002420:	4a79      	ldr	r2, [pc, #484]	; (8002608 <Init_Msg_extr+0x930>)
 8002422:	4413      	add	r3, r2
 8002424:	1d18      	adds	r0, r3, #4
 8002426:	8bfb      	ldrh	r3, [r7, #30]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	2206      	movs	r2, #6
 800242e:	4619      	mov	r1, r3
 8002430:	f024 f9f8 	bl	8026824 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8002434:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002438:	3310      	adds	r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	da00      	bge.n	8002440 <Init_Msg_extr+0x768>
 800243e:	3307      	adds	r3, #7
 8002440:	10db      	asrs	r3, r3, #3
 8002442:	b29a      	uxth	r2, r3
 8002444:	8bfb      	ldrh	r3, [r7, #30]
 8002446:	4413      	add	r3, r2
 8002448:	83fb      	strh	r3, [r7, #30]
 800244a:	8bbb      	ldrh	r3, [r7, #28]
 800244c:	3310      	adds	r3, #16
 800244e:	b29b      	uxth	r3, r3
 8002450:	b21b      	sxth	r3, r3
 8002452:	425a      	negs	r2, r3
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	f002 0207 	and.w	r2, r2, #7
 800245c:	bf58      	it	pl
 800245e:	4253      	negpl	r3, r2
 8002460:	b21b      	sxth	r3, r3
 8002462:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002464:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002468:	3310      	adds	r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	da00      	bge.n	8002470 <Init_Msg_extr+0x798>
 800246e:	3307      	adds	r3, #7
 8002470:	10db      	asrs	r3, r3, #3
 8002472:	b29a      	uxth	r2, r3
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	4413      	add	r3, r2
 8002478:	83fb      	strh	r3, [r7, #30]
 800247a:	8bbb      	ldrh	r3, [r7, #28]
 800247c:	3310      	adds	r3, #16
 800247e:	b29b      	uxth	r3, r3
 8002480:	b21b      	sxth	r3, r3
 8002482:	425a      	negs	r2, r3
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	f002 0207 	and.w	r2, r2, #7
 800248c:	bf58      	it	pl
 800248e:	4253      	negpl	r3, r2
 8002490:	b21b      	sxth	r3, r3
 8002492:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002494:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002498:	3310      	adds	r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	da00      	bge.n	80024a0 <Init_Msg_extr+0x7c8>
 800249e:	3307      	adds	r3, #7
 80024a0:	10db      	asrs	r3, r3, #3
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	8bfb      	ldrh	r3, [r7, #30]
 80024a6:	4413      	add	r3, r2
 80024a8:	83fb      	strh	r3, [r7, #30]
 80024aa:	8bbb      	ldrh	r3, [r7, #28]
 80024ac:	3310      	adds	r3, #16
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	425a      	negs	r2, r3
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	f002 0207 	and.w	r2, r2, #7
 80024bc:	bf58      	it	pl
 80024be:	4253      	negpl	r3, r2
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80024c4:	8bfb      	ldrh	r3, [r7, #30]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	441a      	add	r2, r3
 80024ca:	8bbb      	ldrh	r3, [r7, #28]
 80024cc:	2110      	movs	r1, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f8a0 	bl	8000614 <ExtractBits>
 80024d4:	4602      	mov	r2, r0
 80024d6:	78bb      	ldrb	r3, [r7, #2]
 80024d8:	b291      	uxth	r1, r2
 80024da:	4a4b      	ldr	r2, [pc, #300]	; (8002608 <Init_Msg_extr+0x930>)
 80024dc:	015b      	lsls	r3, r3, #5
 80024de:	4413      	add	r3, r2
 80024e0:	3314      	adds	r3, #20
 80024e2:	460a      	mov	r2, r1
 80024e4:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 80024e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024ea:	3310      	adds	r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da00      	bge.n	80024f2 <Init_Msg_extr+0x81a>
 80024f0:	3307      	adds	r3, #7
 80024f2:	10db      	asrs	r3, r3, #3
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	8bfb      	ldrh	r3, [r7, #30]
 80024f8:	4413      	add	r3, r2
 80024fa:	83fb      	strh	r3, [r7, #30]
 80024fc:	8bbb      	ldrh	r3, [r7, #28]
 80024fe:	3310      	adds	r3, #16
 8002500:	b29b      	uxth	r3, r3
 8002502:	b21b      	sxth	r3, r3
 8002504:	425a      	negs	r2, r3
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	f002 0207 	and.w	r2, r2, #7
 800250e:	bf58      	it	pl
 8002510:	4253      	negpl	r3, r2
 8002512:	b21b      	sxth	r3, r3
 8002514:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002516:	8bfb      	ldrh	r3, [r7, #30]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	441a      	add	r2, r3
 800251c:	8bbb      	ldrh	r3, [r7, #28]
 800251e:	2110      	movs	r1, #16
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f877 	bl	8000614 <ExtractBits>
 8002526:	4602      	mov	r2, r0
 8002528:	78bb      	ldrb	r3, [r7, #2]
 800252a:	b291      	uxth	r1, r2
 800252c:	4a36      	ldr	r2, [pc, #216]	; (8002608 <Init_Msg_extr+0x930>)
 800252e:	015b      	lsls	r3, r3, #5
 8002530:	4413      	add	r3, r2
 8002532:	3316      	adds	r3, #22
 8002534:	460a      	mov	r2, r1
 8002536:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8002538:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800253c:	3310      	adds	r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	da00      	bge.n	8002544 <Init_Msg_extr+0x86c>
 8002542:	3307      	adds	r3, #7
 8002544:	10db      	asrs	r3, r3, #3
 8002546:	b29a      	uxth	r2, r3
 8002548:	8bfb      	ldrh	r3, [r7, #30]
 800254a:	4413      	add	r3, r2
 800254c:	83fb      	strh	r3, [r7, #30]
 800254e:	8bbb      	ldrh	r3, [r7, #28]
 8002550:	3310      	adds	r3, #16
 8002552:	b29b      	uxth	r3, r3
 8002554:	b21b      	sxth	r3, r3
 8002556:	425a      	negs	r2, r3
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	f002 0207 	and.w	r2, r2, #7
 8002560:	bf58      	it	pl
 8002562:	4253      	negpl	r3, r2
 8002564:	b21b      	sxth	r3, r3
 8002566:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002568:	8bfb      	ldrh	r3, [r7, #30]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	441a      	add	r2, r3
 800256e:	8bbb      	ldrh	r3, [r7, #28]
 8002570:	2110      	movs	r1, #16
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe f84e 	bl	8000614 <ExtractBits>
 8002578:	4602      	mov	r2, r0
 800257a:	78bb      	ldrb	r3, [r7, #2]
 800257c:	b291      	uxth	r1, r2
 800257e:	4a22      	ldr	r2, [pc, #136]	; (8002608 <Init_Msg_extr+0x930>)
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	4413      	add	r3, r2
 8002584:	3318      	adds	r3, #24
 8002586:	460a      	mov	r2, r1
 8002588:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 800258a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800258e:	3310      	adds	r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	da00      	bge.n	8002596 <Init_Msg_extr+0x8be>
 8002594:	3307      	adds	r3, #7
 8002596:	10db      	asrs	r3, r3, #3
 8002598:	b29a      	uxth	r2, r3
 800259a:	8bfb      	ldrh	r3, [r7, #30]
 800259c:	4413      	add	r3, r2
 800259e:	83fb      	strh	r3, [r7, #30]
 80025a0:	8bbb      	ldrh	r3, [r7, #28]
 80025a2:	3310      	adds	r3, #16
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	425a      	negs	r2, r3
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	f002 0207 	and.w	r2, r2, #7
 80025b2:	bf58      	it	pl
 80025b4:	4253      	negpl	r3, r2
 80025b6:	b21b      	sxth	r3, r3
 80025b8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 80025ba:	8bfb      	ldrh	r3, [r7, #30]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	441a      	add	r2, r3
 80025c0:	78bc      	ldrb	r4, [r7, #2]
 80025c2:	8bbb      	ldrh	r3, [r7, #28]
 80025c4:	2118      	movs	r1, #24
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe f824 	bl	8000614 <ExtractBits>
 80025cc:	4602      	mov	r2, r0
 80025ce:	490f      	ldr	r1, [pc, #60]	; (800260c <Init_Msg_extr+0x934>)
 80025d0:	0123      	lsls	r3, r4, #4
 80025d2:	440b      	add	r3, r1
 80025d4:	3308      	adds	r3, #8
 80025d6:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80025d8:	78bb      	ldrb	r3, [r7, #2]
 80025da:	78ba      	ldrb	r2, [r7, #2]
 80025dc:	490b      	ldr	r1, [pc, #44]	; (800260c <Init_Msg_extr+0x934>)
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	440b      	add	r3, r1
 80025e2:	3308      	adds	r3, #8
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	480a      	ldr	r0, [pc, #40]	; (8002610 <Init_Msg_extr+0x938>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4403      	add	r3, r0
 80025f2:	3308      	adds	r3, #8
 80025f4:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 80025f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025fa:	3318      	adds	r3, #24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da09      	bge.n	8002614 <Init_Msg_extr+0x93c>
 8002600:	3307      	adds	r3, #7
 8002602:	e007      	b.n	8002614 <Init_Msg_extr+0x93c>
 8002604:	20002764 	.word	0x20002764
 8002608:	20002994 	.word	0x20002994
 800260c:	200028f4 	.word	0x200028f4
 8002610:	20002da4 	.word	0x20002da4
 8002614:	10db      	asrs	r3, r3, #3
 8002616:	b29a      	uxth	r2, r3
 8002618:	8bfb      	ldrh	r3, [r7, #30]
 800261a:	4413      	add	r3, r2
 800261c:	83fb      	strh	r3, [r7, #30]
 800261e:	8bbb      	ldrh	r3, [r7, #28]
 8002620:	3318      	adds	r3, #24
 8002622:	b29b      	uxth	r3, r3
 8002624:	b21b      	sxth	r3, r3
 8002626:	425a      	negs	r2, r3
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	f002 0207 	and.w	r2, r2, #7
 8002630:	bf58      	it	pl
 8002632:	4253      	negpl	r3, r2
 8002634:	b21b      	sxth	r3, r3
 8002636:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002638:	8bfb      	ldrh	r3, [r7, #30]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	441a      	add	r2, r3
 800263e:	8bbb      	ldrh	r3, [r7, #28]
 8002640:	2108      	movs	r1, #8
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ffe6 	bl	8000614 <ExtractBits>
 8002648:	4602      	mov	r2, r0
 800264a:	78bb      	ldrb	r3, [r7, #2]
 800264c:	b2d1      	uxtb	r1, r2
 800264e:	4ab1      	ldr	r2, [pc, #708]	; (8002914 <Init_Msg_extr+0xc3c>)
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4413      	add	r3, r2
 8002654:	460a      	mov	r2, r1
 8002656:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8002658:	78ba      	ldrb	r2, [r7, #2]
 800265a:	78bb      	ldrb	r3, [r7, #2]
 800265c:	49ad      	ldr	r1, [pc, #692]	; (8002914 <Init_Msg_extr+0xc3c>)
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	440a      	add	r2, r1
 8002662:	7811      	ldrb	r1, [r2, #0]
 8002664:	4aab      	ldr	r2, [pc, #684]	; (8002914 <Init_Msg_extr+0xc3c>)
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4413      	add	r3, r2
 800266a:	3302      	adds	r3, #2
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8002670:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002674:	3308      	adds	r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	da00      	bge.n	800267c <Init_Msg_extr+0x9a4>
 800267a:	3307      	adds	r3, #7
 800267c:	10db      	asrs	r3, r3, #3
 800267e:	b29a      	uxth	r2, r3
 8002680:	8bfb      	ldrh	r3, [r7, #30]
 8002682:	4413      	add	r3, r2
 8002684:	83fb      	strh	r3, [r7, #30]
 8002686:	8bbb      	ldrh	r3, [r7, #28]
 8002688:	3308      	adds	r3, #8
 800268a:	b29b      	uxth	r3, r3
 800268c:	b21b      	sxth	r3, r3
 800268e:	425a      	negs	r2, r3
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	f002 0207 	and.w	r2, r2, #7
 8002698:	bf58      	it	pl
 800269a:	4253      	negpl	r3, r2
 800269c:	b21b      	sxth	r3, r3
 800269e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	441a      	add	r2, r3
 80026a6:	8bbb      	ldrh	r3, [r7, #28]
 80026a8:	2108      	movs	r1, #8
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ffb2 	bl	8000614 <ExtractBits>
 80026b0:	4602      	mov	r2, r0
 80026b2:	78bb      	ldrb	r3, [r7, #2]
 80026b4:	b2d1      	uxtb	r1, r2
 80026b6:	4a98      	ldr	r2, [pc, #608]	; (8002918 <Init_Msg_extr+0xc40>)
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	4413      	add	r3, r2
 80026bc:	330a      	adds	r3, #10
 80026be:	460a      	mov	r2, r1
 80026c0:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 80026c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026c6:	3308      	adds	r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da00      	bge.n	80026ce <Init_Msg_extr+0x9f6>
 80026cc:	3307      	adds	r3, #7
 80026ce:	10db      	asrs	r3, r3, #3
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	8bfb      	ldrh	r3, [r7, #30]
 80026d4:	4413      	add	r3, r2
 80026d6:	83fb      	strh	r3, [r7, #30]
 80026d8:	8bbb      	ldrh	r3, [r7, #28]
 80026da:	3308      	adds	r3, #8
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b21b      	sxth	r3, r3
 80026e0:	425a      	negs	r2, r3
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	f002 0207 	and.w	r2, r2, #7
 80026ea:	bf58      	it	pl
 80026ec:	4253      	negpl	r3, r2
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80026f2:	8bfb      	ldrh	r3, [r7, #30]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	441a      	add	r2, r3
 80026f8:	8bbb      	ldrh	r3, [r7, #28]
 80026fa:	2108      	movs	r1, #8
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff89 	bl	8000614 <ExtractBits>
 8002702:	4602      	mov	r2, r0
 8002704:	78bb      	ldrb	r3, [r7, #2]
 8002706:	b2d1      	uxtb	r1, r2
 8002708:	4a82      	ldr	r2, [pc, #520]	; (8002914 <Init_Msg_extr+0xc3c>)
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	3303      	adds	r3, #3
 8002710:	460a      	mov	r2, r1
 8002712:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 8002714:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002718:	3308      	adds	r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	da00      	bge.n	8002720 <Init_Msg_extr+0xa48>
 800271e:	3307      	adds	r3, #7
 8002720:	10db      	asrs	r3, r3, #3
 8002722:	b29a      	uxth	r2, r3
 8002724:	8bfb      	ldrh	r3, [r7, #30]
 8002726:	4413      	add	r3, r2
 8002728:	83fb      	strh	r3, [r7, #30]
 800272a:	8bbb      	ldrh	r3, [r7, #28]
 800272c:	3308      	adds	r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	b21b      	sxth	r3, r3
 8002732:	425a      	negs	r2, r3
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	f002 0207 	and.w	r2, r2, #7
 800273c:	bf58      	it	pl
 800273e:	4253      	negpl	r3, r2
 8002740:	b21b      	sxth	r3, r3
 8002742:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8002744:	78bb      	ldrb	r3, [r7, #2]
 8002746:	4a73      	ldr	r2, [pc, #460]	; (8002914 <Init_Msg_extr+0xc3c>)
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	3303      	adds	r3, #3
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	78bb      	ldrb	r3, [r7, #2]
 8002752:	4972      	ldr	r1, [pc, #456]	; (800291c <Init_Msg_extr+0xc44>)
 8002754:	440b      	add	r3, r1
 8002756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800275a:	429a      	cmp	r2, r3
 800275c:	d015      	beq.n	800278a <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 800275e:	4870      	ldr	r0, [pc, #448]	; (8002920 <Init_Msg_extr+0xc48>)
 8002760:	f024 fa0c 	bl	8026b7c <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002764:	78bb      	ldrb	r3, [r7, #2]
 8002766:	4a6d      	ldr	r2, [pc, #436]	; (800291c <Init_Msg_extr+0xc44>)
 8002768:	4413      	add	r3, r2
 800276a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800276e:	4619      	mov	r1, r3
 8002770:	486c      	ldr	r0, [pc, #432]	; (8002924 <Init_Msg_extr+0xc4c>)
 8002772:	f024 f967 	bl	8026a44 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002776:	78bb      	ldrb	r3, [r7, #2]
 8002778:	4a66      	ldr	r2, [pc, #408]	; (8002914 <Init_Msg_extr+0xc3c>)
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4413      	add	r3, r2
 800277e:	3303      	adds	r3, #3
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4868      	ldr	r0, [pc, #416]	; (8002928 <Init_Msg_extr+0xc50>)
 8002786:	f024 f95d 	bl	8026a44 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800278a:	8bfb      	ldrh	r3, [r7, #30]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	441a      	add	r2, r3
 8002790:	8bbb      	ldrh	r3, [r7, #28]
 8002792:	2108      	movs	r1, #8
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd ff3d 	bl	8000614 <ExtractBits>
 800279a:	4602      	mov	r2, r0
 800279c:	78bb      	ldrb	r3, [r7, #2]
 800279e:	b2d1      	uxtb	r1, r2
 80027a0:	4a5d      	ldr	r2, [pc, #372]	; (8002918 <Init_Msg_extr+0xc40>)
 80027a2:	015b      	lsls	r3, r3, #5
 80027a4:	4413      	add	r3, r2
 80027a6:	330b      	adds	r3, #11
 80027a8:	460a      	mov	r2, r1
 80027aa:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80027ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027b0:	3308      	adds	r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da00      	bge.n	80027b8 <Init_Msg_extr+0xae0>
 80027b6:	3307      	adds	r3, #7
 80027b8:	10db      	asrs	r3, r3, #3
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	8bfb      	ldrh	r3, [r7, #30]
 80027be:	4413      	add	r3, r2
 80027c0:	83fb      	strh	r3, [r7, #30]
 80027c2:	8bbb      	ldrh	r3, [r7, #28]
 80027c4:	3308      	adds	r3, #8
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b21b      	sxth	r3, r3
 80027ca:	425a      	negs	r2, r3
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	f002 0207 	and.w	r2, r2, #7
 80027d4:	bf58      	it	pl
 80027d6:	4253      	negpl	r3, r2
 80027d8:	b21b      	sxth	r3, r3
 80027da:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80027dc:	8bfb      	ldrh	r3, [r7, #30]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	441a      	add	r2, r3
 80027e2:	8bbb      	ldrh	r3, [r7, #28]
 80027e4:	2108      	movs	r1, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd ff14 	bl	8000614 <ExtractBits>
 80027ec:	4602      	mov	r2, r0
 80027ee:	78bb      	ldrb	r3, [r7, #2]
 80027f0:	b2d1      	uxtb	r1, r2
 80027f2:	4a49      	ldr	r2, [pc, #292]	; (8002918 <Init_Msg_extr+0xc40>)
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	4413      	add	r3, r2
 80027f8:	330c      	adds	r3, #12
 80027fa:	460a      	mov	r2, r1
 80027fc:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80027fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002802:	3308      	adds	r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	da00      	bge.n	800280a <Init_Msg_extr+0xb32>
 8002808:	3307      	adds	r3, #7
 800280a:	10db      	asrs	r3, r3, #3
 800280c:	b29a      	uxth	r2, r3
 800280e:	8bfb      	ldrh	r3, [r7, #30]
 8002810:	4413      	add	r3, r2
 8002812:	83fb      	strh	r3, [r7, #30]
 8002814:	8bbb      	ldrh	r3, [r7, #28]
 8002816:	3308      	adds	r3, #8
 8002818:	b29b      	uxth	r3, r3
 800281a:	b21b      	sxth	r3, r3
 800281c:	425a      	negs	r2, r3
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	f002 0207 	and.w	r2, r2, #7
 8002826:	bf58      	it	pl
 8002828:	4253      	negpl	r3, r2
 800282a:	b21b      	sxth	r3, r3
 800282c:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 800282e:	78bb      	ldrb	r3, [r7, #2]
 8002830:	4a39      	ldr	r2, [pc, #228]	; (8002918 <Init_Msg_extr+0xc40>)
 8002832:	015b      	lsls	r3, r3, #5
 8002834:	4413      	add	r3, r2
 8002836:	330c      	adds	r3, #12
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d00c      	beq.n	8002858 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 800283e:	78bb      	ldrb	r3, [r7, #2]
 8002840:	4a35      	ldr	r2, [pc, #212]	; (8002918 <Init_Msg_extr+0xc40>)
 8002842:	015b      	lsls	r3, r3, #5
 8002844:	4413      	add	r3, r2
 8002846:	330c      	adds	r3, #12
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4837      	ldr	r0, [pc, #220]	; (800292c <Init_Msg_extr+0xc54>)
 800284e:	f024 f8f9 	bl	8026a44 <iprintf>
		printf("This Value has to be \"1\"\n");
 8002852:	4837      	ldr	r0, [pc, #220]	; (8002930 <Init_Msg_extr+0xc58>)
 8002854:	f024 f992 	bl	8026b7c <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002858:	8bfb      	ldrh	r3, [r7, #30]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	441a      	add	r2, r3
 800285e:	8bbb      	ldrh	r3, [r7, #28]
 8002860:	2108      	movs	r1, #8
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fed6 	bl	8000614 <ExtractBits>
 8002868:	4602      	mov	r2, r0
 800286a:	78bb      	ldrb	r3, [r7, #2]
 800286c:	b2d1      	uxtb	r1, r2
 800286e:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <Init_Msg_extr+0xc40>)
 8002870:	015b      	lsls	r3, r3, #5
 8002872:	4413      	add	r3, r2
 8002874:	330d      	adds	r3, #13
 8002876:	460a      	mov	r2, r1
 8002878:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 800287a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800287e:	3308      	adds	r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	da00      	bge.n	8002886 <Init_Msg_extr+0xbae>
 8002884:	3307      	adds	r3, #7
 8002886:	10db      	asrs	r3, r3, #3
 8002888:	b29a      	uxth	r2, r3
 800288a:	8bfb      	ldrh	r3, [r7, #30]
 800288c:	4413      	add	r3, r2
 800288e:	83fb      	strh	r3, [r7, #30]
 8002890:	8bbb      	ldrh	r3, [r7, #28]
 8002892:	3308      	adds	r3, #8
 8002894:	b29b      	uxth	r3, r3
 8002896:	b21b      	sxth	r3, r3
 8002898:	425a      	negs	r2, r3
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	f002 0207 	and.w	r2, r2, #7
 80028a2:	bf58      	it	pl
 80028a4:	4253      	negpl	r3, r2
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80028aa:	8bfb      	ldrh	r3, [r7, #30]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	441a      	add	r2, r3
 80028b0:	78bc      	ldrb	r4, [r7, #2]
 80028b2:	8bbb      	ldrh	r3, [r7, #28]
 80028b4:	2120      	movs	r1, #32
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd feac 	bl	8000614 <ExtractBits>
 80028bc:	4602      	mov	r2, r0
 80028be:	4916      	ldr	r1, [pc, #88]	; (8002918 <Init_Msg_extr+0xc40>)
 80028c0:	0163      	lsls	r3, r4, #5
 80028c2:	440b      	add	r3, r1
 80028c4:	331c      	adds	r3, #28
 80028c6:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80028c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028cc:	3320      	adds	r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da00      	bge.n	80028d4 <Init_Msg_extr+0xbfc>
 80028d2:	3307      	adds	r3, #7
 80028d4:	10db      	asrs	r3, r3, #3
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	8bfb      	ldrh	r3, [r7, #30]
 80028da:	4413      	add	r3, r2
 80028dc:	83fb      	strh	r3, [r7, #30]
 80028de:	8bbb      	ldrh	r3, [r7, #28]
 80028e0:	3320      	adds	r3, #32
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	b21b      	sxth	r3, r3
 80028e6:	425a      	negs	r2, r3
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	f002 0207 	and.w	r2, r2, #7
 80028f0:	bf58      	it	pl
 80028f2:	4253      	negpl	r3, r2
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80028f8:	787a      	ldrb	r2, [r7, #1]
 80028fa:	78bb      	ldrb	r3, [r7, #2]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f86c 	bl	80029dc <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8002904:	78ba      	ldrb	r2, [r7, #2]
 8002906:	490b      	ldr	r1, [pc, #44]	; (8002934 <Init_Msg_extr+0xc5c>)
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	e012      	b.n	8002938 <Init_Msg_extr+0xc60>
 8002912:	bf00      	nop
 8002914:	200028f4 	.word	0x200028f4
 8002918:	20002994 	.word	0x20002994
 800291c:	20000504 	.word	0x20000504
 8002920:	08028898 	.word	0x08028898
 8002924:	08028860 	.word	0x08028860
 8002928:	08028874 	.word	0x08028874
 800292c:	080288b4 	.word	0x080288b4
 8002930:	080288e0 	.word	0x080288e0
 8002934:	20002da4 	.word	0x20002da4
 8002938:	440b      	add	r3, r1
 800293a:	3314      	adds	r3, #20
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002940:	78ba      	ldrb	r2, [r7, #2]
 8002942:	4923      	ldr	r1, [pc, #140]	; (80029d0 <Init_Msg_extr+0xcf8>)
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	3305      	adds	r3, #5
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8002954:	78ba      	ldrb	r2, [r7, #2]
 8002956:	491e      	ldr	r1, [pc, #120]	; (80029d0 <Init_Msg_extr+0xcf8>)
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	78ba      	ldrb	r2, [r7, #2]
 8002964:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8002966:	78ba      	ldrb	r2, [r7, #2]
 8002968:	4919      	ldr	r1, [pc, #100]	; (80029d0 <Init_Msg_extr+0xcf8>)
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3301      	adds	r3, #1
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800297a:	2218      	movs	r2, #24
 800297c:	2100      	movs	r1, #0
 800297e:	4815      	ldr	r0, [pc, #84]	; (80029d4 <Init_Msg_extr+0xcfc>)
 8002980:	f023 ff78 	bl	8026874 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8002984:	78ba      	ldrb	r2, [r7, #2]
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <Init_Msg_extr+0xcf8>)
 8002990:	4413      	add	r3, r2
 8002992:	2218      	movs	r2, #24
 8002994:	4619      	mov	r1, r3
 8002996:	480f      	ldr	r0, [pc, #60]	; (80029d4 <Init_Msg_extr+0xcfc>)
 8002998:	f023 ff44 	bl	8026824 <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 800299c:	f240 2001 	movw	r0, #513	; 0x201
 80029a0:	f00e fade 	bl	8010f60 <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80029a4:	78ba      	ldrb	r2, [r7, #2]
 80029a6:	490a      	ldr	r1, [pc, #40]	; (80029d0 <Init_Msg_extr+0xcf8>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3301      	adds	r3, #1
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80029b8:	78bc      	ldrb	r4, [r7, #2]
 80029ba:	f017 f839 	bl	8019a30 <HAL_GetTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <Init_Msg_extr+0xd00>)
 80029c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80029c6:	e000      	b.n	80029ca <Init_Msg_extr+0xcf2>
			return;
 80029c8:	bf00      	nop
}
 80029ca:	3724      	adds	r7, #36	; 0x24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}
 80029d0:	20002da4 	.word	0x20002da4
 80029d4:	20002f84 	.word	0x20002f84
 80029d8:	200024b8 	.word	0x200024b8

080029dc <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b097      	sub	sp, #92	; 0x5c
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	460a      	mov	r2, r1
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	2238      	movs	r2, #56	; 0x38
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f023 ff3b 	bl	8026874 <memset>
	uint32_t Calc_CRC = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002a0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a12:	f107 020c 	add.w	r2, r7, #12
 8002a16:	441a      	add	r2, r3
 8002a18:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a1c:	23f4      	movs	r3, #244	; 0xf4
 8002a1e:	2108      	movs	r1, #8
 8002a20:	f7fd fe84 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a24:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a28:	3308      	adds	r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da00      	bge.n	8002a30 <Send_Init_Msg+0x54>
 8002a2e:	3307      	adds	r3, #7
 8002a30:	10db      	asrs	r3, r3, #3
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a38:	4413      	add	r3, r2
 8002a3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a42:	3308      	adds	r3, #8
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	425a      	negs	r2, r3
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	f002 0207 	and.w	r2, r2, #7
 8002a52:	bf58      	it	pl
 8002a54:	4253      	negpl	r3, r2
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	441a      	add	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	4977      	ldr	r1, [pc, #476]	; (8002c48 <Send_Init_Msg+0x26c>)
 8002a6a:	3366      	adds	r3, #102	; 0x66
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a76:	2110      	movs	r1, #16
 8002a78:	f7fd fe58 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002a7c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a80:	3310      	adds	r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da00      	bge.n	8002a88 <Send_Init_Msg+0xac>
 8002a86:	3307      	adds	r3, #7
 8002a88:	10db      	asrs	r3, r3, #3
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a90:	4413      	add	r3, r2
 8002a92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	425a      	negs	r2, r3
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	f002 0207 	and.w	r2, r2, #7
 8002aaa:	bf58      	it	pl
 8002aac:	4253      	negpl	r3, r2
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8002ab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ab8:	f107 020c 	add.w	r2, r7, #12
 8002abc:	441a      	add	r2, r3
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	4961      	ldr	r1, [pc, #388]	; (8002c48 <Send_Init_Msg+0x26c>)
 8002ac2:	3370      	adds	r3, #112	; 0x70
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ace:	2110      	movs	r1, #16
 8002ad0:	f7fd fe2c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002ad4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ad8:	3310      	adds	r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da00      	bge.n	8002ae0 <Send_Init_Msg+0x104>
 8002ade:	3307      	adds	r3, #7
 8002ae0:	10db      	asrs	r3, r3, #3
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ae8:	4413      	add	r3, r2
 8002aea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002aee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002af2:	3310      	adds	r3, #16
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	425a      	negs	r2, r3
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	f002 0207 	and.w	r2, r2, #7
 8002b02:	bf58      	it	pl
 8002b04:	4253      	negpl	r3, r2
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002b0c:	4b4f      	ldr	r3, [pc, #316]	; (8002c4c <Send_Init_Msg+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d031      	beq.n	8002b7e <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002b1a:	4b4c      	ldr	r3, [pc, #304]	; (8002c4c <Send_Init_Msg+0x270>)
 8002b1c:	791b      	ldrb	r3, [r3, #4]
 8002b1e:	79fa      	ldrb	r2, [r7, #7]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d137      	bne.n	8002b94 <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002b2a:	4849      	ldr	r0, [pc, #292]	; (8002c50 <Send_Init_Msg+0x274>)
 8002b2c:	f01b fc32 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b48      	ldr	r3, [pc, #288]	; (8002c54 <Send_Init_Msg+0x278>)
 8002b34:	fba3 1302 	umull	r1, r3, r3, r2
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	21c8      	movs	r1, #200	; 0xc8
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002b4a:	4843      	ldr	r0, [pc, #268]	; (8002c58 <Send_Init_Msg+0x27c>)
 8002b4c:	f024 f816 	bl	8026b7c <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002b50:	2100      	movs	r1, #0
 8002b52:	4842      	ldr	r0, [pc, #264]	; (8002c5c <Send_Init_Msg+0x280>)
 8002b54:	f023 ff76 	bl	8026a44 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002b58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4840      	ldr	r0, [pc, #256]	; (8002c60 <Send_Init_Msg+0x284>)
 8002b60:	f023 ff70 	bl	8026a44 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002b64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b68:	f107 020c 	add.w	r2, r7, #12
 8002b6c:	441a      	add	r2, r3
 8002b6e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b72:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b76:	2108      	movs	r1, #8
 8002b78:	f7fd fdd8 	bl	800072c <InsertBits>
 8002b7c:	e00a      	b.n	8002b94 <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002b7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b82:	f107 020c 	add.w	r2, r7, #12
 8002b86:	441a      	add	r2, r3
 8002b88:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2108      	movs	r1, #8
 8002b90:	f7fd fdcc 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002b94:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b98:	3308      	adds	r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	da00      	bge.n	8002ba0 <Send_Init_Msg+0x1c4>
 8002b9e:	3307      	adds	r3, #7
 8002ba0:	10db      	asrs	r3, r3, #3
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba8:	4413      	add	r3, r2
 8002baa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	425a      	negs	r2, r3
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	f002 0207 	and.w	r2, r2, #7
 8002bc2:	bf58      	it	pl
 8002bc4:	4253      	negpl	r3, r2
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002bcc:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <Send_Init_Msg+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d04c      	beq.n	8002c74 <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <Send_Init_Msg+0x270>)
 8002bdc:	791b      	ldrb	r3, [r3, #4]
 8002bde:	79fa      	ldrb	r2, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d165      	bne.n	8002cb0 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8002bea:	4819      	ldr	r0, [pc, #100]	; (8002c50 <Send_Init_Msg+0x274>)
 8002bec:	f01b fbd2 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <Send_Init_Msg+0x278>)
 8002bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	21c8      	movs	r1, #200	; 0xc8
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 8002c06:	4817      	ldr	r0, [pc, #92]	; (8002c64 <Send_Init_Msg+0x288>)
 8002c08:	f023 ffb8 	bl	8026b7c <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <Send_Init_Msg+0x28c>)
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	4413      	add	r3, r2
 8002c14:	3302      	adds	r3, #2
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4814      	ldr	r0, [pc, #80]	; (8002c6c <Send_Init_Msg+0x290>)
 8002c1c:	f023 ff12 	bl	8026a44 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002c20:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c24:	4619      	mov	r1, r3
 8002c26:	4812      	ldr	r0, [pc, #72]	; (8002c70 <Send_Init_Msg+0x294>)
 8002c28:	f023 ff0c 	bl	8026a44 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002c2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c30:	f107 020c 	add.w	r2, r7, #12
 8002c34:	441a      	add	r2, r3
 8002c36:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c3a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c3e:	2108      	movs	r1, #8
 8002c40:	f7fd fd74 	bl	800072c <InsertBits>
 8002c44:	e034      	b.n	8002cb0 <Send_Init_Msg+0x2d4>
 8002c46:	bf00      	nop
 8002c48:	20000504 	.word	0x20000504
 8002c4c:	2000308c 	.word	0x2000308c
 8002c50:	2000bcec 	.word	0x2000bcec
 8002c54:	51eb851f 	.word	0x51eb851f
 8002c58:	080288fc 	.word	0x080288fc
 8002c5c:	08028920 	.word	0x08028920
 8002c60:	08028940 	.word	0x08028940
 8002c64:	08028960 	.word	0x08028960
 8002c68:	200028f4 	.word	0x200028f4
 8002c6c:	08028984 	.word	0x08028984
 8002c70:	080289a4 	.word	0x080289a4

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 8002c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c78:	f107 020c 	add.w	r2, r7, #12
 8002c7c:	18d1      	adds	r1, r2, r3
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	48c4      	ldr	r0, [pc, #784]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002c82:	011a      	lsls	r2, r3, #4
 8002c84:	4402      	add	r2, r0
 8002c86:	3202      	adds	r2, #2
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	3201      	adds	r2, #1
 8002c8c:	b2d4      	uxtb	r4, r2
 8002c8e:	48c1      	ldr	r0, [pc, #772]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	4402      	add	r2, r0
 8002c94:	3202      	adds	r2, #2
 8002c96:	4620      	mov	r0, r4
 8002c98:	7010      	strb	r0, [r2, #0]
 8002c9a:	4abe      	ldr	r2, [pc, #760]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ca8:	460a      	mov	r2, r1
 8002caa:	2108      	movs	r1, #8
 8002cac:	f7fd fd3e 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002cb0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da00      	bge.n	8002cbc <Send_Init_Msg+0x2e0>
 8002cba:	3307      	adds	r3, #7
 8002cbc:	10db      	asrs	r3, r3, #3
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cce:	3308      	adds	r3, #8
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	425a      	negs	r2, r3
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	f002 0207 	and.w	r2, r2, #7
 8002cde:	bf58      	it	pl
 8002ce0:	4253      	negpl	r3, r2
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 8002ce8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cec:	f107 020c 	add.w	r2, r7, #12
 8002cf0:	441a      	add	r2, r3
 8002cf2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	2108      	movs	r1, #8
 8002cfa:	f7fd fd17 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002cfe:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d02:	3308      	adds	r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da00      	bge.n	8002d0a <Send_Init_Msg+0x32e>
 8002d08:	3307      	adds	r3, #7
 8002d0a:	10db      	asrs	r3, r3, #3
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d12:	4413      	add	r3, r2
 8002d14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	425a      	negs	r2, r3
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	f002 0207 	and.w	r2, r2, #7
 8002d2c:	bf58      	it	pl
 8002d2e:	4253      	negpl	r3, r2
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4a96      	ldr	r2, [pc, #600]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3306      	adds	r3, #6
 8002d40:	2205      	movs	r2, #5
 8002d42:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 8002d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d48:	f107 020c 	add.w	r2, r7, #12
 8002d4c:	441a      	add	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4990      	ldr	r1, [pc, #576]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	440b      	add	r3, r1
 8002d56:	3306      	adds	r3, #6
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002d5e:	2110      	movs	r1, #16
 8002d60:	f7fd fce4 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002d64:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d68:	3310      	adds	r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da00      	bge.n	8002d70 <Send_Init_Msg+0x394>
 8002d6e:	3307      	adds	r3, #7
 8002d70:	10db      	asrs	r3, r3, #3
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d78:	4413      	add	r3, r2
 8002d7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d82:	3310      	adds	r3, #16
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	425a      	negs	r2, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	f002 0207 	and.w	r2, r2, #7
 8002d92:	bf58      	it	pl
 8002d94:	4253      	negpl	r3, r2
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002d9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002da0:	f107 020c 	add.w	r2, r7, #12
 8002da4:	441a      	add	r2, r3
 8002da6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002daa:	2317      	movs	r3, #23
 8002dac:	2108      	movs	r1, #8
 8002dae:	f7fd fcbd 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002db2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002db6:	3308      	adds	r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	da00      	bge.n	8002dbe <Send_Init_Msg+0x3e2>
 8002dbc:	3307      	adds	r3, #7
 8002dbe:	10db      	asrs	r3, r3, #3
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dcc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	425a      	negs	r2, r3
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	f002 0207 	and.w	r2, r2, #7
 8002de0:	bf58      	it	pl
 8002de2:	4253      	negpl	r3, r2
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 8002dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dee:	f107 020c 	add.w	r2, r7, #12
 8002df2:	441a      	add	r2, r3
 8002df4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002df8:	2301      	movs	r3, #1
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	f7fd fc96 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002e00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e04:	3310      	adds	r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da00      	bge.n	8002e0c <Send_Init_Msg+0x430>
 8002e0a:	3307      	adds	r3, #7
 8002e0c:	10db      	asrs	r3, r3, #3
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e14:	4413      	add	r3, r2
 8002e16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e1e:	3310      	adds	r3, #16
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	425a      	negs	r2, r3
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	f002 0207 	and.w	r2, r2, #7
 8002e2e:	bf58      	it	pl
 8002e30:	4253      	negpl	r3, r2
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002e38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e3c:	f107 020c 	add.w	r2, r7, #12
 8002e40:	441a      	add	r2, r3
 8002e42:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e46:	4b54      	ldr	r3, [pc, #336]	; (8002f98 <Send_Init_Msg+0x5bc>)
 8002e48:	2120      	movs	r1, #32
 8002e4a:	f7fd fc6f 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002e4e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e52:	3320      	adds	r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da00      	bge.n	8002e5a <Send_Init_Msg+0x47e>
 8002e58:	3307      	adds	r3, #7
 8002e5a:	10db      	asrs	r3, r3, #3
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e62:	4413      	add	r3, r2
 8002e64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e6c:	3320      	adds	r3, #32
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	425a      	negs	r2, r3
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	f002 0207 	and.w	r2, r2, #7
 8002e7c:	bf58      	it	pl
 8002e7e:	4253      	negpl	r3, r2
 8002e80:	b21b      	sxth	r3, r3
 8002e82:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 8002e86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e8a:	f107 020c 	add.w	r2, r7, #12
 8002e8e:	441a      	add	r2, r3
 8002e90:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e94:	2300      	movs	r3, #0
 8002e96:	2110      	movs	r1, #16
 8002e98:	f7fd fc48 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002e9c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da00      	bge.n	8002ea8 <Send_Init_Msg+0x4cc>
 8002ea6:	3307      	adds	r3, #7
 8002ea8:	10db      	asrs	r3, r3, #3
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002eb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eba:	3310      	adds	r3, #16
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	425a      	negs	r2, r3
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	f002 0207 	and.w	r2, r2, #7
 8002eca:	bf58      	it	pl
 8002ecc:	4253      	negpl	r3, r2
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 8002ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed8:	f107 020c 	add.w	r2, r7, #12
 8002edc:	441a      	add	r2, r3
 8002ede:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2110      	movs	r1, #16
 8002ee6:	f7fd fc21 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002eea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002eee:	3310      	adds	r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da00      	bge.n	8002ef6 <Send_Init_Msg+0x51a>
 8002ef4:	3307      	adds	r3, #7
 8002ef6:	10db      	asrs	r3, r3, #3
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002efe:	4413      	add	r3, r2
 8002f00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f08:	3310      	adds	r3, #16
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	425a      	negs	r2, r3
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	f002 0207 	and.w	r2, r2, #7
 8002f18:	bf58      	it	pl
 8002f1a:	4253      	negpl	r3, r2
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 8002f22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f26:	f107 020c 	add.w	r2, r7, #12
 8002f2a:	441a      	add	r2, r3
 8002f2c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f30:	2300      	movs	r3, #0
 8002f32:	2110      	movs	r1, #16
 8002f34:	f7fd fbfa 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f38:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f3c:	3310      	adds	r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da00      	bge.n	8002f44 <Send_Init_Msg+0x568>
 8002f42:	3307      	adds	r3, #7
 8002f44:	10db      	asrs	r3, r3, #3
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f56:	3310      	adds	r3, #16
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	425a      	negs	r2, r3
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	f002 0207 	and.w	r2, r2, #7
 8002f66:	bf58      	it	pl
 8002f68:	4253      	negpl	r3, r2
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002f70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f74:	f107 020c 	add.w	r2, r7, #12
 8002f78:	441a      	add	r2, r3
 8002f7a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2110      	movs	r1, #16
 8002f82:	f7fd fbd3 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f86:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f8a:	3310      	adds	r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da05      	bge.n	8002f9c <Send_Init_Msg+0x5c0>
 8002f90:	3307      	adds	r3, #7
 8002f92:	e003      	b.n	8002f9c <Send_Init_Msg+0x5c0>
 8002f94:	200028f4 	.word	0x200028f4
 8002f98:	33e232af 	.word	0x33e232af
 8002f9c:	10db      	asrs	r3, r3, #3
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002faa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fae:	3310      	adds	r3, #16
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	425a      	negs	r2, r3
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	f002 0207 	and.w	r2, r2, #7
 8002fbe:	bf58      	it	pl
 8002fc0:	4253      	negpl	r3, r2
 8002fc2:	b21b      	sxth	r3, r3
 8002fc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	4ab2      	ldr	r2, [pc, #712]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	4413      	add	r3, r2
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4ab0      	ldr	r2, [pc, #704]	; (8003298 <Send_Init_Msg+0x8bc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d90d      	bls.n	8002ff6 <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	4aad      	ldr	r2, [pc, #692]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	3a01      	subs	r2, #1
 8002fea:	49aa      	ldr	r1, [pc, #680]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	440b      	add	r3, r1
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e00c      	b.n	8003010 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	4aa6      	ldr	r2, [pc, #664]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3308      	adds	r3, #8
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	3201      	adds	r2, #1
 8003006:	49a3      	ldr	r1, [pc, #652]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	440b      	add	r3, r1
 800300c:	330c      	adds	r3, #12
 800300e:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003010:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003014:	f107 020c 	add.w	r2, r7, #12
 8003018:	441a      	add	r2, r3
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	499d      	ldr	r1, [pc, #628]	; (8003294 <Send_Init_Msg+0x8b8>)
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	440b      	add	r3, r1
 8003022:	330c      	adds	r3, #12
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800302a:	2118      	movs	r1, #24
 800302c:	f7fd fb7e 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	4997      	ldr	r1, [pc, #604]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	440b      	add	r3, r1
 800303a:	330c      	adds	r3, #12
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	4897      	ldr	r0, [pc, #604]	; (800329c <Send_Init_Msg+0x8c0>)
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4403      	add	r3, r0
 800304a:	330c      	adds	r3, #12
 800304c:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 800304e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003052:	3318      	adds	r3, #24
 8003054:	2b00      	cmp	r3, #0
 8003056:	da00      	bge.n	800305a <Send_Init_Msg+0x67e>
 8003058:	3307      	adds	r3, #7
 800305a:	10db      	asrs	r3, r3, #3
 800305c:	b29a      	uxth	r2, r3
 800305e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003062:	4413      	add	r3, r2
 8003064:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003068:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800306c:	3318      	adds	r3, #24
 800306e:	b29b      	uxth	r3, r3
 8003070:	b21b      	sxth	r3, r3
 8003072:	425a      	negs	r2, r3
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	f002 0207 	and.w	r2, r2, #7
 800307c:	bf58      	it	pl
 800307e:	4253      	negpl	r3, r2
 8003080:	b21b      	sxth	r3, r3
 8003082:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	4a85      	ldr	r2, [pc, #532]	; (80032a0 <Send_Init_Msg+0x8c4>)
 800308a:	5cd2      	ldrb	r2, [r2, r3]
 800308c:	3201      	adds	r2, #1
 800308e:	b2d1      	uxtb	r1, r2
 8003090:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <Send_Init_Msg+0x8c4>)
 8003092:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4a82      	ldr	r2, [pc, #520]	; (80032a0 <Send_Init_Msg+0x8c4>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	2bb3      	cmp	r3, #179	; 0xb3
 800309c:	d804      	bhi.n	80030a8 <Send_Init_Msg+0x6cc>
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <Send_Init_Msg+0x8c4>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	4a7d      	ldr	r2, [pc, #500]	; (80032a0 <Send_Init_Msg+0x8c4>)
 80030ac:	210a      	movs	r1, #10
 80030ae:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80030b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030b4:	f107 020c 	add.w	r2, r7, #12
 80030b8:	441a      	add	r2, r3
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	4978      	ldr	r1, [pc, #480]	; (80032a0 <Send_Init_Msg+0x8c4>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80030c4:	2108      	movs	r1, #8
 80030c6:	f7fd fb31 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80030ca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80030ce:	3308      	adds	r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da00      	bge.n	80030d6 <Send_Init_Msg+0x6fa>
 80030d4:	3307      	adds	r3, #7
 80030d6:	10db      	asrs	r3, r3, #3
 80030d8:	b29a      	uxth	r2, r3
 80030da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030de:	4413      	add	r3, r2
 80030e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030e8:	3308      	adds	r3, #8
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	425a      	negs	r2, r3
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	f002 0207 	and.w	r2, r2, #7
 80030f8:	bf58      	it	pl
 80030fa:	4253      	negpl	r3, r2
 80030fc:	b21b      	sxth	r3, r3
 80030fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 8003102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003106:	f107 020c 	add.w	r2, r7, #12
 800310a:	441a      	add	r2, r3
 800310c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003110:	2301      	movs	r3, #1
 8003112:	2108      	movs	r1, #8
 8003114:	f7fd fb0a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003118:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800311c:	3308      	adds	r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	da00      	bge.n	8003124 <Send_Init_Msg+0x748>
 8003122:	3307      	adds	r3, #7
 8003124:	10db      	asrs	r3, r3, #3
 8003126:	b29a      	uxth	r2, r3
 8003128:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800312c:	4413      	add	r3, r2
 800312e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003132:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003136:	3308      	adds	r3, #8
 8003138:	b29b      	uxth	r3, r3
 800313a:	b21b      	sxth	r3, r3
 800313c:	425a      	negs	r2, r3
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	f002 0207 	and.w	r2, r2, #7
 8003146:	bf58      	it	pl
 8003148:	4253      	negpl	r3, r2
 800314a:	b21b      	sxth	r3, r3
 800314c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8003150:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003154:	f107 020c 	add.w	r2, r7, #12
 8003158:	441a      	add	r2, r3
 800315a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800315e:	2301      	movs	r3, #1
 8003160:	2108      	movs	r1, #8
 8003162:	f7fd fae3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003166:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800316a:	3308      	adds	r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	da00      	bge.n	8003172 <Send_Init_Msg+0x796>
 8003170:	3307      	adds	r3, #7
 8003172:	10db      	asrs	r3, r3, #3
 8003174:	b29a      	uxth	r2, r3
 8003176:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800317a:	4413      	add	r3, r2
 800317c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003180:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003184:	3308      	adds	r3, #8
 8003186:	b29b      	uxth	r3, r3
 8003188:	b21b      	sxth	r3, r3
 800318a:	425a      	negs	r2, r3
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	f002 0207 	and.w	r2, r2, #7
 8003194:	bf58      	it	pl
 8003196:	4253      	negpl	r3, r2
 8003198:	b21b      	sxth	r3, r3
 800319a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 800319e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031a2:	f107 020c 	add.w	r2, r7, #12
 80031a6:	441a      	add	r2, r3
 80031a8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80031ac:	2300      	movs	r3, #0
 80031ae:	2108      	movs	r1, #8
 80031b0:	f7fd fabc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80031b4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80031b8:	3308      	adds	r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da00      	bge.n	80031c0 <Send_Init_Msg+0x7e4>
 80031be:	3307      	adds	r3, #7
 80031c0:	10db      	asrs	r3, r3, #3
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c8:	4413      	add	r3, r2
 80031ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031d2:	3308      	adds	r3, #8
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	b21b      	sxth	r3, r3
 80031d8:	425a      	negs	r2, r3
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	f002 0207 	and.w	r2, r2, #7
 80031e2:	bf58      	it	pl
 80031e4:	4253      	negpl	r3, r2
 80031e6:	b21b      	sxth	r3, r3
 80031e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <Send_Init_Msg+0x8c8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d060      	beq.n	80032bc <Send_Init_Msg+0x8e0>
 80031fa:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <Send_Init_Msg+0x8c8>)
 80031fc:	791b      	ldrb	r3, [r3, #4]
 80031fe:	79fa      	ldrb	r2, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d15b      	bne.n	80032bc <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8003204:	230c      	movs	r3, #12
 8003206:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 800320a:	4827      	ldr	r0, [pc, #156]	; (80032a8 <Send_Init_Msg+0x8cc>)
 800320c:	f01b f8c2 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8003210:	4601      	mov	r1, r0
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <Send_Init_Msg+0x8d0>)
 8003214:	fba3 2301 	umull	r2, r3, r3, r1
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	4613      	mov	r3, r2
 800321c:	015b      	lsls	r3, r3, #5
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	1aca      	subs	r2, r1, r3
 8003226:	b2d3      	uxtb	r3, r2
 8003228:	3301      	adds	r3, #1
 800322a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 800322e:	4820      	ldr	r0, [pc, #128]	; (80032b0 <Send_Init_Msg+0x8d4>)
 8003230:	f023 fca4 	bl	8026b7c <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	4a17      	ldr	r2, [pc, #92]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	3303      	adds	r3, #3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	481c      	ldr	r0, [pc, #112]	; (80032b4 <Send_Init_Msg+0x8d8>)
 8003244:	f023 fbfe 	bl	8026a44 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <Send_Init_Msg+0x8b8>)
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	4413      	add	r3, r2
 8003250:	3303      	adds	r3, #3
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003258:	429a      	cmp	r2, r3
 800325a:	d108      	bne.n	800326e <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	4413      	add	r3, r2
 8003264:	3303      	adds	r3, #3
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	3b02      	subs	r3, #2
 800326a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 800326e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003272:	4619      	mov	r1, r3
 8003274:	4810      	ldr	r0, [pc, #64]	; (80032b8 <Send_Init_Msg+0x8dc>)
 8003276:	f023 fbe5 	bl	8026a44 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 800327a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800327e:	f107 020c 	add.w	r2, r7, #12
 8003282:	441a      	add	r2, r3
 8003284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003288:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800328c:	2108      	movs	r1, #8
 800328e:	f7fd fa4d 	bl	800072c <InsertBits>
	{
 8003292:	e022      	b.n	80032da <Send_Init_Msg+0x8fe>
 8003294:	200028f4 	.word	0x200028f4
 8003298:	00ffffef 	.word	0x00ffffef
 800329c:	20002da4 	.word	0x20002da4
 80032a0:	2000030c 	.word	0x2000030c
 80032a4:	2000308c 	.word	0x2000308c
 80032a8:	2000bcec 	.word	0x2000bcec
 80032ac:	10624dd3 	.word	0x10624dd3
 80032b0:	080289c4 	.word	0x080289c4
 80032b4:	080289f4 	.word	0x080289f4
 80032b8:	08028a10 	.word	0x08028a10
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 80032bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032c0:	f107 020c 	add.w	r2, r7, #12
 80032c4:	441a      	add	r2, r3
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	494e      	ldr	r1, [pc, #312]	; (8003404 <Send_Init_Msg+0xa28>)
 80032ca:	440b      	add	r3, r1
 80032cc:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80032d0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80032d4:	2108      	movs	r1, #8
 80032d6:	f7fd fa29 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80032da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80032de:	3308      	adds	r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	da00      	bge.n	80032e6 <Send_Init_Msg+0x90a>
 80032e4:	3307      	adds	r3, #7
 80032e6:	10db      	asrs	r3, r3, #3
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032ee:	4413      	add	r3, r2
 80032f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032f8:	3308      	adds	r3, #8
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	425a      	negs	r2, r3
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	f002 0207 	and.w	r2, r2, #7
 8003308:	bf58      	it	pl
 800330a:	4253      	negpl	r3, r2
 800330c:	b21b      	sxth	r3, r3
 800330e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8003312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003316:	f107 020c 	add.w	r2, r7, #12
 800331a:	441a      	add	r2, r3
 800331c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003320:	2300      	movs	r3, #0
 8003322:	2108      	movs	r1, #8
 8003324:	f7fd fa02 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003328:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800332c:	3308      	adds	r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	da00      	bge.n	8003334 <Send_Init_Msg+0x958>
 8003332:	3307      	adds	r3, #7
 8003334:	10db      	asrs	r3, r3, #3
 8003336:	b29a      	uxth	r2, r3
 8003338:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800333c:	4413      	add	r3, r2
 800333e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003342:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003346:	3308      	adds	r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b21b      	sxth	r3, r3
 800334c:	425a      	negs	r2, r3
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	f002 0207 	and.w	r2, r2, #7
 8003356:	bf58      	it	pl
 8003358:	4253      	negpl	r3, r2
 800335a:	b21b      	sxth	r3, r3
 800335c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8003360:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f012 fdd4 	bl	8015f18 <CalculateDirectReverseCrc>
 8003370:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8003372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003376:	f107 020c 	add.w	r2, r7, #12
 800337a:	441a      	add	r2, r3
 800337c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003382:	2120      	movs	r1, #32
 8003384:	f7fd f9d2 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8003388:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800338c:	3320      	adds	r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	da00      	bge.n	8003394 <Send_Init_Msg+0x9b8>
 8003392:	3307      	adds	r3, #7
 8003394:	10db      	asrs	r3, r3, #3
 8003396:	b29a      	uxth	r2, r3
 8003398:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800339c:	4413      	add	r3, r2
 800339e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80033a6:	3320      	adds	r3, #32
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	b21b      	sxth	r3, r3
 80033ac:	425a      	negs	r2, r3
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	f002 0207 	and.w	r2, r2, #7
 80033b6:	bf58      	it	pl
 80033b8:	4253      	negpl	r3, r2
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <Send_Init_Msg+0xa2c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0a5b      	lsrs	r3, r3, #9
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <Send_Init_Msg+0xa0a>
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <Send_Init_Msg+0xa2c>)
 80033d0:	791b      	ldrb	r3, [r3, #4]
 80033d2:	79fa      	ldrb	r2, [r7, #7]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d106      	bne.n	80033e6 <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <Send_Init_Msg+0xa30>)
 80033da:	f023 fbcf 	bl	8026b7c <puts>
		printf("Not Sending Reply");
 80033de:	480c      	ldr	r0, [pc, #48]	; (8003410 <Send_Init_Msg+0xa34>)
 80033e0:	f023 fb30 	bl	8026a44 <iprintf>
 80033e4:	e009      	b.n	80033fa <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80033e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ea:	b2d9      	uxtb	r1, r3
 80033ec:	79fa      	ldrb	r2, [r7, #7]
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 fe38 	bl	8008068 <Process_Sending_Reply>
	}
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	375c      	adds	r7, #92	; 0x5c
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd90      	pop	{r4, r7, pc}
 8003402:	bf00      	nop
 8003404:	20000504 	.word	0x20000504
 8003408:	2000308c 	.word	0x2000308c
 800340c:	08028a2c 	.word	0x08028a2c
 8003410:	08028a44 	.word	0x08028a44

08003414 <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b0ab      	sub	sp, #172	; 0xac
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	70fb      	strb	r3, [r7, #3]
 8003426:	460b      	mov	r3, r1
 8003428:	70bb      	strb	r3, [r7, #2]
 800342a:	4613      	mov	r3, r2
 800342c:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	uint32_t Calc_CRC = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t Recv_CRC = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint32_t Ticks = HAL_GetTick();
 8003440:	f016 faf6 	bl	8019a30 <HAL_GetTick>
 8003444:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint8_t noofIP = 0, uc_index = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800344e:	2300      	movs	r3, #0
 8003450:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	uint8_t LinkEstablishFlag = RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	uint8_t Temp_Vital_Data_Buff[HITACHI_MAX_PAYLOAD] = {0,};
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	227c      	movs	r2, #124	; 0x7c
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f023 fa04 	bl	8026874 <memset>
	BITSTUFFINIT(0, 0);
 800346c:	2300      	movs	r3, #0
 800346e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003472:	2300      	movs	r3, #0
 8003474:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003478:	49a9      	ldr	r1, [pc, #676]	; (8003720 <Vital_Msg_extr+0x30c>)
 800347a:	48aa      	ldr	r0, [pc, #680]	; (8003724 <Vital_Msg_extr+0x310>)
 800347c:	f7fc fee0 	bl	8000240 <strcmp>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8149 	beq.w	800371a <Vital_Msg_extr+0x306>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003488:	4ba7      	ldr	r3, [pc, #668]	; (8003728 <Vital_Msg_extr+0x314>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d031      	beq.n	80034f8 <Vital_Msg_extr+0xe4>
 8003494:	4ba4      	ldr	r3, [pc, #656]	; (8003728 <Vital_Msg_extr+0x314>)
 8003496:	791b      	ldrb	r3, [r3, #4]
 8003498:	78ba      	ldrb	r2, [r7, #2]
 800349a:	429a      	cmp	r2, r3
 800349c:	d12c      	bne.n	80034f8 <Vital_Msg_extr+0xe4>
	{
		uint32_t Rand_Number = 22;
 800349e:	2316      	movs	r3, #22
 80034a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 80034a4:	48a1      	ldr	r0, [pc, #644]	; (800372c <Vital_Msg_extr+0x318>)
 80034a6:	f01a ff75 	bl	801e394 <HAL_RNG_GetRandomNumber>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4ba0      	ldr	r3, [pc, #640]	; (8003730 <Vital_Msg_extr+0x31c>)
 80034ae:	fba3 1302 	umull	r1, r3, r3, r2
 80034b2:	0dd9      	lsrs	r1, r3, #23
 80034b4:	460b      	mov	r3, r1
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	1a5b      	subs	r3, r3, r1
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif
		printf("\nInjected RX Vital CRC failure\n");
 80034c2:	489c      	ldr	r0, [pc, #624]	; (8003734 <Vital_Msg_extr+0x320>)
 80034c4:	f023 fb5a 	bl	8026b7c <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034c8:	78bb      	ldrb	r3, [r7, #2]
 80034ca:	4a9b      	ldr	r2, [pc, #620]	; (8003738 <Vital_Msg_extr+0x324>)
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4413      	add	r3, r2
 80034d0:	3308      	adds	r3, #8
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	4899      	ldr	r0, [pc, #612]	; (800373c <Vital_Msg_extr+0x328>)
 80034d8:	f023 fab4 	bl	8026a44 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80034dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80034e0:	4897      	ldr	r0, [pc, #604]	; (8003740 <Vital_Msg_extr+0x32c>)
 80034e2:	f023 faaf 	bl	8026a44 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 80034e6:	f107 020c 	add.w	r2, r7, #12
 80034ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ee:	2118      	movs	r1, #24
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7fd f91b 	bl	800072c <InsertBits>
	{
 80034f6:	e00b      	b.n	8003510 <Vital_Msg_extr+0xfc>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034f8:	78bb      	ldrb	r3, [r7, #2]
 80034fa:	4a8f      	ldr	r2, [pc, #572]	; (8003738 <Vital_Msg_extr+0x324>)
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4413      	add	r3, r2
 8003500:	3308      	adds	r3, #8
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f107 020c 	add.w	r2, r7, #12
 8003508:	2118      	movs	r1, #24
 800350a:	2000      	movs	r0, #0
 800350c:	f7fd f90e 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8003510:	2300      	movs	r3, #0
 8003512:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8003516:	e010      	b.n	800353a <Vital_Msg_extr+0x126>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8003518:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	441a      	add	r2, r3
 8003520:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003524:	3303      	adds	r3, #3
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	33a8      	adds	r3, #168	; 0xa8
 800352a:	443b      	add	r3, r7
 800352c:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8003530:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003534:	3301      	adds	r3, #1
 8003536:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800353a:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	3b05      	subs	r3, #5
 8003542:	429a      	cmp	r2, r3
 8003544:	dbe8      	blt.n	8003518 <Vital_Msg_extr+0x104>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8003546:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800354a:	b29b      	uxth	r3, r3
 800354c:	3303      	adds	r3, #3
 800354e:	b29a      	uxth	r2, r3
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f012 fcde 	bl	8015f18 <CalculateDirectReverseCrc>
 800355c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	3b05      	subs	r3, #5
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	441a      	add	r2, r3
 8003568:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800356c:	2120      	movs	r1, #32
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd f850 	bl	8000614 <ExtractBits>
 8003574:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8003578:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800357c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003580:	429a      	cmp	r2, r3
 8003582:	f000 80f5 	beq.w	8003770 <Vital_Msg_extr+0x35c>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3305      	adds	r3, #5
 800358a:	461a      	mov	r2, r3
 800358c:	2108      	movs	r1, #8
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd f840 	bl	8000614 <ExtractBits>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <Vital_Msg_extr+0x19c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3305      	adds	r3, #5
 800359e:	461a      	mov	r2, r3
 80035a0:	2108      	movs	r1, #8
 80035a2:	2000      	movs	r0, #0
 80035a4:	f7fd f836 	bl	8000614 <ExtractBits>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	f040 809f 	bne.w	80036ee <Vital_Msg_extr+0x2da>
		{
			printf("Tx seq Roll over Detected\n");
 80035b0:	4864      	ldr	r0, [pc, #400]	; (8003744 <Vital_Msg_extr+0x330>)
 80035b2:	f023 fae3 	bl	8026b7c <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f023 f958 	bl	8026874 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80035c4:	78bb      	ldrb	r3, [r7, #2]
 80035c6:	4a5c      	ldr	r2, [pc, #368]	; (8003738 <Vital_Msg_extr+0x324>)
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4413      	add	r3, r2
 80035cc:	3308      	adds	r3, #8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	f107 020c 	add.w	r2, r7, #12
 80035d6:	2118      	movs	r1, #24
 80035d8:	2000      	movs	r0, #0
 80035da:	f7fd f8a7 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80035e4:	e010      	b.n	8003608 <Vital_Msg_extr+0x1f4>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80035e6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	441a      	add	r2, r3
 80035ee:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035f2:	3303      	adds	r3, #3
 80035f4:	7812      	ldrb	r2, [r2, #0]
 80035f6:	33a8      	adds	r3, #168	; 0xa8
 80035f8:	443b      	add	r3, r7
 80035fa:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035fe:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003602:	3301      	adds	r3, #1
 8003604:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8003608:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	3b05      	subs	r3, #5
 8003610:	429a      	cmp	r2, r3
 8003612:	dbe8      	blt.n	80035e6 <Vital_Msg_extr+0x1d2>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8003614:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003618:	b29b      	uxth	r3, r3
 800361a:	3303      	adds	r3, #3
 800361c:	b29a      	uxth	r2, r3
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f012 fc77 	bl	8015f18 <CalculateDirectReverseCrc>
 800362a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	3b05      	subs	r3, #5
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	441a      	add	r2, r3
 8003636:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800363a:	2120      	movs	r1, #32
 800363c:	4618      	mov	r0, r3
 800363e:	f7fc ffe9 	bl	8000614 <ExtractBits>
 8003642:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			if(Calc_CRC == Recv_CRC)
 8003646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800364a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800364e:	429a      	cmp	r2, r3
 8003650:	d137      	bne.n	80036c2 <Vital_Msg_extr+0x2ae>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8003652:	483d      	ldr	r0, [pc, #244]	; (8003748 <Vital_Msg_extr+0x334>)
 8003654:	f023 fa92 	bl	8026b7c <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8003658:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800365c:	483b      	ldr	r0, [pc, #236]	; (800374c <Vital_Msg_extr+0x338>)
 800365e:	f023 f9f1 	bl	8026a44 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8003662:	78bb      	ldrb	r3, [r7, #2]
 8003664:	4a34      	ldr	r2, [pc, #208]	; (8003738 <Vital_Msg_extr+0x324>)
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4413      	add	r3, r2
 800366a:	3308      	adds	r3, #8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4619      	mov	r1, r3
 8003670:	4837      	ldr	r0, [pc, #220]	; (8003750 <Vital_Msg_extr+0x33c>)
 8003672:	f023 f9e7 	bl	8026a44 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8003676:	78bb      	ldrb	r3, [r7, #2]
 8003678:	492f      	ldr	r1, [pc, #188]	; (8003738 <Vital_Msg_extr+0x324>)
 800367a:	011a      	lsls	r2, r3, #4
 800367c:	440a      	add	r2, r1
 800367e:	3208      	adds	r2, #8
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	3201      	adds	r2, #1
 8003684:	492c      	ldr	r1, [pc, #176]	; (8003738 <Vital_Msg_extr+0x324>)
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	440b      	add	r3, r1
 800368a:	3308      	adds	r3, #8
 800368c:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800368e:	78bb      	ldrb	r3, [r7, #2]
 8003690:	4a29      	ldr	r2, [pc, #164]	; (8003738 <Vital_Msg_extr+0x324>)
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4413      	add	r3, r2
 8003696:	3308      	adds	r3, #8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4619      	mov	r1, r3
 800369c:	482d      	ldr	r0, [pc, #180]	; (8003754 <Vital_Msg_extr+0x340>)
 800369e:	f023 f9d1 	bl	8026a44 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80036a2:	78bb      	ldrb	r3, [r7, #2]
 80036a4:	78ba      	ldrb	r2, [r7, #2]
 80036a6:	4924      	ldr	r1, [pc, #144]	; (8003738 <Vital_Msg_extr+0x324>)
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	440b      	add	r3, r1
 80036ac:	3308      	adds	r3, #8
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	4829      	ldr	r0, [pc, #164]	; (8003758 <Vital_Msg_extr+0x344>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4403      	add	r3, r0
 80036bc:	3308      	adds	r3, #8
 80036be:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 80036c0:	e057      	b.n	8003772 <Vital_Msg_extr+0x35e>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80036c2:	78bb      	ldrb	r3, [r7, #2]
 80036c4:	4a25      	ldr	r2, [pc, #148]	; (800375c <Vital_Msg_extr+0x348>)
 80036c6:	3366      	adds	r3, #102	; 0x66
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4619      	mov	r1, r3
 80036d0:	4823      	ldr	r0, [pc, #140]	; (8003760 <Vital_Msg_extr+0x34c>)
 80036d2:	f023 f9b7 	bl	8026a44 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80036d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80036da:	4822      	ldr	r0, [pc, #136]	; (8003764 <Vital_Msg_extr+0x350>)
 80036dc:	f023 f9b2 	bl	8026a44 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80036e0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80036e4:	4820      	ldr	r0, [pc, #128]	; (8003768 <Vital_Msg_extr+0x354>)
 80036e6:	f023 f9ad 	bl	8026a44 <iprintf>
				return;
 80036ea:	f000 bf7a 	b.w	80045e2 <Vital_Msg_extr+0x11ce>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80036ee:	78bb      	ldrb	r3, [r7, #2]
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <Vital_Msg_extr+0x348>)
 80036f2:	3366      	adds	r3, #102	; 0x66
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4619      	mov	r1, r3
 80036fc:	481b      	ldr	r0, [pc, #108]	; (800376c <Vital_Msg_extr+0x358>)
 80036fe:	f023 f9a1 	bl	8026a44 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8003702:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003706:	4817      	ldr	r0, [pc, #92]	; (8003764 <Vital_Msg_extr+0x350>)
 8003708:	f023 f99c 	bl	8026a44 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 800370c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003710:	4815      	ldr	r0, [pc, #84]	; (8003768 <Vital_Msg_extr+0x354>)
 8003712:	f023 f997 	bl	8026a44 <iprintf>
			return;
 8003716:	f000 bf64 	b.w	80045e2 <Vital_Msg_extr+0x11ce>
		goto ROLLOVER_VITAL;
 800371a:	bf00      	nop
 800371c:	e029      	b.n	8003772 <Vital_Msg_extr+0x35e>
 800371e:	bf00      	nop
 8003720:	08028554 	.word	0x08028554
 8003724:	20000505 	.word	0x20000505
 8003728:	2000308c 	.word	0x2000308c
 800372c:	2000bcec 	.word	0x2000bcec
 8003730:	80008001 	.word	0x80008001
 8003734:	08028a58 	.word	0x08028a58
 8003738:	200028f4 	.word	0x200028f4
 800373c:	08028a78 	.word	0x08028a78
 8003740:	08028aa0 	.word	0x08028aa0
 8003744:	08028ac8 	.word	0x08028ac8
 8003748:	08028ae4 	.word	0x08028ae4
 800374c:	08028afc 	.word	0x08028afc
 8003750:	08028b1c 	.word	0x08028b1c
 8003754:	08028b3c 	.word	0x08028b3c
 8003758:	20002da4 	.word	0x20002da4
 800375c:	20000504 	.word	0x20000504
 8003760:	08028b68 	.word	0x08028b68
 8003764:	08028798 	.word	0x08028798
 8003768:	080287a8 	.word	0x080287a8
 800376c:	08028b88 	.word	0x08028b88
		}
	}

	ROLLOVER_VITAL:
 8003770:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003772:	78bb      	ldrb	r3, [r7, #2]
 8003774:	49c4      	ldr	r1, [pc, #784]	; (8003a88 <Vital_Msg_extr+0x674>)
 8003776:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800377e:	78bb      	ldrb	r3, [r7, #2]
 8003780:	49c2      	ldr	r1, [pc, #776]	; (8003a8c <Vital_Msg_extr+0x678>)
 8003782:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 800378a:	78bb      	ldrb	r3, [r7, #2]
 800378c:	4ac0      	ldr	r2, [pc, #768]	; (8003a90 <Vital_Msg_extr+0x67c>)
 800378e:	2101      	movs	r1, #1
 8003790:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 8003792:	78ba      	ldrb	r2, [r7, #2]
 8003794:	4613      	mov	r3, r2
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	4413      	add	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4abd      	ldr	r2, [pc, #756]	; (8003a94 <Vital_Msg_extr+0x680>)
 800379e:	4413      	add	r3, r2
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f023 f865 	bl	8026874 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 80037aa:	78ba      	ldrb	r2, [r7, #2]
 80037ac:	4613      	mov	r3, r2
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	4413      	add	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4ab7      	ldr	r2, [pc, #732]	; (8003a94 <Vital_Msg_extr+0x680>)
 80037b6:	4413      	add	r3, r2
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4618      	mov	r0, r3
 80037be:	f023 f831 	bl	8026824 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 80037c2:	78ba      	ldrb	r2, [r7, #2]
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	b298      	uxth	r0, r3
 80037c8:	49b2      	ldr	r1, [pc, #712]	; (8003a94 <Vital_Msg_extr+0x680>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	015b      	lsls	r3, r3, #5
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	3340      	adds	r3, #64	; 0x40
 80037d6:	4602      	mov	r2, r0
 80037d8:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80037da:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80037de:	3308      	adds	r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da00      	bge.n	80037e6 <Vital_Msg_extr+0x3d2>
 80037e4:	3307      	adds	r3, #7
 80037e6:	10db      	asrs	r3, r3, #3
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037ee:	4413      	add	r3, r2
 80037f0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80037f4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037f8:	3308      	adds	r3, #8
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	425a      	negs	r2, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	f002 0207 	and.w	r2, r2, #7
 8003808:	bf58      	it	pl
 800380a:	4253      	negpl	r3, r2
 800380c:	b21b      	sxth	r3, r3
 800380e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003812:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	441a      	add	r2, r3
 800381a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800381e:	2110      	movs	r1, #16
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fef7 	bl	8000614 <ExtractBits>
 8003826:	4603      	mov	r3, r0
 8003828:	78ba      	ldrb	r2, [r7, #2]
 800382a:	b298      	uxth	r0, r3
 800382c:	499a      	ldr	r1, [pc, #616]	; (8003a98 <Vital_Msg_extr+0x684>)
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	440b      	add	r3, r1
 8003838:	3328      	adds	r3, #40	; 0x28
 800383a:	4602      	mov	r2, r0
 800383c:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800383e:	78ba      	ldrb	r2, [r7, #2]
 8003840:	4995      	ldr	r1, [pc, #596]	; (8003a98 <Vital_Msg_extr+0x684>)
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	440b      	add	r3, r1
 800384c:	3328      	adds	r3, #40	; 0x28
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	4892      	ldr	r0, [pc, #584]	; (8003a9c <Vital_Msg_extr+0x688>)
 8003854:	f023 f8f6 	bl	8026a44 <iprintf>
	BITSTUFFINC(16);
 8003858:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800385c:	3310      	adds	r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	da00      	bge.n	8003864 <Vital_Msg_extr+0x450>
 8003862:	3307      	adds	r3, #7
 8003864:	10db      	asrs	r3, r3, #3
 8003866:	b29a      	uxth	r2, r3
 8003868:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800386c:	4413      	add	r3, r2
 800386e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003872:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003876:	3310      	adds	r3, #16
 8003878:	b29b      	uxth	r3, r3
 800387a:	b21b      	sxth	r3, r3
 800387c:	425a      	negs	r2, r3
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	f002 0207 	and.w	r2, r2, #7
 8003886:	bf58      	it	pl
 8003888:	4253      	negpl	r3, r2
 800388a:	b21b      	sxth	r3, r3
 800388c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003890:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	441a      	add	r2, r3
 8003898:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800389c:	2110      	movs	r1, #16
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fc feb8 	bl	8000614 <ExtractBits>
 80038a4:	4603      	mov	r3, r0
 80038a6:	78ba      	ldrb	r2, [r7, #2]
 80038a8:	b298      	uxth	r0, r3
 80038aa:	497b      	ldr	r1, [pc, #492]	; (8003a98 <Vital_Msg_extr+0x684>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	440b      	add	r3, r1
 80038b6:	3326      	adds	r3, #38	; 0x26
 80038b8:	4602      	mov	r2, r0
 80038ba:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 80038bc:	78ba      	ldrb	r2, [r7, #2]
 80038be:	4976      	ldr	r1, [pc, #472]	; (8003a98 <Vital_Msg_extr+0x684>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	440b      	add	r3, r1
 80038ca:	3326      	adds	r3, #38	; 0x26
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	4619      	mov	r1, r3
 80038d0:	4873      	ldr	r0, [pc, #460]	; (8003aa0 <Vital_Msg_extr+0x68c>)
 80038d2:	f023 f8b7 	bl	8026a44 <iprintf>
	BITSTUFFINC(16);
 80038d6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80038da:	3310      	adds	r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da00      	bge.n	80038e2 <Vital_Msg_extr+0x4ce>
 80038e0:	3307      	adds	r3, #7
 80038e2:	10db      	asrs	r3, r3, #3
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80038ea:	4413      	add	r3, r2
 80038ec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80038f0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80038f4:	3310      	adds	r3, #16
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	425a      	negs	r2, r3
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	f002 0207 	and.w	r2, r2, #7
 8003904:	bf58      	it	pl
 8003906:	4253      	negpl	r3, r2
 8003908:	b21b      	sxth	r3, r3
 800390a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800390e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	441a      	add	r2, r3
 8003916:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800391a:	2108      	movs	r1, #8
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fe79 	bl	8000614 <ExtractBits>
 8003922:	4602      	mov	r2, r0
 8003924:	78bb      	ldrb	r3, [r7, #2]
 8003926:	b2d1      	uxtb	r1, r2
 8003928:	4a5e      	ldr	r2, [pc, #376]	; (8003aa4 <Vital_Msg_extr+0x690>)
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	4413      	add	r3, r2
 800392e:	3302      	adds	r3, #2
 8003930:	460a      	mov	r2, r1
 8003932:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003934:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003938:	3308      	adds	r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	da00      	bge.n	8003940 <Vital_Msg_extr+0x52c>
 800393e:	3307      	adds	r3, #7
 8003940:	10db      	asrs	r3, r3, #3
 8003942:	b29a      	uxth	r2, r3
 8003944:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003948:	4413      	add	r3, r2
 800394a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800394e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003952:	3308      	adds	r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	b21b      	sxth	r3, r3
 8003958:	425a      	negs	r2, r3
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	f002 0207 	and.w	r2, r2, #7
 8003962:	bf58      	it	pl
 8003964:	4253      	negpl	r3, r2
 8003966:	b21b      	sxth	r3, r3
 8003968:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800396c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	441a      	add	r2, r3
 8003974:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003978:	2108      	movs	r1, #8
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fe4a 	bl	8000614 <ExtractBits>
 8003980:	4602      	mov	r2, r0
 8003982:	78bb      	ldrb	r3, [r7, #2]
 8003984:	b2d1      	uxtb	r1, r2
 8003986:	4a47      	ldr	r2, [pc, #284]	; (8003aa4 <Vital_Msg_extr+0x690>)
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4413      	add	r3, r2
 800398c:	3301      	adds	r3, #1
 800398e:	460a      	mov	r2, r1
 8003990:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8003992:	78bb      	ldrb	r3, [r7, #2]
 8003994:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <Vital_Msg_extr+0x690>)
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	4413      	add	r3, r2
 800399a:	3301      	adds	r3, #1
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d138      	bne.n	8003a14 <Vital_Msg_extr+0x600>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80039a2:	78bb      	ldrb	r3, [r7, #2]
 80039a4:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <Vital_Msg_extr+0x694>)
 80039a6:	3366      	adds	r3, #102	; 0x66
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4619      	mov	r1, r3
 80039b0:	483e      	ldr	r0, [pc, #248]	; (8003aac <Vital_Msg_extr+0x698>)
 80039b2:	f023 f847 	bl	8026a44 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80039b6:	78bb      	ldrb	r3, [r7, #2]
 80039b8:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	4413      	add	r3, r2
 80039be:	330c      	adds	r3, #12
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4619      	mov	r1, r3
 80039c4:	483a      	ldr	r0, [pc, #232]	; (8003ab0 <Vital_Msg_extr+0x69c>)
 80039c6:	f023 f83d 	bl	8026a44 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039ca:	78bb      	ldrb	r3, [r7, #2]
 80039cc:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039ce:	011a      	lsls	r2, r3, #4
 80039d0:	440a      	add	r2, r1
 80039d2:	320c      	adds	r2, #12
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	3201      	adds	r2, #1
 80039d8:	4932      	ldr	r1, [pc, #200]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	440b      	add	r3, r1
 80039de:	330c      	adds	r3, #12
 80039e0:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80039e2:	78bb      	ldrb	r3, [r7, #2]
 80039e4:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	4413      	add	r3, r2
 80039ea:	330c      	adds	r3, #12
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4619      	mov	r1, r3
 80039f0:	4830      	ldr	r0, [pc, #192]	; (8003ab4 <Vital_Msg_extr+0x6a0>)
 80039f2:	f023 f827 	bl	8026a44 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039f6:	78bb      	ldrb	r3, [r7, #2]
 80039f8:	78ba      	ldrb	r2, [r7, #2]
 80039fa:	492a      	ldr	r1, [pc, #168]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	440b      	add	r3, r1
 8003a00:	330c      	adds	r3, #12
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	482c      	ldr	r0, [pc, #176]	; (8003ab8 <Vital_Msg_extr+0x6a4>)
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4403      	add	r3, r0
 8003a10:	330c      	adds	r3, #12
 8003a12:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8003a14:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003a18:	3308      	adds	r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da00      	bge.n	8003a20 <Vital_Msg_extr+0x60c>
 8003a1e:	3307      	adds	r3, #7
 8003a20:	10db      	asrs	r3, r3, #3
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a28:	4413      	add	r3, r2
 8003a2a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003a2e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a32:	3308      	adds	r3, #8
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	425a      	negs	r2, r3
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	f002 0207 	and.w	r2, r2, #7
 8003a42:	bf58      	it	pl
 8003a44:	4253      	negpl	r3, r2
 8003a46:	b21b      	sxth	r3, r3
 8003a48:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003a4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	441a      	add	r2, r3
 8003a54:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a58:	2108      	movs	r1, #8
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fdda 	bl	8000614 <ExtractBits>
 8003a60:	4603      	mov	r3, r0
 8003a62:	78ba      	ldrb	r2, [r7, #2]
 8003a64:	b2d8      	uxtb	r0, r3
 8003a66:	490c      	ldr	r1, [pc, #48]	; (8003a98 <Vital_Msg_extr+0x684>)
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	440b      	add	r3, r1
 8003a72:	3302      	adds	r3, #2
 8003a74:	4602      	mov	r2, r0
 8003a76:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003a78:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da1c      	bge.n	8003abc <Vital_Msg_extr+0x6a8>
 8003a82:	3307      	adds	r3, #7
 8003a84:	e01a      	b.n	8003abc <Vital_Msg_extr+0x6a8>
 8003a86:	bf00      	nop
 8003a88:	20002630 	.word	0x20002630
 8003a8c:	20002658 	.word	0x20002658
 8003a90:	200026a4 	.word	0x200026a4
 8003a94:	200030ac 	.word	0x200030ac
 8003a98:	20002ad4 	.word	0x20002ad4
 8003a9c:	08028888 	.word	0x08028888
 8003aa0:	08028890 	.word	0x08028890
 8003aa4:	200028f4 	.word	0x200028f4
 8003aa8:	20000504 	.word	0x20000504
 8003aac:	08028b9c 	.word	0x08028b9c
 8003ab0:	08028be0 	.word	0x08028be0
 8003ab4:	08028bf0 	.word	0x08028bf0
 8003ab8:	20002da4 	.word	0x20002da4
 8003abc:	10db      	asrs	r3, r3, #3
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003aca:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ace:	3308      	adds	r3, #8
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	425a      	negs	r2, r3
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	f002 0207 	and.w	r2, r2, #7
 8003ade:	bf58      	it	pl
 8003ae0:	4253      	negpl	r3, r2
 8003ae2:	b21b      	sxth	r3, r3
 8003ae4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003ae8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	441a      	add	r2, r3
 8003af0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003af4:	2110      	movs	r1, #16
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd8c 	bl	8000614 <ExtractBits>
 8003afc:	4602      	mov	r2, r0
 8003afe:	78bb      	ldrb	r3, [r7, #2]
 8003b00:	b291      	uxth	r1, r2
 8003b02:	4abd      	ldr	r2, [pc, #756]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	460a      	mov	r2, r1
 8003b0c:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003b0e:	49bb      	ldr	r1, [pc, #748]	; (8003dfc <Vital_Msg_extr+0x9e8>)
 8003b10:	48bb      	ldr	r0, [pc, #748]	; (8003e00 <Vital_Msg_extr+0x9ec>)
 8003b12:	f7fc fb95 	bl	8000240 <strcmp>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10f      	bne.n	8003b3c <Vital_Msg_extr+0x728>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8003b1c:	78bb      	ldrb	r3, [r7, #2]
 8003b1e:	4ab6      	ldr	r2, [pc, #728]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	78bb      	ldrb	r3, [r7, #2]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	b291      	uxth	r1, r2
 8003b30:	4ab1      	ldr	r2, [pc, #708]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	460a      	mov	r2, r1
 8003b3a:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003b3c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003b40:	3310      	adds	r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da00      	bge.n	8003b48 <Vital_Msg_extr+0x734>
 8003b46:	3307      	adds	r3, #7
 8003b48:	10db      	asrs	r3, r3, #3
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b50:	4413      	add	r3, r2
 8003b52:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003b56:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b5a:	3310      	adds	r3, #16
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	b21b      	sxth	r3, r3
 8003b60:	425a      	negs	r2, r3
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	f002 0207 	and.w	r2, r2, #7
 8003b6a:	bf58      	it	pl
 8003b6c:	4253      	negpl	r3, r2
 8003b6e:	b21b      	sxth	r3, r3
 8003b70:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003b74:	78bb      	ldrb	r3, [r7, #2]
 8003b76:	4aa0      	ldr	r2, [pc, #640]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8145 	beq.w	8003e14 <Vital_Msg_extr+0xa00>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003b8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	441a      	add	r2, r3
 8003b92:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b96:	2108      	movs	r1, #8
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fc fd3b 	bl	8000614 <ExtractBits>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	78ba      	ldrb	r2, [r7, #2]
 8003ba2:	b2d8      	uxtb	r0, r3
 8003ba4:	4997      	ldr	r1, [pc, #604]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	440b      	add	r3, r1
 8003bb0:	3305      	adds	r3, #5
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003bb6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da00      	bge.n	8003bc2 <Vital_Msg_extr+0x7ae>
 8003bc0:	3307      	adds	r3, #7
 8003bc2:	10db      	asrs	r3, r3, #3
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bca:	4413      	add	r3, r2
 8003bcc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003bd0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	b21b      	sxth	r3, r3
 8003bda:	425a      	negs	r2, r3
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	f002 0207 	and.w	r2, r2, #7
 8003be4:	bf58      	it	pl
 8003be6:	4253      	negpl	r3, r2
 8003be8:	b21b      	sxth	r3, r3
 8003bea:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003bee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	441a      	add	r2, r3
 8003bf6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bfa:	2108      	movs	r1, #8
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc fd09 	bl	8000614 <ExtractBits>
 8003c02:	4603      	mov	r3, r0
 8003c04:	78ba      	ldrb	r2, [r7, #2]
 8003c06:	b2d8      	uxtb	r0, r3
 8003c08:	497e      	ldr	r1, [pc, #504]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	440b      	add	r3, r1
 8003c14:	3304      	adds	r3, #4
 8003c16:	4602      	mov	r2, r0
 8003c18:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8003c1a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003c1e:	3308      	adds	r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	da00      	bge.n	8003c26 <Vital_Msg_extr+0x812>
 8003c24:	3307      	adds	r3, #7
 8003c26:	10db      	asrs	r3, r3, #3
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c2e:	4413      	add	r3, r2
 8003c30:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c34:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c38:	3308      	adds	r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	425a      	negs	r2, r3
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	f002 0207 	and.w	r2, r2, #7
 8003c48:	bf58      	it	pl
 8003c4a:	4253      	negpl	r3, r2
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003c52:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	441a      	add	r2, r3
 8003c5a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c5e:	2108      	movs	r1, #8
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fcd7 	bl	8000614 <ExtractBits>
 8003c66:	4603      	mov	r3, r0
 8003c68:	78ba      	ldrb	r2, [r7, #2]
 8003c6a:	b2d8      	uxtb	r0, r3
 8003c6c:	4965      	ldr	r1, [pc, #404]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003c6e:	4613      	mov	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4413      	add	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	440b      	add	r3, r1
 8003c78:	3303      	adds	r3, #3
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8003c7e:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003c82:	3308      	adds	r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	da00      	bge.n	8003c8a <Vital_Msg_extr+0x876>
 8003c88:	3307      	adds	r3, #7
 8003c8a:	10db      	asrs	r3, r3, #3
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c92:	4413      	add	r3, r2
 8003c94:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c98:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	425a      	negs	r2, r3
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	f002 0207 	and.w	r2, r2, #7
 8003cac:	bf58      	it	pl
 8003cae:	4253      	negpl	r3, r2
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003cb6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	441a      	add	r2, r3
 8003cbe:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003cc2:	2108      	movs	r1, #8
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fca5 	bl	8000614 <ExtractBits>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	78ba      	ldrb	r2, [r7, #2]
 8003cce:	b2d8      	uxtb	r0, r3
 8003cd0:	494c      	ldr	r1, [pc, #304]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	440b      	add	r3, r1
 8003cdc:	4602      	mov	r2, r0
 8003cde:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8003ce0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da00      	bge.n	8003cec <Vital_Msg_extr+0x8d8>
 8003cea:	3307      	adds	r3, #7
 8003cec:	10db      	asrs	r3, r3, #3
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003cfa:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003cfe:	3308      	adds	r3, #8
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	425a      	negs	r2, r3
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	f002 0207 	and.w	r2, r2, #7
 8003d0e:	bf58      	it	pl
 8003d10:	4253      	negpl	r3, r2
 8003d12:	b21b      	sxth	r3, r3
 8003d14:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003d18:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	441a      	add	r2, r3
 8003d20:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d24:	2108      	movs	r1, #8
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fc74 	bl	8000614 <ExtractBits>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	78ba      	ldrb	r2, [r7, #2]
 8003d30:	b2d8      	uxtb	r0, r3
 8003d32:	4934      	ldr	r1, [pc, #208]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3301      	adds	r3, #1
 8003d40:	4602      	mov	r2, r0
 8003d42:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003d44:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003d48:	3308      	adds	r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da00      	bge.n	8003d50 <Vital_Msg_extr+0x93c>
 8003d4e:	3307      	adds	r3, #7
 8003d50:	10db      	asrs	r3, r3, #3
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d58:	4413      	add	r3, r2
 8003d5a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003d5e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d62:	3308      	adds	r3, #8
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	425a      	negs	r2, r3
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	f002 0207 	and.w	r2, r2, #7
 8003d72:	bf58      	it	pl
 8003d74:	4253      	negpl	r3, r2
 8003d76:	b21b      	sxth	r3, r3
 8003d78:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003d7c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	441a      	add	r2, r3
 8003d84:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d88:	2108      	movs	r1, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fc42 	bl	8000614 <ExtractBits>
 8003d90:	4603      	mov	r3, r0
 8003d92:	78ba      	ldrb	r2, [r7, #2]
 8003d94:	b2d8      	uxtb	r0, r3
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	440b      	add	r3, r1
 8003da2:	3302      	adds	r3, #2
 8003da4:	4602      	mov	r2, r0
 8003da6:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003da8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003dac:	3308      	adds	r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da00      	bge.n	8003db4 <Vital_Msg_extr+0x9a0>
 8003db2:	3307      	adds	r3, #7
 8003db4:	10db      	asrs	r3, r3, #3
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003dc2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	425a      	negs	r2, r3
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	f002 0207 	and.w	r2, r2, #7
 8003dd6:	bf58      	it	pl
 8003dd8:	4253      	negpl	r3, r2
 8003dda:	b21b      	sxth	r3, r3
 8003ddc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8003de0:	78bb      	ldrb	r3, [r7, #2]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 fd90 	bl	8009908 <IS_MLK_EIPC_TIME_MATCHING>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00e      	beq.n	8003e0c <Vital_Msg_extr+0x9f8>
 8003dee:	78bb      	ldrb	r3, [r7, #2]
 8003df0:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <Vital_Msg_extr+0x9f4>)
 8003df2:	2100      	movs	r1, #0
 8003df4:	54d1      	strb	r1, [r2, r3]
 8003df6:	e00d      	b.n	8003e14 <Vital_Msg_extr+0xa00>
 8003df8:	200028f4 	.word	0x200028f4
 8003dfc:	08028554 	.word	0x08028554
 8003e00:	20000505 	.word	0x20000505
 8003e04:	200028b8 	.word	0x200028b8
 8003e08:	20002764 	.word	0x20002764
 8003e0c:	78bb      	ldrb	r3, [r7, #2]
 8003e0e:	4a91      	ldr	r2, [pc, #580]	; (8004054 <Vital_Msg_extr+0xc40>)
 8003e10:	2101      	movs	r1, #1
 8003e12:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8003e14:	78bb      	ldrb	r3, [r7, #2]
 8003e16:	4a90      	ldr	r2, [pc, #576]	; (8004058 <Vital_Msg_extr+0xc44>)
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <Vital_Msg_extr+0xa1a>
	{
		LinkEstablishFlag = SET;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003e2e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	441a      	add	r2, r3
 8003e36:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fc fbe9 	bl	8000614 <ExtractBits>
 8003e42:	4603      	mov	r3, r0
 8003e44:	78ba      	ldrb	r2, [r7, #2]
 8003e46:	b2d8      	uxtb	r0, r3
 8003e48:	4984      	ldr	r1, [pc, #528]	; (800405c <Vital_Msg_extr+0xc48>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	440b      	add	r3, r1
 8003e54:	3303      	adds	r3, #3
 8003e56:	4602      	mov	r2, r0
 8003e58:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003e5a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003e5e:	3308      	adds	r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	da00      	bge.n	8003e66 <Vital_Msg_extr+0xa52>
 8003e64:	3307      	adds	r3, #7
 8003e66:	10db      	asrs	r3, r3, #3
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e6e:	4413      	add	r3, r2
 8003e70:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003e74:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e78:	3308      	adds	r3, #8
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	425a      	negs	r2, r3
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	f002 0207 	and.w	r2, r2, #7
 8003e88:	bf58      	it	pl
 8003e8a:	4253      	negpl	r3, r2
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 8003e92:	78ba      	ldrb	r2, [r7, #2]
 8003e94:	4971      	ldr	r1, [pc, #452]	; (800405c <Vital_Msg_extr+0xc48>)
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3303      	adds	r3, #3
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	486e      	ldr	r0, [pc, #440]	; (8004060 <Vital_Msg_extr+0xc4c>)
 8003ea8:	f022 fdcc 	bl	8026a44 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003eac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	441a      	add	r2, r3
 8003eb4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003eb8:	2108      	movs	r1, #8
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fbaa 	bl	8000614 <ExtractBits>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	78ba      	ldrb	r2, [r7, #2]
 8003ec4:	b2d8      	uxtb	r0, r3
 8003ec6:	4965      	ldr	r1, [pc, #404]	; (800405c <Vital_Msg_extr+0xc48>)
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003ed8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003edc:	3308      	adds	r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da00      	bge.n	8003ee4 <Vital_Msg_extr+0xad0>
 8003ee2:	3307      	adds	r3, #7
 8003ee4:	10db      	asrs	r3, r3, #3
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003eec:	4413      	add	r3, r2
 8003eee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003ef2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	425a      	negs	r2, r3
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	f002 0207 	and.w	r2, r2, #7
 8003f06:	bf58      	it	pl
 8003f08:	4253      	negpl	r3, r2
 8003f0a:	b21b      	sxth	r3, r3
 8003f0c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 8003f10:	78ba      	ldrb	r2, [r7, #2]
 8003f12:	4952      	ldr	r1, [pc, #328]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3303      	adds	r3, #3
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (noofIP != 0)
 8003f2a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <Vital_Msg_extr+0xb3c>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 8003f32:	78ba      	ldrb	r2, [r7, #2]
 8003f34:	4949      	ldr	r1, [pc, #292]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	440b      	add	r3, r1
 8003f40:	3303      	adds	r3, #3
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003f4e:	e00b      	b.n	8003f68 <Vital_Msg_extr+0xb54>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003f50:	78ba      	ldrb	r2, [r7, #2]
 8003f52:	4942      	ldr	r1, [pc, #264]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3303      	adds	r3, #3
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	08db      	lsrs	r3, r3, #3
 8003f64:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003f6e:	e04c      	b.n	800400a <Vital_Msg_extr+0xbf6>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003f70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	441a      	add	r2, r3
 8003f78:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003f7c:	2108      	movs	r1, #8
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc fb48 	bl	8000614 <ExtractBits>
 8003f84:	4603      	mov	r3, r0
 8003f86:	78ba      	ldrb	r2, [r7, #2]
 8003f88:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003f8c:	b2dc      	uxtb	r4, r3
 8003f8e:	4833      	ldr	r0, [pc, #204]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4403      	add	r3, r0
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3305      	adds	r3, #5
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 8003fa2:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 8003fa6:	78ba      	ldrb	r2, [r7, #2]
 8003fa8:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003fac:	4c2b      	ldr	r4, [pc, #172]	; (800405c <Vital_Msg_extr+0xc48>)
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	4423      	add	r3, r4
 8003fb8:	440b      	add	r3, r1
 8003fba:	3305      	adds	r3, #5
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	4828      	ldr	r0, [pc, #160]	; (8004064 <Vital_Msg_extr+0xc50>)
 8003fc4:	f022 fd3e 	bl	8026a44 <iprintf>
		BITSTUFFINC(8);
 8003fc8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003fcc:	3308      	adds	r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da00      	bge.n	8003fd4 <Vital_Msg_extr+0xbc0>
 8003fd2:	3307      	adds	r3, #7
 8003fd4:	10db      	asrs	r3, r3, #3
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003fdc:	4413      	add	r3, r2
 8003fde:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003fe2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	425a      	negs	r2, r3
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	f002 0207 	and.w	r2, r2, #7
 8003ff6:	bf58      	it	pl
 8003ff8:	4253      	negpl	r3, r2
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004000:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004004:	3301      	adds	r3, #1
 8004006:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800400a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800400e:	b29b      	uxth	r3, r3
 8004010:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8004014:	429a      	cmp	r2, r3
 8004016:	d3ab      	bcc.n	8003f70 <Vital_Msg_extr+0xb5c>
	}
	printf("\n");
 8004018:	200a      	movs	r0, #10
 800401a:	f022 fd2b 	bl	8026a74 <putchar>
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 800401e:	78bb      	ldrb	r3, [r7, #2]
 8004020:	4a11      	ldr	r2, [pc, #68]	; (8004068 <Vital_Msg_extr+0xc54>)
 8004022:	4413      	add	r3, r2
 8004024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004028:	2b02      	cmp	r3, #2
 800402a:	d10e      	bne.n	800404a <Vital_Msg_extr+0xc36>
	{
		printf("Online Bit Status:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 800402c:	78ba      	ldrb	r2, [r7, #2]
 800402e:	490b      	ldr	r1, [pc, #44]	; (800405c <Vital_Msg_extr+0xc48>)
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	440b      	add	r3, r1
 800403a:	3305      	adds	r3, #5
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	4619      	mov	r1, r3
 8004044:	4809      	ldr	r0, [pc, #36]	; (800406c <Vital_Msg_extr+0xc58>)
 8004046:	f022 fcfd 	bl	8026a44 <iprintf>
	}

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 800404a:	2300      	movs	r3, #0
 800404c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8004050:	e048      	b.n	80040e4 <Vital_Msg_extr+0xcd0>
 8004052:	bf00      	nop
 8004054:	20002764 	.word	0x20002764
 8004058:	200028f4 	.word	0x200028f4
 800405c:	20002ad4 	.word	0x20002ad4
 8004060:	08028c00 	.word	0x08028c00
 8004064:	08028c08 	.word	0x08028c08
 8004068:	20000504 	.word	0x20000504
 800406c:	08028c18 	.word	0x08028c18
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004070:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	441a      	add	r2, r3
 8004078:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800407c:	2108      	movs	r1, #8
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fac8 	bl	8000614 <ExtractBits>
 8004084:	4603      	mov	r3, r0
 8004086:	78ba      	ldrb	r2, [r7, #2]
 8004088:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 800408c:	b2dc      	uxtb	r4, r3
 800408e:	486b      	ldr	r0, [pc, #428]	; (800423c <Vital_Msg_extr+0xe28>)
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	4403      	add	r3, r0
 800409a:	440b      	add	r3, r1
 800409c:	3315      	adds	r3, #21
 800409e:	4622      	mov	r2, r4
 80040a0:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80040a2:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80040a6:	3308      	adds	r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	da00      	bge.n	80040ae <Vital_Msg_extr+0xc9a>
 80040ac:	3307      	adds	r3, #7
 80040ae:	10db      	asrs	r3, r3, #3
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80040b6:	4413      	add	r3, r2
 80040b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80040bc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80040c0:	3308      	adds	r3, #8
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	b21b      	sxth	r3, r3
 80040c6:	425a      	negs	r2, r3
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	f002 0207 	and.w	r2, r2, #7
 80040d0:	bf58      	it	pl
 80040d2:	4253      	negpl	r3, r2
 80040d4:	b21b      	sxth	r3, r3
 80040d6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80040da:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80040de:	3301      	adds	r3, #1
 80040e0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80040e4:	78ba      	ldrb	r2, [r7, #2]
 80040e6:	4955      	ldr	r1, [pc, #340]	; (800423c <Vital_Msg_extr+0xe28>)
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	440b      	add	r3, r1
 80040f2:	3304      	adds	r3, #4
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d3b7      	bcc.n	8004070 <Vital_Msg_extr+0xc5c>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8004100:	787a      	ldrb	r2, [r7, #1]
 8004102:	78bb      	ldrb	r3, [r7, #2]
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f003 fc0e 	bl	8007928 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 800410c:	78bb      	ldrb	r3, [r7, #2]
 800410e:	4a4c      	ldr	r2, [pc, #304]	; (8004240 <Vital_Msg_extr+0xe2c>)
 8004110:	2101      	movs	r1, #1
 8004112:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 8004114:	78bb      	ldrb	r3, [r7, #2]
 8004116:	4a4a      	ldr	r2, [pc, #296]	; (8004240 <Vital_Msg_extr+0xe2c>)
 8004118:	3302      	adds	r3, #2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004122:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 8004124:	78ba      	ldrb	r2, [r7, #2]
 8004126:	4947      	ldr	r1, [pc, #284]	; (8004244 <Vital_Msg_extr+0xe30>)
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	440b      	add	r3, r1
 8004132:	3304      	adds	r3, #4
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d116      	bne.n	8004168 <Vital_Msg_extr+0xd54>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800413a:	2246      	movs	r2, #70	; 0x46
 800413c:	2100      	movs	r1, #0
 800413e:	4842      	ldr	r0, [pc, #264]	; (8004248 <Vital_Msg_extr+0xe34>)
 8004140:	f022 fb98 	bl	8026874 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 8004144:	78bb      	ldrb	r3, [r7, #2]
 8004146:	b29a      	uxth	r2, r3
 8004148:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <Vital_Msg_extr+0xe34>)
 800414a:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	b29a      	uxth	r2, r3
 8004150:	4b3d      	ldr	r3, [pc, #244]	; (8004248 <Vital_Msg_extr+0xe34>)
 8004152:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	461a      	mov	r2, r3
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	483c      	ldr	r0, [pc, #240]	; (800424c <Vital_Msg_extr+0xe38>)
 800415c:	f022 fb62 	bl	8026824 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 8004160:	f240 2003 	movw	r0, #515	; 0x203
 8004164:	f00c fefc 	bl	8010f60 <TransmitCanPkt>

	/* To check Whether the Data received is from Active system or Not By checking the 1st bit Vital Data
	 * This checking is Only required for Serial Interface
	 */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET))
 8004168:	78bb      	ldrb	r3, [r7, #2]
 800416a:	4a39      	ldr	r2, [pc, #228]	; (8004250 <Vital_Msg_extr+0xe3c>)
 800416c:	4413      	add	r3, r2
 800416e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004172:	2b02      	cmp	r3, #2
 8004174:	d128      	bne.n	80041c8 <Vital_Msg_extr+0xdb4>
 8004176:	78ba      	ldrb	r2, [r7, #2]
 8004178:	4930      	ldr	r1, [pc, #192]	; (800423c <Vital_Msg_extr+0xe28>)
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	440b      	add	r3, r1
 8004184:	3305      	adds	r3, #5
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11b      	bne.n	80041c8 <Vital_Msg_extr+0xdb4>
	{
		printf("Online Bit Drop\n");
 8004190:	4830      	ldr	r0, [pc, #192]	; (8004254 <Vital_Msg_extr+0xe40>)
 8004192:	f022 fcf3 	bl	8026b7c <puts>
		LinkEstablishFlag = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		Act_InactiveFlag[Source_Index] = SET;
 800419c:	78bb      	ldrb	r3, [r7, #2]
 800419e:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <Vital_Msg_extr+0xe44>)
 80041a0:	2101      	movs	r1, #1
 80041a2:	54d1      	strb	r1, [r2, r3]
		LastActCount[Source_Index] = RESET;
 80041a4:	78bb      	ldrb	r3, [r7, #2]
 80041a6:	4a2d      	ldr	r2, [pc, #180]	; (800425c <Vital_Msg_extr+0xe48>)
 80041a8:	2100      	movs	r1, #0
 80041aa:	54d1      	strb	r1, [r2, r3]
		memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 80041ac:	78ba      	ldrb	r2, [r7, #2]
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <Vital_Msg_extr+0xe28>)
 80041b8:	4413      	add	r3, r2
 80041ba:	3305      	adds	r3, #5
 80041bc:	2210      	movs	r2, #16
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f022 fb57 	bl	8026874 <memset>
 80041c6:	e05d      	b.n	8004284 <Vital_Msg_extr+0xe70>
	}
	else if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == SET) && (LinkEstablishFlag == SET))
 80041c8:	78bb      	ldrb	r3, [r7, #2]
 80041ca:	4a21      	ldr	r2, [pc, #132]	; (8004250 <Vital_Msg_extr+0xe3c>)
 80041cc:	4413      	add	r3, r2
 80041ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d156      	bne.n	8004284 <Vital_Msg_extr+0xe70>
 80041d6:	78ba      	ldrb	r2, [r7, #2]
 80041d8:	4918      	ldr	r1, [pc, #96]	; (800423c <Vital_Msg_extr+0xe28>)
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	440b      	add	r3, r1
 80041e4:	3305      	adds	r3, #5
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d049      	beq.n	8004284 <Vital_Msg_extr+0xe70>
 80041f0:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d145      	bne.n	8004284 <Vital_Msg_extr+0xe70>
	{
		if(Act_InactiveFlag[Source_Index] == SET)
 80041f8:	78bb      	ldrb	r3, [r7, #2]
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <Vital_Msg_extr+0xe44>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d140      	bne.n	8004284 <Vital_Msg_extr+0xe70>
		{
			++LastActCount[Source_Index];
 8004202:	78bb      	ldrb	r3, [r7, #2]
 8004204:	4a15      	ldr	r2, [pc, #84]	; (800425c <Vital_Msg_extr+0xe48>)
 8004206:	5cd2      	ldrb	r2, [r2, r3]
 8004208:	3201      	adds	r2, #1
 800420a:	b2d1      	uxtb	r1, r2
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <Vital_Msg_extr+0xe48>)
 800420e:	54d1      	strb	r1, [r2, r3]
			printf("Updated Count:%u\n",LastActCount[Source_Index]);
 8004210:	78bb      	ldrb	r3, [r7, #2]
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <Vital_Msg_extr+0xe48>)
 8004214:	5cd3      	ldrb	r3, [r2, r3]
 8004216:	4619      	mov	r1, r3
 8004218:	4811      	ldr	r0, [pc, #68]	; (8004260 <Vital_Msg_extr+0xe4c>)
 800421a:	f022 fc13 	bl	8026a44 <iprintf>
			if(LastActCount[Source_Index] >= MAX_LAST_ACT_COUNT)
 800421e:	78bb      	ldrb	r3, [r7, #2]
 8004220:	4a0e      	ldr	r2, [pc, #56]	; (800425c <Vital_Msg_extr+0xe48>)
 8004222:	5cd3      	ldrb	r3, [r2, r3]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d91d      	bls.n	8004264 <Vital_Msg_extr+0xe50>
			{
				Act_InactiveFlag[Source_Index] = RESET;
 8004228:	78bb      	ldrb	r3, [r7, #2]
 800422a:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <Vital_Msg_extr+0xe44>)
 800422c:	2100      	movs	r1, #0
 800422e:	54d1      	strb	r1, [r2, r3]
				LastActCount[Source_Index] = MAX_LAST_ACT_COUNT; /* To avoid Overflow of Variable */
 8004230:	78bb      	ldrb	r3, [r7, #2]
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <Vital_Msg_extr+0xe48>)
 8004234:	2104      	movs	r1, #4
 8004236:	54d1      	strb	r1, [r2, r3]
 8004238:	e024      	b.n	8004284 <Vital_Msg_extr+0xe70>
 800423a:	bf00      	nop
 800423c:	20002ad4 	.word	0x20002ad4
 8004240:	200033c4 	.word	0x200033c4
 8004244:	20002da4 	.word	0x20002da4
 8004248:	20002fb4 	.word	0x20002fb4
 800424c:	20002fba 	.word	0x20002fba
 8004250:	20000504 	.word	0x20000504
 8004254:	08028c30 	.word	0x08028c30
 8004258:	20002538 	.word	0x20002538
 800425c:	20002544 	.word	0x20002544
 8004260:	08028c40 	.word	0x08028c40
			}
			else
			{
				LinkEstablishFlag = RESET;
 8004264:	2300      	movs	r3, #0
 8004266:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 800426a:	78ba      	ldrb	r2, [r7, #2]
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4ab1      	ldr	r2, [pc, #708]	; (800453c <Vital_Msg_extr+0x1128>)
 8004276:	4413      	add	r3, r2
 8004278:	3305      	adds	r3, #5
 800427a:	2210      	movs	r2, #16
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f022 faf8 	bl	8026874 <memset>
		}
	}


	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8004284:	78ba      	ldrb	r2, [r7, #2]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4aac      	ldr	r2, [pc, #688]	; (8004540 <Vital_Msg_extr+0x112c>)
 8004290:	4413      	add	r3, r2
 8004292:	3301      	adds	r3, #1
 8004294:	2210      	movs	r2, #16
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f022 faeb 	bl	8026874 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 800429e:	78ba      	ldrb	r2, [r7, #2]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4aa5      	ldr	r2, [pc, #660]	; (8004540 <Vital_Msg_extr+0x112c>)
 80042aa:	4413      	add	r3, r2
 80042ac:	1c58      	adds	r0, r3, #1
 80042ae:	78ba      	ldrb	r2, [r7, #2]
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	4aa0      	ldr	r2, [pc, #640]	; (800453c <Vital_Msg_extr+0x1128>)
 80042ba:	4413      	add	r3, r2
 80042bc:	3305      	adds	r3, #5
 80042be:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042c2:	4619      	mov	r1, r3
 80042c4:	f022 faae 	bl	8026824 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 80042c8:	78ba      	ldrb	r2, [r7, #2]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4a9b      	ldr	r2, [pc, #620]	; (8004540 <Vital_Msg_extr+0x112c>)
 80042d4:	4413      	add	r3, r2
 80042d6:	3301      	adds	r3, #1
 80042d8:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042dc:	b212      	sxth	r2, r2
 80042de:	78bc      	ldrb	r4, [r7, #2]
 80042e0:	4619      	mov	r1, r3
 80042e2:	2000      	movs	r0, #0
 80042e4:	f011 fd5e 	bl	8015da4 <GetCRC16>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4619      	mov	r1, r3
 80042ec:	4a94      	ldr	r2, [pc, #592]	; (8004540 <Vital_Msg_extr+0x112c>)
 80042ee:	4623      	mov	r3, r4
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4423      	add	r3, r4
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	3312      	adds	r3, #18
 80042fa:	460a      	mov	r2, r1
 80042fc:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 80042fe:	78ba      	ldrb	r2, [r7, #2]
 8004300:	498f      	ldr	r1, [pc, #572]	; (8004540 <Vital_Msg_extr+0x112c>)
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3311      	adds	r3, #17
 800430e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8004312:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8004314:	78ba      	ldrb	r2, [r7, #2]
 8004316:	498a      	ldr	r1, [pc, #552]	; (8004540 <Vital_Msg_extr+0x112c>)
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	78ba      	ldrb	r2, [r7, #2]
 8004324:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8004326:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800432a:	2b01      	cmp	r3, #1
 800432c:	d176      	bne.n	800441c <Vital_Msg_extr+0x1008>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800432e:	78ba      	ldrb	r2, [r7, #2]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4a82      	ldr	r2, [pc, #520]	; (8004544 <Vital_Msg_extr+0x1130>)
 800433a:	4413      	add	r3, r2
 800433c:	3301      	adds	r3, #1
 800433e:	2210      	movs	r2, #16
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f022 fa96 	bl	8026874 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8004348:	78ba      	ldrb	r2, [r7, #2]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4a7c      	ldr	r2, [pc, #496]	; (8004544 <Vital_Msg_extr+0x1130>)
 8004354:	1898      	adds	r0, r3, r2
 8004356:	78ba      	ldrb	r2, [r7, #2]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4a77      	ldr	r2, [pc, #476]	; (8004540 <Vital_Msg_extr+0x112c>)
 8004362:	4413      	add	r3, r2
 8004364:	2214      	movs	r2, #20
 8004366:	4619      	mov	r1, r3
 8004368:	f022 fa5c 	bl	8026824 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 800436c:	78bb      	ldrb	r3, [r7, #2]
 800436e:	4976      	ldr	r1, [pc, #472]	; (8004548 <Vital_Msg_extr+0x1134>)
 8004370:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8004378:	78bb      	ldrb	r3, [r7, #2]
 800437a:	4a74      	ldr	r2, [pc, #464]	; (800454c <Vital_Msg_extr+0x1138>)
 800437c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004380:	78ba      	ldrb	r2, [r7, #2]
 8004382:	4870      	ldr	r0, [pc, #448]	; (8004544 <Vital_Msg_extr+0x1130>)
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4403      	add	r3, r0
 800438e:	3312      	adds	r3, #18
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	4299      	cmp	r1, r3
 8004394:	d042      	beq.n	800441c <Vital_Msg_extr+0x1008>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8004396:	78ba      	ldrb	r2, [r7, #2]
 8004398:	78b9      	ldrb	r1, [r7, #2]
 800439a:	486a      	ldr	r0, [pc, #424]	; (8004544 <Vital_Msg_extr+0x1130>)
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4403      	add	r3, r0
 80043a6:	3312      	adds	r3, #18
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	4b68      	ldr	r3, [pc, #416]	; (800454c <Vital_Msg_extr+0x1138>)
 80043ac:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80043b0:	2214      	movs	r2, #20
 80043b2:	2100      	movs	r1, #0
 80043b4:	4866      	ldr	r0, [pc, #408]	; (8004550 <Vital_Msg_extr+0x113c>)
 80043b6:	f022 fa5d 	bl	8026874 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80043ba:	78ba      	ldrb	r2, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4a5f      	ldr	r2, [pc, #380]	; (8004544 <Vital_Msg_extr+0x1130>)
 80043c6:	4413      	add	r3, r2
 80043c8:	2214      	movs	r2, #20
 80043ca:	4619      	mov	r1, r3
 80043cc:	4860      	ldr	r0, [pc, #384]	; (8004550 <Vital_Msg_extr+0x113c>)
 80043ce:	f022 fa29 	bl	8026824 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 80043d2:	f240 2007 	movw	r0, #519	; 0x207
 80043d6:	f00c fdc3 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 80043da:	78bb      	ldrb	r3, [r7, #2]
 80043dc:	4a5d      	ldr	r2, [pc, #372]	; (8004554 <Vital_Msg_extr+0x1140>)
 80043de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11a      	bne.n	800441c <Vital_Msg_extr+0x1008>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80043e6:	78bb      	ldrb	r3, [r7, #2]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	4a5b      	ldr	r2, [pc, #364]	; (8004558 <Vital_Msg_extr+0x1144>)
 80043ec:	4413      	add	r3, r2
 80043ee:	1c98      	adds	r0, r3, #2
 80043f0:	78ba      	ldrb	r2, [r7, #2]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a52      	ldr	r2, [pc, #328]	; (8004544 <Vital_Msg_extr+0x1130>)
 80043fc:	4413      	add	r3, r2
 80043fe:	3301      	adds	r3, #1
 8004400:	2210      	movs	r2, #16
 8004402:	4619      	mov	r1, r3
 8004404:	f022 fa0e 	bl	8026824 <memcpy>
#ifdef EI_1

#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif
				ReArrangedVitalData();
 8004408:	f006 f97c 	bl	800a704 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 800440c:	f240 1019 	movw	r0, #281	; 0x119
 8004410:	f00c fda6 	bl	8010f60 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8004414:	4a51      	ldr	r2, [pc, #324]	; (800455c <Vital_Msg_extr+0x1148>)
 8004416:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800441a:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800441c:	78b9      	ldrb	r1, [r7, #2]
 800441e:	78ba      	ldrb	r2, [r7, #2]
 8004420:	4848      	ldr	r0, [pc, #288]	; (8004544 <Vital_Msg_extr+0x1130>)
 8004422:	460b      	mov	r3, r1
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4403      	add	r3, r0
 800442c:	3312      	adds	r3, #18
 800442e:	8818      	ldrh	r0, [r3, #0]
 8004430:	494b      	ldr	r1, [pc, #300]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004432:	4613      	mov	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4413      	add	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	440b      	add	r3, r1
 800443c:	3306      	adds	r3, #6
 800443e:	4602      	mov	r2, r0
 8004440:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8004442:	78ba      	ldrb	r2, [r7, #2]
 8004444:	4946      	ldr	r1, [pc, #280]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	440b      	add	r3, r1
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004456:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8004458:	78ba      	ldrb	r2, [r7, #2]
 800445a:	4941      	ldr	r1, [pc, #260]	; (8004560 <Vital_Msg_extr+0x114c>)
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	440b      	add	r3, r1
 8004466:	3305      	adds	r3, #5
 8004468:	2202      	movs	r2, #2
 800446a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800446c:	78ba      	ldrb	r2, [r7, #2]
 800446e:	493c      	ldr	r1, [pc, #240]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	78ba      	ldrb	r2, [r7, #2]
 800447c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800447e:	78ba      	ldrb	r2, [r7, #2]
 8004480:	4937      	ldr	r1, [pc, #220]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	440b      	add	r3, r1
 800448c:	3301      	adds	r3, #1
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8004492:	78ba      	ldrb	r2, [r7, #2]
 8004494:	4932      	ldr	r1, [pc, #200]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	440b      	add	r3, r1
 80044a0:	3302      	adds	r3, #2
 80044a2:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 80044a6:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80044a8:	2218      	movs	r2, #24
 80044aa:	2100      	movs	r1, #0
 80044ac:	482d      	ldr	r0, [pc, #180]	; (8004564 <Vital_Msg_extr+0x1150>)
 80044ae:	f022 f9e1 	bl	8026874 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80044b2:	78ba      	ldrb	r2, [r7, #2]
 80044b4:	4613      	mov	r3, r2
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4413      	add	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4a28      	ldr	r2, [pc, #160]	; (8004560 <Vital_Msg_extr+0x114c>)
 80044be:	4413      	add	r3, r2
 80044c0:	2218      	movs	r2, #24
 80044c2:	4619      	mov	r1, r3
 80044c4:	4827      	ldr	r0, [pc, #156]	; (8004564 <Vital_Msg_extr+0x1150>)
 80044c6:	f022 f9ad 	bl	8026824 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80044ca:	f240 2001 	movw	r0, #513	; 0x201
 80044ce:	f00c fd47 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80044d2:	78ba      	ldrb	r2, [r7, #2]
 80044d4:	4922      	ldr	r1, [pc, #136]	; (8004560 <Vital_Msg_extr+0x114c>)
 80044d6:	4613      	mov	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	440b      	add	r3, r1
 80044e0:	3301      	adds	r3, #1
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80044e6:	78bb      	ldrb	r3, [r7, #2]
 80044e8:	491f      	ldr	r1, [pc, #124]	; (8004568 <Vital_Msg_extr+0x1154>)
 80044ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 80044f2:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d13e      	bne.n	8004578 <Vital_Msg_extr+0x1164>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 80044fa:	78bb      	ldrb	r3, [r7, #2]
 80044fc:	491b      	ldr	r1, [pc, #108]	; (800456c <Vital_Msg_extr+0x1158>)
 80044fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8004506:	78ba      	ldrb	r2, [r7, #2]
 8004508:	4919      	ldr	r1, [pc, #100]	; (8004570 <Vital_Msg_extr+0x115c>)
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3304      	adds	r3, #4
 8004516:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800451a:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 800451c:	78ba      	ldrb	r2, [r7, #2]
 800451e:	4914      	ldr	r1, [pc, #80]	; (8004570 <Vital_Msg_extr+0x115c>)
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	3301      	adds	r3, #1
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8004530:	78bb      	ldrb	r3, [r7, #2]
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <Vital_Msg_extr+0x1160>)
 8004534:	2101      	movs	r1, #1
 8004536:	54d1      	strb	r1, [r2, r3]
 8004538:	e04e      	b.n	80045d8 <Vital_Msg_extr+0x11c4>
 800453a:	bf00      	nop
 800453c:	20002ad4 	.word	0x20002ad4
 8004540:	200034e8 	.word	0x200034e8
 8004544:	200035b0 	.word	0x200035b0
 8004548:	20002564 	.word	0x20002564
 800454c:	2000258c 	.word	0x2000258c
 8004550:	20003740 	.word	0x20003740
 8004554:	20002550 	.word	0x20002550
 8004558:	20002770 	.word	0x20002770
 800455c:	200024e4 	.word	0x200024e4
 8004560:	20002da4 	.word	0x20002da4
 8004564:	20002f84 	.word	0x20002f84
 8004568:	200024b8 	.word	0x200024b8
 800456c:	200025a0 	.word	0x200025a0
 8004570:	200033f8 	.word	0x200033f8
 8004574:	200025f0 	.word	0x200025f0
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8004578:	78bb      	ldrb	r3, [r7, #2]
 800457a:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <Vital_Msg_extr+0x11d4>)
 800457c:	2100      	movs	r1, #0
 800457e:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8004580:	78ba      	ldrb	r2, [r7, #2]
 8004582:	491a      	ldr	r1, [pc, #104]	; (80045ec <Vital_Msg_extr+0x11d8>)
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3308      	adds	r3, #8
 8004590:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004594:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8004596:	78ba      	ldrb	r2, [r7, #2]
 8004598:	4914      	ldr	r1, [pc, #80]	; (80045ec <Vital_Msg_extr+0x11d8>)
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3301      	adds	r3, #1
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80045aa:	78ba      	ldrb	r2, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <Vital_Msg_extr+0x11dc>)
 80045b6:	4413      	add	r3, r2
 80045b8:	3301      	adds	r3, #1
 80045ba:	2210      	movs	r2, #16
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f022 f958 	bl	8026874 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 80045c4:	78ba      	ldrb	r2, [r7, #2]
 80045c6:	490a      	ldr	r1, [pc, #40]	; (80045f0 <Vital_Msg_extr+0x11dc>)
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3312      	adds	r3, #18
 80045d4:	2200      	movs	r2, #0
 80045d6:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80045d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045dc:	4805      	ldr	r0, [pc, #20]	; (80045f4 <Vital_Msg_extr+0x11e0>)
 80045de:	f017 ff10 	bl	801c402 <HAL_GPIO_TogglePin>

}
 80045e2:	37ac      	adds	r7, #172	; 0xac
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd90      	pop	{r4, r7, pc}
 80045e8:	200025f0 	.word	0x200025f0
 80045ec:	200033f8 	.word	0x200033f8
 80045f0:	200035b0 	.word	0x200035b0
 80045f4:	40021c00 	.word	0x40021c00

080045f8 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b0a5      	sub	sp, #148	; 0x94
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	460a      	mov	r2, r1
 8004602:	71fb      	strb	r3, [r7, #7]
 8004604:	4613      	mov	r3, r2
 8004606:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8004608:	2300      	movs	r3, #0
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48
 800460c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004610:	2238      	movs	r2, #56	; 0x38
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f022 f92d 	bl	8026874 <memset>
	uint8_t Temp_Buff[60] = {0,};
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	f107 0310 	add.w	r3, r7, #16
 8004622:	2238      	movs	r2, #56	; 0x38
 8004624:	2100      	movs	r1, #0
 8004626:	4618      	mov	r0, r3
 8004628:	f022 f924 	bl	8026874 <memset>
	uint8_t uc_index = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8004632:	2300      	movs	r3, #0
 8004634:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004638:	2300      	movs	r3, #0
 800463a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 800463e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004642:	223c      	movs	r2, #60	; 0x3c
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f022 f914 	bl	8026874 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 800464c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004650:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004654:	441a      	add	r2, r3
 8004656:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800465a:	23f4      	movs	r3, #244	; 0xf4
 800465c:	2108      	movs	r1, #8
 800465e:	f7fc f865 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004662:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004666:	3308      	adds	r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	da00      	bge.n	800466e <Send_Vital_Data_Message+0x76>
 800466c:	3307      	adds	r3, #7
 800466e:	10db      	asrs	r3, r3, #3
 8004670:	b29a      	uxth	r2, r3
 8004672:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004676:	4413      	add	r3, r2
 8004678:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800467c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004680:	3308      	adds	r3, #8
 8004682:	b29b      	uxth	r3, r3
 8004684:	b21b      	sxth	r3, r3
 8004686:	425a      	negs	r2, r3
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	f002 0207 	and.w	r2, r2, #7
 8004690:	bf58      	it	pl
 8004692:	4253      	negpl	r3, r2
 8004694:	b21b      	sxth	r3, r3
 8004696:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800469a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800469e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046a2:	441a      	add	r2, r3
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	49c6      	ldr	r1, [pc, #792]	; (80049c0 <Send_Vital_Data_Message+0x3c8>)
 80046a8:	3366      	adds	r3, #102	; 0x66
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80046b4:	2110      	movs	r1, #16
 80046b6:	f7fc f839 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80046ba:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80046be:	3310      	adds	r3, #16
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	da00      	bge.n	80046c6 <Send_Vital_Data_Message+0xce>
 80046c4:	3307      	adds	r3, #7
 80046c6:	10db      	asrs	r3, r3, #3
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046ce:	4413      	add	r3, r2
 80046d0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80046d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80046d8:	3310      	adds	r3, #16
 80046da:	b29b      	uxth	r3, r3
 80046dc:	b21b      	sxth	r3, r3
 80046de:	425a      	negs	r2, r3
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	f002 0207 	and.w	r2, r2, #7
 80046e8:	bf58      	it	pl
 80046ea:	4253      	negpl	r3, r2
 80046ec:	b21b      	sxth	r3, r3
 80046ee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80046f2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046fa:	441a      	add	r2, r3
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	49b0      	ldr	r1, [pc, #704]	; (80049c0 <Send_Vital_Data_Message+0x3c8>)
 8004700:	3370      	adds	r3, #112	; 0x70
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800470c:	2110      	movs	r1, #16
 800470e:	f7fc f80d 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8004712:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004716:	3310      	adds	r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	da00      	bge.n	800471e <Send_Vital_Data_Message+0x126>
 800471c:	3307      	adds	r3, #7
 800471e:	10db      	asrs	r3, r3, #3
 8004720:	b29a      	uxth	r2, r3
 8004722:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004726:	4413      	add	r3, r2
 8004728:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800472c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004730:	3310      	adds	r3, #16
 8004732:	b29b      	uxth	r3, r3
 8004734:	b21b      	sxth	r3, r3
 8004736:	425a      	negs	r2, r3
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	f002 0207 	and.w	r2, r2, #7
 8004740:	bf58      	it	pl
 8004742:	4253      	negpl	r3, r2
 8004744:	b21b      	sxth	r3, r3
 8004746:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800474a:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <Send_Vital_Data_Message+0x3cc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d035      	beq.n	80047c4 <Send_Vital_Data_Message+0x1cc>
 8004758:	4b9a      	ldr	r3, [pc, #616]	; (80049c4 <Send_Vital_Data_Message+0x3cc>)
 800475a:	791b      	ldrb	r3, [r3, #4]
 800475c:	79fa      	ldrb	r2, [r7, #7]
 800475e:	429a      	cmp	r2, r3
 8004760:	d130      	bne.n	80047c4 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8004768:	4897      	ldr	r0, [pc, #604]	; (80049c8 <Send_Vital_Data_Message+0x3d0>)
 800476a:	f019 fe13 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800476e:	4602      	mov	r2, r0
 8004770:	4b96      	ldr	r3, [pc, #600]	; (80049cc <Send_Vital_Data_Message+0x3d4>)
 8004772:	fba3 1302 	umull	r1, r3, r3, r2
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	21c8      	movs	r1, #200	; 0xc8
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8004784:	4892      	ldr	r0, [pc, #584]	; (80049d0 <Send_Vital_Data_Message+0x3d8>)
 8004786:	f022 f9f9 	bl	8026b7c <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	4a91      	ldr	r2, [pc, #580]	; (80049d4 <Send_Vital_Data_Message+0x3dc>)
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	4413      	add	r3, r2
 8004792:	3301      	adds	r3, #1
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	488f      	ldr	r0, [pc, #572]	; (80049d8 <Send_Vital_Data_Message+0x3e0>)
 800479a:	f022 f953 	bl	8026a44 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 800479e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80047a2:	4619      	mov	r1, r3
 80047a4:	488d      	ldr	r0, [pc, #564]	; (80049dc <Send_Vital_Data_Message+0x3e4>)
 80047a6:	f022 f94d 	bl	8026a44 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 80047aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047b2:	441a      	add	r2, r3
 80047b4:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80047b8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80047bc:	2108      	movs	r1, #8
 80047be:	f7fb ffb5 	bl	800072c <InsertBits>
	{
 80047c2:	e00f      	b.n	80047e4 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80047c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047cc:	441a      	add	r2, r3
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	4980      	ldr	r1, [pc, #512]	; (80049d4 <Send_Vital_Data_Message+0x3dc>)
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	440b      	add	r3, r1
 80047d6:	3301      	adds	r3, #1
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80047de:	2108      	movs	r1, #8
 80047e0:	f7fb ffa4 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 80047e4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80047e8:	3308      	adds	r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da00      	bge.n	80047f0 <Send_Vital_Data_Message+0x1f8>
 80047ee:	3307      	adds	r3, #7
 80047f0:	10db      	asrs	r3, r3, #3
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047f8:	4413      	add	r3, r2
 80047fa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80047fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004802:	3308      	adds	r3, #8
 8004804:	b29b      	uxth	r3, r3
 8004806:	b21b      	sxth	r3, r3
 8004808:	425a      	negs	r2, r3
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	f002 0207 	and.w	r2, r2, #7
 8004812:	bf58      	it	pl
 8004814:	4253      	negpl	r3, r2
 8004816:	b21b      	sxth	r3, r3
 8004818:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800481c:	4b69      	ldr	r3, [pc, #420]	; (80049c4 <Send_Vital_Data_Message+0x3cc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	08db      	lsrs	r3, r3, #3
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d035      	beq.n	8004896 <Send_Vital_Data_Message+0x29e>
 800482a:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <Send_Vital_Data_Message+0x3cc>)
 800482c:	791b      	ldrb	r3, [r3, #4]
 800482e:	79fa      	ldrb	r2, [r7, #7]
 8004830:	429a      	cmp	r2, r3
 8004832:	d130      	bne.n	8004896 <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 800483a:	4863      	ldr	r0, [pc, #396]	; (80049c8 <Send_Vital_Data_Message+0x3d0>)
 800483c:	f019 fdaa 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8004840:	4602      	mov	r2, r0
 8004842:	4b62      	ldr	r3, [pc, #392]	; (80049cc <Send_Vital_Data_Message+0x3d4>)
 8004844:	fba3 1302 	umull	r1, r3, r3, r2
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	21c8      	movs	r1, #200	; 0xc8
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8004856:	4862      	ldr	r0, [pc, #392]	; (80049e0 <Send_Vital_Data_Message+0x3e8>)
 8004858:	f022 f990 	bl	8026b7c <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	4a5d      	ldr	r2, [pc, #372]	; (80049d4 <Send_Vital_Data_Message+0x3dc>)
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	4413      	add	r3, r2
 8004864:	3302      	adds	r3, #2
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	4619      	mov	r1, r3
 800486a:	485e      	ldr	r0, [pc, #376]	; (80049e4 <Send_Vital_Data_Message+0x3ec>)
 800486c:	f022 f8ea 	bl	8026a44 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8004870:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004874:	4619      	mov	r1, r3
 8004876:	485c      	ldr	r0, [pc, #368]	; (80049e8 <Send_Vital_Data_Message+0x3f0>)
 8004878:	f022 f8e4 	bl	8026a44 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800487c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004880:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004884:	441a      	add	r2, r3
 8004886:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800488a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800488e:	2108      	movs	r1, #8
 8004890:	f7fb ff4c 	bl	800072c <InsertBits>
	{
 8004894:	e00f      	b.n	80048b6 <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8004896:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800489a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800489e:	441a      	add	r2, r3
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	494c      	ldr	r1, [pc, #304]	; (80049d4 <Send_Vital_Data_Message+0x3dc>)
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	440b      	add	r3, r1
 80048a8:	3302      	adds	r3, #2
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80048b0:	2108      	movs	r1, #8
 80048b2:	f7fb ff3b 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 80048b6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80048ba:	3308      	adds	r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da00      	bge.n	80048c2 <Send_Vital_Data_Message+0x2ca>
 80048c0:	3307      	adds	r3, #7
 80048c2:	10db      	asrs	r3, r3, #3
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048ca:	4413      	add	r3, r2
 80048cc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80048d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80048d4:	3308      	adds	r3, #8
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	b21b      	sxth	r3, r3
 80048da:	425a      	negs	r2, r3
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	f002 0207 	and.w	r2, r2, #7
 80048e4:	bf58      	it	pl
 80048e6:	4253      	negpl	r3, r2
 80048e8:	b21b      	sxth	r3, r3
 80048ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 80048ee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048f6:	441a      	add	r2, r3
 80048f8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80048fc:	2302      	movs	r3, #2
 80048fe:	2108      	movs	r1, #8
 8004900:	f7fb ff14 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004904:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004908:	3308      	adds	r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	da00      	bge.n	8004910 <Send_Vital_Data_Message+0x318>
 800490e:	3307      	adds	r3, #7
 8004910:	10db      	asrs	r3, r3, #3
 8004912:	b29a      	uxth	r2, r3
 8004914:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004918:	4413      	add	r3, r2
 800491a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800491e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004922:	3308      	adds	r3, #8
 8004924:	b29b      	uxth	r3, r3
 8004926:	b21b      	sxth	r3, r3
 8004928:	425a      	negs	r2, r3
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	f002 0207 	and.w	r2, r2, #7
 8004932:	bf58      	it	pl
 8004934:	4253      	negpl	r3, r2
 8004936:	b21b      	sxth	r3, r3
 8004938:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <Send_Vital_Data_Message+0x3f4>)
 8004940:	5cd3      	ldrb	r3, [r2, r3]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d15a      	bne.n	80049fc <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 8004946:	f008 f8d1 	bl	800caec <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800494a:	79fa      	ldrb	r2, [r7, #7]
 800494c:	4613      	mov	r3, r2
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4413      	add	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4a26      	ldr	r2, [pc, #152]	; (80049f0 <Send_Vital_Data_Message+0x3f8>)
 8004956:	4413      	add	r3, r2
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <Send_Vital_Data_Message+0x3fc>)
 800495a:	6811      	ldr	r1, [r2, #0]
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	8892      	ldrh	r2, [r2, #4]
 8004960:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8004962:	4825      	ldr	r0, [pc, #148]	; (80049f8 <Send_Vital_Data_Message+0x400>)
 8004964:	f022 f90a 	bl	8026b7c <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	4a20      	ldr	r2, [pc, #128]	; (80049ec <Send_Vital_Data_Message+0x3f4>)
 800496c:	2100      	movs	r1, #0
 800496e:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 8004970:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004974:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004978:	441a      	add	r2, r3
 800497a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800497e:	2368      	movs	r3, #104	; 0x68
 8004980:	2110      	movs	r1, #16
 8004982:	f7fb fed3 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004986:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800498a:	3310      	adds	r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	da00      	bge.n	8004992 <Send_Vital_Data_Message+0x39a>
 8004990:	3307      	adds	r3, #7
 8004992:	10db      	asrs	r3, r3, #3
 8004994:	b29a      	uxth	r2, r3
 8004996:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800499a:	4413      	add	r3, r2
 800499c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80049a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80049a4:	3310      	adds	r3, #16
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	b21b      	sxth	r3, r3
 80049aa:	425a      	negs	r2, r3
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	f002 0207 	and.w	r2, r2, #7
 80049b4:	bf58      	it	pl
 80049b6:	4253      	negpl	r3, r2
 80049b8:	b21b      	sxth	r3, r3
 80049ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80049be:	e044      	b.n	8004a4a <Send_Vital_Data_Message+0x452>
 80049c0:	20000504 	.word	0x20000504
 80049c4:	2000308c 	.word	0x2000308c
 80049c8:	2000bcec 	.word	0x2000bcec
 80049cc:	51eb851f 	.word	0x51eb851f
 80049d0:	08028c54 	.word	0x08028c54
 80049d4:	200028f4 	.word	0x200028f4
 80049d8:	08028c78 	.word	0x08028c78
 80049dc:	08028c98 	.word	0x08028c98
 80049e0:	08028960 	.word	0x08028960
 80049e4:	08028984 	.word	0x08028984
 80049e8:	080289a4 	.word	0x080289a4
 80049ec:	20002764 	.word	0x20002764
 80049f0:	200028b8 	.word	0x200028b8
 80049f4:	20003fe4 	.word	0x20003fe4
 80049f8:	08028cb8 	.word	0x08028cb8
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 80049fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a04:	441a      	add	r2, r3
 8004a06:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004a0a:	2328      	movs	r3, #40	; 0x28
 8004a0c:	2110      	movs	r1, #16
 8004a0e:	f7fb fe8d 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004a12:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004a16:	3310      	adds	r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da00      	bge.n	8004a1e <Send_Vital_Data_Message+0x426>
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	10db      	asrs	r3, r3, #3
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a26:	4413      	add	r3, r2
 8004a28:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004a2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a30:	3310      	adds	r3, #16
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	b21b      	sxth	r3, r3
 8004a36:	425a      	negs	r2, r3
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	f002 0207 	and.w	r2, r2, #7
 8004a40:	bf58      	it	pl
 8004a42:	4253      	negpl	r3, r2
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8004a4a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a52:	18d1      	adds	r1, r2, r3
 8004a54:	79fa      	ldrb	r2, [r7, #7]
 8004a56:	48cd      	ldr	r0, [pc, #820]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4403      	add	r3, r0
 8004a62:	3305      	adds	r3, #5
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004a6a:	460a      	mov	r2, r1
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	f7fb fe5d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004a72:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004a76:	3308      	adds	r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da00      	bge.n	8004a7e <Send_Vital_Data_Message+0x486>
 8004a7c:	3307      	adds	r3, #7
 8004a7e:	10db      	asrs	r3, r3, #3
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a86:	4413      	add	r3, r2
 8004a88:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004a8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a90:	3308      	adds	r3, #8
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	425a      	negs	r2, r3
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	f002 0207 	and.w	r2, r2, #7
 8004aa0:	bf58      	it	pl
 8004aa2:	4253      	negpl	r3, r2
 8004aa4:	b21b      	sxth	r3, r3
 8004aa6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8004aaa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004aae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ab2:	18d1      	adds	r1, r2, r3
 8004ab4:	79fa      	ldrb	r2, [r7, #7]
 8004ab6:	48b5      	ldr	r0, [pc, #724]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4403      	add	r3, r0
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004aca:	460a      	mov	r2, r1
 8004acc:	2108      	movs	r1, #8
 8004ace:	f7fb fe2d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004ad2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	da00      	bge.n	8004ade <Send_Vital_Data_Message+0x4e6>
 8004adc:	3307      	adds	r3, #7
 8004ade:	10db      	asrs	r3, r3, #3
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004aec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004af0:	3308      	adds	r3, #8
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	425a      	negs	r2, r3
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	f002 0207 	and.w	r2, r2, #7
 8004b00:	bf58      	it	pl
 8004b02:	4253      	negpl	r3, r2
 8004b04:	b21b      	sxth	r3, r3
 8004b06:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004b0a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b12:	18d1      	adds	r1, r2, r3
 8004b14:	79fa      	ldrb	r2, [r7, #7]
 8004b16:	489d      	ldr	r0, [pc, #628]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004b18:	4613      	mov	r3, r2
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	4413      	add	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4403      	add	r3, r0
 8004b22:	3303      	adds	r3, #3
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004b2a:	460a      	mov	r2, r1
 8004b2c:	2108      	movs	r1, #8
 8004b2e:	f7fb fdfd 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004b32:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004b36:	3308      	adds	r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da00      	bge.n	8004b3e <Send_Vital_Data_Message+0x546>
 8004b3c:	3307      	adds	r3, #7
 8004b3e:	10db      	asrs	r3, r3, #3
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b46:	4413      	add	r3, r2
 8004b48:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004b4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b50:	3308      	adds	r3, #8
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	b21b      	sxth	r3, r3
 8004b56:	425a      	negs	r2, r3
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	f002 0207 	and.w	r2, r2, #7
 8004b60:	bf58      	it	pl
 8004b62:	4253      	negpl	r3, r2
 8004b64:	b21b      	sxth	r3, r3
 8004b66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8004b6a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b72:	18d1      	adds	r1, r2, r3
 8004b74:	79fa      	ldrb	r2, [r7, #7]
 8004b76:	4885      	ldr	r0, [pc, #532]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004b78:	4613      	mov	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4403      	add	r3, r0
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004b88:	460a      	mov	r2, r1
 8004b8a:	2108      	movs	r1, #8
 8004b8c:	f7fb fdce 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004b90:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004b94:	3308      	adds	r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da00      	bge.n	8004b9c <Send_Vital_Data_Message+0x5a4>
 8004b9a:	3307      	adds	r3, #7
 8004b9c:	10db      	asrs	r3, r3, #3
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004baa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004bae:	3308      	adds	r3, #8
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	b21b      	sxth	r3, r3
 8004bb4:	425a      	negs	r2, r3
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	f002 0207 	and.w	r2, r2, #7
 8004bbe:	bf58      	it	pl
 8004bc0:	4253      	negpl	r3, r2
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8004bc8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004bcc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bd0:	18d1      	adds	r1, r2, r3
 8004bd2:	79fa      	ldrb	r2, [r7, #7]
 8004bd4:	486d      	ldr	r0, [pc, #436]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4403      	add	r3, r0
 8004be0:	3301      	adds	r3, #1
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004be8:	460a      	mov	r2, r1
 8004bea:	2108      	movs	r1, #8
 8004bec:	f7fb fd9e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004bf0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	da00      	bge.n	8004bfc <Send_Vital_Data_Message+0x604>
 8004bfa:	3307      	adds	r3, #7
 8004bfc:	10db      	asrs	r3, r3, #3
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c04:	4413      	add	r3, r2
 8004c06:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c0e:	3308      	adds	r3, #8
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	b21b      	sxth	r3, r3
 8004c14:	425a      	negs	r2, r3
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	f002 0207 	and.w	r2, r2, #7
 8004c1e:	bf58      	it	pl
 8004c20:	4253      	negpl	r3, r2
 8004c22:	b21b      	sxth	r3, r3
 8004c24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004c28:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c30:	18d1      	adds	r1, r2, r3
 8004c32:	79fa      	ldrb	r2, [r7, #7]
 8004c34:	4855      	ldr	r0, [pc, #340]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004c36:	4613      	mov	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4413      	add	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4403      	add	r3, r0
 8004c40:	3302      	adds	r3, #2
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c48:	460a      	mov	r2, r1
 8004c4a:	2108      	movs	r1, #8
 8004c4c:	f7fb fd6e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c50:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004c54:	3308      	adds	r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da00      	bge.n	8004c5c <Send_Vital_Data_Message+0x664>
 8004c5a:	3307      	adds	r3, #7
 8004c5c:	10db      	asrs	r3, r3, #3
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c64:	4413      	add	r3, r2
 8004c66:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c6e:	3308      	adds	r3, #8
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	425a      	negs	r2, r3
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	f002 0207 	and.w	r2, r2, #7
 8004c7e:	bf58      	it	pl
 8004c80:	4253      	negpl	r3, r2
 8004c82:	b21b      	sxth	r3, r3
 8004c84:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 8004c88:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c90:	441a      	add	r2, r3
 8004c92:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c96:	2301      	movs	r3, #1
 8004c98:	2108      	movs	r1, #8
 8004c9a:	f7fb fd47 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c9e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	da00      	bge.n	8004caa <Send_Vital_Data_Message+0x6b2>
 8004ca8:	3307      	adds	r3, #7
 8004caa:	10db      	asrs	r3, r3, #3
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004cb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	b21b      	sxth	r3, r3
 8004cc2:	425a      	negs	r2, r3
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	f002 0207 	and.w	r2, r2, #7
 8004ccc:	bf58      	it	pl
 8004cce:	4253      	negpl	r3, r2
 8004cd0:	b21b      	sxth	r3, r3
 8004cd2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 8004cd6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004cda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004cde:	441a      	add	r2, r3
 8004ce0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2108      	movs	r1, #8
 8004ce8:	f7fb fd20 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004cec:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da00      	bge.n	8004cf8 <Send_Vital_Data_Message+0x700>
 8004cf6:	3307      	adds	r3, #7
 8004cf8:	10db      	asrs	r3, r3, #3
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d00:	4413      	add	r3, r2
 8004d02:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004d06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	b21b      	sxth	r3, r3
 8004d10:	425a      	negs	r2, r3
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	f002 0207 	and.w	r2, r2, #7
 8004d1a:	bf58      	it	pl
 8004d1c:	4253      	negpl	r3, r2
 8004d1e:	b21b      	sxth	r3, r3
 8004d20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004d24:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d2c:	441a      	add	r2, r3
 8004d2e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004d32:	2301      	movs	r3, #1
 8004d34:	2108      	movs	r1, #8
 8004d36:	f7fb fcf9 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004d3a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004d3e:	3308      	adds	r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	da00      	bge.n	8004d46 <Send_Vital_Data_Message+0x74e>
 8004d44:	3307      	adds	r3, #7
 8004d46:	10db      	asrs	r3, r3, #3
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d4e:	4413      	add	r3, r2
 8004d50:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004d54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d58:	3308      	adds	r3, #8
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	b21b      	sxth	r3, r3
 8004d5e:	425a      	negs	r2, r3
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	f002 0207 	and.w	r2, r2, #7
 8004d68:	bf58      	it	pl
 8004d6a:	4253      	negpl	r3, r2
 8004d6c:	b21b      	sxth	r3, r3
 8004d6e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <Send_Vital_Data_Message+0x798>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d02c      	beq.n	8004dda <Send_Vital_Data_Message+0x7e2>
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <Send_Vital_Data_Message+0x798>)
 8004d82:	791b      	ldrb	r3, [r3, #4]
 8004d84:	79fa      	ldrb	r2, [r7, #7]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d127      	bne.n	8004dda <Send_Vital_Data_Message+0x7e2>
 8004d8a:	e003      	b.n	8004d94 <Send_Vital_Data_Message+0x79c>
 8004d8c:	200028b8 	.word	0x200028b8
 8004d90:	2000308c 	.word	0x2000308c
	{
		uint32_t Rand_Number = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 8004d9a:	484e      	ldr	r0, [pc, #312]	; (8004ed4 <Send_Vital_Data_Message+0x8dc>)
 8004d9c:	f019 fafa 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8004da0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8004da4:	484c      	ldr	r0, [pc, #304]	; (8004ed8 <Send_Vital_Data_Message+0x8e0>)
 8004da6:	f021 fee9 	bl	8026b7c <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	4a4b      	ldr	r2, [pc, #300]	; (8004edc <Send_Vital_Data_Message+0x8e4>)
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	4413      	add	r3, r2
 8004db2:	330c      	adds	r3, #12
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4849      	ldr	r0, [pc, #292]	; (8004ee0 <Send_Vital_Data_Message+0x8e8>)
 8004dba:	f021 fe43 	bl	8026a44 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 8004dbe:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004dc2:	4848      	ldr	r0, [pc, #288]	; (8004ee4 <Send_Vital_Data_Message+0x8ec>)
 8004dc4:	f021 fe3e 	bl	8026a44 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 8004dc8:	f107 020c 	add.w	r2, r7, #12
 8004dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd0:	2118      	movs	r1, #24
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f7fb fcaa 	bl	800072c <InsertBits>
	{
 8004dd8:	e00b      	b.n	8004df2 <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	4a3f      	ldr	r2, [pc, #252]	; (8004edc <Send_Vital_Data_Message+0x8e4>)
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4413      	add	r3, r2
 8004de2:	330c      	adds	r3, #12
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f107 020c 	add.w	r2, r7, #12
 8004dea:	2118      	movs	r1, #24
 8004dec:	2000      	movs	r0, #0
 8004dee:	f7fb fc9d 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004df8:	e011      	b.n	8004e1e <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8004dfa:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004dfe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e02:	3303      	adds	r3, #3
 8004e04:	3290      	adds	r2, #144	; 0x90
 8004e06:	443a      	add	r2, r7
 8004e08:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004e0c:	3390      	adds	r3, #144	; 0x90
 8004e0e:	443b      	add	r3, r7
 8004e10:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004e14:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004e1e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d8e6      	bhi.n	8004dfa <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004e2c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e34:	18d4      	adds	r4, r2, r3
 8004e36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3303      	adds	r3, #3
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	f107 030c 	add.w	r3, r7, #12
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f011 f866 	bl	8015f18 <CalculateDirectReverseCrc>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004e52:	4622      	mov	r2, r4
 8004e54:	2120      	movs	r1, #32
 8004e56:	f7fb fc69 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8004e5a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004e5e:	3320      	adds	r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	da00      	bge.n	8004e66 <Send_Vital_Data_Message+0x86e>
 8004e64:	3307      	adds	r3, #7
 8004e66:	10db      	asrs	r3, r3, #3
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e6e:	4413      	add	r3, r2
 8004e70:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004e74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e78:	3320      	adds	r3, #32
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	b21b      	sxth	r3, r3
 8004e7e:	425a      	negs	r2, r3
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	f002 0207 	and.w	r2, r2, #7
 8004e88:	bf58      	it	pl
 8004e8a:	4253      	negpl	r3, r2
 8004e8c:	b21b      	sxth	r3, r3
 8004e8e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <Send_Vital_Data_Message+0x8f0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	0a5b      	lsrs	r3, r3, #9
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <Send_Vital_Data_Message+0x8c0>
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <Send_Vital_Data_Message+0x8f0>)
 8004ea2:	791b      	ldrb	r3, [r3, #4]
 8004ea4:	79fa      	ldrb	r2, [r7, #7]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d106      	bne.n	8004eb8 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 8004eaa:	4810      	ldr	r0, [pc, #64]	; (8004eec <Send_Vital_Data_Message+0x8f4>)
 8004eac:	f021 fe66 	bl	8026b7c <puts>
		printf("Not Sending Reply");
 8004eb0:	480f      	ldr	r0, [pc, #60]	; (8004ef0 <Send_Vital_Data_Message+0x8f8>)
 8004eb2:	f021 fdc7 	bl	8026a44 <iprintf>
 8004eb6:	e009      	b.n	8004ecc <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8004eb8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ebc:	b2d9      	uxtb	r1, r3
 8004ebe:	79fa      	ldrb	r2, [r7, #7]
 8004ec0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f003 f8cf 	bl	8008068 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	3794      	adds	r7, #148	; 0x94
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd90      	pop	{r4, r7, pc}
 8004ed4:	2000bcec 	.word	0x2000bcec
 8004ed8:	08028cd0 	.word	0x08028cd0
 8004edc:	200028f4 	.word	0x200028f4
 8004ee0:	08028cf4 	.word	0x08028cf4
 8004ee4:	08028d18 	.word	0x08028d18
 8004ee8:	2000308c 	.word	0x2000308c
 8004eec:	08028a2c 	.word	0x08028a2c
 8004ef0:	08028a44 	.word	0x08028a44

08004ef4 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b0c0      	sub	sp, #256	; 0x100
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	4608      	mov	r0, r1
 8004efe:	4611      	mov	r1, r2
 8004f00:	461a      	mov	r2, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	70fb      	strb	r3, [r7, #3]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70bb      	strb	r3, [r7, #2]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004f20:	f014 fd86 	bl	8019a30 <HAL_GetTick>
 8004f24:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004f42:	227c      	movs	r2, #124	; 0x7c
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f021 fc94 	bl	8026874 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f52:	2300      	movs	r3, #0
 8004f54:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	b299      	uxth	r1, r3
 8004f5c:	78ba      	ldrb	r2, [r7, #2]
 8004f5e:	48c3      	ldr	r0, [pc, #780]	; (800526c <Vital_Msg_extr_from_CAN+0x378>)
 8004f60:	4613      	mov	r3, r2
 8004f62:	015b      	lsls	r3, r3, #5
 8004f64:	4413      	add	r3, r2
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	4403      	add	r3, r0
 8004f6a:	3340      	adds	r3, #64	; 0x40
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	4299      	cmp	r1, r3
 8004f70:	d11a      	bne.n	8004fa8 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 8004f72:	78ba      	ldrb	r2, [r7, #2]
 8004f74:	4613      	mov	r3, r2
 8004f76:	015b      	lsls	r3, r3, #5
 8004f78:	4413      	add	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4abb      	ldr	r2, [pc, #748]	; (800526c <Vital_Msg_extr_from_CAN+0x378>)
 8004f7e:	4413      	add	r3, r2
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f021 fc3d 	bl	8026804 <memcmp>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004f90:	78bb      	ldrb	r3, [r7, #2]
 8004f92:	4ab7      	ldr	r2, [pc, #732]	; (8005270 <Vital_Msg_extr_from_CAN+0x37c>)
 8004f94:	3366      	adds	r3, #102	; 0x66
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	48b5      	ldr	r0, [pc, #724]	; (8005274 <Vital_Msg_extr_from_CAN+0x380>)
 8004fa0:	f021 fd50 	bl	8026a44 <iprintf>
			return;
 8004fa4:	f000 bda3 	b.w	8005aee <Vital_Msg_extr_from_CAN+0xbfa>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	3b05      	subs	r3, #5
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	441a      	add	r2, r3
 8004fb0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fb4:	2120      	movs	r1, #32
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fb2c 	bl	8000614 <ExtractBits>
 8004fbc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004fc0:	4bad      	ldr	r3, [pc, #692]	; (8005278 <Vital_Msg_extr_from_CAN+0x384>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d034      	beq.n	8005036 <Vital_Msg_extr_from_CAN+0x142>
 8004fcc:	4baa      	ldr	r3, [pc, #680]	; (8005278 <Vital_Msg_extr_from_CAN+0x384>)
 8004fce:	791b      	ldrb	r3, [r3, #4]
 8004fd0:	78ba      	ldrb	r2, [r7, #2]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d12f      	bne.n	8005036 <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 8004fd6:	2316      	movs	r3, #22
 8004fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004fdc:	48a7      	ldr	r0, [pc, #668]	; (800527c <Vital_Msg_extr_from_CAN+0x388>)
 8004fde:	f019 f9d9 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	4ba6      	ldr	r3, [pc, #664]	; (8005280 <Vital_Msg_extr_from_CAN+0x38c>)
 8004fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8004fea:	0dd9      	lsrs	r1, r3, #23
 8004fec:	460b      	mov	r3, r1
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	1a5b      	subs	r3, r3, r1
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 8004ffa:	48a2      	ldr	r0, [pc, #648]	; (8005284 <Vital_Msg_extr_from_CAN+0x390>)
 8004ffc:	f021 fdbe 	bl	8026b7c <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8005000:	78ba      	ldrb	r2, [r7, #2]
 8005002:	49a1      	ldr	r1, [pc, #644]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	440b      	add	r3, r1
 800500e:	3308      	adds	r3, #8
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4619      	mov	r1, r3
 8005014:	489d      	ldr	r0, [pc, #628]	; (800528c <Vital_Msg_extr_from_CAN+0x398>)
 8005016:	f021 fd15 	bl	8026a44 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 800501a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800501e:	489c      	ldr	r0, [pc, #624]	; (8005290 <Vital_Msg_extr_from_CAN+0x39c>)
 8005020:	f021 fd10 	bl	8026a44 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8005024:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502c:	2118      	movs	r1, #24
 800502e:	2000      	movs	r0, #0
 8005030:	f7fb fb7c 	bl	800072c <InsertBits>
	{
 8005034:	e00e      	b.n	8005054 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8005036:	78ba      	ldrb	r2, [r7, #2]
 8005038:	4993      	ldr	r1, [pc, #588]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 800503a:	4613      	mov	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	440b      	add	r3, r1
 8005044:	3308      	adds	r3, #8
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800504c:	2118      	movs	r1, #24
 800504e:	2000      	movs	r0, #0
 8005050:	f7fb fb6c 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005054:	2300      	movs	r3, #0
 8005056:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800505a:	e011      	b.n	8005080 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 800505c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	441a      	add	r2, r3
 8005064:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005068:	3303      	adds	r3, #3
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005070:	443b      	add	r3, r7
 8005072:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005076:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800507a:	3301      	adds	r3, #1
 800507c:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005080:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	3b05      	subs	r3, #5
 8005088:	429a      	cmp	r2, r3
 800508a:	dbe7      	blt.n	800505c <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800508c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005090:	b29b      	uxth	r3, r3
 8005092:	3303      	adds	r3, #3
 8005094:	b29a      	uxth	r2, r3
 8005096:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f010 ff3b 	bl	8015f18 <CalculateDirectReverseCrc>
 80050a2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 80050a6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80050aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050ae:	429a      	cmp	r2, r3
 80050b0:	f000 8104 	beq.w	80052bc <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3305      	adds	r3, #5
 80050b8:	461a      	mov	r2, r3
 80050ba:	2108      	movs	r1, #8
 80050bc:	2000      	movs	r0, #0
 80050be:	f7fb faa9 	bl	8000614 <ExtractBits>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f040 80ba 	bne.w	800523e <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 80050ca:	4872      	ldr	r0, [pc, #456]	; (8005294 <Vital_Msg_extr_from_CAN+0x3a0>)
 80050cc:	f021 fd56 	bl	8026b7c <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80050d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050d4:	2280      	movs	r2, #128	; 0x80
 80050d6:	2100      	movs	r1, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	f021 fbcb 	bl	8026874 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 80050de:	78ba      	ldrb	r2, [r7, #2]
 80050e0:	4969      	ldr	r1, [pc, #420]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 80050e2:	4613      	mov	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	3308      	adds	r3, #8
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80050f6:	2118      	movs	r1, #24
 80050f8:	2000      	movs	r0, #0
 80050fa:	f7fb fb17 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005104:	e011      	b.n	800512a <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8005106:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	441a      	add	r2, r3
 800510e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005112:	3303      	adds	r3, #3
 8005114:	7812      	ldrb	r2, [r2, #0]
 8005116:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800511a:	443b      	add	r3, r7
 800511c:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005120:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005124:	3301      	adds	r3, #1
 8005126:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800512a:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	3b05      	subs	r3, #5
 8005132:	429a      	cmp	r2, r3
 8005134:	dbe7      	blt.n	8005106 <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8005136:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800513a:	b29b      	uxth	r3, r3
 800513c:	3303      	adds	r3, #3
 800513e:	b29a      	uxth	r2, r3
 8005140:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f010 fee6 	bl	8015f18 <CalculateDirectReverseCrc>
 800514c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	3b05      	subs	r3, #5
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	441a      	add	r2, r3
 8005158:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800515c:	2120      	movs	r1, #32
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb fa58 	bl	8000614 <ExtractBits>
 8005164:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 8005168:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800516c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005170:	429a      	cmp	r2, r3
 8005172:	d14e      	bne.n	8005212 <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 8005174:	4848      	ldr	r0, [pc, #288]	; (8005298 <Vital_Msg_extr_from_CAN+0x3a4>)
 8005176:	f021 fd01 	bl	8026b7c <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 800517a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800517e:	4847      	ldr	r0, [pc, #284]	; (800529c <Vital_Msg_extr_from_CAN+0x3a8>)
 8005180:	f021 fc60 	bl	8026a44 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8005184:	78ba      	ldrb	r2, [r7, #2]
 8005186:	4940      	ldr	r1, [pc, #256]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 8005188:	4613      	mov	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4413      	add	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	440b      	add	r3, r1
 8005192:	3308      	adds	r3, #8
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4619      	mov	r1, r3
 8005198:	4841      	ldr	r0, [pc, #260]	; (80052a0 <Vital_Msg_extr_from_CAN+0x3ac>)
 800519a:	f021 fc53 	bl	8026a44 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 800519e:	78ba      	ldrb	r2, [r7, #2]
 80051a0:	4939      	ldr	r1, [pc, #228]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	3308      	adds	r3, #8
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	1c59      	adds	r1, r3, #1
 80051b2:	4835      	ldr	r0, [pc, #212]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 80051b4:	4613      	mov	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4403      	add	r3, r0
 80051be:	3308      	adds	r3, #8
 80051c0:	6019      	str	r1, [r3, #0]
 80051c2:	78b9      	ldrb	r1, [r7, #2]
 80051c4:	4830      	ldr	r0, [pc, #192]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4403      	add	r3, r0
 80051d0:	3308      	adds	r3, #8
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4833      	ldr	r0, [pc, #204]	; (80052a4 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051d6:	010b      	lsls	r3, r1, #4
 80051d8:	4403      	add	r3, r0
 80051da:	3308      	adds	r3, #8
 80051dc:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80051de:	78bb      	ldrb	r3, [r7, #2]
 80051e0:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	4413      	add	r3, r2
 80051e6:	3308      	adds	r3, #8
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	482e      	ldr	r0, [pc, #184]	; (80052a8 <Vital_Msg_extr_from_CAN+0x3b4>)
 80051ee:	f021 fc29 	bl	8026a44 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80051f2:	78bb      	ldrb	r3, [r7, #2]
 80051f4:	78ba      	ldrb	r2, [r7, #2]
 80051f6:	492b      	ldr	r1, [pc, #172]	; (80052a4 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	440b      	add	r3, r1
 80051fc:	3308      	adds	r3, #8
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	482a      	ldr	r0, [pc, #168]	; (80052ac <Vital_Msg_extr_from_CAN+0x3b8>)
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4403      	add	r3, r0
 800520c:	3308      	adds	r3, #8
 800520e:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8005210:	e055      	b.n	80052be <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005212:	78bb      	ldrb	r3, [r7, #2]
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <Vital_Msg_extr_from_CAN+0x37c>)
 8005216:	3366      	adds	r3, #102	; 0x66
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4619      	mov	r1, r3
 8005220:	4823      	ldr	r0, [pc, #140]	; (80052b0 <Vital_Msg_extr_from_CAN+0x3bc>)
 8005222:	f021 fc0f 	bl	8026a44 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 8005226:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800522a:	4822      	ldr	r0, [pc, #136]	; (80052b4 <Vital_Msg_extr_from_CAN+0x3c0>)
 800522c:	f021 fc0a 	bl	8026a44 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8005230:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005234:	4820      	ldr	r0, [pc, #128]	; (80052b8 <Vital_Msg_extr_from_CAN+0x3c4>)
 8005236:	f021 fc05 	bl	8026a44 <iprintf>
				return;
 800523a:	f000 bc58 	b.w	8005aee <Vital_Msg_extr_from_CAN+0xbfa>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800523e:	78bb      	ldrb	r3, [r7, #2]
 8005240:	4a0b      	ldr	r2, [pc, #44]	; (8005270 <Vital_Msg_extr_from_CAN+0x37c>)
 8005242:	3366      	adds	r3, #102	; 0x66
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4619      	mov	r1, r3
 800524c:	4818      	ldr	r0, [pc, #96]	; (80052b0 <Vital_Msg_extr_from_CAN+0x3bc>)
 800524e:	f021 fbf9 	bl	8026a44 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8005252:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005256:	4817      	ldr	r0, [pc, #92]	; (80052b4 <Vital_Msg_extr_from_CAN+0x3c0>)
 8005258:	f021 fbf4 	bl	8026a44 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 800525c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005260:	4815      	ldr	r0, [pc, #84]	; (80052b8 <Vital_Msg_extr_from_CAN+0x3c4>)
 8005262:	f021 fbef 	bl	8026a44 <iprintf>
			return;
 8005266:	f000 bc42 	b.w	8005aee <Vital_Msg_extr_from_CAN+0xbfa>
 800526a:	bf00      	nop
 800526c:	200030ac 	.word	0x200030ac
 8005270:	20000504 	.word	0x20000504
 8005274:	08028d3c 	.word	0x08028d3c
 8005278:	2000308c 	.word	0x2000308c
 800527c:	2000bcec 	.word	0x2000bcec
 8005280:	80008001 	.word	0x80008001
 8005284:	08028a58 	.word	0x08028a58
 8005288:	20002e94 	.word	0x20002e94
 800528c:	08028a78 	.word	0x08028a78
 8005290:	08028aa0 	.word	0x08028aa0
 8005294:	08028ac8 	.word	0x08028ac8
 8005298:	08028d80 	.word	0x08028d80
 800529c:	08028afc 	.word	0x08028afc
 80052a0:	08028da4 	.word	0x08028da4
 80052a4:	200028f4 	.word	0x200028f4
 80052a8:	08028b3c 	.word	0x08028b3c
 80052ac:	20002da4 	.word	0x20002da4
 80052b0:	08028dc0 	.word	0x08028dc0
 80052b4:	08028798 	.word	0x08028798
 80052b8:	080287a8 	.word	0x080287a8
		}
	}
	ROLLOVER_VITAL_CAN:
 80052bc:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 80052be:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80052c2:	3308      	adds	r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da00      	bge.n	80052ca <Vital_Msg_extr_from_CAN+0x3d6>
 80052c8:	3307      	adds	r3, #7
 80052ca:	10db      	asrs	r3, r3, #3
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052d2:	4413      	add	r3, r2
 80052d4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80052d8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80052dc:	3308      	adds	r3, #8
 80052de:	b29b      	uxth	r3, r3
 80052e0:	b21b      	sxth	r3, r3
 80052e2:	425a      	negs	r2, r3
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	f002 0207 	and.w	r2, r2, #7
 80052ec:	bf58      	it	pl
 80052ee:	4253      	negpl	r3, r2
 80052f0:	b21b      	sxth	r3, r3
 80052f2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80052f6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	441a      	add	r2, r3
 80052fe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005302:	2110      	movs	r1, #16
 8005304:	4618      	mov	r0, r3
 8005306:	f7fb f985 	bl	8000614 <ExtractBits>
 800530a:	4603      	mov	r3, r0
 800530c:	b29b      	uxth	r3, r3
 800530e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8005312:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005316:	4619      	mov	r1, r3
 8005318:	48c6      	ldr	r0, [pc, #792]	; (8005634 <Vital_Msg_extr_from_CAN+0x740>)
 800531a:	f021 fb93 	bl	8026a44 <iprintf>
	BITSTUFFINC(16);
 800531e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005322:	3310      	adds	r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	da00      	bge.n	800532a <Vital_Msg_extr_from_CAN+0x436>
 8005328:	3307      	adds	r3, #7
 800532a:	10db      	asrs	r3, r3, #3
 800532c:	b29a      	uxth	r2, r3
 800532e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005332:	4413      	add	r3, r2
 8005334:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005338:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800533c:	3310      	adds	r3, #16
 800533e:	b29b      	uxth	r3, r3
 8005340:	b21b      	sxth	r3, r3
 8005342:	425a      	negs	r2, r3
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	f002 0207 	and.w	r2, r2, #7
 800534c:	bf58      	it	pl
 800534e:	4253      	negpl	r3, r2
 8005350:	b21b      	sxth	r3, r3
 8005352:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005356:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	441a      	add	r2, r3
 800535e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005362:	2110      	movs	r1, #16
 8005364:	4618      	mov	r0, r3
 8005366:	f7fb f955 	bl	8000614 <ExtractBits>
 800536a:	4603      	mov	r3, r0
 800536c:	b29b      	uxth	r3, r3
 800536e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8005372:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005376:	4619      	mov	r1, r3
 8005378:	48af      	ldr	r0, [pc, #700]	; (8005638 <Vital_Msg_extr_from_CAN+0x744>)
 800537a:	f021 fb63 	bl	8026a44 <iprintf>
	BITSTUFFINC(16);
 800537e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005382:	3310      	adds	r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	da00      	bge.n	800538a <Vital_Msg_extr_from_CAN+0x496>
 8005388:	3307      	adds	r3, #7
 800538a:	10db      	asrs	r3, r3, #3
 800538c:	b29a      	uxth	r2, r3
 800538e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005392:	4413      	add	r3, r2
 8005394:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005398:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800539c:	3310      	adds	r3, #16
 800539e:	b29b      	uxth	r3, r3
 80053a0:	b21b      	sxth	r3, r3
 80053a2:	425a      	negs	r2, r3
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	f002 0207 	and.w	r2, r2, #7
 80053ac:	bf58      	it	pl
 80053ae:	4253      	negpl	r3, r2
 80053b0:	b21b      	sxth	r3, r3
 80053b2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80053b6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	441a      	add	r2, r3
 80053be:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053c2:	2108      	movs	r1, #8
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fb f925 	bl	8000614 <ExtractBits>
 80053ca:	4603      	mov	r3, r0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 80053d2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80053d6:	3308      	adds	r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da00      	bge.n	80053de <Vital_Msg_extr_from_CAN+0x4ea>
 80053dc:	3307      	adds	r3, #7
 80053de:	10db      	asrs	r3, r3, #3
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053e6:	4413      	add	r3, r2
 80053e8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80053ec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053f0:	3308      	adds	r3, #8
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	425a      	negs	r2, r3
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	f002 0207 	and.w	r2, r2, #7
 8005400:	bf58      	it	pl
 8005402:	4253      	negpl	r3, r2
 8005404:	b21b      	sxth	r3, r3
 8005406:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800540a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	441a      	add	r2, r3
 8005412:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005416:	2108      	movs	r1, #8
 8005418:	4618      	mov	r0, r3
 800541a:	f7fb f8fb 	bl	8000614 <ExtractBits>
 800541e:	4603      	mov	r3, r0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8005426:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800542a:	3308      	adds	r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	da00      	bge.n	8005432 <Vital_Msg_extr_from_CAN+0x53e>
 8005430:	3307      	adds	r3, #7
 8005432:	10db      	asrs	r3, r3, #3
 8005434:	b29a      	uxth	r2, r3
 8005436:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800543a:	4413      	add	r3, r2
 800543c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005440:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005444:	3308      	adds	r3, #8
 8005446:	b29b      	uxth	r3, r3
 8005448:	b21b      	sxth	r3, r3
 800544a:	425a      	negs	r2, r3
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	f002 0207 	and.w	r2, r2, #7
 8005454:	bf58      	it	pl
 8005456:	4253      	negpl	r3, r2
 8005458:	b21b      	sxth	r3, r3
 800545a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800545e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	441a      	add	r2, r3
 8005466:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800546a:	2108      	movs	r1, #8
 800546c:	4618      	mov	r0, r3
 800546e:	f7fb f8d1 	bl	8000614 <ExtractBits>
 8005472:	4603      	mov	r3, r0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",CAN_Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800547a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800547e:	3308      	adds	r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	da00      	bge.n	8005486 <Vital_Msg_extr_from_CAN+0x592>
 8005484:	3307      	adds	r3, #7
 8005486:	10db      	asrs	r3, r3, #3
 8005488:	b29a      	uxth	r2, r3
 800548a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800548e:	4413      	add	r3, r2
 8005490:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005494:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005498:	3308      	adds	r3, #8
 800549a:	b29b      	uxth	r3, r3
 800549c:	b21b      	sxth	r3, r3
 800549e:	425a      	negs	r2, r3
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	f002 0207 	and.w	r2, r2, #7
 80054a8:	bf58      	it	pl
 80054aa:	4253      	negpl	r3, r2
 80054ac:	b21b      	sxth	r3, r3
 80054ae:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80054b2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	441a      	add	r2, r3
 80054ba:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054be:	2110      	movs	r1, #16
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb f8a7 	bl	8000614 <ExtractBits>
 80054c6:	4603      	mov	r3, r0
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 80054cc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80054d0:	3310      	adds	r3, #16
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da00      	bge.n	80054d8 <Vital_Msg_extr_from_CAN+0x5e4>
 80054d6:	3307      	adds	r3, #7
 80054d8:	10db      	asrs	r3, r3, #3
 80054da:	b29a      	uxth	r2, r3
 80054dc:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054e0:	4413      	add	r3, r2
 80054e2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80054e6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054ea:	3310      	adds	r3, #16
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b21b      	sxth	r3, r3
 80054f0:	425a      	negs	r2, r3
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	f002 0207 	and.w	r2, r2, #7
 80054fa:	bf58      	it	pl
 80054fc:	4253      	negpl	r3, r2
 80054fe:	b21b      	sxth	r3, r3
 8005500:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8005504:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80fe 	beq.w	800570c <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005510:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	441a      	add	r2, r3
 8005518:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800551c:	2108      	movs	r1, #8
 800551e:	4618      	mov	r0, r3
 8005520:	f7fb f878 	bl	8000614 <ExtractBits>
 8005524:	4603      	mov	r3, r0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 800552c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005530:	3308      	adds	r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	da00      	bge.n	8005538 <Vital_Msg_extr_from_CAN+0x644>
 8005536:	3307      	adds	r3, #7
 8005538:	10db      	asrs	r3, r3, #3
 800553a:	b29a      	uxth	r2, r3
 800553c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005540:	4413      	add	r3, r2
 8005542:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005546:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800554a:	3308      	adds	r3, #8
 800554c:	b29b      	uxth	r3, r3
 800554e:	b21b      	sxth	r3, r3
 8005550:	425a      	negs	r2, r3
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	f002 0207 	and.w	r2, r2, #7
 800555a:	bf58      	it	pl
 800555c:	4253      	negpl	r3, r2
 800555e:	b21b      	sxth	r3, r3
 8005560:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005564:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	441a      	add	r2, r3
 800556c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005570:	2108      	movs	r1, #8
 8005572:	4618      	mov	r0, r3
 8005574:	f7fb f84e 	bl	8000614 <ExtractBits>
 8005578:	4603      	mov	r3, r0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8005580:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005584:	3308      	adds	r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	da00      	bge.n	800558c <Vital_Msg_extr_from_CAN+0x698>
 800558a:	3307      	adds	r3, #7
 800558c:	10db      	asrs	r3, r3, #3
 800558e:	b29a      	uxth	r2, r3
 8005590:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005594:	4413      	add	r3, r2
 8005596:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800559a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800559e:	3308      	adds	r3, #8
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	b21b      	sxth	r3, r3
 80055a4:	425a      	negs	r2, r3
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	f002 0207 	and.w	r2, r2, #7
 80055ae:	bf58      	it	pl
 80055b0:	4253      	negpl	r3, r2
 80055b2:	b21b      	sxth	r3, r3
 80055b4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80055b8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	441a      	add	r2, r3
 80055c0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055c4:	2108      	movs	r1, #8
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fb f824 	bl	8000614 <ExtractBits>
 80055cc:	4603      	mov	r3, r0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 80055d2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80055d6:	3308      	adds	r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da00      	bge.n	80055de <Vital_Msg_extr_from_CAN+0x6ea>
 80055dc:	3307      	adds	r3, #7
 80055de:	10db      	asrs	r3, r3, #3
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055e6:	4413      	add	r3, r2
 80055e8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80055ec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055f0:	3308      	adds	r3, #8
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	b21b      	sxth	r3, r3
 80055f6:	425a      	negs	r2, r3
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	f002 0207 	and.w	r2, r2, #7
 8005600:	bf58      	it	pl
 8005602:	4253      	negpl	r3, r2
 8005604:	b21b      	sxth	r3, r3
 8005606:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800560a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	441a      	add	r2, r3
 8005612:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005616:	2108      	movs	r1, #8
 8005618:	4618      	mov	r0, r3
 800561a:	f7fa fffb 	bl	8000614 <ExtractBits>
 800561e:	4603      	mov	r3, r0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8005624:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005628:	3308      	adds	r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	da06      	bge.n	800563c <Vital_Msg_extr_from_CAN+0x748>
 800562e:	3307      	adds	r3, #7
 8005630:	e004      	b.n	800563c <Vital_Msg_extr_from_CAN+0x748>
 8005632:	bf00      	nop
 8005634:	08028888 	.word	0x08028888
 8005638:	08028890 	.word	0x08028890
 800563c:	10db      	asrs	r3, r3, #3
 800563e:	b29a      	uxth	r2, r3
 8005640:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005644:	4413      	add	r3, r2
 8005646:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800564a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800564e:	3308      	adds	r3, #8
 8005650:	b29b      	uxth	r3, r3
 8005652:	b21b      	sxth	r3, r3
 8005654:	425a      	negs	r2, r3
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	f002 0207 	and.w	r2, r2, #7
 800565e:	bf58      	it	pl
 8005660:	4253      	negpl	r3, r2
 8005662:	b21b      	sxth	r3, r3
 8005664:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005668:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	441a      	add	r2, r3
 8005670:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005674:	2108      	movs	r1, #8
 8005676:	4618      	mov	r0, r3
 8005678:	f7fa ffcc 	bl	8000614 <ExtractBits>
 800567c:	4603      	mov	r3, r0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8005682:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005686:	3308      	adds	r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	da00      	bge.n	800568e <Vital_Msg_extr_from_CAN+0x79a>
 800568c:	3307      	adds	r3, #7
 800568e:	10db      	asrs	r3, r3, #3
 8005690:	b29a      	uxth	r2, r3
 8005692:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005696:	4413      	add	r3, r2
 8005698:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800569c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056a0:	3308      	adds	r3, #8
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	425a      	negs	r2, r3
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	f002 0207 	and.w	r2, r2, #7
 80056b0:	bf58      	it	pl
 80056b2:	4253      	negpl	r3, r2
 80056b4:	b21b      	sxth	r3, r3
 80056b6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80056ba:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	441a      	add	r2, r3
 80056c2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056c6:	2108      	movs	r1, #8
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fa ffa3 	bl	8000614 <ExtractBits>
 80056ce:	4603      	mov	r3, r0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 80056d4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80056d8:	3308      	adds	r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	da00      	bge.n	80056e0 <Vital_Msg_extr_from_CAN+0x7ec>
 80056de:	3307      	adds	r3, #7
 80056e0:	10db      	asrs	r3, r3, #3
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056e8:	4413      	add	r3, r2
 80056ea:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80056ee:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056f2:	3308      	adds	r3, #8
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	b21b      	sxth	r3, r3
 80056f8:	425a      	negs	r2, r3
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	f002 0207 	and.w	r2, r2, #7
 8005702:	bf58      	it	pl
 8005704:	4253      	negpl	r3, r2
 8005706:	b21b      	sxth	r3, r3
 8005708:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 800570c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800571c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	441a      	add	r2, r3
 8005724:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005728:	2108      	movs	r1, #8
 800572a:	4618      	mov	r0, r3
 800572c:	f7fa ff72 	bl	8000614 <ExtractBits>
 8005730:	4603      	mov	r3, r0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8005738:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800573c:	3308      	adds	r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	da00      	bge.n	8005744 <Vital_Msg_extr_from_CAN+0x850>
 8005742:	3307      	adds	r3, #7
 8005744:	10db      	asrs	r3, r3, #3
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800574c:	4413      	add	r3, r2
 800574e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005752:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005756:	3308      	adds	r3, #8
 8005758:	b29b      	uxth	r3, r3
 800575a:	b21b      	sxth	r3, r3
 800575c:	425a      	negs	r2, r3
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	f002 0207 	and.w	r2, r2, #7
 8005766:	bf58      	it	pl
 8005768:	4253      	negpl	r3, r2
 800576a:	b21b      	sxth	r3, r3
 800576c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8005770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005774:	4619      	mov	r1, r3
 8005776:	484b      	ldr	r0, [pc, #300]	; (80058a4 <Vital_Msg_extr_from_CAN+0x9b0>)
 8005778:	f021 f964 	bl	8026a44 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800577c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	441a      	add	r2, r3
 8005784:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005788:	2108      	movs	r1, #8
 800578a:	4618      	mov	r0, r3
 800578c:	f7fa ff42 	bl	8000614 <ExtractBits>
 8005790:	4603      	mov	r3, r0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8005798:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800579c:	3308      	adds	r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da00      	bge.n	80057a4 <Vital_Msg_extr_from_CAN+0x8b0>
 80057a2:	3307      	adds	r3, #7
 80057a4:	10db      	asrs	r3, r3, #3
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80057ac:	4413      	add	r3, r2
 80057ae:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80057b2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80057b6:	3308      	adds	r3, #8
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	b21b      	sxth	r3, r3
 80057bc:	425a      	negs	r2, r3
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	f002 0207 	and.w	r2, r2, #7
 80057c6:	bf58      	it	pl
 80057c8:	4253      	negpl	r3, r2
 80057ca:	b21b      	sxth	r3, r3
 80057cc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 80057d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 80057dc:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 80057e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057e8:	08db      	lsrs	r3, r3, #3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	3301      	adds	r3, #1
 80057ee:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 80057f2:	e004      	b.n	80057fe <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 80057f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057f8:	08db      	lsrs	r3, r3, #3
 80057fa:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80057fe:	2300      	movs	r3, #0
 8005800:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005804:	e040      	b.n	8005888 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005806:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	441a      	add	r2, r3
 800580e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005812:	2108      	movs	r1, #8
 8005814:	4618      	mov	r0, r3
 8005816:	f7fa fefd 	bl	8000614 <ExtractBits>
 800581a:	4602      	mov	r2, r0
 800581c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005826:	443b      	add	r3, r7
 8005828:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 800582c:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8005830:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005834:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005838:	443b      	add	r3, r7
 800583a:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 800583e:	461a      	mov	r2, r3
 8005840:	4819      	ldr	r0, [pc, #100]	; (80058a8 <Vital_Msg_extr_from_CAN+0x9b4>)
 8005842:	f021 f8ff 	bl	8026a44 <iprintf>
		BITSTUFFINC(8);
 8005846:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800584a:	3308      	adds	r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	da00      	bge.n	8005852 <Vital_Msg_extr_from_CAN+0x95e>
 8005850:	3307      	adds	r3, #7
 8005852:	10db      	asrs	r3, r3, #3
 8005854:	b29a      	uxth	r2, r3
 8005856:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800585a:	4413      	add	r3, r2
 800585c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005860:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005864:	3308      	adds	r3, #8
 8005866:	b29b      	uxth	r3, r3
 8005868:	b21b      	sxth	r3, r3
 800586a:	425a      	negs	r2, r3
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	f002 0207 	and.w	r2, r2, #7
 8005874:	bf58      	it	pl
 8005876:	4253      	negpl	r3, r2
 8005878:	b21b      	sxth	r3, r3
 800587a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 800587e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005882:	3301      	adds	r3, #1
 8005884:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005888:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 800588c:	b29b      	uxth	r3, r3
 800588e:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005892:	429a      	cmp	r2, r3
 8005894:	d3b7      	bcc.n	8005806 <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 8005896:	200a      	movs	r0, #10
 8005898:	f021 f8ec 	bl	8026a74 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 800589c:	2300      	movs	r3, #0
 800589e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80058a2:	e037      	b.n	8005914 <Vital_Msg_extr_from_CAN+0xa20>
 80058a4:	08028ddc 	.word	0x08028ddc
 80058a8:	08028de4 	.word	0x08028de4
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80058ac:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	441a      	add	r2, r3
 80058b4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80058b8:	2108      	movs	r1, #8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fa feaa 	bl	8000614 <ExtractBits>
 80058c0:	4602      	mov	r2, r0
 80058c2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80058cc:	443b      	add	r3, r7
 80058ce:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80058d2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80058d6:	3308      	adds	r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	da00      	bge.n	80058de <Vital_Msg_extr_from_CAN+0x9ea>
 80058dc:	3307      	adds	r3, #7
 80058de:	10db      	asrs	r3, r3, #3
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80058e6:	4413      	add	r3, r2
 80058e8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80058ec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80058f0:	3308      	adds	r3, #8
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	425a      	negs	r2, r3
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	f002 0207 	and.w	r2, r2, #7
 8005900:	bf58      	it	pl
 8005902:	4253      	negpl	r3, r2
 8005904:	b21b      	sxth	r3, r3
 8005906:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 800590a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800590e:	3301      	adds	r3, #1
 8005910:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005914:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005918:	b29b      	uxth	r3, r3
 800591a:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 800591e:	429a      	cmp	r2, r3
 8005920:	d3c4      	bcc.n	80058ac <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 8005922:	f107 0308 	add.w	r3, r7, #8
 8005926:	3301      	adds	r3, #1
 8005928:	2210      	movs	r2, #16
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f020 ffa1 	bl	8026874 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 8005932:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800593a:	1d59      	adds	r1, r3, #5
 800593c:	f107 0308 	add.w	r3, r7, #8
 8005940:	3301      	adds	r3, #1
 8005942:	4618      	mov	r0, r3
 8005944:	f020 ff6e 	bl	8026824 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 8005948:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 800594c:	b21a      	sxth	r2, r3
 800594e:	f107 0308 	add.w	r3, r7, #8
 8005952:	3301      	adds	r3, #1
 8005954:	4619      	mov	r1, r3
 8005956:	2000      	movs	r0, #0
 8005958:	f010 fa24 	bl	8015da4 <GetCRC16>
 800595c:	4603      	mov	r3, r0
 800595e:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 8005960:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005964:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 8005966:	78bb      	ldrb	r3, [r7, #2]
 8005968:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 800596a:	78bb      	ldrb	r3, [r7, #2]
 800596c:	4a62      	ldr	r2, [pc, #392]	; (8005af8 <Vital_Msg_extr_from_CAN+0xc04>)
 800596e:	4413      	add	r3, r2
 8005970:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005974:	2b01      	cmp	r3, #1
 8005976:	f040 8082 	bne.w	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
 800597a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800597e:	2b01      	cmp	r3, #1
 8005980:	d17d      	bne.n	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
 8005982:	8b79      	ldrh	r1, [r7, #26]
 8005984:	78ba      	ldrb	r2, [r7, #2]
 8005986:	485d      	ldr	r0, [pc, #372]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4403      	add	r3, r0
 8005992:	3312      	adds	r3, #18
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	4299      	cmp	r1, r3
 8005998:	d071      	beq.n	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800599a:	78ba      	ldrb	r2, [r7, #2]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4a55      	ldr	r2, [pc, #340]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 80059a6:	4413      	add	r3, r2
 80059a8:	3301      	adds	r3, #1
 80059aa:	2210      	movs	r2, #16
 80059ac:	2100      	movs	r1, #0
 80059ae:	4618      	mov	r0, r3
 80059b0:	f020 ff60 	bl	8026874 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80059b4:	78ba      	ldrb	r2, [r7, #2]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4a4f      	ldr	r2, [pc, #316]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 80059c0:	4413      	add	r3, r2
 80059c2:	f107 0108 	add.w	r1, r7, #8
 80059c6:	2214      	movs	r2, #20
 80059c8:	4618      	mov	r0, r3
 80059ca:	f020 ff2b 	bl	8026824 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80059ce:	78bb      	ldrb	r3, [r7, #2]
 80059d0:	494b      	ldr	r1, [pc, #300]	; (8005b00 <Vital_Msg_extr_from_CAN+0xc0c>)
 80059d2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80059d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80059da:	78bb      	ldrb	r3, [r7, #2]
 80059dc:	4a49      	ldr	r2, [pc, #292]	; (8005b04 <Vital_Msg_extr_from_CAN+0xc10>)
 80059de:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80059e2:	78ba      	ldrb	r2, [r7, #2]
 80059e4:	4845      	ldr	r0, [pc, #276]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4403      	add	r3, r0
 80059f0:	3312      	adds	r3, #18
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	4299      	cmp	r1, r3
 80059f6:	d042      	beq.n	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80059f8:	78ba      	ldrb	r2, [r7, #2]
 80059fa:	78b9      	ldrb	r1, [r7, #2]
 80059fc:	483f      	ldr	r0, [pc, #252]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4403      	add	r3, r0
 8005a08:	3312      	adds	r3, #18
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	4b3d      	ldr	r3, [pc, #244]	; (8005b04 <Vital_Msg_extr_from_CAN+0xc10>)
 8005a0e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005a12:	2214      	movs	r2, #20
 8005a14:	2100      	movs	r1, #0
 8005a16:	483c      	ldr	r0, [pc, #240]	; (8005b08 <Vital_Msg_extr_from_CAN+0xc14>)
 8005a18:	f020 ff2c 	bl	8026874 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005a1c:	78ba      	ldrb	r2, [r7, #2]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4a35      	ldr	r2, [pc, #212]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	2214      	movs	r2, #20
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4836      	ldr	r0, [pc, #216]	; (8005b08 <Vital_Msg_extr_from_CAN+0xc14>)
 8005a30:	f020 fef8 	bl	8026824 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005a34:	f240 2007 	movw	r0, #519	; 0x207
 8005a38:	f00b fa92 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 8005a3c:	78bb      	ldrb	r3, [r7, #2]
 8005a3e:	4a33      	ldr	r2, [pc, #204]	; (8005b0c <Vital_Msg_extr_from_CAN+0xc18>)
 8005a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11a      	bne.n	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005a48:	78bb      	ldrb	r3, [r7, #2]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	4a30      	ldr	r2, [pc, #192]	; (8005b10 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005a4e:	4413      	add	r3, r2
 8005a50:	1c98      	adds	r0, r3, #2
 8005a52:	78ba      	ldrb	r2, [r7, #2]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a27      	ldr	r2, [pc, #156]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 8005a5e:	4413      	add	r3, r2
 8005a60:	3301      	adds	r3, #1
 8005a62:	2210      	movs	r2, #16
 8005a64:	4619      	mov	r1, r3
 8005a66:	f020 fedd 	bl	8026824 <memcpy>
#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif

#ifdef EI_1
				ReArrangedVitalData();
 8005a6a:	f004 fe4b 	bl	800a704 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 8005a6e:	f240 1019 	movw	r0, #281	; 0x119
 8005a72:	f00b fa75 	bl	8010f60 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005a76:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <Vital_Msg_extr_from_CAN+0xc20>)
 8005a78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a7c:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005a7e:	78ba      	ldrb	r2, [r7, #2]
 8005a80:	4925      	ldr	r1, [pc, #148]	; (8005b18 <Vital_Msg_extr_from_CAN+0xc24>)
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	440b      	add	r3, r1
 8005a8c:	78ba      	ldrb	r2, [r7, #2]
 8005a8e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005a90:	78ba      	ldrb	r2, [r7, #2]
 8005a92:	4921      	ldr	r1, [pc, #132]	; (8005b18 <Vital_Msg_extr_from_CAN+0xc24>)
 8005a94:	4613      	mov	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005aa4:	2218      	movs	r2, #24
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	481c      	ldr	r0, [pc, #112]	; (8005b1c <Vital_Msg_extr_from_CAN+0xc28>)
 8005aaa:	f020 fee3 	bl	8026874 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005aae:	78ba      	ldrb	r2, [r7, #2]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <Vital_Msg_extr_from_CAN+0xc24>)
 8005aba:	4413      	add	r3, r2
 8005abc:	2218      	movs	r2, #24
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4816      	ldr	r0, [pc, #88]	; (8005b1c <Vital_Msg_extr_from_CAN+0xc28>)
 8005ac2:	f020 feaf 	bl	8026824 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005ac6:	f240 2001 	movw	r0, #513	; 0x201
 8005aca:	f00b fa49 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005ace:	78ba      	ldrb	r2, [r7, #2]
 8005ad0:	4911      	ldr	r1, [pc, #68]	; (8005b18 <Vital_Msg_extr_from_CAN+0xc24>)
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	440b      	add	r3, r1
 8005adc:	3301      	adds	r3, #1
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005ae2:	78bb      	ldrb	r3, [r7, #2]
 8005ae4:	490e      	ldr	r1, [pc, #56]	; (8005b20 <Vital_Msg_extr_from_CAN+0xc2c>)
 8005ae6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 8005aee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000504 	.word	0x20000504
 8005afc:	200035b0 	.word	0x200035b0
 8005b00:	20002564 	.word	0x20002564
 8005b04:	2000258c 	.word	0x2000258c
 8005b08:	20003740 	.word	0x20003740
 8005b0c:	20002550 	.word	0x20002550
 8005b10:	20002770 	.word	0x20002770
 8005b14:	200024e4 	.word	0x200024e4
 8005b18:	20002da4 	.word	0x20002da4
 8005b1c:	20002f84 	.word	0x20002f84
 8005b20:	200024b8 	.word	0x200024b8

08005b24 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b095      	sub	sp, #84	; 0x54
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	4611      	mov	r1, r2
 8005b30:	461a      	mov	r2, r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	70fb      	strb	r3, [r7, #3]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70bb      	strb	r3, [r7, #2]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f020 fe92 	bl	8026874 <memset>
	uint8_t uc_index = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = RESET;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005b64:	f013 ff64 	bl	8019a30 <HAL_GetTick>
 8005b68:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 8005b70:	2300      	movs	r3, #0
 8005b72:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b74:	2300      	movs	r3, #0
 8005b76:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005b78:	499a      	ldr	r1, [pc, #616]	; (8005de4 <Status_Msg_Extr+0x2c0>)
 8005b7a:	489b      	ldr	r0, [pc, #620]	; (8005de8 <Status_Msg_Extr+0x2c4>)
 8005b7c:	f7fa fb60 	bl	8000240 <strcmp>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 812c 	beq.w	8005de0 <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005b88:	4b98      	ldr	r3, [pc, #608]	; (8005dec <Status_Msg_Extr+0x2c8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d02c      	beq.n	8005bee <Status_Msg_Extr+0xca>
 8005b94:	4b95      	ldr	r3, [pc, #596]	; (8005dec <Status_Msg_Extr+0x2c8>)
 8005b96:	791b      	ldrb	r3, [r3, #4]
 8005b98:	78ba      	ldrb	r2, [r7, #2]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d127      	bne.n	8005bee <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 8005ba2:	4893      	ldr	r0, [pc, #588]	; (8005df0 <Status_Msg_Extr+0x2cc>)
 8005ba4:	f018 fbf6 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b92      	ldr	r3, [pc, #584]	; (8005df4 <Status_Msg_Extr+0x2d0>)
 8005bac:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb0:	0bd9      	lsrs	r1, r3, #15
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 8005bbc:	488e      	ldr	r0, [pc, #568]	; (8005df8 <Status_Msg_Extr+0x2d4>)
 8005bbe:	f020 ffdd 	bl	8026b7c <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005bc2:	78bb      	ldrb	r3, [r7, #2]
 8005bc4:	4a8d      	ldr	r2, [pc, #564]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	4413      	add	r3, r2
 8005bca:	3308      	adds	r3, #8
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	488b      	ldr	r0, [pc, #556]	; (8005e00 <Status_Msg_Extr+0x2dc>)
 8005bd2:	f020 ff37 	bl	8026a44 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8005bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bd8:	488a      	ldr	r0, [pc, #552]	; (8005e04 <Status_Msg_Extr+0x2e0>)
 8005bda:	f020 ff33 	bl	8026a44 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 8005bde:	f107 0208 	add.w	r2, r7, #8
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2118      	movs	r1, #24
 8005be6:	2000      	movs	r0, #0
 8005be8:	f7fa fda0 	bl	800072c <InsertBits>
	{
 8005bec:	e00b      	b.n	8005c06 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005bee:	78bb      	ldrb	r3, [r7, #2]
 8005bf0:	4a82      	ldr	r2, [pc, #520]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f107 0208 	add.w	r2, r7, #8
 8005bfe:	2118      	movs	r1, #24
 8005c00:	2000      	movs	r0, #0
 8005c02:	f7fa fd93 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005c0c:	e010      	b.n	8005c30 <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005c0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	441a      	add	r2, r3
 8005c16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c1a:	3303      	adds	r3, #3
 8005c1c:	7812      	ldrb	r2, [r2, #0]
 8005c1e:	3350      	adds	r3, #80	; 0x50
 8005c20:	443b      	add	r3, r7
 8005c22:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005c26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005c30:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	3b05      	subs	r3, #5
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	dbe8      	blt.n	8005c0e <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005c3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3303      	adds	r3, #3
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f010 f963 	bl	8015f18 <CalculateDirectReverseCrc>
 8005c52:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	3b05      	subs	r3, #5
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	441a      	add	r2, r3
 8005c5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c5e:	2120      	movs	r1, #32
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fcd7 	bl	8000614 <ExtractBits>
 8005c66:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	f000 80df 	beq.w	8005e30 <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3305      	adds	r3, #5
 8005c76:	461a      	mov	r2, r3
 8005c78:	2108      	movs	r1, #8
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f7fa fcca 	bl	8000614 <ExtractBits>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 8005c86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d004      	beq.n	8005c98 <Status_Msg_Extr+0x174>
 8005c8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	f040 8090 	bne.w	8005db8 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005c98:	78bb      	ldrb	r3, [r7, #2]
 8005c9a:	4a5b      	ldr	r2, [pc, #364]	; (8005e08 <Status_Msg_Extr+0x2e4>)
 8005c9c:	3366      	adds	r3, #102	; 0x66
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4859      	ldr	r0, [pc, #356]	; (8005e0c <Status_Msg_Extr+0x2e8>)
 8005ca8:	f020 fecc 	bl	8026a44 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 8005cac:	f107 0308 	add.w	r3, r7, #8
 8005cb0:	2228      	movs	r2, #40	; 0x28
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f020 fddd 	bl	8026874 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8005cba:	78bb      	ldrb	r3, [r7, #2]
 8005cbc:	4a4f      	ldr	r2, [pc, #316]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	f107 0208 	add.w	r2, r7, #8
 8005ccc:	2118      	movs	r1, #24
 8005cce:	2000      	movs	r0, #0
 8005cd0:	f7fa fd2c 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005cda:	e010      	b.n	8005cfe <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005cdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	441a      	add	r2, r3
 8005ce4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ce8:	3303      	adds	r3, #3
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	3350      	adds	r3, #80	; 0x50
 8005cee:	443b      	add	r3, r7
 8005cf0:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005cf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005cfe:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	3b05      	subs	r3, #5
 8005d06:	429a      	cmp	r2, r3
 8005d08:	dbe8      	blt.n	8005cdc <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005d0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3303      	adds	r3, #3
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	4611      	mov	r1, r2
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f010 f8fc 	bl	8015f18 <CalculateDirectReverseCrc>
 8005d20:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 8005d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d132      	bne.n	8005d90 <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005d2a:	4839      	ldr	r0, [pc, #228]	; (8005e10 <Status_Msg_Extr+0x2ec>)
 8005d2c:	f020 ff26 	bl	8026b7c <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005d30:	78bb      	ldrb	r3, [r7, #2]
 8005d32:	4a32      	ldr	r2, [pc, #200]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	4413      	add	r3, r2
 8005d38:	3308      	adds	r3, #8
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4835      	ldr	r0, [pc, #212]	; (8005e14 <Status_Msg_Extr+0x2f0>)
 8005d40:	f020 fe80 	bl	8026a44 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005d44:	78bb      	ldrb	r3, [r7, #2]
 8005d46:	492d      	ldr	r1, [pc, #180]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d48:	011a      	lsls	r2, r3, #4
 8005d4a:	440a      	add	r2, r1
 8005d4c:	3208      	adds	r2, #8
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	3201      	adds	r2, #1
 8005d52:	492a      	ldr	r1, [pc, #168]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	440b      	add	r3, r1
 8005d58:	3308      	adds	r3, #8
 8005d5a:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005d5c:	78bb      	ldrb	r3, [r7, #2]
 8005d5e:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	4413      	add	r3, r2
 8005d64:	3308      	adds	r3, #8
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	482b      	ldr	r0, [pc, #172]	; (8005e18 <Status_Msg_Extr+0x2f4>)
 8005d6c:	f020 fe6a 	bl	8026a44 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005d70:	78bb      	ldrb	r3, [r7, #2]
 8005d72:	78ba      	ldrb	r2, [r7, #2]
 8005d74:	4921      	ldr	r1, [pc, #132]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	440b      	add	r3, r1
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	6819      	ldr	r1, [r3, #0]
 8005d7e:	4827      	ldr	r0, [pc, #156]	; (8005e1c <Status_Msg_Extr+0x2f8>)
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4403      	add	r3, r0
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 8005d8e:	e050      	b.n	8005e32 <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005d90:	78bb      	ldrb	r3, [r7, #2]
 8005d92:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <Status_Msg_Extr+0x2e4>)
 8005d94:	3366      	adds	r3, #102	; 0x66
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4820      	ldr	r0, [pc, #128]	; (8005e20 <Status_Msg_Extr+0x2fc>)
 8005da0:	f020 fe50 	bl	8026a44 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005da4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005da6:	481f      	ldr	r0, [pc, #124]	; (8005e24 <Status_Msg_Extr+0x300>)
 8005da8:	f020 fe4c 	bl	8026a44 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005dac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dae:	481e      	ldr	r0, [pc, #120]	; (8005e28 <Status_Msg_Extr+0x304>)
 8005db0:	f020 fe48 	bl	8026a44 <iprintf>
				return;
 8005db4:	f000 bca7 	b.w	8006706 <Status_Msg_Extr+0xbe2>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005db8:	78bb      	ldrb	r3, [r7, #2]
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <Status_Msg_Extr+0x2e4>)
 8005dbc:	3366      	adds	r3, #102	; 0x66
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4819      	ldr	r0, [pc, #100]	; (8005e2c <Status_Msg_Extr+0x308>)
 8005dc8:	f020 fe3c 	bl	8026a44 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005dcc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005dce:	4815      	ldr	r0, [pc, #84]	; (8005e24 <Status_Msg_Extr+0x300>)
 8005dd0:	f020 fe38 	bl	8026a44 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd6:	4814      	ldr	r0, [pc, #80]	; (8005e28 <Status_Msg_Extr+0x304>)
 8005dd8:	f020 fe34 	bl	8026a44 <iprintf>
			return;
 8005ddc:	f000 bc93 	b.w	8006706 <Status_Msg_Extr+0xbe2>
		goto ROLLOVER_STATUS;
 8005de0:	bf00      	nop
 8005de2:	e026      	b.n	8005e32 <Status_Msg_Extr+0x30e>
 8005de4:	08028554 	.word	0x08028554
 8005de8:	20000505 	.word	0x20000505
 8005dec:	2000308c 	.word	0x2000308c
 8005df0:	2000bcec 	.word	0x2000bcec
 8005df4:	80008001 	.word	0x80008001
 8005df8:	08028df4 	.word	0x08028df4
 8005dfc:	200028f4 	.word	0x200028f4
 8005e00:	08028e14 	.word	0x08028e14
 8005e04:	08028aa0 	.word	0x08028aa0
 8005e08:	20000504 	.word	0x20000504
 8005e0c:	08028e38 	.word	0x08028e38
 8005e10:	08028ae4 	.word	0x08028ae4
 8005e14:	08028e5c 	.word	0x08028e5c
 8005e18:	08028e74 	.word	0x08028e74
 8005e1c:	20002da4 	.word	0x20002da4
 8005e20:	08028e8c 	.word	0x08028e8c
 8005e24:	08028798 	.word	0x08028798
 8005e28:	080287a8 	.word	0x080287a8
 8005e2c:	08028eac 	.word	0x08028eac
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005e30:	bf00      	nop

	BITSTUFFINC(8);
 8005e32:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005e36:	3308      	adds	r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	da00      	bge.n	8005e3e <Status_Msg_Extr+0x31a>
 8005e3c:	3307      	adds	r3, #7
 8005e3e:	10db      	asrs	r3, r3, #3
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e44:	4413      	add	r3, r2
 8005e46:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	b21b      	sxth	r3, r3
 8005e50:	425a      	negs	r2, r3
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	f002 0207 	and.w	r2, r2, #7
 8005e5a:	bf58      	it	pl
 8005e5c:	4253      	negpl	r3, r2
 8005e5e:	b21b      	sxth	r3, r3
 8005e60:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005e62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	441a      	add	r2, r3
 8005e68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e6a:	2110      	movs	r1, #16
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fa fbd1 	bl	8000614 <ExtractBits>
 8005e72:	4603      	mov	r3, r0
 8005e74:	78ba      	ldrb	r2, [r7, #2]
 8005e76:	b298      	uxth	r0, r3
 8005e78:	49ab      	ldr	r1, [pc, #684]	; (8006128 <Status_Msg_Extr+0x604>)
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	3306      	adds	r3, #6
 8005e86:	4602      	mov	r2, r0
 8005e88:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8005e8a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005e8e:	3310      	adds	r3, #16
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da00      	bge.n	8005e96 <Status_Msg_Extr+0x372>
 8005e94:	3307      	adds	r3, #7
 8005e96:	10db      	asrs	r3, r3, #3
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e9c:	4413      	add	r3, r2
 8005e9e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ea0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ea2:	3310      	adds	r3, #16
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b21b      	sxth	r3, r3
 8005ea8:	425a      	negs	r2, r3
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	f002 0207 	and.w	r2, r2, #7
 8005eb2:	bf58      	it	pl
 8005eb4:	4253      	negpl	r3, r2
 8005eb6:	b21b      	sxth	r3, r3
 8005eb8:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005eba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	441a      	add	r2, r3
 8005ec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ec2:	2110      	movs	r1, #16
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fa fba5 	bl	8000614 <ExtractBits>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	78ba      	ldrb	r2, [r7, #2]
 8005ece:	b298      	uxth	r0, r3
 8005ed0:	4995      	ldr	r1, [pc, #596]	; (8006128 <Status_Msg_Extr+0x604>)
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	3304      	adds	r3, #4
 8005ede:	4602      	mov	r2, r0
 8005ee0:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8005ee2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ee6:	3310      	adds	r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da00      	bge.n	8005eee <Status_Msg_Extr+0x3ca>
 8005eec:	3307      	adds	r3, #7
 8005eee:	10db      	asrs	r3, r3, #3
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ef4:	4413      	add	r3, r2
 8005ef6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005efa:	3310      	adds	r3, #16
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	425a      	negs	r2, r3
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	f002 0207 	and.w	r2, r2, #7
 8005f0a:	bf58      	it	pl
 8005f0c:	4253      	negpl	r3, r2
 8005f0e:	b21b      	sxth	r3, r3
 8005f10:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005f12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	441a      	add	r2, r3
 8005f18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f1a:	2108      	movs	r1, #8
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fa fb79 	bl	8000614 <ExtractBits>
 8005f22:	4602      	mov	r2, r0
 8005f24:	78bb      	ldrb	r3, [r7, #2]
 8005f26:	b2d1      	uxtb	r1, r2
 8005f28:	4a80      	ldr	r2, [pc, #512]	; (800612c <Status_Msg_Extr+0x608>)
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3302      	adds	r3, #2
 8005f30:	460a      	mov	r2, r1
 8005f32:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005f34:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005f38:	3308      	adds	r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da00      	bge.n	8005f40 <Status_Msg_Extr+0x41c>
 8005f3e:	3307      	adds	r3, #7
 8005f40:	10db      	asrs	r3, r3, #3
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f46:	4413      	add	r3, r2
 8005f48:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	b21b      	sxth	r3, r3
 8005f52:	425a      	negs	r2, r3
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	f002 0207 	and.w	r2, r2, #7
 8005f5c:	bf58      	it	pl
 8005f5e:	4253      	negpl	r3, r2
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005f64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	441a      	add	r2, r3
 8005f6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f6c:	2108      	movs	r1, #8
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fa fb50 	bl	8000614 <ExtractBits>
 8005f74:	4602      	mov	r2, r0
 8005f76:	78bb      	ldrb	r3, [r7, #2]
 8005f78:	b2d1      	uxtb	r1, r2
 8005f7a:	4a6c      	ldr	r2, [pc, #432]	; (800612c <Status_Msg_Extr+0x608>)
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	4413      	add	r3, r2
 8005f80:	3301      	adds	r3, #1
 8005f82:	460a      	mov	r2, r1
 8005f84:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8005f86:	78bb      	ldrb	r3, [r7, #2]
 8005f88:	4a68      	ldr	r2, [pc, #416]	; (800612c <Status_Msg_Extr+0x608>)
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3301      	adds	r3, #1
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d138      	bne.n	8006008 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005f96:	78bb      	ldrb	r3, [r7, #2]
 8005f98:	4a65      	ldr	r2, [pc, #404]	; (8006130 <Status_Msg_Extr+0x60c>)
 8005f9a:	3366      	adds	r3, #102	; 0x66
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4863      	ldr	r0, [pc, #396]	; (8006134 <Status_Msg_Extr+0x610>)
 8005fa6:	f020 fd4d 	bl	8026a44 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005faa:	78bb      	ldrb	r3, [r7, #2]
 8005fac:	4a5f      	ldr	r2, [pc, #380]	; (800612c <Status_Msg_Extr+0x608>)
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	4413      	add	r3, r2
 8005fb2:	330c      	adds	r3, #12
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	485f      	ldr	r0, [pc, #380]	; (8006138 <Status_Msg_Extr+0x614>)
 8005fba:	f020 fd43 	bl	8026a44 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005fbe:	78bb      	ldrb	r3, [r7, #2]
 8005fc0:	495a      	ldr	r1, [pc, #360]	; (800612c <Status_Msg_Extr+0x608>)
 8005fc2:	011a      	lsls	r2, r3, #4
 8005fc4:	440a      	add	r2, r1
 8005fc6:	320c      	adds	r2, #12
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	3201      	adds	r2, #1
 8005fcc:	4957      	ldr	r1, [pc, #348]	; (800612c <Status_Msg_Extr+0x608>)
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	440b      	add	r3, r1
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005fd6:	78bb      	ldrb	r3, [r7, #2]
 8005fd8:	4a54      	ldr	r2, [pc, #336]	; (800612c <Status_Msg_Extr+0x608>)
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	4413      	add	r3, r2
 8005fde:	330c      	adds	r3, #12
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4855      	ldr	r0, [pc, #340]	; (800613c <Status_Msg_Extr+0x618>)
 8005fe6:	f020 fd2d 	bl	8026a44 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005fea:	78bb      	ldrb	r3, [r7, #2]
 8005fec:	78ba      	ldrb	r2, [r7, #2]
 8005fee:	494f      	ldr	r1, [pc, #316]	; (800612c <Status_Msg_Extr+0x608>)
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	440b      	add	r3, r1
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	6819      	ldr	r1, [r3, #0]
 8005ff8:	4851      	ldr	r0, [pc, #324]	; (8006140 <Status_Msg_Extr+0x61c>)
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4403      	add	r3, r0
 8006004:	330c      	adds	r3, #12
 8006006:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8006008:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800600c:	3308      	adds	r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	da00      	bge.n	8006014 <Status_Msg_Extr+0x4f0>
 8006012:	3307      	adds	r3, #7
 8006014:	10db      	asrs	r3, r3, #3
 8006016:	b29a      	uxth	r2, r3
 8006018:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800601a:	4413      	add	r3, r2
 800601c:	873b      	strh	r3, [r7, #56]	; 0x38
 800601e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006020:	3308      	adds	r3, #8
 8006022:	b29b      	uxth	r3, r3
 8006024:	b21b      	sxth	r3, r3
 8006026:	425a      	negs	r2, r3
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	f002 0207 	and.w	r2, r2, #7
 8006030:	bf58      	it	pl
 8006032:	4253      	negpl	r3, r2
 8006034:	b21b      	sxth	r3, r3
 8006036:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006038:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	441a      	add	r2, r3
 800603e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006040:	2108      	movs	r1, #8
 8006042:	4618      	mov	r0, r3
 8006044:	f7fa fae6 	bl	8000614 <ExtractBits>
 8006048:	4603      	mov	r3, r0
 800604a:	78ba      	ldrb	r2, [r7, #2]
 800604c:	b2d8      	uxtb	r0, r3
 800604e:	4936      	ldr	r1, [pc, #216]	; (8006128 <Status_Msg_Extr+0x604>)
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	3302      	adds	r3, #2
 800605c:	4602      	mov	r2, r0
 800605e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8006060:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006064:	3308      	adds	r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	da00      	bge.n	800606c <Status_Msg_Extr+0x548>
 800606a:	3307      	adds	r3, #7
 800606c:	10db      	asrs	r3, r3, #3
 800606e:	b29a      	uxth	r2, r3
 8006070:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006072:	4413      	add	r3, r2
 8006074:	873b      	strh	r3, [r7, #56]	; 0x38
 8006076:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006078:	3308      	adds	r3, #8
 800607a:	b29b      	uxth	r3, r3
 800607c:	b21b      	sxth	r3, r3
 800607e:	425a      	negs	r2, r3
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	f002 0207 	and.w	r2, r2, #7
 8006088:	bf58      	it	pl
 800608a:	4253      	negpl	r3, r2
 800608c:	b21b      	sxth	r3, r3
 800608e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006090:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	441a      	add	r2, r3
 8006096:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006098:	2110      	movs	r1, #16
 800609a:	4618      	mov	r0, r3
 800609c:	f7fa faba 	bl	8000614 <ExtractBits>
 80060a0:	4602      	mov	r2, r0
 80060a2:	78bb      	ldrb	r3, [r7, #2]
 80060a4:	b291      	uxth	r1, r2
 80060a6:	4a21      	ldr	r2, [pc, #132]	; (800612c <Status_Msg_Extr+0x608>)
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	4413      	add	r3, r2
 80060ac:	3304      	adds	r3, #4
 80060ae:	460a      	mov	r2, r1
 80060b0:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80060b2:	4924      	ldr	r1, [pc, #144]	; (8006144 <Status_Msg_Extr+0x620>)
 80060b4:	4824      	ldr	r0, [pc, #144]	; (8006148 <Status_Msg_Extr+0x624>)
 80060b6:	f7fa f8c3 	bl	8000240 <strcmp>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10f      	bne.n	80060e0 <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80060c0:	78bb      	ldrb	r3, [r7, #2]
 80060c2:	4a1a      	ldr	r2, [pc, #104]	; (800612c <Status_Msg_Extr+0x608>)
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	4413      	add	r3, r2
 80060c8:	3304      	adds	r3, #4
 80060ca:	881a      	ldrh	r2, [r3, #0]
 80060cc:	78bb      	ldrb	r3, [r7, #2]
 80060ce:	f042 0208 	orr.w	r2, r2, #8
 80060d2:	b291      	uxth	r1, r2
 80060d4:	4a15      	ldr	r2, [pc, #84]	; (800612c <Status_Msg_Extr+0x608>)
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	4413      	add	r3, r2
 80060da:	3304      	adds	r3, #4
 80060dc:	460a      	mov	r2, r1
 80060de:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 80060e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80060e4:	3310      	adds	r3, #16
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da00      	bge.n	80060ec <Status_Msg_Extr+0x5c8>
 80060ea:	3307      	adds	r3, #7
 80060ec:	10db      	asrs	r3, r3, #3
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80060f2:	4413      	add	r3, r2
 80060f4:	873b      	strh	r3, [r7, #56]	; 0x38
 80060f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060f8:	3310      	adds	r3, #16
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	b21b      	sxth	r3, r3
 80060fe:	425a      	negs	r2, r3
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	f002 0207 	and.w	r2, r2, #7
 8006108:	bf58      	it	pl
 800610a:	4253      	negpl	r3, r2
 800610c:	b21b      	sxth	r3, r3
 800610e:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 8006110:	78bb      	ldrb	r3, [r7, #2]
 8006112:	4a06      	ldr	r2, [pc, #24]	; (800612c <Status_Msg_Extr+0x608>)
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	4413      	add	r3, r2
 8006118:	3304      	adds	r3, #4
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 812a 	beq.w	800637a <Status_Msg_Extr+0x856>
 8006126:	e011      	b.n	800614c <Status_Msg_Extr+0x628>
 8006128:	20002d2c 	.word	0x20002d2c
 800612c:	200028f4 	.word	0x200028f4
 8006130:	20000504 	.word	0x20000504
 8006134:	08028b9c 	.word	0x08028b9c
 8006138:	08028ec4 	.word	0x08028ec4
 800613c:	08028ed0 	.word	0x08028ed0
 8006140:	20002da4 	.word	0x20002da4
 8006144:	08028554 	.word	0x08028554
 8006148:	20000505 	.word	0x20000505
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800614c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	441a      	add	r2, r3
 8006152:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006154:	2108      	movs	r1, #8
 8006156:	4618      	mov	r0, r3
 8006158:	f7fa fa5c 	bl	8000614 <ExtractBits>
 800615c:	4603      	mov	r3, r0
 800615e:	78ba      	ldrb	r2, [r7, #2]
 8006160:	b2d8      	uxtb	r0, r3
 8006162:	49b0      	ldr	r1, [pc, #704]	; (8006424 <Status_Msg_Extr+0x900>)
 8006164:	4613      	mov	r3, r2
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	4413      	add	r3, r2
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	440b      	add	r3, r1
 800616e:	3305      	adds	r3, #5
 8006170:	4602      	mov	r2, r0
 8006172:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006174:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006178:	3308      	adds	r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	da00      	bge.n	8006180 <Status_Msg_Extr+0x65c>
 800617e:	3307      	adds	r3, #7
 8006180:	10db      	asrs	r3, r3, #3
 8006182:	b29a      	uxth	r2, r3
 8006184:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006186:	4413      	add	r3, r2
 8006188:	873b      	strh	r3, [r7, #56]	; 0x38
 800618a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800618c:	3308      	adds	r3, #8
 800618e:	b29b      	uxth	r3, r3
 8006190:	b21b      	sxth	r3, r3
 8006192:	425a      	negs	r2, r3
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	f002 0207 	and.w	r2, r2, #7
 800619c:	bf58      	it	pl
 800619e:	4253      	negpl	r3, r2
 80061a0:	b21b      	sxth	r3, r3
 80061a2:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80061a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	441a      	add	r2, r3
 80061aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061ac:	2108      	movs	r1, #8
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa fa30 	bl	8000614 <ExtractBits>
 80061b4:	4603      	mov	r3, r0
 80061b6:	78ba      	ldrb	r2, [r7, #2]
 80061b8:	b2d8      	uxtb	r0, r3
 80061ba:	499a      	ldr	r1, [pc, #616]	; (8006424 <Status_Msg_Extr+0x900>)
 80061bc:	4613      	mov	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4413      	add	r3, r2
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	440b      	add	r3, r1
 80061c6:	3304      	adds	r3, #4
 80061c8:	4602      	mov	r2, r0
 80061ca:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80061cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80061d0:	3308      	adds	r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da00      	bge.n	80061d8 <Status_Msg_Extr+0x6b4>
 80061d6:	3307      	adds	r3, #7
 80061d8:	10db      	asrs	r3, r3, #3
 80061da:	b29a      	uxth	r2, r3
 80061dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061de:	4413      	add	r3, r2
 80061e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80061e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061e4:	3308      	adds	r3, #8
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	b21b      	sxth	r3, r3
 80061ea:	425a      	negs	r2, r3
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	f002 0207 	and.w	r2, r2, #7
 80061f4:	bf58      	it	pl
 80061f6:	4253      	negpl	r3, r2
 80061f8:	b21b      	sxth	r3, r3
 80061fa:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80061fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	441a      	add	r2, r3
 8006202:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006204:	2108      	movs	r1, #8
 8006206:	4618      	mov	r0, r3
 8006208:	f7fa fa04 	bl	8000614 <ExtractBits>
 800620c:	4603      	mov	r3, r0
 800620e:	78ba      	ldrb	r2, [r7, #2]
 8006210:	b2d8      	uxtb	r0, r3
 8006212:	4984      	ldr	r1, [pc, #528]	; (8006424 <Status_Msg_Extr+0x900>)
 8006214:	4613      	mov	r3, r2
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	4413      	add	r3, r2
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	440b      	add	r3, r1
 800621e:	3303      	adds	r3, #3
 8006220:	4602      	mov	r2, r0
 8006222:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006224:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006228:	3308      	adds	r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	da00      	bge.n	8006230 <Status_Msg_Extr+0x70c>
 800622e:	3307      	adds	r3, #7
 8006230:	10db      	asrs	r3, r3, #3
 8006232:	b29a      	uxth	r2, r3
 8006234:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006236:	4413      	add	r3, r2
 8006238:	873b      	strh	r3, [r7, #56]	; 0x38
 800623a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800623c:	3308      	adds	r3, #8
 800623e:	b29b      	uxth	r3, r3
 8006240:	b21b      	sxth	r3, r3
 8006242:	425a      	negs	r2, r3
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	f002 0207 	and.w	r2, r2, #7
 800624c:	bf58      	it	pl
 800624e:	4253      	negpl	r3, r2
 8006250:	b21b      	sxth	r3, r3
 8006252:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006254:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	441a      	add	r2, r3
 800625a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800625c:	2108      	movs	r1, #8
 800625e:	4618      	mov	r0, r3
 8006260:	f7fa f9d8 	bl	8000614 <ExtractBits>
 8006264:	4603      	mov	r3, r0
 8006266:	78ba      	ldrb	r2, [r7, #2]
 8006268:	b2d8      	uxtb	r0, r3
 800626a:	496e      	ldr	r1, [pc, #440]	; (8006424 <Status_Msg_Extr+0x900>)
 800626c:	4613      	mov	r3, r2
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	4413      	add	r3, r2
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	440b      	add	r3, r1
 8006276:	4602      	mov	r2, r0
 8006278:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800627a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800627e:	3308      	adds	r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	da00      	bge.n	8006286 <Status_Msg_Extr+0x762>
 8006284:	3307      	adds	r3, #7
 8006286:	10db      	asrs	r3, r3, #3
 8006288:	b29a      	uxth	r2, r3
 800628a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800628c:	4413      	add	r3, r2
 800628e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006290:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006292:	3308      	adds	r3, #8
 8006294:	b29b      	uxth	r3, r3
 8006296:	b21b      	sxth	r3, r3
 8006298:	425a      	negs	r2, r3
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	f002 0207 	and.w	r2, r2, #7
 80062a2:	bf58      	it	pl
 80062a4:	4253      	negpl	r3, r2
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80062aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	441a      	add	r2, r3
 80062b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062b2:	2108      	movs	r1, #8
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fa f9ad 	bl	8000614 <ExtractBits>
 80062ba:	4603      	mov	r3, r0
 80062bc:	78ba      	ldrb	r2, [r7, #2]
 80062be:	b2d8      	uxtb	r0, r3
 80062c0:	4958      	ldr	r1, [pc, #352]	; (8006424 <Status_Msg_Extr+0x900>)
 80062c2:	4613      	mov	r3, r2
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	4413      	add	r3, r2
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	440b      	add	r3, r1
 80062cc:	3301      	adds	r3, #1
 80062ce:	4602      	mov	r2, r0
 80062d0:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80062d2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80062d6:	3308      	adds	r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da00      	bge.n	80062de <Status_Msg_Extr+0x7ba>
 80062dc:	3307      	adds	r3, #7
 80062de:	10db      	asrs	r3, r3, #3
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062e4:	4413      	add	r3, r2
 80062e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062ea:	3308      	adds	r3, #8
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	b21b      	sxth	r3, r3
 80062f0:	425a      	negs	r2, r3
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	f002 0207 	and.w	r2, r2, #7
 80062fa:	bf58      	it	pl
 80062fc:	4253      	negpl	r3, r2
 80062fe:	b21b      	sxth	r3, r3
 8006300:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006302:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	441a      	add	r2, r3
 8006308:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800630a:	2108      	movs	r1, #8
 800630c:	4618      	mov	r0, r3
 800630e:	f7fa f981 	bl	8000614 <ExtractBits>
 8006312:	4603      	mov	r3, r0
 8006314:	78ba      	ldrb	r2, [r7, #2]
 8006316:	b2d8      	uxtb	r0, r3
 8006318:	4942      	ldr	r1, [pc, #264]	; (8006424 <Status_Msg_Extr+0x900>)
 800631a:	4613      	mov	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	4413      	add	r3, r2
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	440b      	add	r3, r1
 8006324:	3302      	adds	r3, #2
 8006326:	4602      	mov	r2, r0
 8006328:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800632a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800632e:	3308      	adds	r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	da00      	bge.n	8006336 <Status_Msg_Extr+0x812>
 8006334:	3307      	adds	r3, #7
 8006336:	10db      	asrs	r3, r3, #3
 8006338:	b29a      	uxth	r2, r3
 800633a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800633c:	4413      	add	r3, r2
 800633e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006340:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006342:	3308      	adds	r3, #8
 8006344:	b29b      	uxth	r3, r3
 8006346:	b21b      	sxth	r3, r3
 8006348:	425a      	negs	r2, r3
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	f002 0207 	and.w	r2, r2, #7
 8006352:	bf58      	it	pl
 8006354:	4253      	negpl	r3, r2
 8006356:	b21b      	sxth	r3, r3
 8006358:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 800635a:	78bb      	ldrb	r3, [r7, #2]
 800635c:	4618      	mov	r0, r3
 800635e:	f003 fad3 	bl	8009908 <IS_MLK_EIPC_TIME_MATCHING>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <Status_Msg_Extr+0x84e>
 8006368:	78bb      	ldrb	r3, [r7, #2]
 800636a:	4a2f      	ldr	r2, [pc, #188]	; (8006428 <Status_Msg_Extr+0x904>)
 800636c:	2100      	movs	r1, #0
 800636e:	54d1      	strb	r1, [r2, r3]
 8006370:	e003      	b.n	800637a <Status_Msg_Extr+0x856>
 8006372:	78bb      	ldrb	r3, [r7, #2]
 8006374:	4a2c      	ldr	r2, [pc, #176]	; (8006428 <Status_Msg_Extr+0x904>)
 8006376:	2101      	movs	r1, #1
 8006378:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 800637a:	78bb      	ldrb	r3, [r7, #2]
 800637c:	4a2b      	ldr	r2, [pc, #172]	; (800642c <Status_Msg_Extr+0x908>)
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	4413      	add	r3, r2
 8006382:	3304      	adds	r3, #4
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <Status_Msg_Extr+0x870>
	{
		LinkEstablishFlag = SET;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8006394:	787a      	ldrb	r2, [r7, #1]
 8006396:	78bb      	ldrb	r3, [r7, #2]
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f9e0 	bl	8006760 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 80063a0:	78bb      	ldrb	r3, [r7, #2]
 80063a2:	4923      	ldr	r1, [pc, #140]	; (8006430 <Status_Msg_Extr+0x90c>)
 80063a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80063aa:	78bb      	ldrb	r3, [r7, #2]
 80063ac:	4921      	ldr	r1, [pc, #132]	; (8006434 <Status_Msg_Extr+0x910>)
 80063ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 80063b4:	78ba      	ldrb	r2, [r7, #2]
 80063b6:	4920      	ldr	r1, [pc, #128]	; (8006438 <Status_Msg_Extr+0x914>)
 80063b8:	4613      	mov	r3, r2
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	4413      	add	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	440b      	add	r3, r1
 80063c2:	3310      	adds	r3, #16
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	78bc      	ldrb	r4, [r7, #2]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f00a f815 	bl	80103f8 <HAL_Elaps_Ticks>
 80063ce:	4602      	mov	r2, r0
 80063d0:	4919      	ldr	r1, [pc, #100]	; (8006438 <Status_Msg_Extr+0x914>)
 80063d2:	4623      	mov	r3, r4
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4423      	add	r3, r4
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	3310      	adds	r3, #16
 80063de:	601a      	str	r2, [r3, #0]
	/* Updating the Clocks */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 80063e0:	78bb      	ldrb	r3, [r7, #2]
 80063e2:	4a16      	ldr	r2, [pc, #88]	; (800643c <Status_Msg_Extr+0x918>)
 80063e4:	4413      	add	r3, r2
 80063e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d12e      	bne.n	800644c <Status_Msg_Extr+0x928>
 80063ee:	78bb      	ldrb	r3, [r7, #2]
 80063f0:	4a13      	ldr	r2, [pc, #76]	; (8006440 <Status_Msg_Extr+0x91c>)
 80063f2:	5cd3      	ldrb	r3, [r2, r3]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d829      	bhi.n	800644c <Status_Msg_Extr+0x928>
 80063f8:	78ba      	ldrb	r2, [r7, #2]
 80063fa:	4912      	ldr	r1, [pc, #72]	; (8006444 <Status_Msg_Extr+0x920>)
 80063fc:	4613      	mov	r3, r2
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	4413      	add	r3, r2
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	440b      	add	r3, r1
 8006406:	3305      	adds	r3, #5
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d11c      	bne.n	800644c <Status_Msg_Extr+0x928>
 8006412:	78bb      	ldrb	r3, [r7, #2]
 8006414:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <Status_Msg_Extr+0x924>)
 8006416:	5cd3      	ldrb	r3, [r2, r3]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d117      	bne.n	800644c <Status_Msg_Extr+0x928>
	{
		LinkEstablishFlag = RESET;
 800641c:	2300      	movs	r3, #0
 800641e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006422:	e03d      	b.n	80064a0 <Status_Msg_Extr+0x97c>
 8006424:	200028b8 	.word	0x200028b8
 8006428:	20002764 	.word	0x20002764
 800642c:	200028f4 	.word	0x200028f4
 8006430:	20002630 	.word	0x20002630
 8006434:	20002658 	.word	0x20002658
 8006438:	20002da4 	.word	0x20002da4
 800643c:	20000504 	.word	0x20000504
 8006440:	20002544 	.word	0x20002544
 8006444:	20002ad4 	.word	0x20002ad4
 8006448:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 800644c:	78bb      	ldrb	r3, [r7, #2]
 800644e:	4aaf      	ldr	r2, [pc, #700]	; (800670c <Status_Msg_Extr+0xbe8>)
 8006450:	4413      	add	r3, r2
 8006452:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006456:	2b02      	cmp	r3, #2
 8006458:	d122      	bne.n	80064a0 <Status_Msg_Extr+0x97c>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 800645a:	78bb      	ldrb	r3, [r7, #2]
 800645c:	4aab      	ldr	r2, [pc, #684]	; (800670c <Status_Msg_Extr+0xbe8>)
 800645e:	3366      	adds	r3, #102	; 0x66
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	78bb      	ldrb	r3, [r7, #2]
 8006468:	4aa9      	ldr	r2, [pc, #676]	; (8006710 <Status_Msg_Extr+0xbec>)
 800646a:	5cd3      	ldrb	r3, [r2, r3]
 800646c:	461a      	mov	r2, r3
 800646e:	48a9      	ldr	r0, [pc, #676]	; (8006714 <Status_Msg_Extr+0xbf0>)
 8006470:	f020 fae8 	bl	8026a44 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8006474:	78bb      	ldrb	r3, [r7, #2]
 8006476:	4aa8      	ldr	r2, [pc, #672]	; (8006718 <Status_Msg_Extr+0xbf4>)
 8006478:	5cd3      	ldrb	r3, [r2, r3]
 800647a:	4619      	mov	r1, r3
 800647c:	48a7      	ldr	r0, [pc, #668]	; (800671c <Status_Msg_Extr+0xbf8>)
 800647e:	f020 fae1 	bl	8026a44 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8006482:	78ba      	ldrb	r2, [r7, #2]
 8006484:	49a6      	ldr	r1, [pc, #664]	; (8006720 <Status_Msg_Extr+0xbfc>)
 8006486:	4613      	mov	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	4413      	add	r3, r2
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	440b      	add	r3, r1
 8006490:	3305      	adds	r3, #5
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	4619      	mov	r1, r3
 800649a:	48a2      	ldr	r0, [pc, #648]	; (8006724 <Status_Msg_Extr+0xc00>)
 800649c:	f020 fad2 	bl	8026a44 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 80064a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d16f      	bne.n	8006588 <Status_Msg_Extr+0xa64>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80064a8:	78ba      	ldrb	r2, [r7, #2]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4a9d      	ldr	r2, [pc, #628]	; (8006728 <Status_Msg_Extr+0xc04>)
 80064b4:	4413      	add	r3, r2
 80064b6:	3301      	adds	r3, #1
 80064b8:	2210      	movs	r2, #16
 80064ba:	2100      	movs	r1, #0
 80064bc:	4618      	mov	r0, r3
 80064be:	f020 f9d9 	bl	8026874 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 80064c2:	78ba      	ldrb	r2, [r7, #2]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a96      	ldr	r2, [pc, #600]	; (8006728 <Status_Msg_Extr+0xc04>)
 80064ce:	1898      	adds	r0, r3, r2
 80064d0:	78ba      	ldrb	r2, [r7, #2]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4a94      	ldr	r2, [pc, #592]	; (800672c <Status_Msg_Extr+0xc08>)
 80064dc:	4413      	add	r3, r2
 80064de:	2214      	movs	r2, #20
 80064e0:	4619      	mov	r1, r3
 80064e2:	f020 f99f 	bl	8026824 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80064e6:	78bb      	ldrb	r3, [r7, #2]
 80064e8:	4a91      	ldr	r2, [pc, #580]	; (8006730 <Status_Msg_Extr+0xc0c>)
 80064ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80064ee:	78ba      	ldrb	r2, [r7, #2]
 80064f0:	488d      	ldr	r0, [pc, #564]	; (8006728 <Status_Msg_Extr+0xc04>)
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4403      	add	r3, r0
 80064fc:	3312      	adds	r3, #18
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	4299      	cmp	r1, r3
 8006502:	d041      	beq.n	8006588 <Status_Msg_Extr+0xa64>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006504:	78ba      	ldrb	r2, [r7, #2]
 8006506:	78b9      	ldrb	r1, [r7, #2]
 8006508:	4887      	ldr	r0, [pc, #540]	; (8006728 <Status_Msg_Extr+0xc04>)
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4403      	add	r3, r0
 8006514:	3312      	adds	r3, #18
 8006516:	881a      	ldrh	r2, [r3, #0]
 8006518:	4b85      	ldr	r3, [pc, #532]	; (8006730 <Status_Msg_Extr+0xc0c>)
 800651a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 800651e:	2214      	movs	r2, #20
 8006520:	2100      	movs	r1, #0
 8006522:	4884      	ldr	r0, [pc, #528]	; (8006734 <Status_Msg_Extr+0xc10>)
 8006524:	f020 f9a6 	bl	8026874 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006528:	78ba      	ldrb	r2, [r7, #2]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4a7d      	ldr	r2, [pc, #500]	; (8006728 <Status_Msg_Extr+0xc04>)
 8006534:	4413      	add	r3, r2
 8006536:	2214      	movs	r2, #20
 8006538:	4619      	mov	r1, r3
 800653a:	487e      	ldr	r0, [pc, #504]	; (8006734 <Status_Msg_Extr+0xc10>)
 800653c:	f020 f972 	bl	8026824 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8006540:	f240 2007 	movw	r0, #519	; 0x207
 8006544:	f00a fd0c 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8006548:	78bb      	ldrb	r3, [r7, #2]
 800654a:	4a7b      	ldr	r2, [pc, #492]	; (8006738 <Status_Msg_Extr+0xc14>)
 800654c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d119      	bne.n	8006588 <Status_Msg_Extr+0xa64>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006554:	78bb      	ldrb	r3, [r7, #2]
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	4a78      	ldr	r2, [pc, #480]	; (800673c <Status_Msg_Extr+0xc18>)
 800655a:	4413      	add	r3, r2
 800655c:	1c98      	adds	r0, r3, #2
 800655e:	78ba      	ldrb	r2, [r7, #2]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4a6f      	ldr	r2, [pc, #444]	; (8006728 <Status_Msg_Extr+0xc04>)
 800656a:	4413      	add	r3, r2
 800656c:	3301      	adds	r3, #1
 800656e:	2210      	movs	r2, #16
 8006570:	4619      	mov	r1, r3
 8006572:	f020 f957 	bl	8026824 <memcpy>
#ifdef EI_1
				ReArrangedVitalData();
 8006576:	f004 f8c5 	bl	800a704 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 800657a:	f240 1019 	movw	r0, #281	; 0x119
 800657e:	f00a fcef 	bl	8010f60 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8006582:	4a6f      	ldr	r2, [pc, #444]	; (8006740 <Status_Msg_Extr+0xc1c>)
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006588:	78b9      	ldrb	r1, [r7, #2]
 800658a:	78ba      	ldrb	r2, [r7, #2]
 800658c:	4866      	ldr	r0, [pc, #408]	; (8006728 <Status_Msg_Extr+0xc04>)
 800658e:	460b      	mov	r3, r1
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4403      	add	r3, r0
 8006598:	3312      	adds	r3, #18
 800659a:	8818      	ldrh	r0, [r3, #0]
 800659c:	4969      	ldr	r1, [pc, #420]	; (8006744 <Status_Msg_Extr+0xc20>)
 800659e:	4613      	mov	r3, r2
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	4413      	add	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	440b      	add	r3, r1
 80065a8:	3306      	adds	r3, #6
 80065aa:	4602      	mov	r2, r0
 80065ac:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80065ae:	78ba      	ldrb	r2, [r7, #2]
 80065b0:	4964      	ldr	r1, [pc, #400]	; (8006744 <Status_Msg_Extr+0xc20>)
 80065b2:	4613      	mov	r3, r2
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	4413      	add	r3, r2
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	440b      	add	r3, r1
 80065bc:	3314      	adds	r3, #20
 80065be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c0:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 80065c2:	78ba      	ldrb	r2, [r7, #2]
 80065c4:	495f      	ldr	r1, [pc, #380]	; (8006744 <Status_Msg_Extr+0xc20>)
 80065c6:	4613      	mov	r3, r2
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	440b      	add	r3, r1
 80065d0:	3305      	adds	r3, #5
 80065d2:	2204      	movs	r2, #4
 80065d4:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80065d6:	78ba      	ldrb	r2, [r7, #2]
 80065d8:	495a      	ldr	r1, [pc, #360]	; (8006744 <Status_Msg_Extr+0xc20>)
 80065da:	4613      	mov	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	4413      	add	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	440b      	add	r3, r1
 80065e4:	78ba      	ldrb	r2, [r7, #2]
 80065e6:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80065e8:	78ba      	ldrb	r2, [r7, #2]
 80065ea:	4956      	ldr	r1, [pc, #344]	; (8006744 <Status_Msg_Extr+0xc20>)
 80065ec:	4613      	mov	r3, r2
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	4413      	add	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	440b      	add	r3, r1
 80065f6:	3301      	adds	r3, #1
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 80065fc:	78ba      	ldrb	r2, [r7, #2]
 80065fe:	4951      	ldr	r1, [pc, #324]	; (8006744 <Status_Msg_Extr+0xc20>)
 8006600:	4613      	mov	r3, r2
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	4413      	add	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	440b      	add	r3, r1
 800660a:	3302      	adds	r3, #2
 800660c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006610:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006612:	2218      	movs	r2, #24
 8006614:	2100      	movs	r1, #0
 8006616:	484c      	ldr	r0, [pc, #304]	; (8006748 <Status_Msg_Extr+0xc24>)
 8006618:	f020 f92c 	bl	8026874 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800661c:	78ba      	ldrb	r2, [r7, #2]
 800661e:	4613      	mov	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4a47      	ldr	r2, [pc, #284]	; (8006744 <Status_Msg_Extr+0xc20>)
 8006628:	4413      	add	r3, r2
 800662a:	2218      	movs	r2, #24
 800662c:	4619      	mov	r1, r3
 800662e:	4846      	ldr	r0, [pc, #280]	; (8006748 <Status_Msg_Extr+0xc24>)
 8006630:	f020 f8f8 	bl	8026824 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8006634:	f240 2001 	movw	r0, #513	; 0x201
 8006638:	f00a fc92 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800663c:	78ba      	ldrb	r2, [r7, #2]
 800663e:	4941      	ldr	r1, [pc, #260]	; (8006744 <Status_Msg_Extr+0xc20>)
 8006640:	4613      	mov	r3, r2
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	4413      	add	r3, r2
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	440b      	add	r3, r1
 800664a:	3301      	adds	r3, #1
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006650:	78bb      	ldrb	r3, [r7, #2]
 8006652:	493e      	ldr	r1, [pc, #248]	; (800674c <Status_Msg_Extr+0xc28>)
 8006654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 800665a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800665e:	2b01      	cmp	r3, #1
 8006660:	d11d      	bne.n	800669e <Status_Msg_Extr+0xb7a>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006662:	78bb      	ldrb	r3, [r7, #2]
 8006664:	493a      	ldr	r1, [pc, #232]	; (8006750 <Status_Msg_Extr+0xc2c>)
 8006666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 800666c:	78ba      	ldrb	r2, [r7, #2]
 800666e:	4939      	ldr	r1, [pc, #228]	; (8006754 <Status_Msg_Extr+0xc30>)
 8006670:	4613      	mov	r3, r2
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	3304      	adds	r3, #4
 800667c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800667e:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006680:	78ba      	ldrb	r2, [r7, #2]
 8006682:	4934      	ldr	r1, [pc, #208]	; (8006754 <Status_Msg_Extr+0xc30>)
 8006684:	4613      	mov	r3, r2
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	3301      	adds	r3, #1
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8006694:	78bb      	ldrb	r3, [r7, #2]
 8006696:	4a30      	ldr	r2, [pc, #192]	; (8006758 <Status_Msg_Extr+0xc34>)
 8006698:	2101      	movs	r1, #1
 800669a:	54d1      	strb	r1, [r2, r3]
 800669c:	e02e      	b.n	80066fc <Status_Msg_Extr+0xbd8>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 800669e:	78bb      	ldrb	r3, [r7, #2]
 80066a0:	4a2d      	ldr	r2, [pc, #180]	; (8006758 <Status_Msg_Extr+0xc34>)
 80066a2:	2100      	movs	r1, #0
 80066a4:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 80066a6:	78ba      	ldrb	r2, [r7, #2]
 80066a8:	492a      	ldr	r1, [pc, #168]	; (8006754 <Status_Msg_Extr+0xc30>)
 80066aa:	4613      	mov	r3, r2
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3308      	adds	r3, #8
 80066b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066b8:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 80066ba:	78ba      	ldrb	r2, [r7, #2]
 80066bc:	4925      	ldr	r1, [pc, #148]	; (8006754 <Status_Msg_Extr+0xc30>)
 80066be:	4613      	mov	r3, r2
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	3301      	adds	r3, #1
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80066ce:	78ba      	ldrb	r2, [r7, #2]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4a13      	ldr	r2, [pc, #76]	; (8006728 <Status_Msg_Extr+0xc04>)
 80066da:	4413      	add	r3, r2
 80066dc:	3301      	adds	r3, #1
 80066de:	2210      	movs	r2, #16
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f020 f8c6 	bl	8026874 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 80066e8:	78ba      	ldrb	r2, [r7, #2]
 80066ea:	490f      	ldr	r1, [pc, #60]	; (8006728 <Status_Msg_Extr+0xc04>)
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	3312      	adds	r3, #18
 80066f8:	2200      	movs	r2, #0
 80066fa:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80066fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006700:	4816      	ldr	r0, [pc, #88]	; (800675c <Status_Msg_Extr+0xc38>)
 8006702:	f015 fe7e 	bl	801c402 <HAL_GPIO_TogglePin>

}
 8006706:	3754      	adds	r7, #84	; 0x54
 8006708:	46bd      	mov	sp, r7
 800670a:	bd90      	pop	{r4, r7, pc}
 800670c:	20000504 	.word	0x20000504
 8006710:	20002544 	.word	0x20002544
 8006714:	08028edc 	.word	0x08028edc
 8006718:	20002538 	.word	0x20002538
 800671c:	08028eec 	.word	0x08028eec
 8006720:	20002ad4 	.word	0x20002ad4
 8006724:	08028f04 	.word	0x08028f04
 8006728:	200035b0 	.word	0x200035b0
 800672c:	200034e8 	.word	0x200034e8
 8006730:	2000258c 	.word	0x2000258c
 8006734:	20003740 	.word	0x20003740
 8006738:	20002550 	.word	0x20002550
 800673c:	20002770 	.word	0x20002770
 8006740:	200024e4 	.word	0x200024e4
 8006744:	20002da4 	.word	0x20002da4
 8006748:	20002f84 	.word	0x20002f84
 800674c:	200024b8 	.word	0x200024b8
 8006750:	200025a0 	.word	0x200025a0
 8006754:	200033f8 	.word	0x200033f8
 8006758:	200025f0 	.word	0x200025f0
 800675c:	40021c00 	.word	0x40021c00

08006760 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b0a5      	sub	sp, #148	; 0x94
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	460a      	mov	r2, r1
 800676a:	71fb      	strb	r3, [r7, #7]
 800676c:	4613      	mov	r3, r2
 800676e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006770:	2300      	movs	r3, #0
 8006772:	64bb      	str	r3, [r7, #72]	; 0x48
 8006774:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006778:	2238      	movs	r2, #56	; 0x38
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f020 f879 	bl	8026874 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	f107 0310 	add.w	r3, r7, #16
 800678a:	2238      	movs	r2, #56	; 0x38
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f020 f870 	bl	8026874 <memset>
	uint8_t uc_index = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 800679a:	2300      	movs	r3, #0
 800679c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 80067a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067ae:	441a      	add	r2, r3
 80067b0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80067b4:	23f4      	movs	r3, #244	; 0xf4
 80067b6:	2108      	movs	r1, #8
 80067b8:	f7f9 ffb8 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80067bc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80067c0:	3308      	adds	r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da00      	bge.n	80067c8 <Send_Status_Message+0x68>
 80067c6:	3307      	adds	r3, #7
 80067c8:	10db      	asrs	r3, r3, #3
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067d0:	4413      	add	r3, r2
 80067d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80067d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067da:	3308      	adds	r3, #8
 80067dc:	b29b      	uxth	r3, r3
 80067de:	b21b      	sxth	r3, r3
 80067e0:	425a      	negs	r2, r3
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	f002 0207 	and.w	r2, r2, #7
 80067ea:	bf58      	it	pl
 80067ec:	4253      	negpl	r3, r2
 80067ee:	b21b      	sxth	r3, r3
 80067f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80067f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067fc:	441a      	add	r2, r3
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	49bc      	ldr	r1, [pc, #752]	; (8006af4 <Send_Status_Message+0x394>)
 8006802:	3366      	adds	r3, #102	; 0x66
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800680e:	2110      	movs	r1, #16
 8006810:	f7f9 ff8c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006814:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006818:	3310      	adds	r3, #16
 800681a:	2b00      	cmp	r3, #0
 800681c:	da00      	bge.n	8006820 <Send_Status_Message+0xc0>
 800681e:	3307      	adds	r3, #7
 8006820:	10db      	asrs	r3, r3, #3
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006828:	4413      	add	r3, r2
 800682a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800682e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006832:	3310      	adds	r3, #16
 8006834:	b29b      	uxth	r3, r3
 8006836:	b21b      	sxth	r3, r3
 8006838:	425a      	negs	r2, r3
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	f002 0207 	and.w	r2, r2, #7
 8006842:	bf58      	it	pl
 8006844:	4253      	negpl	r3, r2
 8006846:	b21b      	sxth	r3, r3
 8006848:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 800684c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006850:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006854:	441a      	add	r2, r3
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	49a6      	ldr	r1, [pc, #664]	; (8006af4 <Send_Status_Message+0x394>)
 800685a:	3370      	adds	r3, #112	; 0x70
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006866:	2110      	movs	r1, #16
 8006868:	f7f9 ff60 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800686c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006870:	3310      	adds	r3, #16
 8006872:	2b00      	cmp	r3, #0
 8006874:	da00      	bge.n	8006878 <Send_Status_Message+0x118>
 8006876:	3307      	adds	r3, #7
 8006878:	10db      	asrs	r3, r3, #3
 800687a:	b29a      	uxth	r2, r3
 800687c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006880:	4413      	add	r3, r2
 8006882:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006886:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800688a:	3310      	adds	r3, #16
 800688c:	b29b      	uxth	r3, r3
 800688e:	b21b      	sxth	r3, r3
 8006890:	425a      	negs	r2, r3
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	f002 0207 	and.w	r2, r2, #7
 800689a:	bf58      	it	pl
 800689c:	4253      	negpl	r3, r2
 800689e:	b21b      	sxth	r3, r3
 80068a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80068a4:	4b94      	ldr	r3, [pc, #592]	; (8006af8 <Send_Status_Message+0x398>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	089b      	lsrs	r3, r3, #2
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d035      	beq.n	800691e <Send_Status_Message+0x1be>
 80068b2:	4b91      	ldr	r3, [pc, #580]	; (8006af8 <Send_Status_Message+0x398>)
 80068b4:	791b      	ldrb	r3, [r3, #4]
 80068b6:	79fa      	ldrb	r2, [r7, #7]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d130      	bne.n	800691e <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 80068c2:	488e      	ldr	r0, [pc, #568]	; (8006afc <Send_Status_Message+0x39c>)
 80068c4:	f017 fd66 	bl	801e394 <HAL_RNG_GetRandomNumber>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b8d      	ldr	r3, [pc, #564]	; (8006b00 <Send_Status_Message+0x3a0>)
 80068cc:	fba3 1302 	umull	r1, r3, r3, r2
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	21c8      	movs	r1, #200	; 0xc8
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 80068de:	4889      	ldr	r0, [pc, #548]	; (8006b04 <Send_Status_Message+0x3a4>)
 80068e0:	f020 f94c 	bl	8026b7c <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	4a88      	ldr	r2, [pc, #544]	; (8006b08 <Send_Status_Message+0x3a8>)
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	4413      	add	r3, r2
 80068ec:	3301      	adds	r3, #1
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	4619      	mov	r1, r3
 80068f2:	4886      	ldr	r0, [pc, #536]	; (8006b0c <Send_Status_Message+0x3ac>)
 80068f4:	f020 f8a6 	bl	8026a44 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 80068f8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80068fc:	4619      	mov	r1, r3
 80068fe:	4884      	ldr	r0, [pc, #528]	; (8006b10 <Send_Status_Message+0x3b0>)
 8006900:	f020 f8a0 	bl	8026a44 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8006904:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006908:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800690c:	441a      	add	r2, r3
 800690e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8006912:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006916:	2108      	movs	r1, #8
 8006918:	f7f9 ff08 	bl	800072c <InsertBits>
	{
 800691c:	e00f      	b.n	800693e <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 800691e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006922:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006926:	441a      	add	r2, r3
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	4977      	ldr	r1, [pc, #476]	; (8006b08 <Send_Status_Message+0x3a8>)
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	440b      	add	r3, r1
 8006930:	3301      	adds	r3, #1
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006938:	2108      	movs	r1, #8
 800693a:	f7f9 fef7 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 800693e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006942:	3308      	adds	r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	da00      	bge.n	800694a <Send_Status_Message+0x1ea>
 8006948:	3307      	adds	r3, #7
 800694a:	10db      	asrs	r3, r3, #3
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006952:	4413      	add	r3, r2
 8006954:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006958:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800695c:	3308      	adds	r3, #8
 800695e:	b29b      	uxth	r3, r3
 8006960:	b21b      	sxth	r3, r3
 8006962:	425a      	negs	r2, r3
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	f002 0207 	and.w	r2, r2, #7
 800696c:	bf58      	it	pl
 800696e:	4253      	negpl	r3, r2
 8006970:	b21b      	sxth	r3, r3
 8006972:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006976:	4b60      	ldr	r3, [pc, #384]	; (8006af8 <Send_Status_Message+0x398>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	08db      	lsrs	r3, r3, #3
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d038      	beq.n	80069f6 <Send_Status_Message+0x296>
 8006984:	4b5c      	ldr	r3, [pc, #368]	; (8006af8 <Send_Status_Message+0x398>)
 8006986:	791b      	ldrb	r3, [r3, #4]
 8006988:	79fa      	ldrb	r2, [r7, #7]
 800698a:	429a      	cmp	r2, r3
 800698c:	d133      	bne.n	80069f6 <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006994:	4859      	ldr	r0, [pc, #356]	; (8006afc <Send_Status_Message+0x39c>)
 8006996:	f017 fcfd 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800699a:	4602      	mov	r2, r0
 800699c:	4b58      	ldr	r3, [pc, #352]	; (8006b00 <Send_Status_Message+0x3a0>)
 800699e:	fba3 1302 	umull	r1, r3, r3, r2
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	21c8      	movs	r1, #200	; 0xc8
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 80069b0:	4858      	ldr	r0, [pc, #352]	; (8006b14 <Send_Status_Message+0x3b4>)
 80069b2:	f020 f8e3 	bl	8026b7c <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	4a53      	ldr	r2, [pc, #332]	; (8006b08 <Send_Status_Message+0x3a8>)
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	4413      	add	r3, r2
 80069be:	3302      	adds	r3, #2
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	4619      	mov	r1, r3
 80069c4:	4854      	ldr	r0, [pc, #336]	; (8006b18 <Send_Status_Message+0x3b8>)
 80069c6:	f020 f83d 	bl	8026a44 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80069ca:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80069ce:	4619      	mov	r1, r3
 80069d0:	4852      	ldr	r0, [pc, #328]	; (8006b1c <Send_Status_Message+0x3bc>)
 80069d2:	f020 f837 	bl	8026a44 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80069d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80069da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80069de:	441a      	add	r2, r3
 80069e0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80069e4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80069e8:	2108      	movs	r1, #8
 80069ea:	f7f9 fe9f 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 80069ee:	4b4c      	ldr	r3, [pc, #304]	; (8006b20 <Send_Status_Message+0x3c0>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	701a      	strb	r2, [r3, #0]
	{
 80069f4:	e020      	b.n	8006a38 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 80069f6:	4b4a      	ldr	r3, [pc, #296]	; (8006b20 <Send_Status_Message+0x3c0>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80069fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a04:	18d1      	adds	r1, r2, r3
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	483f      	ldr	r0, [pc, #252]	; (8006b08 <Send_Status_Message+0x3a8>)
 8006a0a:	011a      	lsls	r2, r3, #4
 8006a0c:	4402      	add	r2, r0
 8006a0e:	3202      	adds	r2, #2
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	3201      	adds	r2, #1
 8006a14:	b2d4      	uxtb	r4, r2
 8006a16:	483c      	ldr	r0, [pc, #240]	; (8006b08 <Send_Status_Message+0x3a8>)
 8006a18:	011a      	lsls	r2, r3, #4
 8006a1a:	4402      	add	r2, r0
 8006a1c:	3202      	adds	r2, #2
 8006a1e:	4620      	mov	r0, r4
 8006a20:	7010      	strb	r0, [r2, #0]
 8006a22:	4a39      	ldr	r2, [pc, #228]	; (8006b08 <Send_Status_Message+0x3a8>)
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	4413      	add	r3, r2
 8006a28:	3302      	adds	r3, #2
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a30:	460a      	mov	r2, r1
 8006a32:	2108      	movs	r1, #8
 8006a34:	f7f9 fe7a 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006a38:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da00      	bge.n	8006a44 <Send_Status_Message+0x2e4>
 8006a42:	3307      	adds	r3, #7
 8006a44:	10db      	asrs	r3, r3, #3
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006a52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a56:	3308      	adds	r3, #8
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	b21b      	sxth	r3, r3
 8006a5c:	425a      	negs	r2, r3
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	f002 0207 	and.w	r2, r2, #7
 8006a66:	bf58      	it	pl
 8006a68:	4253      	negpl	r3, r2
 8006a6a:	b21b      	sxth	r3, r3
 8006a6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 8006a70:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a78:	441a      	add	r2, r3
 8006a7a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a7e:	2304      	movs	r3, #4
 8006a80:	2108      	movs	r1, #8
 8006a82:	f7f9 fe53 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006a86:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da00      	bge.n	8006a92 <Send_Status_Message+0x332>
 8006a90:	3307      	adds	r3, #7
 8006a92:	10db      	asrs	r3, r3, #3
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006aa0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	b21b      	sxth	r3, r3
 8006aaa:	425a      	negs	r2, r3
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	f002 0207 	and.w	r2, r2, #7
 8006ab4:	bf58      	it	pl
 8006ab6:	4253      	negpl	r3, r2
 8006ab8:	b21b      	sxth	r3, r3
 8006aba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	4a11      	ldr	r2, [pc, #68]	; (8006b08 <Send_Status_Message+0x3a8>)
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d052      	beq.n	8006b78 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <Send_Status_Message+0x3c4>)
 8006ad6:	5cd3      	ldrb	r3, [r2, r3]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d125      	bne.n	8006b28 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006adc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ae0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ae4:	441a      	add	r2, r3
 8006ae6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006aea:	2368      	movs	r3, #104	; 0x68
 8006aec:	2110      	movs	r1, #16
 8006aee:	f7f9 fe1d 	bl	800072c <InsertBits>
 8006af2:	e024      	b.n	8006b3e <Send_Status_Message+0x3de>
 8006af4:	20000504 	.word	0x20000504
 8006af8:	2000308c 	.word	0x2000308c
 8006afc:	2000bcec 	.word	0x2000bcec
 8006b00:	51eb851f 	.word	0x51eb851f
 8006b04:	080288fc 	.word	0x080288fc
 8006b08:	200028f4 	.word	0x200028f4
 8006b0c:	08028f14 	.word	0x08028f14
 8006b10:	08028f34 	.word	0x08028f34
 8006b14:	08028960 	.word	0x08028960
 8006b18:	08028f54 	.word	0x08028f54
 8006b1c:	08028f74 	.word	0x08028f74
 8006b20:	200024af 	.word	0x200024af
 8006b24:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006b28:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b30:	441a      	add	r2, r3
 8006b32:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b36:	2328      	movs	r3, #40	; 0x28
 8006b38:	2110      	movs	r1, #16
 8006b3a:	f7f9 fdf7 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006b3e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006b42:	3310      	adds	r3, #16
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da00      	bge.n	8006b4a <Send_Status_Message+0x3ea>
 8006b48:	3307      	adds	r3, #7
 8006b4a:	10db      	asrs	r3, r3, #3
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b52:	4413      	add	r3, r2
 8006b54:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006b58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b5c:	3310      	adds	r3, #16
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	b21b      	sxth	r3, r3
 8006b62:	425a      	negs	r2, r3
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	f002 0207 	and.w	r2, r2, #7
 8006b6c:	bf58      	it	pl
 8006b6e:	4253      	negpl	r3, r2
 8006b70:	b21b      	sxth	r3, r3
 8006b72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006b76:	e03a      	b.n	8006bee <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <Send_Status_Message+0x43c>)
 8006b7c:	5cd3      	ldrb	r3, [r2, r3]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d10e      	bne.n	8006ba0 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 8006b82:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b86:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b8a:	441a      	add	r2, r3
 8006b8c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b90:	2364      	movs	r3, #100	; 0x64
 8006b92:	2110      	movs	r1, #16
 8006b94:	f7f9 fdca 	bl	800072c <InsertBits>
 8006b98:	e00d      	b.n	8006bb6 <Send_Status_Message+0x456>
 8006b9a:	bf00      	nop
 8006b9c:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 8006ba0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ba4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ba8:	441a      	add	r2, r3
 8006baa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006bae:	2324      	movs	r3, #36	; 0x24
 8006bb0:	2110      	movs	r1, #16
 8006bb2:	f7f9 fdbb 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006bb6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006bba:	3310      	adds	r3, #16
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	da00      	bge.n	8006bc2 <Send_Status_Message+0x462>
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	10db      	asrs	r3, r3, #3
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006bca:	4413      	add	r3, r2
 8006bcc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006bd0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006bd4:	3310      	adds	r3, #16
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	b21b      	sxth	r3, r3
 8006bda:	425a      	negs	r2, r3
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	f002 0207 	and.w	r2, r2, #7
 8006be4:	bf58      	it	pl
 8006be6:	4253      	negpl	r3, r2
 8006be8:	b21b      	sxth	r3, r3
 8006bea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	4ac6      	ldr	r2, [pc, #792]	; (8006f0c <Send_Status_Message+0x7ac>)
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8139 	beq.w	8006e7a <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	4ac1      	ldr	r2, [pc, #772]	; (8006f10 <Send_Status_Message+0x7b0>)
 8006c0c:	5cd3      	ldrb	r3, [r2, r3]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d114      	bne.n	8006c3c <Send_Status_Message+0x4dc>
		{
			Get_time();
 8006c12:	f005 ff6b 	bl	800caec <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8006c16:	79fa      	ldrb	r2, [r7, #7]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	4413      	add	r3, r2
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	4abc      	ldr	r2, [pc, #752]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006c22:	4413      	add	r3, r2
 8006c24:	4abc      	ldr	r2, [pc, #752]	; (8006f18 <Send_Status_Message+0x7b8>)
 8006c26:	6811      	ldr	r1, [r2, #0]
 8006c28:	6019      	str	r1, [r3, #0]
 8006c2a:	8892      	ldrh	r2, [r2, #4]
 8006c2c:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006c2e:	48bb      	ldr	r0, [pc, #748]	; (8006f1c <Send_Status_Message+0x7bc>)
 8006c30:	f01f ffa4 	bl	8026b7c <puts>
			Change_MLK_TIME[Source_Index] = 0;
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	4ab6      	ldr	r2, [pc, #728]	; (8006f10 <Send_Status_Message+0x7b0>)
 8006c38:	2100      	movs	r1, #0
 8006c3a:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006c3c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c44:	18d1      	adds	r1, r2, r3
 8006c46:	79fa      	ldrb	r2, [r7, #7]
 8006c48:	48b2      	ldr	r0, [pc, #712]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4413      	add	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4403      	add	r3, r0
 8006c54:	3305      	adds	r3, #5
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006c5c:	460a      	mov	r2, r1
 8006c5e:	2108      	movs	r1, #8
 8006c60:	f7f9 fd64 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006c64:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006c68:	3308      	adds	r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da00      	bge.n	8006c70 <Send_Status_Message+0x510>
 8006c6e:	3307      	adds	r3, #7
 8006c70:	10db      	asrs	r3, r3, #3
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c78:	4413      	add	r3, r2
 8006c7a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006c7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006c82:	3308      	adds	r3, #8
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	b21b      	sxth	r3, r3
 8006c88:	425a      	negs	r2, r3
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	f002 0207 	and.w	r2, r2, #7
 8006c92:	bf58      	it	pl
 8006c94:	4253      	negpl	r3, r2
 8006c96:	b21b      	sxth	r3, r3
 8006c98:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8006c9c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ca0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ca4:	18d1      	adds	r1, r2, r3
 8006ca6:	79fa      	ldrb	r2, [r7, #7]
 8006ca8:	489a      	ldr	r0, [pc, #616]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006caa:	4613      	mov	r3, r2
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	4403      	add	r3, r0
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006cbc:	460a      	mov	r2, r1
 8006cbe:	2108      	movs	r1, #8
 8006cc0:	f7f9 fd34 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006cc4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006cc8:	3308      	adds	r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da00      	bge.n	8006cd0 <Send_Status_Message+0x570>
 8006cce:	3307      	adds	r3, #7
 8006cd0:	10db      	asrs	r3, r3, #3
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006cd8:	4413      	add	r3, r2
 8006cda:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006cde:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	b21b      	sxth	r3, r3
 8006ce8:	425a      	negs	r2, r3
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	f002 0207 	and.w	r2, r2, #7
 8006cf2:	bf58      	it	pl
 8006cf4:	4253      	negpl	r3, r2
 8006cf6:	b21b      	sxth	r3, r3
 8006cf8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006cfc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006d04:	18d1      	adds	r1, r2, r3
 8006d06:	79fa      	ldrb	r2, [r7, #7]
 8006d08:	4882      	ldr	r0, [pc, #520]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	4413      	add	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4403      	add	r3, r0
 8006d14:	3303      	adds	r3, #3
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d1c:	460a      	mov	r2, r1
 8006d1e:	2108      	movs	r1, #8
 8006d20:	f7f9 fd04 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d24:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d28:	3308      	adds	r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	da00      	bge.n	8006d30 <Send_Status_Message+0x5d0>
 8006d2e:	3307      	adds	r3, #7
 8006d30:	10db      	asrs	r3, r3, #3
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d38:	4413      	add	r3, r2
 8006d3a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006d3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d42:	3308      	adds	r3, #8
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	b21b      	sxth	r3, r3
 8006d48:	425a      	negs	r2, r3
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	f002 0207 	and.w	r2, r2, #7
 8006d52:	bf58      	it	pl
 8006d54:	4253      	negpl	r3, r2
 8006d56:	b21b      	sxth	r3, r3
 8006d58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006d5c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006d64:	18d1      	adds	r1, r2, r3
 8006d66:	79fa      	ldrb	r2, [r7, #7]
 8006d68:	486a      	ldr	r0, [pc, #424]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	4413      	add	r3, r2
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4403      	add	r3, r0
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	2108      	movs	r1, #8
 8006d7e:	f7f9 fcd5 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d82:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d86:	3308      	adds	r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da00      	bge.n	8006d8e <Send_Status_Message+0x62e>
 8006d8c:	3307      	adds	r3, #7
 8006d8e:	10db      	asrs	r3, r3, #3
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d96:	4413      	add	r3, r2
 8006d98:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006d9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006da0:	3308      	adds	r3, #8
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	b21b      	sxth	r3, r3
 8006da6:	425a      	negs	r2, r3
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	f002 0207 	and.w	r2, r2, #7
 8006db0:	bf58      	it	pl
 8006db2:	4253      	negpl	r3, r2
 8006db4:	b21b      	sxth	r3, r3
 8006db6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8006dba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006dbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006dc2:	18d1      	adds	r1, r2, r3
 8006dc4:	79fa      	ldrb	r2, [r7, #7]
 8006dc6:	4853      	ldr	r0, [pc, #332]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006dc8:	4613      	mov	r3, r2
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	4403      	add	r3, r0
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006dda:	460a      	mov	r2, r1
 8006ddc:	2108      	movs	r1, #8
 8006dde:	f7f9 fca5 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006de2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006de6:	3308      	adds	r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	da00      	bge.n	8006dee <Send_Status_Message+0x68e>
 8006dec:	3307      	adds	r3, #7
 8006dee:	10db      	asrs	r3, r3, #3
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006df6:	4413      	add	r3, r2
 8006df8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006dfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e00:	3308      	adds	r3, #8
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	b21b      	sxth	r3, r3
 8006e06:	425a      	negs	r2, r3
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	f002 0207 	and.w	r2, r2, #7
 8006e10:	bf58      	it	pl
 8006e12:	4253      	negpl	r3, r2
 8006e14:	b21b      	sxth	r3, r3
 8006e16:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006e1a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006e1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e22:	18d1      	adds	r1, r2, r3
 8006e24:	79fa      	ldrb	r2, [r7, #7]
 8006e26:	483b      	ldr	r0, [pc, #236]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006e28:	4613      	mov	r3, r2
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	4403      	add	r3, r0
 8006e32:	3302      	adds	r3, #2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	2108      	movs	r1, #8
 8006e3e:	f7f9 fc75 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006e42:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006e46:	3308      	adds	r3, #8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	da00      	bge.n	8006e4e <Send_Status_Message+0x6ee>
 8006e4c:	3307      	adds	r3, #7
 8006e4e:	10db      	asrs	r3, r3, #3
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006e56:	4413      	add	r3, r2
 8006e58:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006e5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e60:	3308      	adds	r3, #8
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	b21b      	sxth	r3, r3
 8006e66:	425a      	negs	r2, r3
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	f002 0207 	and.w	r2, r2, #7
 8006e70:	bf58      	it	pl
 8006e72:	4253      	negpl	r3, r2
 8006e74:	b21b      	sxth	r3, r3
 8006e76:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006e7a:	4b29      	ldr	r3, [pc, #164]	; (8006f20 <Send_Status_Message+0x7c0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d031      	beq.n	8006eec <Send_Status_Message+0x78c>
 8006e88:	4b25      	ldr	r3, [pc, #148]	; (8006f20 <Send_Status_Message+0x7c0>)
 8006e8a:	791b      	ldrb	r3, [r3, #4]
 8006e8c:	79fa      	ldrb	r2, [r7, #7]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d12c      	bne.n	8006eec <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 8006e98:	4822      	ldr	r0, [pc, #136]	; (8006f24 <Send_Status_Message+0x7c4>)
 8006e9a:	f017 fa7b 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <Send_Status_Message+0x7c8>)
 8006ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea6:	0dd9      	lsrs	r1, r3, #23
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	041b      	lsls	r3, r3, #16
 8006eac:	1a5b      	subs	r3, r3, r1
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8006eb6:	481d      	ldr	r0, [pc, #116]	; (8006f2c <Send_Status_Message+0x7cc>)
 8006eb8:	f01f fe60 	bl	8026b7c <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <Send_Status_Message+0x7ac>)
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	4413      	add	r3, r2
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4819      	ldr	r0, [pc, #100]	; (8006f30 <Send_Status_Message+0x7d0>)
 8006ecc:	f01f fdba 	bl	8026a44 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 8006ed0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006ed4:	4817      	ldr	r0, [pc, #92]	; (8006f34 <Send_Status_Message+0x7d4>)
 8006ed6:	f01f fdb5 	bl	8026a44 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006eda:	f107 020c 	add.w	r2, r7, #12
 8006ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ee2:	2118      	movs	r1, #24
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	f7f9 fc21 	bl	800072c <InsertBits>
	{
 8006eea:	e00b      	b.n	8006f04 <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	4a07      	ldr	r2, [pc, #28]	; (8006f0c <Send_Status_Message+0x7ac>)
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	4413      	add	r3, r2
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f107 020c 	add.w	r2, r7, #12
 8006efc:	2118      	movs	r1, #24
 8006efe:	2000      	movs	r0, #0
 8006f00:	f7f9 fc14 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006f0a:	e027      	b.n	8006f5c <Send_Status_Message+0x7fc>
 8006f0c:	200028f4 	.word	0x200028f4
 8006f10:	20002764 	.word	0x20002764
 8006f14:	200028b8 	.word	0x200028b8
 8006f18:	20003fe4 	.word	0x20003fe4
 8006f1c:	08028cb8 	.word	0x08028cb8
 8006f20:	2000308c 	.word	0x2000308c
 8006f24:	2000bcec 	.word	0x2000bcec
 8006f28:	80008001 	.word	0x80008001
 8006f2c:	08028cd0 	.word	0x08028cd0
 8006f30:	08028cf4 	.word	0x08028cf4
 8006f34:	08028d18 	.word	0x08028d18
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006f38:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006f3c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f40:	3303      	adds	r3, #3
 8006f42:	3290      	adds	r2, #144	; 0x90
 8006f44:	443a      	add	r2, r7
 8006f46:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006f4a:	3390      	adds	r3, #144	; 0x90
 8006f4c:	443b      	add	r3, r7
 8006f4e:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006f52:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f56:	3301      	adds	r3, #1
 8006f58:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006f5c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d8e6      	bhi.n	8006f38 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006f6a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006f6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006f72:	18d4      	adds	r4, r2, r3
 8006f74:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3303      	adds	r3, #3
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	f107 030c 	add.w	r3, r7, #12
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f00e ffc7 	bl	8015f18 <CalculateDirectReverseCrc>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006f90:	4622      	mov	r2, r4
 8006f92:	2120      	movs	r1, #32
 8006f94:	f7f9 fbca 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 8006f98:	4b1f      	ldr	r3, [pc, #124]	; (8007018 <Send_Status_Message+0x8b8>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 8006f9e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006fa2:	3320      	adds	r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	da00      	bge.n	8006faa <Send_Status_Message+0x84a>
 8006fa8:	3307      	adds	r3, #7
 8006faa:	10db      	asrs	r3, r3, #3
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006fb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fbc:	3320      	adds	r3, #32
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	b21b      	sxth	r3, r3
 8006fc2:	425a      	negs	r2, r3
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	f002 0207 	and.w	r2, r2, #7
 8006fcc:	bf58      	it	pl
 8006fce:	4253      	negpl	r3, r2
 8006fd0:	b21b      	sxth	r3, r3
 8006fd2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <Send_Status_Message+0x8bc>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	0a5b      	lsrs	r3, r3, #9
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <Send_Status_Message+0x89c>
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <Send_Status_Message+0x8bc>)
 8006fe6:	791b      	ldrb	r3, [r3, #4]
 8006fe8:	79fa      	ldrb	r2, [r7, #7]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d106      	bne.n	8006ffc <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 8006fee:	480c      	ldr	r0, [pc, #48]	; (8007020 <Send_Status_Message+0x8c0>)
 8006ff0:	f01f fdc4 	bl	8026b7c <puts>
		printf("Not Sending Reply");
 8006ff4:	480b      	ldr	r0, [pc, #44]	; (8007024 <Send_Status_Message+0x8c4>)
 8006ff6:	f01f fd25 	bl	8026a44 <iprintf>
 8006ffa:	e009      	b.n	8007010 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006ffc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007000:	b2d9      	uxtb	r1, r3
 8007002:	79fa      	ldrb	r2, [r7, #7]
 8007004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007008:	4618      	mov	r0, r3
 800700a:	f001 f82d 	bl	8008068 <Process_Sending_Reply>
	}
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	3794      	adds	r7, #148	; 0x94
 8007014:	46bd      	mov	sp, r7
 8007016:	bd90      	pop	{r4, r7, pc}
 8007018:	200024af 	.word	0x200024af
 800701c:	2000308c 	.word	0x2000308c
 8007020:	08028a2c 	.word	0x08028a2c
 8007024:	08028a44 	.word	0x08028a44

08007028 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	4603      	mov	r3, r0
 8007038:	70fb      	strb	r3, [r7, #3]
 800703a:	460b      	mov	r3, r1
 800703c:	70bb      	strb	r3, [r7, #2]
 800703e:	4613      	mov	r3, r2
 8007040:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = RESET;
 800704a:	2300      	movs	r3, #0
 800704c:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 800704e:	f012 fcef 	bl	8019a30 <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 8007054:	2300      	movs	r3, #0
 8007056:	81fb      	strh	r3, [r7, #14]
 8007058:	2300      	movs	r3, #0
 800705a:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b05      	subs	r3, #5
 8007062:	b29b      	uxth	r3, r3
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f00e ff56 	bl	8015f18 <CalculateDirectReverseCrc>
 800706c:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	3b05      	subs	r3, #5
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	441a      	add	r2, r3
 8007076:	89bb      	ldrh	r3, [r7, #12]
 8007078:	2120      	movs	r1, #32
 800707a:	4618      	mov	r0, r3
 800707c:	f7f9 faca 	bl	8000614 <ExtractBits>
 8007080:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	429a      	cmp	r2, r3
 8007088:	d01c      	beq.n	80070c4 <Service_Msg_Extr+0x9c>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800708a:	78bb      	ldrb	r3, [r7, #2]
 800708c:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <Service_Msg_Extr+0x8c>)
 800708e:	3366      	adds	r3, #102	; 0x66
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	4619      	mov	r1, r3
 8007098:	4807      	ldr	r0, [pc, #28]	; (80070b8 <Service_Msg_Extr+0x90>)
 800709a:	f01f fcd3 	bl	8026a44 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	4806      	ldr	r0, [pc, #24]	; (80070bc <Service_Msg_Extr+0x94>)
 80070a2:	f01f fccf 	bl	8026a44 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 80070a6:	69b9      	ldr	r1, [r7, #24]
 80070a8:	4805      	ldr	r0, [pc, #20]	; (80070c0 <Service_Msg_Extr+0x98>)
 80070aa:	f01f fccb 	bl	8026a44 <iprintf>
		return;
 80070ae:	f000 bc0e 	b.w	80078ce <Service_Msg_Extr+0x8a6>
 80070b2:	bf00      	nop
 80070b4:	20000504 	.word	0x20000504
 80070b8:	08028f98 	.word	0x08028f98
 80070bc:	08028798 	.word	0x08028798
 80070c0:	080287a8 	.word	0x080287a8
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 80070c4:	78bb      	ldrb	r3, [r7, #2]
 80070c6:	49ae      	ldr	r1, [pc, #696]	; (8007380 <Service_Msg_Extr+0x358>)
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80070ce:	78bb      	ldrb	r3, [r7, #2]
 80070d0:	49ac      	ldr	r1, [pc, #688]	; (8007384 <Service_Msg_Extr+0x35c>)
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 80070d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070dc:	3308      	adds	r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	da00      	bge.n	80070e4 <Service_Msg_Extr+0xbc>
 80070e2:	3307      	adds	r3, #7
 80070e4:	10db      	asrs	r3, r3, #3
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	89fb      	ldrh	r3, [r7, #14]
 80070ea:	4413      	add	r3, r2
 80070ec:	81fb      	strh	r3, [r7, #14]
 80070ee:	89bb      	ldrh	r3, [r7, #12]
 80070f0:	3308      	adds	r3, #8
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	b21b      	sxth	r3, r3
 80070f6:	425a      	negs	r2, r3
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	f002 0207 	and.w	r2, r2, #7
 8007100:	bf58      	it	pl
 8007102:	4253      	negpl	r3, r2
 8007104:	b21b      	sxth	r3, r3
 8007106:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8007108:	89fb      	ldrh	r3, [r7, #14]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	441a      	add	r2, r3
 800710e:	89bb      	ldrh	r3, [r7, #12]
 8007110:	2110      	movs	r1, #16
 8007112:	4618      	mov	r0, r3
 8007114:	f7f9 fa7e 	bl	8000614 <ExtractBits>
 8007118:	4603      	mov	r3, r0
 800711a:	78ba      	ldrb	r2, [r7, #2]
 800711c:	b298      	uxth	r0, r3
 800711e:	499a      	ldr	r1, [pc, #616]	; (8007388 <Service_Msg_Extr+0x360>)
 8007120:	4613      	mov	r3, r2
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	3306      	adds	r3, #6
 800712c:	4602      	mov	r2, r0
 800712e:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8007130:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007134:	3310      	adds	r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	da00      	bge.n	800713c <Service_Msg_Extr+0x114>
 800713a:	3307      	adds	r3, #7
 800713c:	10db      	asrs	r3, r3, #3
 800713e:	b29a      	uxth	r2, r3
 8007140:	89fb      	ldrh	r3, [r7, #14]
 8007142:	4413      	add	r3, r2
 8007144:	81fb      	strh	r3, [r7, #14]
 8007146:	89bb      	ldrh	r3, [r7, #12]
 8007148:	3310      	adds	r3, #16
 800714a:	b29b      	uxth	r3, r3
 800714c:	b21b      	sxth	r3, r3
 800714e:	425a      	negs	r2, r3
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	f002 0207 	and.w	r2, r2, #7
 8007158:	bf58      	it	pl
 800715a:	4253      	negpl	r3, r2
 800715c:	b21b      	sxth	r3, r3
 800715e:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8007160:	89fb      	ldrh	r3, [r7, #14]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	441a      	add	r2, r3
 8007166:	89bb      	ldrh	r3, [r7, #12]
 8007168:	2110      	movs	r1, #16
 800716a:	4618      	mov	r0, r3
 800716c:	f7f9 fa52 	bl	8000614 <ExtractBits>
 8007170:	4603      	mov	r3, r0
 8007172:	78ba      	ldrb	r2, [r7, #2]
 8007174:	b298      	uxth	r0, r3
 8007176:	4984      	ldr	r1, [pc, #528]	; (8007388 <Service_Msg_Extr+0x360>)
 8007178:	4613      	mov	r3, r2
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	440b      	add	r3, r1
 8007182:	3304      	adds	r3, #4
 8007184:	4602      	mov	r2, r0
 8007186:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8007188:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800718c:	3310      	adds	r3, #16
 800718e:	2b00      	cmp	r3, #0
 8007190:	da00      	bge.n	8007194 <Service_Msg_Extr+0x16c>
 8007192:	3307      	adds	r3, #7
 8007194:	10db      	asrs	r3, r3, #3
 8007196:	b29a      	uxth	r2, r3
 8007198:	89fb      	ldrh	r3, [r7, #14]
 800719a:	4413      	add	r3, r2
 800719c:	81fb      	strh	r3, [r7, #14]
 800719e:	89bb      	ldrh	r3, [r7, #12]
 80071a0:	3310      	adds	r3, #16
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	b21b      	sxth	r3, r3
 80071a6:	425a      	negs	r2, r3
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	f002 0207 	and.w	r2, r2, #7
 80071b0:	bf58      	it	pl
 80071b2:	4253      	negpl	r3, r2
 80071b4:	b21b      	sxth	r3, r3
 80071b6:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80071b8:	89fb      	ldrh	r3, [r7, #14]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	441a      	add	r2, r3
 80071be:	89bb      	ldrh	r3, [r7, #12]
 80071c0:	2108      	movs	r1, #8
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7f9 fa26 	bl	8000614 <ExtractBits>
 80071c8:	4602      	mov	r2, r0
 80071ca:	78bb      	ldrb	r3, [r7, #2]
 80071cc:	b2d1      	uxtb	r1, r2
 80071ce:	4a6f      	ldr	r2, [pc, #444]	; (800738c <Service_Msg_Extr+0x364>)
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	4413      	add	r3, r2
 80071d4:	3302      	adds	r3, #2
 80071d6:	460a      	mov	r2, r1
 80071d8:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80071da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071de:	3308      	adds	r3, #8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	da00      	bge.n	80071e6 <Service_Msg_Extr+0x1be>
 80071e4:	3307      	adds	r3, #7
 80071e6:	10db      	asrs	r3, r3, #3
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	89fb      	ldrh	r3, [r7, #14]
 80071ec:	4413      	add	r3, r2
 80071ee:	81fb      	strh	r3, [r7, #14]
 80071f0:	89bb      	ldrh	r3, [r7, #12]
 80071f2:	3308      	adds	r3, #8
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	b21b      	sxth	r3, r3
 80071f8:	425a      	negs	r2, r3
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	f002 0207 	and.w	r2, r2, #7
 8007202:	bf58      	it	pl
 8007204:	4253      	negpl	r3, r2
 8007206:	b21b      	sxth	r3, r3
 8007208:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800720a:	89fb      	ldrh	r3, [r7, #14]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	441a      	add	r2, r3
 8007210:	89bb      	ldrh	r3, [r7, #12]
 8007212:	2108      	movs	r1, #8
 8007214:	4618      	mov	r0, r3
 8007216:	f7f9 f9fd 	bl	8000614 <ExtractBits>
 800721a:	4602      	mov	r2, r0
 800721c:	78bb      	ldrb	r3, [r7, #2]
 800721e:	b2d1      	uxtb	r1, r2
 8007220:	4a5a      	ldr	r2, [pc, #360]	; (800738c <Service_Msg_Extr+0x364>)
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	4413      	add	r3, r2
 8007226:	3301      	adds	r3, #1
 8007228:	460a      	mov	r2, r1
 800722a:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 800722c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007230:	3308      	adds	r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	da00      	bge.n	8007238 <Service_Msg_Extr+0x210>
 8007236:	3307      	adds	r3, #7
 8007238:	10db      	asrs	r3, r3, #3
 800723a:	b29a      	uxth	r2, r3
 800723c:	89fb      	ldrh	r3, [r7, #14]
 800723e:	4413      	add	r3, r2
 8007240:	81fb      	strh	r3, [r7, #14]
 8007242:	89bb      	ldrh	r3, [r7, #12]
 8007244:	3308      	adds	r3, #8
 8007246:	b29b      	uxth	r3, r3
 8007248:	b21b      	sxth	r3, r3
 800724a:	425a      	negs	r2, r3
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	f002 0207 	and.w	r2, r2, #7
 8007254:	bf58      	it	pl
 8007256:	4253      	negpl	r3, r2
 8007258:	b21b      	sxth	r3, r3
 800725a:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800725c:	89fb      	ldrh	r3, [r7, #14]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	441a      	add	r2, r3
 8007262:	89bb      	ldrh	r3, [r7, #12]
 8007264:	2108      	movs	r1, #8
 8007266:	4618      	mov	r0, r3
 8007268:	f7f9 f9d4 	bl	8000614 <ExtractBits>
 800726c:	4603      	mov	r3, r0
 800726e:	78ba      	ldrb	r2, [r7, #2]
 8007270:	b2d8      	uxtb	r0, r3
 8007272:	4945      	ldr	r1, [pc, #276]	; (8007388 <Service_Msg_Extr+0x360>)
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	3302      	adds	r3, #2
 8007280:	4602      	mov	r2, r0
 8007282:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8007284:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007288:	3308      	adds	r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	da00      	bge.n	8007290 <Service_Msg_Extr+0x268>
 800728e:	3307      	adds	r3, #7
 8007290:	10db      	asrs	r3, r3, #3
 8007292:	b29a      	uxth	r2, r3
 8007294:	89fb      	ldrh	r3, [r7, #14]
 8007296:	4413      	add	r3, r2
 8007298:	81fb      	strh	r3, [r7, #14]
 800729a:	89bb      	ldrh	r3, [r7, #12]
 800729c:	3308      	adds	r3, #8
 800729e:	b29b      	uxth	r3, r3
 80072a0:	b21b      	sxth	r3, r3
 80072a2:	425a      	negs	r2, r3
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	f002 0207 	and.w	r2, r2, #7
 80072ac:	bf58      	it	pl
 80072ae:	4253      	negpl	r3, r2
 80072b0:	b21b      	sxth	r3, r3
 80072b2:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80072b4:	89fb      	ldrh	r3, [r7, #14]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	441a      	add	r2, r3
 80072ba:	89bb      	ldrh	r3, [r7, #12]
 80072bc:	2110      	movs	r1, #16
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f9 f9a8 	bl	8000614 <ExtractBits>
 80072c4:	4602      	mov	r2, r0
 80072c6:	78bb      	ldrb	r3, [r7, #2]
 80072c8:	b291      	uxth	r1, r2
 80072ca:	4a30      	ldr	r2, [pc, #192]	; (800738c <Service_Msg_Extr+0x364>)
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	4413      	add	r3, r2
 80072d0:	3304      	adds	r3, #4
 80072d2:	460a      	mov	r2, r1
 80072d4:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80072d6:	492e      	ldr	r1, [pc, #184]	; (8007390 <Service_Msg_Extr+0x368>)
 80072d8:	482e      	ldr	r0, [pc, #184]	; (8007394 <Service_Msg_Extr+0x36c>)
 80072da:	f7f8 ffb1 	bl	8000240 <strcmp>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10f      	bne.n	8007304 <Service_Msg_Extr+0x2dc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80072e4:	78bb      	ldrb	r3, [r7, #2]
 80072e6:	4a29      	ldr	r2, [pc, #164]	; (800738c <Service_Msg_Extr+0x364>)
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	4413      	add	r3, r2
 80072ec:	3304      	adds	r3, #4
 80072ee:	881a      	ldrh	r2, [r3, #0]
 80072f0:	78bb      	ldrb	r3, [r7, #2]
 80072f2:	f042 0208 	orr.w	r2, r2, #8
 80072f6:	b291      	uxth	r1, r2
 80072f8:	4a24      	ldr	r2, [pc, #144]	; (800738c <Service_Msg_Extr+0x364>)
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	4413      	add	r3, r2
 80072fe:	3304      	adds	r3, #4
 8007300:	460a      	mov	r2, r1
 8007302:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8007304:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007308:	3310      	adds	r3, #16
 800730a:	2b00      	cmp	r3, #0
 800730c:	da00      	bge.n	8007310 <Service_Msg_Extr+0x2e8>
 800730e:	3307      	adds	r3, #7
 8007310:	10db      	asrs	r3, r3, #3
 8007312:	b29a      	uxth	r2, r3
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	4413      	add	r3, r2
 8007318:	81fb      	strh	r3, [r7, #14]
 800731a:	89bb      	ldrh	r3, [r7, #12]
 800731c:	3310      	adds	r3, #16
 800731e:	b29b      	uxth	r3, r3
 8007320:	b21b      	sxth	r3, r3
 8007322:	425a      	negs	r2, r3
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	f002 0207 	and.w	r2, r2, #7
 800732c:	bf58      	it	pl
 800732e:	4253      	negpl	r3, r2
 8007330:	b21b      	sxth	r3, r3
 8007332:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8007334:	78bb      	ldrb	r3, [r7, #2]
 8007336:	4a15      	ldr	r2, [pc, #84]	; (800738c <Service_Msg_Extr+0x364>)
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	4413      	add	r3, r2
 800733c:	3304      	adds	r3, #4
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8126 	beq.w	8007596 <Service_Msg_Extr+0x56e>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800734a:	89fb      	ldrh	r3, [r7, #14]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	441a      	add	r2, r3
 8007350:	89bb      	ldrh	r3, [r7, #12]
 8007352:	2108      	movs	r1, #8
 8007354:	4618      	mov	r0, r3
 8007356:	f7f9 f95d 	bl	8000614 <ExtractBits>
 800735a:	4603      	mov	r3, r0
 800735c:	78ba      	ldrb	r2, [r7, #2]
 800735e:	b2d8      	uxtb	r0, r3
 8007360:	490d      	ldr	r1, [pc, #52]	; (8007398 <Service_Msg_Extr+0x370>)
 8007362:	4613      	mov	r3, r2
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	440b      	add	r3, r1
 800736c:	3305      	adds	r3, #5
 800736e:	4602      	mov	r2, r0
 8007370:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8007372:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007376:	3308      	adds	r3, #8
 8007378:	2b00      	cmp	r3, #0
 800737a:	da0f      	bge.n	800739c <Service_Msg_Extr+0x374>
 800737c:	3307      	adds	r3, #7
 800737e:	e00d      	b.n	800739c <Service_Msg_Extr+0x374>
 8007380:	20002630 	.word	0x20002630
 8007384:	20002658 	.word	0x20002658
 8007388:	20002cb4 	.word	0x20002cb4
 800738c:	200028f4 	.word	0x200028f4
 8007390:	08028554 	.word	0x08028554
 8007394:	20000505 	.word	0x20000505
 8007398:	200028b8 	.word	0x200028b8
 800739c:	10db      	asrs	r3, r3, #3
 800739e:	b29a      	uxth	r2, r3
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	4413      	add	r3, r2
 80073a4:	81fb      	strh	r3, [r7, #14]
 80073a6:	89bb      	ldrh	r3, [r7, #12]
 80073a8:	3308      	adds	r3, #8
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	425a      	negs	r2, r3
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	f002 0207 	and.w	r2, r2, #7
 80073b8:	bf58      	it	pl
 80073ba:	4253      	negpl	r3, r2
 80073bc:	b21b      	sxth	r3, r3
 80073be:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80073c0:	89fb      	ldrh	r3, [r7, #14]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	441a      	add	r2, r3
 80073c6:	89bb      	ldrh	r3, [r7, #12]
 80073c8:	2108      	movs	r1, #8
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7f9 f922 	bl	8000614 <ExtractBits>
 80073d0:	4603      	mov	r3, r0
 80073d2:	78ba      	ldrb	r2, [r7, #2]
 80073d4:	b2d8      	uxtb	r0, r3
 80073d6:	4989      	ldr	r1, [pc, #548]	; (80075fc <Service_Msg_Extr+0x5d4>)
 80073d8:	4613      	mov	r3, r2
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	4413      	add	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	440b      	add	r3, r1
 80073e2:	3304      	adds	r3, #4
 80073e4:	4602      	mov	r2, r0
 80073e6:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80073e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80073ec:	3308      	adds	r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da00      	bge.n	80073f4 <Service_Msg_Extr+0x3cc>
 80073f2:	3307      	adds	r3, #7
 80073f4:	10db      	asrs	r3, r3, #3
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	89fb      	ldrh	r3, [r7, #14]
 80073fa:	4413      	add	r3, r2
 80073fc:	81fb      	strh	r3, [r7, #14]
 80073fe:	89bb      	ldrh	r3, [r7, #12]
 8007400:	3308      	adds	r3, #8
 8007402:	b29b      	uxth	r3, r3
 8007404:	b21b      	sxth	r3, r3
 8007406:	425a      	negs	r2, r3
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	f002 0207 	and.w	r2, r2, #7
 8007410:	bf58      	it	pl
 8007412:	4253      	negpl	r3, r2
 8007414:	b21b      	sxth	r3, r3
 8007416:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007418:	89fb      	ldrh	r3, [r7, #14]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	441a      	add	r2, r3
 800741e:	89bb      	ldrh	r3, [r7, #12]
 8007420:	2108      	movs	r1, #8
 8007422:	4618      	mov	r0, r3
 8007424:	f7f9 f8f6 	bl	8000614 <ExtractBits>
 8007428:	4603      	mov	r3, r0
 800742a:	78ba      	ldrb	r2, [r7, #2]
 800742c:	b2d8      	uxtb	r0, r3
 800742e:	4973      	ldr	r1, [pc, #460]	; (80075fc <Service_Msg_Extr+0x5d4>)
 8007430:	4613      	mov	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	440b      	add	r3, r1
 800743a:	3303      	adds	r3, #3
 800743c:	4602      	mov	r2, r0
 800743e:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8007440:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007444:	3308      	adds	r3, #8
 8007446:	2b00      	cmp	r3, #0
 8007448:	da00      	bge.n	800744c <Service_Msg_Extr+0x424>
 800744a:	3307      	adds	r3, #7
 800744c:	10db      	asrs	r3, r3, #3
 800744e:	b29a      	uxth	r2, r3
 8007450:	89fb      	ldrh	r3, [r7, #14]
 8007452:	4413      	add	r3, r2
 8007454:	81fb      	strh	r3, [r7, #14]
 8007456:	89bb      	ldrh	r3, [r7, #12]
 8007458:	3308      	adds	r3, #8
 800745a:	b29b      	uxth	r3, r3
 800745c:	b21b      	sxth	r3, r3
 800745e:	425a      	negs	r2, r3
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	f002 0207 	and.w	r2, r2, #7
 8007468:	bf58      	it	pl
 800746a:	4253      	negpl	r3, r2
 800746c:	b21b      	sxth	r3, r3
 800746e:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007470:	89fb      	ldrh	r3, [r7, #14]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	441a      	add	r2, r3
 8007476:	89bb      	ldrh	r3, [r7, #12]
 8007478:	2108      	movs	r1, #8
 800747a:	4618      	mov	r0, r3
 800747c:	f7f9 f8ca 	bl	8000614 <ExtractBits>
 8007480:	4603      	mov	r3, r0
 8007482:	78ba      	ldrb	r2, [r7, #2]
 8007484:	b2d8      	uxtb	r0, r3
 8007486:	495d      	ldr	r1, [pc, #372]	; (80075fc <Service_Msg_Extr+0x5d4>)
 8007488:	4613      	mov	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4413      	add	r3, r2
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	440b      	add	r3, r1
 8007492:	4602      	mov	r2, r0
 8007494:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8007496:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800749a:	3308      	adds	r3, #8
 800749c:	2b00      	cmp	r3, #0
 800749e:	da00      	bge.n	80074a2 <Service_Msg_Extr+0x47a>
 80074a0:	3307      	adds	r3, #7
 80074a2:	10db      	asrs	r3, r3, #3
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	89fb      	ldrh	r3, [r7, #14]
 80074a8:	4413      	add	r3, r2
 80074aa:	81fb      	strh	r3, [r7, #14]
 80074ac:	89bb      	ldrh	r3, [r7, #12]
 80074ae:	3308      	adds	r3, #8
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	b21b      	sxth	r3, r3
 80074b4:	425a      	negs	r2, r3
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	f002 0207 	and.w	r2, r2, #7
 80074be:	bf58      	it	pl
 80074c0:	4253      	negpl	r3, r2
 80074c2:	b21b      	sxth	r3, r3
 80074c4:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80074c6:	89fb      	ldrh	r3, [r7, #14]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	441a      	add	r2, r3
 80074cc:	89bb      	ldrh	r3, [r7, #12]
 80074ce:	2108      	movs	r1, #8
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7f9 f89f 	bl	8000614 <ExtractBits>
 80074d6:	4603      	mov	r3, r0
 80074d8:	78ba      	ldrb	r2, [r7, #2]
 80074da:	b2d8      	uxtb	r0, r3
 80074dc:	4947      	ldr	r1, [pc, #284]	; (80075fc <Service_Msg_Extr+0x5d4>)
 80074de:	4613      	mov	r3, r2
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	4413      	add	r3, r2
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	440b      	add	r3, r1
 80074e8:	3301      	adds	r3, #1
 80074ea:	4602      	mov	r2, r0
 80074ec:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80074ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80074f2:	3308      	adds	r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	da00      	bge.n	80074fa <Service_Msg_Extr+0x4d2>
 80074f8:	3307      	adds	r3, #7
 80074fa:	10db      	asrs	r3, r3, #3
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	89fb      	ldrh	r3, [r7, #14]
 8007500:	4413      	add	r3, r2
 8007502:	81fb      	strh	r3, [r7, #14]
 8007504:	89bb      	ldrh	r3, [r7, #12]
 8007506:	3308      	adds	r3, #8
 8007508:	b29b      	uxth	r3, r3
 800750a:	b21b      	sxth	r3, r3
 800750c:	425a      	negs	r2, r3
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	f002 0207 	and.w	r2, r2, #7
 8007516:	bf58      	it	pl
 8007518:	4253      	negpl	r3, r2
 800751a:	b21b      	sxth	r3, r3
 800751c:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800751e:	89fb      	ldrh	r3, [r7, #14]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	441a      	add	r2, r3
 8007524:	89bb      	ldrh	r3, [r7, #12]
 8007526:	2108      	movs	r1, #8
 8007528:	4618      	mov	r0, r3
 800752a:	f7f9 f873 	bl	8000614 <ExtractBits>
 800752e:	4603      	mov	r3, r0
 8007530:	78ba      	ldrb	r2, [r7, #2]
 8007532:	b2d8      	uxtb	r0, r3
 8007534:	4931      	ldr	r1, [pc, #196]	; (80075fc <Service_Msg_Extr+0x5d4>)
 8007536:	4613      	mov	r3, r2
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	4413      	add	r3, r2
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	440b      	add	r3, r1
 8007540:	3302      	adds	r3, #2
 8007542:	4602      	mov	r2, r0
 8007544:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8007546:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800754a:	3308      	adds	r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	da00      	bge.n	8007552 <Service_Msg_Extr+0x52a>
 8007550:	3307      	adds	r3, #7
 8007552:	10db      	asrs	r3, r3, #3
 8007554:	b29a      	uxth	r2, r3
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	4413      	add	r3, r2
 800755a:	81fb      	strh	r3, [r7, #14]
 800755c:	89bb      	ldrh	r3, [r7, #12]
 800755e:	3308      	adds	r3, #8
 8007560:	b29b      	uxth	r3, r3
 8007562:	b21b      	sxth	r3, r3
 8007564:	425a      	negs	r2, r3
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	f002 0207 	and.w	r2, r2, #7
 800756e:	bf58      	it	pl
 8007570:	4253      	negpl	r3, r2
 8007572:	b21b      	sxth	r3, r3
 8007574:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8007576:	78bb      	ldrb	r3, [r7, #2]
 8007578:	4618      	mov	r0, r3
 800757a:	f002 f9c5 	bl	8009908 <IS_MLK_EIPC_TIME_MATCHING>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <Service_Msg_Extr+0x566>
 8007584:	78bb      	ldrb	r3, [r7, #2]
 8007586:	4a1e      	ldr	r2, [pc, #120]	; (8007600 <Service_Msg_Extr+0x5d8>)
 8007588:	2100      	movs	r1, #0
 800758a:	54d1      	strb	r1, [r2, r3]
 800758c:	e003      	b.n	8007596 <Service_Msg_Extr+0x56e>
 800758e:	78bb      	ldrb	r3, [r7, #2]
 8007590:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <Service_Msg_Extr+0x5d8>)
 8007592:	2101      	movs	r1, #1
 8007594:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8007596:	78bb      	ldrb	r3, [r7, #2]
 8007598:	4a1a      	ldr	r2, [pc, #104]	; (8007604 <Service_Msg_Extr+0x5dc>)
 800759a:	011b      	lsls	r3, r3, #4
 800759c:	4413      	add	r3, r2
 800759e:	3304      	adds	r3, #4
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <Service_Msg_Extr+0x586>
	{
		LinkEstablishFlag = SET;
 80075aa:	2301      	movs	r3, #1
 80075ac:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 80075ae:	787a      	ldrb	r2, [r7, #1]
 80075b0:	78bb      	ldrb	r3, [r7, #2]
 80075b2:	4611      	mov	r1, r2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff f8d3 	bl	8006760 <Send_Status_Message>
	/* Preparing and Sending Reply */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 80075ba:	78bb      	ldrb	r3, [r7, #2]
 80075bc:	4a12      	ldr	r2, [pc, #72]	; (8007608 <Service_Msg_Extr+0x5e0>)
 80075be:	4413      	add	r3, r2
 80075c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d127      	bne.n	8007618 <Service_Msg_Extr+0x5f0>
 80075c8:	78bb      	ldrb	r3, [r7, #2]
 80075ca:	4a10      	ldr	r2, [pc, #64]	; (800760c <Service_Msg_Extr+0x5e4>)
 80075cc:	5cd3      	ldrb	r3, [r2, r3]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d822      	bhi.n	8007618 <Service_Msg_Extr+0x5f0>
 80075d2:	78ba      	ldrb	r2, [r7, #2]
 80075d4:	490e      	ldr	r1, [pc, #56]	; (8007610 <Service_Msg_Extr+0x5e8>)
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	440b      	add	r3, r1
 80075e0:	3305      	adds	r3, #5
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d115      	bne.n	8007618 <Service_Msg_Extr+0x5f0>
 80075ec:	78bb      	ldrb	r3, [r7, #2]
 80075ee:	4a09      	ldr	r2, [pc, #36]	; (8007614 <Service_Msg_Extr+0x5ec>)
 80075f0:	5cd3      	ldrb	r3, [r2, r3]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d110      	bne.n	8007618 <Service_Msg_Extr+0x5f0>
	{
		LinkEstablishFlag = RESET;
 80075f6:	2300      	movs	r3, #0
 80075f8:	77fb      	strb	r3, [r7, #31]
 80075fa:	e037      	b.n	800766c <Service_Msg_Extr+0x644>
 80075fc:	200028b8 	.word	0x200028b8
 8007600:	20002764 	.word	0x20002764
 8007604:	200028f4 	.word	0x200028f4
 8007608:	20000504 	.word	0x20000504
 800760c:	20002544 	.word	0x20002544
 8007610:	20002ad4 	.word	0x20002ad4
 8007614:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8007618:	78bb      	ldrb	r3, [r7, #2]
 800761a:	4aae      	ldr	r2, [pc, #696]	; (80078d4 <Service_Msg_Extr+0x8ac>)
 800761c:	4413      	add	r3, r2
 800761e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007622:	2b02      	cmp	r3, #2
 8007624:	d122      	bne.n	800766c <Service_Msg_Extr+0x644>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 8007626:	78bb      	ldrb	r3, [r7, #2]
 8007628:	4aaa      	ldr	r2, [pc, #680]	; (80078d4 <Service_Msg_Extr+0x8ac>)
 800762a:	3366      	adds	r3, #102	; 0x66
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	6859      	ldr	r1, [r3, #4]
 8007632:	78bb      	ldrb	r3, [r7, #2]
 8007634:	4aa8      	ldr	r2, [pc, #672]	; (80078d8 <Service_Msg_Extr+0x8b0>)
 8007636:	5cd3      	ldrb	r3, [r2, r3]
 8007638:	461a      	mov	r2, r3
 800763a:	48a8      	ldr	r0, [pc, #672]	; (80078dc <Service_Msg_Extr+0x8b4>)
 800763c:	f01f fa02 	bl	8026a44 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8007640:	78bb      	ldrb	r3, [r7, #2]
 8007642:	4aa7      	ldr	r2, [pc, #668]	; (80078e0 <Service_Msg_Extr+0x8b8>)
 8007644:	5cd3      	ldrb	r3, [r2, r3]
 8007646:	4619      	mov	r1, r3
 8007648:	48a6      	ldr	r0, [pc, #664]	; (80078e4 <Service_Msg_Extr+0x8bc>)
 800764a:	f01f f9fb 	bl	8026a44 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 800764e:	78ba      	ldrb	r2, [r7, #2]
 8007650:	49a5      	ldr	r1, [pc, #660]	; (80078e8 <Service_Msg_Extr+0x8c0>)
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	440b      	add	r3, r1
 800765c:	3305      	adds	r3, #5
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	4619      	mov	r1, r3
 8007666:	48a1      	ldr	r0, [pc, #644]	; (80078ec <Service_Msg_Extr+0x8c4>)
 8007668:	f01f f9ec 	bl	8026a44 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 800766c:	7ffb      	ldrb	r3, [r7, #31]
 800766e:	2b01      	cmp	r3, #1
 8007670:	f040 8083 	bne.w	800777a <Service_Msg_Extr+0x752>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8007674:	78ba      	ldrb	r2, [r7, #2]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4a9c      	ldr	r2, [pc, #624]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 8007680:	4413      	add	r3, r2
 8007682:	3301      	adds	r3, #1
 8007684:	2210      	movs	r2, #16
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f01f f8f3 	bl	8026874 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 800768e:	78ba      	ldrb	r2, [r7, #2]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4a95      	ldr	r2, [pc, #596]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 800769a:	1898      	adds	r0, r3, r2
 800769c:	78ba      	ldrb	r2, [r7, #2]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4a93      	ldr	r2, [pc, #588]	; (80078f4 <Service_Msg_Extr+0x8cc>)
 80076a8:	4413      	add	r3, r2
 80076aa:	2214      	movs	r2, #20
 80076ac:	4619      	mov	r1, r3
 80076ae:	f01f f8b9 	bl	8026824 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80076b2:	78bb      	ldrb	r3, [r7, #2]
 80076b4:	4a90      	ldr	r2, [pc, #576]	; (80078f8 <Service_Msg_Extr+0x8d0>)
 80076b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80076ba:	78ba      	ldrb	r2, [r7, #2]
 80076bc:	488c      	ldr	r0, [pc, #560]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4403      	add	r3, r0
 80076c8:	3312      	adds	r3, #18
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d054      	beq.n	800777a <Service_Msg_Extr+0x752>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80076d0:	78ba      	ldrb	r2, [r7, #2]
 80076d2:	78b9      	ldrb	r1, [r7, #2]
 80076d4:	4886      	ldr	r0, [pc, #536]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4403      	add	r3, r0
 80076e0:	3312      	adds	r3, #18
 80076e2:	881a      	ldrh	r2, [r3, #0]
 80076e4:	4b84      	ldr	r3, [pc, #528]	; (80078f8 <Service_Msg_Extr+0x8d0>)
 80076e6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80076ea:	2214      	movs	r2, #20
 80076ec:	2100      	movs	r1, #0
 80076ee:	4883      	ldr	r0, [pc, #524]	; (80078fc <Service_Msg_Extr+0x8d4>)
 80076f0:	f01f f8c0 	bl	8026874 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80076f4:	78ba      	ldrb	r2, [r7, #2]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4a7c      	ldr	r2, [pc, #496]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 8007700:	4413      	add	r3, r2
 8007702:	2214      	movs	r2, #20
 8007704:	4619      	mov	r1, r3
 8007706:	487d      	ldr	r0, [pc, #500]	; (80078fc <Service_Msg_Extr+0x8d4>)
 8007708:	f01f f88c 	bl	8026824 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800770c:	f240 2007 	movw	r0, #519	; 0x207
 8007710:	f009 fc26 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8007714:	78b9      	ldrb	r1, [r7, #2]
 8007716:	78ba      	ldrb	r2, [r7, #2]
 8007718:	4875      	ldr	r0, [pc, #468]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 800771a:	460b      	mov	r3, r1
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4403      	add	r3, r0
 8007724:	3312      	adds	r3, #18
 8007726:	8818      	ldrh	r0, [r3, #0]
 8007728:	4975      	ldr	r1, [pc, #468]	; (8007900 <Service_Msg_Extr+0x8d8>)
 800772a:	4613      	mov	r3, r2
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	4413      	add	r3, r2
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	440b      	add	r3, r1
 8007734:	3306      	adds	r3, #6
 8007736:	4602      	mov	r2, r0
 8007738:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 800773a:	78bb      	ldrb	r3, [r7, #2]
 800773c:	4a71      	ldr	r2, [pc, #452]	; (8007904 <Service_Msg_Extr+0x8dc>)
 800773e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d119      	bne.n	800777a <Service_Msg_Extr+0x752>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8007746:	78bb      	ldrb	r3, [r7, #2]
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	4a6f      	ldr	r2, [pc, #444]	; (8007908 <Service_Msg_Extr+0x8e0>)
 800774c:	4413      	add	r3, r2
 800774e:	1c98      	adds	r0, r3, #2
 8007750:	78ba      	ldrb	r2, [r7, #2]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4a65      	ldr	r2, [pc, #404]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 800775c:	4413      	add	r3, r2
 800775e:	3301      	adds	r3, #1
 8007760:	2210      	movs	r2, #16
 8007762:	4619      	mov	r1, r3
 8007764:	f01f f85e 	bl	8026824 <memcpy>
#ifdef EI_1
				ReArrangedVitalData();
 8007768:	f002 ffcc 	bl	800a704 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 800776c:	f240 1019 	movw	r0, #281	; 0x119
 8007770:	f009 fbf6 	bl	8010f60 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8007774:	4a65      	ldr	r2, [pc, #404]	; (800790c <Service_Msg_Extr+0x8e4>)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 800777a:	78ba      	ldrb	r2, [r7, #2]
 800777c:	4960      	ldr	r1, [pc, #384]	; (8007900 <Service_Msg_Extr+0x8d8>)
 800777e:	4613      	mov	r3, r2
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4413      	add	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	440b      	add	r3, r1
 8007788:	3314      	adds	r3, #20
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 800778e:	78ba      	ldrb	r2, [r7, #2]
 8007790:	495b      	ldr	r1, [pc, #364]	; (8007900 <Service_Msg_Extr+0x8d8>)
 8007792:	4613      	mov	r3, r2
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4413      	add	r3, r2
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	440b      	add	r3, r1
 800779c:	3305      	adds	r3, #5
 800779e:	2206      	movs	r2, #6
 80077a0:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80077a2:	78ba      	ldrb	r2, [r7, #2]
 80077a4:	4956      	ldr	r1, [pc, #344]	; (8007900 <Service_Msg_Extr+0x8d8>)
 80077a6:	4613      	mov	r3, r2
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	4413      	add	r3, r2
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	440b      	add	r3, r1
 80077b0:	78ba      	ldrb	r2, [r7, #2]
 80077b2:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80077b4:	78ba      	ldrb	r2, [r7, #2]
 80077b6:	4952      	ldr	r1, [pc, #328]	; (8007900 <Service_Msg_Extr+0x8d8>)
 80077b8:	4613      	mov	r3, r2
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	4413      	add	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	440b      	add	r3, r1
 80077c2:	3301      	adds	r3, #1
 80077c4:	2201      	movs	r2, #1
 80077c6:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 80077c8:	78ba      	ldrb	r2, [r7, #2]
 80077ca:	494d      	ldr	r1, [pc, #308]	; (8007900 <Service_Msg_Extr+0x8d8>)
 80077cc:	4613      	mov	r3, r2
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	4413      	add	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	440b      	add	r3, r1
 80077d6:	3302      	adds	r3, #2
 80077d8:	7ffa      	ldrb	r2, [r7, #31]
 80077da:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80077dc:	2218      	movs	r2, #24
 80077de:	2100      	movs	r1, #0
 80077e0:	484b      	ldr	r0, [pc, #300]	; (8007910 <Service_Msg_Extr+0x8e8>)
 80077e2:	f01f f847 	bl	8026874 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80077e6:	78ba      	ldrb	r2, [r7, #2]
 80077e8:	4613      	mov	r3, r2
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	4413      	add	r3, r2
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4a43      	ldr	r2, [pc, #268]	; (8007900 <Service_Msg_Extr+0x8d8>)
 80077f2:	4413      	add	r3, r2
 80077f4:	2218      	movs	r2, #24
 80077f6:	4619      	mov	r1, r3
 80077f8:	4845      	ldr	r0, [pc, #276]	; (8007910 <Service_Msg_Extr+0x8e8>)
 80077fa:	f01f f813 	bl	8026824 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80077fe:	f240 2001 	movw	r0, #513	; 0x201
 8007802:	f009 fbad 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8007806:	78ba      	ldrb	r2, [r7, #2]
 8007808:	493d      	ldr	r1, [pc, #244]	; (8007900 <Service_Msg_Extr+0x8d8>)
 800780a:	4613      	mov	r3, r2
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	4413      	add	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	440b      	add	r3, r1
 8007814:	3301      	adds	r3, #1
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 800781a:	78bb      	ldrb	r3, [r7, #2]
 800781c:	493d      	ldr	r1, [pc, #244]	; (8007914 <Service_Msg_Extr+0x8ec>)
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8007824:	7ffb      	ldrb	r3, [r7, #31]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d11d      	bne.n	8007866 <Service_Msg_Extr+0x83e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 800782a:	78bb      	ldrb	r3, [r7, #2]
 800782c:	493a      	ldr	r1, [pc, #232]	; (8007918 <Service_Msg_Extr+0x8f0>)
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SelfLinkFlag[Source_Index] = SET;
 8007834:	78bb      	ldrb	r3, [r7, #2]
 8007836:	4a39      	ldr	r2, [pc, #228]	; (800791c <Service_Msg_Extr+0x8f4>)
 8007838:	2101      	movs	r1, #1
 800783a:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 800783c:	78ba      	ldrb	r2, [r7, #2]
 800783e:	4938      	ldr	r1, [pc, #224]	; (8007920 <Service_Msg_Extr+0x8f8>)
 8007840:	4613      	mov	r3, r2
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	3301      	adds	r3, #1
 800784c:	2201      	movs	r2, #1
 800784e:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8007850:	78ba      	ldrb	r2, [r7, #2]
 8007852:	4933      	ldr	r1, [pc, #204]	; (8007920 <Service_Msg_Extr+0x8f8>)
 8007854:	4613      	mov	r3, r2
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	3304      	adds	r3, #4
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e02e      	b.n	80078c4 <Service_Msg_Extr+0x89c>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8007866:	78bb      	ldrb	r3, [r7, #2]
 8007868:	4a2c      	ldr	r2, [pc, #176]	; (800791c <Service_Msg_Extr+0x8f4>)
 800786a:	2100      	movs	r1, #0
 800786c:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 800786e:	78ba      	ldrb	r2, [r7, #2]
 8007870:	492b      	ldr	r1, [pc, #172]	; (8007920 <Service_Msg_Extr+0x8f8>)
 8007872:	4613      	mov	r3, r2
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	3308      	adds	r3, #8
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8007882:	78ba      	ldrb	r2, [r7, #2]
 8007884:	4926      	ldr	r1, [pc, #152]	; (8007920 <Service_Msg_Extr+0x8f8>)
 8007886:	4613      	mov	r3, r2
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	3301      	adds	r3, #1
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8007896:	78ba      	ldrb	r2, [r7, #2]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4a13      	ldr	r2, [pc, #76]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 80078a2:	4413      	add	r3, r2
 80078a4:	3301      	adds	r3, #1
 80078a6:	2210      	movs	r2, #16
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f01e ffe2 	bl	8026874 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 80078b0:	78ba      	ldrb	r2, [r7, #2]
 80078b2:	490f      	ldr	r1, [pc, #60]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	3312      	adds	r3, #18
 80078c0:	2200      	movs	r2, #0
 80078c2:	801a      	strh	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80078c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078c8:	4816      	ldr	r0, [pc, #88]	; (8007924 <Service_Msg_Extr+0x8fc>)
 80078ca:	f014 fd9a 	bl	801c402 <HAL_GPIO_TogglePin>

}
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000504 	.word	0x20000504
 80078d8:	20002544 	.word	0x20002544
 80078dc:	08028edc 	.word	0x08028edc
 80078e0:	20002538 	.word	0x20002538
 80078e4:	08028eec 	.word	0x08028eec
 80078e8:	20002ad4 	.word	0x20002ad4
 80078ec:	08028f04 	.word	0x08028f04
 80078f0:	200035b0 	.word	0x200035b0
 80078f4:	200034e8 	.word	0x200034e8
 80078f8:	2000258c 	.word	0x2000258c
 80078fc:	20003740 	.word	0x20003740
 8007900:	20002da4 	.word	0x20002da4
 8007904:	20002550 	.word	0x20002550
 8007908:	20002770 	.word	0x20002770
 800790c:	200024e4 	.word	0x200024e4
 8007910:	20002f84 	.word	0x20002f84
 8007914:	200024b8 	.word	0x200024b8
 8007918:	200025a0 	.word	0x200025a0
 800791c:	200025f0 	.word	0x200025f0
 8007920:	200033f8 	.word	0x200033f8
 8007924:	40021c00 	.word	0x40021c00

08007928 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b095      	sub	sp, #84	; 0x54
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	460a      	mov	r2, r1
 8007932:	71fb      	strb	r3, [r7, #7]
 8007934:	4613      	mov	r3, r2
 8007936:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	f107 0310 	add.w	r3, r7, #16
 8007940:	2238      	movs	r2, #56	; 0x38
 8007942:	2100      	movs	r1, #0
 8007944:	4618      	mov	r0, r3
 8007946:	f01e ff95 	bl	8026874 <memset>

	BITSTUFFINIT(0, 0);
 800794a:	2300      	movs	r3, #0
 800794c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007950:	2300      	movs	r3, #0
 8007952:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8007956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800795a:	f107 020c 	add.w	r2, r7, #12
 800795e:	441a      	add	r2, r3
 8007960:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007964:	23f4      	movs	r3, #244	; 0xf4
 8007966:	2108      	movs	r1, #8
 8007968:	f7f8 fee0 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800796c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007970:	3308      	adds	r3, #8
 8007972:	2b00      	cmp	r3, #0
 8007974:	da00      	bge.n	8007978 <Send_Service_Signal_Message+0x50>
 8007976:	3307      	adds	r3, #7
 8007978:	10db      	asrs	r3, r3, #3
 800797a:	b29a      	uxth	r2, r3
 800797c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007980:	4413      	add	r3, r2
 8007982:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007986:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800798a:	3308      	adds	r3, #8
 800798c:	b29b      	uxth	r3, r3
 800798e:	b21b      	sxth	r3, r3
 8007990:	425a      	negs	r2, r3
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	f002 0207 	and.w	r2, r2, #7
 800799a:	bf58      	it	pl
 800799c:	4253      	negpl	r3, r2
 800799e:	b21b      	sxth	r3, r3
 80079a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 80079a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079a8:	f107 020c 	add.w	r2, r7, #12
 80079ac:	441a      	add	r2, r3
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	497b      	ldr	r1, [pc, #492]	; (8007ba0 <Send_Service_Signal_Message+0x278>)
 80079b2:	3366      	adds	r3, #102	; 0x66
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80079be:	2110      	movs	r1, #16
 80079c0:	f7f8 feb4 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80079c4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80079c8:	3310      	adds	r3, #16
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	da00      	bge.n	80079d0 <Send_Service_Signal_Message+0xa8>
 80079ce:	3307      	adds	r3, #7
 80079d0:	10db      	asrs	r3, r3, #3
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079d8:	4413      	add	r3, r2
 80079da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80079de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80079e2:	3310      	adds	r3, #16
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	b21b      	sxth	r3, r3
 80079e8:	425a      	negs	r2, r3
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	f002 0207 	and.w	r2, r2, #7
 80079f2:	bf58      	it	pl
 80079f4:	4253      	negpl	r3, r2
 80079f6:	b21b      	sxth	r3, r3
 80079f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 80079fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a00:	f107 020c 	add.w	r2, r7, #12
 8007a04:	441a      	add	r2, r3
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	4965      	ldr	r1, [pc, #404]	; (8007ba0 <Send_Service_Signal_Message+0x278>)
 8007a0a:	3370      	adds	r3, #112	; 0x70
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007a16:	2110      	movs	r1, #16
 8007a18:	f7f8 fe88 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007a1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007a20:	3310      	adds	r3, #16
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da00      	bge.n	8007a28 <Send_Service_Signal_Message+0x100>
 8007a26:	3307      	adds	r3, #7
 8007a28:	10db      	asrs	r3, r3, #3
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a30:	4413      	add	r3, r2
 8007a32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007a36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a3a:	3310      	adds	r3, #16
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	b21b      	sxth	r3, r3
 8007a40:	425a      	negs	r2, r3
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	f002 0207 	and.w	r2, r2, #7
 8007a4a:	bf58      	it	pl
 8007a4c:	4253      	negpl	r3, r2
 8007a4e:	b21b      	sxth	r3, r3
 8007a50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007a54:	4b53      	ldr	r3, [pc, #332]	; (8007ba4 <Send_Service_Signal_Message+0x27c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d035      	beq.n	8007ace <Send_Service_Signal_Message+0x1a6>
 8007a62:	4b50      	ldr	r3, [pc, #320]	; (8007ba4 <Send_Service_Signal_Message+0x27c>)
 8007a64:	791b      	ldrb	r3, [r3, #4]
 8007a66:	79fa      	ldrb	r2, [r7, #7]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d130      	bne.n	8007ace <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007a72:	484d      	ldr	r0, [pc, #308]	; (8007ba8 <Send_Service_Signal_Message+0x280>)
 8007a74:	f016 fc8e 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	4b4c      	ldr	r3, [pc, #304]	; (8007bac <Send_Service_Signal_Message+0x284>)
 8007a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a80:	099b      	lsrs	r3, r3, #6
 8007a82:	21c8      	movs	r1, #200	; 0xc8
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8007a8e:	4848      	ldr	r0, [pc, #288]	; (8007bb0 <Send_Service_Signal_Message+0x288>)
 8007a90:	f01f f874 	bl	8026b7c <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	4a47      	ldr	r2, [pc, #284]	; (8007bb4 <Send_Service_Signal_Message+0x28c>)
 8007a98:	011b      	lsls	r3, r3, #4
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4845      	ldr	r0, [pc, #276]	; (8007bb8 <Send_Service_Signal_Message+0x290>)
 8007aa4:	f01e ffce 	bl	8026a44 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007aa8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007aac:	4619      	mov	r1, r3
 8007aae:	4843      	ldr	r0, [pc, #268]	; (8007bbc <Send_Service_Signal_Message+0x294>)
 8007ab0:	f01e ffc8 	bl	8026a44 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 8007ab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ab8:	f107 020c 	add.w	r2, r7, #12
 8007abc:	441a      	add	r2, r3
 8007abe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007ac2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007ac6:	2108      	movs	r1, #8
 8007ac8:	f7f8 fe30 	bl	800072c <InsertBits>
	{
 8007acc:	e00f      	b.n	8007aee <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8007ace:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ad2:	f107 020c 	add.w	r2, r7, #12
 8007ad6:	441a      	add	r2, r3
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	4936      	ldr	r1, [pc, #216]	; (8007bb4 <Send_Service_Signal_Message+0x28c>)
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	440b      	add	r3, r1
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007ae8:	2108      	movs	r1, #8
 8007aea:	f7f8 fe1f 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8007aee:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007af2:	3308      	adds	r3, #8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da00      	bge.n	8007afa <Send_Service_Signal_Message+0x1d2>
 8007af8:	3307      	adds	r3, #7
 8007afa:	10db      	asrs	r3, r3, #3
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b02:	4413      	add	r3, r2
 8007b04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007b08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	b21b      	sxth	r3, r3
 8007b12:	425a      	negs	r2, r3
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	f002 0207 	and.w	r2, r2, #7
 8007b1c:	bf58      	it	pl
 8007b1e:	4253      	negpl	r3, r2
 8007b20:	b21b      	sxth	r3, r3
 8007b22:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007b26:	4b1f      	ldr	r3, [pc, #124]	; (8007ba4 <Send_Service_Signal_Message+0x27c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	08db      	lsrs	r3, r3, #3
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d04b      	beq.n	8007bcc <Send_Service_Signal_Message+0x2a4>
 8007b34:	4b1b      	ldr	r3, [pc, #108]	; (8007ba4 <Send_Service_Signal_Message+0x27c>)
 8007b36:	791b      	ldrb	r3, [r3, #4]
 8007b38:	79fa      	ldrb	r2, [r7, #7]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d146      	bne.n	8007bcc <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007b44:	4818      	ldr	r0, [pc, #96]	; (8007ba8 <Send_Service_Signal_Message+0x280>)
 8007b46:	f016 fc25 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	4b17      	ldr	r3, [pc, #92]	; (8007bac <Send_Service_Signal_Message+0x284>)
 8007b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8007b52:	099b      	lsrs	r3, r3, #6
 8007b54:	21c8      	movs	r1, #200	; 0xc8
 8007b56:	fb01 f303 	mul.w	r3, r1, r3
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 8007b60:	4817      	ldr	r0, [pc, #92]	; (8007bc0 <Send_Service_Signal_Message+0x298>)
 8007b62:	f01f f80b 	bl	8026b7c <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	4a12      	ldr	r2, [pc, #72]	; (8007bb4 <Send_Service_Signal_Message+0x28c>)
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3302      	adds	r3, #2
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	4619      	mov	r1, r3
 8007b74:	4813      	ldr	r0, [pc, #76]	; (8007bc4 <Send_Service_Signal_Message+0x29c>)
 8007b76:	f01e ff65 	bl	8026a44 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8007b7a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4811      	ldr	r0, [pc, #68]	; (8007bc8 <Send_Service_Signal_Message+0x2a0>)
 8007b82:	f01e ff5f 	bl	8026a44 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8007b86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b8a:	f107 020c 	add.w	r2, r7, #12
 8007b8e:	441a      	add	r2, r3
 8007b90:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b94:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007b98:	2108      	movs	r1, #8
 8007b9a:	f7f8 fdc7 	bl	800072c <InsertBits>
	{
 8007b9e:	e033      	b.n	8007c08 <Send_Service_Signal_Message+0x2e0>
 8007ba0:	20000504 	.word	0x20000504
 8007ba4:	2000308c 	.word	0x2000308c
 8007ba8:	2000bcec 	.word	0x2000bcec
 8007bac:	51eb851f 	.word	0x51eb851f
 8007bb0:	080288fc 	.word	0x080288fc
 8007bb4:	200028f4 	.word	0x200028f4
 8007bb8:	08028f14 	.word	0x08028f14
 8007bbc:	08028f34 	.word	0x08028f34
 8007bc0:	08028960 	.word	0x08028960
 8007bc4:	08028f54 	.word	0x08028f54
 8007bc8:	08028f74 	.word	0x08028f74
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007bcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bd0:	f107 020c 	add.w	r2, r7, #12
 8007bd4:	18d1      	adds	r1, r2, r3
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	484e      	ldr	r0, [pc, #312]	; (8007d14 <Send_Service_Signal_Message+0x3ec>)
 8007bda:	011a      	lsls	r2, r3, #4
 8007bdc:	4402      	add	r2, r0
 8007bde:	3202      	adds	r2, #2
 8007be0:	7812      	ldrb	r2, [r2, #0]
 8007be2:	3201      	adds	r2, #1
 8007be4:	b2d4      	uxtb	r4, r2
 8007be6:	484b      	ldr	r0, [pc, #300]	; (8007d14 <Send_Service_Signal_Message+0x3ec>)
 8007be8:	011a      	lsls	r2, r3, #4
 8007bea:	4402      	add	r2, r0
 8007bec:	3202      	adds	r2, #2
 8007bee:	4620      	mov	r0, r4
 8007bf0:	7010      	strb	r0, [r2, #0]
 8007bf2:	4a48      	ldr	r2, [pc, #288]	; (8007d14 <Send_Service_Signal_Message+0x3ec>)
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	4413      	add	r3, r2
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007c00:	460a      	mov	r2, r1
 8007c02:	2108      	movs	r1, #8
 8007c04:	f7f8 fd92 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007c08:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da00      	bge.n	8007c14 <Send_Service_Signal_Message+0x2ec>
 8007c12:	3307      	adds	r3, #7
 8007c14:	10db      	asrs	r3, r3, #3
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c26:	3308      	adds	r3, #8
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	b21b      	sxth	r3, r3
 8007c2c:	425a      	negs	r2, r3
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	f002 0207 	and.w	r2, r2, #7
 8007c36:	bf58      	it	pl
 8007c38:	4253      	negpl	r3, r2
 8007c3a:	b21b      	sxth	r3, r3
 8007c3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007c40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c44:	f107 020c 	add.w	r2, r7, #12
 8007c48:	441a      	add	r2, r3
 8007c4a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007c4e:	2306      	movs	r3, #6
 8007c50:	2108      	movs	r1, #8
 8007c52:	f7f8 fd6b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007c56:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da00      	bge.n	8007c62 <Send_Service_Signal_Message+0x33a>
 8007c60:	3307      	adds	r3, #7
 8007c62:	10db      	asrs	r3, r3, #3
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c74:	3308      	adds	r3, #8
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	b21b      	sxth	r3, r3
 8007c7a:	425a      	negs	r2, r3
 8007c7c:	f003 0307 	and.w	r3, r3, #7
 8007c80:	f002 0207 	and.w	r2, r2, #7
 8007c84:	bf58      	it	pl
 8007c86:	4253      	negpl	r3, r2
 8007c88:	b21b      	sxth	r3, r3
 8007c8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	4a21      	ldr	r2, [pc, #132]	; (8007d18 <Send_Service_Signal_Message+0x3f0>)
 8007c92:	5cd3      	ldrb	r3, [r2, r3]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d147      	bne.n	8007d28 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 8007c98:	f004 ff28 	bl	800caec <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8007c9c:	79fa      	ldrb	r2, [r7, #7]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	4413      	add	r3, r2
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	4a1d      	ldr	r2, [pc, #116]	; (8007d1c <Send_Service_Signal_Message+0x3f4>)
 8007ca8:	4413      	add	r3, r2
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <Send_Service_Signal_Message+0x3f8>)
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	6019      	str	r1, [r3, #0]
 8007cb0:	8892      	ldrh	r2, [r2, #4]
 8007cb2:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8007cb4:	481b      	ldr	r0, [pc, #108]	; (8007d24 <Send_Service_Signal_Message+0x3fc>)
 8007cb6:	f01e ff61 	bl	8026b7c <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <Send_Service_Signal_Message+0x3f0>)
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 8007cc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cc6:	f107 020c 	add.w	r2, r7, #12
 8007cca:	441a      	add	r2, r3
 8007ccc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007cd0:	2369      	movs	r3, #105	; 0x69
 8007cd2:	2110      	movs	r1, #16
 8007cd4:	f7f8 fd2a 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007cd8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007cdc:	3310      	adds	r3, #16
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	da00      	bge.n	8007ce4 <Send_Service_Signal_Message+0x3bc>
 8007ce2:	3307      	adds	r3, #7
 8007ce4:	10db      	asrs	r3, r3, #3
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cec:	4413      	add	r3, r2
 8007cee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007cf2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007cf6:	3310      	adds	r3, #16
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	b21b      	sxth	r3, r3
 8007cfc:	425a      	negs	r2, r3
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	f002 0207 	and.w	r2, r2, #7
 8007d06:	bf58      	it	pl
 8007d08:	4253      	negpl	r3, r2
 8007d0a:	b21b      	sxth	r3, r3
 8007d0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007d10:	e031      	b.n	8007d76 <Send_Service_Signal_Message+0x44e>
 8007d12:	bf00      	nop
 8007d14:	200028f4 	.word	0x200028f4
 8007d18:	20002764 	.word	0x20002764
 8007d1c:	200028b8 	.word	0x200028b8
 8007d20:	20003fe4 	.word	0x20003fe4
 8007d24:	08028cb8 	.word	0x08028cb8
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007d28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d2c:	f107 020c 	add.w	r2, r7, #12
 8007d30:	441a      	add	r2, r3
 8007d32:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d36:	2329      	movs	r3, #41	; 0x29
 8007d38:	2110      	movs	r1, #16
 8007d3a:	f7f8 fcf7 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007d3e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007d42:	3310      	adds	r3, #16
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	da00      	bge.n	8007d4a <Send_Service_Signal_Message+0x422>
 8007d48:	3307      	adds	r3, #7
 8007d4a:	10db      	asrs	r3, r3, #3
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d52:	4413      	add	r3, r2
 8007d54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d58:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d5c:	3310      	adds	r3, #16
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	b21b      	sxth	r3, r3
 8007d62:	425a      	negs	r2, r3
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	f002 0207 	and.w	r2, r2, #7
 8007d6c:	bf58      	it	pl
 8007d6e:	4253      	negpl	r3, r2
 8007d70:	b21b      	sxth	r3, r3
 8007d72:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8007d76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d7a:	f107 020c 	add.w	r2, r7, #12
 8007d7e:	18d1      	adds	r1, r2, r3
 8007d80:	79fa      	ldrb	r2, [r7, #7]
 8007d82:	48b5      	ldr	r0, [pc, #724]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007d84:	4613      	mov	r3, r2
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	4413      	add	r3, r2
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	4403      	add	r3, r0
 8007d8e:	3305      	adds	r3, #5
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d96:	460a      	mov	r2, r1
 8007d98:	2108      	movs	r1, #8
 8007d9a:	f7f8 fcc7 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007d9e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007da2:	3308      	adds	r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	da00      	bge.n	8007daa <Send_Service_Signal_Message+0x482>
 8007da8:	3307      	adds	r3, #7
 8007daa:	10db      	asrs	r3, r3, #3
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007db2:	4413      	add	r3, r2
 8007db4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007db8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	b21b      	sxth	r3, r3
 8007dc2:	425a      	negs	r2, r3
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	f002 0207 	and.w	r2, r2, #7
 8007dcc:	bf58      	it	pl
 8007dce:	4253      	negpl	r3, r2
 8007dd0:	b21b      	sxth	r3, r3
 8007dd2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8007dd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007dda:	f107 020c 	add.w	r2, r7, #12
 8007dde:	18d1      	adds	r1, r2, r3
 8007de0:	79fa      	ldrb	r2, [r7, #7]
 8007de2:	489d      	ldr	r0, [pc, #628]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007de4:	4613      	mov	r3, r2
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	4413      	add	r3, r2
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	4403      	add	r3, r0
 8007dee:	3304      	adds	r3, #4
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007df6:	460a      	mov	r2, r1
 8007df8:	2108      	movs	r1, #8
 8007dfa:	f7f8 fc97 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007dfe:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007e02:	3308      	adds	r3, #8
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	da00      	bge.n	8007e0a <Send_Service_Signal_Message+0x4e2>
 8007e08:	3307      	adds	r3, #7
 8007e0a:	10db      	asrs	r3, r3, #3
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e12:	4413      	add	r3, r2
 8007e14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	b21b      	sxth	r3, r3
 8007e22:	425a      	negs	r2, r3
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	f002 0207 	and.w	r2, r2, #7
 8007e2c:	bf58      	it	pl
 8007e2e:	4253      	negpl	r3, r2
 8007e30:	b21b      	sxth	r3, r3
 8007e32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8007e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e3a:	f107 020c 	add.w	r2, r7, #12
 8007e3e:	18d1      	adds	r1, r2, r3
 8007e40:	79fa      	ldrb	r2, [r7, #7]
 8007e42:	4885      	ldr	r0, [pc, #532]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007e44:	4613      	mov	r3, r2
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	4413      	add	r3, r2
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	4403      	add	r3, r0
 8007e4e:	3303      	adds	r3, #3
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007e56:	460a      	mov	r2, r1
 8007e58:	2108      	movs	r1, #8
 8007e5a:	f7f8 fc67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007e5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007e62:	3308      	adds	r3, #8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da00      	bge.n	8007e6a <Send_Service_Signal_Message+0x542>
 8007e68:	3307      	adds	r3, #7
 8007e6a:	10db      	asrs	r3, r3, #3
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e72:	4413      	add	r3, r2
 8007e74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	b21b      	sxth	r3, r3
 8007e82:	425a      	negs	r2, r3
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	f002 0207 	and.w	r2, r2, #7
 8007e8c:	bf58      	it	pl
 8007e8e:	4253      	negpl	r3, r2
 8007e90:	b21b      	sxth	r3, r3
 8007e92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8007e96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e9a:	f107 020c 	add.w	r2, r7, #12
 8007e9e:	18d1      	adds	r1, r2, r3
 8007ea0:	79fa      	ldrb	r2, [r7, #7]
 8007ea2:	486d      	ldr	r0, [pc, #436]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	4413      	add	r3, r2
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	4403      	add	r3, r0
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007eb4:	460a      	mov	r2, r1
 8007eb6:	2108      	movs	r1, #8
 8007eb8:	f7f8 fc38 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007ebc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	da00      	bge.n	8007ec8 <Send_Service_Signal_Message+0x5a0>
 8007ec6:	3307      	adds	r3, #7
 8007ec8:	10db      	asrs	r3, r3, #3
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007ed6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007eda:	3308      	adds	r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b21b      	sxth	r3, r3
 8007ee0:	425a      	negs	r2, r3
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	f002 0207 	and.w	r2, r2, #7
 8007eea:	bf58      	it	pl
 8007eec:	4253      	negpl	r3, r2
 8007eee:	b21b      	sxth	r3, r3
 8007ef0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8007ef4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ef8:	f107 020c 	add.w	r2, r7, #12
 8007efc:	18d1      	adds	r1, r2, r3
 8007efe:	79fa      	ldrb	r2, [r7, #7]
 8007f00:	4855      	ldr	r0, [pc, #340]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007f02:	4613      	mov	r3, r2
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	4403      	add	r3, r0
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007f14:	460a      	mov	r2, r1
 8007f16:	2108      	movs	r1, #8
 8007f18:	f7f8 fc08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007f1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007f20:	3308      	adds	r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	da00      	bge.n	8007f28 <Send_Service_Signal_Message+0x600>
 8007f26:	3307      	adds	r3, #7
 8007f28:	10db      	asrs	r3, r3, #3
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f30:	4413      	add	r3, r2
 8007f32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	b21b      	sxth	r3, r3
 8007f40:	425a      	negs	r2, r3
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	f002 0207 	and.w	r2, r2, #7
 8007f4a:	bf58      	it	pl
 8007f4c:	4253      	negpl	r3, r2
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8007f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f58:	f107 020c 	add.w	r2, r7, #12
 8007f5c:	18d1      	adds	r1, r2, r3
 8007f5e:	79fa      	ldrb	r2, [r7, #7]
 8007f60:	483d      	ldr	r0, [pc, #244]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007f62:	4613      	mov	r3, r2
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	4413      	add	r3, r2
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	4403      	add	r3, r0
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007f74:	460a      	mov	r2, r1
 8007f76:	2108      	movs	r1, #8
 8007f78:	f7f8 fbd8 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007f7c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007f80:	3308      	adds	r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da00      	bge.n	8007f88 <Send_Service_Signal_Message+0x660>
 8007f86:	3307      	adds	r3, #7
 8007f88:	10db      	asrs	r3, r3, #3
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f90:	4413      	add	r3, r2
 8007f92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	425a      	negs	r2, r3
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	f002 0207 	and.w	r2, r2, #7
 8007faa:	bf58      	it	pl
 8007fac:	4253      	negpl	r3, r2
 8007fae:	b21b      	sxth	r3, r3
 8007fb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 8007fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007fb8:	f107 020c 	add.w	r2, r7, #12
 8007fbc:	18d4      	adds	r4, r2, r3
 8007fbe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007fc2:	f107 030c 	add.w	r3, r7, #12
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f00d ffa5 	bl	8015f18 <CalculateDirectReverseCrc>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	2120      	movs	r1, #32
 8007fd8:	f7f8 fba8 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007fdc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007fe0:	3320      	adds	r3, #32
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	da00      	bge.n	8007fe8 <Send_Service_Signal_Message+0x6c0>
 8007fe6:	3307      	adds	r3, #7
 8007fe8:	10db      	asrs	r3, r3, #3
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007ff6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ffa:	3320      	adds	r3, #32
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	b21b      	sxth	r3, r3
 8008000:	425a      	negs	r2, r3
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	f002 0207 	and.w	r2, r2, #7
 800800a:	bf58      	it	pl
 800800c:	4253      	negpl	r3, r2
 800800e:	b21b      	sxth	r3, r3
 8008010:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8008014:	4b11      	ldr	r3, [pc, #68]	; (800805c <Send_Service_Signal_Message+0x734>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	0a5b      	lsrs	r3, r3, #9
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <Send_Service_Signal_Message+0x712>
 8008022:	4b0e      	ldr	r3, [pc, #56]	; (800805c <Send_Service_Signal_Message+0x734>)
 8008024:	791b      	ldrb	r3, [r3, #4]
 8008026:	79fa      	ldrb	r2, [r7, #7]
 8008028:	429a      	cmp	r2, r3
 800802a:	d106      	bne.n	800803a <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 800802c:	480c      	ldr	r0, [pc, #48]	; (8008060 <Send_Service_Signal_Message+0x738>)
 800802e:	f01e fda5 	bl	8026b7c <puts>
		printf("Not Sending Reply");
 8008032:	480c      	ldr	r0, [pc, #48]	; (8008064 <Send_Service_Signal_Message+0x73c>)
 8008034:	f01e fd06 	bl	8026a44 <iprintf>
 8008038:	e009      	b.n	800804e <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 800803a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800803e:	b2d9      	uxtb	r1, r3
 8008040:	79fa      	ldrb	r2, [r7, #7]
 8008042:	f107 030c 	add.w	r3, r7, #12
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f80e 	bl	8008068 <Process_Sending_Reply>
	}
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	3754      	adds	r7, #84	; 0x54
 8008052:	46bd      	mov	sp, r7
 8008054:	bd90      	pop	{r4, r7, pc}
 8008056:	bf00      	nop
 8008058:	200028b8 	.word	0x200028b8
 800805c:	2000308c 	.word	0x2000308c
 8008060:	08028a2c 	.word	0x08028a2c
 8008064:	08028a44 	.word	0x08028a44

08008068 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b09c      	sub	sp, #112	; 0x70
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
 8008074:	4613      	mov	r3, r2
 8008076:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 8008078:	2300      	movs	r3, #0
 800807a:	60bb      	str	r3, [r7, #8]
 800807c:	f107 030c 	add.w	r3, r7, #12
 8008080:	2260      	movs	r2, #96	; 0x60
 8008082:	2100      	movs	r1, #0
 8008084:	4618      	mov	r0, r3
 8008086:	f01e fbf5 	bl	8026874 <memset>
	uint8_t uc_index = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 8008096:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80080a0:	4619      	mov	r1, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	781a      	ldrb	r2, [r3, #0]
 80080a6:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80080aa:	443b      	add	r3, r7
 80080ac:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 80080b0:	2301      	movs	r3, #1
 80080b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80080b6:	e03c      	b.n	8008132 <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 80080b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2bef      	cmp	r3, #239	; 0xef
 80080c4:	d922      	bls.n	800810c <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 80080c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	4413      	add	r3, r2
 80080ce:	781a      	ldrb	r2, [r3, #0]
 80080d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080d4:	1c59      	adds	r1, r3, #1
 80080d6:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80080da:	f022 020f 	bic.w	r2, r2, #15
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	3370      	adds	r3, #112	; 0x70
 80080e2:	443b      	add	r3, r7
 80080e4:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 80080e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	4413      	add	r3, r2
 80080f0:	781a      	ldrb	r2, [r3, #0]
 80080f2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080f6:	1c59      	adds	r1, r3, #1
 80080f8:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80080fc:	f002 020f 	and.w	r2, r2, #15
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	3370      	adds	r3, #112	; 0x70
 8008104:	443b      	add	r3, r7
 8008106:	f803 2c68 	strb.w	r2, [r3, #-104]
 800810a:	e00d      	b.n	8008128 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 800810c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	441a      	add	r2, r3
 8008114:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008118:	1c59      	adds	r1, r3, #1
 800811a:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 800811e:	7812      	ldrb	r2, [r2, #0]
 8008120:	3370      	adds	r3, #112	; 0x70
 8008122:	443b      	add	r3, r7
 8008124:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8008128:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800812c:	3301      	adds	r3, #1
 800812e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8008132:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8008136:	78fb      	ldrb	r3, [r7, #3]
 8008138:	429a      	cmp	r2, r3
 800813a:	d3bd      	bcc.n	80080b8 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 800813c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8008146:	3370      	adds	r3, #112	; 0x70
 8008148:	443b      	add	r3, r7
 800814a:	22f6      	movs	r2, #246	; 0xf6
 800814c:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 8008150:	78bb      	ldrb	r3, [r7, #2]
 8008152:	4a37      	ldr	r2, [pc, #220]	; (8008230 <Process_Sending_Reply+0x1c8>)
 8008154:	5cd3      	ldrb	r3, [r2, r3]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d10b      	bne.n	8008172 <Process_Sending_Reply+0x10a>
 800815a:	4b36      	ldr	r3, [pc, #216]	; (8008234 <Process_Sending_Reply+0x1cc>)
 800815c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <Process_Sending_Reply+0x10a>
 8008164:	4b34      	ldr	r3, [pc, #208]	; (8008238 <Process_Sending_Reply+0x1d0>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d102      	bne.n	8008172 <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 800816c:	4833      	ldr	r0, [pc, #204]	; (800823c <Process_Sending_Reply+0x1d4>)
 800816e:	f001 f91f 	bl	80093b0 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 8008172:	78bb      	ldrb	r3, [r7, #2]
 8008174:	4a32      	ldr	r2, [pc, #200]	; (8008240 <Process_Sending_Reply+0x1d8>)
 8008176:	4413      	add	r3, r2
 8008178:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800817c:	2b01      	cmp	r3, #1
 800817e:	d10d      	bne.n	800819c <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 8008180:	78bb      	ldrb	r3, [r7, #2]
 8008182:	4a30      	ldr	r2, [pc, #192]	; (8008244 <Process_Sending_Reply+0x1dc>)
 8008184:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8008188:	f107 0008 	add.w	r0, r7, #8
 800818c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008190:	f008 fca2 	bl	8010ad8 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = RESET;
 8008194:	78bb      	ldrb	r3, [r7, #2]
 8008196:	4a26      	ldr	r2, [pc, #152]	; (8008230 <Process_Sending_Reply+0x1c8>)
 8008198:	2100      	movs	r1, #0
 800819a:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 800819c:	78bb      	ldrb	r3, [r7, #2]
 800819e:	4a28      	ldr	r2, [pc, #160]	; (8008240 <Process_Sending_Reply+0x1d8>)
 80081a0:	4413      	add	r3, r2
 80081a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d119      	bne.n	80081de <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 80081aa:	2300      	movs	r3, #0
 80081ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80081b0:	e00e      	b.n	80081d0 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 80081b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081b6:	3370      	adds	r3, #112	; 0x70
 80081b8:	443b      	add	r3, r7
 80081ba:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80081be:	4619      	mov	r1, r3
 80081c0:	2003      	movs	r0, #3
 80081c2:	f011 f9dd 	bl	8019580 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 80081c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081ca:	3301      	adds	r3, #1
 80081cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80081d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80081da:	429a      	cmp	r2, r3
 80081dc:	d3e9      	bcc.n	80081b2 <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 80081de:	4b16      	ldr	r3, [pc, #88]	; (8008238 <Process_Sending_Reply+0x1d0>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d102      	bne.n	80081ec <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80081e6:	4815      	ldr	r0, [pc, #84]	; (800823c <Process_Sending_Reply+0x1d4>)
 80081e8:	f001 f8e2 	bl	80093b0 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 80081ec:	4b11      	ldr	r3, [pc, #68]	; (8008234 <Process_Sending_Reply+0x1cc>)
 80081ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 80081f6:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <Process_Sending_Reply+0x1cc>)
 80081f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081fc:	461a      	mov	r2, r3
 80081fe:	2101      	movs	r1, #1
 8008200:	480c      	ldr	r0, [pc, #48]	; (8008234 <Process_Sending_Reply+0x1cc>)
 8008202:	f000 ff2f 	bl	8009064 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <Process_Sending_Reply+0x1cc>)
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	461a      	mov	r2, r3
 8008212:	2100      	movs	r1, #0
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 ff25 	bl	8009064 <Print_EI_DATA>

	if(Debug_flag == 1)
 800821a:	4b07      	ldr	r3, [pc, #28]	; (8008238 <Process_Sending_Reply+0x1d0>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d102      	bne.n	8008228 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 8008222:	4809      	ldr	r0, [pc, #36]	; (8008248 <Process_Sending_Reply+0x1e0>)
 8008224:	f001 f8c4 	bl	80093b0 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8008228:	bf00      	nop
 800822a:	3770      	adds	r7, #112	; 0x70
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20002758 	.word	0x20002758
 8008234:	20003340 	.word	0x20003340
 8008238:	20000bbb 	.word	0x20000bbb
 800823c:	08028fb8 	.word	0x08028fb8
 8008240:	20000504 	.word	0x20000504
 8008244:	200026e4 	.word	0x200026e4
 8008248:	08029018 	.word	0x08029018

0800824c <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8008256:	f011 fbeb 	bl	8019a30 <HAL_GetTick>
 800825a:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	4a86      	ldr	r2, [pc, #536]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 8008260:	4413      	add	r3, r2
 8008262:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008266:	2b02      	cmp	r3, #2
 8008268:	f000 8102 	beq.w	8008470 <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 800826c:	79fa      	ldrb	r2, [r7, #7]
 800826e:	4983      	ldr	r1, [pc, #524]	; (800847c <Check_Primary_r_Secondary+0x230>)
 8008270:	4613      	mov	r3, r2
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	4413      	add	r3, r2
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	440b      	add	r3, r1
 800827a:	3303      	adds	r3, #3
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d12b      	bne.n	80082da <Check_Primary_r_Secondary+0x8e>
 8008282:	79fa      	ldrb	r2, [r7, #7]
 8008284:	497e      	ldr	r1, [pc, #504]	; (8008480 <Check_Primary_r_Secondary+0x234>)
 8008286:	4613      	mov	r3, r2
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	4413      	add	r3, r2
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	440b      	add	r3, r1
 8008290:	3303      	adds	r3, #3
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d120      	bne.n	80082da <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008298:	79fa      	ldrb	r2, [r7, #7]
 800829a:	4978      	ldr	r1, [pc, #480]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800829c:	4613      	mov	r3, r2
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	4413      	add	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	440b      	add	r3, r1
 80082a6:	3304      	adds	r3, #4
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 80e1 	beq.w	8008472 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	4a71      	ldr	r2, [pc, #452]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 80082b4:	3366      	adds	r3, #102	; 0x66
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4619      	mov	r1, r3
 80082be:	4871      	ldr	r0, [pc, #452]	; (8008484 <Check_Primary_r_Secondary+0x238>)
 80082c0:	f01e fbc0 	bl	8026a44 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80082c4:	79fa      	ldrb	r2, [r7, #7]
 80082c6:	496d      	ldr	r1, [pc, #436]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80082c8:	4613      	mov	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4413      	add	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	440b      	add	r3, r1
 80082d2:	3304      	adds	r3, #4
 80082d4:	2200      	movs	r2, #0
 80082d6:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80082d8:	e0cb      	b.n	8008472 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80082da:	79fa      	ldrb	r2, [r7, #7]
 80082dc:	4967      	ldr	r1, [pc, #412]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80082de:	4613      	mov	r3, r2
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4413      	add	r3, r2
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	440b      	add	r3, r1
 80082e8:	3303      	adds	r3, #3
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d12b      	bne.n	8008348 <Check_Primary_r_Secondary+0xfc>
 80082f0:	79fa      	ldrb	r2, [r7, #7]
 80082f2:	4963      	ldr	r1, [pc, #396]	; (8008480 <Check_Primary_r_Secondary+0x234>)
 80082f4:	4613      	mov	r3, r2
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	4413      	add	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	440b      	add	r3, r1
 80082fe:	3303      	adds	r3, #3
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d120      	bne.n	8008348 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008306:	79fa      	ldrb	r2, [r7, #7]
 8008308:	495c      	ldr	r1, [pc, #368]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800830a:	4613      	mov	r3, r2
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	4413      	add	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	440b      	add	r3, r1
 8008314:	3304      	adds	r3, #4
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 80aa 	beq.w	8008472 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	4a55      	ldr	r2, [pc, #340]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 8008322:	3366      	adds	r3, #102	; 0x66
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4619      	mov	r1, r3
 800832c:	4856      	ldr	r0, [pc, #344]	; (8008488 <Check_Primary_r_Secondary+0x23c>)
 800832e:	f01e fb89 	bl	8026a44 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8008332:	79fa      	ldrb	r2, [r7, #7]
 8008334:	4951      	ldr	r1, [pc, #324]	; (800847c <Check_Primary_r_Secondary+0x230>)
 8008336:	4613      	mov	r3, r2
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	4413      	add	r3, r2
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	440b      	add	r3, r1
 8008340:	3304      	adds	r3, #4
 8008342:	2200      	movs	r2, #0
 8008344:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008346:	e094      	b.n	8008472 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8008348:	79fa      	ldrb	r2, [r7, #7]
 800834a:	494c      	ldr	r1, [pc, #304]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800834c:	4613      	mov	r3, r2
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	4413      	add	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	440b      	add	r3, r1
 8008356:	3303      	adds	r3, #3
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d13e      	bne.n	80083dc <Check_Primary_r_Secondary+0x190>
 800835e:	79fa      	ldrb	r2, [r7, #7]
 8008360:	4947      	ldr	r1, [pc, #284]	; (8008480 <Check_Primary_r_Secondary+0x234>)
 8008362:	4613      	mov	r3, r2
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4413      	add	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	440b      	add	r3, r1
 800836c:	3303      	adds	r3, #3
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d133      	bne.n	80083dc <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8008374:	79fa      	ldrb	r2, [r7, #7]
 8008376:	4941      	ldr	r1, [pc, #260]	; (800847c <Check_Primary_r_Secondary+0x230>)
 8008378:	4613      	mov	r3, r2
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	4413      	add	r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	440b      	add	r3, r1
 8008382:	3304      	adds	r3, #4
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d073      	beq.n	8008472 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	4a3a      	ldr	r2, [pc, #232]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 800838e:	3366      	adds	r3, #102	; 0x66
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	4619      	mov	r1, r3
 8008398:	483c      	ldr	r0, [pc, #240]	; (800848c <Check_Primary_r_Secondary+0x240>)
 800839a:	f01e fb53 	bl	8026a44 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	493b      	ldr	r1, [pc, #236]	; (8008490 <Check_Primary_r_Secondary+0x244>)
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	493a      	ldr	r1, [pc, #232]	; (8008494 <Check_Primary_r_Secondary+0x248>)
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 80083b2:	79fa      	ldrb	r2, [r7, #7]
 80083b4:	4931      	ldr	r1, [pc, #196]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80083b6:	4613      	mov	r3, r2
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	4413      	add	r3, r2
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	440b      	add	r3, r1
 80083c0:	3310      	adds	r3, #16
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80083c6:	79fa      	ldrb	r2, [r7, #7]
 80083c8:	492c      	ldr	r1, [pc, #176]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80083ca:	4613      	mov	r3, r2
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	4413      	add	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	440b      	add	r3, r1
 80083d4:	3304      	adds	r3, #4
 80083d6:	2201      	movs	r2, #1
 80083d8:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80083da:	e04a      	b.n	8008472 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80083dc:	79fa      	ldrb	r2, [r7, #7]
 80083de:	4927      	ldr	r1, [pc, #156]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80083e0:	4613      	mov	r3, r2
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	4413      	add	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	440b      	add	r3, r1
 80083ea:	3303      	adds	r3, #3
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d13f      	bne.n	8008472 <Check_Primary_r_Secondary+0x226>
 80083f2:	79fa      	ldrb	r2, [r7, #7]
 80083f4:	4922      	ldr	r1, [pc, #136]	; (8008480 <Check_Primary_r_Secondary+0x234>)
 80083f6:	4613      	mov	r3, r2
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4413      	add	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	440b      	add	r3, r1
 8008400:	3303      	adds	r3, #3
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d134      	bne.n	8008472 <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8008408:	79fa      	ldrb	r2, [r7, #7]
 800840a:	491c      	ldr	r1, [pc, #112]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800840c:	4613      	mov	r3, r2
 800840e:	005b      	lsls	r3, r3, #1
 8008410:	4413      	add	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	440b      	add	r3, r1
 8008416:	3304      	adds	r3, #4
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d029      	beq.n	8008472 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	4a15      	ldr	r2, [pc, #84]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 8008422:	3366      	adds	r3, #102	; 0x66
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4619      	mov	r1, r3
 800842c:	481a      	ldr	r0, [pc, #104]	; (8008498 <Check_Primary_r_Secondary+0x24c>)
 800842e:	f01e fb09 	bl	8026a44 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	4916      	ldr	r1, [pc, #88]	; (8008490 <Check_Primary_r_Secondary+0x244>)
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	4915      	ldr	r1, [pc, #84]	; (8008494 <Check_Primary_r_Secondary+0x248>)
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8008446:	79fa      	ldrb	r2, [r7, #7]
 8008448:	490c      	ldr	r1, [pc, #48]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800844a:	4613      	mov	r3, r2
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	4413      	add	r3, r2
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	440b      	add	r3, r1
 8008454:	3310      	adds	r3, #16
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 800845a:	79fa      	ldrb	r2, [r7, #7]
 800845c:	4907      	ldr	r1, [pc, #28]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800845e:	4613      	mov	r3, r2
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	4413      	add	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	440b      	add	r3, r1
 8008468:	3304      	adds	r3, #4
 800846a:	2201      	movs	r2, #1
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	e000      	b.n	8008472 <Check_Primary_r_Secondary+0x226>
		return;
 8008470:	bf00      	nop
			}
#endif

		}
	}
}
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000504 	.word	0x20000504
 800847c:	20002da4 	.word	0x20002da4
 8008480:	20002e94 	.word	0x20002e94
 8008484:	080291d0 	.word	0x080291d0
 8008488:	0802920c 	.word	0x0802920c
 800848c:	08029248 	.word	0x08029248
 8008490:	20002630 	.word	0x20002630
 8008494:	20002658 	.word	0x20002658
 8008498:	08029280 	.word	0x08029280

0800849c <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	4aac      	ldr	r2, [pc, #688]	; (800875c <Check_Vital_CRC+0x2c0>)
 80084aa:	4413      	add	r3, r2
 80084ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	f000 814f 	beq.w	8008754 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 80084b6:	79fa      	ldrb	r2, [r7, #7]
 80084b8:	49a9      	ldr	r1, [pc, #676]	; (8008760 <Check_Vital_CRC+0x2c4>)
 80084ba:	4613      	mov	r3, r2
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	4413      	add	r3, r2
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	440b      	add	r3, r1
 80084c4:	3308      	adds	r3, #8
 80084c6:	6819      	ldr	r1, [r3, #0]
 80084c8:	79fa      	ldrb	r2, [r7, #7]
 80084ca:	48a6      	ldr	r0, [pc, #664]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80084cc:	4613      	mov	r3, r2
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	4413      	add	r3, r2
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4403      	add	r3, r0
 80084d6:	3308      	adds	r3, #8
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4299      	cmp	r1, r3
 80084dc:	f000 8092 	beq.w	8008604 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 80084e0:	79fa      	ldrb	r2, [r7, #7]
 80084e2:	49a0      	ldr	r1, [pc, #640]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80084e4:	4613      	mov	r3, r2
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	4413      	add	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	440b      	add	r3, r1
 80084ee:	3308      	adds	r3, #8
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 8086 	beq.w	8008604 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 80084f8:	79fa      	ldrb	r2, [r7, #7]
 80084fa:	4999      	ldr	r1, [pc, #612]	; (8008760 <Check_Vital_CRC+0x2c4>)
 80084fc:	4613      	mov	r3, r2
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	4413      	add	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	440b      	add	r3, r1
 8008506:	3304      	adds	r3, #4
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d104      	bne.n	8008518 <Check_Vital_CRC+0x7c>
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	4a95      	ldr	r2, [pc, #596]	; (8008768 <Check_Vital_CRC+0x2cc>)
 8008512:	5cd3      	ldrb	r3, [r2, r3]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d175      	bne.n	8008604 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8008518:	79fa      	ldrb	r2, [r7, #7]
 800851a:	4991      	ldr	r1, [pc, #580]	; (8008760 <Check_Vital_CRC+0x2c4>)
 800851c:	4613      	mov	r3, r2
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	4413      	add	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	440b      	add	r3, r1
 8008526:	3308      	adds	r3, #8
 8008528:	6819      	ldr	r1, [r3, #0]
 800852a:	79fa      	ldrb	r2, [r7, #7]
 800852c:	488d      	ldr	r0, [pc, #564]	; (8008764 <Check_Vital_CRC+0x2c8>)
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	4403      	add	r3, r0
 8008538:	3308      	adds	r3, #8
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	1acb      	subs	r3, r1, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfb8      	it	lt
 8008542:	425b      	neglt	r3, r3
 8008544:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d104      	bne.n	8008556 <Check_Vital_CRC+0xba>
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	4a87      	ldr	r2, [pc, #540]	; (800876c <Check_Vital_CRC+0x2d0>)
 8008550:	5cd3      	ldrb	r3, [r2, r3]
 8008552:	2b03      	cmp	r3, #3
 8008554:	d14c      	bne.n	80085f0 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	4a84      	ldr	r2, [pc, #528]	; (800876c <Check_Vital_CRC+0x2d0>)
 800855a:	2100      	movs	r1, #0
 800855c:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	4a7e      	ldr	r2, [pc, #504]	; (800875c <Check_Vital_CRC+0x2c0>)
 8008562:	3366      	adds	r3, #102	; 0x66
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	4619      	mov	r1, r3
 800856c:	4880      	ldr	r0, [pc, #512]	; (8008770 <Check_Vital_CRC+0x2d4>)
 800856e:	f01e fa69 	bl	8026a44 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8008572:	79fa      	ldrb	r2, [r7, #7]
 8008574:	497a      	ldr	r1, [pc, #488]	; (8008760 <Check_Vital_CRC+0x2c4>)
 8008576:	4613      	mov	r3, r2
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	4413      	add	r3, r2
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	440b      	add	r3, r1
 8008580:	3308      	adds	r3, #8
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4619      	mov	r1, r3
 8008586:	487b      	ldr	r0, [pc, #492]	; (8008774 <Check_Vital_CRC+0x2d8>)
 8008588:	f01e fa5c 	bl	8026a44 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800858c:	79fa      	ldrb	r2, [r7, #7]
 800858e:	4975      	ldr	r1, [pc, #468]	; (8008764 <Check_Vital_CRC+0x2c8>)
 8008590:	4613      	mov	r3, r2
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	4413      	add	r3, r2
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	440b      	add	r3, r1
 800859a:	3308      	adds	r3, #8
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4619      	mov	r1, r3
 80085a0:	4875      	ldr	r0, [pc, #468]	; (8008778 <Check_Vital_CRC+0x2dc>)
 80085a2:	f01e fa4f 	bl	8026a44 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 80085a6:	4875      	ldr	r0, [pc, #468]	; (800877c <Check_Vital_CRC+0x2e0>)
 80085a8:	f01e fae8 	bl	8026b7c <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80085ac:	79fa      	ldrb	r2, [r7, #7]
 80085ae:	79f9      	ldrb	r1, [r7, #7]
 80085b0:	486c      	ldr	r0, [pc, #432]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80085b2:	4613      	mov	r3, r2
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	4413      	add	r3, r2
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	4403      	add	r3, r0
 80085bc:	3308      	adds	r3, #8
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	486f      	ldr	r0, [pc, #444]	; (8008780 <Check_Vital_CRC+0x2e4>)
 80085c2:	010b      	lsls	r3, r1, #4
 80085c4:	4403      	add	r3, r0
 80085c6:	3308      	adds	r3, #8
 80085c8:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80085ca:	79f9      	ldrb	r1, [r7, #7]
 80085cc:	79fa      	ldrb	r2, [r7, #7]
 80085ce:	4865      	ldr	r0, [pc, #404]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80085d0:	460b      	mov	r3, r1
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	440b      	add	r3, r1
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4403      	add	r3, r0
 80085da:	3308      	adds	r3, #8
 80085dc:	6819      	ldr	r1, [r3, #0]
 80085de:	4860      	ldr	r0, [pc, #384]	; (8008760 <Check_Vital_CRC+0x2c4>)
 80085e0:	4613      	mov	r3, r2
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	4413      	add	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4403      	add	r3, r0
 80085ea:	3308      	adds	r3, #8
 80085ec:	6019      	str	r1, [r3, #0]
 80085ee:	e009      	b.n	8008604 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d106      	bne.n	8008604 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	4a5c      	ldr	r2, [pc, #368]	; (800876c <Check_Vital_CRC+0x2d0>)
 80085fa:	5cd2      	ldrb	r2, [r2, r3]
 80085fc:	3201      	adds	r2, #1
 80085fe:	b2d1      	uxtb	r1, r2
 8008600:	4a5a      	ldr	r2, [pc, #360]	; (800876c <Check_Vital_CRC+0x2d0>)
 8008602:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8008604:	79fa      	ldrb	r2, [r7, #7]
 8008606:	4956      	ldr	r1, [pc, #344]	; (8008760 <Check_Vital_CRC+0x2c4>)
 8008608:	4613      	mov	r3, r2
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	4413      	add	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	440b      	add	r3, r1
 8008612:	330c      	adds	r3, #12
 8008614:	6819      	ldr	r1, [r3, #0]
 8008616:	79fa      	ldrb	r2, [r7, #7]
 8008618:	4852      	ldr	r0, [pc, #328]	; (8008764 <Check_Vital_CRC+0x2c8>)
 800861a:	4613      	mov	r3, r2
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	4413      	add	r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4403      	add	r3, r0
 8008624:	330c      	adds	r3, #12
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4299      	cmp	r1, r3
 800862a:	f000 8094 	beq.w	8008756 <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 800862e:	79fa      	ldrb	r2, [r7, #7]
 8008630:	494c      	ldr	r1, [pc, #304]	; (8008764 <Check_Vital_CRC+0x2c8>)
 8008632:	4613      	mov	r3, r2
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	4413      	add	r3, r2
 8008638:	00db      	lsls	r3, r3, #3
 800863a:	440b      	add	r3, r1
 800863c:	330c      	adds	r3, #12
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8088 	beq.w	8008756 <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8008646:	79fa      	ldrb	r2, [r7, #7]
 8008648:	4945      	ldr	r1, [pc, #276]	; (8008760 <Check_Vital_CRC+0x2c4>)
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	440b      	add	r3, r1
 8008654:	3304      	adds	r3, #4
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d104      	bne.n	8008666 <Check_Vital_CRC+0x1ca>
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	4a42      	ldr	r2, [pc, #264]	; (8008768 <Check_Vital_CRC+0x2cc>)
 8008660:	5cd3      	ldrb	r3, [r2, r3]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d177      	bne.n	8008756 <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8008666:	79fa      	ldrb	r2, [r7, #7]
 8008668:	493d      	ldr	r1, [pc, #244]	; (8008760 <Check_Vital_CRC+0x2c4>)
 800866a:	4613      	mov	r3, r2
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	4413      	add	r3, r2
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	440b      	add	r3, r1
 8008674:	330c      	adds	r3, #12
 8008676:	6819      	ldr	r1, [r3, #0]
 8008678:	79fa      	ldrb	r2, [r7, #7]
 800867a:	483a      	ldr	r0, [pc, #232]	; (8008764 <Check_Vital_CRC+0x2c8>)
 800867c:	4613      	mov	r3, r2
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	4413      	add	r3, r2
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	4403      	add	r3, r0
 8008686:	330c      	adds	r3, #12
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1acb      	subs	r3, r1, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	bfb8      	it	lt
 8008690:	425b      	neglt	r3, r3
 8008692:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d104      	bne.n	80086a4 <Check_Vital_CRC+0x208>
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	4a39      	ldr	r2, [pc, #228]	; (8008784 <Check_Vital_CRC+0x2e8>)
 800869e:	5cd3      	ldrb	r3, [r2, r3]
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d14c      	bne.n	800873e <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	4a37      	ldr	r2, [pc, #220]	; (8008784 <Check_Vital_CRC+0x2e8>)
 80086a8:	2100      	movs	r1, #0
 80086aa:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	4a2b      	ldr	r2, [pc, #172]	; (800875c <Check_Vital_CRC+0x2c0>)
 80086b0:	3366      	adds	r3, #102	; 0x66
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	4619      	mov	r1, r3
 80086ba:	4833      	ldr	r0, [pc, #204]	; (8008788 <Check_Vital_CRC+0x2ec>)
 80086bc:	f01e f9c2 	bl	8026a44 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 80086c0:	79fa      	ldrb	r2, [r7, #7]
 80086c2:	4927      	ldr	r1, [pc, #156]	; (8008760 <Check_Vital_CRC+0x2c4>)
 80086c4:	4613      	mov	r3, r2
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	4413      	add	r3, r2
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	440b      	add	r3, r1
 80086ce:	330c      	adds	r3, #12
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4619      	mov	r1, r3
 80086d4:	482d      	ldr	r0, [pc, #180]	; (800878c <Check_Vital_CRC+0x2f0>)
 80086d6:	f01e f9b5 	bl	8026a44 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 80086da:	79fa      	ldrb	r2, [r7, #7]
 80086dc:	4921      	ldr	r1, [pc, #132]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80086de:	4613      	mov	r3, r2
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	4413      	add	r3, r2
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	440b      	add	r3, r1
 80086e8:	330c      	adds	r3, #12
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4619      	mov	r1, r3
 80086ee:	4828      	ldr	r0, [pc, #160]	; (8008790 <Check_Vital_CRC+0x2f4>)
 80086f0:	f01e f9a8 	bl	8026a44 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 80086f4:	4827      	ldr	r0, [pc, #156]	; (8008794 <Check_Vital_CRC+0x2f8>)
 80086f6:	f01e fa41 	bl	8026b7c <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 80086fa:	79fa      	ldrb	r2, [r7, #7]
 80086fc:	79f9      	ldrb	r1, [r7, #7]
 80086fe:	4819      	ldr	r0, [pc, #100]	; (8008764 <Check_Vital_CRC+0x2c8>)
 8008700:	4613      	mov	r3, r2
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	4413      	add	r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	4403      	add	r3, r0
 800870a:	330c      	adds	r3, #12
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	481c      	ldr	r0, [pc, #112]	; (8008780 <Check_Vital_CRC+0x2e4>)
 8008710:	010b      	lsls	r3, r1, #4
 8008712:	4403      	add	r3, r0
 8008714:	330c      	adds	r3, #12
 8008716:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8008718:	79f9      	ldrb	r1, [r7, #7]
 800871a:	79fa      	ldrb	r2, [r7, #7]
 800871c:	4811      	ldr	r0, [pc, #68]	; (8008764 <Check_Vital_CRC+0x2c8>)
 800871e:	460b      	mov	r3, r1
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	440b      	add	r3, r1
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4403      	add	r3, r0
 8008728:	330c      	adds	r3, #12
 800872a:	6819      	ldr	r1, [r3, #0]
 800872c:	480c      	ldr	r0, [pc, #48]	; (8008760 <Check_Vital_CRC+0x2c4>)
 800872e:	4613      	mov	r3, r2
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	4413      	add	r3, r2
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	4403      	add	r3, r0
 8008738:	330c      	adds	r3, #12
 800873a:	6019      	str	r1, [r3, #0]
 800873c:	e00b      	b.n	8008756 <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d108      	bne.n	8008756 <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	4a0f      	ldr	r2, [pc, #60]	; (8008784 <Check_Vital_CRC+0x2e8>)
 8008748:	5cd2      	ldrb	r2, [r2, r3]
 800874a:	3201      	adds	r2, #1
 800874c:	b2d1      	uxtb	r1, r2
 800874e:	4a0d      	ldr	r2, [pc, #52]	; (8008784 <Check_Vital_CRC+0x2e8>)
 8008750:	54d1      	strb	r1, [r2, r3]
 8008752:	e000      	b.n	8008756 <Check_Vital_CRC+0x2ba>
		return;
 8008754:	bf00      	nop
				}
			}
		}
	}
}
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000504 	.word	0x20000504
 8008760:	20002da4 	.word	0x20002da4
 8008764:	20002e94 	.word	0x20002e94
 8008768:	20002680 	.word	0x20002680
 800876c:	20003768 	.word	0x20003768
 8008770:	080292bc 	.word	0x080292bc
 8008774:	08029300 	.word	0x08029300
 8008778:	08029324 	.word	0x08029324
 800877c:	08029348 	.word	0x08029348
 8008780:	200028f4 	.word	0x200028f4
 8008784:	20003774 	.word	0x20003774
 8008788:	08029370 	.word	0x08029370
 800878c:	080293b4 	.word	0x080293b4
 8008790:	080293d8 	.word	0x080293d8
 8008794:	080293fc 	.word	0x080293fc

08008798 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <Check_Other_EiPC_Packet+0x38>)
 80087a6:	4413      	add	r3, r2
 80087a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d007      	beq.n	80087c0 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7ff fd4a 	bl	800824c <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff fe6e 	bl	800849c <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 fa94 	bl	8009cf0 <CheckOtherLinkStatus>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000504 	.word	0x20000504

080087d4 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80087de:	493c      	ldr	r1, [pc, #240]	; (80088d0 <CheckLinkEstablishTimeout+0xfc>)
 80087e0:	483c      	ldr	r0, [pc, #240]	; (80088d4 <CheckLinkEstablishTimeout+0x100>)
 80087e2:	f7f7 fd2d 	bl	8000240 <strcmp>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d06c      	beq.n	80088c6 <CheckLinkEstablishTimeout+0xf2>
	{
		return;
	}

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80087ec:	2300      	movs	r3, #0
 80087ee:	71fb      	strb	r3, [r7, #7]
 80087f0:	e062      	b.n	80088b8 <CheckLinkEstablishTimeout+0xe4>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	4a38      	ldr	r2, [pc, #224]	; (80088d8 <CheckLinkEstablishTimeout+0x104>)
 80087f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f007 fdfc 	bl	80103f8 <HAL_Elaps_Ticks>
 8008800:	4602      	mov	r2, r0
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	4935      	ldr	r1, [pc, #212]	; (80088dc <CheckLinkEstablishTimeout+0x108>)
 8008806:	339e      	adds	r3, #158	; 0x9e
 8008808:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800880c:	429a      	cmp	r2, r3
 800880e:	d950      	bls.n	80088b2 <CheckLinkEstablishTimeout+0xde>
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	4a33      	ldr	r2, [pc, #204]	; (80088e0 <CheckLinkEstablishTimeout+0x10c>)
 8008814:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	492f      	ldr	r1, [pc, #188]	; (80088d8 <CheckLinkEstablishTimeout+0x104>)
 800881c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008820:	429a      	cmp	r2, r3
 8008822:	d046      	beq.n	80088b2 <CheckLinkEstablishTimeout+0xde>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8008824:	79fa      	ldrb	r2, [r7, #7]
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	492b      	ldr	r1, [pc, #172]	; (80088d8 <CheckLinkEstablishTimeout+0x104>)
 800882a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800882e:	492c      	ldr	r1, [pc, #176]	; (80088e0 <CheckLinkEstablishTimeout+0x10c>)
 8008830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	4a29      	ldr	r2, [pc, #164]	; (80088dc <CheckLinkEstablishTimeout+0x108>)
 8008838:	3366      	adds	r3, #102	; 0x66
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	4619      	mov	r1, r3
 8008842:	4828      	ldr	r0, [pc, #160]	; (80088e4 <CheckLinkEstablishTimeout+0x110>)
 8008844:	f01e f8fe 	bl	8026a44 <iprintf>
			SelfLinkFlag[Traverser] = RESET;
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	4a27      	ldr	r2, [pc, #156]	; (80088e8 <CheckLinkEstablishTimeout+0x114>)
 800884c:	2100      	movs	r1, #0
 800884e:	54d1      	strb	r1, [r2, r3]
			memset(&Main_Relays_st[Traverser].RelayIPS_Buff,0,sizeof(Main_Relays_st[Traverser].RelayIPS_Buff));
 8008850:	79fa      	ldrb	r2, [r7, #7]
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4a24      	ldr	r2, [pc, #144]	; (80088ec <CheckLinkEstablishTimeout+0x118>)
 800885c:	4413      	add	r3, r2
 800885e:	3301      	adds	r3, #1
 8008860:	2210      	movs	r2, #16
 8008862:	2100      	movs	r1, #0
 8008864:	4618      	mov	r0, r3
 8008866:	f01e f805 	bl	8026874 <memset>
			Main_Relays_st[Traverser].RelayIPS_CRC = 0;
 800886a:	79fa      	ldrb	r2, [r7, #7]
 800886c:	491f      	ldr	r1, [pc, #124]	; (80088ec <CheckLinkEstablishTimeout+0x118>)
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	3312      	adds	r3, #18
 800887a:	2200      	movs	r2, #0
 800887c:	801a      	strh	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 800887e:	79fa      	ldrb	r2, [r7, #7]
 8008880:	491b      	ldr	r1, [pc, #108]	; (80088f0 <CheckLinkEstablishTimeout+0x11c>)
 8008882:	4613      	mov	r3, r2
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	4413      	add	r3, r2
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	440b      	add	r3, r1
 800888c:	3310      	adds	r3, #16
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	79fc      	ldrb	r4, [r7, #7]
 8008892:	4618      	mov	r0, r3
 8008894:	f007 fdb0 	bl	80103f8 <HAL_Elaps_Ticks>
 8008898:	4602      	mov	r2, r0
 800889a:	4915      	ldr	r1, [pc, #84]	; (80088f0 <CheckLinkEstablishTimeout+0x11c>)
 800889c:	4623      	mov	r3, r4
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	4423      	add	r3, r4
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	440b      	add	r3, r1
 80088a6:	3310      	adds	r3, #16
 80088a8:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fa1f 	bl	8009cf0 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	3301      	adds	r3, #1
 80088b6:	71fb      	strb	r3, [r7, #7]
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <CheckLinkEstablishTimeout+0x108>)
 80088ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088be:	79fa      	ldrb	r2, [r7, #7]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d396      	bcc.n	80087f2 <CheckLinkEstablishTimeout+0x1e>
 80088c4:	e000      	b.n	80088c8 <CheckLinkEstablishTimeout+0xf4>
		return;
 80088c6:	bf00      	nop
		}
	}
}
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd90      	pop	{r4, r7, pc}
 80088ce:	bf00      	nop
 80088d0:	08028554 	.word	0x08028554
 80088d4:	20000505 	.word	0x20000505
 80088d8:	200025a0 	.word	0x200025a0
 80088dc:	20000504 	.word	0x20000504
 80088e0:	20003780 	.word	0x20003780
 80088e4:	08029424 	.word	0x08029424
 80088e8:	200025f0 	.word	0x200025f0
 80088ec:	200035b0 	.word	0x200035b0
 80088f0:	20002da4 	.word	0x20002da4

080088f4 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80088fa:	2300      	movs	r3, #0
 80088fc:	71fb      	strb	r3, [r7, #7]
 80088fe:	e052      	b.n	80089a6 <Send_Self_Sharing+0xb2>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	4a2d      	ldr	r2, [pc, #180]	; (80089b8 <Send_Self_Sharing+0xc4>)
 8008904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008908:	4618      	mov	r0, r3
 800890a:	f007 fd75 	bl	80103f8 <HAL_Elaps_Ticks>
 800890e:	4602      	mov	r2, r0
 8008910:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <Send_Self_Sharing+0xc8>)
 8008912:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008916:	429a      	cmp	r2, r3
 8008918:	d942      	bls.n	80089a0 <Send_Self_Sharing+0xac>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 800891a:	79fa      	ldrb	r2, [r7, #7]
 800891c:	4928      	ldr	r1, [pc, #160]	; (80089c0 <Send_Self_Sharing+0xcc>)
 800891e:	4613      	mov	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4413      	add	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	440b      	add	r3, r1
 8008928:	3301      	adds	r3, #1
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 800892e:	79f9      	ldrb	r1, [r7, #7]
 8008930:	79fa      	ldrb	r2, [r7, #7]
 8008932:	4824      	ldr	r0, [pc, #144]	; (80089c4 <Send_Self_Sharing+0xd0>)
 8008934:	460b      	mov	r3, r1
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	440b      	add	r3, r1
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4403      	add	r3, r0
 800893e:	3301      	adds	r3, #1
 8008940:	7818      	ldrb	r0, [r3, #0]
 8008942:	491f      	ldr	r1, [pc, #124]	; (80089c0 <Send_Self_Sharing+0xcc>)
 8008944:	4613      	mov	r3, r2
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	4413      	add	r3, r2
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	440b      	add	r3, r1
 800894e:	3302      	adds	r3, #2
 8008950:	4602      	mov	r2, r0
 8008952:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8008954:	2218      	movs	r2, #24
 8008956:	2100      	movs	r1, #0
 8008958:	481b      	ldr	r0, [pc, #108]	; (80089c8 <Send_Self_Sharing+0xd4>)
 800895a:	f01d ff8b 	bl	8026874 <memset>
			Tx_Ei_self_sharing_st[Traverser].Peer_Index = Traverser;
 800895e:	79fa      	ldrb	r2, [r7, #7]
 8008960:	4917      	ldr	r1, [pc, #92]	; (80089c0 <Send_Self_Sharing+0xcc>)
 8008962:	4613      	mov	r3, r2
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	4413      	add	r3, r2
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	440b      	add	r3, r1
 800896c:	79fa      	ldrb	r2, [r7, #7]
 800896e:	701a      	strb	r2, [r3, #0]
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8008970:	79fa      	ldrb	r2, [r7, #7]
 8008972:	4613      	mov	r3, r2
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	4413      	add	r3, r2
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	4a11      	ldr	r2, [pc, #68]	; (80089c0 <Send_Self_Sharing+0xcc>)
 800897c:	4413      	add	r3, r2
 800897e:	2218      	movs	r2, #24
 8008980:	4619      	mov	r1, r3
 8008982:	4811      	ldr	r0, [pc, #68]	; (80089c8 <Send_Self_Sharing+0xd4>)
 8008984:	f01d ff4e 	bl	8026824 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8008988:	f240 2001 	movw	r0, #513	; 0x201
 800898c:	f008 fae8 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8008990:	79fc      	ldrb	r4, [r7, #7]
 8008992:	f011 f84d 	bl	8019a30 <HAL_GetTick>
 8008996:	4603      	mov	r3, r0
 8008998:	4a07      	ldr	r2, [pc, #28]	; (80089b8 <Send_Self_Sharing+0xc4>)
 800899a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 800899e:	e008      	b.n	80089b2 <Send_Self_Sharing+0xbe>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	3301      	adds	r3, #1
 80089a4:	71fb      	strb	r3, [r7, #7]
 80089a6:	4b05      	ldr	r3, [pc, #20]	; (80089bc <Send_Self_Sharing+0xc8>)
 80089a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089ac:	79fa      	ldrb	r2, [r7, #7]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d3a6      	bcc.n	8008900 <Send_Self_Sharing+0xc>
		}
	}
}
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd90      	pop	{r4, r7, pc}
 80089b8:	200024b8 	.word	0x200024b8
 80089bc:	20000504 	.word	0x20000504
 80089c0:	20002da4 	.word	0x20002da4
 80089c4:	200033f8 	.word	0x200033f8
 80089c8:	20002f84 	.word	0x20002f84

080089cc <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 80089d0:	4b29      	ldr	r3, [pc, #164]	; (8008a78 <Detect_CAN_Xchange_Failure+0xac>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 80089d8:	f00d fd4e 	bl	8016478 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80089dc:	4927      	ldr	r1, [pc, #156]	; (8008a7c <Detect_CAN_Xchange_Failure+0xb0>)
 80089de:	4828      	ldr	r0, [pc, #160]	; (8008a80 <Detect_CAN_Xchange_Failure+0xb4>)
 80089e0:	f7f7 fc2e 	bl	8000240 <strcmp>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 80089ea:	4b23      	ldr	r3, [pc, #140]	; (8008a78 <Detect_CAN_Xchange_Failure+0xac>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	701a      	strb	r2, [r3, #0]
		return;
 80089f0:	e040      	b.n	8008a74 <Detect_CAN_Xchange_Failure+0xa8>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 80089f2:	4b24      	ldr	r3, [pc, #144]	; (8008a84 <Detect_CAN_Xchange_Failure+0xb8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f007 fcfe 	bl	80103f8 <HAL_Elaps_Ticks>
 80089fc:	4602      	mov	r2, r0
 80089fe:	4b22      	ldr	r3, [pc, #136]	; (8008a88 <Detect_CAN_Xchange_Failure+0xbc>)
 8008a00:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d335      	bcc.n	8008a74 <Detect_CAN_Xchange_Failure+0xa8>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8008a08:	4b20      	ldr	r3, [pc, #128]	; (8008a8c <Detect_CAN_Xchange_Failure+0xc0>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	4b1d      	ldr	r3, [pc, #116]	; (8008a84 <Detect_CAN_Xchange_Failure+0xb8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d02f      	beq.n	8008a74 <Detect_CAN_Xchange_Failure+0xa8>
		{
			Is_CAN_Exchange_happening = NO;
 8008a14:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <Detect_CAN_Xchange_Failure+0xac>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8008a1a:	4b1a      	ldr	r3, [pc, #104]	; (8008a84 <Detect_CAN_Xchange_Failure+0xb8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <Detect_CAN_Xchange_Failure+0xc0>)
 8008a20:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8008a22:	4b18      	ldr	r3, [pc, #96]	; (8008a84 <Detect_CAN_Xchange_Failure+0xb8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f007 fce6 	bl	80103f8 <HAL_Elaps_Ticks>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	4a18      	ldr	r2, [pc, #96]	; (8008a90 <Detect_CAN_Xchange_Failure+0xc4>)
 8008a30:	fba2 2303 	umull	r2, r3, r2, r3
 8008a34:	099b      	lsrs	r3, r3, #6
 8008a36:	4619      	mov	r1, r3
 8008a38:	4816      	ldr	r0, [pc, #88]	; (8008a94 <Detect_CAN_Xchange_Failure+0xc8>)
 8008a3a:	f01e f803 	bl	8026a44 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8008a3e:	4816      	ldr	r0, [pc, #88]	; (8008a98 <Detect_CAN_Xchange_Failure+0xcc>)
 8008a40:	f01e f89c 	bl	8026b7c <puts>
			memset(&Rx_Ei_self_sharing_st,0,(sizeof(EI_SELF_SHARING_t)* EI_data.Hitachi_st.PeersCnt));
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <Detect_CAN_Xchange_Failure+0xbc>)
 8008a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	4413      	add	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	461a      	mov	r2, r3
 8008a56:	2100      	movs	r1, #0
 8008a58:	4810      	ldr	r0, [pc, #64]	; (8008a9c <Detect_CAN_Xchange_Failure+0xd0>)
 8008a5a:	f01d ff0b 	bl	8026874 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8008a5e:	22a2      	movs	r2, #162	; 0xa2
 8008a60:	2100      	movs	r1, #0
 8008a62:	480f      	ldr	r0, [pc, #60]	; (8008aa0 <Detect_CAN_Xchange_Failure+0xd4>)
 8008a64:	f01d ff06 	bl	8026874 <memset>
			ReArrangedVitalData();
 8008a68:	f001 fe4c 	bl	800a704 <ReArrangedVitalData>
			TransmitCanPkt(EI_PROCESS_DATA);
 8008a6c:	f240 1019 	movw	r0, #281	; 0x119
 8008a70:	f008 fa76 	bl	8010f60 <TransmitCanPkt>
		}
	}
}
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	2000030b 	.word	0x2000030b
 8008a7c:	08028554 	.word	0x08028554
 8008a80:	20000505 	.word	0x20000505
 8008a84:	200024b4 	.word	0x200024b4
 8008a88:	20000504 	.word	0x20000504
 8008a8c:	200037a8 	.word	0x200037a8
 8008a90:	10624dd3 	.word	0x10624dd3
 8008a94:	08029444 	.word	0x08029444
 8008a98:	08029474 	.word	0x08029474
 8008a9c:	20002e94 	.word	0x20002e94
 8008aa0:	20002770 	.word	0x20002770

08008aa4 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b0ae      	sub	sp, #184	; 0xb8
 8008aa8:	af00      	add	r7, sp, #0

#ifdef EI_1
	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 8008aaa:	2300      	movs	r3, #0
 8008aac:	607b      	str	r3, [r7, #4]
 8008aae:	f107 0308 	add.w	r3, r7, #8
 8008ab2:	22a6      	movs	r2, #166	; 0xa6
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f01d fedc 	bl	8026874 <memset>
	uint16_t Serial_Byte = RESET;
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif


	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8008ac2:	4bc9      	ldr	r3, [pc, #804]	; (8008de8 <Process_Send_Signals_2_MIE+0x344>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f007 fc96 	bl	80103f8 <HAL_Elaps_Ticks>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4bc7      	ldr	r3, [pc, #796]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008ad0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	f240 82ad 	bls.w	8009034 <Process_Send_Signals_2_MIE+0x590>
	{
		uint8_t Traverser = RESET;
 8008ada:	2300      	movs	r3, #0
 8008adc:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = RESET;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008aec:	e0c6      	b.n	8008c7c <Process_Send_Signals_2_MIE+0x1d8>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 8008aee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008af2:	4abf      	ldr	r2, [pc, #764]	; (8008df0 <Process_Send_Signals_2_MIE+0x34c>)
 8008af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d11d      	bne.n	8008b38 <Process_Send_Signals_2_MIE+0x94>
 8008afc:	49bd      	ldr	r1, [pc, #756]	; (8008df4 <Process_Send_Signals_2_MIE+0x350>)
 8008afe:	48be      	ldr	r0, [pc, #760]	; (8008df8 <Process_Send_Signals_2_MIE+0x354>)
 8008b00:	f7f7 fb9e 	bl	8000240 <strcmp>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d016      	beq.n	8008b38 <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008b0a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b0e:	4ab7      	ldr	r2, [pc, #732]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008b10:	3366      	adds	r3, #102	; 0x66
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	48b8      	ldr	r0, [pc, #736]	; (8008dfc <Process_Send_Signals_2_MIE+0x358>)
 8008b1c:	f01d ff92 	bl	8026a44 <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008b20:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	4ab6      	ldr	r2, [pc, #728]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008b28:	4413      	add	r3, r2
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	2210      	movs	r2, #16
 8008b2e:	2100      	movs	r1, #0
 8008b30:	4618      	mov	r0, r3
 8008b32:	f01d fe9f 	bl	8026874 <memset>
				continue;
 8008b36:	e09c      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>
			}
			Choice = RESET;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8008b3e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b42:	4ab0      	ldr	r2, [pc, #704]	; (8008e04 <Process_Send_Signals_2_MIE+0x360>)
 8008b44:	5cd3      	ldrb	r3, [r2, r3]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d106      	bne.n	8008b58 <Process_Send_Signals_2_MIE+0xb4>
 8008b4a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b4e:	f043 0301 	orr.w	r3, r3, #1
 8008b52:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008b56:	e005      	b.n	8008b64 <Process_Send_Signals_2_MIE+0xc0>
 8008b58:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b5c:	f023 0301 	bic.w	r3, r3, #1
 8008b60:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(SelfLinkFlag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008b64:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b68:	4aa7      	ldr	r2, [pc, #668]	; (8008e08 <Process_Send_Signals_2_MIE+0x364>)
 8008b6a:	5cd3      	ldrb	r3, [r2, r3]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d106      	bne.n	8008b7e <Process_Send_Signals_2_MIE+0xda>
 8008b70:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b74:	f043 0302 	orr.w	r3, r3, #2
 8008b78:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008b7c:	e005      	b.n	8008b8a <Process_Send_Signals_2_MIE+0xe6>
 8008b7e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b82:	f023 0302 	bic.w	r3, r3, #2
 8008b86:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			if(Debug_flag == 1)
 8008b8a:	4ba0      	ldr	r3, [pc, #640]	; (8008e0c <Process_Send_Signals_2_MIE+0x368>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d10c      	bne.n	8008bac <Process_Send_Signals_2_MIE+0x108>
			{
				printf("Choice:%02X|%lu\n",Choice,EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008b92:	f897 10b4 	ldrb.w	r1, [r7, #180]	; 0xb4
 8008b96:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b9a:	4a94      	ldr	r2, [pc, #592]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008b9c:	3366      	adds	r3, #102	; 0x66
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	489a      	ldr	r0, [pc, #616]	; (8008e10 <Process_Send_Signals_2_MIE+0x36c>)
 8008ba8:	f01d ff4c 	bl	8026a44 <iprintf>
			}

			switch(Choice)
 8008bac:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d853      	bhi.n	8008c5c <Process_Send_Signals_2_MIE+0x1b8>
 8008bb4:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <Process_Send_Signals_2_MIE+0x118>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008bcd 	.word	0x08008bcd
 8008bc0:	08008be5 	.word	0x08008be5
 8008bc4:	08008c0d 	.word	0x08008c0d
 8008bc8:	08008c35 	.word	0x08008c35
			{
			case BOTHCARD_LINK_NOK:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008bcc:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008bd0:	011b      	lsls	r3, r3, #4
 8008bd2:	4a8b      	ldr	r2, [pc, #556]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	2210      	movs	r2, #16
 8008bda:	2100      	movs	r1, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f01d fe49 	bl	8026874 <memset>
				break;
 8008be2:	e046      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>

			case OTHERCARD_LINK_OK:
				/*printf("\nOtherCard SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008be4:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008be8:	011b      	lsls	r3, r3, #4
 8008bea:	4a85      	ldr	r2, [pc, #532]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008bec:	4413      	add	r3, r2
 8008bee:	1c98      	adds	r0, r3, #2
 8008bf0:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4a85      	ldr	r2, [pc, #532]	; (8008e14 <Process_Send_Signals_2_MIE+0x370>)
 8008bfe:	4413      	add	r3, r2
 8008c00:	3301      	adds	r3, #1
 8008c02:	2210      	movs	r2, #16
 8008c04:	4619      	mov	r1, r3
 8008c06:	f01d fe0d 	bl	8026824 <memcpy>
				break;
 8008c0a:	e032      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>
			case THISCARD_LINK_OK:
				/*printf("\nOnly This Card SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008c0c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	4a7b      	ldr	r2, [pc, #492]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008c14:	4413      	add	r3, r2
 8008c16:	1c98      	adds	r0, r3, #2
 8008c18:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4a7c      	ldr	r2, [pc, #496]	; (8008e18 <Process_Send_Signals_2_MIE+0x374>)
 8008c26:	4413      	add	r3, r2
 8008c28:	3301      	adds	r3, #1
 8008c2a:	2210      	movs	r2, #16
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	f01d fdf9 	bl	8026824 <memcpy>
				break;
 8008c32:	e01e      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>
			case BOTHCARD_LINK_OK:
				/*printf("\nBothCard SET3\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008c34:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	4a71      	ldr	r2, [pc, #452]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008c3c:	4413      	add	r3, r2
 8008c3e:	1c98      	adds	r0, r3, #2
 8008c40:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4a72      	ldr	r2, [pc, #456]	; (8008e18 <Process_Send_Signals_2_MIE+0x374>)
 8008c4e:	4413      	add	r3, r2
 8008c50:	3301      	adds	r3, #1
 8008c52:	2210      	movs	r2, #16
 8008c54:	4619      	mov	r1, r3
 8008c56:	f01d fde5 	bl	8026824 <memcpy>
				break;
 8008c5a:	e00a      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008c5c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	4a67      	ldr	r2, [pc, #412]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008c64:	4413      	add	r3, r2
 8008c66:	3302      	adds	r3, #2
 8008c68:	2210      	movs	r2, #16
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f01d fe01 	bl	8026874 <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c72:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c76:	3301      	adds	r3, #1
 8008c78:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008c7c:	4b5b      	ldr	r3, [pc, #364]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008c7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c82:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008c86:	429a      	cmp	r2, r3
 8008c88:	f4ff af31 	bcc.w	8008aee <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008c8c:	4959      	ldr	r1, [pc, #356]	; (8008df4 <Process_Send_Signals_2_MIE+0x350>)
 8008c8e:	485a      	ldr	r0, [pc, #360]	; (8008df8 <Process_Send_Signals_2_MIE+0x354>)
 8008c90:	f7f7 fad6 	bl	8000240 <strcmp>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <Process_Send_Signals_2_MIE+0x1fc>
		{
			Is_CAN_Exchange_happening = YES;
 8008c9a:	4b60      	ldr	r3, [pc, #384]	; (8008e1c <Process_Send_Signals_2_MIE+0x378>)
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	701a      	strb	r2, [r3, #0]
		}

		if(Is_CAN_Exchange_happening == NO)
 8008ca0:	4b5e      	ldr	r3, [pc, #376]	; (8008e1c <Process_Send_Signals_2_MIE+0x378>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <Process_Send_Signals_2_MIE+0x21a>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8008ca8:	485d      	ldr	r0, [pc, #372]	; (8008e20 <Process_Send_Signals_2_MIE+0x37c>)
 8008caa:	f01d ff67 	bl	8026b7c <puts>
			printf("Sending Blank Relay statuses\n");
 8008cae:	485d      	ldr	r0, [pc, #372]	; (8008e24 <Process_Send_Signals_2_MIE+0x380>)
 8008cb0:	f01d ff64 	bl	8026b7c <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8008cb4:	22a2      	movs	r2, #162	; 0xa2
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4851      	ldr	r0, [pc, #324]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008cba:	f01d fddb 	bl	8026874 <memset>
		}


		if(Debug_flag == 1)
 8008cbe:	4b53      	ldr	r3, [pc, #332]	; (8008e0c <Process_Send_Signals_2_MIE+0x368>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d143      	bne.n	8008d4e <Process_Send_Signals_2_MIE+0x2aa>
		{
			Get_time();
 8008cc6:	f003 ff11 	bl	800caec <Get_time>
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 8008cca:	4b57      	ldr	r3, [pc, #348]	; (8008e28 <Process_Send_Signals_2_MIE+0x384>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4b55      	ldr	r3, [pc, #340]	; (8008e28 <Process_Send_Signals_2_MIE+0x384>)
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4b54      	ldr	r3, [pc, #336]	; (8008e28 <Process_Send_Signals_2_MIE+0x384>)
 8008cd8:	789b      	ldrb	r3, [r3, #2]
 8008cda:	4854      	ldr	r0, [pc, #336]	; (8008e2c <Process_Send_Signals_2_MIE+0x388>)
 8008cdc:	f01d feb2 	bl	8026a44 <iprintf>
			ReArrangedVitalData();
 8008ce0:	f001 fd10 	bl	800a704 <ReArrangedVitalData>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008cea:	e025      	b.n	8008d38 <Process_Send_Signals_2_MIE+0x294>
			{
				if(ReorderFlag == RESET)
 8008cec:	4b50      	ldr	r3, [pc, #320]	; (8008e30 <Process_Send_Signals_2_MIE+0x38c>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <Process_Send_Signals_2_MIE+0x264>
				{
					printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 8008cf4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008cf8:	4a41      	ldr	r2, [pc, #260]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008cfa:	4413      	add	r3, r2
 8008cfc:	789b      	ldrb	r3, [r3, #2]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	484c      	ldr	r0, [pc, #304]	; (8008e34 <Process_Send_Signals_2_MIE+0x390>)
 8008d02:	f01d fe9f 	bl	8026a44 <iprintf>
 8008d06:	e008      	b.n	8008d1a <Process_Send_Signals_2_MIE+0x276>
				}
				else
				{
					printf("%02X ",HitachiEI_DataReArranged_st.Inputs[Byte]);
 8008d08:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008d0c:	4a4a      	ldr	r2, [pc, #296]	; (8008e38 <Process_Send_Signals_2_MIE+0x394>)
 8008d0e:	4413      	add	r3, r2
 8008d10:	789b      	ldrb	r3, [r3, #2]
 8008d12:	4619      	mov	r1, r3
 8008d14:	4847      	ldr	r0, [pc, #284]	; (8008e34 <Process_Send_Signals_2_MIE+0x390>)
 8008d16:	f01d fe95 	bl	8026a44 <iprintf>
				}
				if(((Byte+1)%16)==0)
 8008d1a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008d1e:	3301      	adds	r3, #1
 8008d20:	f003 030f 	and.w	r3, r3, #15
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <Process_Send_Signals_2_MIE+0x28a>
				{
					printf("\n");
 8008d28:	200a      	movs	r0, #10
 8008d2a:	f01d fea3 	bl	8026a74 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008d2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008d32:	3301      	adds	r3, #1
 8008d34:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008d38:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8008d3c:	4b2b      	ldr	r3, [pc, #172]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	429a      	cmp	r2, r3
 8008d46:	dbd1      	blt.n	8008cec <Process_Send_Signals_2_MIE+0x248>
				}
			}
			printf("\n");
 8008d48:	200a      	movs	r0, #10
 8008d4a:	f01d fe93 	bl	8026a74 <putchar>
		}

#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif
		ReArrangedVitalData();
 8008d4e:	f001 fcd9 	bl	800a704 <ReArrangedVitalData>
		TransmitCanPkt(EI_PROCESS_DATA);
 8008d52:	f240 1019 	movw	r0, #281	; 0x119
 8008d56:	f008 f903 	bl	8010f60 <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008d5a:	4926      	ldr	r1, [pc, #152]	; (8008df4 <Process_Send_Signals_2_MIE+0x350>)
 8008d5c:	4826      	ldr	r0, [pc, #152]	; (8008df8 <Process_Send_Signals_2_MIE+0x354>)
 8008d5e:	f7f7 fa6f 	bl	8000240 <strcmp>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f040 8160 	bne.w	800902a <Process_Send_Signals_2_MIE+0x586>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 8008d6a:	4b34      	ldr	r3, [pc, #208]	; (8008e3c <Process_Send_Signals_2_MIE+0x398>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f007 fb42 	bl	80103f8 <HAL_Elaps_Ticks>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008d7a:	f0c0 80c2 	bcc.w	8008f02 <Process_Send_Signals_2_MIE+0x45e>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008d7e:	4a30      	ldr	r2, [pc, #192]	; (8008e40 <Process_Send_Signals_2_MIE+0x39c>)
 8008d80:	4b1f      	ldr	r3, [pc, #124]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008d82:	4610      	mov	r0, r2
 8008d84:	3302      	adds	r3, #2
 8008d86:	22a0      	movs	r2, #160	; 0xa0
 8008d88:	4619      	mov	r1, r3
 8008d8a:	f01d fd4b 	bl	8026824 <memcpy>
				Serial_Byte = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008d94:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008d9e:	33b8      	adds	r3, #184	; 0xb8
 8008da0:	443b      	add	r3, r7
 8008da2:	227e      	movs	r2, #126	; 0x7e
 8008da4:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008da8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008db2:	33b8      	adds	r3, #184	; 0xb8
 8008db4:	443b      	add	r3, r7
 8008db6:	227e      	movs	r2, #126	; 0x7e
 8008db8:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008dbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008dc6:	33b8      	adds	r3, #184	; 0xb8
 8008dc8:	443b      	add	r3, r7
 8008dca:	227e      	movs	r2, #126	; 0x7e
 8008dcc:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 8008dd0:	4b0e      	ldr	r3, [pc, #56]	; (8008e0c <Process_Send_Signals_2_MIE+0x368>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d102      	bne.n	8008dde <Process_Send_Signals_2_MIE+0x33a>
				{
					printf("Sending Signals over Ethernet:\n");
 8008dd8:	481a      	ldr	r0, [pc, #104]	; (8008e44 <Process_Send_Signals_2_MIE+0x3a0>)
 8008dda:	f01d fecf 	bl	8026b7c <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008dde:	2300      	movs	r3, #0
 8008de0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008de4:	e05a      	b.n	8008e9c <Process_Send_Signals_2_MIE+0x3f8>
 8008de6:	bf00      	nop
 8008de8:	200024e4 	.word	0x200024e4
 8008dec:	20000504 	.word	0x20000504
 8008df0:	20002550 	.word	0x20002550
 8008df4:	08028554 	.word	0x08028554
 8008df8:	20000505 	.word	0x20000505
 8008dfc:	08029498 	.word	0x08029498
 8008e00:	20002770 	.word	0x20002770
 8008e04:	200025fc 	.word	0x200025fc
 8008e08:	200025f0 	.word	0x200025f0
 8008e0c:	20000bbb 	.word	0x20000bbb
 8008e10:	080294ac 	.word	0x080294ac
 8008e14:	20003678 	.word	0x20003678
 8008e18:	200035b0 	.word	0x200035b0
 8008e1c:	2000030b 	.word	0x2000030b
 8008e20:	080294c0 	.word	0x080294c0
 8008e24:	080294e4 	.word	0x080294e4
 8008e28:	20003fdc 	.word	0x20003fdc
 8008e2c:	08029504 	.word	0x08029504
 8008e30:	2000254e 	.word	0x2000254e
 8008e34:	0802952c 	.word	0x0802952c
 8008e38:	20002814 	.word	0x20002814
 8008e3c:	200037ac 	.word	0x200037ac
 8008e40:	200037b0 	.word	0x200037b0
 8008e44:	08029534 	.word	0x08029534
				{
					if(ReorderFlag == RESET)
 8008e48:	4b7c      	ldr	r3, [pc, #496]	; (800903c <Process_Send_Signals_2_MIE+0x598>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d110      	bne.n	8008e72 <Process_Send_Signals_2_MIE+0x3ce>
					{
						Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008e50:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008e54:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e58:	1c59      	adds	r1, r3, #1
 8008e5a:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4b77      	ldr	r3, [pc, #476]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008e62:	4413      	add	r3, r2
 8008e64:	789a      	ldrb	r2, [r3, #2]
 8008e66:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008e6a:	443b      	add	r3, r7
 8008e6c:	f803 2cb4 	strb.w	r2, [r3, #-180]
 8008e70:	e00f      	b.n	8008e92 <Process_Send_Signals_2_MIE+0x3ee>
					}
					else
					{
						Serial_Send_Buffer[Serial_Byte++] = HitachiEI_DataReArranged_st.Inputs[Byte];
 8008e72:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008e76:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e7a:	1c59      	adds	r1, r3, #1
 8008e7c:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008e80:	4619      	mov	r1, r3
 8008e82:	4b70      	ldr	r3, [pc, #448]	; (8009044 <Process_Send_Signals_2_MIE+0x5a0>)
 8008e84:	4413      	add	r3, r2
 8008e86:	789a      	ldrb	r2, [r3, #2]
 8008e88:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008e8c:	443b      	add	r3, r7
 8008e8e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008e92:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8008e96:	3301      	adds	r3, #1
 8008e98:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008e9c:	4b68      	ldr	r3, [pc, #416]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d3cf      	bcc.n	8008e48 <Process_Send_Signals_2_MIE+0x3a4>
					}

				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008ea8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008eb2:	33b8      	adds	r3, #184	; 0xb8
 8008eb4:	443b      	add	r3, r7
 8008eb6:	227f      	movs	r2, #127	; 0x7f
 8008eb8:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008ebc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008ec6:	33b8      	adds	r3, #184	; 0xb8
 8008ec8:	443b      	add	r3, r7
 8008eca:	227f      	movs	r2, #127	; 0x7f
 8008ecc:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008ed0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008eda:	33b8      	adds	r3, #184	; 0xb8
 8008edc:	443b      	add	r3, r7
 8008ede:	227f      	movs	r2, #127	; 0x7f
 8008ee0:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8008ee4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ee8:	b2d9      	uxtb	r1, r3
 8008eea:	4a57      	ldr	r2, [pc, #348]	; (8009048 <Process_Send_Signals_2_MIE+0x5a4>)
 8008eec:	1d3b      	adds	r3, r7, #4
 8008eee:	6812      	ldr	r2, [r2, #0]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f007 fe73 	bl	8010bdc <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 8008ef6:	f010 fd9b 	bl	8019a30 <HAL_GetTick>
 8008efa:	4603      	mov	r3, r0
 8008efc:	4a53      	ldr	r2, [pc, #332]	; (800904c <Process_Send_Signals_2_MIE+0x5a8>)
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	e093      	b.n	800902a <Process_Send_Signals_2_MIE+0x586>
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 8008f02:	22a0      	movs	r2, #160	; 0xa0
 8008f04:	4952      	ldr	r1, [pc, #328]	; (8009050 <Process_Send_Signals_2_MIE+0x5ac>)
 8008f06:	4853      	ldr	r0, [pc, #332]	; (8009054 <Process_Send_Signals_2_MIE+0x5b0>)
 8008f08:	f01d fc7c 	bl	8026804 <memcmp>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 808b 	beq.w	800902a <Process_Send_Signals_2_MIE+0x586>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008f14:	4a4f      	ldr	r2, [pc, #316]	; (8009054 <Process_Send_Signals_2_MIE+0x5b0>)
 8008f16:	4b4a      	ldr	r3, [pc, #296]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008f18:	4610      	mov	r0, r2
 8008f1a:	3302      	adds	r3, #2
 8008f1c:	22a0      	movs	r2, #160	; 0xa0
 8008f1e:	4619      	mov	r1, r3
 8008f20:	f01d fc80 	bl	8026824 <memcpy>
				Serial_Byte = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008f2a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f34:	33b8      	adds	r3, #184	; 0xb8
 8008f36:	443b      	add	r3, r7
 8008f38:	227e      	movs	r2, #126	; 0x7e
 8008f3a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008f3e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f48:	33b8      	adds	r3, #184	; 0xb8
 8008f4a:	443b      	add	r3, r7
 8008f4c:	227e      	movs	r2, #126	; 0x7e
 8008f4e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008f52:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f5c:	33b8      	adds	r3, #184	; 0xb8
 8008f5e:	443b      	add	r3, r7
 8008f60:	227e      	movs	r2, #126	; 0x7e
 8008f62:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 8008f66:	4b3c      	ldr	r3, [pc, #240]	; (8009058 <Process_Send_Signals_2_MIE+0x5b4>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d102      	bne.n	8008f74 <Process_Send_Signals_2_MIE+0x4d0>
				{
					printf("Sending Signals over Ethernet:\n");
 8008f6e:	483b      	ldr	r0, [pc, #236]	; (800905c <Process_Send_Signals_2_MIE+0x5b8>)
 8008f70:	f01d fe04 	bl	8026b7c <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008f74:	2300      	movs	r3, #0
 8008f76:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8008f7a:	e029      	b.n	8008fd0 <Process_Send_Signals_2_MIE+0x52c>
				{
					if(ReorderFlag == RESET)
 8008f7c:	4b2f      	ldr	r3, [pc, #188]	; (800903c <Process_Send_Signals_2_MIE+0x598>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d110      	bne.n	8008fa6 <Process_Send_Signals_2_MIE+0x502>
					{
						Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008f84:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008f88:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f8c:	1c59      	adds	r1, r3, #1
 8008f8e:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008f92:	4619      	mov	r1, r3
 8008f94:	4b2a      	ldr	r3, [pc, #168]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008f96:	4413      	add	r3, r2
 8008f98:	789a      	ldrb	r2, [r3, #2]
 8008f9a:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008f9e:	443b      	add	r3, r7
 8008fa0:	f803 2cb4 	strb.w	r2, [r3, #-180]
 8008fa4:	e00f      	b.n	8008fc6 <Process_Send_Signals_2_MIE+0x522>
					}
					else
					{
						Serial_Send_Buffer[Serial_Byte++] = HitachiEI_DataReArranged_st.Inputs[Byte];
 8008fa6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008faa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008fae:	1c59      	adds	r1, r3, #1
 8008fb0:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4b23      	ldr	r3, [pc, #140]	; (8009044 <Process_Send_Signals_2_MIE+0x5a0>)
 8008fb8:	4413      	add	r3, r2
 8008fba:	789a      	ldrb	r2, [r3, #2]
 8008fbc:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008fc0:	443b      	add	r3, r7
 8008fc2:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008fc6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8008fca:	3301      	adds	r3, #1
 8008fcc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8008fd0:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3cf      	bcc.n	8008f7c <Process_Send_Signals_2_MIE+0x4d8>
					}
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008fdc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008fe6:	33b8      	adds	r3, #184	; 0xb8
 8008fe8:	443b      	add	r3, r7
 8008fea:	227f      	movs	r2, #127	; 0x7f
 8008fec:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008ff0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008ffa:	33b8      	adds	r3, #184	; 0xb8
 8008ffc:	443b      	add	r3, r7
 8008ffe:	227f      	movs	r2, #127	; 0x7f
 8009000:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8009004:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800900e:	33b8      	adds	r3, #184	; 0xb8
 8009010:	443b      	add	r3, r7
 8009012:	227f      	movs	r2, #127	; 0x7f
 8009014:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8009018:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800901c:	b2d9      	uxtb	r1, r3
 800901e:	4a0a      	ldr	r2, [pc, #40]	; (8009048 <Process_Send_Signals_2_MIE+0x5a4>)
 8009020:	1d3b      	adds	r3, r7, #4
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	4618      	mov	r0, r3
 8009026:	f007 fdd9 	bl	8010bdc <Udp_Send_SigInfo>
#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 800902a:	f010 fd01 	bl	8019a30 <HAL_GetTick>
 800902e:	4603      	mov	r3, r0
 8009030:	4a0b      	ldr	r2, [pc, #44]	; (8009060 <Process_Send_Signals_2_MIE+0x5bc>)
 8009032:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8009034:	bf00      	nop
 8009036:	37b8      	adds	r7, #184	; 0xb8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	2000254e 	.word	0x2000254e
 8009040:	20002770 	.word	0x20002770
 8009044:	20002814 	.word	0x20002814
 8009048:	200026e4 	.word	0x200026e4
 800904c:	200037ac 	.word	0x200037ac
 8009050:	20002772 	.word	0x20002772
 8009054:	200037b0 	.word	0x200037b0
 8009058:	20000bbb 	.word	0x20000bbb
 800905c:	08029534 	.word	0x08029534
 8009060:	200024e4 	.word	0x200024e4

08009064 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8009064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009066:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800906a:	af04      	add	r7, sp, #16
 800906c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009070:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009074:	6018      	str	r0, [r3, #0]
 8009076:	4608      	mov	r0, r1
 8009078:	4611      	mov	r1, r2
 800907a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800907e:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8009082:	4602      	mov	r2, r0
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800908a:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800908e:	460a      	mov	r2, r1
 8009090:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 8009092:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009096:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	3304      	adds	r3, #4
 80090a0:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80090a4:	2100      	movs	r1, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f01d fbe4 	bl	8026874 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 80090b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80090b6:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d003      	beq.n	80090c8 <Print_EI_DATA+0x64>
 80090c0:	48a8      	ldr	r0, [pc, #672]	; (8009364 <Print_EI_DATA+0x300>)
 80090c2:	f000 f975 	bl	80093b0 <Display>
 80090c6:	e002      	b.n	80090ce <Print_EI_DATA+0x6a>
 80090c8:	48a7      	ldr	r0, [pc, #668]	; (8009368 <Print_EI_DATA+0x304>)
 80090ca:	f000 f971 	bl	80093b0 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 80090ce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80090d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	461a      	mov	r2, r3
 80090dc:	2110      	movs	r1, #16
 80090de:	2000      	movs	r0, #0
 80090e0:	f7f7 fa98 	bl	8000614 <ExtractBits>
 80090e4:	4602      	mov	r2, r0
 80090e6:	f107 030c 	add.w	r3, r7, #12
 80090ea:	49a0      	ldr	r1, [pc, #640]	; (800936c <Print_EI_DATA+0x308>)
 80090ec:	4618      	mov	r0, r3
 80090ee:	f01d fe61 	bl	8026db4 <siprintf>
	Display(Print_buff);
 80090f2:	f107 030c 	add.w	r3, r7, #12
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f95a 	bl	80093b0 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 80090fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009100:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3303      	adds	r3, #3
 8009108:	461a      	mov	r2, r3
 800910a:	2110      	movs	r1, #16
 800910c:	2000      	movs	r0, #0
 800910e:	f7f7 fa81 	bl	8000614 <ExtractBits>
 8009112:	4602      	mov	r2, r0
 8009114:	f107 030c 	add.w	r3, r7, #12
 8009118:	4995      	ldr	r1, [pc, #596]	; (8009370 <Print_EI_DATA+0x30c>)
 800911a:	4618      	mov	r0, r3
 800911c:	f01d fe4a 	bl	8026db4 <siprintf>
	Display(Print_buff);
 8009120:	f107 030c 	add.w	r3, r7, #12
 8009124:	4618      	mov	r0, r3
 8009126:	f000 f943 	bl	80093b0 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 800912a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800912e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3307      	adds	r3, #7
 8009136:	461a      	mov	r2, r3
 8009138:	2108      	movs	r1, #8
 800913a:	2000      	movs	r0, #0
 800913c:	f7f7 fa6a 	bl	8000614 <ExtractBits>
 8009140:	4603      	mov	r3, r0
 8009142:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 8009146:	488b      	ldr	r0, [pc, #556]	; (8009374 <Print_EI_DATA+0x310>)
 8009148:	f000 f932 	bl	80093b0 <Display>
	switch(Msg_type)
 800914c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8009150:	3b01      	subs	r3, #1
 8009152:	2b05      	cmp	r3, #5
 8009154:	d829      	bhi.n	80091aa <Print_EI_DATA+0x146>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <Print_EI_DATA+0xf8>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009175 	.word	0x08009175
 8009160:	08009193 	.word	0x08009193
 8009164:	080091ab 	.word	0x080091ab
 8009168:	0800919b 	.word	0x0800919b
 800916c:	080091ab 	.word	0x080091ab
 8009170:	080091a3 	.word	0x080091a3
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8009174:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009178:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <Print_EI_DATA+0x126>
 8009182:	487d      	ldr	r0, [pc, #500]	; (8009378 <Print_EI_DATA+0x314>)
 8009184:	f000 f914 	bl	80093b0 <Display>
		//Display("INIT     ");
		break;
 8009188:	e012      	b.n	80091b0 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 800918a:	487c      	ldr	r0, [pc, #496]	; (800937c <Print_EI_DATA+0x318>)
 800918c:	f000 f910 	bl	80093b0 <Display>
		break;
 8009190:	e00e      	b.n	80091b0 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 8009192:	487b      	ldr	r0, [pc, #492]	; (8009380 <Print_EI_DATA+0x31c>)
 8009194:	f000 f90c 	bl	80093b0 <Display>
		break;
 8009198:	e00a      	b.n	80091b0 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 800919a:	487a      	ldr	r0, [pc, #488]	; (8009384 <Print_EI_DATA+0x320>)
 800919c:	f000 f908 	bl	80093b0 <Display>
		break;
 80091a0:	e006      	b.n	80091b0 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 80091a2:	4879      	ldr	r0, [pc, #484]	; (8009388 <Print_EI_DATA+0x324>)
 80091a4:	f000 f904 	bl	80093b0 <Display>
		break;
 80091a8:	e002      	b.n	80091b0 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 80091aa:	4878      	ldr	r0, [pc, #480]	; (800938c <Print_EI_DATA+0x328>)
 80091ac:	f000 f900 	bl	80093b0 <Display>
	}
	Display("|");
 80091b0:	4877      	ldr	r0, [pc, #476]	; (8009390 <Print_EI_DATA+0x32c>)
 80091b2:	f000 f8fd 	bl	80093b0 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 80091b6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80091ba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3305      	adds	r3, #5
 80091c2:	461a      	mov	r2, r3
 80091c4:	2108      	movs	r1, #8
 80091c6:	2000      	movs	r0, #0
 80091c8:	f7f7 fa24 	bl	8000614 <ExtractBits>
 80091cc:	4602      	mov	r2, r0
 80091ce:	f107 030c 	add.w	r3, r7, #12
 80091d2:	4970      	ldr	r1, [pc, #448]	; (8009394 <Print_EI_DATA+0x330>)
 80091d4:	4618      	mov	r0, r3
 80091d6:	f01d fded 	bl	8026db4 <siprintf>
	Display(Print_buff);
 80091da:	f107 030c 	add.w	r3, r7, #12
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f8e6 	bl	80093b0 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 80091e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80091e8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3306      	adds	r3, #6
 80091f0:	461a      	mov	r2, r3
 80091f2:	2108      	movs	r1, #8
 80091f4:	2000      	movs	r0, #0
 80091f6:	f7f7 fa0d 	bl	8000614 <ExtractBits>
 80091fa:	4602      	mov	r2, r0
 80091fc:	f107 030c 	add.w	r3, r7, #12
 8009200:	4965      	ldr	r1, [pc, #404]	; (8009398 <Print_EI_DATA+0x334>)
 8009202:	4618      	mov	r0, r3
 8009204:	f01d fdd6 	bl	8026db4 <siprintf>
	Display(Print_buff);
 8009208:	f107 030c 	add.w	r3, r7, #12
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f8cf 	bl	80093b0 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8009212:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009216:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	461a      	mov	r2, r3
 8009220:	2110      	movs	r1, #16
 8009222:	2000      	movs	r0, #0
 8009224:	f7f7 f9f6 	bl	8000614 <ExtractBits>
 8009228:	4603      	mov	r3, r0
 800922a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 800922e:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8009232:	f107 030c 	add.w	r3, r7, #12
 8009236:	4959      	ldr	r1, [pc, #356]	; (800939c <Print_EI_DATA+0x338>)
 8009238:	4618      	mov	r0, r3
 800923a:	f01d fdbb 	bl	8026db4 <siprintf>
	Display(Print_buff);
 800923e:	f107 030c 	add.w	r3, r7, #12
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f8b4 	bl	80093b0 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8009248:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800924c:	095b      	lsrs	r3, r3, #5
 800924e:	b29b      	uxth	r3, r3
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d03f      	beq.n	80092d8 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8009258:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800925c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	330a      	adds	r3, #10
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	461d      	mov	r5, r3
 8009268:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800926c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330b      	adds	r3, #11
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	461e      	mov	r6, r3
 8009278:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800927c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	330c      	adds	r3, #12
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800928c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	330d      	adds	r3, #13
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	4619      	mov	r1, r3
 8009298:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800929c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	330e      	adds	r3, #14
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	461c      	mov	r4, r3
 80092a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80092ac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	330f      	adds	r3, #15
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f107 000c 	add.w	r0, r7, #12
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	9402      	str	r4, [sp, #8]
 80092be:	9101      	str	r1, [sp, #4]
 80092c0:	9200      	str	r2, [sp, #0]
 80092c2:	4633      	mov	r3, r6
 80092c4:	462a      	mov	r2, r5
 80092c6:	4936      	ldr	r1, [pc, #216]	; (80093a0 <Print_EI_DATA+0x33c>)
 80092c8:	f01d fd74 	bl	8026db4 <siprintf>
		Display(Print_buff);
 80092cc:	f107 030c 	add.w	r3, r7, #12
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 f86d 	bl	80093b0 <Display>
 80092d6:	e002      	b.n	80092de <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 80092d8:	4832      	ldr	r0, [pc, #200]	; (80093a4 <Print_EI_DATA+0x340>)
 80092da:	f000 f869 	bl	80093b0 <Display>
	}
	if(Debug_flag == 1)
 80092de:	4b32      	ldr	r3, [pc, #200]	; (80093a8 <Print_EI_DATA+0x344>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d139      	bne.n	800935a <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 80092e6:	2300      	movs	r3, #0
 80092e8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80092ec:	e019      	b.n	8009322 <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 80092ee:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80092f2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80092f6:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80092fa:	6812      	ldr	r2, [r2, #0]
 80092fc:	4413      	add	r3, r2
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	f107 030c 	add.w	r3, r7, #12
 8009306:	4929      	ldr	r1, [pc, #164]	; (80093ac <Print_EI_DATA+0x348>)
 8009308:	4618      	mov	r0, r3
 800930a:	f01d fd53 	bl	8026db4 <siprintf>
			Display(Print_buff);
 800930e:	f107 030c 	add.w	r3, r7, #12
 8009312:	4618      	mov	r0, r3
 8009314:	f000 f84c 	bl	80093b0 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8009318:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800931c:	3301      	adds	r3, #1
 800931e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8009322:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009326:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800932a:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	429a      	cmp	r2, r3
 8009332:	d3dc      	bcc.n	80092ee <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8009334:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009338:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10b      	bne.n	800935a <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8009342:	f107 030c 	add.w	r3, r7, #12
 8009346:	22f6      	movs	r2, #246	; 0xf6
 8009348:	4918      	ldr	r1, [pc, #96]	; (80093ac <Print_EI_DATA+0x348>)
 800934a:	4618      	mov	r0, r3
 800934c:	f01d fd32 	bl	8026db4 <siprintf>
			Display(Print_buff);
 8009350:	f107 030c 	add.w	r3, r7, #12
 8009354:	4618      	mov	r0, r3
 8009356:	f000 f82b 	bl	80093b0 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 800935a:	bf00      	nop
 800935c:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8009360:	46bd      	mov	sp, r7
 8009362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009364:	08029554 	.word	0x08029554
 8009368:	08029558 	.word	0x08029558
 800936c:	0802955c 	.word	0x0802955c
 8009370:	08029564 	.word	0x08029564
 8009374:	0802956c 	.word	0x0802956c
 8009378:	08029570 	.word	0x08029570
 800937c:	08029578 	.word	0x08029578
 8009380:	08029580 	.word	0x08029580
 8009384:	08029584 	.word	0x08029584
 8009388:	08029588 	.word	0x08029588
 800938c:	0802958c 	.word	0x0802958c
 8009390:	080295a0 	.word	0x080295a0
 8009394:	080295a4 	.word	0x080295a4
 8009398:	080295b0 	.word	0x080295b0
 800939c:	080295bc 	.word	0x080295bc
 80093a0:	080295c8 	.word	0x080295c8
 80093a4:	080295ec 	.word	0x080295ec
 80093a8:	20000bbb 	.word	0x20000bbb
 80093ac:	0802952c 	.word	0x0802952c

080093b0 <Display>:

void Display(char *Data)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80093bc:	e00a      	b.n	80093d4 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	4413      	add	r3, r2
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	4619      	mov	r1, r3
 80093c8:	2000      	movs	r0, #0
 80093ca:	f010 f8d9 	bl	8019580 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	3301      	adds	r3, #1
 80093d2:	73fb      	strb	r3, [r7, #15]
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	4413      	add	r3, r2
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1ee      	bne.n	80093be <Display+0xe>
	}
}
 80093e0:	bf00      	nop
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <print_self_Details_Hitachi>:
	}

}

void print_self_Details_Hitachi(void)
{
 80093ec:	b5b0      	push	{r4, r5, r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
 80093f6:	4890      	ldr	r0, [pc, #576]	; (8009638 <print_self_Details_Hitachi+0x24c>)
 80093f8:	f01d fbc0 	bl	8026b7c <puts>
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 80093fc:	4b8f      	ldr	r3, [pc, #572]	; (800963c <print_self_Details_Hitachi+0x250>)
 80093fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009402:	4619      	mov	r1, r3
 8009404:	488e      	ldr	r0, [pc, #568]	; (8009640 <print_self_Details_Hitachi+0x254>)
 8009406:	f01d fb1d 	bl	8026a44 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 800940a:	4b8c      	ldr	r3, [pc, #560]	; (800963c <print_self_Details_Hitachi+0x250>)
 800940c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009410:	4619      	mov	r1, r3
 8009412:	488c      	ldr	r0, [pc, #560]	; (8009644 <print_self_Details_Hitachi+0x258>)
 8009414:	f01d fb16 	bl	8026a44 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8009418:	4b88      	ldr	r3, [pc, #544]	; (800963c <print_self_Details_Hitachi+0x250>)
 800941a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800941e:	4619      	mov	r1, r3
 8009420:	4889      	ldr	r0, [pc, #548]	; (8009648 <print_self_Details_Hitachi+0x25c>)
 8009422:	f01d fb0f 	bl	8026a44 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8009426:	4b85      	ldr	r3, [pc, #532]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009428:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800942c:	4619      	mov	r1, r3
 800942e:	4887      	ldr	r0, [pc, #540]	; (800964c <print_self_Details_Hitachi+0x260>)
 8009430:	f01d fb08 	bl	8026a44 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8009434:	4b81      	ldr	r3, [pc, #516]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009436:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800943a:	4619      	mov	r1, r3
 800943c:	4884      	ldr	r0, [pc, #528]	; (8009650 <print_self_Details_Hitachi+0x264>)
 800943e:	f01d fb01 	bl	8026a44 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8009442:	4b7e      	ldr	r3, [pc, #504]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009444:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8009448:	4619      	mov	r1, r3
 800944a:	4882      	ldr	r0, [pc, #520]	; (8009654 <print_self_Details_Hitachi+0x268>)
 800944c:	f01d fafa 	bl	8026a44 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8009450:	4b7a      	ldr	r3, [pc, #488]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009452:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009456:	4619      	mov	r1, r3
 8009458:	4879      	ldr	r0, [pc, #484]	; (8009640 <print_self_Details_Hitachi+0x254>)
 800945a:	f01d faf3 	bl	8026a44 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800945e:	2300      	movs	r3, #0
 8009460:	71fb      	strb	r3, [r7, #7]
 8009462:	e03b      	b.n	80094dc <print_self_Details_Hitachi+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8009464:	79f9      	ldrb	r1, [r7, #7]
 8009466:	79fb      	ldrb	r3, [r7, #7]
 8009468:	4a74      	ldr	r2, [pc, #464]	; (800963c <print_self_Details_Hitachi+0x250>)
 800946a:	3312      	adds	r3, #18
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	78db      	ldrb	r3, [r3, #3]
 8009472:	461c      	mov	r4, r3
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	4a71      	ldr	r2, [pc, #452]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009480:	461d      	mov	r5, r3
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	4a6d      	ldr	r2, [pc, #436]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800948e:	4618      	mov	r0, r3
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	4a6a      	ldr	r2, [pc, #424]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	9000      	str	r0, [sp, #0]
 80094a0:	462b      	mov	r3, r5
 80094a2:	4622      	mov	r2, r4
 80094a4:	486c      	ldr	r0, [pc, #432]	; (8009658 <print_self_Details_Hitachi+0x26c>)
 80094a6:	f01d facd 	bl	8026a44 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80094aa:	79f9      	ldrb	r1, [r7, #7]
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	4a63      	ldr	r2, [pc, #396]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094b0:	333e      	adds	r3, #62	; 0x3e
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	885b      	ldrh	r3, [r3, #2]
 80094b8:	461a      	mov	r2, r3
 80094ba:	4868      	ldr	r0, [pc, #416]	; (800965c <print_self_Details_Hitachi+0x270>)
 80094bc:	f01d fac2 	bl	8026a44 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80094c0:	79f9      	ldrb	r1, [r7, #7]
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	4a5d      	ldr	r2, [pc, #372]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80094ce:	461a      	mov	r2, r3
 80094d0:	4863      	ldr	r0, [pc, #396]	; (8009660 <print_self_Details_Hitachi+0x274>)
 80094d2:	f01d fab7 	bl	8026a44 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	3301      	adds	r3, #1
 80094da:	71fb      	strb	r3, [r7, #7]
 80094dc:	4b57      	ldr	r3, [pc, #348]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80094e2:	79fa      	ldrb	r2, [r7, #7]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d3bd      	bcc.n	8009464 <print_self_Details_Hitachi+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 80094e8:	4b54      	ldr	r3, [pc, #336]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094ea:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80094ee:	4619      	mov	r1, r3
 80094f0:	4b52      	ldr	r3, [pc, #328]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094f6:	461a      	mov	r2, r3
 80094f8:	4b50      	ldr	r3, [pc, #320]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80094fe:	4618      	mov	r0, r3
 8009500:	4b4e      	ldr	r3, [pc, #312]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009502:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	4603      	mov	r3, r0
 800950a:	4856      	ldr	r0, [pc, #344]	; (8009664 <print_self_Details_Hitachi+0x278>)
 800950c:	f01d fa9a 	bl	8026a44 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8009510:	4b4a      	ldr	r3, [pc, #296]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009512:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009516:	4618      	mov	r0, r3
 8009518:	4b48      	ldr	r3, [pc, #288]	; (800963c <print_self_Details_Hitachi+0x250>)
 800951a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800951e:	461c      	mov	r4, r3
 8009520:	4b46      	ldr	r3, [pc, #280]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009526:	461d      	mov	r5, r3
 8009528:	4b44      	ldr	r3, [pc, #272]	; (800963c <print_self_Details_Hitachi+0x250>)
 800952a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800952e:	461a      	mov	r2, r3
 8009530:	4b42      	ldr	r3, [pc, #264]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009532:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009536:	4619      	mov	r1, r3
 8009538:	4b40      	ldr	r3, [pc, #256]	; (800963c <print_self_Details_Hitachi+0x250>)
 800953a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800953e:	9302      	str	r3, [sp, #8]
 8009540:	9101      	str	r1, [sp, #4]
 8009542:	9200      	str	r2, [sp, #0]
 8009544:	462b      	mov	r3, r5
 8009546:	4622      	mov	r2, r4
 8009548:	4601      	mov	r1, r0
 800954a:	4847      	ldr	r0, [pc, #284]	; (8009668 <print_self_Details_Hitachi+0x27c>)
 800954c:	f01d fa7a 	bl	8026a44 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8009550:	4b3a      	ldr	r3, [pc, #232]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009552:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8009556:	4619      	mov	r1, r3
 8009558:	4844      	ldr	r0, [pc, #272]	; (800966c <print_self_Details_Hitachi+0x280>)
 800955a:	f01d fa73 	bl	8026a44 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800955e:	2300      	movs	r3, #0
 8009560:	71fb      	strb	r3, [r7, #7]
 8009562:	e05c      	b.n	800961e <print_self_Details_Hitachi+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	3301      	adds	r3, #1
 8009568:	4619      	mov	r1, r3
 800956a:	4841      	ldr	r0, [pc, #260]	; (8009670 <print_self_Details_Hitachi+0x284>)
 800956c:	f01d fa6a 	bl	8026a44 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	4a32      	ldr	r2, [pc, #200]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009574:	3366      	adds	r3, #102	; 0x66
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	4619      	mov	r1, r3
 800957e:	483d      	ldr	r0, [pc, #244]	; (8009674 <print_self_Details_Hitachi+0x288>)
 8009580:	f01d fa60 	bl	8026a44 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	4a2d      	ldr	r2, [pc, #180]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009588:	3370      	adds	r3, #112	; 0x70
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4619      	mov	r1, r3
 8009592:	4839      	ldr	r0, [pc, #228]	; (8009678 <print_self_Details_Hitachi+0x28c>)
 8009594:	f01d fa56 	bl	8026a44 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	4a28      	ldr	r2, [pc, #160]	; (800963c <print_self_Details_Hitachi+0x250>)
 800959c:	33f4      	adds	r3, #244	; 0xf4
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	4413      	add	r3, r2
 80095a2:	889b      	ldrh	r3, [r3, #4]
 80095a4:	4619      	mov	r1, r3
 80095a6:	4835      	ldr	r0, [pc, #212]	; (800967c <print_self_Details_Hitachi+0x290>)
 80095a8:	f01d fa4c 	bl	8026a44 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	4a23      	ldr	r2, [pc, #140]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095b0:	4413      	add	r3, r2
 80095b2:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80095b6:	4619      	mov	r1, r3
 80095b8:	4831      	ldr	r0, [pc, #196]	; (8009680 <print_self_Details_Hitachi+0x294>)
 80095ba:	f01d fa43 	bl	8026a44 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	4a1e      	ldr	r2, [pc, #120]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095c2:	4413      	add	r3, r2
 80095c4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80095c8:	4619      	mov	r1, r3
 80095ca:	482e      	ldr	r0, [pc, #184]	; (8009684 <print_self_Details_Hitachi+0x298>)
 80095cc:	f01d fa3a 	bl	8026a44 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	4a1a      	ldr	r2, [pc, #104]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095d4:	4413      	add	r3, r2
 80095d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80095da:	4619      	mov	r1, r3
 80095dc:	482a      	ldr	r0, [pc, #168]	; (8009688 <print_self_Details_Hitachi+0x29c>)
 80095de:	f01d fa31 	bl	8026a44 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	4a15      	ldr	r2, [pc, #84]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095e6:	338a      	adds	r3, #138	; 0x8a
 80095e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095ec:	4619      	mov	r1, r3
 80095ee:	4827      	ldr	r0, [pc, #156]	; (800968c <print_self_Details_Hitachi+0x2a0>)
 80095f0:	f01d fa28 	bl	8026a44 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	4a11      	ldr	r2, [pc, #68]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095f8:	3394      	adds	r3, #148	; 0x94
 80095fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095fe:	4619      	mov	r1, r3
 8009600:	4823      	ldr	r0, [pc, #140]	; (8009690 <print_self_Details_Hitachi+0x2a4>)
 8009602:	f01d fa1f 	bl	8026a44 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	4a0c      	ldr	r2, [pc, #48]	; (800963c <print_self_Details_Hitachi+0x250>)
 800960a:	339e      	adds	r3, #158	; 0x9e
 800960c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009610:	4619      	mov	r1, r3
 8009612:	4820      	ldr	r0, [pc, #128]	; (8009694 <print_self_Details_Hitachi+0x2a8>)
 8009614:	f01d fa16 	bl	8026a44 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	3301      	adds	r3, #1
 800961c:	71fb      	strb	r3, [r7, #7]
 800961e:	4b07      	ldr	r3, [pc, #28]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009624:	79fa      	ldrb	r2, [r7, #7]
 8009626:	429a      	cmp	r2, r3
 8009628:	d39c      	bcc.n	8009564 <print_self_Details_Hitachi+0x178>

	}

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
 800962a:	4803      	ldr	r0, [pc, #12]	; (8009638 <print_self_Details_Hitachi+0x24c>)
 800962c:	f01d faa6 	bl	8026b7c <puts>
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
#endif
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bdb0      	pop	{r4, r5, r7, pc}
 8009638:	08029660 	.word	0x08029660
 800963c:	20000504 	.word	0x20000504
 8009640:	080296b4 	.word	0x080296b4
 8009644:	080296d8 	.word	0x080296d8
 8009648:	080296fc 	.word	0x080296fc
 800964c:	08029728 	.word	0x08029728
 8009650:	08029754 	.word	0x08029754
 8009654:	08029780 	.word	0x08029780
 8009658:	080297ac 	.word	0x080297ac
 800965c:	080297cc 	.word	0x080297cc
 8009660:	080297dc 	.word	0x080297dc
 8009664:	080297ec 	.word	0x080297ec
 8009668:	08029808 	.word	0x08029808
 800966c:	08029838 	.word	0x08029838
 8009670:	0802984c 	.word	0x0802984c
 8009674:	08029860 	.word	0x08029860
 8009678:	0802987c 	.word	0x0802987c
 800967c:	08029898 	.word	0x08029898
 8009680:	080298b4 	.word	0x080298b4
 8009684:	080298cc 	.word	0x080298cc
 8009688:	080298e0 	.word	0x080298e0
 800968c:	080298f4 	.word	0x080298f4
 8009690:	08029910 	.word	0x08029910
 8009694:	0802992c 	.word	0x0802992c

08009698 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 800969e:	2300      	movs	r3, #0
 80096a0:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80096a2:	2300      	movs	r3, #0
 80096a4:	71fb      	strb	r3, [r7, #7]
 80096a6:	e054      	b.n	8009752 <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	4a2f      	ldr	r2, [pc, #188]	; (8009768 <Send_Init_After_Timeout+0xd0>)
 80096ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d04b      	beq.n	800974c <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	4a2c      	ldr	r2, [pc, #176]	; (8009768 <Send_Init_After_Timeout+0xd0>)
 80096b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096bc:	4618      	mov	r0, r3
 80096be:	f006 fe9b 	bl	80103f8 <HAL_Elaps_Ticks>
 80096c2:	4602      	mov	r2, r0
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	4929      	ldr	r1, [pc, #164]	; (800976c <Send_Init_After_Timeout+0xd4>)
 80096c8:	3394      	adds	r3, #148	; 0x94
 80096ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d93c      	bls.n	800974c <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	4a26      	ldr	r2, [pc, #152]	; (8009770 <Send_Init_After_Timeout+0xd8>)
 80096d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096da:	4618      	mov	r0, r3
 80096dc:	f006 fe8c 	bl	80103f8 <HAL_Elaps_Ticks>
 80096e0:	4602      	mov	r2, r0
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	4921      	ldr	r1, [pc, #132]	; (800976c <Send_Init_After_Timeout+0xd4>)
 80096e6:	3394      	adds	r3, #148	; 0x94
 80096e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d92d      	bls.n	800974c <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	4a20      	ldr	r2, [pc, #128]	; (8009774 <Send_Init_After_Timeout+0xdc>)
 80096f4:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d028      	beq.n	800974c <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	4a1e      	ldr	r2, [pc, #120]	; (8009778 <Send_Init_After_Timeout+0xe0>)
 80096fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8009702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009706:	d921      	bls.n	800974c <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	4a17      	ldr	r2, [pc, #92]	; (8009768 <Send_Init_After_Timeout+0xd0>)
 800970c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009710:	4618      	mov	r0, r3
 8009712:	f006 fe71 	bl	80103f8 <HAL_Elaps_Ticks>
 8009716:	4603      	mov	r3, r0
 8009718:	4a18      	ldr	r2, [pc, #96]	; (800977c <Send_Init_After_Timeout+0xe4>)
 800971a:	fba2 2303 	umull	r2, r3, r2, r3
 800971e:	099b      	lsrs	r3, r3, #6
 8009720:	4619      	mov	r1, r3
 8009722:	4817      	ldr	r0, [pc, #92]	; (8009780 <Send_Init_After_Timeout+0xe8>)
 8009724:	f01d f98e 	bl	8026a44 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	4a16      	ldr	r2, [pc, #88]	; (8009784 <Send_Init_After_Timeout+0xec>)
 800972c:	2101      	movs	r1, #1
 800972e:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8009730:	79fa      	ldrb	r2, [r7, #7]
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f7f9 f950 	bl	80029dc <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	4a0d      	ldr	r2, [pc, #52]	; (8009774 <Send_Init_After_Timeout+0xdc>)
 8009740:	2101      	movs	r1, #1
 8009742:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	4a10      	ldr	r2, [pc, #64]	; (8009788 <Send_Init_After_Timeout+0xf0>)
 8009748:	2101      	movs	r1, #1
 800974a:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800974c:	79fb      	ldrb	r3, [r7, #7]
 800974e:	3301      	adds	r3, #1
 8009750:	71fb      	strb	r3, [r7, #7]
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <Send_Init_After_Timeout+0xd4>)
 8009754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009758:	79fa      	ldrb	r2, [r7, #7]
 800975a:	429a      	cmp	r2, r3
 800975c:	d3a4      	bcc.n	80096a8 <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 800975e:	bf00      	nop
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20002630 	.word	0x20002630
 800976c:	20000504 	.word	0x20000504
 8009770:	20002510 	.word	0x20002510
 8009774:	20002718 	.word	0x20002718
 8009778:	20002724 	.word	0x20002724
 800977c:	10624dd3 	.word	0x10624dd3
 8009780:	08029948 	.word	0x08029948
 8009784:	20002758 	.word	0x20002758
 8009788:	2000274c 	.word	0x2000274c

0800978c <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009796:	e037      	b.n	8009808 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8009798:	79fa      	ldrb	r2, [r7, #7]
 800979a:	4921      	ldr	r1, [pc, #132]	; (8009820 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 800979c:	4613      	mov	r3, r2
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	4413      	add	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	440b      	add	r3, r1
 80097a6:	3304      	adds	r3, #4
 80097a8:	781b      	ldrb	r3, [r3, #0]
		if(
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d006      	beq.n	80097bc <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	4a1c      	ldr	r2, [pc, #112]	; (8009824 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 80097b2:	4413      	add	r3, r2
 80097b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d122      	bne.n	8009802 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	4a1a      	ldr	r2, [pc, #104]	; (8009828 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80097c0:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d11d      	bne.n	8009802 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	4a17      	ldr	r2, [pc, #92]	; (8009828 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80097ca:	3302      	adds	r3, #2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f006 fe10 	bl	80103f8 <HAL_Elaps_Ticks>
 80097d8:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80097da:	2b32      	cmp	r3, #50	; 0x32
 80097dc:	d911      	bls.n	8009802 <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 80097de:	79fa      	ldrb	r2, [r7, #7]
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	4611      	mov	r1, r2
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fa ff07 	bl	80045f8 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	4a0e      	ldr	r2, [pc, #56]	; (8009828 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80097ee:	2100      	movs	r1, #0
 80097f0:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 80097f2:	79fb      	ldrb	r3, [r7, #7]
 80097f4:	4a0c      	ldr	r2, [pc, #48]	; (8009828 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80097f6:	3302      	adds	r3, #2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009800:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	3301      	adds	r3, #1
 8009806:	71fb      	strb	r3, [r7, #7]
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 800980a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800980e:	79fa      	ldrb	r2, [r7, #7]
 8009810:	429a      	cmp	r2, r3
 8009812:	d3c1      	bcc.n	8009798 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = RESET;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20002da4 	.word	0x20002da4
 8009824:	20000504 	.word	0x20000504
 8009828:	200033c4 	.word	0x200033c4

0800982c <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009832:	2300      	movs	r3, #0
 8009834:	71fb      	strb	r3, [r7, #7]
 8009836:	e04e      	b.n	80098d6 <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	4a2c      	ldr	r2, [pc, #176]	; (80098ec <Check_Recv_Status_fail+0xc0>)
 800983c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d045      	beq.n	80098d0 <Check_Recv_Status_fail+0xa4>
 8009844:	79fa      	ldrb	r2, [r7, #7]
 8009846:	492a      	ldr	r1, [pc, #168]	; (80098f0 <Check_Recv_Status_fail+0xc4>)
 8009848:	4613      	mov	r3, r2
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	4413      	add	r3, r2
 800984e:	00db      	lsls	r3, r3, #3
 8009850:	440b      	add	r3, r1
 8009852:	3303      	adds	r3, #3
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d03a      	beq.n	80098d0 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	4a23      	ldr	r2, [pc, #140]	; (80098ec <Check_Recv_Status_fail+0xc0>)
 800985e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009862:	4618      	mov	r0, r3
 8009864:	f006 fdc8 	bl	80103f8 <HAL_Elaps_Ticks>
 8009868:	4602      	mov	r2, r0
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	4921      	ldr	r1, [pc, #132]	; (80098f4 <Check_Recv_Status_fail+0xc8>)
 800986e:	338a      	adds	r3, #138	; 0x8a
 8009870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009874:	429a      	cmp	r2, r3
 8009876:	d92b      	bls.n	80098d0 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <Check_Recv_Status_fail+0xc8>)
 800987c:	3366      	adds	r3, #102	; 0x66
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	6859      	ldr	r1, [r3, #4]
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	4a1b      	ldr	r2, [pc, #108]	; (80098f4 <Check_Recv_Status_fail+0xc8>)
 8009888:	338a      	adds	r3, #138	; 0x8a
 800988a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800988e:	4a1a      	ldr	r2, [pc, #104]	; (80098f8 <Check_Recv_Status_fail+0xcc>)
 8009890:	fba2 2303 	umull	r2, r3, r2, r3
 8009894:	099b      	lsrs	r3, r3, #6
 8009896:	461a      	mov	r2, r3
 8009898:	4818      	ldr	r0, [pc, #96]	; (80098fc <Check_Recv_Status_fail+0xd0>)
 800989a:	f01d f8d3 	bl	8026a44 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	4a12      	ldr	r2, [pc, #72]	; (80098ec <Check_Recv_Status_fail+0xc0>)
 80098a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098a6:	4619      	mov	r1, r3
 80098a8:	4815      	ldr	r0, [pc, #84]	; (8009900 <Check_Recv_Status_fail+0xd4>)
 80098aa:	f01d f8cb 	bl	8026a44 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 80098ae:	f010 f8bf 	bl	8019a30 <HAL_GetTick>
 80098b2:	4603      	mov	r3, r0
 80098b4:	4619      	mov	r1, r3
 80098b6:	4813      	ldr	r0, [pc, #76]	; (8009904 <Check_Recv_Status_fail+0xd8>)
 80098b8:	f01d f8c4 	bl	8026a44 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 80098bc:	79fa      	ldrb	r2, [r7, #7]
 80098be:	490c      	ldr	r1, [pc, #48]	; (80098f0 <Check_Recv_Status_fail+0xc4>)
 80098c0:	4613      	mov	r3, r2
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	4413      	add	r3, r2
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	440b      	add	r3, r1
 80098ca:	3303      	adds	r3, #3
 80098cc:	2200      	movs	r2, #0
 80098ce:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	3301      	adds	r3, #1
 80098d4:	71fb      	strb	r3, [r7, #7]
 80098d6:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <Check_Recv_Status_fail+0xc8>)
 80098d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098dc:	79fa      	ldrb	r2, [r7, #7]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d3aa      	bcc.n	8009838 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20002658 	.word	0x20002658
 80098f0:	20002da4 	.word	0x20002da4
 80098f4:	20000504 	.word	0x20000504
 80098f8:	10624dd3 	.word	0x10624dd3
 80098fc:	08029974 	.word	0x08029974
 8009900:	080299a8 	.word	0x080299a8
 8009904:	080299d8 	.word	0x080299d8

08009908 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8009908:	b590      	push	{r4, r7, lr}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 800991a:	2301      	movs	r3, #1
 800991c:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	4a39      	ldr	r2, [pc, #228]	; (8009a08 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8009922:	4413      	add	r3, r2
 8009924:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009928:	2b01      	cmp	r3, #1
 800992a:	d168      	bne.n	80099fe <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 800992c:	4b37      	ldr	r3, [pc, #220]	; (8009a0c <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d164      	bne.n	80099fe <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8009934:	79fa      	ldrb	r2, [r7, #7]
 8009936:	4936      	ldr	r1, [pc, #216]	; (8009a10 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8009938:	4613      	mov	r3, r2
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	4413      	add	r3, r2
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	440b      	add	r3, r1
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	4618      	mov	r0, r3
 8009946:	f002 ffd5 	bl	800c8f4 <bcdToDec>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009952:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8009956:	79fa      	ldrb	r2, [r7, #7]
 8009958:	492d      	ldr	r1, [pc, #180]	; (8009a10 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 800995a:	4613      	mov	r3, r2
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	4413      	add	r3, r2
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	440b      	add	r3, r1
 8009964:	3301      	adds	r3, #1
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	4618      	mov	r0, r3
 800996a:	f002 ffc3 	bl	800c8f4 <bcdToDec>
 800996e:	4603      	mov	r3, r0
 8009970:	461a      	mov	r2, r3
 8009972:	4613      	mov	r3, r2
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	1a9b      	subs	r3, r3, r2
 8009978:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 800997a:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 800997c:	79fa      	ldrb	r2, [r7, #7]
 800997e:	4924      	ldr	r1, [pc, #144]	; (8009a10 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8009980:	4613      	mov	r3, r2
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	4413      	add	r3, r2
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	440b      	add	r3, r1
 800998a:	3302      	adds	r3, #2
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f002 ffb0 	bl	800c8f4 <bcdToDec>
 8009994:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8009996:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8009998:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 800999a:	613b      	str	r3, [r7, #16]

		Get_time();
 800999c:	f003 f8a6 	bl	800caec <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80099a0:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80099aa:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 80099ae:	4b19      	ldr	r3, [pc, #100]	; (8009a14 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80099b0:	785b      	ldrb	r3, [r3, #1]
 80099b2:	4619      	mov	r1, r3
 80099b4:	460b      	mov	r3, r1
 80099b6:	011b      	lsls	r3, r3, #4
 80099b8:	1a5b      	subs	r3, r3, r1
 80099ba:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80099bc:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 80099be:	4a15      	ldr	r2, [pc, #84]	; (8009a14 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80099c0:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 80099c2:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 80099c4:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80099c6:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	bfb8      	it	lt
 80099d2:	425b      	neglt	r3, r3
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	dd12      	ble.n	80099fe <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80099e2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	4a07      	ldr	r2, [pc, #28]	; (8009a08 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 80099ea:	3366      	adds	r3, #102	; 0x66
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	461a      	mov	r2, r3
 80099f4:	4808      	ldr	r0, [pc, #32]	; (8009a18 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 80099f6:	f01d f825 	bl	8026a44 <iprintf>
			Return_Value  = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd90      	pop	{r4, r7, pc}
 8009a08:	20000504 	.word	0x20000504
 8009a0c:	200024e0 	.word	0x200024e0
 8009a10:	200028b8 	.word	0x200028b8
 8009a14:	20003fdc 	.word	0x20003fdc
 8009a18:	080299e4 	.word	0x080299e4

08009a1c <Check_All_Peers>:

void Check_All_Peers(void)
{
 8009a1c:	b590      	push	{r4, r7, lr}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009a22:	2300      	movs	r3, #0
 8009a24:	71fb      	strb	r3, [r7, #7]
 8009a26:	e045      	b.n	8009ab4 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fd36 	bl	800849c <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8009a30:	79fa      	ldrb	r2, [r7, #7]
 8009a32:	4926      	ldr	r1, [pc, #152]	; (8009acc <Check_All_Peers+0xb0>)
 8009a34:	4613      	mov	r3, r2
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	3304      	adds	r3, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f006 fcd8 	bl	80103f8 <HAL_Elaps_Ticks>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	4920      	ldr	r1, [pc, #128]	; (8009ad0 <Check_All_Peers+0xb4>)
 8009a4e:	338a      	adds	r3, #138	; 0x8a
 8009a50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d92a      	bls.n	8009aae <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 8009a58:	79fa      	ldrb	r2, [r7, #7]
 8009a5a:	491c      	ldr	r1, [pc, #112]	; (8009acc <Check_All_Peers+0xb0>)
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	4413      	add	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	440b      	add	r3, r1
 8009a66:	3301      	adds	r3, #1
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d11f      	bne.n	8009aae <Check_All_Peers+0x92>
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	4a18      	ldr	r2, [pc, #96]	; (8009ad4 <Check_All_Peers+0xb8>)
 8009a72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a76:	79fa      	ldrb	r2, [r7, #7]
 8009a78:	4814      	ldr	r0, [pc, #80]	; (8009acc <Check_All_Peers+0xb0>)
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4403      	add	r3, r0
 8009a84:	3304      	adds	r3, #4
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4299      	cmp	r1, r3
 8009a8a:	d010      	beq.n	8009aae <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = RESET;
 8009a8c:	79fa      	ldrb	r2, [r7, #7]
 8009a8e:	490f      	ldr	r1, [pc, #60]	; (8009acc <Check_All_Peers+0xb0>)
 8009a90:	4613      	mov	r3, r2
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	440b      	add	r3, r1
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8009aa0:	79fc      	ldrb	r4, [r7, #7]
 8009aa2:	f00f ffc5 	bl	8019a30 <HAL_GetTick>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4a0a      	ldr	r2, [pc, #40]	; (8009ad4 <Check_All_Peers+0xb8>)
 8009aaa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	71fb      	strb	r3, [r7, #7]
 8009ab4:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <Check_All_Peers+0xb4>)
 8009ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009aba:	79fa      	ldrb	r2, [r7, #7]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d3b3      	bcc.n	8009a28 <Check_All_Peers+0xc>
			}
		}
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd90      	pop	{r4, r7, pc}
 8009aca:	bf00      	nop
 8009acc:	200033f8 	.word	0x200033f8
 8009ad0:	20000504 	.word	0x20000504
 8009ad4:	20003850 	.word	0x20003850

08009ad8 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8009ad8:	b590      	push	{r4, r7, lr}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009ade:	4976      	ldr	r1, [pc, #472]	; (8009cb8 <Check_for_RelayMisMatch+0x1e0>)
 8009ae0:	4876      	ldr	r0, [pc, #472]	; (8009cbc <Check_for_RelayMisMatch+0x1e4>)
 8009ae2:	f7f6 fbad 	bl	8000240 <strcmp>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 80e0 	beq.w	8009cae <Check_for_RelayMisMatch+0x1d6>
	{
		return;
	}

	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009aee:	2300      	movs	r3, #0
 8009af0:	71fb      	strb	r3, [r7, #7]
 8009af2:	e0d4      	b.n	8009c9e <Check_for_RelayMisMatch+0x1c6>
	{
		if(EI_data.Hitachi_st.Interface_Type[Traverser] == ETHERNET)
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	4a72      	ldr	r2, [pc, #456]	; (8009cc0 <Check_for_RelayMisMatch+0x1e8>)
 8009af8:	4413      	add	r3, r2
 8009afa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	f000 80c7 	beq.w	8009c92 <Check_for_RelayMisMatch+0x1ba>
		{
			continue;
		}

		if((HAL_Elaps_Ticks(Check_Clk[Traverser]) < FIVE_SEC ) || (MisMatchFlag[Traverser] == SET))
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	4a6f      	ldr	r2, [pc, #444]	; (8009cc4 <Check_for_RelayMisMatch+0x1ec>)
 8009b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f006 fc73 	bl	80103f8 <HAL_Elaps_Ticks>
 8009b12:	4603      	mov	r3, r0
 8009b14:	f241 3287 	movw	r2, #4999	; 0x1387
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d906      	bls.n	8009b2a <Check_for_RelayMisMatch+0x52>
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	4a6a      	ldr	r2, [pc, #424]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	f040 80ac 	bne.w	8009c82 <Check_for_RelayMisMatch+0x1aa>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (SelfLinkFlag[Traverser] == RESET))
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	4a67      	ldr	r2, [pc, #412]	; (8009ccc <Check_for_RelayMisMatch+0x1f4>)
 8009b2e:	5cd3      	ldrb	r3, [r2, r3]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d116      	bne.n	8009b62 <Check_for_RelayMisMatch+0x8a>
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	4a66      	ldr	r2, [pc, #408]	; (8009cd0 <Check_for_RelayMisMatch+0x1f8>)
 8009b38:	5cd3      	ldrb	r3, [r2, r3]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d111      	bne.n	8009b62 <Check_for_RelayMisMatch+0x8a>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8009b3e:	79fa      	ldrb	r2, [r7, #7]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4a62      	ldr	r2, [pc, #392]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009b4a:	1898      	adds	r0, r3, r2
 8009b4c:	79fa      	ldrb	r2, [r7, #7]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4a60      	ldr	r2, [pc, #384]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009b58:	4413      	add	r3, r2
 8009b5a:	2214      	movs	r2, #20
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	f01c fe61 	bl	8026824 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8009b62:	79fa      	ldrb	r2, [r7, #7]
 8009b64:	495b      	ldr	r1, [pc, #364]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	440b      	add	r3, r1
 8009b70:	3312      	adds	r3, #18
 8009b72:	8819      	ldrh	r1, [r3, #0]
 8009b74:	79fa      	ldrb	r2, [r7, #7]
 8009b76:	4858      	ldr	r0, [pc, #352]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4403      	add	r3, r0
 8009b82:	3312      	adds	r3, #18
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	4299      	cmp	r1, r3
 8009b88:	d076      	beq.n	8009c78 <Check_for_RelayMisMatch+0x1a0>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	4a53      	ldr	r2, [pc, #332]	; (8009cdc <Check_for_RelayMisMatch+0x204>)
 8009b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f006 fc30 	bl	80103f8 <HAL_Elaps_Ticks>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b9e:	d37a      	bcc.n	8009c96 <Check_for_RelayMisMatch+0x1be>
				{
					continue;
				}
				else
				{
					MisMatchFlag[Traverser] = SET;
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	4a49      	ldr	r2, [pc, #292]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if( ((Main_Relays_st[Traverser].RelayIPS_CRC == 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC != 0)) || ((Main_Relays_st[Traverser].RelayIPS_CRC != 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC == 0)) )
 8009baa:	79fa      	ldrb	r2, [r7, #7]
 8009bac:	4949      	ldr	r1, [pc, #292]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009bae:	4613      	mov	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	440b      	add	r3, r1
 8009bb8:	3312      	adds	r3, #18
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <Check_for_RelayMisMatch+0xfe>
 8009bc0:	79fa      	ldrb	r2, [r7, #7]
 8009bc2:	4945      	ldr	r1, [pc, #276]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	440b      	add	r3, r1
 8009bce:	3312      	adds	r3, #18
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d115      	bne.n	8009c02 <Check_for_RelayMisMatch+0x12a>
 8009bd6:	79fa      	ldrb	r2, [r7, #7]
 8009bd8:	493e      	ldr	r1, [pc, #248]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	440b      	add	r3, r1
 8009be4:	3312      	adds	r3, #18
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00f      	beq.n	8009c0c <Check_for_RelayMisMatch+0x134>
 8009bec:	79fa      	ldrb	r2, [r7, #7]
 8009bee:	493a      	ldr	r1, [pc, #232]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	440b      	add	r3, r1
 8009bfa:	3312      	adds	r3, #18
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d104      	bne.n	8009c0c <Check_for_RelayMisMatch+0x134>
					{
						MisMatchFlag[Traverser] = RESET;
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	4a30      	ldr	r2, [pc, #192]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009c06:	2100      	movs	r1, #0
 8009c08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(MisMatchFlag[Traverser] ==  SET)
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	4a2e      	ldr	r2, [pc, #184]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d134      	bne.n	8009c82 <Check_for_RelayMisMatch+0x1aa>
					{
						printf("S:%u|O:%u\n",SelfLinkFlag[Traverser],OtherCardLink_Flag[Traverser]);
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	4a2d      	ldr	r2, [pc, #180]	; (8009cd0 <Check_for_RelayMisMatch+0x1f8>)
 8009c1c:	5cd3      	ldrb	r3, [r2, r3]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	4a2a      	ldr	r2, [pc, #168]	; (8009ccc <Check_for_RelayMisMatch+0x1f4>)
 8009c24:	5cd3      	ldrb	r3, [r2, r3]
 8009c26:	461a      	mov	r2, r3
 8009c28:	482d      	ldr	r0, [pc, #180]	; (8009ce0 <Check_for_RelayMisMatch+0x208>)
 8009c2a:	f01c ff0b 	bl	8026a44 <iprintf>
						printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8009c2e:	79fb      	ldrb	r3, [r7, #7]
 8009c30:	4a23      	ldr	r2, [pc, #140]	; (8009cc0 <Check_for_RelayMisMatch+0x1e8>)
 8009c32:	3366      	adds	r3, #102	; 0x66
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4829      	ldr	r0, [pc, #164]	; (8009ce4 <Check_for_RelayMisMatch+0x20c>)
 8009c3e:	f01c ff01 	bl	8026a44 <iprintf>
						printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8009c42:	79fa      	ldrb	r2, [r7, #7]
 8009c44:	4923      	ldr	r1, [pc, #140]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009c46:	4613      	mov	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	440b      	add	r3, r1
 8009c50:	3312      	adds	r3, #18
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	4619      	mov	r1, r3
 8009c56:	4824      	ldr	r0, [pc, #144]	; (8009ce8 <Check_for_RelayMisMatch+0x210>)
 8009c58:	f01c fef4 	bl	8026a44 <iprintf>
						printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8009c5c:	79fa      	ldrb	r2, [r7, #7]
 8009c5e:	491e      	ldr	r1, [pc, #120]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	3312      	adds	r3, #18
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	481e      	ldr	r0, [pc, #120]	; (8009cec <Check_for_RelayMisMatch+0x214>)
 8009c72:	f01c fee7 	bl	8026a44 <iprintf>
 8009c76:	e004      	b.n	8009c82 <Check_for_RelayMisMatch+0x1aa>
					}
				}
			}
			else
			{
				MisMatchFlag[Traverser] = RESET; /* If both Relay CRC is Matching MisMatch will be RESET */
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	4a13      	ldr	r2, [pc, #76]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
		Check_Clk[Traverser] = HAL_GetTick();
 8009c82:	79fc      	ldrb	r4, [r7, #7]
 8009c84:	f00f fed4 	bl	8019a30 <HAL_GetTick>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	4a0e      	ldr	r2, [pc, #56]	; (8009cc4 <Check_for_RelayMisMatch+0x1ec>)
 8009c8c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009c90:	e002      	b.n	8009c98 <Check_for_RelayMisMatch+0x1c0>
			continue;
 8009c92:	bf00      	nop
 8009c94:	e000      	b.n	8009c98 <Check_for_RelayMisMatch+0x1c0>
					continue;
 8009c96:	bf00      	nop
	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	71fb      	strb	r3, [r7, #7]
 8009c9e:	4b08      	ldr	r3, [pc, #32]	; (8009cc0 <Check_for_RelayMisMatch+0x1e8>)
 8009ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ca4:	79fa      	ldrb	r2, [r7, #7]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	f4ff af24 	bcc.w	8009af4 <Check_for_RelayMisMatch+0x1c>
 8009cac:	e000      	b.n	8009cb0 <Check_for_RelayMisMatch+0x1d8>
		return;
 8009cae:	bf00      	nop
	}
}
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd90      	pop	{r4, r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	08028554 	.word	0x08028554
 8009cbc:	20000505 	.word	0x20000505
 8009cc0:	20000504 	.word	0x20000504
 8009cc4:	20003878 	.word	0x20003878
 8009cc8:	20002550 	.word	0x20002550
 8009ccc:	200025fc 	.word	0x200025fc
 8009cd0:	200025f0 	.word	0x200025f0
 8009cd4:	200035b0 	.word	0x200035b0
 8009cd8:	20003678 	.word	0x20003678
 8009cdc:	20002564 	.word	0x20002564
 8009ce0:	08029a24 	.word	0x08029a24
 8009ce4:	08029a30 	.word	0x08029a30
 8009ce8:	08029a3c 	.word	0x08029a3c
 8009cec:	08029a4c 	.word	0x08029a4c

08009cf0 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8009cfa:	f00f fe99 	bl	8019a30 <HAL_GetTick>
 8009cfe:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8009d00:	79fa      	ldrb	r2, [r7, #7]
 8009d02:	4935      	ldr	r1, [pc, #212]	; (8009dd8 <CheckOtherLinkStatus+0xe8>)
 8009d04:	4613      	mov	r3, r2
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	4413      	add	r3, r2
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	440b      	add	r3, r1
 8009d0e:	3302      	adds	r3, #2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d11d      	bne.n	8009d52 <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	4930      	ldr	r1, [pc, #192]	; (8009ddc <CheckOtherLinkStatus+0xec>)
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8009d20:	79fa      	ldrb	r2, [r7, #7]
 8009d22:	492f      	ldr	r1, [pc, #188]	; (8009de0 <CheckOtherLinkStatus+0xf0>)
 8009d24:	4613      	mov	r3, r2
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	440b      	add	r3, r1
 8009d2e:	3304      	adds	r3, #4
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009d34:	79fa      	ldrb	r2, [r7, #7]
 8009d36:	492a      	ldr	r1, [pc, #168]	; (8009de0 <CheckOtherLinkStatus+0xf0>)
 8009d38:	4613      	mov	r3, r2
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	440b      	add	r3, r1
 8009d42:	3301      	adds	r3, #1
 8009d44:	2201      	movs	r2, #1
 8009d46:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	4a26      	ldr	r2, [pc, #152]	; (8009de4 <CheckOtherLinkStatus+0xf4>)
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	54d1      	strb	r1, [r2, r3]
 8009d50:	e02e      	b.n	8009db0 <CheckOtherLinkStatus+0xc0>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = RESET;
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	4a23      	ldr	r2, [pc, #140]	; (8009de4 <CheckOtherLinkStatus+0xf4>)
 8009d56:	2100      	movs	r1, #0
 8009d58:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 8009d5a:	79fa      	ldrb	r2, [r7, #7]
 8009d5c:	4920      	ldr	r1, [pc, #128]	; (8009de0 <CheckOtherLinkStatus+0xf0>)
 8009d5e:	4613      	mov	r3, r2
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	440b      	add	r3, r1
 8009d68:	3308      	adds	r3, #8
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = RESET;
 8009d6e:	79fa      	ldrb	r2, [r7, #7]
 8009d70:	491b      	ldr	r1, [pc, #108]	; (8009de0 <CheckOtherLinkStatus+0xf0>)
 8009d72:	4613      	mov	r3, r2
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	4413      	add	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	440b      	add	r3, r1
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
		OtherCard_Relays_st[SourceIndex].RelayIPS_CRC = 0;
 8009d82:	79fa      	ldrb	r2, [r7, #7]
 8009d84:	4918      	ldr	r1, [pc, #96]	; (8009de8 <CheckOtherLinkStatus+0xf8>)
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	3312      	adds	r3, #18
 8009d92:	2200      	movs	r2, #0
 8009d94:	801a      	strh	r2, [r3, #0]
		memset(&OtherCard_Relays_st[SourceIndex].RelayIPS_Buff,0,sizeof(OtherCard_Relays_st[SourceIndex].RelayIPS_Buff));
 8009d96:	79fa      	ldrb	r2, [r7, #7]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4a11      	ldr	r2, [pc, #68]	; (8009de8 <CheckOtherLinkStatus+0xf8>)
 8009da2:	4413      	add	r3, r2
 8009da4:	3301      	adds	r3, #1
 8009da6:	2210      	movs	r2, #16
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f01c fd62 	bl	8026874 <memset>
	}

	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 8009db0:	79fa      	ldrb	r2, [r7, #7]
 8009db2:	4909      	ldr	r1, [pc, #36]	; (8009dd8 <CheckOtherLinkStatus+0xe8>)
 8009db4:	4613      	mov	r3, r2
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	4413      	add	r3, r2
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	440b      	add	r3, r1
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d104      	bne.n	8009dd0 <CheckOtherLinkStatus+0xe0>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	4908      	ldr	r1, [pc, #32]	; (8009dec <CheckOtherLinkStatus+0xfc>)
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8009dd0:	bf00      	nop
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20002e94 	.word	0x20002e94
 8009ddc:	200025c8 	.word	0x200025c8
 8009de0:	20003470 	.word	0x20003470
 8009de4:	200025fc 	.word	0x200025fc
 8009de8:	20003678 	.word	0x20003678
 8009dec:	20002510 	.word	0x20002510

08009df0 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009df4:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <SendRelay2_Other+0x70>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f006 fafd 	bl	80103f8 <HAL_Elaps_Ticks>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e04:	d92a      	bls.n	8009e5c <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8009e06:	2214      	movs	r2, #20
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4816      	ldr	r0, [pc, #88]	; (8009e64 <SendRelay2_Other+0x74>)
 8009e0c:	f01c fd32 	bl	8026874 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8009e10:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4a13      	ldr	r2, [pc, #76]	; (8009e6c <SendRelay2_Other+0x7c>)
 8009e1e:	4413      	add	r3, r2
 8009e20:	2214      	movs	r2, #20
 8009e22:	4619      	mov	r1, r3
 8009e24:	480f      	ldr	r0, [pc, #60]	; (8009e64 <SendRelay2_Other+0x74>)
 8009e26:	f01c fcfd 	bl	8026824 <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009e2a:	f240 2007 	movw	r0, #519	; 0x207
 8009e2e:	f007 f897 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 8009e32:	4b0d      	ldr	r3, [pc, #52]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3301      	adds	r3, #1
 8009e38:	4a0b      	ldr	r2, [pc, #44]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e3a:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8009e3c:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <SendRelay2_Other+0x80>)
 8009e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e42:	461a      	mov	r2, r3
 8009e44:	4b08      	ldr	r3, [pc, #32]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d102      	bne.n	8009e52 <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8009e4c:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8009e52:	f00f fded 	bl	8019a30 <HAL_GetTick>
 8009e56:	4603      	mov	r3, r0
 8009e58:	4a01      	ldr	r2, [pc, #4]	; (8009e60 <SendRelay2_Other+0x70>)
 8009e5a:	6013      	str	r3, [r2, #0]
	}
}
 8009e5c:	bf00      	nop
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	200038a0 	.word	0x200038a0
 8009e64:	20003740 	.word	0x20003740
 8009e68:	200038a4 	.word	0x200038a4
 8009e6c:	200035b0 	.word	0x200035b0
 8009e70:	20000504 	.word	0x20000504

08009e74 <Process_HitachiEI>:




void Process_HitachiEI(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
	while(1)
	{
		process_to_comReceived();
 8009e78:	f7f7 fa3a 	bl	80012f0 <process_to_comReceived>

		Check_OnlineDiag_OFC_Modem();
 8009e7c:	f7f7 f8a2 	bl	8000fc4 <Check_OnlineDiag_OFC_Modem>

		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009e80:	f017 f8c4 	bl	802100c <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8009e84:	481b      	ldr	r0, [pc, #108]	; (8009ef4 <Process_HitachiEI+0x80>)
 8009e86:	f013 f939 	bl	801d0fc <HAL_IWDG_Refresh>

		Feed_wdt();
 8009e8a:	f00c fad9 	bl	8016440 <Feed_wdt>

		readCanToStructs();
 8009e8e:	f007 fe3f 	bl	8011b10 <readCanToStructs>

		Check_for_cmd();
 8009e92:	f7f6 fe61 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 8009e96:	f7f7 fbd5 	bl	8001644 <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 8009e9a:	f7f7 fc41 	bl	8001720 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8009e9e:	f7fe fe01 	bl	8008aa4 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 8009ea2:	f7fe fd27 	bl	80088f4 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 8009ea6:	f7fe fd91 	bl	80089cc <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 8009eaa:	f7fe fc93 	bl	80087d4 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8009eae:	f7ff fdb5 	bl	8009a1c <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 8009eb2:	f7ff fc6b 	bl	800978c <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 8009eb6:	f7ff fbef 	bl	8009698 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8009eba:	f7ff fcb7 	bl	800982c <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8009ebe:	f002 fe77 	bl	800cbb0 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 8009ec2:	f7ff fe09 	bl	8009ad8 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 8009ec6:	f7ff ff93 	bl	8009df0 <SendRelay2_Other>

		Print_BuildDat_Details();
 8009eca:	f00e fd37 	bl	801893c <Print_BuildDat_Details>

		CheckEIPC_DAT_CRC();
 8009ece:	f7f7 f83d 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 8009ed2:	4b09      	ldr	r3, [pc, #36]	; (8009ef8 <Process_HitachiEI+0x84>)
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <Process_HitachiEI+0x6e>
		{
			gucFlagUpdate = 3;
 8009eda:	4b08      	ldr	r3, [pc, #32]	; (8009efc <Process_HitachiEI+0x88>)
 8009edc:	2203      	movs	r2, #3
 8009ede:	701a      	strb	r2, [r3, #0]
			break;
 8009ee0:	e002      	b.n	8009ee8 <Process_HitachiEI+0x74>
		}

		Enable_UART_Interrupts();
 8009ee2:	f00f fb93 	bl	801960c <Enable_UART_Interrupts>
		process_to_comReceived();
 8009ee6:	e7c7      	b.n	8009e78 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8009ee8:	f00e fc26 	bl	8018738 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009eec:	4801      	ldr	r0, [pc, #4]	; (8009ef4 <Process_HitachiEI+0x80>)
 8009eee:	f013 f905 	bl	801d0fc <HAL_IWDG_Refresh>
		Data_Processing();
 8009ef2:	e7f9      	b.n	8009ee8 <Process_HitachiEI+0x74>
 8009ef4:	2000b46c 	.word	0x2000b46c
 8009ef8:	20000bba 	.word	0x20000bba
 8009efc:	20000fbd 	.word	0x20000fbd

08009f00 <ReAssignData>:

#endif


void ReAssignData(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	f5ad 6dd7 	sub.w	sp, sp, #1720	; 0x6b8
 8009f06:	af00      	add	r7, sp, #0
	EI_t EI_dataTempEthernet,EI_dataTempSerial;
	uint8_t PeerTraverser = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
	bool SerialFlag = RESET;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
	bool OrderOKFlag = SET;
 8009f14:	2301      	movs	r3, #1
 8009f16:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	uint8_t EthernetIndex = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
	uint8_t SerialIndex = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3



	printf("EI_data.Hitachi_st.EnableSerialPort:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009f26:	4b8d      	ldr	r3, [pc, #564]	; (800a15c <ReAssignData+0x25c>)
 8009f28:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	488c      	ldr	r0, [pc, #560]	; (800a160 <ReAssignData+0x260>)
 8009f30:	f01c fd88 	bl	8026a44 <iprintf>
	if(EI_data.Hitachi_st.EnableSerialPort <= 0)
 8009f34:	4b89      	ldr	r3, [pc, #548]	; (800a15c <ReAssignData+0x25c>)
 8009f36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 83d8 	beq.w	800a6f0 <ReAssignData+0x7f0>
	{
		return;
	}

	memset(&EI_dataTempEthernet,0,sizeof(EI_t));
 8009f40:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8009f44:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f01c fc92 	bl	8026874 <memset>
	memset(&EI_dataTempSerial,0,sizeof(EI_t));
 8009f50:	463b      	mov	r3, r7
 8009f52:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f01c fc8b 	bl	8026874 <memset>


	/* Check whether the order is valid */
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009f64:	e026      	b.n	8009fb4 <ReAssignData+0xb4>
	{
		if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 8009f66:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f6a:	4a7c      	ldr	r2, [pc, #496]	; (800a15c <ReAssignData+0x25c>)
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d103      	bne.n	8009f7e <ReAssignData+0x7e>
		{
			SerialFlag = SET;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
 8009f7c:	e015      	b.n	8009faa <ReAssignData+0xaa>
		}
		else if ((EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET) && (SerialFlag == SET))
 8009f7e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f82:	4a76      	ldr	r2, [pc, #472]	; (800a15c <ReAssignData+0x25c>)
 8009f84:	4413      	add	r3, r2
 8009f86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d10d      	bne.n	8009faa <ReAssignData+0xaa>
 8009f8e:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d009      	beq.n	8009faa <ReAssignData+0xaa>
		{
			printf("EI_data.Hitachi_st.EnableSerialPort11111111111:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009f96:	4b71      	ldr	r3, [pc, #452]	; (800a15c <ReAssignData+0x25c>)
 8009f98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4871      	ldr	r0, [pc, #452]	; (800a164 <ReAssignData+0x264>)
 8009fa0:	f01c fd50 	bl	8026a44 <iprintf>
			OrderOKFlag = RESET;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009faa:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009fae:	3301      	adds	r3, #1
 8009fb0:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009fb4:	4b69      	ldr	r3, [pc, #420]	; (800a15c <ReAssignData+0x25c>)
 8009fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fba:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d3d1      	bcc.n	8009f66 <ReAssignData+0x66>
		}
	}

	if(OrderOKFlag == RESET)
 8009fc2:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8009fc6:	f083 0301 	eor.w	r3, r3, #1
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 838b 	beq.w	800a6e8 <ReAssignData+0x7e8>
	{
		memcpy(&EI_BeforeReorderData,&EI_data,sizeof(EI_t));
 8009fd2:	4a65      	ldr	r2, [pc, #404]	; (800a168 <ReAssignData+0x268>)
 8009fd4:	4b61      	ldr	r3, [pc, #388]	; (800a15c <ReAssignData+0x25c>)
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	4619      	mov	r1, r3
 8009fda:	f44f 7356 	mov.w	r3, #856	; 0x358
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f01c fc20 	bl	8026824 <memcpy>
		ReorderFlag = SET;
 8009fe4:	4b61      	ldr	r3, [pc, #388]	; (800a16c <ReAssignData+0x26c>)
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	701a      	strb	r2, [r3, #0]
		printf("\n============================ CONFIG DATA IS NOT IN ORDER RE-ORDERING THE DATA ============================\n");
 8009fea:	4861      	ldr	r0, [pc, #388]	; (800a170 <ReAssignData+0x270>)
 8009fec:	f01c fdc6 	bl	8026b7c <puts>

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009ff6:	e172      	b.n	800a2de <ReAssignData+0x3de>
		{
			if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET)
 8009ff8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ffc:	4a57      	ldr	r2, [pc, #348]	; (800a15c <ReAssignData+0x25c>)
 8009ffe:	4413      	add	r3, r2
 800a000:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a004:	2b01      	cmp	r3, #1
 800a006:	f040 80b5 	bne.w	800a174 <ReAssignData+0x274>
			{
				EI_dataTempEthernet.Hitachi_st.ClockMaster[EthernetIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 800a00a:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a00e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a012:	4952      	ldr	r1, [pc, #328]	; (800a15c <ReAssignData+0x25c>)
 800a014:	440a      	add	r2, r1
 800a016:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a01a:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a01e:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a022:	4413      	add	r3, r2
 800a024:	460a      	mov	r2, r1
 800a026:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempEthernet.Hitachi_st.Interface_Type[EthernetIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 800a02a:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a02e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a032:	494a      	ldr	r1, [pc, #296]	; (800a15c <ReAssignData+0x25c>)
 800a034:	440a      	add	r2, r1
 800a036:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a03a:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a03e:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a042:	4413      	add	r3, r2
 800a044:	460a      	mov	r2, r1
 800a046:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a04a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a04e:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 800a052:	4a42      	ldr	r2, [pc, #264]	; (800a15c <ReAssignData+0x25c>)
 800a054:	3366      	adds	r3, #102	; 0x66
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a060:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 800a064:	f100 0366 	add.w	r3, r0, #102	; 0x66
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a06e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a072:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 800a076:	4a39      	ldr	r2, [pc, #228]	; (800a15c <ReAssignData+0x25c>)
 800a078:	3370      	adds	r3, #112	; 0x70
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a084:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 800a088:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	440b      	add	r3, r1
 800a090:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a092:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a096:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a09a:	4a30      	ldr	r2, [pc, #192]	; (800a15c <ReAssignData+0x25c>)
 800a09c:	33f4      	adds	r3, #244	; 0xf4
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	4413      	add	r3, r2
 800a0a2:	8898      	ldrh	r0, [r3, #4]
 800a0a4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a0a8:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a0ac:	f101 03f4 	add.w	r3, r1, #244	; 0xf4
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	4413      	add	r3, r2
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	809a      	strh	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.Bool_outputs[EthernetIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 800a0b8:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a0bc:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a0c0:	4926      	ldr	r1, [pc, #152]	; (800a15c <ReAssignData+0x25c>)
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a0c8:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a0cc:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a0d0:	4413      	add	r3, r2
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a0d8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0dc:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a0e0:	491e      	ldr	r1, [pc, #120]	; (800a15c <ReAssignData+0x25c>)
 800a0e2:	338a      	adds	r3, #138	; 0x8a
 800a0e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a0e8:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a0ec:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a0f0:	328a      	adds	r2, #138	; 0x8a
 800a0f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a0f6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0fa:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a0fe:	4917      	ldr	r1, [pc, #92]	; (800a15c <ReAssignData+0x25c>)
 800a100:	3394      	adds	r3, #148	; 0x94
 800a102:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a106:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a10a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a10e:	3294      	adds	r2, #148	; 0x94
 800a110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a114:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a118:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a11c:	490f      	ldr	r1, [pc, #60]	; (800a15c <ReAssignData+0x25c>)
 800a11e:	339e      	adds	r3, #158	; 0x9e
 800a120:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a124:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a128:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a12c:	329e      	adds	r2, #158	; 0x9e
 800a12e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempEthernet.Hitachi_st.PeersCnt;
 800a132:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a136:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a13a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a13e:	3301      	adds	r3, #1
 800a140:	b2da      	uxtb	r2, r3
 800a142:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a146:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a14a:	f883 2020 	strb.w	r2, [r3, #32]
				++EthernetIndex;
 800a14e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a152:	3301      	adds	r3, #1
 800a154:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
 800a158:	e0bc      	b.n	800a2d4 <ReAssignData+0x3d4>
 800a15a:	bf00      	nop
 800a15c:	20000504 	.word	0x20000504
 800a160:	08029a5c 	.word	0x08029a5c
 800a164:	08029a84 	.word	0x08029a84
 800a168:	2000085c 	.word	0x2000085c
 800a16c:	2000254e 	.word	0x2000254e
 800a170:	08029ab8 	.word	0x08029ab8
			}
			else if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 800a174:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a178:	4aa9      	ldr	r2, [pc, #676]	; (800a420 <ReAssignData+0x520>)
 800a17a:	4413      	add	r3, r2
 800a17c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a180:	2b02      	cmp	r3, #2
 800a182:	f040 80a7 	bne.w	800a2d4 <ReAssignData+0x3d4>
			{
				EI_dataTempSerial.Hitachi_st.ClockMaster[SerialIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 800a186:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a18a:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a18e:	49a4      	ldr	r1, [pc, #656]	; (800a420 <ReAssignData+0x520>)
 800a190:	440a      	add	r2, r1
 800a192:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a196:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a19a:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a19e:	4413      	add	r3, r2
 800a1a0:	460a      	mov	r2, r1
 800a1a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempSerial.Hitachi_st.Interface_Type[SerialIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 800a1a6:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a1aa:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a1ae:	499c      	ldr	r1, [pc, #624]	; (800a420 <ReAssignData+0x520>)
 800a1b0:	440a      	add	r2, r1
 800a1b2:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a1b6:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a1ba:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a1be:	4413      	add	r3, r2
 800a1c0:	460a      	mov	r2, r1
 800a1c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a1c6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a1ca:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 800a1ce:	4a94      	ldr	r2, [pc, #592]	; (800a420 <ReAssignData+0x520>)
 800a1d0:	3366      	adds	r3, #102	; 0x66
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a1dc:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 800a1e0:	f100 0366 	add.w	r3, r0, #102	; 0x66
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	440b      	add	r3, r1
 800a1e8:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a1ea:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a1ee:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 800a1f2:	4a8b      	ldr	r2, [pc, #556]	; (800a420 <ReAssignData+0x520>)
 800a1f4:	3370      	adds	r3, #112	; 0x70
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a200:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 800a204:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	440b      	add	r3, r1
 800a20c:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][SerialIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a20e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a212:	f897 16b3 	ldrb.w	r1, [r7, #1715]	; 0x6b3
 800a216:	4a82      	ldr	r2, [pc, #520]	; (800a420 <ReAssignData+0x520>)
 800a218:	33f4      	adds	r3, #244	; 0xf4
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	4413      	add	r3, r2
 800a21e:	8898      	ldrh	r0, [r3, #4]
 800a220:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a224:	f5a3 62d7 	sub.w	r2, r3, #1720	; 0x6b8
 800a228:	f101 03f4 	add.w	r3, r1, #244	; 0xf4
 800a22c:	005b      	lsls	r3, r3, #1
 800a22e:	4413      	add	r3, r2
 800a230:	4602      	mov	r2, r0
 800a232:	809a      	strh	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.Bool_outputs[SerialIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 800a234:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a238:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a23c:	4978      	ldr	r1, [pc, #480]	; (800a420 <ReAssignData+0x520>)
 800a23e:	440a      	add	r2, r1
 800a240:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a244:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a248:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a24c:	4413      	add	r3, r2
 800a24e:	460a      	mov	r2, r1
 800a250:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a254:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a258:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800a25c:	4970      	ldr	r1, [pc, #448]	; (800a420 <ReAssignData+0x520>)
 800a25e:	338a      	adds	r3, #138	; 0x8a
 800a260:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a264:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a268:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a26c:	328a      	adds	r2, #138	; 0x8a
 800a26e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a272:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a276:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800a27a:	4969      	ldr	r1, [pc, #420]	; (800a420 <ReAssignData+0x520>)
 800a27c:	3394      	adds	r3, #148	; 0x94
 800a27e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a282:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a286:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a28a:	3294      	adds	r2, #148	; 0x94
 800a28c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[SerialIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a290:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a294:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800a298:	4961      	ldr	r1, [pc, #388]	; (800a420 <ReAssignData+0x520>)
 800a29a:	339e      	adds	r3, #158	; 0x9e
 800a29c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a2a0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2a4:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a2a8:	329e      	adds	r2, #158	; 0x9e
 800a2aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempSerial.Hitachi_st.PeersCnt;
 800a2ae:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2b2:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a2b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2c2:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a2c6:	f883 2020 	strb.w	r2, [r3, #32]
				++SerialIndex;
 800a2ca:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 800a2d4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a2d8:	3301      	adds	r3, #1
 800a2da:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a2de:	4b50      	ldr	r3, [pc, #320]	; (800a420 <ReAssignData+0x520>)
 800a2e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2e4:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	f4ff ae85 	bcc.w	8009ff8 <ReAssignData+0xf8>
			}
		}

		EthernetIndex = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		SerialIndex = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a300:	e077      	b.n	800a3f2 <ReAssignData+0x4f2>
		{
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][0] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][0];
 800a302:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a306:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a30a:	4a45      	ldr	r2, [pc, #276]	; (800a420 <ReAssignData+0x520>)
 800a30c:	3312      	adds	r3, #18
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	78d8      	ldrb	r0, [r3, #3]
 800a314:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a318:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a31c:	f101 0312 	add.w	r3, r1, #18
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	4602      	mov	r2, r0
 800a326:	70da      	strb	r2, [r3, #3]
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][1] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][1];
 800a328:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a32c:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a330:	4a3b      	ldr	r2, [pc, #236]	; (800a420 <ReAssignData+0x520>)
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 800a33a:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a33e:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a342:	008b      	lsls	r3, r1, #2
 800a344:	4413      	add	r3, r2
 800a346:	4602      	mov	r2, r0
 800a348:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][2] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][2];
 800a34c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a350:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a354:	4a32      	ldr	r2, [pc, #200]	; (800a420 <ReAssignData+0x520>)
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 800a35e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a362:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a366:	008b      	lsls	r3, r1, #2
 800a368:	4413      	add	r3, r2
 800a36a:	4602      	mov	r2, r0
 800a36c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][3] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][3];
 800a370:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a374:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a378:	4a29      	ldr	r2, [pc, #164]	; (800a420 <ReAssignData+0x520>)
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
 800a382:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a386:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a38a:	008b      	lsls	r3, r1, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	4602      	mov	r2, r0
 800a390:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][TX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][TX_PORT];
 800a394:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a398:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a39c:	4a20      	ldr	r2, [pc, #128]	; (800a420 <ReAssignData+0x520>)
 800a39e:	333e      	adds	r3, #62	; 0x3e
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	8858      	ldrh	r0, [r3, #2]
 800a3a6:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a3aa:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a3ae:	f101 033e 	add.w	r3, r1, #62	; 0x3e
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	805a      	strh	r2, [r3, #2]
			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][RX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][RX_PORT];
 800a3ba:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a3be:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a3c2:	4a17      	ldr	r2, [pc, #92]	; (800a420 <ReAssignData+0x520>)
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f8b3 00fc 	ldrh.w	r0, [r3, #252]	; 0xfc
 800a3cc:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a3d0:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a3d4:	008b      	lsls	r3, r1, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	4602      	mov	r2, r0
 800a3da:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
			++EthernetIndex;
 800a3de:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 800a3e8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a3f2:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <ReAssignData+0x520>)
 800a3f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a3f8:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d380      	bcc.n	800a302 <ReAssignData+0x402>
		}


		EthernetIndex = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		if(EI_dataTempEthernet.Hitachi_st.PeersCnt > 0)
 800a406:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a40a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a40e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 80af 	beq.w	800a576 <ReAssignData+0x676>
		{
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a418:	2300      	movs	r3, #0
 800a41a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a41e:	e09f      	b.n	800a560 <ReAssignData+0x660>
 800a420:	20000504 	.word	0x20000504
			{
				EI_data.Hitachi_st.ClockMaster[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.ClockMaster[PeerTraverser];
 800a424:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a428:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a42c:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a430:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a434:	440a      	add	r2, r1
 800a436:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a43a:	4ab0      	ldr	r2, [pc, #704]	; (800a6fc <ReAssignData+0x7fc>)
 800a43c:	4413      	add	r3, r2
 800a43e:	460a      	mov	r2, r1
 800a440:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Interface_Type[PeerTraverser];
 800a444:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a448:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a44c:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a450:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a454:	440a      	add	r2, r1
 800a456:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a45a:	4aa8      	ldr	r2, [pc, #672]	; (800a6fc <ReAssignData+0x7fc>)
 800a45c:	4413      	add	r3, r2
 800a45e:	460a      	mov	r2, r1
 800a460:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a464:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a468:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a46c:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a470:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a474:	3366      	adds	r3, #102	; 0x66
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	489f      	ldr	r0, [pc, #636]	; (800a6fc <ReAssignData+0x7fc>)
 800a47e:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4403      	add	r3, r0
 800a486:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a488:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a48c:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a490:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a494:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a498:	3370      	adds	r3, #112	; 0x70
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	4896      	ldr	r0, [pc, #600]	; (800a6fc <ReAssignData+0x7fc>)
 800a4a2:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4403      	add	r3, r0
 800a4aa:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser] = EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a4ac:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a4b0:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a4b4:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a4b8:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a4bc:	33f4      	adds	r3, #244	; 0xf4
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	440b      	add	r3, r1
 800a4c2:	8898      	ldrh	r0, [r3, #4]
 800a4c4:	498d      	ldr	r1, [pc, #564]	; (800a6fc <ReAssignData+0x7fc>)
 800a4c6:	f102 03f4 	add.w	r3, r2, #244	; 0xf4
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	440b      	add	r3, r1
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Bool_outputs[PeerTraverser];
 800a4d2:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a4d6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a4da:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a4de:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a4e2:	440a      	add	r2, r1
 800a4e4:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a4e8:	4a84      	ldr	r2, [pc, #528]	; (800a6fc <ReAssignData+0x7fc>)
 800a4ea:	4413      	add	r3, r2
 800a4ec:	460a      	mov	r2, r1
 800a4ee:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a4f2:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a4f6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a4fa:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a4fe:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a502:	318a      	adds	r1, #138	; 0x8a
 800a504:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a508:	497c      	ldr	r1, [pc, #496]	; (800a6fc <ReAssignData+0x7fc>)
 800a50a:	338a      	adds	r3, #138	; 0x8a
 800a50c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a510:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a514:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a518:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a51c:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a520:	3194      	adds	r1, #148	; 0x94
 800a522:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a526:	4975      	ldr	r1, [pc, #468]	; (800a6fc <ReAssignData+0x7fc>)
 800a528:	3394      	adds	r3, #148	; 0x94
 800a52a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a52e:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a532:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a536:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a53a:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a53e:	319e      	adds	r1, #158	; 0x9e
 800a540:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a544:	496d      	ldr	r1, [pc, #436]	; (800a6fc <ReAssignData+0x7fc>)
 800a546:	339e      	adds	r3, #158	; 0x9e
 800a548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a54c:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a550:	3301      	adds	r3, #1
 800a552:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a556:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a55a:	3301      	adds	r3, #1
 800a55c:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a560:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a564:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a56c:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a570:	429a      	cmp	r2, r3
 800a572:	f4ff af57 	bcc.w	800a424 <ReAssignData+0x524>
			}
		}
		if(EI_dataTempSerial.Hitachi_st.PeersCnt > 0)
 800a576:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a57a:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a57e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 80ad 	beq.w	800a6e2 <ReAssignData+0x7e2>
		{
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a588:	2300      	movs	r3, #0
 800a58a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a58e:	e09d      	b.n	800a6cc <ReAssignData+0x7cc>
			{
				EI_data.Hitachi_st.ClockMaster[EthernetIndex] = EI_dataTempSerial.Hitachi_st.ClockMaster[PeerTraverser];
 800a590:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a594:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a598:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a59c:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a5a0:	440a      	add	r2, r1
 800a5a2:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a5a6:	4a55      	ldr	r2, [pc, #340]	; (800a6fc <ReAssignData+0x7fc>)
 800a5a8:	4413      	add	r3, r2
 800a5aa:	460a      	mov	r2, r1
 800a5ac:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Interface_Type[PeerTraverser];
 800a5b0:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a5b4:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a5b8:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a5bc:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a5c0:	440a      	add	r2, r1
 800a5c2:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a5c6:	4a4d      	ldr	r2, [pc, #308]	; (800a6fc <ReAssignData+0x7fc>)
 800a5c8:	4413      	add	r3, r2
 800a5ca:	460a      	mov	r2, r1
 800a5cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a5d0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a5d4:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a5d8:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a5dc:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a5e0:	3366      	adds	r3, #102	; 0x66
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	4844      	ldr	r0, [pc, #272]	; (800a6fc <ReAssignData+0x7fc>)
 800a5ea:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4403      	add	r3, r0
 800a5f2:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a5f4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a5f8:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a5fc:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a600:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a604:	3370      	adds	r3, #112	; 0x70
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	483b      	ldr	r0, [pc, #236]	; (800a6fc <ReAssignData+0x7fc>)
 800a60e:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4403      	add	r3, r0
 800a616:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a618:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a61c:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a620:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a624:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a628:	33f4      	adds	r3, #244	; 0xf4
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	440b      	add	r3, r1
 800a62e:	8898      	ldrh	r0, [r3, #4]
 800a630:	4932      	ldr	r1, [pc, #200]	; (800a6fc <ReAssignData+0x7fc>)
 800a632:	f102 03f4 	add.w	r3, r2, #244	; 0xf4
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	440b      	add	r3, r1
 800a63a:	4602      	mov	r2, r0
 800a63c:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Bool_outputs[PeerTraverser];
 800a63e:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a642:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a646:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a64a:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a64e:	440a      	add	r2, r1
 800a650:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a654:	4a29      	ldr	r2, [pc, #164]	; (800a6fc <ReAssignData+0x7fc>)
 800a656:	4413      	add	r3, r2
 800a658:	460a      	mov	r2, r1
 800a65a:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a65e:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a662:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a666:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a66a:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a66e:	318a      	adds	r1, #138	; 0x8a
 800a670:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a674:	4921      	ldr	r1, [pc, #132]	; (800a6fc <ReAssignData+0x7fc>)
 800a676:	338a      	adds	r3, #138	; 0x8a
 800a678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a67c:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a680:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a684:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a688:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a68c:	3194      	adds	r1, #148	; 0x94
 800a68e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a692:	491a      	ldr	r1, [pc, #104]	; (800a6fc <ReAssignData+0x7fc>)
 800a694:	3394      	adds	r3, #148	; 0x94
 800a696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a69a:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a69e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a6a2:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a6a6:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a6aa:	319e      	adds	r1, #158	; 0x9e
 800a6ac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a6b0:	4912      	ldr	r1, [pc, #72]	; (800a6fc <ReAssignData+0x7fc>)
 800a6b2:	339e      	adds	r3, #158	; 0x9e
 800a6b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a6b8:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a6bc:	3301      	adds	r3, #1
 800a6be:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a6c2:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a6cc:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a6d0:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a6d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6d8:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	f4ff af57 	bcc.w	800a590 <ReAssignData+0x690>

			}
		}

		print_self_Details_Hitachi();
 800a6e2:	f7fe fe83 	bl	80093ec <print_self_Details_Hitachi>
 800a6e6:	e004      	b.n	800a6f2 <ReAssignData+0x7f2>

	}
	else
	{
		printf("\nNo PROBLEM Found\n");
 800a6e8:	4805      	ldr	r0, [pc, #20]	; (800a700 <ReAssignData+0x800>)
 800a6ea:	f01c fa47 	bl	8026b7c <puts>
 800a6ee:	e000      	b.n	800a6f2 <ReAssignData+0x7f2>
		return;
 800a6f0:	bf00      	nop
	}

}
 800a6f2:	f507 67d7 	add.w	r7, r7, #1720	; 0x6b8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000504 	.word	0x20000504
 800a700:	08029b24 	.word	0x08029b24

0800a704 <ReArrangedVitalData>:

void ReArrangedVitalData(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
	if(ReorderFlag == SET)
 800a70a:	4b23      	ldr	r3, [pc, #140]	; (800a798 <ReArrangedVitalData+0x94>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d13d      	bne.n	800a78e <ReArrangedVitalData+0x8a>
	{
		memset(&HitachiEI_DataReArranged_st,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 800a712:	22a2      	movs	r2, #162	; 0xa2
 800a714:	2100      	movs	r1, #0
 800a716:	4821      	ldr	r0, [pc, #132]	; (800a79c <ReArrangedVitalData+0x98>)
 800a718:	f01c f8ac 	bl	8026874 <memset>
		HitachiEI_DataReArranged_st.ActualDataBytes = vEI_Transver_EI_To_MIE.ActualDataBytes;
 800a71c:	4b20      	ldr	r3, [pc, #128]	; (800a7a0 <ReArrangedVitalData+0x9c>)
 800a71e:	881a      	ldrh	r2, [r3, #0]
 800a720:	4b1e      	ldr	r3, [pc, #120]	; (800a79c <ReArrangedVitalData+0x98>)
 800a722:	801a      	strh	r2, [r3, #0]

		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a724:	2300      	movs	r3, #0
 800a726:	71fb      	strb	r3, [r7, #7]
 800a728:	e02b      	b.n	800a782 <ReArrangedVitalData+0x7e>
		{
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a72a:	2300      	movs	r3, #0
 800a72c:	71bb      	strb	r3, [r7, #6]
 800a72e:	e01f      	b.n	800a770 <ReArrangedVitalData+0x6c>
			{
				if(EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser] == EI_BeforeReorderData.Hitachi_st.SOURCE_ADDRESSES[PeerFinder])
 800a730:	79fb      	ldrb	r3, [r7, #7]
 800a732:	4a1c      	ldr	r2, [pc, #112]	; (800a7a4 <ReArrangedVitalData+0xa0>)
 800a734:	3366      	adds	r3, #102	; 0x66
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	79bb      	ldrb	r3, [r7, #6]
 800a73e:	491a      	ldr	r1, [pc, #104]	; (800a7a8 <ReArrangedVitalData+0xa4>)
 800a740:	3366      	adds	r3, #102	; 0x66
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	440b      	add	r3, r1
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d10e      	bne.n	800a76a <ReArrangedVitalData+0x66>
				{
					memcpy(&HitachiEI_DataReArranged_st.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],&vEI_Transver_EI_To_MIE.Inputs[PeerFinder * MAX_OUTPUTS_PER_PEER],MAX_OUTPUTS_PER_PEER);
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	011b      	lsls	r3, r3, #4
 800a750:	4a12      	ldr	r2, [pc, #72]	; (800a79c <ReArrangedVitalData+0x98>)
 800a752:	4413      	add	r3, r2
 800a754:	1c98      	adds	r0, r3, #2
 800a756:	79bb      	ldrb	r3, [r7, #6]
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	4a11      	ldr	r2, [pc, #68]	; (800a7a0 <ReArrangedVitalData+0x9c>)
 800a75c:	4413      	add	r3, r2
 800a75e:	3302      	adds	r3, #2
 800a760:	2210      	movs	r2, #16
 800a762:	4619      	mov	r1, r3
 800a764:	f01c f85e 	bl	8026824 <memcpy>
					break;
 800a768:	e008      	b.n	800a77c <ReArrangedVitalData+0x78>
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a76a:	79bb      	ldrb	r3, [r7, #6]
 800a76c:	3301      	adds	r3, #1
 800a76e:	71bb      	strb	r3, [r7, #6]
 800a770:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <ReArrangedVitalData+0xa0>)
 800a772:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a776:	79ba      	ldrb	r2, [r7, #6]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d3d9      	bcc.n	800a730 <ReArrangedVitalData+0x2c>
		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a77c:	79fb      	ldrb	r3, [r7, #7]
 800a77e:	3301      	adds	r3, #1
 800a780:	71fb      	strb	r3, [r7, #7]
 800a782:	4b08      	ldr	r3, [pc, #32]	; (800a7a4 <ReArrangedVitalData+0xa0>)
 800a784:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a788:	79fa      	ldrb	r2, [r7, #7]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d3cd      	bcc.n	800a72a <ReArrangedVitalData+0x26>
				}
			}
		}
	}
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	2000254e 	.word	0x2000254e
 800a79c:	20002814 	.word	0x20002814
 800a7a0:	20002770 	.word	0x20002770
 800a7a4:	20000504 	.word	0x20000504
 800a7a8:	2000085c 	.word	0x2000085c

0800a7ac <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800a7b2:	4b26      	ldr	r3, [pc, #152]	; (800a84c <reset_cause_get+0xa0>)
 800a7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	da02      	bge.n	800a7c0 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	71fb      	strb	r3, [r7, #7]
 800a7be:	e037      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800a7c0:	4b22      	ldr	r3, [pc, #136]	; (800a84c <reset_cause_get+0xa0>)
 800a7c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	71fb      	strb	r3, [r7, #7]
 800a7d0:	e02e      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800a7d2:	4b1e      	ldr	r3, [pc, #120]	; (800a84c <reset_cause_get+0xa0>)
 800a7d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	71fb      	strb	r3, [r7, #7]
 800a7e2:	e025      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800a7e4:	4b19      	ldr	r3, [pc, #100]	; (800a84c <reset_cause_get+0xa0>)
 800a7e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800a7f0:	2304      	movs	r3, #4
 800a7f2:	71fb      	strb	r3, [r7, #7]
 800a7f4:	e01c      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800a7f6:	4b15      	ldr	r3, [pc, #84]	; (800a84c <reset_cause_get+0xa0>)
 800a7f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800a802:	2305      	movs	r3, #5
 800a804:	71fb      	strb	r3, [r7, #7]
 800a806:	e013      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800a808:	4b10      	ldr	r3, [pc, #64]	; (800a84c <reset_cause_get+0xa0>)
 800a80a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a80c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800a814:	2306      	movs	r3, #6
 800a816:	71fb      	strb	r3, [r7, #7]
 800a818:	e00a      	b.n	800a830 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800a81a:	4b0c      	ldr	r3, [pc, #48]	; (800a84c <reset_cause_get+0xa0>)
 800a81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 800a826:	2307      	movs	r3, #7
 800a828:	71fb      	strb	r3, [r7, #7]
 800a82a:	e001      	b.n	800a830 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 800a82c:	2300      	movs	r3, #0
 800a82e:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800a830:	4b06      	ldr	r3, [pc, #24]	; (800a84c <reset_cause_get+0xa0>)
 800a832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a834:	4a05      	ldr	r2, [pc, #20]	; (800a84c <reset_cause_get+0xa0>)
 800a836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a83a:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 800a83c:	79fb      	ldrb	r3, [r7, #7]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	40023800 	.word	0x40023800

0800a850 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 800a85a:	4b1c      	ldr	r3, [pc, #112]	; (800a8cc <reset_cause_get_name+0x7c>)
 800a85c:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 800a85e:	79fb      	ldrb	r3, [r7, #7]
 800a860:	2b07      	cmp	r3, #7
 800a862:	d82b      	bhi.n	800a8bc <reset_cause_get_name+0x6c>
 800a864:	a201      	add	r2, pc, #4	; (adr r2, 800a86c <reset_cause_get_name+0x1c>)
 800a866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86a:	bf00      	nop
 800a86c:	0800a88d 	.word	0x0800a88d
 800a870:	0800a893 	.word	0x0800a893
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a89f 	.word	0x0800a89f
 800a87c:	0800a8a5 	.word	0x0800a8a5
 800a880:	0800a8ab 	.word	0x0800a8ab
 800a884:	0800a8b1 	.word	0x0800a8b1
 800a888:	0800a8b7 	.word	0x0800a8b7
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800a88c:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <reset_cause_get_name+0x80>)
 800a88e:	60fb      	str	r3, [r7, #12]
            break;
 800a890:	e014      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800a892:	4b10      	ldr	r3, [pc, #64]	; (800a8d4 <reset_cause_get_name+0x84>)
 800a894:	60fb      	str	r3, [r7, #12]
            break;
 800a896:	e011      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800a898:	4b0f      	ldr	r3, [pc, #60]	; (800a8d8 <reset_cause_get_name+0x88>)
 800a89a:	60fb      	str	r3, [r7, #12]
            break;
 800a89c:	e00e      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800a89e:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <reset_cause_get_name+0x8c>)
 800a8a0:	60fb      	str	r3, [r7, #12]
            break;
 800a8a2:	e00b      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800a8a4:	4b0e      	ldr	r3, [pc, #56]	; (800a8e0 <reset_cause_get_name+0x90>)
 800a8a6:	60fb      	str	r3, [r7, #12]
            break;
 800a8a8:	e008      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800a8aa:	4b0e      	ldr	r3, [pc, #56]	; (800a8e4 <reset_cause_get_name+0x94>)
 800a8ac:	60fb      	str	r3, [r7, #12]
            break;
 800a8ae:	e005      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800a8b0:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <reset_cause_get_name+0x98>)
 800a8b2:	60fb      	str	r3, [r7, #12]
            break;
 800a8b4:	e002      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800a8b6:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <reset_cause_get_name+0x9c>)
 800a8b8:	60fb      	str	r3, [r7, #12]
            break;
 800a8ba:	bf00      	nop
    }

    return reset_cause_name;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	08029b38 	.word	0x08029b38
 800a8d0:	08029b3c 	.word	0x08029b3c
 800a8d4:	08029b44 	.word	0x08029b44
 800a8d8:	08029b54 	.word	0x08029b54
 800a8dc:	08029b6c 	.word	0x08029b6c
 800a8e0:	08029b88 	.word	0x08029b88
 800a8e4:	08029b98 	.word	0x08029b98
 800a8e8:	08029bc8 	.word	0x08029bc8
 800a8ec:	08029be4 	.word	0x08029be4

0800a8f0 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 800a8f4:	f00e f822 	bl	801893c <Print_BuildDat_Details>

		readCanToStructs();
 800a8f8:	f007 f90a 	bl	8011b10 <readCanToStructs>

		Feed_wdt();
 800a8fc:	f00b fda0 	bl	8016440 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 800a900:	4810      	ldr	r0, [pc, #64]	; (800a944 <Process_Medha_EI+0x54>)
 800a902:	f012 fbfb 	bl	801d0fc <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800a906:	f000 f91f 	bl	800ab48 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 800a90a:	f000 fef7 	bl	800b6fc <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 800a90e:	f000 ff5d 	bl	800b7cc <Process_Clear_Relays>

		Send_Data_to_Other();
 800a912:	f001 f841 	bl	800b998 <Send_Data_to_Other>

		Process_Data_from_Other();
 800a916:	f001 f899 	bl	800ba4c <Process_Data_from_Other>

		CheckforMedhaCMD();
 800a91a:	f001 fa6d 	bl	800bdf8 <CheckforMedhaCMD>

		CheckEIPC_DAT_CRC();
 800a91e:	f7f6 fb15 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800a922:	4b09      	ldr	r3, [pc, #36]	; (800a948 <Process_Medha_EI+0x58>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <Process_Medha_EI+0x42>
		{
			gucFlagUpdate = 3;
 800a92a:	4b08      	ldr	r3, [pc, #32]	; (800a94c <Process_Medha_EI+0x5c>)
 800a92c:	2203      	movs	r2, #3
 800a92e:	701a      	strb	r2, [r3, #0]
			break;
 800a930:	e002      	b.n	800a938 <Process_Medha_EI+0x48>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 800a932:	f00e fe6b 	bl	801960c <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 800a936:	e7dd      	b.n	800a8f4 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 800a938:	4802      	ldr	r0, [pc, #8]	; (800a944 <Process_Medha_EI+0x54>)
 800a93a:	f012 fbdf 	bl	801d0fc <HAL_IWDG_Refresh>
		Data_Processing();
 800a93e:	f00d fefb 	bl	8018738 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800a942:	e7f9      	b.n	800a938 <Process_Medha_EI+0x48>
 800a944:	2000b46c 	.word	0x2000b46c
 800a948:	20000bba 	.word	0x20000bba
 800a94c:	20000fbd 	.word	0x20000fbd

0800a950 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	6039      	str	r1, [r7, #0]
 800a95a:	71fb      	strb	r3, [r7, #7]
 800a95c:	4613      	mov	r3, r2
 800a95e:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 800a960:	2300      	movs	r3, #0
 800a962:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 800a964:	2300      	movs	r3, #0
 800a966:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 800a968:	e0d0      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f00e fd37 	bl	80193e0 <Com_Get_Byte>
 800a972:	4603      	mov	r3, r0
 800a974:	461a      	mov	r2, r3
 800a976:	4b6c      	ldr	r3, [pc, #432]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800a978:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 800a97a:	4b6c      	ldr	r3, [pc, #432]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b04      	cmp	r3, #4
 800a982:	f200 80c2 	bhi.w	800ab0a <Get_Medha_EI_Message+0x1ba>
 800a986:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <Get_Medha_EI_Message+0x3c>)
 800a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98c:	0800a9a1 	.word	0x0800a9a1
 800a990:	0800a9b9 	.word	0x0800a9b9
 800a994:	0800ab0b 	.word	0x0800ab0b
 800a998:	0800aa05 	.word	0x0800aa05
 800a99c:	0800aa5d 	.word	0x0800aa5d
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 800a9a0:	4b61      	ldr	r3, [pc, #388]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b53      	cmp	r3, #83	; 0x53
 800a9a6:	f040 80b1 	bne.w	800ab0c <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 800a9aa:	4b61      	ldr	r3, [pc, #388]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800a9b0:	4b5e      	ldr	r3, [pc, #376]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	701a      	strb	r2, [r3, #0]
			}
			break;
 800a9b6:	e0a9      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 800a9b8:	4b5d      	ldr	r3, [pc, #372]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	2b08      	cmp	r3, #8
 800a9be:	d111      	bne.n	800a9e4 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 800a9c0:	4b5b      	ldr	r3, [pc, #364]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	4a57      	ldr	r2, [pc, #348]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800a9cc:	7812      	ldrb	r2, [r2, #0]
 800a9ce:	701a      	strb	r2, [r3, #0]
					i++;
 800a9d0:	4b57      	ldr	r3, [pc, #348]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	4b55      	ldr	r3, [pc, #340]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9da:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 800a9dc:	4b53      	ldr	r3, [pc, #332]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800a9de:	2204      	movs	r2, #4
 800a9e0:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800a9e2:	e00d      	b.n	800aa00 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 800a9e4:	4b52      	ldr	r3, [pc, #328]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	4a4e      	ldr	r2, [pc, #312]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800a9f0:	7812      	ldrb	r2, [r2, #0]
 800a9f2:	701a      	strb	r2, [r3, #0]
					i++;
 800a9f4:	4b4e      	ldr	r3, [pc, #312]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	4b4c      	ldr	r3, [pc, #304]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9fe:	801a      	strh	r2, [r3, #0]
				break;
 800aa00:	bf00      	nop
			}
			break;
 800aa02:	e083      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 800aa04:	4b4a      	ldr	r3, [pc, #296]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	3b02      	subs	r3, #2
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 800aa14:	4b47      	ldr	r3, [pc, #284]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	801a      	strh	r2, [r3, #0]
				j=1;
 800aa1a:	4b47      	ldr	r3, [pc, #284]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 800aa20:	4b43      	ldr	r3, [pc, #268]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	461a      	mov	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	4413      	add	r3, r2
 800aa2a:	4a3f      	ldr	r2, [pc, #252]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 800aa30:	4b40      	ldr	r3, [pc, #256]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	3301      	adds	r3, #1
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	4b3e      	ldr	r3, [pc, #248]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa3a:	801a      	strh	r2, [r3, #0]
				i++;
 800aa3c:	4b3c      	ldr	r3, [pc, #240]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	3301      	adds	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	4b3a      	ldr	r3, [pc, #232]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa46:	801a      	strh	r2, [r3, #0]
				j++;
 800aa48:	4b3b      	ldr	r3, [pc, #236]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	4b39      	ldr	r3, [pc, #228]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa52:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 800aa54:	4b35      	ldr	r3, [pc, #212]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800aa56:	2205      	movs	r2, #5
 800aa58:	701a      	strb	r2, [r3, #0]
				break;
 800aa5a:	e057      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 800aa5c:	4b34      	ldr	r3, [pc, #208]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	461a      	mov	r2, r3
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	4413      	add	r3, r2
 800aa66:	4a30      	ldr	r2, [pc, #192]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800aa68:	7812      	ldrb	r2, [r2, #0]
 800aa6a:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 800aa6c:	89ba      	ldrh	r2, [r7, #12]
 800aa6e:	4b31      	ldr	r3, [pc, #196]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d940      	bls.n	800aaf8 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 800aa76:	4b2f      	ldr	r3, [pc, #188]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	4b2d      	ldr	r3, [pc, #180]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa80:	801a      	strh	r2, [r3, #0]
					i++;
 800aa82:	4b2b      	ldr	r3, [pc, #172]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	3301      	adds	r3, #1
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	4b29      	ldr	r3, [pc, #164]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa8c:	801a      	strh	r2, [r3, #0]
					j++;
 800aa8e:	4b2a      	ldr	r3, [pc, #168]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	3301      	adds	r3, #1
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	4b28      	ldr	r3, [pc, #160]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa98:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 800aa9a:	89ba      	ldrh	r2, [r7, #12]
 800aa9c:	4b25      	ldr	r3, [pc, #148]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d133      	bne.n	800ab0c <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 800aaa4:	4b22      	ldr	r3, [pc, #136]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	3b04      	subs	r3, #4
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	4b23      	ldr	r3, [pc, #140]	; (800ab3c <Get_Medha_EI_Message+0x1ec>)
 800aaae:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 800aab0:	4b22      	ldr	r3, [pc, #136]	; (800ab3c <Get_Medha_EI_Message+0x1ec>)
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	81fb      	strh	r3, [r7, #14]
						i = 0;
 800aab6:	4b1e      	ldr	r3, [pc, #120]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 800aabc:	4b1b      	ldr	r3, [pc, #108]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800aabe:	2201      	movs	r2, #1
 800aac0:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 800aac6:	89fb      	ldrh	r3, [r7, #14]
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d804      	bhi.n	800aad6 <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 800aacc:	481c      	ldr	r0, [pc, #112]	; (800ab40 <Get_Medha_EI_Message+0x1f0>)
 800aace:	f01c f855 	bl	8026b7c <puts>
							return ZERO;
 800aad2:	2300      	movs	r3, #0
 800aad4:	e023      	b.n	800ab1e <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 800aad6:	4b19      	ldr	r3, [pc, #100]	; (800ab3c <Get_Medha_EI_Message+0x1ec>)
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	2000      	movs	r0, #0
 800aae0:	f001 fc4c 	bl	800c37c <CheckCRC32>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800aaea:	89fb      	ldrh	r3, [r7, #14]
 800aaec:	e017      	b.n	800ab1e <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800aaee:	4815      	ldr	r0, [pc, #84]	; (800ab44 <Get_Medha_EI_Message+0x1f4>)
 800aaf0:	f01c f844 	bl	8026b7c <puts>
							return ZERO;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e012      	b.n	800ab1e <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 800aaf8:	4b0d      	ldr	r3, [pc, #52]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800aafe:	4b0b      	ldr	r3, [pc, #44]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800ab00:	2201      	movs	r2, #1
 800ab02:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	81bb      	strh	r3, [r7, #12]
				}
				break;
 800ab08:	e000      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 800ab0a:	bf00      	nop
	while(Com_DataReady(ComPort))
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f00e fc26 	bl	8019360 <Com_DataReady>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f47f af27 	bne.w	800a96a <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20003fa8 	.word	0x20003fa8
 800ab2c:	20000316 	.word	0x20000316
 800ab30:	20003faa 	.word	0x20003faa
 800ab34:	20003fac 	.word	0x20003fac
 800ab38:	20003fae 	.word	0x20003fae
 800ab3c:	20003fb0 	.word	0x20003fb0
 800ab40:	08029bfc 	.word	0x08029bfc
 800ab44:	08029c04 	.word	0x08029c04

0800ab48 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 800ab48:	b5b0      	push	{r4, r5, r7, lr}
 800ab4a:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 800ab4e:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 800ab56:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	3304      	adds	r3, #4
 800ab64:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f01b fe82 	bl	8026874 <memset>
	uint16_t NoOfInputs 		= 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 800ab7c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]
 800ab88:	3304      	adds	r3, #4
 800ab8a:	227c      	movs	r2, #124	; 0x7c
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f01b fe70 	bl	8026874 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 800aba0:	4bc8      	ldr	r3, [pc, #800]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800aba2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aba6:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800abaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff fece 	bl	800a950 <Get_Medha_EI_Message>
 800abb4:	4603      	mov	r3, r0
 800abb6:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 800abba:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800abbe:	2b05      	cmp	r3, #5
 800abc0:	d939      	bls.n	800ac36 <Medha_EI_Analyser+0xee>
	{
		HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 800abc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800abc6:	48c0      	ldr	r0, [pc, #768]	; (800aec8 <Medha_EI_Analyser+0x380>)
 800abc8:	f011 fc1b 	bl	801c402 <HAL_GPIO_TogglePin>
		printf("Raw Data:\n");
 800abcc:	48bf      	ldr	r0, [pc, #764]	; (800aecc <Medha_EI_Analyser+0x384>)
 800abce:	f01b ffd5 	bl	8026b7c <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800abd2:	2300      	movs	r3, #0
 800abd4:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800abd8:	e024      	b.n	800ac24 <Medha_EI_Analyser+0xdc>
		{

			if((i!=0) && ((i%10)==0))
 800abda:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d010      	beq.n	800ac04 <Medha_EI_Analyser+0xbc>
 800abe2:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800abe6:	4bba      	ldr	r3, [pc, #744]	; (800aed0 <Medha_EI_Analyser+0x388>)
 800abe8:	fba3 1302 	umull	r1, r3, r3, r2
 800abec:	08d9      	lsrs	r1, r3, #3
 800abee:	460b      	mov	r3, r1
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	005b      	lsls	r3, r3, #1
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d102      	bne.n	800ac04 <Medha_EI_Analyser+0xbc>
			{
				printf("\n");
 800abfe:	200a      	movs	r0, #10
 800ac00:	f01b ff38 	bl	8026a74 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 800ac04:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800ac08:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ac0c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800ac10:	5cd3      	ldrb	r3, [r2, r3]
 800ac12:	4619      	mov	r1, r3
 800ac14:	48af      	ldr	r0, [pc, #700]	; (800aed4 <Medha_EI_Analyser+0x38c>)
 800ac16:	f01b ff15 	bl	8026a44 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800ac1a:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800ac1e:	3301      	adds	r3, #1
 800ac20:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800ac24:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800ac28:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d3d4      	bcc.n	800abda <Medha_EI_Analyser+0x92>
		}
		printf("\n");
 800ac30:	200a      	movs	r0, #10
 800ac32:	f01b ff1f 	bl	8026a74 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 800ac36:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f000 83d5 	beq.w	800b3ea <Medha_EI_Analyser+0x8a2>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 800ac40:	463b      	mov	r3, r7
 800ac42:	f44f 7292 	mov.w	r2, #292	; 0x124
 800ac46:	2100      	movs	r1, #0
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f01b fe13 	bl	8026874 <memset>

		BYTEINIT(0);
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 800ac54:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac58:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ac5c:	4413      	add	r3, r2
 800ac5e:	781a      	ldrb	r2, [r3, #0]
 800ac60:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac64:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac68:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 800ac6a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac6e:	3301      	adds	r3, #1
 800ac70:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 800ac74:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac78:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ac7c:	4413      	add	r3, r2
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac86:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac8a:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 800ac8c:	4b8d      	ldr	r3, [pc, #564]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800ac8e:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 800ac92:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac96:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac9a:	889b      	ldrh	r3, [r3, #4]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d017      	beq.n	800acd0 <Medha_EI_Analyser+0x188>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 800aca0:	488d      	ldr	r0, [pc, #564]	; (800aed8 <Medha_EI_Analyser+0x390>)
 800aca2:	f01b ff6b 	bl	8026b7c <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 800aca6:	4b87      	ldr	r3, [pc, #540]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800aca8:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800acac:	4619      	mov	r1, r3
 800acae:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800acb2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800acb6:	889b      	ldrh	r3, [r3, #4]
 800acb8:	461a      	mov	r2, r3
 800acba:	4888      	ldr	r0, [pc, #544]	; (800aedc <Medha_EI_Analyser+0x394>)
 800acbc:	f01b fec2 	bl	8026a44 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800acc0:	4987      	ldr	r1, [pc, #540]	; (800aee0 <Medha_EI_Analyser+0x398>)
 800acc2:	4888      	ldr	r0, [pc, #544]	; (800aee4 <Medha_EI_Analyser+0x39c>)
 800acc4:	f7f5 fabc 	bl	8000240 <strcmp>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	f040 838f 	bne.w	800b3ee <Medha_EI_Analyser+0x8a6>
			{
				return;
			}
		}
		BYTEINC(2);
 800acd0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800acd4:	3302      	adds	r3, #2
 800acd6:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800acda:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800acde:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ace2:	4413      	add	r3, r2
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800acec:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800acf0:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 800acf2:	4b74      	ldr	r3, [pc, #464]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800acf4:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800acf8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800acfc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad00:	885b      	ldrh	r3, [r3, #2]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d017      	beq.n	800ad36 <Medha_EI_Analyser+0x1ee>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 800ad06:	4878      	ldr	r0, [pc, #480]	; (800aee8 <Medha_EI_Analyser+0x3a0>)
 800ad08:	f01b ff38 	bl	8026b7c <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800ad0c:	4b6d      	ldr	r3, [pc, #436]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800ad0e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800ad12:	4619      	mov	r1, r3
 800ad14:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad18:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad1c:	885b      	ldrh	r3, [r3, #2]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	486e      	ldr	r0, [pc, #440]	; (800aedc <Medha_EI_Analyser+0x394>)
 800ad22:	f01b fe8f 	bl	8026a44 <iprintf>
			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800ad26:	496e      	ldr	r1, [pc, #440]	; (800aee0 <Medha_EI_Analyser+0x398>)
 800ad28:	486e      	ldr	r0, [pc, #440]	; (800aee4 <Medha_EI_Analyser+0x39c>)
 800ad2a:	f7f5 fa89 	bl	8000240 <strcmp>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f040 835e 	bne.w	800b3f2 <Medha_EI_Analyser+0x8aa>
			{
				return;
			}		}
		BYTEINC(2);
 800ad36:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad3a:	3302      	adds	r3, #2
 800ad3c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 800ad40:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad44:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad48:	4413      	add	r3, r2
 800ad4a:	781a      	ldrb	r2, [r3, #0]
 800ad4c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad50:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad54:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 800ad56:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad5a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad5e:	799b      	ldrb	r3, [r3, #6]
 800ad60:	2baa      	cmp	r3, #170	; 0xaa
 800ad62:	d010      	beq.n	800ad86 <Medha_EI_Analyser+0x23e>
 800ad64:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad68:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad6c:	799b      	ldrb	r3, [r3, #6]
 800ad6e:	2bbb      	cmp	r3, #187	; 0xbb
 800ad70:	d009      	beq.n	800ad86 <Medha_EI_Analyser+0x23e>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 800ad72:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad76:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad7a:	799b      	ldrb	r3, [r3, #6]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	485b      	ldr	r0, [pc, #364]	; (800aeec <Medha_EI_Analyser+0x3a4>)
 800ad80:	f01b fe60 	bl	8026a44 <iprintf>
			return;
 800ad84:	e336      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}
		BYTEINC(1);
 800ad86:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 800ad90:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad94:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad98:	4413      	add	r3, r2
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ada0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ada4:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 800ada6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800adaa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800adae:	79db      	ldrb	r3, [r3, #7]
 800adb0:	2be1      	cmp	r3, #225	; 0xe1
 800adb2:	d009      	beq.n	800adc8 <Medha_EI_Analyser+0x280>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 800adb4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800adb8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800adbc:	79db      	ldrb	r3, [r3, #7]
 800adbe:	4619      	mov	r1, r3
 800adc0:	484b      	ldr	r0, [pc, #300]	; (800aef0 <Medha_EI_Analyser+0x3a8>)
 800adc2:	f01b fe3f 	bl	8026a44 <iprintf>
			return;
 800adc6:	e315      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}

		BYTEINC(1);
 800adc8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800adcc:	3301      	adds	r3, #1
 800adce:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 800add2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800add6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800adda:	4413      	add	r3, r2
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29a      	uxth	r2, r3
 800ade0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ade4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ade8:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800adea:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800adee:	3302      	adds	r3, #2
 800adf0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 800adf4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800adf8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800adfc:	4413      	add	r3, r2
 800adfe:	781a      	ldrb	r2, [r3, #0]
 800ae00:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae04:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae08:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800ae0a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae0e:	3301      	adds	r3, #1
 800ae10:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 800ae14:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae18:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ae1c:	441a      	add	r2, r3
 800ae1e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae22:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae26:	330b      	adds	r3, #11
 800ae28:	6811      	ldr	r1, [r2, #0]
 800ae2a:	6019      	str	r1, [r3, #0]
 800ae2c:	8891      	ldrh	r1, [r2, #4]
 800ae2e:	7992      	ldrb	r2, [r2, #6]
 800ae30:	8099      	strh	r1, [r3, #4]
 800ae32:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 800ae34:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae38:	3307      	adds	r3, #7
 800ae3a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 800ae3e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae42:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ae46:	4413      	add	r3, r2
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae4e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae52:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 800ae54:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae58:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae5c:	7c9b      	ldrb	r3, [r3, #18]
 800ae5e:	2b11      	cmp	r3, #17
 800ae60:	d009      	beq.n	800ae76 <Medha_EI_Analyser+0x32e>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 800ae62:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae66:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae6a:	7c9b      	ldrb	r3, [r3, #18]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4821      	ldr	r0, [pc, #132]	; (800aef4 <Medha_EI_Analyser+0x3ac>)
 800ae70:	f01b fde8 	bl	8026a44 <iprintf>
			return;
 800ae74:	e2be      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}

		BYTEINC(1);
 800ae76:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 800ae80:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae84:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 800ae88:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae8c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ae90:	4413      	add	r3, r2
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae9a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae9e:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 800aea0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aea4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeae:	d925      	bls.n	800aefc <Medha_EI_Analyser+0x3b4>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%lu\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800aeb0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aeb4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	4619      	mov	r1, r3
 800aebc:	480e      	ldr	r0, [pc, #56]	; (800aef8 <Medha_EI_Analyser+0x3b0>)
 800aebe:	f01b fdc1 	bl	8026a44 <iprintf>
			return;
 800aec2:	e297      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
 800aec4:	20000504 	.word	0x20000504
 800aec8:	40021c00 	.word	0x40021c00
 800aecc:	08029c0c 	.word	0x08029c0c
 800aed0:	cccccccd 	.word	0xcccccccd
 800aed4:	08029c18 	.word	0x08029c18
 800aed8:	08029c20 	.word	0x08029c20
 800aedc:	08029c54 	.word	0x08029c54
 800aee0:	08029c78 	.word	0x08029c78
 800aee4:	20000505 	.word	0x20000505
 800aee8:	08029c84 	.word	0x08029c84
 800aeec:	08029cb4 	.word	0x08029cb4
 800aef0:	08029cec 	.word	0x08029cec
 800aef4:	08029d24 	.word	0x08029d24
 800aef8:	08029d68 	.word	0x08029d68
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 800aefc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af00:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af04:	695a      	ldr	r2, [r3, #20]
 800af06:	4baa      	ldr	r3, [pc, #680]	; (800b1b0 <Medha_EI_Analyser+0x668>)
 800af08:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d01b      	beq.n	800af48 <Medha_EI_Analyser+0x400>
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800af10:	49a8      	ldr	r1, [pc, #672]	; (800b1b4 <Medha_EI_Analyser+0x66c>)
 800af12:	48a9      	ldr	r0, [pc, #676]	; (800b1b8 <Medha_EI_Analyser+0x670>)
 800af14:	f7f5 f994 	bl	8000240 <strcmp>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00c      	beq.n	800af38 <Medha_EI_Analyser+0x3f0>
			{
				printf("No of Relays Not Matching...\nConfigured:%lu - Received:%lu\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 800af1e:	4ba4      	ldr	r3, [pc, #656]	; (800b1b0 <Medha_EI_Analyser+0x668>)
 800af20:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 800af24:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af28:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	461a      	mov	r2, r3
 800af30:	48a2      	ldr	r0, [pc, #648]	; (800b1bc <Medha_EI_Analyser+0x674>)
 800af32:	f01b fd87 	bl	8026a44 <iprintf>
				return;
 800af36:	e25d      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
			}
			else
			{
				EI_data.Medha_Prms_st.NoofRelays = Medha_EI_Temp_Rx_st.NoofRelays;
 800af38:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af3c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	4a9b      	ldr	r2, [pc, #620]	; (800b1b0 <Medha_EI_Analyser+0x668>)
 800af44:	f8c2 3328 	str.w	r3, [r2, #808]	; 0x328
			}
		}

		BYTEINC(2);
 800af48:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800af4c:	3302      	adds	r3, #2
 800af4e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 800af52:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af56:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 800af66:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <Medha_EI_Analyser+0x43c>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 800af6e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af72:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	08db      	lsrs	r3, r3, #3
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	3301      	adds	r3, #1
 800af7e:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 800af82:	e007      	b.n	800af94 <Medha_EI_Analyser+0x44c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 800af84:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af88:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	08db      	lsrs	r3, r3, #3
 800af90:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800af94:	2300      	movs	r3, #0
 800af96:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800af9a:	e02a      	b.n	800aff2 <Medha_EI_Analyser+0x4aa>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 800af9c:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800afa0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afa4:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800afa8:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800afac:	5c89      	ldrb	r1, [r1, r2]
 800afae:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800afb2:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800afb6:	4413      	add	r3, r2
 800afb8:	460a      	mov	r2, r1
 800afba:	761a      	strb	r2, [r3, #24]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800afbc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afc0:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800afc4:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800afc8:	4413      	add	r3, r2
 800afca:	7e1a      	ldrb	r2, [r3, #24]
 800afcc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afd0:	43d2      	mvns	r2, r2
 800afd2:	b2d1      	uxtb	r1, r2
 800afd4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800afd8:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800afdc:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 800afde:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800afe2:	3301      	adds	r3, #1
 800afe4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800afe8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afec:	3301      	adds	r3, #1
 800afee:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800aff2:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800aff6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800affa:	429a      	cmp	r2, r3
 800affc:	d3ce      	bcc.n	800af9c <Medha_EI_Analyser+0x454>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800affe:	2300      	movs	r3, #0
 800b000:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b004:	e01a      	b.n	800b03c <Medha_EI_Analyser+0x4f4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 800b006:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800b00a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b00e:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800b012:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800b016:	5c89      	ldrb	r1, [r1, r2]
 800b018:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800b01c:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800b020:	4413      	add	r3, r2
 800b022:	460a      	mov	r2, r1
 800b024:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			BYTEINC(1);
 800b028:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b02c:	3301      	adds	r3, #1
 800b02e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b032:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b036:	3301      	adds	r3, #1
 800b038:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b03c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b040:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b044:	429a      	cmp	r2, r3
 800b046:	d3de      	bcc.n	800b006 <Medha_EI_Analyser+0x4be>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 800b048:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 800b04c:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800b050:	463b      	mov	r3, r7
 800b052:	3398      	adds	r3, #152	; 0x98
 800b054:	4618      	mov	r0, r3
 800b056:	f01b fbd5 	bl	8026804 <memcmp>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d03f      	beq.n	800b0e0 <Medha_EI_Analyser+0x598>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 800b060:	4857      	ldr	r0, [pc, #348]	; (800b1c0 <Medha_EI_Analyser+0x678>)
 800b062:	f01b fd8b 	bl	8026b7c <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b066:	2300      	movs	r3, #0
 800b068:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b06c:	e011      	b.n	800b092 <Medha_EI_Analyser+0x54a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 800b06e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b072:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800b076:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800b07a:	4413      	add	r3, r2
 800b07c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b080:	4619      	mov	r1, r3
 800b082:	4850      	ldr	r0, [pc, #320]	; (800b1c4 <Medha_EI_Analyser+0x67c>)
 800b084:	f01b fcde 	bl	8026a44 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b088:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b08c:	3301      	adds	r3, #1
 800b08e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b092:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b096:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d3e7      	bcc.n	800b06e <Medha_EI_Analyser+0x526>
			}

			printf("\nExpected Compliment Relay Status:\n");
 800b09e:	484a      	ldr	r0, [pc, #296]	; (800b1c8 <Medha_EI_Analyser+0x680>)
 800b0a0:	f01b fd6c 	bl	8026b7c <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b0aa:	e00f      	b.n	800b0cc <Medha_EI_Analyser+0x584>
			{
				printf("%02X ",TempCompliment[Traverser]);
 800b0ac:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b0b0:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800b0b4:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800b0b8:	5cd3      	ldrb	r3, [r2, r3]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4841      	ldr	r0, [pc, #260]	; (800b1c4 <Medha_EI_Analyser+0x67c>)
 800b0be:	f01b fcc1 	bl	8026a44 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b0c2:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b0cc:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b0d0:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d3e9      	bcc.n	800b0ac <Medha_EI_Analyser+0x564>
			}

			printf("\nPACKET Rejected\n");
 800b0d8:	483c      	ldr	r0, [pc, #240]	; (800b1cc <Medha_EI_Analyser+0x684>)
 800b0da:	f01b fd4f 	bl	8026b7c <puts>
			return;
 800b0de:	e189      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 800b0e0:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800b0e4:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800b0e8:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 f911 	bl	800c314 <GetCRC32>
 800b0f2:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 800b0f6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b0fa:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800b0fe:	4413      	add	r3, r2
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	461a      	mov	r2, r3
 800b104:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b108:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b10c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 800b110:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b114:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b118:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b11c:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800b120:	429a      	cmp	r2, r3
 800b122:	d00c      	beq.n	800b13e <Medha_EI_Analyser+0x5f6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 800b124:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b128:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b12c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b130:	461a      	mov	r2, r3
 800b132:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800b136:	4826      	ldr	r0, [pc, #152]	; (800b1d0 <Medha_EI_Analyser+0x688>)
 800b138:	f01b fc84 	bl	8026a44 <iprintf>
			return;
 800b13c:	e15a      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}
		BYTEINC(4);
 800b13e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b142:	3304      	adds	r3, #4
 800b144:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 800b148:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b14c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800b150:	4413      	add	r3, r2
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	b29a      	uxth	r2, r3
 800b156:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b15a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b15e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 800b162:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b166:	3302      	adds	r3, #2
 800b168:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 800b16c:	f00e fc60 	bl	8019a30 <HAL_GetTick>
 800b170:	4603      	mov	r3, r0
 800b172:	4a18      	ldr	r2, [pc, #96]	; (800b1d4 <Medha_EI_Analyser+0x68c>)
 800b174:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 800b176:	4a18      	ldr	r2, [pc, #96]	; (800b1d8 <Medha_EI_Analyser+0x690>)
 800b178:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b17c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b180:	4610      	mov	r0, r2
 800b182:	4619      	mov	r1, r3
 800b184:	f44f 7392 	mov.w	r3, #292	; 0x124
 800b188:	461a      	mov	r2, r3
 800b18a:	f01b fb4b 	bl	8026824 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 800b18e:	4b13      	ldr	r3, [pc, #76]	; (800b1dc <Medha_EI_Analyser+0x694>)
 800b190:	2201      	movs	r2, #1
 800b192:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800b194:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <Medha_EI_Analyser+0x690>)
 800b196:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b19a:	4a10      	ldr	r2, [pc, #64]	; (800b1dc <Medha_EI_Analyser+0x694>)
 800b19c:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 800b19e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f956 	bl	800b454 <Send_Medha_EI_Reply>
//				Medha_Cur_Relay_Status_st.Relay_Status[Traverser++] = (Medha_EI_Temp_Rx_st.RelayStatus[i]);
//			}
//		}
//		else
		{
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b1ae:	e028      	b.n	800b202 <Medha_EI_Analyser+0x6ba>
 800b1b0:	20000504 	.word	0x20000504
 800b1b4:	08029c78 	.word	0x08029c78
 800b1b8:	20000505 	.word	0x20000505
 800b1bc:	08029dbc 	.word	0x08029dbc
 800b1c0:	08029df8 	.word	0x08029df8
 800b1c4:	08029c18 	.word	0x08029c18
 800b1c8:	08029e44 	.word	0x08029e44
 800b1cc:	08029e68 	.word	0x08029e68
 800b1d0:	08029e7c 	.word	0x08029e7c
 800b1d4:	20003df4 	.word	0x20003df4
 800b1d8:	20003c9c 	.word	0x20003c9c
 800b1dc:	20003e04 	.word	0x20003e04
			{
				//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
				Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800b1e0:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b1e4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b1e8:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800b1ec:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 800b1f0:	440a      	add	r2, r1
 800b1f2:	7e11      	ldrb	r1, [r2, #24]
 800b1f4:	4a81      	ldr	r2, [pc, #516]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b1f6:	54d1      	strb	r1, [r2, r3]
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b1f8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b202:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b206:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d3e8      	bcc.n	800b1e0 <Medha_EI_Analyser+0x698>





		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800b20e:	4b7c      	ldr	r3, [pc, #496]	; (800b400 <Medha_EI_Analyser+0x8b8>)
 800b210:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b214:	4a79      	ldr	r2, [pc, #484]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b216:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 800b21a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b21e:	461a      	mov	r2, r3
 800b220:	4976      	ldr	r1, [pc, #472]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b222:	4878      	ldr	r0, [pc, #480]	; (800b404 <Medha_EI_Analyser+0x8bc>)
 800b224:	f01b faee 	bl	8026804 <memcmp>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d030      	beq.n	800b290 <Medha_EI_Analyser+0x748>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800b22e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b232:	461a      	mov	r2, r3
 800b234:	4971      	ldr	r1, [pc, #452]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b236:	4873      	ldr	r0, [pc, #460]	; (800b404 <Medha_EI_Analyser+0x8bc>)
 800b238:	f01b faf4 	bl	8026824 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800b23c:	4b6f      	ldr	r3, [pc, #444]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b242:	4a70      	ldr	r2, [pc, #448]	; (800b404 <Medha_EI_Analyser+0x8bc>)
 800b244:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(Medha_Relay_Sts_st.Relay_Sts));
 800b248:	2230      	movs	r2, #48	; 0x30
 800b24a:	2100      	movs	r1, #0
 800b24c:	486e      	ldr	r0, [pc, #440]	; (800b408 <Medha_EI_Analyser+0x8c0>)
 800b24e:	f01b fb11 	bl	8026874 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800b252:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b256:	461a      	mov	r2, r3
 800b258:	4968      	ldr	r1, [pc, #416]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b25a:	486b      	ldr	r0, [pc, #428]	; (800b408 <Medha_EI_Analyser+0x8c0>)
 800b25c:	f01b fae2 	bl	8026824 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 800b260:	f240 1019 	movw	r0, #281	; 0x119
 800b264:	f005 fe7c 	bl	8010f60 <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800b268:	f00e fbe2 	bl	8019a30 <HAL_GetTick>
 800b26c:	4603      	mov	r3, r0
 800b26e:	4a67      	ldr	r2, [pc, #412]	; (800b40c <Medha_EI_Analyser+0x8c4>)
 800b270:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 800b272:	4867      	ldr	r0, [pc, #412]	; (800b410 <Medha_EI_Analyser+0x8c8>)
 800b274:	f01b fc82 	bl	8026b7c <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 800b278:	f240 2001 	movw	r0, #513	; 0x201
 800b27c:	f005 fe70 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 800b280:	4b64      	ldr	r3, [pc, #400]	; (800b414 <Medha_EI_Analyser+0x8cc>)
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d103      	bne.n	800b290 <Medha_EI_Analyser+0x748>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800b288:	f240 2007 	movw	r0, #519	; 0x207
 800b28c:	f005 fe68 	bl	8010f60 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 800b290:	4861      	ldr	r0, [pc, #388]	; (800b418 <Medha_EI_Analyser+0x8d0>)
 800b292:	f01b fc73 	bl	8026b7c <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 800b296:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b29a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b29e:	889b      	ldrh	r3, [r3, #4]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	485e      	ldr	r0, [pc, #376]	; (800b41c <Medha_EI_Analyser+0x8d4>)
 800b2a4:	f01b fbce 	bl	8026a44 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 800b2a8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2ac:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2b0:	885b      	ldrh	r3, [r3, #2]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	485a      	ldr	r0, [pc, #360]	; (800b420 <Medha_EI_Analyser+0x8d8>)
 800b2b6:	f01b fbc5 	bl	8026a44 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 800b2ba:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2be:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2c2:	799b      	ldrb	r3, [r3, #6]
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4857      	ldr	r0, [pc, #348]	; (800b424 <Medha_EI_Analyser+0x8dc>)
 800b2c8:	f01b fbbc 	bl	8026a44 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 800b2cc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2d0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2d4:	79db      	ldrb	r3, [r3, #7]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4853      	ldr	r0, [pc, #332]	; (800b428 <Medha_EI_Analyser+0x8e0>)
 800b2da:	f01b fbb3 	bl	8026a44 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 800b2de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2e2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2e6:	891b      	ldrh	r3, [r3, #8]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4850      	ldr	r0, [pc, #320]	; (800b42c <Medha_EI_Analyser+0x8e4>)
 800b2ec:	f01b fbaa 	bl	8026a44 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 800b2f0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2f4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2f8:	7a9b      	ldrb	r3, [r3, #10]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	484c      	ldr	r0, [pc, #304]	; (800b430 <Medha_EI_Analyser+0x8e8>)
 800b2fe:	f01b fba1 	bl	8026a44 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 800b302:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b306:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b30a:	7b9b      	ldrb	r3, [r3, #14]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b312:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b316:	7b5b      	ldrb	r3, [r3, #13]
 800b318:	461c      	mov	r4, r3
 800b31a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b31e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b322:	7b1b      	ldrb	r3, [r3, #12]
 800b324:	461d      	mov	r5, r3
 800b326:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b32a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b32e:	7bdb      	ldrb	r3, [r3, #15]
 800b330:	461a      	mov	r2, r3
 800b332:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b336:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b33a:	7c1b      	ldrb	r3, [r3, #16]
 800b33c:	4619      	mov	r1, r3
 800b33e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b342:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b346:	7c5b      	ldrb	r3, [r3, #17]
 800b348:	9302      	str	r3, [sp, #8]
 800b34a:	9101      	str	r1, [sp, #4]
 800b34c:	9200      	str	r2, [sp, #0]
 800b34e:	462b      	mov	r3, r5
 800b350:	4622      	mov	r2, r4
 800b352:	4601      	mov	r1, r0
 800b354:	4837      	ldr	r0, [pc, #220]	; (800b434 <Medha_EI_Analyser+0x8ec>)
 800b356:	f01b fb75 	bl	8026a44 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 800b35a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b35e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b362:	7c9b      	ldrb	r3, [r3, #18]
 800b364:	4619      	mov	r1, r3
 800b366:	4834      	ldr	r0, [pc, #208]	; (800b438 <Medha_EI_Analyser+0x8f0>)
 800b368:	f01b fb6c 	bl	8026a44 <iprintf>
		printf("RC:%5lu\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800b36c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b370:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	4619      	mov	r1, r3
 800b378:	4830      	ldr	r0, [pc, #192]	; (800b43c <Medha_EI_Analyser+0x8f4>)
 800b37a:	f01b fb63 	bl	8026a44 <iprintf>
		printf("SIGNAL DATA       :");
 800b37e:	4830      	ldr	r0, [pc, #192]	; (800b440 <Medha_EI_Analyser+0x8f8>)
 800b380:	f01b fb60 	bl	8026a44 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b384:	2300      	movs	r3, #0
 800b386:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b38a:	e021      	b.n	800b3d0 <Medha_EI_Analyser+0x888>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 800b38c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b390:	2b00      	cmp	r3, #0
 800b392:	d010      	beq.n	800b3b6 <Medha_EI_Analyser+0x86e>
 800b394:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b398:	4b2a      	ldr	r3, [pc, #168]	; (800b444 <Medha_EI_Analyser+0x8fc>)
 800b39a:	fba3 1302 	umull	r1, r3, r3, r2
 800b39e:	08d9      	lsrs	r1, r3, #3
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	440b      	add	r3, r1
 800b3a6:	005b      	lsls	r3, r3, #1
 800b3a8:	1ad3      	subs	r3, r2, r3
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <Medha_EI_Analyser+0x86e>
			{
				printf("\n                   ");
 800b3b0:	4825      	ldr	r0, [pc, #148]	; (800b448 <Medha_EI_Analyser+0x900>)
 800b3b2:	f01b fb47 	bl	8026a44 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 800b3b6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b3ba:	4a10      	ldr	r2, [pc, #64]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b3bc:	5cd3      	ldrb	r3, [r2, r3]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4822      	ldr	r0, [pc, #136]	; (800b44c <Medha_EI_Analyser+0x904>)
 800b3c2:	f01b fb3f 	bl	8026a44 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b3c6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b3d0:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b3d4:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d3d7      	bcc.n	800b38c <Medha_EI_Analyser+0x844>
		}
		printf("\n");
 800b3dc:	200a      	movs	r0, #10
 800b3de:	f01b fb49 	bl	8026a74 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 800b3e2:	481b      	ldr	r0, [pc, #108]	; (800b450 <Medha_EI_Analyser+0x908>)
 800b3e4:	f01b fbca 	bl	8026b7c <puts>
		return;
 800b3e8:	e004      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
	}
	else
	{
		return;
 800b3ea:	bf00      	nop
 800b3ec:	e002      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
				return;
 800b3ee:	bf00      	nop
 800b3f0:	e000      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
				return;
 800b3f2:	bf00      	nop
	}
}
 800b3f4:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bdb0      	pop	{r4, r5, r7, pc}
 800b3fc:	20003e1c 	.word	0x20003e1c
 800b400:	20003c9c 	.word	0x20003c9c
 800b404:	20003f24 	.word	0x20003f24
 800b408:	20003dc2 	.word	0x20003dc2
 800b40c:	20003df4 	.word	0x20003df4
 800b410:	08029ebc 	.word	0x08029ebc
 800b414:	20003e0c 	.word	0x20003e0c
 800b418:	08029ed4 	.word	0x08029ed4
 800b41c:	08029efc 	.word	0x08029efc
 800b420:	08029f04 	.word	0x08029f04
 800b424:	08029f0c 	.word	0x08029f0c
 800b428:	08029f18 	.word	0x08029f18
 800b42c:	08029f24 	.word	0x08029f24
 800b430:	08029f2c 	.word	0x08029f2c
 800b434:	08029f34 	.word	0x08029f34
 800b438:	08029f58 	.word	0x08029f58
 800b43c:	08029f64 	.word	0x08029f64
 800b440:	08029f70 	.word	0x08029f70
 800b444:	cccccccd 	.word	0xcccccccd
 800b448:	08029f84 	.word	0x08029f84
 800b44c:	08029c18 	.word	0x08029c18
 800b450:	08029f9c 	.word	0x08029f9c

0800b454 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b0d2      	sub	sp, #328	; 0x148
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4602      	mov	r2, r0
 800b45c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b460:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b464:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 800b466:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b46a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	3304      	adds	r3, #4
 800b474:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b478:	2100      	movs	r1, #0
 800b47a:	4618      	mov	r0, r3
 800b47c:	f01b f9fa 	bl	8026874 <memset>
	uint32_t Cal_Crc =0;
 800b480:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b484:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 800b492:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b496:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b49a:	2200      	movs	r2, #0
 800b49c:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 800b4a4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4a8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b4ac:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b4b0:	2153      	movs	r1, #83	; 0x53
 800b4b2:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b4b4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 800b4be:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4c2:	f107 0214 	add.w	r2, r7, #20
 800b4c6:	4413      	add	r3, r2
 800b4c8:	4a88      	ldr	r2, [pc, #544]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b4ca:	8852      	ldrh	r2, [r2, #2]
 800b4cc:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b4ce:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4d2:	3302      	adds	r3, #2
 800b4d4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800b4d8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4dc:	f107 0214 	add.w	r2, r7, #20
 800b4e0:	4413      	add	r3, r2
 800b4e2:	4a82      	ldr	r2, [pc, #520]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b4e4:	8892      	ldrh	r2, [r2, #4]
 800b4e6:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b4e8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4ec:	3302      	adds	r3, #2
 800b4ee:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800b4f2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4f6:	f107 0214 	add.w	r2, r7, #20
 800b4fa:	4413      	add	r3, r2
 800b4fc:	4a7b      	ldr	r2, [pc, #492]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b4fe:	7992      	ldrb	r2, [r2, #6]
 800b500:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b502:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b506:	3301      	adds	r3, #1
 800b508:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800b50c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b510:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b514:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b518:	21e2      	movs	r1, #226	; 0xe2
 800b51a:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b51c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b520:	3301      	adds	r3, #1
 800b522:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800b526:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b52a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800b52e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b532:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b536:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b53a:	2100      	movs	r1, #0
 800b53c:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800b53e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b542:	3301      	adds	r3, #1
 800b544:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b548:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b54c:	2100      	movs	r1, #0
 800b54e:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800b550:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b554:	3302      	adds	r3, #2
 800b556:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800b55a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b55e:	f107 0214 	add.w	r2, r7, #20
 800b562:	4413      	add	r3, r2
 800b564:	4a61      	ldr	r2, [pc, #388]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b566:	7a92      	ldrb	r2, [r2, #10]
 800b568:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b56a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b56e:	3301      	adds	r3, #1
 800b570:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800b574:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b578:	f107 0214 	add.w	r2, r7, #20
 800b57c:	441a      	add	r2, r3
 800b57e:	4b5b      	ldr	r3, [pc, #364]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b580:	330b      	adds	r3, #11
 800b582:	6819      	ldr	r1, [r3, #0]
 800b584:	6011      	str	r1, [r2, #0]
 800b586:	8899      	ldrh	r1, [r3, #4]
 800b588:	799b      	ldrb	r3, [r3, #6]
 800b58a:	8091      	strh	r1, [r2, #4]
 800b58c:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800b58e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b592:	3307      	adds	r3, #7
 800b594:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800b598:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b59c:	f107 0214 	add.w	r2, r7, #20
 800b5a0:	4413      	add	r3, r2
 800b5a2:	4a52      	ldr	r2, [pc, #328]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b5a4:	8a92      	ldrh	r2, [r2, #20]
 800b5a6:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b5a8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b5ac:	3302      	adds	r3, #2
 800b5ae:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800b5b2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b5b6:	f107 0214 	add.w	r2, r7, #20
 800b5ba:	18d0      	adds	r0, r2, r3
 800b5bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b5c0:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	4949      	ldr	r1, [pc, #292]	; (800b6f0 <Send_Medha_EI_Reply+0x29c>)
 800b5ca:	f01b f92b 	bl	8026824 <memcpy>
	BYTEINC(Outputs);
 800b5ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b5d2:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b5d6:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800b5e2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b5e6:	f107 0214 	add.w	r2, r7, #20
 800b5ea:	18d0      	adds	r0, r2, r3
 800b5ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b5f0:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	493e      	ldr	r1, [pc, #248]	; (800b6f4 <Send_Medha_EI_Reply+0x2a0>)
 800b5fa:	f01b f913 	bl	8026824 <memcpy>
	BYTEINC(Outputs);
 800b5fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b602:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b606:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b60a:	881b      	ldrh	r3, [r3, #0]
 800b60c:	4413      	add	r3, r2
 800b60e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800b612:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b616:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b61a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b61e:	2100      	movs	r1, #0
 800b620:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800b622:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b626:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b62a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b62e:	2100      	movs	r1, #0
 800b630:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800b632:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b636:	3302      	adds	r3, #2
 800b638:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800b63c:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b640:	b29b      	uxth	r3, r3
 800b642:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	b29b      	uxth	r3, r3
 800b64a:	3302      	adds	r3, #2
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b652:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b656:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800b658:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b65c:	f107 0214 	add.w	r2, r7, #20
 800b660:	4413      	add	r3, r2
 800b662:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b666:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800b66a:	8812      	ldrh	r2, [r2, #0]
 800b66c:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800b66e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b672:	f107 0314 	add.w	r3, r7, #20
 800b676:	4619      	mov	r1, r3
 800b678:	2000      	movs	r0, #0
 800b67a:	f000 fe4b 	bl	800c314 <GetCRC32>
 800b67e:	4602      	mov	r2, r0
 800b680:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b684:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b688:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800b68a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b68e:	f107 0214 	add.w	r2, r7, #20
 800b692:	4413      	add	r3, r2
 800b694:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b698:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800b69c:	6812      	ldr	r2, [r2, #0]
 800b69e:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800b6a0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b6b0:	e011      	b.n	800b6d6 <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800b6b2:	4b11      	ldr	r3, [pc, #68]	; (800b6f8 <Send_Medha_EI_Reply+0x2a4>)
 800b6b4:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800b6b8:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b6bc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b6c0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b6c4:	5cd3      	ldrb	r3, [r2, r3]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	f00d ff5a 	bl	8019580 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b6cc:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b6d6:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800b6da:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d3e7      	bcc.n	800b6b2 <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800b6e2:	bf00      	nop
}
 800b6e4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20003c9c 	.word	0x20003c9c
 800b6f0:	20003cb4 	.word	0x20003cb4
 800b6f4:	20003d34 	.word	0x20003d34
 800b6f8:	20000504 	.word	0x20000504

0800b6fc <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800b702:	4b2c      	ldr	r3, [pc, #176]	; (800b7b4 <Send_Relay_Statuses_2_MIE+0xb8>)
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	4618      	mov	r0, r3
 800b708:	f004 fe76 	bl	80103f8 <HAL_Elaps_Ticks>
 800b70c:	4602      	mov	r2, r0
 800b70e:	4b2a      	ldr	r3, [pc, #168]	; (800b7b8 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b710:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800b714:	429a      	cmp	r2, r3
 800b716:	d349      	bcc.n	800b7ac <Send_Relay_Statuses_2_MIE+0xb0>
	{
		uint16_t NoOfInputs = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800b71c:	4b26      	ldr	r3, [pc, #152]	; (800b7b8 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b71e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b722:	f003 0307 	and.w	r3, r3, #7
 800b726:	2b00      	cmp	r3, #0
 800b728:	d007      	beq.n	800b73a <Send_Relay_Statuses_2_MIE+0x3e>
 800b72a:	4b23      	ldr	r3, [pc, #140]	; (800b7b8 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b72c:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b730:	08db      	lsrs	r3, r3, #3
 800b732:	b29b      	uxth	r3, r3
 800b734:	3301      	adds	r3, #1
 800b736:	80fb      	strh	r3, [r7, #6]
 800b738:	e004      	b.n	800b744 <Send_Relay_Statuses_2_MIE+0x48>
 800b73a:	4b1f      	ldr	r3, [pc, #124]	; (800b7b8 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b73c:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b740:	08db      	lsrs	r3, r3, #3
 800b742:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800b744:	f00e f974 	bl	8019a30 <HAL_GetTick>
 800b748:	4603      	mov	r3, r0
 800b74a:	4a1a      	ldr	r2, [pc, #104]	; (800b7b4 <Send_Relay_Statuses_2_MIE+0xb8>)
 800b74c:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800b74e:	481b      	ldr	r0, [pc, #108]	; (800b7bc <Send_Relay_Statuses_2_MIE+0xc0>)
 800b750:	f01b fa14 	bl	8026b7c <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b754:	2300      	movs	r3, #0
 800b756:	603b      	str	r3, [r7, #0]
 800b758:	e01d      	b.n	800b796 <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00e      	beq.n	800b77e <Send_Relay_Statuses_2_MIE+0x82>
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	4b17      	ldr	r3, [pc, #92]	; (800b7c0 <Send_Relay_Statuses_2_MIE+0xc4>)
 800b764:	fba3 2301 	umull	r2, r3, r3, r1
 800b768:	091a      	lsrs	r2, r3, #4
 800b76a:	4613      	mov	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	1aca      	subs	r2, r1, r3
 800b774:	2a00      	cmp	r2, #0
 800b776:	d102      	bne.n	800b77e <Send_Relay_Statuses_2_MIE+0x82>
			{
				printf("\n");
 800b778:	200a      	movs	r0, #10
 800b77a:	f01b f97b 	bl	8026a74 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800b77e:	4a11      	ldr	r2, [pc, #68]	; (800b7c4 <Send_Relay_Statuses_2_MIE+0xc8>)
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	4413      	add	r3, r2
 800b784:	3302      	adds	r3, #2
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	4619      	mov	r1, r3
 800b78a:	480f      	ldr	r0, [pc, #60]	; (800b7c8 <Send_Relay_Statuses_2_MIE+0xcc>)
 800b78c:	f01b f95a 	bl	8026a44 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	3301      	adds	r3, #1
 800b794:	603b      	str	r3, [r7, #0]
 800b796:	88fb      	ldrh	r3, [r7, #6]
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d3dd      	bcc.n	800b75a <Send_Relay_Statuses_2_MIE+0x5e>
		}
		printf("\n");
 800b79e:	200a      	movs	r0, #10
 800b7a0:	f01b f968 	bl	8026a74 <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800b7a4:	f240 1019 	movw	r0, #281	; 0x119
 800b7a8:	f005 fbda 	bl	8010f60 <TransmitCanPkt>
#endif
	}
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	20003df4 	.word	0x20003df4
 800b7b8:	20000504 	.word	0x20000504
 800b7bc:	08029fc4 	.word	0x08029fc4
 800b7c0:	cccccccd 	.word	0xcccccccd
 800b7c4:	20003dc0 	.word	0x20003dc0
 800b7c8:	08029c18 	.word	0x08029c18

0800b7cc <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800b7d2:	4b61      	ldr	r3, [pc, #388]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f004 fe0e 	bl	80103f8 <HAL_Elaps_Ticks>
 800b7dc:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800b7de:	4b5f      	ldr	r3, [pc, #380]	; (800b95c <Process_Clear_Relays+0x190>)
 800b7e0:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b7e4:	4a5d      	ldr	r2, [pc, #372]	; (800b95c <Process_Clear_Relays+0x190>)
 800b7e6:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800b7ea:	fb02 f303 	mul.w	r3, r2, r3
 800b7ee:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800b7f0:	495b      	ldr	r1, [pc, #364]	; (800b960 <Process_Clear_Relays+0x194>)
 800b7f2:	485c      	ldr	r0, [pc, #368]	; (800b964 <Process_Clear_Relays+0x198>)
 800b7f4:	f7f4 fd24 	bl	8000240 <strcmp>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 80a7 	beq.w	800b94e <Process_Clear_Relays+0x182>
	{
		return;
	}

	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d30c      	bcc.n	800b822 <Process_Clear_Relays+0x56>
 800b808:	4b53      	ldr	r3, [pc, #332]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	4b56      	ldr	r3, [pc, #344]	; (800b968 <Process_Clear_Relays+0x19c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	429a      	cmp	r2, r3
 800b812:	d006      	beq.n	800b822 <Process_Clear_Relays+0x56>
 800b814:	4b55      	ldr	r3, [pc, #340]	; (800b96c <Process_Clear_Relays+0x1a0>)
 800b816:	785a      	ldrb	r2, [r3, #1]
 800b818:	4b50      	ldr	r3, [pc, #320]	; (800b95c <Process_Clear_Relays+0x190>)
 800b81a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b81e:	429a      	cmp	r2, r3
 800b820:	d808      	bhi.n	800b834 <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800b822:	4b4d      	ldr	r3, [pc, #308]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d049      	beq.n	800b8be <Process_Clear_Relays+0xf2>
 800b82a:	4b51      	ldr	r3, [pc, #324]	; (800b970 <Process_Clear_Relays+0x1a4>)
 800b82c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b830:	2b00      	cmp	r3, #0
 800b832:	d044      	beq.n	800b8be <Process_Clear_Relays+0xf2>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b834:	4b48      	ldr	r3, [pc, #288]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	4619      	mov	r1, r3
 800b83a:	484e      	ldr	r0, [pc, #312]	; (800b974 <Process_Clear_Relays+0x1a8>)
 800b83c:	f01b f902 	bl	8026a44 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b840:	4b45      	ldr	r3, [pc, #276]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d006      	beq.n	800b85a <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b84c:	4b42      	ldr	r3, [pc, #264]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	f023 0301 	bic.w	r3, r3, #1
 800b854:	b2da      	uxtb	r2, r3
 800b856:	4b40      	ldr	r3, [pc, #256]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b858:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b85a:	4b3f      	ldr	r3, [pc, #252]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b00      	cmp	r3, #0
 800b864:	d006      	beq.n	800b874 <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b866:	4b3c      	ldr	r3, [pc, #240]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	f023 0302 	bic.w	r3, r3, #2
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	4b39      	ldr	r3, [pc, #228]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b872:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b874:	2284      	movs	r2, #132	; 0x84
 800b876:	2100      	movs	r1, #0
 800b878:	483d      	ldr	r0, [pc, #244]	; (800b970 <Process_Clear_Relays+0x1a4>)
 800b87a:	f01a fffb 	bl	8026874 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b87e:	2232      	movs	r2, #50	; 0x32
 800b880:	2100      	movs	r1, #0
 800b882:	483d      	ldr	r0, [pc, #244]	; (800b978 <Process_Clear_Relays+0x1ac>)
 800b884:	f01a fff6 	bl	8026874 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b888:	2284      	movs	r2, #132	; 0x84
 800b88a:	2100      	movs	r1, #0
 800b88c:	483b      	ldr	r0, [pc, #236]	; (800b97c <Process_Clear_Relays+0x1b0>)
 800b88e:	f01a fff1 	bl	8026874 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b892:	2208      	movs	r2, #8
 800b894:	2100      	movs	r1, #0
 800b896:	483a      	ldr	r0, [pc, #232]	; (800b980 <Process_Clear_Relays+0x1b4>)
 800b898:	f01a ffec 	bl	8026874 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b89c:	2208      	movs	r2, #8
 800b89e:	2100      	movs	r1, #0
 800b8a0:	4832      	ldr	r0, [pc, #200]	; (800b96c <Process_Clear_Relays+0x1a0>)
 800b8a2:	f01a ffe7 	bl	8026874 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b8a6:	2208      	movs	r2, #8
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	4836      	ldr	r0, [pc, #216]	; (800b984 <Process_Clear_Relays+0x1b8>)
 800b8ac:	f01a ffe2 	bl	8026874 <memset>
		printf("Cleared Relay Statuses\n");
 800b8b0:	4835      	ldr	r0, [pc, #212]	; (800b988 <Process_Clear_Relays+0x1bc>)
 800b8b2:	f01b f963 	bl	8026b7c <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b8b6:	4b28      	ldr	r3, [pc, #160]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	4a2b      	ldr	r2, [pc, #172]	; (800b968 <Process_Clear_Relays+0x19c>)
 800b8bc:	6013      	str	r3, [r2, #0]
	}


	if((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > (EI_data.Medha_Prms_st.CAN_Xchange_Tout)) && (Medha_CAN_Xchanging_Happening == SET))
 800b8be:	4b33      	ldr	r3, [pc, #204]	; (800b98c <Process_Clear_Relays+0x1c0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f004 fd98 	bl	80103f8 <HAL_Elaps_Ticks>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	4b24      	ldr	r3, [pc, #144]	; (800b95c <Process_Clear_Relays+0x190>)
 800b8cc:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d92a      	bls.n	800b92a <Process_Clear_Relays+0x15e>
 800b8d4:	4b2e      	ldr	r3, [pc, #184]	; (800b990 <Process_Clear_Relays+0x1c4>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d126      	bne.n	800b92a <Process_Clear_Relays+0x15e>
	{
		printf("CAN Exchanging not Happening\n");
 800b8dc:	482d      	ldr	r0, [pc, #180]	; (800b994 <Process_Clear_Relays+0x1c8>)
 800b8de:	f01b f94d 	bl	8026b7c <puts>
		Medha_CAN_Xchanging_Happening = RESET;
 800b8e2:	4b2b      	ldr	r3, [pc, #172]	; (800b990 <Process_Clear_Relays+0x1c4>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	701a      	strb	r2, [r3, #0]
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b8e8:	2284      	movs	r2, #132	; 0x84
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	4820      	ldr	r0, [pc, #128]	; (800b970 <Process_Clear_Relays+0x1a4>)
 800b8ee:	f01a ffc1 	bl	8026874 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b8f2:	2232      	movs	r2, #50	; 0x32
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4820      	ldr	r0, [pc, #128]	; (800b978 <Process_Clear_Relays+0x1ac>)
 800b8f8:	f01a ffbc 	bl	8026874 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b8fc:	2284      	movs	r2, #132	; 0x84
 800b8fe:	2100      	movs	r1, #0
 800b900:	481e      	ldr	r0, [pc, #120]	; (800b97c <Process_Clear_Relays+0x1b0>)
 800b902:	f01a ffb7 	bl	8026874 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b906:	2208      	movs	r2, #8
 800b908:	2100      	movs	r1, #0
 800b90a:	481d      	ldr	r0, [pc, #116]	; (800b980 <Process_Clear_Relays+0x1b4>)
 800b90c:	f01a ffb2 	bl	8026874 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b910:	2208      	movs	r2, #8
 800b912:	2100      	movs	r1, #0
 800b914:	4815      	ldr	r0, [pc, #84]	; (800b96c <Process_Clear_Relays+0x1a0>)
 800b916:	f01a ffad 	bl	8026874 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b91a:	2208      	movs	r2, #8
 800b91c:	2100      	movs	r1, #0
 800b91e:	4819      	ldr	r0, [pc, #100]	; (800b984 <Process_Clear_Relays+0x1b8>)
 800b920:	f01a ffa8 	bl	8026874 <memset>
		printf("Cleared Relay Statuses\n");
 800b924:	4818      	ldr	r0, [pc, #96]	; (800b988 <Process_Clear_Relays+0x1bc>)
 800b926:	f01b f929 	bl	8026b7c <puts>
	}


	if( ((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) < (EI_data.Medha_Prms_st.CAN_Xchange_Tout))) && (Medha_CAN_Xchanging_Happening == SET))
 800b92a:	4b18      	ldr	r3, [pc, #96]	; (800b98c <Process_Clear_Relays+0x1c0>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4618      	mov	r0, r3
 800b930:	f004 fd62 	bl	80103f8 <HAL_Elaps_Ticks>
 800b934:	4602      	mov	r2, r0
 800b936:	4b09      	ldr	r3, [pc, #36]	; (800b95c <Process_Clear_Relays+0x190>)
 800b938:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d207      	bcs.n	800b950 <Process_Clear_Relays+0x184>
 800b940:	4b13      	ldr	r3, [pc, #76]	; (800b990 <Process_Clear_Relays+0x1c4>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d103      	bne.n	800b950 <Process_Clear_Relays+0x184>
	{
		Blink_S2();
 800b948:	f00a fd96 	bl	8016478 <Blink_S2>
 800b94c:	e000      	b.n	800b950 <Process_Clear_Relays+0x184>
		return;
 800b94e:	bf00      	nop
	}


}
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20003df4 	.word	0x20003df4
 800b95c:	20000504 	.word	0x20000504
 800b960:	08029c78 	.word	0x08029c78
 800b964:	20000505 	.word	0x20000505
 800b968:	20003fb4 	.word	0x20003fb4
 800b96c:	20003e0c 	.word	0x20003e0c
 800b970:	20003e1c 	.word	0x20003e1c
 800b974:	08029fd8 	.word	0x08029fd8
 800b978:	20003dc0 	.word	0x20003dc0
 800b97c:	20003f24 	.word	0x20003f24
 800b980:	20003e04 	.word	0x20003e04
 800b984:	20003e14 	.word	0x20003e14
 800b988:	0802a008 	.word	0x0802a008
 800b98c:	200038ac 	.word	0x200038ac
 800b990:	200038a8 	.word	0x200038a8
 800b994:	0802a020 	.word	0x0802a020

0800b998 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800b99c:	4b26      	ldr	r3, [pc, #152]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f004 fd29 	bl	80103f8 <HAL_Elaps_Ticks>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	4b24      	ldr	r3, [pc, #144]	; (800ba3c <Send_Data_to_Other+0xa4>)
 800b9aa:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b9ae:	4923      	ldr	r1, [pc, #140]	; (800ba3c <Send_Data_to_Other+0xa4>)
 800b9b0:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800b9b4:	fb01 f303 	mul.w	r3, r1, r3
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d306      	bcc.n	800b9ca <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800b9bc:	4b20      	ldr	r3, [pc, #128]	; (800ba40 <Send_Data_to_Other+0xa8>)
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800b9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <Send_Data_to_Other+0xa8>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800b9ca:	4b1b      	ldr	r3, [pc, #108]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f004 fd12 	bl	80103f8 <HAL_Elaps_Ticks>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	4b19      	ldr	r3, [pc, #100]	; (800ba3c <Send_Data_to_Other+0xa4>)
 800b9d8:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d90e      	bls.n	800b9fe <Send_Data_to_Other+0x66>
 800b9e0:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	4b17      	ldr	r3, [pc, #92]	; (800ba44 <Send_Data_to_Other+0xac>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d008      	beq.n	800b9fe <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b9ec:	4b12      	ldr	r3, [pc, #72]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	4a14      	ldr	r2, [pc, #80]	; (800ba44 <Send_Data_to_Other+0xac>)
 800b9f2:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800b9f4:	f240 2001 	movw	r0, #513	; 0x201
 800b9f8:	f005 fab2 	bl	8010f60 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800b9fc:	e01a      	b.n	800ba34 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800b9fe:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <Send_Data_to_Other+0xb0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f004 fcf8 	bl	80103f8 <HAL_Elaps_Ticks>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba0e:	d911      	bls.n	800ba34 <Send_Data_to_Other+0x9c>
 800ba10:	4b09      	ldr	r3, [pc, #36]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f004 fcef 	bl	80103f8 <HAL_Elaps_Ticks>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ba20:	d908      	bls.n	800ba34 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800ba22:	f00e f805 	bl	8019a30 <HAL_GetTick>
 800ba26:	4603      	mov	r3, r0
 800ba28:	4a07      	ldr	r2, [pc, #28]	; (800ba48 <Send_Data_to_Other+0xb0>)
 800ba2a:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800ba2c:	f240 2001 	movw	r0, #513	; 0x201
 800ba30:	f005 fa96 	bl	8010f60 <TransmitCanPkt>
}
 800ba34:	bf00      	nop
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	20003df4 	.word	0x20003df4
 800ba3c:	20000504 	.word	0x20000504
 800ba40:	20003e04 	.word	0x20003e04
 800ba44:	20003fb8 	.word	0x20003fb8
 800ba48:	20003fbc 	.word	0x20003fbc

0800ba4c <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800ba4c:	b5b0      	push	{r4, r5, r7, lr}
 800ba4e:	af00      	add	r7, sp, #0


	if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 800ba50:	499a      	ldr	r1, [pc, #616]	; (800bcbc <Process_Data_from_Other+0x270>)
 800ba52:	489b      	ldr	r0, [pc, #620]	; (800bcc0 <Process_Data_from_Other+0x274>)
 800ba54:	f7f4 fbf4 	bl	8000240 <strcmp>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 812b 	beq.w	800bcb6 <Process_Data_from_Other+0x26a>
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800ba60:	4b98      	ldr	r3, [pc, #608]	; (800bcc4 <Process_Data_from_Other+0x278>)
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	4b98      	ldr	r3, [pc, #608]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d109      	bne.n	800ba80 <Process_Data_from_Other+0x34>
 800ba6c:	4b95      	ldr	r3, [pc, #596]	; (800bcc4 <Process_Data_from_Other+0x278>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f004 fcc1 	bl	80103f8 <HAL_Elaps_Ticks>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba7c:	f0c0 80e4 	bcc.w	800bc48 <Process_Data_from_Other+0x1fc>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800ba80:	f00d ffd6 	bl	8019a30 <HAL_GetTick>
 800ba84:	4603      	mov	r3, r0
 800ba86:	4a8f      	ldr	r2, [pc, #572]	; (800bcc4 <Process_Data_from_Other+0x278>)
 800ba88:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800ba8a:	4b90      	ldr	r3, [pc, #576]	; (800bccc <Process_Data_from_Other+0x280>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d007      	beq.n	800baa2 <Process_Data_from_Other+0x56>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800ba92:	4b8f      	ldr	r3, [pc, #572]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	f043 0301 	orr.w	r3, r3, #1
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	4b8c      	ldr	r3, [pc, #560]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800ba9e:	701a      	strb	r2, [r3, #0]
 800baa0:	e006      	b.n	800bab0 <Process_Data_from_Other+0x64>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800baa2:	4b8b      	ldr	r3, [pc, #556]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	f023 0301 	bic.w	r3, r3, #1
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	4b88      	ldr	r3, [pc, #544]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800baae:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800bab0:	4b88      	ldr	r3, [pc, #544]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d007      	beq.n	800bac8 <Process_Data_from_Other+0x7c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800bab8:	4b85      	ldr	r3, [pc, #532]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	f043 0302 	orr.w	r3, r3, #2
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	4b83      	ldr	r3, [pc, #524]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800bac4:	701a      	strb	r2, [r3, #0]
 800bac6:	e006      	b.n	800bad6 <Process_Data_from_Other+0x8a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800bac8:	4b81      	ldr	r3, [pc, #516]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f023 0302 	bic.w	r3, r3, #2
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	4b7f      	ldr	r3, [pc, #508]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800bad4:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800bad6:	4b7e      	ldr	r3, [pc, #504]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	2b03      	cmp	r3, #3
 800badc:	f200 809a 	bhi.w	800bc14 <Process_Data_from_Other+0x1c8>
 800bae0:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <Process_Data_from_Other+0x9c>)
 800bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae6:	bf00      	nop
 800bae8:	0800baf9 	.word	0x0800baf9
 800baec:	0800bb89 	.word	0x0800bb89
 800baf0:	0800bb07 	.word	0x0800bb07
 800baf4:	0800bbd9 	.word	0x0800bbd9
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800baf8:	4b74      	ldr	r3, [pc, #464]	; (800bccc <Process_Data_from_Other+0x280>)
 800bafa:	785b      	ldrb	r3, [r3, #1]
 800bafc:	3301      	adds	r3, #1
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	4b72      	ldr	r3, [pc, #456]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb02:	705a      	strb	r2, [r3, #1]
			break;
 800bb04:	e086      	b.n	800bc14 <Process_Data_from_Other+0x1c8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800bb06:	4b73      	ldr	r3, [pc, #460]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	4b70      	ldr	r3, [pc, #448]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d02f      	beq.n	800bb72 <Process_Data_from_Other+0x126>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800bb12:	4b71      	ldr	r3, [pc, #452]	; (800bcd8 <Process_Data_from_Other+0x28c>)
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d179      	bne.n	800bc0e <Process_Data_from_Other+0x1c2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800bb1a:	4b6c      	ldr	r3, [pc, #432]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	486e      	ldr	r0, [pc, #440]	; (800bcdc <Process_Data_from_Other+0x290>)
 800bb22:	f01a ff8f 	bl	8026a44 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800bb26:	4b6b      	ldr	r3, [pc, #428]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	486c      	ldr	r0, [pc, #432]	; (800bce0 <Process_Data_from_Other+0x294>)
 800bb2e:	f01a ff89 	bl	8026a44 <iprintf>
					Received_CAN_Relay_Status=NO;
 800bb32:	4b69      	ldr	r3, [pc, #420]	; (800bcd8 <Process_Data_from_Other+0x28c>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800bb38:	486a      	ldr	r0, [pc, #424]	; (800bce4 <Process_Data_from_Other+0x298>)
 800bb3a:	f01b f81f 	bl	8026b7c <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800bb3e:	4a6a      	ldr	r2, [pc, #424]	; (800bce8 <Process_Data_from_Other+0x29c>)
 800bb40:	4b6a      	ldr	r3, [pc, #424]	; (800bcec <Process_Data_from_Other+0x2a0>)
 800bb42:	4610      	mov	r0, r2
 800bb44:	4619      	mov	r1, r3
 800bb46:	2384      	movs	r3, #132	; 0x84
 800bb48:	461a      	mov	r2, r3
 800bb4a:	f01a fe6b 	bl	8026824 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800bb4e:	4a68      	ldr	r2, [pc, #416]	; (800bcf0 <Process_Data_from_Other+0x2a4>)
 800bb50:	4b65      	ldr	r3, [pc, #404]	; (800bce8 <Process_Data_from_Other+0x29c>)
 800bb52:	4614      	mov	r4, r2
 800bb54:	461d      	mov	r5, r3
 800bb56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb62:	682b      	ldr	r3, [r5, #0]
 800bb64:	8023      	strh	r3, [r4, #0]
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800bb66:	4b60      	ldr	r3, [pc, #384]	; (800bce8 <Process_Data_from_Other+0x29c>)
 800bb68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb6c:	4a57      	ldr	r2, [pc, #348]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb6e:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800bb70:	e04d      	b.n	800bc0e <Process_Data_from_Other+0x1c2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800bb72:	4b56      	ldr	r3, [pc, #344]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bb78:	4b5e      	ldr	r3, [pc, #376]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	f023 0301 	bic.w	r3, r3, #1
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	4b5c      	ldr	r3, [pc, #368]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bb84:	701a      	strb	r2, [r3, #0]
			break;
 800bb86:	e042      	b.n	800bc0e <Process_Data_from_Other+0x1c2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800bb88:	4b52      	ldr	r3, [pc, #328]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	4b4f      	ldr	r3, [pc, #316]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d016      	beq.n	800bbc2 <Process_Data_from_Other+0x176>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800bb94:	4858      	ldr	r0, [pc, #352]	; (800bcf8 <Process_Data_from_Other+0x2ac>)
 800bb96:	f01a fff1 	bl	8026b7c <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800bb9a:	4b4c      	ldr	r3, [pc, #304]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb9c:	785b      	ldrb	r3, [r3, #1]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	4b4a      	ldr	r3, [pc, #296]	; (800bccc <Process_Data_from_Other+0x280>)
 800bba4:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800bba6:	4b49      	ldr	r3, [pc, #292]	; (800bccc <Process_Data_from_Other+0x280>)
 800bba8:	785b      	ldrb	r3, [r3, #1]
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d931      	bls.n	800bc12 <Process_Data_from_Other+0x1c6>
 800bbae:	4b4e      	ldr	r3, [pc, #312]	; (800bce8 <Process_Data_from_Other+0x29c>)
 800bbb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d02c      	beq.n	800bc12 <Process_Data_from_Other+0x1c6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800bbb8:	f240 2007 	movw	r0, #519	; 0x207
 800bbbc:	f005 f9d0 	bl	8010f60 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800bbc0:	e027      	b.n	800bc12 <Process_Data_from_Other+0x1c6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bbc2:	4b4c      	ldr	r3, [pc, #304]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	f023 0301 	bic.w	r3, r3, #1
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	4b49      	ldr	r3, [pc, #292]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bbce:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800bbd0:	4b3e      	ldr	r3, [pc, #248]	; (800bccc <Process_Data_from_Other+0x280>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	705a      	strb	r2, [r3, #1]
			break;
 800bbd6:	e01c      	b.n	800bc12 <Process_Data_from_Other+0x1c6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800bbd8:	4b3e      	ldr	r3, [pc, #248]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	4b3b      	ldr	r3, [pc, #236]	; (800bccc <Process_Data_from_Other+0x280>)
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d009      	beq.n	800bbf8 <Process_Data_from_Other+0x1ac>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800bbe4:	4844      	ldr	r0, [pc, #272]	; (800bcf8 <Process_Data_from_Other+0x2ac>)
 800bbe6:	f01a ffc9 	bl	8026b7c <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800bbea:	4b38      	ldr	r3, [pc, #224]	; (800bccc <Process_Data_from_Other+0x280>)
 800bbec:	785b      	ldrb	r3, [r3, #1]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	4b36      	ldr	r3, [pc, #216]	; (800bccc <Process_Data_from_Other+0x280>)
 800bbf4:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800bbf6:	e00d      	b.n	800bc14 <Process_Data_from_Other+0x1c8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bbf8:	4b3e      	ldr	r3, [pc, #248]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	f023 0301 	bic.w	r3, r3, #1
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	4b3c      	ldr	r3, [pc, #240]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc04:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800bc06:	4b31      	ldr	r3, [pc, #196]	; (800bccc <Process_Data_from_Other+0x280>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	705a      	strb	r2, [r3, #1]
			break;
 800bc0c:	e002      	b.n	800bc14 <Process_Data_from_Other+0x1c8>
			break;
 800bc0e:	bf00      	nop
 800bc10:	e000      	b.n	800bc14 <Process_Data_from_Other+0x1c8>
			break;
 800bc12:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800bc14:	4b2d      	ldr	r3, [pc, #180]	; (800bccc <Process_Data_from_Other+0x280>)
 800bc16:	785a      	ldrb	r2, [r3, #1]
 800bc18:	4b38      	ldr	r3, [pc, #224]	; (800bcfc <Process_Data_from_Other+0x2b0>)
 800bc1a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d312      	bcc.n	800bc48 <Process_Data_from_Other+0x1fc>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800bc22:	4b34      	ldr	r3, [pc, #208]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10c      	bne.n	800bc48 <Process_Data_from_Other+0x1fc>
			{
				printf("MisMatch Count Reached\n");
 800bc2e:	4834      	ldr	r0, [pc, #208]	; (800bd00 <Process_Data_from_Other+0x2b4>)
 800bc30:	f01a ffa4 	bl	8026b7c <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800bc34:	4b25      	ldr	r3, [pc, #148]	; (800bccc <Process_Data_from_Other+0x280>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bc3a:	4b2e      	ldr	r3, [pc, #184]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	f043 0301 	orr.w	r3, r3, #1
 800bc42:	b2da      	uxtb	r2, r3
 800bc44:	4b2b      	ldr	r3, [pc, #172]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc46:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800bc48:	4b1f      	ldr	r3, [pc, #124]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f004 fbd3 	bl	80103f8 <HAL_Elaps_Ticks>
 800bc52:	4602      	mov	r2, r0
 800bc54:	4b29      	ldr	r3, [pc, #164]	; (800bcfc <Process_Data_from_Other+0x2b0>)
 800bc56:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d92c      	bls.n	800bcb8 <Process_Data_from_Other+0x26c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800bc5e:	4b29      	ldr	r3, [pc, #164]	; (800bd04 <Process_Data_from_Other+0x2b8>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	4b19      	ldr	r3, [pc, #100]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d026      	beq.n	800bcb8 <Process_Data_from_Other+0x26c>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800bc6a:	4b17      	ldr	r3, [pc, #92]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a25      	ldr	r2, [pc, #148]	; (800bd04 <Process_Data_from_Other+0x2b8>)
 800bc70:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f004 fbbe 	bl	80103f8 <HAL_Elaps_Ticks>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	4a22      	ldr	r2, [pc, #136]	; (800bd08 <Process_Data_from_Other+0x2bc>)
 800bc80:	fba2 2303 	umull	r2, r3, r2, r3
 800bc84:	099b      	lsrs	r3, r3, #6
 800bc86:	4619      	mov	r1, r3
 800bc88:	4820      	ldr	r0, [pc, #128]	; (800bd0c <Process_Data_from_Other+0x2c0>)
 800bc8a:	f01a fedb 	bl	8026a44 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800bc8e:	4b0e      	ldr	r3, [pc, #56]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4619      	mov	r1, r3
 800bc94:	481e      	ldr	r0, [pc, #120]	; (800bd10 <Process_Data_from_Other+0x2c4>)
 800bc96:	f01a fed5 	bl	8026a44 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800bc9a:	4b16      	ldr	r3, [pc, #88]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	f003 0302 	and.w	r3, r3, #2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d108      	bne.n	800bcb8 <Process_Data_from_Other+0x26c>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bca6:	4b13      	ldr	r3, [pc, #76]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	f043 0302 	orr.w	r3, r3, #2
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	4b10      	ldr	r3, [pc, #64]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bcb2:	701a      	strb	r2, [r3, #0]
 800bcb4:	e000      	b.n	800bcb8 <Process_Data_from_Other+0x26c>
		return;
 800bcb6:	bf00      	nop
			}
		}
	}
}
 800bcb8:	bdb0      	pop	{r4, r5, r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	08029c78 	.word	0x08029c78
 800bcc0:	20000505 	.word	0x20000505
 800bcc4:	20003fc0 	.word	0x20003fc0
 800bcc8:	200038ac 	.word	0x200038ac
 800bccc:	20003e04 	.word	0x20003e04
 800bcd0:	200038aa 	.word	0x200038aa
 800bcd4:	20003e0c 	.word	0x20003e0c
 800bcd8:	200038a9 	.word	0x200038a9
 800bcdc:	0802a040 	.word	0x0802a040
 800bce0:	0802a058 	.word	0x0802a058
 800bce4:	0802a070 	.word	0x0802a070
 800bce8:	20003e1c 	.word	0x20003e1c
 800bcec:	20003ea0 	.word	0x20003ea0
 800bcf0:	20003dc0 	.word	0x20003dc0
 800bcf4:	20003df4 	.word	0x20003df4
 800bcf8:	0802a0a4 	.word	0x0802a0a4
 800bcfc:	20000504 	.word	0x20000504
 800bd00:	0802a0c8 	.word	0x0802a0c8
 800bd04:	20003fc4 	.word	0x20003fc4
 800bd08:	10624dd3 	.word	0x10624dd3
 800bd0c:	0802a0e0 	.word	0x0802a0e0
 800bd10:	0802a110 	.word	0x0802a110

0800bd14 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800bd18:	482a      	ldr	r0, [pc, #168]	; (800bdc4 <Print_Medha_Self_Details+0xb0>)
 800bd1a:	f01a ff2f 	bl	8026b7c <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800bd1e:	4b2a      	ldr	r3, [pc, #168]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd20:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800bd24:	4619      	mov	r1, r3
 800bd26:	4829      	ldr	r0, [pc, #164]	; (800bdcc <Print_Medha_Self_Details+0xb8>)
 800bd28:	f01a fe8c 	bl	8026a44 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800bd2c:	4b26      	ldr	r3, [pc, #152]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd2e:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800bd32:	4619      	mov	r1, r3
 800bd34:	4826      	ldr	r0, [pc, #152]	; (800bdd0 <Print_Medha_Self_Details+0xbc>)
 800bd36:	f01a fe85 	bl	8026a44 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800bd3a:	4b23      	ldr	r3, [pc, #140]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd3c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bd40:	4619      	mov	r1, r3
 800bd42:	4824      	ldr	r0, [pc, #144]	; (800bdd4 <Print_Medha_Self_Details+0xc0>)
 800bd44:	f01a fe7e 	bl	8026a44 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800bd48:	4b1f      	ldr	r3, [pc, #124]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd4a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4821      	ldr	r0, [pc, #132]	; (800bdd8 <Print_Medha_Self_Details+0xc4>)
 800bd52:	f01a fe77 	bl	8026a44 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800bd56:	4b1c      	ldr	r3, [pc, #112]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd58:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	481f      	ldr	r0, [pc, #124]	; (800bddc <Print_Medha_Self_Details+0xc8>)
 800bd60:	f01a fe70 	bl	8026a44 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800bd64:	4b18      	ldr	r3, [pc, #96]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd66:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	481c      	ldr	r0, [pc, #112]	; (800bde0 <Print_Medha_Self_Details+0xcc>)
 800bd6e:	f01a fe69 	bl	8026a44 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800bd72:	4b15      	ldr	r3, [pc, #84]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd74:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bd78:	4619      	mov	r1, r3
 800bd7a:	481a      	ldr	r0, [pc, #104]	; (800bde4 <Print_Medha_Self_Details+0xd0>)
 800bd7c:	f01a fe62 	bl	8026a44 <iprintf>
	printf("NoofRelays                    :%lu\n",EI_data.Medha_Prms_st.NoofRelays);
 800bd80:	4b11      	ldr	r3, [pc, #68]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd82:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800bd86:	4619      	mov	r1, r3
 800bd88:	4817      	ldr	r0, [pc, #92]	; (800bde8 <Print_Medha_Self_Details+0xd4>)
 800bd8a:	f01a fe5b 	bl	8026a44 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800bd8e:	4b0e      	ldr	r3, [pc, #56]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd90:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800bd94:	4619      	mov	r1, r3
 800bd96:	4815      	ldr	r0, [pc, #84]	; (800bdec <Print_Medha_Self_Details+0xd8>)
 800bd98:	f01a fe54 	bl	8026a44 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800bd9c:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd9e:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800bda2:	4619      	mov	r1, r3
 800bda4:	4812      	ldr	r0, [pc, #72]	; (800bdf0 <Print_Medha_Self_Details+0xdc>)
 800bda6:	f01a fe4d 	bl	8026a44 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800bdaa:	4b07      	ldr	r3, [pc, #28]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bdac:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	4810      	ldr	r0, [pc, #64]	; (800bdf4 <Print_Medha_Self_Details+0xe0>)
 800bdb4:	f01a fe46 	bl	8026a44 <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800bdb8:	4802      	ldr	r0, [pc, #8]	; (800bdc4 <Print_Medha_Self_Details+0xb0>)
 800bdba:	f01a fedf 	bl	8026b7c <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800bdbe:	bf00      	nop
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	0802a138 	.word	0x0802a138
 800bdc8:	20000504 	.word	0x20000504
 800bdcc:	0802a18c 	.word	0x0802a18c
 800bdd0:	0802a1b0 	.word	0x0802a1b0
 800bdd4:	0802a1d4 	.word	0x0802a1d4
 800bdd8:	0802a1f8 	.word	0x0802a1f8
 800bddc:	0802a21c 	.word	0x0802a21c
 800bde0:	0802a240 	.word	0x0802a240
 800bde4:	0802a264 	.word	0x0802a264
 800bde8:	0802a288 	.word	0x0802a288
 800bdec:	0802a2ac 	.word	0x0802a2ac
 800bdf0:	0802a2d0 	.word	0x0802a2d0
 800bdf4:	0802a2f4 	.word	0x0802a2f4

0800bdf8 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b09a      	sub	sp, #104	; 0x68
 800bdfc:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800bdfe:	2300      	movs	r3, #0
 800be00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800be10:	2300      	movs	r3, #0
 800be12:	603b      	str	r3, [r7, #0]
 800be14:	1d3b      	adds	r3, r7, #4
 800be16:	2260      	movs	r2, #96	; 0x60
 800be18:	2100      	movs	r1, #0
 800be1a:	4618      	mov	r0, r3
 800be1c:	f01a fd2a 	bl	8026874 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800be20:	4bb9      	ldr	r3, [pc, #740]	; (800c108 <CheckforMedhaCMD+0x310>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4618      	mov	r0, r3
 800be26:	f004 fae7 	bl	80103f8 <HAL_Elaps_Ticks>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b09      	cmp	r3, #9
 800be2e:	f240 81ad 	bls.w	800c18c <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800be32:	e010      	b.n	800be56 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800be34:	2000      	movs	r0, #0
 800be36:	f00d fad3 	bl	80193e0 <Com_Get_Byte>
 800be3a:	4603      	mov	r3, r0
 800be3c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800be40:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800be4a:	3368      	adds	r3, #104	; 0x68
 800be4c:	443b      	add	r3, r7
 800be4e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800be52:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800be56:	2000      	movs	r0, #0
 800be58:	f00d fa82 	bl	8019360 <Com_DataReady>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1e8      	bne.n	800be34 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800be62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 8144 	beq.w	800c0f4 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800be6c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800be70:	3368      	adds	r3, #104	; 0x68
 800be72:	443b      	add	r3, r7
 800be74:	2200      	movs	r2, #0
 800be76:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800be7a:	463b      	mov	r3, r7
 800be7c:	4619      	mov	r1, r3
 800be7e:	48a3      	ldr	r0, [pc, #652]	; (800c10c <CheckforMedhaCMD+0x314>)
 800be80:	f01a fde0 	bl	8026a44 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800be84:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800be88:	463b      	mov	r3, r7
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 fa0d 	bl	800c2ac <Is_MedhaCommand_Valid>
 800be92:	4603      	mov	r3, r0
 800be94:	2b0c      	cmp	r3, #12
 800be96:	f200 8129 	bhi.w	800c0ec <CheckforMedhaCMD+0x2f4>
 800be9a:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <CheckforMedhaCMD+0xa8>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800bed5 	.word	0x0800bed5
 800bea4:	0800bee3 	.word	0x0800bee3
 800bea8:	0800bf47 	.word	0x0800bf47
 800beac:	0800bf69 	.word	0x0800bf69
 800beb0:	0800bf91 	.word	0x0800bf91
 800beb4:	0800bfb9 	.word	0x0800bfb9
 800beb8:	0800bfe1 	.word	0x0800bfe1
 800bebc:	0800c009 	.word	0x0800c009
 800bec0:	0800c031 	.word	0x0800c031
 800bec4:	0800c059 	.word	0x0800c059
 800bec8:	0800c081 	.word	0x0800c081
 800becc:	0800c0a9 	.word	0x0800c0a9
 800bed0:	0800c0d1 	.word	0x0800c0d1
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800bed4:	4b8e      	ldr	r3, [pc, #568]	; (800c110 <CheckforMedhaCMD+0x318>)
 800bed6:	2201      	movs	r2, #1
 800bed8:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800beda:	488e      	ldr	r0, [pc, #568]	; (800c114 <CheckforMedhaCMD+0x31c>)
 800bedc:	f01a fe4e 	bl	8026b7c <puts>
				break;
 800bee0:	e109      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800bee2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bee6:	3b01      	subs	r3, #1
 800bee8:	3368      	adds	r3, #104	; 0x68
 800beea:	443b      	add	r3, r7
 800beec:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bef0:	3b30      	subs	r3, #48	; 0x30
 800bef2:	461a      	mov	r2, r3
 800bef4:	4988      	ldr	r1, [pc, #544]	; (800c118 <CheckforMedhaCMD+0x320>)
 800bef6:	4889      	ldr	r0, [pc, #548]	; (800c11c <CheckforMedhaCMD+0x324>)
 800bef8:	f01a fda4 	bl	8026a44 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800befc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bf00:	3b01      	subs	r3, #1
 800bf02:	3368      	adds	r3, #104	; 0x68
 800bf04:	443b      	add	r3, r7
 800bf06:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bf0a:	2b2f      	cmp	r3, #47	; 0x2f
 800bf0c:	d914      	bls.n	800bf38 <CheckforMedhaCMD+0x140>
 800bf0e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bf12:	3b01      	subs	r3, #1
 800bf14:	3368      	adds	r3, #104	; 0x68
 800bf16:	443b      	add	r3, r7
 800bf18:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bf1c:	2b32      	cmp	r3, #50	; 0x32
 800bf1e:	d80b      	bhi.n	800bf38 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800bf20:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bf24:	3b01      	subs	r3, #1
 800bf26:	3368      	adds	r3, #104	; 0x68
 800bf28:	443b      	add	r3, r7
 800bf2a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bf2e:	3b30      	subs	r3, #48	; 0x30
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	4b7b      	ldr	r3, [pc, #492]	; (800c120 <CheckforMedhaCMD+0x328>)
 800bf34:	701a      	strb	r2, [r3, #0]
 800bf36:	e002      	b.n	800bf3e <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800bf38:	487a      	ldr	r0, [pc, #488]	; (800c124 <CheckforMedhaCMD+0x32c>)
 800bf3a:	f01a fe1f 	bl	8026b7c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf44:	e0d7      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800bf46:	4978      	ldr	r1, [pc, #480]	; (800c128 <CheckforMedhaCMD+0x330>)
 800bf48:	4878      	ldr	r0, [pc, #480]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bf4a:	f01a fd7b 	bl	8026a44 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800bf4e:	4878      	ldr	r0, [pc, #480]	; (800c130 <CheckforMedhaCMD+0x338>)
 800bf50:	f01a fe14 	bl	8026b7c <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bf54:	4b77      	ldr	r3, [pc, #476]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f043 0301 	orr.w	r3, r3, #1
 800bf5c:	4a75      	ldr	r2, [pc, #468]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf5e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bf60:	2301      	movs	r3, #1
 800bf62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf66:	e0c6      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800bf68:	4973      	ldr	r1, [pc, #460]	; (800c138 <CheckforMedhaCMD+0x340>)
 800bf6a:	4870      	ldr	r0, [pc, #448]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bf6c:	f01a fd6a 	bl	8026a44 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800bf70:	4872      	ldr	r0, [pc, #456]	; (800c13c <CheckforMedhaCMD+0x344>)
 800bf72:	f01a fe03 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bf76:	4b6f      	ldr	r3, [pc, #444]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bf7c:	4b6d      	ldr	r3, [pc, #436]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f043 0302 	orr.w	r3, r3, #2
 800bf84:	4a6b      	ldr	r2, [pc, #428]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf86:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf8e:	e0b2      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800bf90:	496b      	ldr	r1, [pc, #428]	; (800c140 <CheckforMedhaCMD+0x348>)
 800bf92:	4866      	ldr	r0, [pc, #408]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bf94:	f01a fd56 	bl	8026a44 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800bf98:	486a      	ldr	r0, [pc, #424]	; (800c144 <CheckforMedhaCMD+0x34c>)
 800bf9a:	f01a fdef 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bf9e:	4b65      	ldr	r3, [pc, #404]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bfa4:	4b63      	ldr	r3, [pc, #396]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f043 0304 	orr.w	r3, r3, #4
 800bfac:	4a61      	ldr	r2, [pc, #388]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfae:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bfb6:	e09e      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800bfb8:	4963      	ldr	r1, [pc, #396]	; (800c148 <CheckforMedhaCMD+0x350>)
 800bfba:	485c      	ldr	r0, [pc, #368]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bfbc:	f01a fd42 	bl	8026a44 <iprintf>
				printf("INVALID_DES_PORT\n");
 800bfc0:	4862      	ldr	r0, [pc, #392]	; (800c14c <CheckforMedhaCMD+0x354>)
 800bfc2:	f01a fddb 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bfc6:	4b5b      	ldr	r3, [pc, #364]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bfcc:	4b59      	ldr	r3, [pc, #356]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f043 0308 	orr.w	r3, r3, #8
 800bfd4:	4a57      	ldr	r2, [pc, #348]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfd6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bfde:	e08a      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800bfe0:	495b      	ldr	r1, [pc, #364]	; (800c150 <CheckforMedhaCMD+0x358>)
 800bfe2:	4852      	ldr	r0, [pc, #328]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bfe4:	f01a fd2e 	bl	8026a44 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800bfe8:	485a      	ldr	r0, [pc, #360]	; (800c154 <CheckforMedhaCMD+0x35c>)
 800bfea:	f01a fdc7 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bfee:	4b51      	ldr	r3, [pc, #324]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bff4:	4b4f      	ldr	r3, [pc, #316]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f043 0310 	orr.w	r3, r3, #16
 800bffc:	4a4d      	ldr	r2, [pc, #308]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bffe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c000:	2301      	movs	r3, #1
 800c002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c006:	e076      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800c008:	4953      	ldr	r1, [pc, #332]	; (800c158 <CheckforMedhaCMD+0x360>)
 800c00a:	4848      	ldr	r0, [pc, #288]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c00c:	f01a fd1a 	bl	8026a44 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800c010:	4852      	ldr	r0, [pc, #328]	; (800c15c <CheckforMedhaCMD+0x364>)
 800c012:	f01a fdb3 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c016:	4b47      	ldr	r3, [pc, #284]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c018:	2200      	movs	r2, #0
 800c01a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c01c:	4b45      	ldr	r3, [pc, #276]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f043 0320 	orr.w	r3, r3, #32
 800c024:	4a43      	ldr	r2, [pc, #268]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c026:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c028:	2301      	movs	r3, #1
 800c02a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c02e:	e062      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800c030:	494b      	ldr	r1, [pc, #300]	; (800c160 <CheckforMedhaCMD+0x368>)
 800c032:	484c      	ldr	r0, [pc, #304]	; (800c164 <CheckforMedhaCMD+0x36c>)
 800c034:	f01a fd06 	bl	8026a44 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800c038:	484b      	ldr	r0, [pc, #300]	; (800c168 <CheckforMedhaCMD+0x370>)
 800c03a:	f01a fd9f 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c03e:	4b3d      	ldr	r3, [pc, #244]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c040:	2200      	movs	r2, #0
 800c042:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c044:	4b3b      	ldr	r3, [pc, #236]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c04c:	4a39      	ldr	r2, [pc, #228]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c04e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c050:	2301      	movs	r3, #1
 800c052:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c056:	e04e      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800c058:	4944      	ldr	r1, [pc, #272]	; (800c16c <CheckforMedhaCMD+0x374>)
 800c05a:	4834      	ldr	r0, [pc, #208]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c05c:	f01a fcf2 	bl	8026a44 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800c060:	4843      	ldr	r0, [pc, #268]	; (800c170 <CheckforMedhaCMD+0x378>)
 800c062:	f01a fd8b 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c066:	4b33      	ldr	r3, [pc, #204]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c06c:	4b31      	ldr	r3, [pc, #196]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c074:	4a2f      	ldr	r2, [pc, #188]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c076:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c078:	2301      	movs	r3, #1
 800c07a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c07e:	e03a      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800c080:	493c      	ldr	r1, [pc, #240]	; (800c174 <CheckforMedhaCMD+0x37c>)
 800c082:	482a      	ldr	r0, [pc, #168]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c084:	f01a fcde 	bl	8026a44 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800c088:	483b      	ldr	r0, [pc, #236]	; (800c178 <CheckforMedhaCMD+0x380>)
 800c08a:	f01a fd77 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c08e:	4b29      	ldr	r3, [pc, #164]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c094:	4b27      	ldr	r3, [pc, #156]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c09c:	4a25      	ldr	r2, [pc, #148]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c09e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c0a6:	e026      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800c0a8:	4934      	ldr	r1, [pc, #208]	; (800c17c <CheckforMedhaCMD+0x384>)
 800c0aa:	4820      	ldr	r0, [pc, #128]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c0ac:	f01a fcca 	bl	8026a44 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800c0b0:	4833      	ldr	r0, [pc, #204]	; (800c180 <CheckforMedhaCMD+0x388>)
 800c0b2:	f01a fd63 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c0b6:	4b1f      	ldr	r3, [pc, #124]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c0bc:	4b1d      	ldr	r3, [pc, #116]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c0c4:	4a1b      	ldr	r2, [pc, #108]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c0c6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c0ce:	e012      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800c0d0:	492c      	ldr	r1, [pc, #176]	; (800c184 <CheckforMedhaCMD+0x38c>)
 800c0d2:	4816      	ldr	r0, [pc, #88]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c0d4:	f01a fcb6 	bl	8026a44 <iprintf>
				printf("CLEAR ALL\n");
 800c0d8:	482b      	ldr	r0, [pc, #172]	; (800c188 <CheckforMedhaCMD+0x390>)
 800c0da:	f01a fd4f 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c0de:	4b15      	ldr	r3, [pc, #84]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c0ea:	e004      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800c0ec:	480d      	ldr	r0, [pc, #52]	; (800c124 <CheckforMedhaCMD+0x32c>)
 800c0ee:	f01a fd45 	bl	8026b7c <puts>
 800c0f2:	e000      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			}
		}
 800c0f4:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800c0f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d147      	bne.n	800c18e <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800c0fe:	f240 2005 	movw	r0, #517	; 0x205
 800c102:	f004 ff2d 	bl	8010f60 <TransmitCanPkt>
 800c106:	e042      	b.n	800c18e <CheckforMedhaCMD+0x396>
 800c108:	2000c074 	.word	0x2000c074
 800c10c:	0802a318 	.word	0x0802a318
 800c110:	20000bba 	.word	0x20000bba
 800c114:	0802a330 	.word	0x0802a330
 800c118:	200038e2 	.word	0x200038e2
 800c11c:	0802a370 	.word	0x0802a370
 800c120:	20000bbb 	.word	0x20000bbb
 800c124:	0802a384 	.word	0x0802a384
 800c128:	20003914 	.word	0x20003914
 800c12c:	0802a3a0 	.word	0x0802a3a0
 800c130:	0802a3b0 	.word	0x0802a3b0
 800c134:	20004c6c 	.word	0x20004c6c
 800c138:	20003946 	.word	0x20003946
 800c13c:	0802a3c8 	.word	0x0802a3c8
 800c140:	20003978 	.word	0x20003978
 800c144:	0802a3e0 	.word	0x0802a3e0
 800c148:	200039aa 	.word	0x200039aa
 800c14c:	0802a3f4 	.word	0x0802a3f4
 800c150:	200039dc 	.word	0x200039dc
 800c154:	0802a408 	.word	0x0802a408
 800c158:	20003a0e 	.word	0x20003a0e
 800c15c:	0802a41c 	.word	0x0802a41c
 800c160:	20003a40 	.word	0x20003a40
 800c164:	0802a438 	.word	0x0802a438
 800c168:	0802a450 	.word	0x0802a450
 800c16c:	20003a72 	.word	0x20003a72
 800c170:	0802a464 	.word	0x0802a464
 800c174:	20003aa4 	.word	0x20003aa4
 800c178:	0802a47c 	.word	0x0802a47c
 800c17c:	20003ad6 	.word	0x20003ad6
 800c180:	0802a49c 	.word	0x0802a49c
 800c184:	20003b08 	.word	0x20003b08
 800c188:	0802a4bc 	.word	0x0802a4bc
		return;
 800c18c:	bf00      	nop
		}
	}
}
 800c18e:	3768      	adds	r7, #104	; 0x68
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800c19e:	79fb      	ldrb	r3, [r7, #7]
 800c1a0:	4a3d      	ldr	r2, [pc, #244]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1a2:	2132      	movs	r1, #50	; 0x32
 800c1a4:	fb01 f303 	mul.w	r3, r1, r3
 800c1a8:	4413      	add	r3, r2
 800c1aa:	2224      	movs	r2, #36	; 0x24
 800c1ac:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	4a39      	ldr	r2, [pc, #228]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1b2:	2132      	movs	r1, #50	; 0x32
 800c1b4:	fb01 f303 	mul.w	r3, r1, r3
 800c1b8:	4413      	add	r3, r2
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	2201      	movs	r2, #1
 800c1be:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	4a35      	ldr	r2, [pc, #212]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1c4:	2132      	movs	r1, #50	; 0x32
 800c1c6:	fb01 f303 	mul.w	r3, r1, r3
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3302      	adds	r3, #2
 800c1ce:	2230      	movs	r2, #48	; 0x30
 800c1d0:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	4a30      	ldr	r2, [pc, #192]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1d6:	2132      	movs	r1, #50	; 0x32
 800c1d8:	fb01 f303 	mul.w	r3, r1, r3
 800c1dc:	4413      	add	r3, r2
 800c1de:	3303      	adds	r3, #3
 800c1e0:	2240      	movs	r2, #64	; 0x40
 800c1e2:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800c1e4:	79fb      	ldrb	r3, [r7, #7]
 800c1e6:	4a2c      	ldr	r2, [pc, #176]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1e8:	2132      	movs	r1, #50	; 0x32
 800c1ea:	fb01 f303 	mul.w	r3, r1, r3
 800c1ee:	4413      	add	r3, r2
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	22c0      	movs	r2, #192	; 0xc0
 800c1f4:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800c1f6:	79fb      	ldrb	r3, [r7, #7]
 800c1f8:	4a27      	ldr	r2, [pc, #156]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1fa:	2132      	movs	r1, #50	; 0x32
 800c1fc:	fb01 f303 	mul.w	r3, r1, r3
 800c200:	4413      	add	r3, r2
 800c202:	3305      	adds	r3, #5
 800c204:	224e      	movs	r2, #78	; 0x4e
 800c206:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	4a23      	ldr	r2, [pc, #140]	; (800c298 <Update_MedhaCommands+0x104>)
 800c20c:	2132      	movs	r1, #50	; 0x32
 800c20e:	fb01 f303 	mul.w	r3, r1, r3
 800c212:	4413      	add	r3, r2
 800c214:	3306      	adds	r3, #6
 800c216:	2226      	movs	r2, #38	; 0x26
 800c218:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	3301      	adds	r3, #1
 800c21e:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	71fa      	strb	r2, [r7, #7]
 800c226:	461a      	mov	r2, r3
 800c228:	2332      	movs	r3, #50	; 0x32
 800c22a:	fb02 f303 	mul.w	r3, r2, r3
 800c22e:	4a1a      	ldr	r2, [pc, #104]	; (800c298 <Update_MedhaCommands+0x104>)
 800c230:	4413      	add	r3, r2
 800c232:	491a      	ldr	r1, [pc, #104]	; (800c29c <Update_MedhaCommands+0x108>)
 800c234:	461a      	mov	r2, r3
 800c236:	460b      	mov	r3, r1
 800c238:	cb03      	ldmia	r3!, {r0, r1}
 800c23a:	6010      	str	r0, [r2, #0]
 800c23c:	6051      	str	r1, [r2, #4]
 800c23e:	8819      	ldrh	r1, [r3, #0]
 800c240:	789b      	ldrb	r3, [r3, #2]
 800c242:	8111      	strh	r1, [r2, #8]
 800c244:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	71fa      	strb	r2, [r7, #7]
 800c24c:	461a      	mov	r2, r3
 800c24e:	2332      	movs	r3, #50	; 0x32
 800c250:	fb02 f303 	mul.w	r3, r2, r3
 800c254:	4a10      	ldr	r2, [pc, #64]	; (800c298 <Update_MedhaCommands+0x104>)
 800c256:	4413      	add	r3, r2
 800c258:	4911      	ldr	r1, [pc, #68]	; (800c2a0 <Update_MedhaCommands+0x10c>)
 800c25a:	461a      	mov	r2, r3
 800c25c:	460b      	mov	r3, r1
 800c25e:	cb03      	ldmia	r3!, {r0, r1}
 800c260:	6010      	str	r0, [r2, #0]
 800c262:	6051      	str	r1, [r2, #4]
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800c268:	79fb      	ldrb	r3, [r7, #7]
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	71fa      	strb	r2, [r7, #7]
 800c26e:	461a      	mov	r2, r3
 800c270:	2332      	movs	r3, #50	; 0x32
 800c272:	fb02 f303 	mul.w	r3, r2, r3
 800c276:	4a08      	ldr	r2, [pc, #32]	; (800c298 <Update_MedhaCommands+0x104>)
 800c278:	4413      	add	r3, r2
 800c27a:	4a0a      	ldr	r2, [pc, #40]	; (800c2a4 <Update_MedhaCommands+0x110>)
 800c27c:	6810      	ldr	r0, [r2, #0]
 800c27e:	6018      	str	r0, [r3, #0]
 800c280:	7912      	ldrb	r2, [r2, #4]
 800c282:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800c284:	4a08      	ldr	r2, [pc, #32]	; (800c2a8 <Update_MedhaCommands+0x114>)
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	7013      	strb	r3, [r2, #0]
}
 800c28a:	bf00      	nop
 800c28c:	370c      	adds	r7, #12
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop
 800c298:	200038b0 	.word	0x200038b0
 800c29c:	0802a4c8 	.word	0x0802a4c8
 800c2a0:	0802a4d4 	.word	0x0802a4d4
 800c2a4:	0802a4e0 	.word	0x0802a4e0
 800c2a8:	20003c98 	.word	0x20003c98

0800c2ac <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800c2ac:	b590      	push	{r4, r7, lr}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73fb      	strb	r3, [r7, #15]
 800c2bc:	e01c      	b.n	800c2f8 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	2232      	movs	r2, #50	; 0x32
 800c2c2:	fb02 f303 	mul.w	r3, r2, r3
 800c2c6:	4a11      	ldr	r2, [pc, #68]	; (800c30c <Is_MedhaCommand_Valid+0x60>)
 800c2c8:	189c      	adds	r4, r3, r2
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	2232      	movs	r2, #50	; 0x32
 800c2ce:	fb02 f303 	mul.w	r3, r2, r3
 800c2d2:	4a0e      	ldr	r2, [pc, #56]	; (800c30c <Is_MedhaCommand_Valid+0x60>)
 800c2d4:	4413      	add	r3, r2
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7f3 ffbc 	bl	8000254 <strlen>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f01a fa8e 	bl	8026804 <memcmp>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	e008      	b.n	800c304 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	73fb      	strb	r3, [r7, #15]
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <Is_MedhaCommand_Valid+0x64>)
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	7bfa      	ldrb	r2, [r7, #15]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d3dd      	bcc.n	800c2be <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800c302:	23ff      	movs	r3, #255	; 0xff
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd90      	pop	{r4, r7, pc}
 800c30c:	200038b0 	.word	0x200038b0
 800c310:	20003c98 	.word	0x20003c98

0800c314 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800c314:	b480      	push	{r7}
 800c316:	b087      	sub	sp, #28
 800c318:	af00      	add	r7, sp, #0
 800c31a:	4603      	mov	r3, r0
 800c31c:	6039      	str	r1, [r7, #0]
 800c31e:	80fb      	strh	r3, [r7, #6]
 800c320:	4613      	mov	r3, r2
 800c322:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800c324:	2300      	movs	r3, #0
 800c326:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800c330:	88fb      	ldrh	r3, [r7, #6]
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	e015      	b.n	800c362 <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	440b      	add	r3, r1
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	4053      	eors	r3, r2
 800c344:	b2db      	uxtb	r3, r3
 800c346:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	0a1b      	lsrs	r3, r3, #8
 800c34c:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800c34e:	4a0a      	ldr	r2, [pc, #40]	; (800c378 <GetCRC32+0x64>)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	4053      	eors	r3, r2
 800c35a:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	3301      	adds	r3, #1
 800c360:	613b      	str	r3, [r7, #16]
 800c362:	88bb      	ldrh	r3, [r7, #4]
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	429a      	cmp	r2, r3
 800c368:	d3e5      	bcc.n	800c336 <GetCRC32+0x22>
	}

	return Crc;
 800c36a:	697b      	ldr	r3, [r7, #20]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	371c      	adds	r7, #28
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr
 800c378:	0802d930 	.word	0x0802d930

0800c37c <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	6039      	str	r1, [r7, #0]
 800c386:	80fb      	strh	r3, [r7, #6]
 800c388:	4613      	mov	r3, r2
 800c38a:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800c390:	2300      	movs	r3, #0
 800c392:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800c394:	88ba      	ldrh	r2, [r7, #4]
 800c396:	88fb      	ldrh	r3, [r7, #6]
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff ffba 	bl	800c314 <GetCRC32>
 800c3a0:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800c3a2:	88bb      	ldrh	r3, [r7, #4]
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d101      	bne.n	800c3b8 <CheckCRC32+0x3c>
	{
		return OK;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e009      	b.n	800c3cc <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4805      	ldr	r0, [pc, #20]	; (800c3d4 <CheckCRC32+0x58>)
 800c3be:	f01a fb41 	bl	8026a44 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800c3c2:	68f9      	ldr	r1, [r7, #12]
 800c3c4:	4804      	ldr	r0, [pc, #16]	; (800c3d8 <CheckCRC32+0x5c>)
 800c3c6:	f01a fb3d 	bl	8026a44 <iprintf>
		return NOT_OK;
 800c3ca:	2300      	movs	r3, #0
	}

}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	0802a4e8 	.word	0x0802a4e8
 800c3d8:	0802a500 	.word	0x0802a500

0800c3dc <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	f107 0310 	add.w	r3, r7, #16
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800c3f4:	79fb      	ldrb	r3, [r7, #7]
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	f107 010c 	add.w	r1, r7, #12
 800c3fc:	220a      	movs	r2, #10
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 f846 	bl	800c490 <ReadAndFormMsg>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	dd34      	ble.n	800c474 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800c40a:	7b7b      	ldrb	r3, [r7, #13]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d115      	bne.n	800c43c <CheckForRqst+0x60>
 800c410:	7bbb      	ldrb	r3, [r7, #14]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d112      	bne.n	800c43c <CheckForRqst+0x60>
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d10f      	bne.n	800c43c <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800c41c:	4818      	ldr	r0, [pc, #96]	; (800c480 <CheckForRqst+0xa4>)
 800c41e:	f01a fbad 	bl	8026b7c <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800c422:	79fb      	ldrb	r3, [r7, #7]
 800c424:	2202      	movs	r2, #2
 800c426:	2101      	movs	r1, #1
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 f933 	bl	800c694 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c42e:	f00d faff 	bl	8019a30 <HAL_GetTick>
 800c432:	4603      	mov	r3, r0
 800c434:	4a13      	ldr	r2, [pc, #76]	; (800c484 <CheckForRqst+0xa8>)
 800c436:	6013      	str	r3, [r2, #0]
			return 0x01;
 800c438:	2301      	movs	r3, #1
 800c43a:	e01c      	b.n	800c476 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800c43c:	7b7b      	ldrb	r3, [r7, #13]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d115      	bne.n	800c46e <CheckForRqst+0x92>
 800c442:	7bbb      	ldrb	r3, [r7, #14]
 800c444:	2b02      	cmp	r3, #2
 800c446:	d112      	bne.n	800c46e <CheckForRqst+0x92>
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d10f      	bne.n	800c46e <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800c44e:	480e      	ldr	r0, [pc, #56]	; (800c488 <CheckForRqst+0xac>)
 800c450:	f01a fb94 	bl	8026b7c <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800c454:	79fb      	ldrb	r3, [r7, #7]
 800c456:	2202      	movs	r2, #2
 800c458:	2102      	movs	r1, #2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 f91a 	bl	800c694 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c460:	f00d fae6 	bl	8019a30 <HAL_GetTick>
 800c464:	4603      	mov	r3, r0
 800c466:	4a07      	ldr	r2, [pc, #28]	; (800c484 <CheckForRqst+0xa8>)
 800c468:	6013      	str	r3, [r2, #0]
			return 0x02;
 800c46a:	2302      	movs	r3, #2
 800c46c:	e003      	b.n	800c476 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800c46e:	4807      	ldr	r0, [pc, #28]	; (800c48c <CheckForRqst+0xb0>)
 800c470:	f01a fb84 	bl	8026b7c <puts>
	}
	return 0x00;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3718      	adds	r7, #24
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	0802a518 	.word	0x0802a518
 800c484:	20000fc0 	.word	0x20000fc0
 800c488:	0802a530 	.word	0x0802a530
 800c48c:	0802a548 	.word	0x0802a548

0800c490 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c490:	b590      	push	{r4, r7, lr}
 800c492:	b087      	sub	sp, #28
 800c494:	af02      	add	r7, sp, #8
 800c496:	4603      	mov	r3, r0
 800c498:	6039      	str	r1, [r7, #0]
 800c49a:	80fb      	strh	r3, [r7, #6]
 800c49c:	4613      	mov	r3, r2
 800c49e:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c4ac:	e0d4      	b.n	800c658 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800c4ae:	4b71      	ldr	r3, [pc, #452]	; (800c674 <ReadAndFormMsg+0x1e4>)
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800c4b4:	4870      	ldr	r0, [pc, #448]	; (800c678 <ReadAndFormMsg+0x1e8>)
 800c4b6:	f010 fe21 	bl	801d0fc <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800c4ba:	88fb      	ldrh	r3, [r7, #6]
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f00c ff8e 	bl	80193e0 <Com_Get_Byte>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800c4c8:	f00d f8a0 	bl	801960c <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800c4cc:	4b6b      	ldr	r3, [pc, #428]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	f000 8099 	beq.w	800c608 <ReadAndFormMsg+0x178>
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	f300 80b0 	bgt.w	800c63c <ReadAndFormMsg+0x1ac>
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d002      	beq.n	800c4e6 <ReadAndFormMsg+0x56>
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d00e      	beq.n	800c502 <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c4e4:	e0aa      	b.n	800c63c <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
 800c4e8:	2b24      	cmp	r3, #36	; 0x24
 800c4ea:	f040 80a9 	bne.w	800c640 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	7bfa      	ldrb	r2, [r7, #15]
 800c4f2:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c4f4:	4b62      	ldr	r3, [pc, #392]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c4fa:	4b60      	ldr	r3, [pc, #384]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c4fc:	2202      	movs	r2, #2
 800c4fe:	701a      	strb	r2, [r3, #0]
			break;
 800c500:	e09e      	b.n	800c640 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	2b26      	cmp	r3, #38	; 0x26
 800c506:	d006      	beq.n	800c516 <ReadAndFormMsg+0x86>
 800c508:	2b26      	cmp	r3, #38	; 0x26
 800c50a:	dc6e      	bgt.n	800c5ea <ReadAndFormMsg+0x15a>
 800c50c:	2b05      	cmp	r3, #5
 800c50e:	d068      	beq.n	800c5e2 <ReadAndFormMsg+0x152>
 800c510:	2b24      	cmp	r3, #36	; 0x24
 800c512:	d05c      	beq.n	800c5ce <ReadAndFormMsg+0x13e>
 800c514:	e069      	b.n	800c5ea <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800c516:	4b5a      	ldr	r3, [pc, #360]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	3b02      	subs	r3, #2
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800c520:	4b57      	ldr	r3, [pc, #348]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c522:	881b      	ldrh	r3, [r3, #0]
 800c524:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800c526:	4b56      	ldr	r3, [pc, #344]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c528:	2200      	movs	r2, #0
 800c52a:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c52c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	da01      	bge.n	800c538 <ReadAndFormMsg+0xa8>
					return 0;
 800c534:	2300      	movs	r3, #0
 800c536:	e099      	b.n	800c66c <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800c538:	4b50      	ldr	r3, [pc, #320]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c53a:	2201      	movs	r2, #1
 800c53c:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c53e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800c542:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	4413      	add	r3, r2
 800c54a:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c54c:	461c      	mov	r4, r3
 800c54e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c552:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800c554:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c558:	3301      	adds	r3, #1
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	4413      	add	r3, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	4603      	mov	r3, r0
 800c564:	4622      	mov	r2, r4
 800c566:	4847      	ldr	r0, [pc, #284]	; (800c684 <ReadAndFormMsg+0x1f4>)
 800c568:	f01a fa6c 	bl	8026a44 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c56c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c570:	4619      	mov	r1, r3
 800c572:	6838      	ldr	r0, [r7, #0]
 800c574:	f009 fbc2 	bl	8015cfc <CheckCRC>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d012      	beq.n	800c5a4 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c57e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	4413      	add	r3, r2
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	4619      	mov	r1, r3
 800c58a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c58e:	3301      	adds	r3, #1
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	4413      	add	r3, r2
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	461a      	mov	r2, r3
 800c598:	483b      	ldr	r0, [pc, #236]	; (800c688 <ReadAndFormMsg+0x1f8>)
 800c59a:	f01a fa53 	bl	8026a44 <iprintf>
					return us_ReturnBytes;
 800c59e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c5a2:	e063      	b.n	800c66c <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800c5a4:	4839      	ldr	r0, [pc, #228]	; (800c68c <ReadAndFormMsg+0x1fc>)
 800c5a6:	f01a fa4d 	bl	8026a44 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c5aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	4413      	add	r3, r2
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	4832      	ldr	r0, [pc, #200]	; (800c690 <ReadAndFormMsg+0x200>)
 800c5c6:	f01a fa3d 	bl	8026a44 <iprintf>
					return 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	e04e      	b.n	800c66c <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	7bfa      	ldrb	r2, [r7, #15]
 800c5d2:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c5d4:	4b2a      	ldr	r3, [pc, #168]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c5da:	4b28      	ldr	r3, [pc, #160]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c5dc:	2202      	movs	r2, #2
 800c5de:	701a      	strb	r2, [r3, #0]
				break;
 800c5e0:	e011      	b.n	800c606 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800c5e2:	4b26      	ldr	r3, [pc, #152]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	701a      	strb	r2, [r3, #0]
				break;
 800c5e8:	e00d      	b.n	800c606 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800c5ea:	4b25      	ldr	r3, [pc, #148]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	7bfa      	ldrb	r2, [r7, #15]
 800c5f6:	701a      	strb	r2, [r3, #0]
				j++;
 800c5f8:	4b21      	ldr	r3, [pc, #132]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	4b1f      	ldr	r3, [pc, #124]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c602:	801a      	strh	r2, [r3, #0]
				break;
 800c604:	bf00      	nop
			break;
 800c606:	e01c      	b.n	800c642 <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	2b24      	cmp	r3, #36	; 0x24
 800c60c:	d005      	beq.n	800c61a <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b26      	cmp	r3, #38	; 0x26
 800c612:	d002      	beq.n	800c61a <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	2b05      	cmp	r3, #5
 800c618:	d10c      	bne.n	800c634 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800c61a:	4b19      	ldr	r3, [pc, #100]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	4413      	add	r3, r2
 800c624:	7bfa      	ldrb	r2, [r7, #15]
 800c626:	701a      	strb	r2, [r3, #0]
					j++;
 800c628:	4b15      	ldr	r3, [pc, #84]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	3301      	adds	r3, #1
 800c62e:	b29a      	uxth	r2, r3
 800c630:	4b13      	ldr	r3, [pc, #76]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c632:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c634:	4b11      	ldr	r3, [pc, #68]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c636:	2202      	movs	r2, #2
 800c638:	701a      	strb	r2, [r3, #0]
				break;
 800c63a:	e002      	b.n	800c642 <ReadAndFormMsg+0x1b2>
				break;
 800c63c:	bf00      	nop
 800c63e:	e000      	b.n	800c642 <ReadAndFormMsg+0x1b2>
			break;
 800c640:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800c642:	4b0f      	ldr	r3, [pc, #60]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	88ba      	ldrh	r2, [r7, #4]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d805      	bhi.n	800c658 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800c64c:	4b0b      	ldr	r3, [pc, #44]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c64e:	2201      	movs	r2, #1
 800c650:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800c652:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c654:	2200      	movs	r2, #0
 800c656:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c658:	88fb      	ldrh	r3, [r7, #6]
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	4618      	mov	r0, r3
 800c65e:	f00c fe7f 	bl	8019360 <Com_DataReady>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	f47f af22 	bne.w	800c4ae <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	bd90      	pop	{r4, r7, pc}
 800c674:	20000fbe 	.word	0x20000fbe
 800c678:	2000b46c 	.word	0x2000b46c
 800c67c:	20000317 	.word	0x20000317
 800c680:	20003fc8 	.word	0x20003fc8
 800c684:	0802a558 	.word	0x0802a558
 800c688:	0802a580 	.word	0x0802a580
 800c68c:	0802a594 	.word	0x0802a594
 800c690:	0802a5a0 	.word	0x0802a5a0

0800c694 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	71fb      	strb	r3, [r7, #7]
 800c69e:	460b      	mov	r3, r1
 800c6a0:	71bb      	strb	r3, [r7, #6]
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60bb      	str	r3, [r7, #8]
 800c6ae:	f107 030c 	add.w	r3, r7, #12
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800c6b8:	2324      	movs	r3, #36	; 0x24
 800c6ba:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800c6bc:	79bb      	ldrb	r3, [r7, #6]
 800c6be:	121b      	asrs	r3, r3, #8
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800c6c4:	79bb      	ldrb	r3, [r7, #6]
 800c6c6:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800c6c8:	797b      	ldrb	r3, [r7, #5]
 800c6ca:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800c6cc:	f107 0308 	add.w	r3, r7, #8
 800c6d0:	2104      	movs	r1, #4
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f009 fbbc 	bl	8015e50 <ComputeCRC>
	puc_Message[6]= '&';
 800c6d8:	2326      	movs	r3, #38	; 0x26
 800c6da:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800c6dc:	7b3b      	ldrb	r3, [r7, #12]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	7b7b      	ldrb	r3, [r7, #13]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	480f      	ldr	r0, [pc, #60]	; (800c724 <SendAck+0x90>)
 800c6e6:	f01a f9ad 	bl	8026a44 <iprintf>

	AckTim=HAL_GetTick();
 800c6ea:	f00d f9a1 	bl	8019a30 <HAL_GetTick>
 800c6ee:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c6f0:	e002      	b.n	800c6f8 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800c6f2:	480d      	ldr	r0, [pc, #52]	; (800c728 <SendAck+0x94>)
 800c6f4:	f010 fd02 	bl	801d0fc <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c6f8:	6978      	ldr	r0, [r7, #20]
 800c6fa:	f003 fe7d 	bl	80103f8 <HAL_Elaps_Ticks>
 800c6fe:	4603      	mov	r3, r0
 800c700:	f240 52db 	movw	r2, #1499	; 0x5db
 800c704:	4293      	cmp	r3, r2
 800c706:	d9f4      	bls.n	800c6f2 <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800c708:	f107 0108 	add.w	r1, r7, #8
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2206      	movs	r2, #6
 800c710:	4618      	mov	r0, r3
 800c712:	f00c fee5 	bl	80194e0 <CommTransmitMessage>

	AckTim = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	617b      	str	r3, [r7, #20]
}
 800c71a:	bf00      	nop
 800c71c:	3718      	adds	r7, #24
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	0802a5ac 	.word	0x0802a5ac
 800c728:	2000b46c 	.word	0x2000b46c

0800c72c <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	4603      	mov	r3, r0
 800c734:	6039      	str	r1, [r7, #0]
 800c736:	80fb      	strh	r3, [r7, #6]
 800c738:	4613      	mov	r3, r2
 800c73a:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800c740:	2300      	movs	r3, #0
 800c742:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c744:	2300      	movs	r3, #0
 800c746:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c748:	e0ba      	b.n	800c8c0 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800c74a:	88fb      	ldrh	r3, [r7, #6]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	4618      	mov	r0, r3
 800c750:	f00c fe46 	bl	80193e0 <Com_Get_Byte>
 800c754:	4603      	mov	r3, r0
 800c756:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800c758:	f00c ff58 	bl	801960c <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800c75c:	485f      	ldr	r0, [pc, #380]	; (800c8dc <ReadAndFormConfig+0x1b0>)
 800c75e:	f010 fccd 	bl	801d0fc <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800c762:	4b5f      	ldr	r3, [pc, #380]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	2b03      	cmp	r3, #3
 800c768:	f000 8082 	beq.w	800c870 <ReadAndFormConfig+0x144>
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	f300 8099 	bgt.w	800c8a4 <ReadAndFormConfig+0x178>
 800c772:	2b01      	cmp	r3, #1
 800c774:	d002      	beq.n	800c77c <ReadAndFormConfig+0x50>
 800c776:	2b02      	cmp	r3, #2
 800c778:	d00e      	beq.n	800c798 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c77a:	e093      	b.n	800c8a4 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	2b24      	cmp	r3, #36	; 0x24
 800c780:	f040 8092 	bne.w	800c8a8 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	7bfa      	ldrb	r2, [r7, #15]
 800c788:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c78a:	4b56      	ldr	r3, [pc, #344]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c78c:	2201      	movs	r2, #1
 800c78e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c790:	4b53      	ldr	r3, [pc, #332]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c792:	2202      	movs	r2, #2
 800c794:	701a      	strb	r2, [r3, #0]
			break;
 800c796:	e087      	b.n	800c8a8 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800c798:	7bfb      	ldrb	r3, [r7, #15]
 800c79a:	2b26      	cmp	r3, #38	; 0x26
 800c79c:	d006      	beq.n	800c7ac <ReadAndFormConfig+0x80>
 800c79e:	2b26      	cmp	r3, #38	; 0x26
 800c7a0:	dc57      	bgt.n	800c852 <ReadAndFormConfig+0x126>
 800c7a2:	2b05      	cmp	r3, #5
 800c7a4:	d051      	beq.n	800c84a <ReadAndFormConfig+0x11e>
 800c7a6:	2b24      	cmp	r3, #36	; 0x24
 800c7a8:	d045      	beq.n	800c836 <ReadAndFormConfig+0x10a>
 800c7aa:	e052      	b.n	800c852 <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800c7ac:	4b4d      	ldr	r3, [pc, #308]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	3b02      	subs	r3, #2
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800c7b6:	4b4b      	ldr	r3, [pc, #300]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c7b8:	881b      	ldrh	r3, [r3, #0]
 800c7ba:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800c7bc:	4b49      	ldr	r3, [pc, #292]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c7be:	2200      	movs	r2, #0
 800c7c0:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c7c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	da01      	bge.n	800c7ce <ReadAndFormConfig+0xa2>
					return 0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	e082      	b.n	800c8d4 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800c7ce:	4b44      	ldr	r3, [pc, #272]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c7d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6838      	ldr	r0, [r7, #0]
 800c7dc:	f009 fa8e 	bl	8015cfc <CheckCRC>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d012      	beq.n	800c80c <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c7e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	461a      	mov	r2, r3
 800c800:	4839      	ldr	r0, [pc, #228]	; (800c8e8 <ReadAndFormConfig+0x1bc>)
 800c802:	f01a f91f 	bl	8026a44 <iprintf>
					return us_ReturnBytes;
 800c806:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c80a:	e063      	b.n	800c8d4 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800c80c:	4837      	ldr	r0, [pc, #220]	; (800c8ec <ReadAndFormConfig+0x1c0>)
 800c80e:	f01a f919 	bl	8026a44 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c812:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	4413      	add	r3, r2
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	4619      	mov	r1, r3
 800c81e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c822:	3301      	adds	r3, #1
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	4413      	add	r3, r2
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	4830      	ldr	r0, [pc, #192]	; (800c8f0 <ReadAndFormConfig+0x1c4>)
 800c82e:	f01a f909 	bl	8026a44 <iprintf>
					return 0;
 800c832:	2300      	movs	r3, #0
 800c834:	e04e      	b.n	800c8d4 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	7bfa      	ldrb	r2, [r7, #15]
 800c83a:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c83c:	4b29      	ldr	r3, [pc, #164]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c83e:	2201      	movs	r2, #1
 800c840:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c842:	4b27      	ldr	r3, [pc, #156]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c844:	2202      	movs	r2, #2
 800c846:	701a      	strb	r2, [r3, #0]
				break;
 800c848:	e011      	b.n	800c86e <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800c84a:	4b25      	ldr	r3, [pc, #148]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c84c:	2203      	movs	r2, #3
 800c84e:	701a      	strb	r2, [r3, #0]
				break;
 800c850:	e00d      	b.n	800c86e <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800c852:	4b24      	ldr	r3, [pc, #144]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	4413      	add	r3, r2
 800c85c:	7bfa      	ldrb	r2, [r7, #15]
 800c85e:	701a      	strb	r2, [r3, #0]
				i++;
 800c860:	4b20      	ldr	r3, [pc, #128]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	3301      	adds	r3, #1
 800c866:	b29a      	uxth	r2, r3
 800c868:	4b1e      	ldr	r3, [pc, #120]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c86a:	801a      	strh	r2, [r3, #0]
				break;
 800c86c:	bf00      	nop
			break;
 800c86e:	e01c      	b.n	800c8aa <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800c870:	7bfb      	ldrb	r3, [r7, #15]
 800c872:	2b24      	cmp	r3, #36	; 0x24
 800c874:	d005      	beq.n	800c882 <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800c876:	7bfb      	ldrb	r3, [r7, #15]
 800c878:	2b26      	cmp	r3, #38	; 0x26
 800c87a:	d002      	beq.n	800c882 <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	2b05      	cmp	r3, #5
 800c880:	d10c      	bne.n	800c89c <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800c882:	4b18      	ldr	r3, [pc, #96]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c884:	881b      	ldrh	r3, [r3, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	4413      	add	r3, r2
 800c88c:	7bfa      	ldrb	r2, [r7, #15]
 800c88e:	701a      	strb	r2, [r3, #0]
					i++;
 800c890:	4b14      	ldr	r3, [pc, #80]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	3301      	adds	r3, #1
 800c896:	b29a      	uxth	r2, r3
 800c898:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c89a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c89c:	4b10      	ldr	r3, [pc, #64]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c89e:	2202      	movs	r2, #2
 800c8a0:	701a      	strb	r2, [r3, #0]
				break;
 800c8a2:	e002      	b.n	800c8aa <ReadAndFormConfig+0x17e>
				break;
 800c8a4:	bf00      	nop
 800c8a6:	e000      	b.n	800c8aa <ReadAndFormConfig+0x17e>
			break;
 800c8a8:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800c8aa:	4b0e      	ldr	r3, [pc, #56]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	88ba      	ldrh	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d805      	bhi.n	800c8c0 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800c8b4:	4b0a      	ldr	r3, [pc, #40]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800c8ba:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c8c0:	88fb      	ldrh	r3, [r7, #6]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f00c fd4b 	bl	8019360 <Com_DataReady>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f47f af3c 	bne.w	800c74a <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	2000b46c 	.word	0x2000b46c
 800c8e0:	20000318 	.word	0x20000318
 800c8e4:	20003fca 	.word	0x20003fca
 800c8e8:	0802a5c8 	.word	0x0802a5c8
 800c8ec:	0802a594 	.word	0x0802a594
 800c8f0:	0802a5dc 	.word	0x0802a5dc

0800c8f4 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800c8fe:	79fb      	ldrb	r3, [r7, #7]
 800c900:	091b      	lsrs	r3, r3, #4
 800c902:	b2db      	uxtb	r3, r3
 800c904:	461a      	mov	r2, r3
 800c906:	0092      	lsls	r2, r2, #2
 800c908:	4413      	add	r3, r2
 800c90a:	005b      	lsls	r3, r3, #1
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	79fb      	ldrb	r3, [r7, #7]
 800c910:	f003 030f 	and.w	r3, r3, #15
 800c914:	b2db      	uxtb	r3, r3
 800c916:	4413      	add	r3, r2
 800c918:	b2db      	uxtb	r3, r3
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
	...

0800c928 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800c932:	79fb      	ldrb	r3, [r7, #7]
 800c934:	4a0d      	ldr	r2, [pc, #52]	; (800c96c <Dec_to_BCD+0x44>)
 800c936:	fba2 2303 	umull	r2, r3, r2, r3
 800c93a:	08db      	lsrs	r3, r3, #3
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	011b      	lsls	r3, r3, #4
 800c940:	b2d8      	uxtb	r0, r3
 800c942:	79fa      	ldrb	r2, [r7, #7]
 800c944:	4b09      	ldr	r3, [pc, #36]	; (800c96c <Dec_to_BCD+0x44>)
 800c946:	fba3 1302 	umull	r1, r3, r3, r2
 800c94a:	08d9      	lsrs	r1, r3, #3
 800c94c:	460b      	mov	r3, r1
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	440b      	add	r3, r1
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	b2db      	uxtb	r3, r3
 800c958:	4403      	add	r3, r0
 800c95a:	71fb      	strb	r3, [r7, #7]
	return c;
 800c95c:	79fb      	ldrb	r3, [r7, #7]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	cccccccd 	.word	0xcccccccd

0800c970 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800c974:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <Is_GPS_Valid+0x34>)
 800c976:	795b      	ldrb	r3, [r3, #5]
 800c978:	2b09      	cmp	r3, #9
 800c97a:	d801      	bhi.n	800c980 <Is_GPS_Valid+0x10>
	{
		return 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e00c      	b.n	800c99a <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800c980:	4b08      	ldr	r3, [pc, #32]	; (800c9a4 <Is_GPS_Valid+0x34>)
 800c982:	791b      	ldrb	r3, [r3, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <Is_GPS_Valid+0x1c>
	{
		return 0;
 800c988:	2300      	movs	r3, #0
 800c98a:	e006      	b.n	800c99a <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800c98c:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <Is_GPS_Valid+0x34>)
 800c98e:	78db      	ldrb	r3, [r3, #3]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <Is_GPS_Valid+0x28>
	{
		return 0;
 800c994:	2300      	movs	r3, #0
 800c996:	e000      	b.n	800c99a <Is_GPS_Valid+0x2a>
	}
	return 1;
 800c998:	2301      	movs	r3, #1
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr
 800c9a4:	20003fcc 	.word	0x20003fcc

0800c9a8 <Write_RTC>:


void Write_RTC(void)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	603b      	str	r3, [r7, #0]
 800c9b2:	1d3b      	adds	r3, r7, #4
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	460a      	mov	r2, r1
 800c9b8:	801a      	strh	r2, [r3, #0]
 800c9ba:	460a      	mov	r2, r1
 800c9bc:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800c9be:	f7ff ffd7 	bl	800c970 <Is_GPS_Valid>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d103      	bne.n	800c9d0 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800c9c8:	4844      	ldr	r0, [pc, #272]	; (800cadc <Write_RTC+0x134>)
 800c9ca:	f01a f8d7 	bl	8026b7c <puts>
 800c9ce:	e081      	b.n	800cad4 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800c9d0:	4b43      	ldr	r3, [pc, #268]	; (800cae0 <Write_RTC+0x138>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800c9d6:	4b43      	ldr	r3, [pc, #268]	; (800cae4 <Write_RTC+0x13c>)
 800c9d8:	789b      	ldrb	r3, [r3, #2]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff ffa4 	bl	800c928 <Dec_to_BCD>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800c9e4:	4b3f      	ldr	r3, [pc, #252]	; (800cae4 <Write_RTC+0x13c>)
 800c9e6:	785b      	ldrb	r3, [r3, #1]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7ff ff9d 	bl	800c928 <Dec_to_BCD>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800c9f2:	4b3c      	ldr	r3, [pc, #240]	; (800cae4 <Write_RTC+0x13c>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7ff ff96 	bl	800c928 <Dec_to_BCD>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800ca00:	4b38      	ldr	r3, [pc, #224]	; (800cae4 <Write_RTC+0x13c>)
 800ca02:	78db      	ldrb	r3, [r3, #3]
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7ff ff8f 	bl	800c928 <Dec_to_BCD>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800ca0e:	4b35      	ldr	r3, [pc, #212]	; (800cae4 <Write_RTC+0x13c>)
 800ca10:	791b      	ldrb	r3, [r3, #4]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff ff88 	bl	800c928 <Dec_to_BCD>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800ca1c:	4b31      	ldr	r3, [pc, #196]	; (800cae4 <Write_RTC+0x13c>)
 800ca1e:	795b      	ldrb	r3, [r3, #5]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff ff81 	bl	800c928 <Dec_to_BCD>
 800ca26:	4603      	mov	r3, r0
 800ca28:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800ca2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca2e:	9302      	str	r3, [sp, #8]
 800ca30:	2301      	movs	r3, #1
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	463b      	mov	r3, r7
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	2301      	movs	r3, #1
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	21d0      	movs	r1, #208	; 0xd0
 800ca3e:	482a      	ldr	r0, [pc, #168]	; (800cae8 <Write_RTC+0x140>)
 800ca40:	f00f fdae 	bl	801c5a0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800ca44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca48:	9302      	str	r3, [sp, #8]
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	463b      	mov	r3, r7
 800ca50:	3301      	adds	r3, #1
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	2301      	movs	r3, #1
 800ca56:	2201      	movs	r2, #1
 800ca58:	21d0      	movs	r1, #208	; 0xd0
 800ca5a:	4823      	ldr	r0, [pc, #140]	; (800cae8 <Write_RTC+0x140>)
 800ca5c:	f00f fda0 	bl	801c5a0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800ca60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca64:	9302      	str	r3, [sp, #8]
 800ca66:	2301      	movs	r3, #1
 800ca68:	9301      	str	r3, [sp, #4]
 800ca6a:	463b      	mov	r3, r7
 800ca6c:	3302      	adds	r3, #2
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	2301      	movs	r3, #1
 800ca72:	2202      	movs	r2, #2
 800ca74:	21d0      	movs	r1, #208	; 0xd0
 800ca76:	481c      	ldr	r0, [pc, #112]	; (800cae8 <Write_RTC+0x140>)
 800ca78:	f00f fd92 	bl	801c5a0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800ca7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca80:	9302      	str	r3, [sp, #8]
 800ca82:	2301      	movs	r3, #1
 800ca84:	9301      	str	r3, [sp, #4]
 800ca86:	463b      	mov	r3, r7
 800ca88:	3303      	adds	r3, #3
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	2204      	movs	r2, #4
 800ca90:	21d0      	movs	r1, #208	; 0xd0
 800ca92:	4815      	ldr	r0, [pc, #84]	; (800cae8 <Write_RTC+0x140>)
 800ca94:	f00f fd84 	bl	801c5a0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800ca98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca9c:	9302      	str	r3, [sp, #8]
 800ca9e:	2301      	movs	r3, #1
 800caa0:	9301      	str	r3, [sp, #4]
 800caa2:	463b      	mov	r3, r7
 800caa4:	3304      	adds	r3, #4
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	2301      	movs	r3, #1
 800caaa:	2205      	movs	r2, #5
 800caac:	21d0      	movs	r1, #208	; 0xd0
 800caae:	480e      	ldr	r0, [pc, #56]	; (800cae8 <Write_RTC+0x140>)
 800cab0:	f00f fd76 	bl	801c5a0 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800cab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cab8:	9302      	str	r3, [sp, #8]
 800caba:	2301      	movs	r3, #1
 800cabc:	9301      	str	r3, [sp, #4]
 800cabe:	463b      	mov	r3, r7
 800cac0:	3305      	adds	r3, #5
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	2301      	movs	r3, #1
 800cac6:	2206      	movs	r2, #6
 800cac8:	21d0      	movs	r1, #208	; 0xd0
 800caca:	4807      	ldr	r0, [pc, #28]	; (800cae8 <Write_RTC+0x140>)
 800cacc:	f00f fd68 	bl	801c5a0 <HAL_I2C_Mem_Write>

	Get_time();
 800cad0:	f000 f80c 	bl	800caec <Get_time>

}
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	0802a63c 	.word	0x0802a63c
 800cae0:	200024e0 	.word	0x200024e0
 800cae4:	20003fcc 	.word	0x20003fcc
 800cae8:	2000b3c4 	.word	0x2000b3c4

0800caec <Get_time>:


void Get_time(void)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800caf2:	463b      	mov	r3, r7
 800caf4:	2207      	movs	r2, #7
 800caf6:	2100      	movs	r1, #0
 800caf8:	4618      	mov	r0, r3
 800cafa:	f019 febb 	bl	8026874 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800cafe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb02:	9302      	str	r3, [sp, #8]
 800cb04:	2307      	movs	r3, #7
 800cb06:	9301      	str	r3, [sp, #4]
 800cb08:	463b      	mov	r3, r7
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	2200      	movs	r2, #0
 800cb10:	21d0      	movs	r1, #208	; 0xd0
 800cb12:	4824      	ldr	r0, [pc, #144]	; (800cba4 <Get_time+0xb8>)
 800cb14:	f00f fe58 	bl	801c7c8 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800cb18:	783b      	ldrb	r3, [r7, #0]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff feea 	bl	800c8f4 <bcdToDec>
 800cb20:	4603      	mov	r3, r0
 800cb22:	461a      	mov	r2, r3
 800cb24:	4b20      	ldr	r3, [pc, #128]	; (800cba8 <Get_time+0xbc>)
 800cb26:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800cb28:	787b      	ldrb	r3, [r7, #1]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff fee2 	bl	800c8f4 <bcdToDec>
 800cb30:	4603      	mov	r3, r0
 800cb32:	461a      	mov	r2, r3
 800cb34:	4b1c      	ldr	r3, [pc, #112]	; (800cba8 <Get_time+0xbc>)
 800cb36:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800cb38:	78bb      	ldrb	r3, [r7, #2]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7ff feda 	bl	800c8f4 <bcdToDec>
 800cb40:	4603      	mov	r3, r0
 800cb42:	461a      	mov	r2, r3
 800cb44:	4b18      	ldr	r3, [pc, #96]	; (800cba8 <Get_time+0xbc>)
 800cb46:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800cb48:	793b      	ldrb	r3, [r7, #4]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff fed2 	bl	800c8f4 <bcdToDec>
 800cb50:	4603      	mov	r3, r0
 800cb52:	461a      	mov	r2, r3
 800cb54:	4b14      	ldr	r3, [pc, #80]	; (800cba8 <Get_time+0xbc>)
 800cb56:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800cb58:	797b      	ldrb	r3, [r7, #5]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7ff feca 	bl	800c8f4 <bcdToDec>
 800cb60:	4603      	mov	r3, r0
 800cb62:	461a      	mov	r2, r3
 800cb64:	4b10      	ldr	r3, [pc, #64]	; (800cba8 <Get_time+0xbc>)
 800cb66:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800cb68:	79bb      	ldrb	r3, [r7, #6]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fec2 	bl	800c8f4 <bcdToDec>
 800cb70:	4603      	mov	r3, r0
 800cb72:	461a      	mov	r2, r3
 800cb74:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <Get_time+0xbc>)
 800cb76:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800cb78:	783a      	ldrb	r2, [r7, #0]
 800cb7a:	4b0c      	ldr	r3, [pc, #48]	; (800cbac <Get_time+0xc0>)
 800cb7c:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800cb7e:	787a      	ldrb	r2, [r7, #1]
 800cb80:	4b0a      	ldr	r3, [pc, #40]	; (800cbac <Get_time+0xc0>)
 800cb82:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800cb84:	78ba      	ldrb	r2, [r7, #2]
 800cb86:	4b09      	ldr	r3, [pc, #36]	; (800cbac <Get_time+0xc0>)
 800cb88:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800cb8a:	793a      	ldrb	r2, [r7, #4]
 800cb8c:	4b07      	ldr	r3, [pc, #28]	; (800cbac <Get_time+0xc0>)
 800cb8e:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800cb90:	797a      	ldrb	r2, [r7, #5]
 800cb92:	4b06      	ldr	r3, [pc, #24]	; (800cbac <Get_time+0xc0>)
 800cb94:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800cb96:	79ba      	ldrb	r2, [r7, #6]
 800cb98:	4b04      	ldr	r3, [pc, #16]	; (800cbac <Get_time+0xc0>)
 800cb9a:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800cb9c:	bf00      	nop
}
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	2000b3c4 	.word	0x2000b3c4
 800cba8:	20003fdc 	.word	0x20003fdc
 800cbac:	20003fe4 	.word	0x20003fe4

0800cbb0 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800cbb4:	4b09      	ldr	r3, [pc, #36]	; (800cbdc <Update_Time_Every_Sec+0x2c>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f003 fc1d 	bl	80103f8 <HAL_Elaps_Ticks>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbc4:	d307      	bcc.n	800cbd6 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800cbc6:	f7ff ff91 	bl	800caec <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800cbca:	f00c ff31 	bl	8019a30 <HAL_GetTick>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	4a02      	ldr	r2, [pc, #8]	; (800cbdc <Update_Time_Every_Sec+0x2c>)
 800cbd2:	6013      	str	r3, [r2, #0]
	}
	return;
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop
}
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20003fec 	.word	0x20003fec

0800cbe0 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800cbe4:	f014 fa12 	bl	802100c <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800cbe8:	4814      	ldr	r0, [pc, #80]	; (800cc3c <Process_SiemensEI+0x5c>)
 800cbea:	f010 fa87 	bl	801d0fc <HAL_IWDG_Refresh>

		Feed_wdt();
 800cbee:	f009 fc27 	bl	8016440 <Feed_wdt>

		readCanToStructs();
 800cbf2:	f004 ff8d 	bl	8011b10 <readCanToStructs>

		Chech_forSiemensCMD();
 800cbf6:	f001 fe29 	bl	800e84c <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800cbfa:	f001 fb87 	bl	800e30c <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800cbfe:	f001 fc6d 	bl	800e4dc <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800cc02:	f000 f821 	bl	800cc48 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800cc06:	f001 fc8b 	bl	800e520 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800cc0a:	f001 fccd 	bl	800e5a8 <SendRelays2Other>

		CheckRelayMisMatch();
 800cc0e:	f001 fce3 	bl	800e5d8 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800cc12:	f001 fd1b 	bl	800e64c <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800cc16:	f00b fe91 	bl	801893c <Print_BuildDat_Details>

		GetTimeStamp();
 800cc1a:	f002 fda1 	bl	800f760 <GetTimeStamp>

		CheckEIPC_DAT_CRC();
 800cc1e:	f7f4 f995 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800cc22:	4b07      	ldr	r3, [pc, #28]	; (800cc40 <Process_SiemensEI+0x60>)
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0dc      	beq.n	800cbe4 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800cc2a:	4b06      	ldr	r3, [pc, #24]	; (800cc44 <Process_SiemensEI+0x64>)
 800cc2c:	2203      	movs	r2, #3
 800cc2e:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800cc30:	f00b fd82 	bl	8018738 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800cc34:	4801      	ldr	r0, [pc, #4]	; (800cc3c <Process_SiemensEI+0x5c>)
 800cc36:	f010 fa61 	bl	801d0fc <HAL_IWDG_Refresh>
		Data_Processing();
 800cc3a:	e7f9      	b.n	800cc30 <Process_SiemensEI+0x50>
 800cc3c:	2000b46c 	.word	0x2000b46c
 800cc40:	20000bba 	.word	0x20000bba
 800cc44:	20000fbd 	.word	0x20000fbd

0800cc48 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800cc4e:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800cc74:	2300      	movs	r3, #0
 800cc76:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800cc9e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cca2:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800cca6:	2200      	movs	r2, #0
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f019 fdde 	bl	8026874 <memset>
	uint16_t Size = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800ccc4:	4b7c      	ldr	r3, [pc, #496]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800ccc6:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ccca:	2b0a      	cmp	r3, #10
 800cccc:	f240 86dc 	bls.w	800da88 <Siemens_Data_Analyser+0xe40>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800ccd0:	4b79      	ldr	r3, [pc, #484]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800ccd2:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f107 030c 	add.w	r3, r7, #12
 800ccdc:	4976      	ldr	r1, [pc, #472]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800ccde:	4618      	mov	r0, r3
 800cce0:	f019 fda0 	bl	8026824 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800cce4:	4b74      	ldr	r3, [pc, #464]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800cce6:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ccea:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800ccee:	f240 6204 	movw	r2, #1540	; 0x604
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	4870      	ldr	r0, [pc, #448]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800ccf6:	f019 fdbd 	bl	8026874 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800ccfa:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800ccfe:	f44f 720a 	mov.w	r2, #552	; 0x228
 800cd02:	2100      	movs	r1, #0
 800cd04:	4618      	mov	r0, r3
 800cd06:	f019 fdb5 	bl	8026874 <memset>


	BITSTUFFINIT(0,0);
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cd10:	2300      	movs	r3, #0
 800cd12:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800cd16:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cd1a:	085b      	lsrs	r3, r3, #1
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	3b02      	subs	r3, #2
 800cd20:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800cd24:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cd28:	085b      	lsrs	r3, r3, #1
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	3b02      	subs	r3, #2
 800cd2e:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800cd32:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cd36:	3b02      	subs	r3, #2
 800cd38:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800cd3c:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cd40:	085b      	lsrs	r3, r3, #1
 800cd42:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800cd46:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800cd4a:	f107 030c 	add.w	r3, r7, #12
 800cd4e:	2200      	movs	r2, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f002 fbeb 	bl	800f52c <Data_Compliment>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d004      	beq.n	800cd66 <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800cd5c:	4857      	ldr	r0, [pc, #348]	; (800cebc <Siemens_Data_Analyser+0x274>)
 800cd5e:	f019 ff0d 	bl	8026b7c <puts>
		return ;
 800cd62:	f000 be94 	b.w	800da8e <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800cd66:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800cd6a:	f107 020c 	add.w	r2, r7, #12
 800cd6e:	4413      	add	r3, r2
 800cd70:	461a      	mov	r2, r3
 800cd72:	2110      	movs	r1, #16
 800cd74:	2000      	movs	r0, #0
 800cd76:	f7f3 fc4d 	bl	8000614 <ExtractBits>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800cd80:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800cd84:	f107 030c 	add.w	r3, r7, #12
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f002 f8d2 	bl	800ef34 <Siemens_CRC>
 800cd90:	4603      	mov	r3, r0
 800cd92:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cd96:	4b4a      	ldr	r3, [pc, #296]	; (800cec0 <Siemens_Data_Analyser+0x278>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	095b      	lsrs	r3, r3, #5
 800cd9c:	f003 0301 	and.w	r3, r3, #1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d01c      	beq.n	800cdde <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cda4:	4847      	ldr	r0, [pc, #284]	; (800cec4 <Siemens_Data_Analyser+0x27c>)
 800cda6:	f019 fee9 	bl	8026b7c <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cdaa:	4847      	ldr	r0, [pc, #284]	; (800cec8 <Siemens_Data_Analyser+0x280>)
 800cdac:	f011 faf2 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	4b46      	ldr	r3, [pc, #280]	; (800cecc <Siemens_Data_Analyser+0x284>)
 800cdb4:	fba3 2301 	umull	r2, r3, r3, r1
 800cdb8:	0bda      	lsrs	r2, r3, #15
 800cdba:	4613      	mov	r3, r2
 800cdbc:	041b      	lsls	r3, r3, #16
 800cdbe:	1a9b      	subs	r3, r3, r2
 800cdc0:	1aca      	subs	r2, r1, r3
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800cdc8:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800cdcc:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d104      	bne.n	800cdde <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800cdd4:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800cdd8:	3304      	adds	r3, #4
 800cdda:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800cdde:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800cde2:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d010      	beq.n	800ce0c <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800cdea:	4839      	ldr	r0, [pc, #228]	; (800ced0 <Siemens_Data_Analyser+0x288>)
 800cdec:	f019 fec6 	bl	8026b7c <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800cdf0:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	4837      	ldr	r0, [pc, #220]	; (800ced4 <Siemens_Data_Analyser+0x28c>)
 800cdf8:	f019 fe24 	bl	8026a44 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800cdfc:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800ce00:	4619      	mov	r1, r3
 800ce02:	4835      	ldr	r0, [pc, #212]	; (800ced8 <Siemens_Data_Analyser+0x290>)
 800ce04:	f019 fe1e 	bl	8026a44 <iprintf>
		return;
 800ce08:	f000 be41 	b.w	800da8e <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800ce0c:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800ce10:	f107 020c 	add.w	r2, r7, #12
 800ce14:	4413      	add	r3, r2
 800ce16:	461a      	mov	r2, r3
 800ce18:	2110      	movs	r1, #16
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	f7f3 fbfa 	bl	8000614 <ExtractBits>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800ce26:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800ce2a:	f107 020c 	add.w	r2, r7, #12
 800ce2e:	4413      	add	r3, r2
 800ce30:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800ce34:	4611      	mov	r1, r2
 800ce36:	4618      	mov	r0, r3
 800ce38:	f002 f87c 	bl	800ef34 <Siemens_CRC>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ce42:	4b1f      	ldr	r3, [pc, #124]	; (800cec0 <Siemens_Data_Analyser+0x278>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	0a1b      	lsrs	r3, r3, #8
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d01c      	beq.n	800ce8a <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800ce50:	4822      	ldr	r0, [pc, #136]	; (800cedc <Siemens_Data_Analyser+0x294>)
 800ce52:	f019 fe93 	bl	8026b7c <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800ce56:	481c      	ldr	r0, [pc, #112]	; (800cec8 <Siemens_Data_Analyser+0x280>)
 800ce58:	f011 fa9c 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800ce5c:	4601      	mov	r1, r0
 800ce5e:	4b1b      	ldr	r3, [pc, #108]	; (800cecc <Siemens_Data_Analyser+0x284>)
 800ce60:	fba3 2301 	umull	r2, r3, r3, r1
 800ce64:	0bda      	lsrs	r2, r3, #15
 800ce66:	4613      	mov	r3, r2
 800ce68:	041b      	lsls	r3, r3, #16
 800ce6a:	1a9b      	subs	r3, r3, r2
 800ce6c:	1aca      	subs	r2, r1, r3
 800ce6e:	4613      	mov	r3, r2
 800ce70:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800ce74:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800ce78:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d104      	bne.n	800ce8a <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800ce80:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800ce84:	3304      	adds	r3, #4
 800ce86:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800ce8a:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800ce8e:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d02a      	beq.n	800ceec <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800ce96:	4812      	ldr	r0, [pc, #72]	; (800cee0 <Siemens_Data_Analyser+0x298>)
 800ce98:	f019 fe70 	bl	8026b7c <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800ce9c:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800cea0:	4619      	mov	r1, r3
 800cea2:	4810      	ldr	r0, [pc, #64]	; (800cee4 <Siemens_Data_Analyser+0x29c>)
 800cea4:	f019 fdce 	bl	8026a44 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800cea8:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800ceac:	4619      	mov	r1, r3
 800ceae:	480e      	ldr	r0, [pc, #56]	; (800cee8 <Siemens_Data_Analyser+0x2a0>)
 800ceb0:	f019 fdc8 	bl	8026a44 <iprintf>
		return;
 800ceb4:	f000 bdeb 	b.w	800da8e <Siemens_Data_Analyser+0xe46>
 800ceb8:	200063a8 	.word	0x200063a8
 800cebc:	0802a65c 	.word	0x0802a65c
 800cec0:	20004c6c 	.word	0x20004c6c
 800cec4:	0802a67c 	.word	0x0802a67c
 800cec8:	2000bcec 	.word	0x2000bcec
 800cecc:	80008001 	.word	0x80008001
 800ced0:	0802a6a4 	.word	0x0802a6a4
 800ced4:	0802a6b4 	.word	0x0802a6b4
 800ced8:	0802a6c8 	.word	0x0802a6c8
 800cedc:	0802a6dc 	.word	0x0802a6dc
 800cee0:	0802a708 	.word	0x0802a708
 800cee4:	0802a718 	.word	0x0802a718
 800cee8:	0802a734 	.word	0x0802a734
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800ceec:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cef0:	b2d8      	uxtb	r0, r3
 800cef2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cef6:	f107 020c 	add.w	r2, r7, #12
 800cefa:	441a      	add	r2, r3
 800cefc:	2301      	movs	r3, #1
 800cefe:	2108      	movs	r1, #8
 800cf00:	f002 f86c 	bl	800efdc <Extract_Parity_Data>
 800cf04:	4603      	mov	r3, r0
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf0c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf10:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cf12:	4b56      	ldr	r3, [pc, #344]	; (800d06c <Siemens_Data_Analyser+0x424>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d02a      	beq.n	800cf74 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800cf1e:	4854      	ldr	r0, [pc, #336]	; (800d070 <Siemens_Data_Analyser+0x428>)
 800cf20:	f019 fe2c 	bl	8026b7c <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800cf24:	4853      	ldr	r0, [pc, #332]	; (800d074 <Siemens_Data_Analyser+0x42c>)
 800cf26:	f011 fa35 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	4b52      	ldr	r3, [pc, #328]	; (800d078 <Siemens_Data_Analyser+0x430>)
 800cf2e:	fba3 2301 	umull	r2, r3, r3, r1
 800cf32:	09da      	lsrs	r2, r3, #7
 800cf34:	4613      	mov	r3, r2
 800cf36:	021b      	lsls	r3, r3, #8
 800cf38:	1a9b      	subs	r3, r3, r2
 800cf3a:	1aca      	subs	r2, r1, r3
 800cf3c:	b2d2      	uxtb	r2, r2
 800cf3e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf42:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf46:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800cf48:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf4c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf50:	781a      	ldrb	r2, [r3, #0]
 800cf52:	4b4a      	ldr	r3, [pc, #296]	; (800d07c <Siemens_Data_Analyser+0x434>)
 800cf54:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d10b      	bne.n	800cf74 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800cf5c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf60:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	3304      	adds	r3, #4
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf6e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf72:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800cf74:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf78:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf7c:	781a      	ldrb	r2, [r3, #0]
 800cf7e:	4b3f      	ldr	r3, [pc, #252]	; (800d07c <Siemens_Data_Analyser+0x434>)
 800cf80:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d015      	beq.n	800cfb4 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800cf88:	483d      	ldr	r0, [pc, #244]	; (800d080 <Siemens_Data_Analyser+0x438>)
 800cf8a:	f019 fdf7 	bl	8026b7c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800cf8e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf92:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	483a      	ldr	r0, [pc, #232]	; (800d084 <Siemens_Data_Analyser+0x43c>)
 800cf9c:	f019 fd52 	bl	8026a44 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800cfa0:	4b36      	ldr	r3, [pc, #216]	; (800d07c <Siemens_Data_Analyser+0x434>)
 800cfa2:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4837      	ldr	r0, [pc, #220]	; (800d088 <Siemens_Data_Analyser+0x440>)
 800cfaa:	f019 fd4b 	bl	8026a44 <iprintf>
		RejectPacketFlag = 1;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800cfb4:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cfb8:	3308      	adds	r3, #8
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	da00      	bge.n	800cfc0 <Siemens_Data_Analyser+0x378>
 800cfbe:	3307      	adds	r3, #7
 800cfc0:	10db      	asrs	r3, r3, #3
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cfc8:	4413      	add	r3, r2
 800cfca:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cfce:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	b21b      	sxth	r3, r3
 800cfd8:	425a      	negs	r2, r3
 800cfda:	f003 0307 	and.w	r3, r3, #7
 800cfde:	f002 0207 	and.w	r2, r2, #7
 800cfe2:	bf58      	it	pl
 800cfe4:	4253      	negpl	r3, r2
 800cfe6:	b21b      	sxth	r3, r3
 800cfe8:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800cfec:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cff0:	b2d8      	uxtb	r0, r3
 800cff2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cff6:	f107 020c 	add.w	r2, r7, #12
 800cffa:	441a      	add	r2, r3
 800cffc:	2300      	movs	r3, #0
 800cffe:	2118      	movs	r1, #24
 800d000:	f001 ffec 	bl	800efdc <Extract_Parity_Data>
 800d004:	4603      	mov	r3, r0
 800d006:	461a      	mov	r2, r3
 800d008:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d00c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d010:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800d012:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d016:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d020:	d036      	beq.n	800d090 <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800d022:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d026:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800d02a:	4a18      	ldr	r2, [pc, #96]	; (800d08c <Siemens_Data_Analyser+0x444>)
 800d02c:	8812      	ldrh	r2, [r2, #0]
 800d02e:	801a      	strh	r2, [r3, #0]
 800d030:	2200      	movs	r2, #0
 800d032:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800d034:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d038:	f107 020c 	add.w	r2, r7, #12
 800d03c:	4413      	add	r3, r2
 800d03e:	f107 0208 	add.w	r2, r7, #8
 800d042:	2103      	movs	r1, #3
 800d044:	4618      	mov	r0, r3
 800d046:	f000 fd4d 	bl	800dae4 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800d04a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d04e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d052:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800d056:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800d05a:	3308      	adds	r3, #8
 800d05c:	6812      	ldr	r2, [r2, #0]
 800d05e:	4611      	mov	r1, r2
 800d060:	8019      	strh	r1, [r3, #0]
 800d062:	3302      	adds	r3, #2
 800d064:	0c12      	lsrs	r2, r2, #16
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	e015      	b.n	800d096 <Siemens_Data_Analyser+0x44e>
 800d06a:	bf00      	nop
 800d06c:	20004c6c 	.word	0x20004c6c
 800d070:	0802a750 	.word	0x0802a750
 800d074:	2000bcec 	.word	0x2000bcec
 800d078:	80808081 	.word	0x80808081
 800d07c:	20000504 	.word	0x20000504
 800d080:	0802a770 	.word	0x0802a770
 800d084:	0802a794 	.word	0x0802a794
 800d088:	0802a7a4 	.word	0x0802a7a4
 800d08c:	0802a928 	.word	0x0802a928
	}
	else
	{
		RejectPacketFlag = 1;
 800d090:	2301      	movs	r3, #1
 800d092:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800d096:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d09a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d09e:	689a      	ldr	r2, [r3, #8]
 800d0a0:	4bbf      	ldr	r3, [pc, #764]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d0a2:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d015      	beq.n	800d0d6 <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800d0aa:	48be      	ldr	r0, [pc, #760]	; (800d3a4 <Siemens_Data_Analyser+0x75c>)
 800d0ac:	f019 fd66 	bl	8026b7c <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800d0b0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0b4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	48ba      	ldr	r0, [pc, #744]	; (800d3a8 <Siemens_Data_Analyser+0x760>)
 800d0be:	f019 fcc1 	bl	8026a44 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800d0c2:	4bb7      	ldr	r3, [pc, #732]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d0c4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	48b8      	ldr	r0, [pc, #736]	; (800d3ac <Siemens_Data_Analyser+0x764>)
 800d0cc:	f019 fcba 	bl	8026a44 <iprintf>
		RejectPacketFlag = 1;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800d0d6:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d0da:	3318      	adds	r3, #24
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	da00      	bge.n	800d0e2 <Siemens_Data_Analyser+0x49a>
 800d0e0:	3307      	adds	r3, #7
 800d0e2:	10db      	asrs	r3, r3, #3
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d0f0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d0f4:	3318      	adds	r3, #24
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	b21b      	sxth	r3, r3
 800d0fa:	425a      	negs	r2, r3
 800d0fc:	f003 0307 	and.w	r3, r3, #7
 800d100:	f002 0207 	and.w	r2, r2, #7
 800d104:	bf58      	it	pl
 800d106:	4253      	negpl	r3, r2
 800d108:	b21b      	sxth	r3, r3
 800d10a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800d10e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d112:	b2d8      	uxtb	r0, r3
 800d114:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d118:	f107 020c 	add.w	r2, r7, #12
 800d11c:	441a      	add	r2, r3
 800d11e:	2301      	movs	r3, #1
 800d120:	2108      	movs	r1, #8
 800d122:	f001 ff5b 	bl	800efdc <Extract_Parity_Data>
 800d126:	4603      	mov	r3, r0
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d12e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d132:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d134:	4b9e      	ldr	r3, [pc, #632]	; (800d3b0 <Siemens_Data_Analyser+0x768>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	085b      	lsrs	r3, r3, #1
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d02a      	beq.n	800d198 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800d142:	489c      	ldr	r0, [pc, #624]	; (800d3b4 <Siemens_Data_Analyser+0x76c>)
 800d144:	f019 fd1a 	bl	8026b7c <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d148:	489b      	ldr	r0, [pc, #620]	; (800d3b8 <Siemens_Data_Analyser+0x770>)
 800d14a:	f011 f923 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800d14e:	4601      	mov	r1, r0
 800d150:	4b9a      	ldr	r3, [pc, #616]	; (800d3bc <Siemens_Data_Analyser+0x774>)
 800d152:	fba3 2301 	umull	r2, r3, r3, r1
 800d156:	09da      	lsrs	r2, r3, #7
 800d158:	4613      	mov	r3, r2
 800d15a:	021b      	lsls	r3, r3, #8
 800d15c:	1a9b      	subs	r3, r3, r2
 800d15e:	1aca      	subs	r2, r1, r3
 800d160:	b2d2      	uxtb	r2, r2
 800d162:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d166:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d16a:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800d16c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d170:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d174:	7b1a      	ldrb	r2, [r3, #12]
 800d176:	4b8a      	ldr	r3, [pc, #552]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d178:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d10b      	bne.n	800d198 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800d180:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d184:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d188:	7b1b      	ldrb	r3, [r3, #12]
 800d18a:	3304      	adds	r3, #4
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d192:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d196:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800d198:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d19c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1a0:	7b1a      	ldrb	r2, [r3, #12]
 800d1a2:	4b7f      	ldr	r3, [pc, #508]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d1a4:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d015      	beq.n	800d1d8 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800d1ac:	4884      	ldr	r0, [pc, #528]	; (800d3c0 <Siemens_Data_Analyser+0x778>)
 800d1ae:	f019 fce5 	bl	8026b7c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800d1b2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1b6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1ba:	7b1b      	ldrb	r3, [r3, #12]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	4881      	ldr	r0, [pc, #516]	; (800d3c4 <Siemens_Data_Analyser+0x77c>)
 800d1c0:	f019 fc40 	bl	8026a44 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800d1c4:	4b76      	ldr	r3, [pc, #472]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d1c6:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	487e      	ldr	r0, [pc, #504]	; (800d3c8 <Siemens_Data_Analyser+0x780>)
 800d1ce:	f019 fc39 	bl	8026a44 <iprintf>
		RejectPacketFlag = 1;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800d1d8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d1dc:	3308      	adds	r3, #8
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	da00      	bge.n	800d1e4 <Siemens_Data_Analyser+0x59c>
 800d1e2:	3307      	adds	r3, #7
 800d1e4:	10db      	asrs	r3, r3, #3
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d1f2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	b21b      	sxth	r3, r3
 800d1fc:	425a      	negs	r2, r3
 800d1fe:	f003 0307 	and.w	r3, r3, #7
 800d202:	f002 0207 	and.w	r2, r2, #7
 800d206:	bf58      	it	pl
 800d208:	4253      	negpl	r3, r2
 800d20a:	b21b      	sxth	r3, r3
 800d20c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800d210:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d214:	b2d8      	uxtb	r0, r3
 800d216:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d21a:	f107 020c 	add.w	r2, r7, #12
 800d21e:	441a      	add	r2, r3
 800d220:	2300      	movs	r3, #0
 800d222:	2118      	movs	r1, #24
 800d224:	f001 feda 	bl	800efdc <Extract_Parity_Data>
 800d228:	4603      	mov	r3, r0
 800d22a:	461a      	mov	r2, r3
 800d22c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d230:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d234:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800d236:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d23a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d244:	d021      	beq.n	800d28a <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800d246:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d24a:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800d24e:	4a5f      	ldr	r2, [pc, #380]	; (800d3cc <Siemens_Data_Analyser+0x784>)
 800d250:	8812      	ldrh	r2, [r2, #0]
 800d252:	801a      	strh	r2, [r3, #0]
 800d254:	2200      	movs	r2, #0
 800d256:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800d258:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d25c:	f107 020c 	add.w	r2, r7, #12
 800d260:	4413      	add	r3, r2
 800d262:	1d3a      	adds	r2, r7, #4
 800d264:	2103      	movs	r1, #3
 800d266:	4618      	mov	r0, r3
 800d268:	f000 fc3c 	bl	800dae4 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800d26c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d270:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d274:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800d278:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800d27c:	3314      	adds	r3, #20
 800d27e:	6812      	ldr	r2, [r2, #0]
 800d280:	4611      	mov	r1, r2
 800d282:	8019      	strh	r1, [r3, #0]
 800d284:	3302      	adds	r3, #2
 800d286:	0c12      	lsrs	r2, r2, #16
 800d288:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d28a:	4b49      	ldr	r3, [pc, #292]	; (800d3b0 <Siemens_Data_Analyser+0x768>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	089b      	lsrs	r3, r3, #2
 800d290:	f003 0301 	and.w	r3, r3, #1
 800d294:	2b00      	cmp	r3, #0
 800d296:	d02c      	beq.n	800d2f2 <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800d298:	484d      	ldr	r0, [pc, #308]	; (800d3d0 <Siemens_Data_Analyser+0x788>)
 800d29a:	f019 fc6f 	bl	8026b7c <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800d29e:	4846      	ldr	r0, [pc, #280]	; (800d3b8 <Siemens_Data_Analyser+0x770>)
 800d2a0:	f011 f878 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800d2a4:	4601      	mov	r1, r0
 800d2a6:	f240 1301 	movw	r3, #257	; 0x101
 800d2aa:	fba3 2301 	umull	r2, r3, r3, r1
 800d2ae:	1aca      	subs	r2, r1, r3
 800d2b0:	0852      	lsrs	r2, r2, #1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	0dda      	lsrs	r2, r3, #23
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	061b      	lsls	r3, r3, #24
 800d2ba:	1a9b      	subs	r3, r3, r2
 800d2bc:	1aca      	subs	r2, r1, r3
 800d2be:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2c2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2c6:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800d2c8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2cc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2d0:	695a      	ldr	r2, [r3, #20]
 800d2d2:	4b33      	ldr	r3, [pc, #204]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d2d4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d10a      	bne.n	800d2f2 <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800d2dc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2e0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2e4:	695b      	ldr	r3, [r3, #20]
 800d2e6:	1d1a      	adds	r2, r3, #4
 800d2e8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2ec:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2f0:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800d2f2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2f6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2fa:	695a      	ldr	r2, [r3, #20]
 800d2fc:	4b28      	ldr	r3, [pc, #160]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d2fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d302:	429a      	cmp	r2, r3
 800d304:	d015      	beq.n	800d332 <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800d306:	4833      	ldr	r0, [pc, #204]	; (800d3d4 <Siemens_Data_Analyser+0x78c>)
 800d308:	f019 fc38 	bl	8026b7c <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800d30c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d310:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d314:	695b      	ldr	r3, [r3, #20]
 800d316:	4619      	mov	r1, r3
 800d318:	4823      	ldr	r0, [pc, #140]	; (800d3a8 <Siemens_Data_Analyser+0x760>)
 800d31a:	f019 fb93 	bl	8026a44 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800d31e:	4b20      	ldr	r3, [pc, #128]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d320:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d324:	4619      	mov	r1, r3
 800d326:	4821      	ldr	r0, [pc, #132]	; (800d3ac <Siemens_Data_Analyser+0x764>)
 800d328:	f019 fb8c 	bl	8026a44 <iprintf>
		RejectPacketFlag = 1;
 800d32c:	2301      	movs	r3, #1
 800d32e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800d332:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d336:	3318      	adds	r3, #24
 800d338:	2b00      	cmp	r3, #0
 800d33a:	da00      	bge.n	800d33e <Siemens_Data_Analyser+0x6f6>
 800d33c:	3307      	adds	r3, #7
 800d33e:	10db      	asrs	r3, r3, #3
 800d340:	b29a      	uxth	r2, r3
 800d342:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d346:	4413      	add	r3, r2
 800d348:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d34c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d350:	3318      	adds	r3, #24
 800d352:	b29b      	uxth	r3, r3
 800d354:	b21b      	sxth	r3, r3
 800d356:	425a      	negs	r2, r3
 800d358:	f003 0307 	and.w	r3, r3, #7
 800d35c:	f002 0207 	and.w	r2, r2, #7
 800d360:	bf58      	it	pl
 800d362:	4253      	negpl	r3, r2
 800d364:	b21b      	sxth	r3, r3
 800d366:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800d36a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d36e:	b2d8      	uxtb	r0, r3
 800d370:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d374:	f107 020c 	add.w	r2, r7, #12
 800d378:	441a      	add	r2, r3
 800d37a:	2300      	movs	r3, #0
 800d37c:	2108      	movs	r1, #8
 800d37e:	f001 fe2d 	bl	800efdc <Extract_Parity_Data>
 800d382:	4603      	mov	r3, r0
 800d384:	b2da      	uxtb	r2, r3
 800d386:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d38a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d38e:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800d390:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d394:	3308      	adds	r3, #8
 800d396:	2b00      	cmp	r3, #0
 800d398:	da1e      	bge.n	800d3d8 <Siemens_Data_Analyser+0x790>
 800d39a:	3307      	adds	r3, #7
 800d39c:	e01c      	b.n	800d3d8 <Siemens_Data_Analyser+0x790>
 800d39e:	bf00      	nop
 800d3a0:	20000504 	.word	0x20000504
 800d3a4:	0802a7b4 	.word	0x0802a7b4
 800d3a8:	0802a7d4 	.word	0x0802a7d4
 800d3ac:	0802a7e4 	.word	0x0802a7e4
 800d3b0:	20004c6c 	.word	0x20004c6c
 800d3b4:	0802a7f4 	.word	0x0802a7f4
 800d3b8:	2000bcec 	.word	0x2000bcec
 800d3bc:	80808081 	.word	0x80808081
 800d3c0:	0802a814 	.word	0x0802a814
 800d3c4:	0802a794 	.word	0x0802a794
 800d3c8:	0802a7a4 	.word	0x0802a7a4
 800d3cc:	0802a928 	.word	0x0802a928
 800d3d0:	0802a834 	.word	0x0802a834
 800d3d4:	0802a850 	.word	0x0802a850
 800d3d8:	10db      	asrs	r3, r3, #3
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d3e0:	4413      	add	r3, r2
 800d3e2:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d3e6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d3ea:	3308      	adds	r3, #8
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	b21b      	sxth	r3, r3
 800d3f0:	425a      	negs	r2, r3
 800d3f2:	f003 0307 	and.w	r3, r3, #7
 800d3f6:	f002 0207 	and.w	r2, r2, #7
 800d3fa:	bf58      	it	pl
 800d3fc:	4253      	negpl	r3, r2
 800d3fe:	b21b      	sxth	r3, r3
 800d400:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800d404:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d408:	b2d8      	uxtb	r0, r3
 800d40a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d40e:	f107 020c 	add.w	r2, r7, #12
 800d412:	441a      	add	r2, r3
 800d414:	2301      	movs	r3, #1
 800d416:	2108      	movs	r1, #8
 800d418:	f001 fde0 	bl	800efdc <Extract_Parity_Data>
 800d41c:	4603      	mov	r3, r0
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d424:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d428:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800d42a:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d42e:	3308      	adds	r3, #8
 800d430:	2b00      	cmp	r3, #0
 800d432:	da00      	bge.n	800d436 <Siemens_Data_Analyser+0x7ee>
 800d434:	3307      	adds	r3, #7
 800d436:	10db      	asrs	r3, r3, #3
 800d438:	b29a      	uxth	r2, r3
 800d43a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d43e:	4413      	add	r3, r2
 800d440:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d444:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d448:	3308      	adds	r3, #8
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	b21b      	sxth	r3, r3
 800d44e:	425a      	negs	r2, r3
 800d450:	f003 0307 	and.w	r3, r3, #7
 800d454:	f002 0207 	and.w	r2, r2, #7
 800d458:	bf58      	it	pl
 800d45a:	4253      	negpl	r3, r2
 800d45c:	b21b      	sxth	r3, r3
 800d45e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d462:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d466:	b2d8      	uxtb	r0, r3
 800d468:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d46c:	f107 020c 	add.w	r2, r7, #12
 800d470:	441a      	add	r2, r3
 800d472:	2302      	movs	r3, #2
 800d474:	2108      	movs	r1, #8
 800d476:	f001 fdb1 	bl	800efdc <Extract_Parity_Data>
 800d47a:	4603      	mov	r3, r0
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d482:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d486:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d488:	4bab      	ldr	r3, [pc, #684]	; (800d738 <Siemens_Data_Analyser+0xaf0>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	08db      	lsrs	r3, r3, #3
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d02a      	beq.n	800d4ec <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800d496:	48a9      	ldr	r0, [pc, #676]	; (800d73c <Siemens_Data_Analyser+0xaf4>)
 800d498:	f019 fb70 	bl	8026b7c <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d49c:	48a8      	ldr	r0, [pc, #672]	; (800d740 <Siemens_Data_Analyser+0xaf8>)
 800d49e:	f010 ff79 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	4ba7      	ldr	r3, [pc, #668]	; (800d744 <Siemens_Data_Analyser+0xafc>)
 800d4a6:	fba3 2301 	umull	r2, r3, r3, r1
 800d4aa:	09da      	lsrs	r2, r3, #7
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	021b      	lsls	r3, r3, #8
 800d4b0:	1a9b      	subs	r3, r3, r2
 800d4b2:	1aca      	subs	r2, r1, r3
 800d4b4:	b2d2      	uxtb	r2, r2
 800d4b6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4ba:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4be:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800d4c0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4c4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4c8:	7e9a      	ldrb	r2, [r3, #26]
 800d4ca:	4b9f      	ldr	r3, [pc, #636]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d4cc:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d10b      	bne.n	800d4ec <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800d4d4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4d8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4dc:	7e9b      	ldrb	r3, [r3, #26]
 800d4de:	3304      	adds	r3, #4
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4e6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4ea:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800d4ec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4f0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4f4:	7e9a      	ldrb	r2, [r3, #26]
 800d4f6:	4b94      	ldr	r3, [pc, #592]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d4f8:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d015      	beq.n	800d52c <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800d500:	4892      	ldr	r0, [pc, #584]	; (800d74c <Siemens_Data_Analyser+0xb04>)
 800d502:	f019 fb3b 	bl	8026b7c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800d506:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d50a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d50e:	7e9b      	ldrb	r3, [r3, #26]
 800d510:	4619      	mov	r1, r3
 800d512:	488f      	ldr	r0, [pc, #572]	; (800d750 <Siemens_Data_Analyser+0xb08>)
 800d514:	f019 fa96 	bl	8026a44 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800d518:	4b8b      	ldr	r3, [pc, #556]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d51a:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d51e:	4619      	mov	r1, r3
 800d520:	488c      	ldr	r0, [pc, #560]	; (800d754 <Siemens_Data_Analyser+0xb0c>)
 800d522:	f019 fa8f 	bl	8026a44 <iprintf>
		RejectPacketFlag = 1;
 800d526:	2301      	movs	r3, #1
 800d528:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800d52c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d530:	3308      	adds	r3, #8
 800d532:	2b00      	cmp	r3, #0
 800d534:	da00      	bge.n	800d538 <Siemens_Data_Analyser+0x8f0>
 800d536:	3307      	adds	r3, #7
 800d538:	10db      	asrs	r3, r3, #3
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d540:	4413      	add	r3, r2
 800d542:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d546:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d54a:	3308      	adds	r3, #8
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	b21b      	sxth	r3, r3
 800d550:	425a      	negs	r2, r3
 800d552:	f003 0307 	and.w	r3, r3, #7
 800d556:	f002 0207 	and.w	r2, r2, #7
 800d55a:	bf58      	it	pl
 800d55c:	4253      	negpl	r3, r2
 800d55e:	b21b      	sxth	r3, r3
 800d560:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d564:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d568:	b2d8      	uxtb	r0, r3
 800d56a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d56e:	f107 020c 	add.w	r2, r7, #12
 800d572:	441a      	add	r2, r3
 800d574:	2302      	movs	r3, #2
 800d576:	2108      	movs	r1, #8
 800d578:	f001 fd30 	bl	800efdc <Extract_Parity_Data>
 800d57c:	4603      	mov	r3, r0
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d584:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d588:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d58a:	4b6b      	ldr	r3, [pc, #428]	; (800d738 <Siemens_Data_Analyser+0xaf0>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	091b      	lsrs	r3, r3, #4
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	2b00      	cmp	r3, #0
 800d596:	d02a      	beq.n	800d5ee <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800d598:	486f      	ldr	r0, [pc, #444]	; (800d758 <Siemens_Data_Analyser+0xb10>)
 800d59a:	f019 faef 	bl	8026b7c <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d59e:	4868      	ldr	r0, [pc, #416]	; (800d740 <Siemens_Data_Analyser+0xaf8>)
 800d5a0:	f010 fef8 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800d5a4:	4601      	mov	r1, r0
 800d5a6:	4b67      	ldr	r3, [pc, #412]	; (800d744 <Siemens_Data_Analyser+0xafc>)
 800d5a8:	fba3 2301 	umull	r2, r3, r3, r1
 800d5ac:	09da      	lsrs	r2, r3, #7
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	021b      	lsls	r3, r3, #8
 800d5b2:	1a9b      	subs	r3, r3, r2
 800d5b4:	1aca      	subs	r2, r1, r3
 800d5b6:	b2d2      	uxtb	r2, r2
 800d5b8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5bc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5c0:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800d5c2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5c6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5ca:	7eda      	ldrb	r2, [r3, #27]
 800d5cc:	4b5e      	ldr	r3, [pc, #376]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d5ce:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d10b      	bne.n	800d5ee <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800d5d6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5da:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5de:	7edb      	ldrb	r3, [r3, #27]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5e8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5ec:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800d5ee:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5f2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5f6:	7eda      	ldrb	r2, [r3, #27]
 800d5f8:	4b53      	ldr	r3, [pc, #332]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d5fa:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d015      	beq.n	800d62e <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800d602:	4856      	ldr	r0, [pc, #344]	; (800d75c <Siemens_Data_Analyser+0xb14>)
 800d604:	f019 faba 	bl	8026b7c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800d608:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d60c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d610:	7edb      	ldrb	r3, [r3, #27]
 800d612:	4619      	mov	r1, r3
 800d614:	484e      	ldr	r0, [pc, #312]	; (800d750 <Siemens_Data_Analyser+0xb08>)
 800d616:	f019 fa15 	bl	8026a44 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800d61a:	4b4b      	ldr	r3, [pc, #300]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d61c:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d620:	4619      	mov	r1, r3
 800d622:	484c      	ldr	r0, [pc, #304]	; (800d754 <Siemens_Data_Analyser+0xb0c>)
 800d624:	f019 fa0e 	bl	8026a44 <iprintf>
		RejectPacketFlag = 1;
 800d628:	2301      	movs	r3, #1
 800d62a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800d62e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d632:	3308      	adds	r3, #8
 800d634:	2b00      	cmp	r3, #0
 800d636:	da00      	bge.n	800d63a <Siemens_Data_Analyser+0x9f2>
 800d638:	3307      	adds	r3, #7
 800d63a:	10db      	asrs	r3, r3, #3
 800d63c:	b29a      	uxth	r2, r3
 800d63e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d642:	4413      	add	r3, r2
 800d644:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d648:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d64c:	3308      	adds	r3, #8
 800d64e:	b29b      	uxth	r3, r3
 800d650:	b21b      	sxth	r3, r3
 800d652:	425a      	negs	r2, r3
 800d654:	f003 0307 	and.w	r3, r3, #7
 800d658:	f002 0207 	and.w	r2, r2, #7
 800d65c:	bf58      	it	pl
 800d65e:	4253      	negpl	r3, r2
 800d660:	b21b      	sxth	r3, r3
 800d662:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d666:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d66a:	b2d8      	uxtb	r0, r3
 800d66c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d670:	f107 020c 	add.w	r2, r7, #12
 800d674:	441a      	add	r2, r3
 800d676:	2302      	movs	r3, #2
 800d678:	2120      	movs	r1, #32
 800d67a:	f001 fcaf 	bl	800efdc <Extract_Parity_Data>
 800d67e:	4603      	mov	r3, r0
 800d680:	461a      	mov	r2, r3
 800d682:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d686:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d68a:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800d68c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d690:	3320      	adds	r3, #32
 800d692:	2b00      	cmp	r3, #0
 800d694:	da00      	bge.n	800d698 <Siemens_Data_Analyser+0xa50>
 800d696:	3307      	adds	r3, #7
 800d698:	10db      	asrs	r3, r3, #3
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d6a6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d6aa:	3320      	adds	r3, #32
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	b21b      	sxth	r3, r3
 800d6b0:	425a      	negs	r2, r3
 800d6b2:	f003 0307 	and.w	r3, r3, #7
 800d6b6:	f002 0207 	and.w	r2, r2, #7
 800d6ba:	bf58      	it	pl
 800d6bc:	4253      	negpl	r3, r2
 800d6be:	b21b      	sxth	r3, r3
 800d6c0:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d6c4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d6c8:	b2d8      	uxtb	r0, r3
 800d6ca:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d6ce:	f107 020c 	add.w	r2, r7, #12
 800d6d2:	441a      	add	r2, r3
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	2120      	movs	r1, #32
 800d6d8:	f001 fc80 	bl	800efdc <Extract_Parity_Data>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	461a      	mov	r2, r3
 800d6e0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d6e4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d6e8:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800d6ea:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d6ee:	3320      	adds	r3, #32
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	da00      	bge.n	800d6f6 <Siemens_Data_Analyser+0xaae>
 800d6f4:	3307      	adds	r3, #7
 800d6f6:	10db      	asrs	r3, r3, #3
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d6fe:	4413      	add	r3, r2
 800d700:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d704:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d708:	3320      	adds	r3, #32
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	b21b      	sxth	r3, r3
 800d70e:	425a      	negs	r2, r3
 800d710:	f003 0307 	and.w	r3, r3, #7
 800d714:	f002 0207 	and.w	r2, r2, #7
 800d718:	bf58      	it	pl
 800d71a:	4253      	negpl	r3, r2
 800d71c:	b21b      	sxth	r3, r3
 800d71e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800d728:	200a      	movs	r0, #10
 800d72a:	f019 f9a3 	bl	8026a74 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d72e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d732:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d736:	e052      	b.n	800d7de <Siemens_Data_Analyser+0xb96>
 800d738:	20004c6c 	.word	0x20004c6c
 800d73c:	0802a86c 	.word	0x0802a86c
 800d740:	2000bcec 	.word	0x2000bcec
 800d744:	80808081 	.word	0x80808081
 800d748:	20000504 	.word	0x20000504
 800d74c:	0802a888 	.word	0x0802a888
 800d750:	0802a794 	.word	0x0802a794
 800d754:	0802a7a4 	.word	0x0802a7a4
 800d758:	0802a8a8 	.word	0x0802a8a8
 800d75c:	0802a8c4 	.word	0x0802a8c4
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800d760:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d764:	b2d8      	uxtb	r0, r3
 800d766:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d76a:	f107 020c 	add.w	r2, r7, #12
 800d76e:	441a      	add	r2, r3
 800d770:	2300      	movs	r3, #0
 800d772:	2108      	movs	r1, #8
 800d774:	f001 fc32 	bl	800efdc <Extract_Parity_Data>
 800d778:	4601      	mov	r1, r0
 800d77a:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800d784:	461a      	mov	r2, r3
 800d786:	b2c9      	uxtb	r1, r1
 800d788:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d78c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800d790:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800d792:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800d796:	3301      	adds	r3, #1
 800d798:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800d79c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d7a0:	3308      	adds	r3, #8
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	da00      	bge.n	800d7a8 <Siemens_Data_Analyser+0xb60>
 800d7a6:	3307      	adds	r3, #7
 800d7a8:	10db      	asrs	r3, r3, #3
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d7b0:	4413      	add	r3, r2
 800d7b2:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d7b6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	b21b      	sxth	r3, r3
 800d7c0:	425a      	negs	r2, r3
 800d7c2:	f003 0307 	and.w	r3, r3, #7
 800d7c6:	f002 0207 	and.w	r2, r2, #7
 800d7ca:	bf58      	it	pl
 800d7cc:	4253      	negpl	r3, r2
 800d7ce:	b21b      	sxth	r3, r3
 800d7d0:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d7d4:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d7d8:	3301      	adds	r3, #1
 800d7da:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d7de:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d8b9      	bhi.n	800d760 <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800d7ec:	200a      	movs	r0, #10
 800d7ee:	f019 f941 	bl	8026a74 <putchar>


	//	printf("App_data_Size:%u\n",App_data_Size);
	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800d7f2:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d7f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d7fa:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800d7fe:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800d802:	4618      	mov	r0, r3
 800d804:	f000 f96e 	bl	800dae4 <ExtractAppData>
 800d808:	4603      	mov	r3, r0
 800d80a:	461a      	mov	r2, r3
 800d80c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d810:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d814:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800d816:	4ba0      	ldr	r3, [pc, #640]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d818:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d81c:	f003 0307 	and.w	r3, r3, #7
 800d820:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800d824:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d008      	beq.n	800d83e <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800d82c:	4b9a      	ldr	r3, [pc, #616]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d82e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d832:	08db      	lsrs	r3, r3, #3
 800d834:	b29b      	uxth	r3, r3
 800d836:	3301      	adds	r3, #1
 800d838:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800d83c:	e005      	b.n	800d84a <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800d83e:	4b96      	ldr	r3, [pc, #600]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d840:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d844:	08db      	lsrs	r3, r3, #3
 800d846:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800d84a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d84e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d852:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d854:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800d858:	429a      	cmp	r2, r3
 800d85a:	d02c      	beq.n	800d8b6 <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800d85c:	488f      	ldr	r0, [pc, #572]	; (800da9c <Siemens_Data_Analyser+0xe54>)
 800d85e:	f019 f98d 	bl	8026b7c <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800d862:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d866:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d86a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d86c:	4619      	mov	r1, r3
 800d86e:	488c      	ldr	r0, [pc, #560]	; (800daa0 <Siemens_Data_Analyser+0xe58>)
 800d870:	f019 f8e8 	bl	8026a44 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800d874:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d878:	4619      	mov	r1, r3
 800d87a:	488a      	ldr	r0, [pc, #552]	; (800daa4 <Siemens_Data_Analyser+0xe5c>)
 800d87c:	f019 f8e2 	bl	8026a44 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800d880:	4989      	ldr	r1, [pc, #548]	; (800daa8 <Siemens_Data_Analyser+0xe60>)
 800d882:	488a      	ldr	r0, [pc, #552]	; (800daac <Siemens_Data_Analyser+0xe64>)
 800d884:	f7f2 fcdc 	bl	8000240 <strcmp>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d002      	beq.n	800d894 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800d88e:	2301      	movs	r3, #1
 800d890:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800d894:	4984      	ldr	r1, [pc, #528]	; (800daa8 <Siemens_Data_Analyser+0xe60>)
 800d896:	4885      	ldr	r0, [pc, #532]	; (800daac <Siemens_Data_Analyser+0xe64>)
 800d898:	f7f2 fcd2 	bl	8000240 <strcmp>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d109      	bne.n	800d8b6 <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800d8a2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d8a6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d8aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d8ac:	00db      	lsls	r3, r3, #3
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	4b79      	ldr	r3, [pc, #484]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d8b2:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800d8b6:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	f000 80e6 	beq.w	800da8c <Siemens_Data_Analyser+0xe44>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800d8c0:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800d8c4:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d8c8:	3326      	adds	r3, #38	; 0x26
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	f008 fa69 	bl	8015da4 <GetCRC16>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800d8d8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d8dc:	f107 020c 	add.w	r2, r7, #12
 800d8e0:	4413      	add	r3, r2
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	2110      	movs	r1, #16
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	f7f2 fe94 	bl	8000614 <ExtractBits>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d8f4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d8f8:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800d8fc:	f44f 720a 	mov.w	r2, #552	; 0x228
 800d900:	2100      	movs	r1, #0
 800d902:	486b      	ldr	r0, [pc, #428]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d904:	f018 ffb6 	bl	8026874 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800d908:	4a69      	ldr	r2, [pc, #420]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d90a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d90e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d912:	4610      	mov	r0, r2
 800d914:	4619      	mov	r1, r3
 800d916:	f44f 730a 	mov.w	r3, #552	; 0x228
 800d91a:	461a      	mov	r2, r3
 800d91c:	f018 ff82 	bl	8026824 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800d920:	f000 f936 	bl	800db90 <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d924:	4b63      	ldr	r3, [pc, #396]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d926:	881b      	ldrh	r3, [r3, #0]
 800d928:	461a      	mov	r2, r3
 800d92a:	4b5b      	ldr	r3, [pc, #364]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d92c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d930:	1ad3      	subs	r3, r2, r3
 800d932:	2b00      	cmp	r3, #0
 800d934:	bfb8      	it	lt
 800d936:	425b      	neglt	r3, r3
 800d938:	461a      	mov	r2, r3
 800d93a:	4b57      	ldr	r3, [pc, #348]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d93c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d940:	429a      	cmp	r2, r3
 800d942:	d871      	bhi.n	800da28 <Siemens_Data_Analyser+0xde0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800d944:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d948:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d94c:	69da      	ldr	r2, [r3, #28]
 800d94e:	4b5a      	ldr	r3, [pc, #360]	; (800dab8 <Siemens_Data_Analyser+0xe70>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	429a      	cmp	r2, r3
 800d954:	d04c      	beq.n	800d9f0 <Siemens_Data_Analyser+0xda8>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800d956:	f00c f86b 	bl	8019a30 <HAL_GetTick>
 800d95a:	4603      	mov	r3, r0
 800d95c:	4a57      	ldr	r2, [pc, #348]	; (800dabc <Siemens_Data_Analyser+0xe74>)
 800d95e:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800d960:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d964:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	4a53      	ldr	r2, [pc, #332]	; (800dab8 <Siemens_Data_Analyser+0xe70>)
 800d96c:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800d96e:	4b51      	ldr	r3, [pc, #324]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d970:	2200      	movs	r2, #0
 800d972:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800d974:	4b52      	ldr	r3, [pc, #328]	; (800dac0 <Siemens_Data_Analyser+0xe78>)
 800d976:	885b      	ldrh	r3, [r3, #2]
 800d978:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d053      	beq.n	800da28 <Siemens_Data_Analyser+0xde0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800d980:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d984:	2100      	movs	r1, #0
 800d986:	484e      	ldr	r0, [pc, #312]	; (800dac0 <Siemens_Data_Analyser+0xe78>)
 800d988:	f018 ff74 	bl	8026874 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800d98c:	f240 2202 	movw	r2, #514	; 0x202
 800d990:	2100      	movs	r1, #0
 800d992:	484c      	ldr	r0, [pc, #304]	; (800dac4 <Siemens_Data_Analyser+0xe7c>)
 800d994:	f018 ff6e 	bl	8026874 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800d998:	4a49      	ldr	r2, [pc, #292]	; (800dac0 <Siemens_Data_Analyser+0xe78>)
 800d99a:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800d99e:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d9a0:	4b43      	ldr	r3, [pc, #268]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d9a2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d9a4:	4b46      	ldr	r3, [pc, #280]	; (800dac0 <Siemens_Data_Analyser+0xe78>)
 800d9a6:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d9a8:	4b41      	ldr	r3, [pc, #260]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d9aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	4946      	ldr	r1, [pc, #280]	; (800dac8 <Siemens_Data_Analyser+0xe80>)
 800d9b0:	4846      	ldr	r0, [pc, #280]	; (800dacc <Siemens_Data_Analyser+0xe84>)
 800d9b2:	f018 ff37 	bl	8026824 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d9b6:	4b3e      	ldr	r3, [pc, #248]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d9b8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d9ba:	4b42      	ldr	r3, [pc, #264]	; (800dac4 <Siemens_Data_Analyser+0xe7c>)
 800d9bc:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d9be:	4b3c      	ldr	r3, [pc, #240]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d9c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	4940      	ldr	r1, [pc, #256]	; (800dac8 <Siemens_Data_Analyser+0xe80>)
 800d9c6:	4842      	ldr	r0, [pc, #264]	; (800dad0 <Siemens_Data_Analyser+0xe88>)
 800d9c8:	f018 ff2c 	bl	8026824 <memcpy>

				if(SiemensClocks_st.MisMatchFlag == RESET)
 800d9cc:	4b3b      	ldr	r3, [pc, #236]	; (800dabc <Siemens_Data_Analyser+0xe74>)
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d103      	bne.n	800d9dc <Siemens_Data_Analyser+0xd94>
				{
#ifdef EI_1
					TransmitCanPkt(EI_PROCESS_DATA);
 800d9d4:	f240 1019 	movw	r0, #281	; 0x119
 800d9d8:	f003 fac2 	bl	8010f60 <TransmitCanPkt>
#endif
				}

#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800d9dc:	f240 2007 	movw	r0, #519	; 0x207
 800d9e0:	f003 fabe 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800d9e4:	f00c f824 	bl	8019a30 <HAL_GetTick>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	4a34      	ldr	r2, [pc, #208]	; (800dabc <Siemens_Data_Analyser+0xe74>)
 800d9ec:	6113      	str	r3, [r2, #16]
 800d9ee:	e01b      	b.n	800da28 <Siemens_Data_Analyser+0xde0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800d9f0:	4b30      	ldr	r3, [pc, #192]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d9f2:	881b      	ldrh	r3, [r3, #0]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	4b2e      	ldr	r3, [pc, #184]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d9fa:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d9fc:	4b2d      	ldr	r3, [pc, #180]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	461a      	mov	r2, r3
 800da02:	4b25      	ldr	r3, [pc, #148]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800da04:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800da08:	429a      	cmp	r2, r3
 800da0a:	d90d      	bls.n	800da28 <Siemens_Data_Analyser+0xde0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800da0c:	4b29      	ldr	r3, [pc, #164]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800da0e:	881b      	ldrh	r3, [r3, #0]
 800da10:	4619      	mov	r1, r3
 800da12:	4830      	ldr	r0, [pc, #192]	; (800dad4 <Siemens_Data_Analyser+0xe8c>)
 800da14:	f019 f816 	bl	8026a44 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800da18:	4b1f      	ldr	r3, [pc, #124]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800da1a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800da1e:	b29b      	uxth	r3, r3
 800da20:	3301      	adds	r3, #1
 800da22:	b29a      	uxth	r2, r3
 800da24:	4b23      	ldr	r3, [pc, #140]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800da26:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800da28:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800da2c:	f107 010c 	add.w	r1, r7, #12
 800da30:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800da34:	2302      	movs	r3, #2
 800da36:	f000 fe43 	bl	800e6c0 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800da3a:	4b27      	ldr	r3, [pc, #156]	; (800dad8 <Siemens_Data_Analyser+0xe90>)
 800da3c:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00d      	beq.n	800da60 <Siemens_Data_Analyser+0xe18>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800da44:	4b24      	ldr	r3, [pc, #144]	; (800dad8 <Siemens_Data_Analyser+0xe90>)
 800da46:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800da4a:	2301      	movs	r3, #1
 800da4c:	4922      	ldr	r1, [pc, #136]	; (800dad8 <Siemens_Data_Analyser+0xe90>)
 800da4e:	4823      	ldr	r0, [pc, #140]	; (800dadc <Siemens_Data_Analyser+0xe94>)
 800da50:	f000 fe36 	bl	800e6c0 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800da54:	f240 6202 	movw	r2, #1538	; 0x602
 800da58:	2100      	movs	r1, #0
 800da5a:	481f      	ldr	r0, [pc, #124]	; (800dad8 <Siemens_Data_Analyser+0xe90>)
 800da5c:	f018 ff0a 	bl	8026874 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800da60:	4b14      	ldr	r3, [pc, #80]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800da62:	881a      	ldrh	r2, [r3, #0]
 800da64:	4b1e      	ldr	r3, [pc, #120]	; (800dae0 <Siemens_Data_Analyser+0xe98>)
 800da66:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800da68:	4b1d      	ldr	r3, [pc, #116]	; (800dae0 <Siemens_Data_Analyser+0xe98>)
 800da6a:	2201      	movs	r2, #1
 800da6c:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800da6e:	4b1c      	ldr	r3, [pc, #112]	; (800dae0 <Siemens_Data_Analyser+0xe98>)
 800da70:	2201      	movs	r2, #1
 800da72:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 800da74:	f240 2001 	movw	r0, #513	; 0x201
 800da78:	f003 fa72 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800da7c:	f00b ffd8 	bl	8019a30 <HAL_GetTick>
 800da80:	4603      	mov	r3, r0
 800da82:	4a0e      	ldr	r2, [pc, #56]	; (800dabc <Siemens_Data_Analyser+0xe74>)
 800da84:	6093      	str	r3, [r2, #8]

	return;
 800da86:	e002      	b.n	800da8e <Siemens_Data_Analyser+0xe46>
		return;
 800da88:	bf00      	nop
 800da8a:	e000      	b.n	800da8e <Siemens_Data_Analyser+0xe46>
		return;
 800da8c:	bf00      	nop
}
 800da8e:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	20000504 	.word	0x20000504
 800da9c:	0802a8dc 	.word	0x0802a8dc
 800daa0:	0802a794 	.word	0x0802a794
 800daa4:	0802a7a4 	.word	0x0802a7a4
 800daa8:	0802a8fc 	.word	0x0802a8fc
 800daac:	20000505 	.word	0x20000505
 800dab0:	20003ff0 	.word	0x20003ff0
 800dab4:	200054b0 	.word	0x200054b0
 800dab8:	200054ac 	.word	0x200054ac
 800dabc:	20004c80 	.word	0x20004c80
 800dac0:	20004ea0 	.word	0x20004ea0
 800dac4:	20004c9c 	.word	0x20004c9c
 800dac8:	20004016 	.word	0x20004016
 800dacc:	20004ea4 	.word	0x20004ea4
 800dad0:	20004c9e 	.word	0x20004c9e
 800dad4:	0802a908 	.word	0x0802a908
 800dad8:	20004668 	.word	0x20004668
 800dadc:	20004440 	.word	0x20004440
 800dae0:	20004c74 	.word	0x20004c74

0800dae4 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b089      	sub	sp, #36	; 0x24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	460b      	mov	r3, r1
 800daee:	607a      	str	r2, [r7, #4]
 800daf0:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800dafa:	897b      	ldrh	r3, [r7, #10]
 800dafc:	00db      	lsls	r3, r3, #3
 800dafe:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800db00:	2300      	movs	r3, #0
 800db02:	837b      	strh	r3, [r7, #26]
 800db04:	e039      	b.n	800db7a <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800db06:	8b7b      	ldrh	r3, [r7, #26]
 800db08:	08db      	lsrs	r3, r3, #3
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800db0e:	8b7b      	ldrh	r3, [r7, #26]
 800db10:	f003 0307 	and.w	r3, r3, #7
 800db14:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	2b07      	cmp	r3, #7
 800db1a:	d02a      	beq.n	800db72 <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4413      	add	r3, r2
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	8b7b      	ldrh	r3, [r7, #26]
 800db28:	f003 0307 	and.w	r3, r3, #7
 800db2c:	fa42 f303 	asr.w	r3, r2, r3
 800db30:	f003 0301 	and.w	r3, r3, #1
 800db34:	2b00      	cmp	r3, #0
 800db36:	d010      	beq.n	800db5a <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800db38:	8bfb      	ldrh	r3, [r7, #30]
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	4413      	add	r3, r2
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	b25a      	sxtb	r2, r3
 800db42:	7f7b      	ldrb	r3, [r7, #29]
 800db44:	2101      	movs	r1, #1
 800db46:	fa01 f303 	lsl.w	r3, r1, r3
 800db4a:	b25b      	sxtb	r3, r3
 800db4c:	4313      	orrs	r3, r2
 800db4e:	b259      	sxtb	r1, r3
 800db50:	8bfb      	ldrh	r3, [r7, #30]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	4413      	add	r3, r2
 800db56:	b2ca      	uxtb	r2, r1
 800db58:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800db5a:	7f7b      	ldrb	r3, [r7, #29]
 800db5c:	3301      	adds	r3, #1
 800db5e:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800db60:	7f7b      	ldrb	r3, [r7, #29]
 800db62:	2b08      	cmp	r3, #8
 800db64:	d106      	bne.n	800db74 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800db6a:	8bfb      	ldrh	r3, [r7, #30]
 800db6c:	3301      	adds	r3, #1
 800db6e:	83fb      	strh	r3, [r7, #30]
 800db70:	e000      	b.n	800db74 <ExtractAppData+0x90>
			continue;
 800db72:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800db74:	8b7b      	ldrh	r3, [r7, #26]
 800db76:	3301      	adds	r3, #1
 800db78:	837b      	strh	r3, [r7, #26]
 800db7a:	8b7a      	ldrh	r2, [r7, #26]
 800db7c:	8b3b      	ldrh	r3, [r7, #24]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d3c1      	bcc.n	800db06 <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800db82:	8bfb      	ldrh	r3, [r7, #30]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3724      	adds	r7, #36	; 0x24
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800db90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db94:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800db98:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800db9a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800db9e:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800dba2:	2300      	movs	r3, #0
 800dba4:	6013      	str	r3, [r2, #0]
 800dba6:	1d10      	adds	r0, r2, #4
 800dba8:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800dbac:	461a      	mov	r2, r3
 800dbae:	2100      	movs	r1, #0
 800dbb0:	f018 fe60 	bl	8026874 <memset>
	uint16_t App_data_Traverser = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800dbcc:	2300      	movs	r3, #0
 800dbce:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800dbd8:	f44f 720a 	mov.w	r2, #552	; 0x228
 800dbdc:	2100      	movs	r1, #0
 800dbde:	48ba      	ldr	r0, [pc, #744]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dbe0:	f018 fe48 	bl	8026874 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800dbe4:	4bb9      	ldr	r3, [pc, #740]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dbe6:	7b1b      	ldrb	r3, [r3, #12]
 800dbe8:	4ab7      	ldr	r2, [pc, #732]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dbea:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800dbec:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dbf0:	b2d8      	uxtb	r0, r3
 800dbf2:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dbf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dbfa:	1899      	adds	r1, r3, r2
 800dbfc:	4bb2      	ldr	r3, [pc, #712]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	2200      	movs	r2, #0
 800dc04:	461c      	mov	r4, r3
 800dc06:	4615      	mov	r5, r2
 800dc08:	2301      	movs	r3, #1
 800dc0a:	9302      	str	r3, [sp, #8]
 800dc0c:	e9cd 4500 	strd	r4, r5, [sp]
 800dc10:	460a      	mov	r2, r1
 800dc12:	2108      	movs	r1, #8
 800dc14:	f001 fb24 	bl	800f260 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800dc18:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dc1c:	3308      	adds	r3, #8
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	da00      	bge.n	800dc24 <Form_Siemens_Reply+0x94>
 800dc22:	3307      	adds	r3, #7
 800dc24:	10db      	asrs	r3, r3, #3
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dc2c:	4413      	add	r3, r2
 800dc2e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dc32:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dc36:	3308      	adds	r3, #8
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	b21b      	sxth	r3, r3
 800dc3c:	425a      	negs	r2, r3
 800dc3e:	f003 0107 	and.w	r1, r3, #7
 800dc42:	f002 0307 	and.w	r3, r2, #7
 800dc46:	bf58      	it	pl
 800dc48:	4259      	negpl	r1, r3
 800dc4a:	b20b      	sxth	r3, r1
 800dc4c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800dc50:	4b9e      	ldr	r3, [pc, #632]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dc52:	691a      	ldr	r2, [r3, #16]
 800dc54:	4b9c      	ldr	r3, [pc, #624]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dc56:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800dc58:	4b9c      	ldr	r3, [pc, #624]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dc5a:	695a      	ldr	r2, [r3, #20]
 800dc5c:	4b9a      	ldr	r3, [pc, #616]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dc5e:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800dc60:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dc64:	b2d8      	uxtb	r0, r3
 800dc66:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dc6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc6e:	1899      	adds	r1, r3, r2
 800dc70:	4b95      	ldr	r3, [pc, #596]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	4698      	mov	r8, r3
 800dc78:	4691      	mov	r9, r2
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9302      	str	r3, [sp, #8]
 800dc7e:	e9cd 8900 	strd	r8, r9, [sp]
 800dc82:	460a      	mov	r2, r1
 800dc84:	2118      	movs	r1, #24
 800dc86:	f001 faeb 	bl	800f260 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800dc8a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dc8e:	3318      	adds	r3, #24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	da00      	bge.n	800dc96 <Form_Siemens_Reply+0x106>
 800dc94:	3307      	adds	r3, #7
 800dc96:	10db      	asrs	r3, r3, #3
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dc9e:	4413      	add	r3, r2
 800dca0:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dca4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dca8:	3318      	adds	r3, #24
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	b21b      	sxth	r3, r3
 800dcae:	425a      	negs	r2, r3
 800dcb0:	f003 0107 	and.w	r1, r3, #7
 800dcb4:	f002 0307 	and.w	r3, r2, #7
 800dcb8:	bf58      	it	pl
 800dcba:	4259      	negpl	r1, r3
 800dcbc:	b20b      	sxth	r3, r1
 800dcbe:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800dcc2:	4b82      	ldr	r3, [pc, #520]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	4a80      	ldr	r2, [pc, #512]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dcc8:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800dcca:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dcce:	b2d8      	uxtb	r0, r3
 800dcd0:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dcd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dcd8:	1899      	adds	r1, r3, r2
 800dcda:	4b7b      	ldr	r3, [pc, #492]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dcdc:	7b1b      	ldrb	r3, [r3, #12]
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2200      	movs	r2, #0
 800dce2:	469a      	mov	sl, r3
 800dce4:	4693      	mov	fp, r2
 800dce6:	2301      	movs	r3, #1
 800dce8:	9302      	str	r3, [sp, #8]
 800dcea:	e9cd ab00 	strd	sl, fp, [sp]
 800dcee:	460a      	mov	r2, r1
 800dcf0:	2108      	movs	r1, #8
 800dcf2:	f001 fab5 	bl	800f260 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800dcf6:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dcfa:	3308      	adds	r3, #8
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	da00      	bge.n	800dd02 <Form_Siemens_Reply+0x172>
 800dd00:	3307      	adds	r3, #7
 800dd02:	10db      	asrs	r3, r3, #3
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dd10:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd14:	3308      	adds	r3, #8
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	b21b      	sxth	r3, r3
 800dd1a:	425a      	negs	r2, r3
 800dd1c:	f003 0107 	and.w	r1, r3, #7
 800dd20:	f002 0307 	and.w	r3, r2, #7
 800dd24:	bf58      	it	pl
 800dd26:	4259      	negpl	r1, r3
 800dd28:	b20b      	sxth	r3, r1
 800dd2a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800dd2e:	4b67      	ldr	r3, [pc, #412]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	4b65      	ldr	r3, [pc, #404]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dd34:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800dd36:	4b65      	ldr	r3, [pc, #404]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dd38:	689a      	ldr	r2, [r3, #8]
 800dd3a:	4b63      	ldr	r3, [pc, #396]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dd3c:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800dd3e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd42:	b2d8      	uxtb	r0, r3
 800dd44:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dd48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd4c:	1899      	adds	r1, r3, r2
 800dd4e:	4b5e      	ldr	r3, [pc, #376]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	2200      	movs	r2, #0
 800dd54:	643b      	str	r3, [r7, #64]	; 0x40
 800dd56:	647a      	str	r2, [r7, #68]	; 0x44
 800dd58:	2300      	movs	r3, #0
 800dd5a:	9302      	str	r3, [sp, #8]
 800dd5c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800dd60:	e9cd 3400 	strd	r3, r4, [sp]
 800dd64:	460a      	mov	r2, r1
 800dd66:	2118      	movs	r1, #24
 800dd68:	f001 fa7a 	bl	800f260 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800dd6c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dd70:	3318      	adds	r3, #24
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	da00      	bge.n	800dd78 <Form_Siemens_Reply+0x1e8>
 800dd76:	3307      	adds	r3, #7
 800dd78:	10db      	asrs	r3, r3, #3
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd80:	4413      	add	r3, r2
 800dd82:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dd86:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd8a:	3318      	adds	r3, #24
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	b21b      	sxth	r3, r3
 800dd90:	425a      	negs	r2, r3
 800dd92:	f003 0107 	and.w	r1, r3, #7
 800dd96:	f002 0307 	and.w	r3, r2, #7
 800dd9a:	bf58      	it	pl
 800dd9c:	4259      	negpl	r1, r3
 800dd9e:	b20b      	sxth	r3, r1
 800dda0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	//	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
	Siemens_TX_st.ProdDataVer = Siemens_RX_st.ProdDataVer; //Self Product Version
 800dda4:	4b49      	ldr	r3, [pc, #292]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dda6:	7e1b      	ldrb	r3, [r3, #24]
 800dda8:	4a47      	ldr	r2, [pc, #284]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800ddaa:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800ddac:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ddb0:	b2d8      	uxtb	r0, r3
 800ddb2:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800ddb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ddba:	1899      	adds	r1, r3, r2
 800ddbc:	4b42      	ldr	r3, [pc, #264]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800ddbe:	7e1b      	ldrb	r3, [r3, #24]
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddc6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ddc8:	2300      	movs	r3, #0
 800ddca:	9302      	str	r3, [sp, #8]
 800ddcc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800ddd0:	e9cd 3400 	strd	r3, r4, [sp]
 800ddd4:	460a      	mov	r2, r1
 800ddd6:	2108      	movs	r1, #8
 800ddd8:	f001 fa42 	bl	800f260 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800dddc:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dde0:	3308      	adds	r3, #8
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	da00      	bge.n	800dde8 <Form_Siemens_Reply+0x258>
 800dde6:	3307      	adds	r3, #7
 800dde8:	10db      	asrs	r3, r3, #3
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ddf0:	4413      	add	r3, r2
 800ddf2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ddf6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	b21b      	sxth	r3, r3
 800de00:	425a      	negs	r2, r3
 800de02:	f003 0107 	and.w	r1, r3, #7
 800de06:	f002 0307 	and.w	r3, r2, #7
 800de0a:	bf58      	it	pl
 800de0c:	4259      	negpl	r1, r3
 800de0e:	b20b      	sxth	r3, r1
 800de10:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800de14:	4a2c      	ldr	r2, [pc, #176]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800de16:	2301      	movs	r3, #1
 800de18:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800de1a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de1e:	b2d8      	uxtb	r0, r3
 800de20:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800de24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de28:	1899      	adds	r1, r3, r2
 800de2a:	4b27      	ldr	r3, [pc, #156]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800de2c:	7e5b      	ldrb	r3, [r3, #25]
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	2200      	movs	r2, #0
 800de32:	633b      	str	r3, [r7, #48]	; 0x30
 800de34:	637a      	str	r2, [r7, #52]	; 0x34
 800de36:	2301      	movs	r3, #1
 800de38:	9302      	str	r3, [sp, #8]
 800de3a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800de3e:	e9cd 3400 	strd	r3, r4, [sp]
 800de42:	460a      	mov	r2, r1
 800de44:	2108      	movs	r1, #8
 800de46:	f001 fa0b 	bl	800f260 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800de4a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800de4e:	3308      	adds	r3, #8
 800de50:	2b00      	cmp	r3, #0
 800de52:	da00      	bge.n	800de56 <Form_Siemens_Reply+0x2c6>
 800de54:	3307      	adds	r3, #7
 800de56:	10db      	asrs	r3, r3, #3
 800de58:	b29a      	uxth	r2, r3
 800de5a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800de5e:	4413      	add	r3, r2
 800de60:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800de64:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de68:	3308      	adds	r3, #8
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	b21b      	sxth	r3, r3
 800de6e:	425a      	negs	r2, r3
 800de70:	f003 0307 	and.w	r3, r3, #7
 800de74:	f002 0207 	and.w	r2, r2, #7
 800de78:	bf58      	it	pl
 800de7a:	4253      	negpl	r3, r2
 800de7c:	b21b      	sxth	r3, r3
 800de7e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800de82:	4b12      	ldr	r3, [pc, #72]	; (800decc <Form_Siemens_Reply+0x33c>)
 800de84:	7edb      	ldrb	r3, [r3, #27]
 800de86:	4a10      	ldr	r2, [pc, #64]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800de88:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800de8a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de8e:	b2d8      	uxtb	r0, r3
 800de90:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800de94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de98:	1899      	adds	r1, r3, r2
 800de9a:	4b0b      	ldr	r3, [pc, #44]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800de9c:	7e9b      	ldrb	r3, [r3, #26]
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	2200      	movs	r2, #0
 800dea2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dea6:	2302      	movs	r3, #2
 800dea8:	9302      	str	r3, [sp, #8]
 800deaa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800deae:	e9cd 3400 	strd	r3, r4, [sp]
 800deb2:	460a      	mov	r2, r1
 800deb4:	2108      	movs	r1, #8
 800deb6:	f001 f9d3 	bl	800f260 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800deba:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800debe:	3308      	adds	r3, #8
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	da05      	bge.n	800ded0 <Form_Siemens_Reply+0x340>
 800dec4:	3307      	adds	r3, #7
 800dec6:	e003      	b.n	800ded0 <Form_Siemens_Reply+0x340>
 800dec8:	20004218 	.word	0x20004218
 800decc:	20003ff0 	.word	0x20003ff0
 800ded0:	10db      	asrs	r3, r3, #3
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ded8:	4413      	add	r3, r2
 800deda:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dede:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dee2:	3308      	adds	r3, #8
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	b21b      	sxth	r3, r3
 800dee8:	425a      	negs	r2, r3
 800deea:	f003 0307 	and.w	r3, r3, #7
 800deee:	f002 0207 	and.w	r2, r2, #7
 800def2:	bf58      	it	pl
 800def4:	4253      	negpl	r3, r2
 800def6:	b21b      	sxth	r3, r3
 800def8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800defc:	4bc4      	ldr	r3, [pc, #784]	; (800e210 <Form_Siemens_Reply+0x680>)
 800defe:	7e9a      	ldrb	r2, [r3, #26]
 800df00:	4bc4      	ldr	r3, [pc, #784]	; (800e214 <Form_Siemens_Reply+0x684>)
 800df02:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800df04:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800df08:	b2d8      	uxtb	r0, r3
 800df0a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800df0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800df12:	441a      	add	r2, r3
 800df14:	4bbf      	ldr	r3, [pc, #764]	; (800e214 <Form_Siemens_Reply+0x684>)
 800df16:	7edb      	ldrb	r3, [r3, #27]
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2100      	movs	r1, #0
 800df1c:	623b      	str	r3, [r7, #32]
 800df1e:	6279      	str	r1, [r7, #36]	; 0x24
 800df20:	2302      	movs	r3, #2
 800df22:	9302      	str	r3, [sp, #8]
 800df24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800df28:	e9cd 3400 	strd	r3, r4, [sp]
 800df2c:	2108      	movs	r1, #8
 800df2e:	f001 f997 	bl	800f260 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800df32:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800df36:	3308      	adds	r3, #8
 800df38:	2b00      	cmp	r3, #0
 800df3a:	da00      	bge.n	800df3e <Form_Siemens_Reply+0x3ae>
 800df3c:	3307      	adds	r3, #7
 800df3e:	10db      	asrs	r3, r3, #3
 800df40:	b29a      	uxth	r2, r3
 800df42:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800df46:	4413      	add	r3, r2
 800df48:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800df4c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800df50:	3308      	adds	r3, #8
 800df52:	b29b      	uxth	r3, r3
 800df54:	b21b      	sxth	r3, r3
 800df56:	425a      	negs	r2, r3
 800df58:	f003 0307 	and.w	r3, r3, #7
 800df5c:	f002 0207 	and.w	r2, r2, #7
 800df60:	bf58      	it	pl
 800df62:	4253      	negpl	r3, r2
 800df64:	b21b      	sxth	r3, r3
 800df66:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800df6a:	4ba9      	ldr	r3, [pc, #676]	; (800e210 <Form_Siemens_Reply+0x680>)
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	4aa9      	ldr	r2, [pc, #676]	; (800e214 <Form_Siemens_Reply+0x684>)
 800df70:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800df72:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800df76:	b2d8      	uxtb	r0, r3
 800df78:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800df7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800df80:	4413      	add	r3, r2
 800df82:	4aa4      	ldr	r2, [pc, #656]	; (800e214 <Form_Siemens_Reply+0x684>)
 800df84:	69d2      	ldr	r2, [r2, #28]
 800df86:	2100      	movs	r1, #0
 800df88:	61ba      	str	r2, [r7, #24]
 800df8a:	61f9      	str	r1, [r7, #28]
 800df8c:	2202      	movs	r2, #2
 800df8e:	9202      	str	r2, [sp, #8]
 800df90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800df94:	e9cd 1200 	strd	r1, r2, [sp]
 800df98:	461a      	mov	r2, r3
 800df9a:	2120      	movs	r1, #32
 800df9c:	f001 f960 	bl	800f260 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800dfa0:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dfa4:	3320      	adds	r3, #32
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	da00      	bge.n	800dfac <Form_Siemens_Reply+0x41c>
 800dfaa:	3307      	adds	r3, #7
 800dfac:	10db      	asrs	r3, r3, #3
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dfb4:	4413      	add	r3, r2
 800dfb6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dfba:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dfbe:	3320      	adds	r3, #32
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	b21b      	sxth	r3, r3
 800dfc4:	425a      	negs	r2, r3
 800dfc6:	f003 0307 	and.w	r3, r3, #7
 800dfca:	f002 0207 	and.w	r2, r2, #7
 800dfce:	bf58      	it	pl
 800dfd0:	4253      	negpl	r3, r2
 800dfd2:	b21b      	sxth	r3, r3
 800dfd4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800dfd8:	4b8f      	ldr	r3, [pc, #572]	; (800e218 <Form_Siemens_Reply+0x688>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a8d      	ldr	r2, [pc, #564]	; (800e214 <Form_Siemens_Reply+0x684>)
 800dfde:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800dfe0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dfe4:	b2d8      	uxtb	r0, r3
 800dfe6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dfea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dfee:	4413      	add	r3, r2
 800dff0:	4a88      	ldr	r2, [pc, #544]	; (800e214 <Form_Siemens_Reply+0x684>)
 800dff2:	6a12      	ldr	r2, [r2, #32]
 800dff4:	2100      	movs	r1, #0
 800dff6:	613a      	str	r2, [r7, #16]
 800dff8:	6179      	str	r1, [r7, #20]
 800dffa:	2202      	movs	r2, #2
 800dffc:	9202      	str	r2, [sp, #8]
 800dffe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e002:	e9cd 1200 	strd	r1, r2, [sp]
 800e006:	461a      	mov	r2, r3
 800e008:	2120      	movs	r1, #32
 800e00a:	f001 f929 	bl	800f260 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800e00e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e012:	3320      	adds	r3, #32
 800e014:	2b00      	cmp	r3, #0
 800e016:	da00      	bge.n	800e01a <Form_Siemens_Reply+0x48a>
 800e018:	3307      	adds	r3, #7
 800e01a:	10db      	asrs	r3, r3, #3
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e022:	4413      	add	r3, r2
 800e024:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e028:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e02c:	3320      	adds	r3, #32
 800e02e:	b29b      	uxth	r3, r3
 800e030:	b21b      	sxth	r3, r3
 800e032:	425a      	negs	r2, r3
 800e034:	f003 0307 	and.w	r3, r3, #7
 800e038:	f002 0207 	and.w	r2, r2, #7
 800e03c:	bf58      	it	pl
 800e03e:	4253      	negpl	r3, r2
 800e040:	b21b      	sxth	r3, r3
 800e042:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800e046:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800e04a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e04e:	2201      	movs	r2, #1
 800e050:	4618      	mov	r0, r3
 800e052:	f001 fa6b 	bl	800f52c <Data_Compliment>
 800e056:	4603      	mov	r3, r0
 800e058:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800e05c:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800e060:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e064:	4611      	mov	r1, r2
 800e066:	4618      	mov	r0, r3
 800e068:	f000 ff64 	bl	800ef34 <Siemens_CRC>
 800e06c:	4603      	mov	r3, r0
 800e06e:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800e072:	4b6a      	ldr	r3, [pc, #424]	; (800e21c <Form_Siemens_Reply+0x68c>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	09db      	lsrs	r3, r3, #7
 800e078:	f003 0301 	and.w	r3, r3, #1
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d02c      	beq.n	800e0da <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800e080:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e084:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800e088:	4865      	ldr	r0, [pc, #404]	; (800e220 <Form_Siemens_Reply+0x690>)
 800e08a:	f018 fd77 	bl	8026b7c <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800e08e:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e092:	4619      	mov	r1, r3
 800e094:	4863      	ldr	r0, [pc, #396]	; (800e224 <Form_Siemens_Reply+0x694>)
 800e096:	f018 fcd5 	bl	8026a44 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800e09a:	4863      	ldr	r0, [pc, #396]	; (800e228 <Form_Siemens_Reply+0x698>)
 800e09c:	f010 f97a 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800e0a0:	4601      	mov	r1, r0
 800e0a2:	4b62      	ldr	r3, [pc, #392]	; (800e22c <Form_Siemens_Reply+0x69c>)
 800e0a4:	fba3 2301 	umull	r2, r3, r3, r1
 800e0a8:	0bda      	lsrs	r2, r3, #15
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	041b      	lsls	r3, r3, #16
 800e0ae:	1a9b      	subs	r3, r3, r2
 800e0b0:	1aca      	subs	r2, r1, r3
 800e0b2:	4613      	mov	r3, r2
 800e0b4:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800e0b8:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800e0bc:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d104      	bne.n	800e0ce <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800e0c4:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800e0ce:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	4856      	ldr	r0, [pc, #344]	; (800e230 <Form_Siemens_Reply+0x6a0>)
 800e0d6:	f018 fcb5 	bl	8026a44 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800e0da:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e0de:	b2d8      	uxtb	r0, r3
 800e0e0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e0e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	60ba      	str	r2, [r7, #8]
 800e0f2:	60f9      	str	r1, [r7, #12]
 800e0f4:	2202      	movs	r2, #2
 800e0f6:	9202      	str	r2, [sp, #8]
 800e0f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e0fc:	e9cd 1200 	strd	r1, r2, [sp]
 800e100:	461a      	mov	r2, r3
 800e102:	2110      	movs	r1, #16
 800e104:	f001 f8ac 	bl	800f260 <Insert_cal_parity>
	BITSTUFFINC(16);
 800e108:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e10c:	3310      	adds	r3, #16
 800e10e:	2b00      	cmp	r3, #0
 800e110:	da00      	bge.n	800e114 <Form_Siemens_Reply+0x584>
 800e112:	3307      	adds	r3, #7
 800e114:	10db      	asrs	r3, r3, #3
 800e116:	b29a      	uxth	r2, r3
 800e118:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e11c:	4413      	add	r3, r2
 800e11e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e122:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e126:	3310      	adds	r3, #16
 800e128:	b29b      	uxth	r3, r3
 800e12a:	b21b      	sxth	r3, r3
 800e12c:	425a      	negs	r2, r3
 800e12e:	f003 0307 	and.w	r3, r3, #7
 800e132:	f002 0207 	and.w	r2, r2, #7
 800e136:	bf58      	it	pl
 800e138:	4253      	negpl	r3, r2
 800e13a:	b21b      	sxth	r3, r3
 800e13c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800e140:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e144:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e148:	441a      	add	r2, r3
 800e14a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e14e:	3b02      	subs	r3, #2
 800e150:	b29b      	uxth	r3, r3
 800e152:	4619      	mov	r1, r3
 800e154:	4610      	mov	r0, r2
 800e156:	f000 feed 	bl	800ef34 <Siemens_CRC>
 800e15a:	4603      	mov	r3, r0
 800e15c:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800e160:	4b2e      	ldr	r3, [pc, #184]	; (800e21c <Form_Siemens_Reply+0x68c>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	0a5b      	lsrs	r3, r3, #9
 800e166:	f003 0301 	and.w	r3, r3, #1
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d02c      	beq.n	800e1c8 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800e16e:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e172:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800e176:	482a      	ldr	r0, [pc, #168]	; (800e220 <Form_Siemens_Reply+0x690>)
 800e178:	f018 fd00 	bl	8026b7c <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800e17c:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e180:	4619      	mov	r1, r3
 800e182:	482c      	ldr	r0, [pc, #176]	; (800e234 <Form_Siemens_Reply+0x6a4>)
 800e184:	f018 fc5e 	bl	8026a44 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800e188:	4827      	ldr	r0, [pc, #156]	; (800e228 <Form_Siemens_Reply+0x698>)
 800e18a:	f010 f903 	bl	801e394 <HAL_RNG_GetRandomNumber>
 800e18e:	4601      	mov	r1, r0
 800e190:	4b26      	ldr	r3, [pc, #152]	; (800e22c <Form_Siemens_Reply+0x69c>)
 800e192:	fba3 2301 	umull	r2, r3, r3, r1
 800e196:	0bda      	lsrs	r2, r3, #15
 800e198:	4613      	mov	r3, r2
 800e19a:	041b      	lsls	r3, r3, #16
 800e19c:	1a9b      	subs	r3, r3, r2
 800e19e:	1aca      	subs	r2, r1, r3
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800e1a6:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800e1aa:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d104      	bne.n	800e1bc <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800e1b2:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800e1bc:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	481d      	ldr	r0, [pc, #116]	; (800e238 <Form_Siemens_Reply+0x6a8>)
 800e1c4:	f018 fc3e 	bl	8026a44 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800e1c8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800e1d2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e1d6:	b2d8      	uxtb	r0, r3
 800e1d8:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e1dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800e1e6:	2100      	movs	r1, #0
 800e1e8:	603a      	str	r2, [r7, #0]
 800e1ea:	6079      	str	r1, [r7, #4]
 800e1ec:	2202      	movs	r2, #2
 800e1ee:	9202      	str	r2, [sp, #8]
 800e1f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e1f4:	e9cd 1200 	strd	r1, r2, [sp]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	2110      	movs	r1, #16
 800e1fc:	f001 f830 	bl	800f260 <Insert_cal_parity>
	BITSTUFFINC(16);
 800e200:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e204:	3310      	adds	r3, #16
 800e206:	2b00      	cmp	r3, #0
 800e208:	da18      	bge.n	800e23c <Form_Siemens_Reply+0x6ac>
 800e20a:	3307      	adds	r3, #7
 800e20c:	e016      	b.n	800e23c <Form_Siemens_Reply+0x6ac>
 800e20e:	bf00      	nop
 800e210:	20003ff0 	.word	0x20003ff0
 800e214:	20004218 	.word	0x20004218
 800e218:	200054b4 	.word	0x200054b4
 800e21c:	20004c6c 	.word	0x20004c6c
 800e220:	0802a67c 	.word	0x0802a67c
 800e224:	0802a92c 	.word	0x0802a92c
 800e228:	2000bcec 	.word	0x2000bcec
 800e22c:	80008001 	.word	0x80008001
 800e230:	0802a940 	.word	0x0802a940
 800e234:	0802a954 	.word	0x0802a954
 800e238:	0802a970 	.word	0x0802a970
 800e23c:	10db      	asrs	r3, r3, #3
 800e23e:	b29a      	uxth	r2, r3
 800e240:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e244:	4413      	add	r3, r2
 800e246:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e24a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e24e:	3310      	adds	r3, #16
 800e250:	b29b      	uxth	r3, r3
 800e252:	b21b      	sxth	r3, r3
 800e254:	425a      	negs	r2, r3
 800e256:	f003 0307 	and.w	r3, r3, #7
 800e25a:	f002 0207 	and.w	r2, r2, #7
 800e25e:	bf58      	it	pl
 800e260:	4253      	negpl	r3, r2
 800e262:	b21b      	sxth	r3, r3
 800e264:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800e268:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e26c:	3302      	adds	r3, #2
 800e26e:	461a      	mov	r2, r3
 800e270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e274:	4619      	mov	r1, r3
 800e276:	481e      	ldr	r0, [pc, #120]	; (800e2f0 <Form_Siemens_Reply+0x760>)
 800e278:	f018 fad4 	bl	8026824 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800e27c:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e280:	3302      	adds	r3, #2
 800e282:	b29a      	uxth	r2, r3
 800e284:	4b1a      	ldr	r3, [pc, #104]	; (800e2f0 <Form_Siemens_Reply+0x760>)
 800e286:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800e28a:	f001 f9bb 	bl	800f604 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800e28e:	4b19      	ldr	r3, [pc, #100]	; (800e2f4 <Form_Siemens_Reply+0x764>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	099b      	lsrs	r3, r3, #6
 800e294:	f003 0301 	and.w	r3, r3, #1
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800e29c:	4816      	ldr	r0, [pc, #88]	; (800e2f8 <Form_Siemens_Reply+0x768>)
 800e29e:	f018 fc6d 	bl	8026b7c <puts>
 800e2a2:	e00f      	b.n	800e2c4 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800e2a4:	4b15      	ldr	r3, [pc, #84]	; (800e2fc <Form_Siemens_Reply+0x76c>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d10b      	bne.n	800e2c4 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800e2ac:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	3302      	adds	r3, #2
 800e2b4:	b2d9      	uxtb	r1, r3
 800e2b6:	4a12      	ldr	r2, [pc, #72]	; (800e300 <Form_Siemens_Reply+0x770>)
 800e2b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e2bc:	6812      	ldr	r2, [r2, #0]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f002 fc0a 	bl	8010ad8 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800e2c4:	f44f 720a 	mov.w	r2, #552	; 0x228
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	480e      	ldr	r0, [pc, #56]	; (800e304 <Form_Siemens_Reply+0x774>)
 800e2cc:	f018 fad2 	bl	8026874 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800e2d0:	4a0c      	ldr	r2, [pc, #48]	; (800e304 <Form_Siemens_Reply+0x774>)
 800e2d2:	4b0d      	ldr	r3, [pc, #52]	; (800e308 <Form_Siemens_Reply+0x778>)
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	f44f 730a 	mov.w	r3, #552	; 0x228
 800e2dc:	461a      	mov	r2, r3
 800e2de:	f018 faa1 	bl	8026824 <memcpy>
	UNUSED(App_data_Traverser);
}
 800e2e2:	bf00      	nop
 800e2e4:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20004668 	.word	0x20004668
 800e2f4:	20004c6c 	.word	0x20004c6c
 800e2f8:	0802a990 	.word	0x0802a990
 800e2fc:	20006395 	.word	0x20006395
 800e300:	200069fc 	.word	0x200069fc
 800e304:	20004440 	.word	0x20004440
 800e308:	20004218 	.word	0x20004218

0800e30c <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800e312:	4b64      	ldr	r3, [pc, #400]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	4618      	mov	r0, r3
 800e318:	f002 f86e 	bl	80103f8 <HAL_Elaps_Ticks>
 800e31c:	4602      	mov	r2, r0
 800e31e:	4b62      	ldr	r3, [pc, #392]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e320:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800e324:	429a      	cmp	r2, r3
 800e326:	f240 80b9 	bls.w	800e49c <ProcessSendingSignals2MIE+0x190>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800e32a:	4b5e      	ldr	r3, [pc, #376]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
		if(
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d113      	bne.n	800e35a <ProcessSendingSignals2MIE+0x4e>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800e332:	4b5c      	ldr	r3, [pc, #368]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e334:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800e336:	2b01      	cmp	r3, #1
 800e338:	d10f      	bne.n	800e35a <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e33a:	4b5c      	ldr	r3, [pc, #368]	; (800e4ac <ProcessSendingSignals2MIE+0x1a0>)
 800e33c:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d10b      	bne.n	800e35a <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e342:	4b5b      	ldr	r3, [pc, #364]	; (800e4b0 <ProcessSendingSignals2MIE+0x1a4>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d107      	bne.n	800e35a <ProcessSendingSignals2MIE+0x4e>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e34a:	4b5a      	ldr	r3, [pc, #360]	; (800e4b4 <ProcessSendingSignals2MIE+0x1a8>)
 800e34c:	881b      	ldrh	r3, [r3, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	4959      	ldr	r1, [pc, #356]	; (800e4b8 <ProcessSendingSignals2MIE+0x1ac>)
 800e352:	485a      	ldr	r0, [pc, #360]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e354:	f018 fa66 	bl	8026824 <memcpy>
 800e358:	e02d      	b.n	800e3b6 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800e35a:	4b54      	ldr	r3, [pc, #336]	; (800e4ac <ProcessSendingSignals2MIE+0x1a0>)
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d10f      	bne.n	800e382 <ProcessSendingSignals2MIE+0x76>
 800e362:	4b53      	ldr	r3, [pc, #332]	; (800e4b0 <ProcessSendingSignals2MIE+0x1a4>)
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d10b      	bne.n	800e382 <ProcessSendingSignals2MIE+0x76>
 800e36a:	4b4e      	ldr	r3, [pc, #312]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e36c:	785b      	ldrb	r3, [r3, #1]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d107      	bne.n	800e382 <ProcessSendingSignals2MIE+0x76>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800e372:	4b53      	ldr	r3, [pc, #332]	; (800e4c0 <ProcessSendingSignals2MIE+0x1b4>)
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	4952      	ldr	r1, [pc, #328]	; (800e4c4 <ProcessSendingSignals2MIE+0x1b8>)
 800e37a:	4850      	ldr	r0, [pc, #320]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e37c:	f018 fa52 	bl	8026824 <memcpy>
 800e380:	e019      	b.n	800e3b6 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800e382:	4b4b      	ldr	r3, [pc, #300]	; (800e4b0 <ProcessSendingSignals2MIE+0x1a4>)
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	2b01      	cmp	r3, #1
 800e388:	d10f      	bne.n	800e3aa <ProcessSendingSignals2MIE+0x9e>
 800e38a:	4b48      	ldr	r3, [pc, #288]	; (800e4ac <ProcessSendingSignals2MIE+0x1a0>)
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10b      	bne.n	800e3aa <ProcessSendingSignals2MIE+0x9e>
 800e392:	4b44      	ldr	r3, [pc, #272]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e394:	785b      	ldrb	r3, [r3, #1]
 800e396:	2b01      	cmp	r3, #1
 800e398:	d107      	bne.n	800e3aa <ProcessSendingSignals2MIE+0x9e>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e39a:	4b46      	ldr	r3, [pc, #280]	; (800e4b4 <ProcessSendingSignals2MIE+0x1a8>)
 800e39c:	881b      	ldrh	r3, [r3, #0]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	4945      	ldr	r1, [pc, #276]	; (800e4b8 <ProcessSendingSignals2MIE+0x1ac>)
 800e3a2:	4846      	ldr	r0, [pc, #280]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e3a4:	f018 fa3e 	bl	8026824 <memcpy>
 800e3a8:	e005      	b.n	800e3b6 <ProcessSendingSignals2MIE+0xaa>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800e3aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	4842      	ldr	r0, [pc, #264]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e3b2:	f018 fa5f 	bl	8026874 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800e3b6:	4b3e      	ldr	r3, [pc, #248]	; (800e4b0 <ProcessSendingSignals2MIE+0x1a4>)
 800e3b8:	885b      	ldrh	r3, [r3, #2]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	4b3a      	ldr	r3, [pc, #232]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e3be:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d30d      	bcc.n	800e3e2 <ProcessSendingSignals2MIE+0xd6>
 800e3c6:	4b39      	ldr	r3, [pc, #228]	; (800e4ac <ProcessSendingSignals2MIE+0x1a0>)
 800e3c8:	885b      	ldrh	r3, [r3, #2]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	4b36      	ldr	r3, [pc, #216]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e3ce:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d305      	bcc.n	800e3e2 <ProcessSendingSignals2MIE+0xd6>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800e3d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3da:	2100      	movs	r1, #0
 800e3dc:	4837      	ldr	r0, [pc, #220]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e3de:	f018 fa49 	bl	8026874 <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800e3e2:	4b31      	ldr	r3, [pc, #196]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e3e4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e3e8:	f003 0307 	and.w	r3, r3, #7
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	4b36      	ldr	r3, [pc, #216]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e3f0:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800e3f2:	4b35      	ldr	r3, [pc, #212]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d009      	beq.n	800e40e <ProcessSendingSignals2MIE+0x102>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800e3fa:	4b2b      	ldr	r3, [pc, #172]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e3fc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e400:	08db      	lsrs	r3, r3, #3
 800e402:	b29b      	uxth	r3, r3
 800e404:	3301      	adds	r3, #1
 800e406:	b29a      	uxth	r2, r3
 800e408:	4b2f      	ldr	r3, [pc, #188]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e40a:	801a      	strh	r2, [r3, #0]
 800e40c:	e006      	b.n	800e41c <ProcessSendingSignals2MIE+0x110>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800e40e:	4b26      	ldr	r3, [pc, #152]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e410:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e414:	08db      	lsrs	r3, r3, #3
 800e416:	b29a      	uxth	r2, r3
 800e418:	4b2b      	ldr	r3, [pc, #172]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e41a:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800e41c:	492b      	ldr	r1, [pc, #172]	; (800e4cc <ProcessSendingSignals2MIE+0x1c0>)
 800e41e:	482c      	ldr	r0, [pc, #176]	; (800e4d0 <ProcessSendingSignals2MIE+0x1c4>)
 800e420:	f7f1 ff0e 	bl	8000240 <strcmp>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d008      	beq.n	800e43c <ProcessSendingSignals2MIE+0x130>
 800e42a:	4b1e      	ldr	r3, [pc, #120]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e42c:	785b      	ldrb	r3, [r3, #1]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d104      	bne.n	800e43c <ProcessSendingSignals2MIE+0x130>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800e432:	f240 1019 	movw	r0, #281	; 0x119
 800e436:	f002 fd93 	bl	8010f60 <TransmitCanPkt>
 800e43a:	e011      	b.n	800e460 <ProcessSendingSignals2MIE+0x154>
		}
#ifdef EI_1
		else
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800e43c:	4923      	ldr	r1, [pc, #140]	; (800e4cc <ProcessSendingSignals2MIE+0x1c0>)
 800e43e:	4824      	ldr	r0, [pc, #144]	; (800e4d0 <ProcessSendingSignals2MIE+0x1c4>)
 800e440:	f7f1 fefe 	bl	8000240 <strcmp>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d106      	bne.n	800e458 <ProcessSendingSignals2MIE+0x14c>
			{
				memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e44a:	4b1a      	ldr	r3, [pc, #104]	; (800e4b4 <ProcessSendingSignals2MIE+0x1a8>)
 800e44c:	881b      	ldrh	r3, [r3, #0]
 800e44e:	461a      	mov	r2, r3
 800e450:	4919      	ldr	r1, [pc, #100]	; (800e4b8 <ProcessSendingSignals2MIE+0x1ac>)
 800e452:	481a      	ldr	r0, [pc, #104]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e454:	f018 f9e6 	bl	8026824 <memcpy>
			}
			TransmitCanPkt(EI_PROCESS_DATA);
 800e458:	f240 1019 	movw	r0, #281	; 0x119
 800e45c:	f002 fd80 	bl	8010f60 <TransmitCanPkt>




#ifdef EI_1
		printf("\nSendingRelaysToMIE:");
 800e460:	481c      	ldr	r0, [pc, #112]	; (800e4d4 <ProcessSendingSignals2MIE+0x1c8>)
 800e462:	f018 faef 	bl	8026a44 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800e466:	2300      	movs	r3, #0
 800e468:	80fb      	strh	r3, [r7, #6]
 800e46a:	e00a      	b.n	800e482 <ProcessSendingSignals2MIE+0x176>
		{
			printf("%02X ",VitalData2MIE_st.Relays[Traverser]);
 800e46c:	88fb      	ldrh	r3, [r7, #6]
 800e46e:	4a16      	ldr	r2, [pc, #88]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e470:	4413      	add	r3, r2
 800e472:	789b      	ldrb	r3, [r3, #2]
 800e474:	4619      	mov	r1, r3
 800e476:	4818      	ldr	r0, [pc, #96]	; (800e4d8 <ProcessSendingSignals2MIE+0x1cc>)
 800e478:	f018 fae4 	bl	8026a44 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800e47c:	88fb      	ldrh	r3, [r7, #6]
 800e47e:	3301      	adds	r3, #1
 800e480:	80fb      	strh	r3, [r7, #6]
 800e482:	4b11      	ldr	r3, [pc, #68]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	88fa      	ldrh	r2, [r7, #6]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d3ef      	bcc.n	800e46c <ProcessSendingSignals2MIE+0x160>
		}
		printf("\n");
 800e48c:	200a      	movs	r0, #10
 800e48e:	f018 faf1 	bl	8026a74 <putchar>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800e492:	f00b facd 	bl	8019a30 <HAL_GetTick>
 800e496:	4603      	mov	r3, r0
 800e498:	4a02      	ldr	r2, [pc, #8]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e49a:	6053      	str	r3, [r2, #4]
	}
}
 800e49c:	bf00      	nop
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	20004c80 	.word	0x20004c80
 800e4a8:	20000504 	.word	0x20000504
 800e4ac:	20004c78 	.word	0x20004c78
 800e4b0:	20004c74 	.word	0x20004c74
 800e4b4:	20004ea0 	.word	0x20004ea0
 800e4b8:	20004ea4 	.word	0x20004ea4
 800e4bc:	20004c9e 	.word	0x20004c9e
 800e4c0:	200050a4 	.word	0x200050a4
 800e4c4:	200050a8 	.word	0x200050a8
 800e4c8:	20004c9c 	.word	0x20004c9c
 800e4cc:	0802a8fc 	.word	0x0802a8fc
 800e4d0:	20000505 	.word	0x20000505
 800e4d4:	0802a9b8 	.word	0x0802a9b8
 800e4d8:	0802a9d0 	.word	0x0802a9d0

0800e4dc <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800e4e0:	4b0c      	ldr	r3, [pc, #48]	; (800e514 <ProcessSelfSharing+0x38>)
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f001 ff87 	bl	80103f8 <HAL_Elaps_Ticks>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	4b0a      	ldr	r3, [pc, #40]	; (800e518 <ProcessSelfSharing+0x3c>)
 800e4ee:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d90b      	bls.n	800e50e <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800e4f6:	4b09      	ldr	r3, [pc, #36]	; (800e51c <ProcessSelfSharing+0x40>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800e4fc:	f240 2001 	movw	r0, #513	; 0x201
 800e500:	f002 fd2e 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800e504:	f00b fa94 	bl	8019a30 <HAL_GetTick>
 800e508:	4603      	mov	r3, r0
 800e50a:	4a02      	ldr	r2, [pc, #8]	; (800e514 <ProcessSelfSharing+0x38>)
 800e50c:	6093      	str	r3, [r2, #8]
	}
}
 800e50e:	bf00      	nop
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	20004c80 	.word	0x20004c80
 800e518:	20000504 	.word	0x20000504
 800e51c:	20004c74 	.word	0x20004c74

0800e520 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800e524:	4b1a      	ldr	r3, [pc, #104]	; (800e590 <ProcessDetectNoValidDataReceive+0x70>)
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d014      	beq.n	800e556 <ProcessDetectNoValidDataReceive+0x36>
 800e52c:	4b18      	ldr	r3, [pc, #96]	; (800e590 <ProcessDetectNoValidDataReceive+0x70>)
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	4618      	mov	r0, r3
 800e532:	f001 ff61 	bl	80103f8 <HAL_Elaps_Ticks>
 800e536:	4602      	mov	r2, r0
 800e538:	4b16      	ldr	r3, [pc, #88]	; (800e594 <ProcessDetectNoValidDataReceive+0x74>)
 800e53a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800e53e:	429a      	cmp	r2, r3
 800e540:	d909      	bls.n	800e556 <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e542:	4b15      	ldr	r3, [pc, #84]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d005      	beq.n	800e556 <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800e54a:	4814      	ldr	r0, [pc, #80]	; (800e59c <ProcessDetectNoValidDataReceive+0x7c>)
 800e54c:	f018 fb16 	bl	8026b7c <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e550:	4b11      	ldr	r3, [pc, #68]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e552:	2200      	movs	r2, #0
 800e554:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800e556:	4b10      	ldr	r3, [pc, #64]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e558:	885b      	ldrh	r3, [r3, #2]
 800e55a:	461a      	mov	r2, r3
 800e55c:	4b0d      	ldr	r3, [pc, #52]	; (800e594 <ProcessDetectNoValidDataReceive+0x74>)
 800e55e:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e562:	429a      	cmp	r2, r3
 800e564:	d911      	bls.n	800e58a <ProcessDetectNoValidDataReceive+0x6a>
 800e566:	4b0e      	ldr	r3, [pc, #56]	; (800e5a0 <ProcessDetectNoValidDataReceive+0x80>)
 800e568:	885b      	ldrh	r3, [r3, #2]
 800e56a:	461a      	mov	r2, r3
 800e56c:	4b09      	ldr	r3, [pc, #36]	; (800e594 <ProcessDetectNoValidDataReceive+0x74>)
 800e56e:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e572:	429a      	cmp	r2, r3
 800e574:	d909      	bls.n	800e58a <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e576:	4b08      	ldr	r3, [pc, #32]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d005      	beq.n	800e58a <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800e57e:	4809      	ldr	r0, [pc, #36]	; (800e5a4 <ProcessDetectNoValidDataReceive+0x84>)
 800e580:	f018 fafc 	bl	8026b7c <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e584:	4b04      	ldr	r3, [pc, #16]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e586:	2200      	movs	r2, #0
 800e588:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800e58a:	bf00      	nop
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	20004c80 	.word	0x20004c80
 800e594:	20000504 	.word	0x20000504
 800e598:	20004c74 	.word	0x20004c74
 800e59c:	0802a9d8 	.word	0x0802a9d8
 800e5a0:	20004c78 	.word	0x20004c78
 800e5a4:	0802a9f8 	.word	0x0802a9f8

0800e5a8 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800e5ac:	4b09      	ldr	r3, [pc, #36]	; (800e5d4 <SendRelays2Other+0x2c>)
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f001 ff21 	bl	80103f8 <HAL_Elaps_Ticks>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5bc:	d908      	bls.n	800e5d0 <SendRelays2Other+0x28>
	{

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800e5be:	f240 2007 	movw	r0, #519	; 0x207
 800e5c2:	f002 fccd 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800e5c6:	f00b fa33 	bl	8019a30 <HAL_GetTick>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	4a01      	ldr	r2, [pc, #4]	; (800e5d4 <SendRelays2Other+0x2c>)
 800e5ce:	6113      	str	r3, [r2, #16]

	}
}
 800e5d0:	bf00      	nop
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	20004c80 	.word	0x20004c80

0800e5d8 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800e5dc:	4b16      	ldr	r3, [pc, #88]	; (800e638 <CheckRelayMisMatch+0x60>)
 800e5de:	695b      	ldr	r3, [r3, #20]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f001 ff09 	bl	80103f8 <HAL_Elaps_Ticks>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e5ec:	d922      	bls.n	800e634 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e5ee:	4b13      	ldr	r3, [pc, #76]	; (800e63c <CheckRelayMisMatch+0x64>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10c      	bne.n	800e610 <CheckRelayMisMatch+0x38>
 800e5f6:	4b12      	ldr	r3, [pc, #72]	; (800e640 <CheckRelayMisMatch+0x68>)
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d108      	bne.n	800e610 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800e5fe:	4a11      	ldr	r2, [pc, #68]	; (800e644 <CheckRelayMisMatch+0x6c>)
 800e600:	4b11      	ldr	r3, [pc, #68]	; (800e648 <CheckRelayMisMatch+0x70>)
 800e602:	4610      	mov	r0, r2
 800e604:	4619      	mov	r1, r3
 800e606:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e60a:	461a      	mov	r2, r3
 800e60c:	f018 f90a 	bl	8026824 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800e610:	4b0d      	ldr	r3, [pc, #52]	; (800e648 <CheckRelayMisMatch+0x70>)
 800e612:	885a      	ldrh	r2, [r3, #2]
 800e614:	4b0b      	ldr	r3, [pc, #44]	; (800e644 <CheckRelayMisMatch+0x6c>)
 800e616:	885b      	ldrh	r3, [r3, #2]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d003      	beq.n	800e624 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800e61c:	4b06      	ldr	r3, [pc, #24]	; (800e638 <CheckRelayMisMatch+0x60>)
 800e61e:	2201      	movs	r2, #1
 800e620:	701a      	strb	r2, [r3, #0]
 800e622:	e002      	b.n	800e62a <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = RESET;
 800e624:	4b04      	ldr	r3, [pc, #16]	; (800e638 <CheckRelayMisMatch+0x60>)
 800e626:	2200      	movs	r2, #0
 800e628:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800e62a:	f00b fa01 	bl	8019a30 <HAL_GetTick>
 800e62e:	4603      	mov	r3, r0
 800e630:	4a01      	ldr	r2, [pc, #4]	; (800e638 <CheckRelayMisMatch+0x60>)
 800e632:	6153      	str	r3, [r2, #20]
	}
}
 800e634:	bf00      	nop
 800e636:	bd80      	pop	{r7, pc}
 800e638:	20004c80 	.word	0x20004c80
 800e63c:	20004c74 	.word	0x20004c74
 800e640:	20004c78 	.word	0x20004c78
 800e644:	20004ea0 	.word	0x20004ea0
 800e648:	200050a4 	.word	0x200050a4

0800e64c <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800e650:	4b16      	ldr	r3, [pc, #88]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e652:	785b      	ldrb	r3, [r3, #1]
 800e654:	2b01      	cmp	r3, #1
 800e656:	d101      	bne.n	800e65c <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800e658:	f007 ff0e 	bl	8016478 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800e65c:	4b13      	ldr	r3, [pc, #76]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	4618      	mov	r0, r3
 800e662:	f001 fec9 	bl	80103f8 <HAL_Elaps_Ticks>
 800e666:	4602      	mov	r2, r0
 800e668:	4b11      	ldr	r3, [pc, #68]	; (800e6b0 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800e66a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800e66e:	429a      	cmp	r2, r3
 800e670:	d31a      	bcc.n	800e6a8 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800e672:	4b0e      	ldr	r3, [pc, #56]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e674:	699a      	ldr	r2, [r3, #24]
 800e676:	4b0f      	ldr	r3, [pc, #60]	; (800e6b4 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d014      	beq.n	800e6a8 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800e67e:	4b0b      	ldr	r3, [pc, #44]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e680:	2200      	movs	r2, #0
 800e682:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800e684:	4b09      	ldr	r3, [pc, #36]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e686:	699b      	ldr	r3, [r3, #24]
 800e688:	4a0a      	ldr	r2, [pc, #40]	; (800e6b4 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e68a:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800e68c:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	4618      	mov	r0, r3
 800e692:	f001 feb1 	bl	80103f8 <HAL_Elaps_Ticks>
 800e696:	4603      	mov	r3, r0
 800e698:	4a07      	ldr	r2, [pc, #28]	; (800e6b8 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800e69a:	fba2 2303 	umull	r2, r3, r2, r3
 800e69e:	099b      	lsrs	r3, r3, #6
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4806      	ldr	r0, [pc, #24]	; (800e6bc <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800e6a4:	f018 f9ce 	bl	8026a44 <iprintf>
		}
	}
}
 800e6a8:	bf00      	nop
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	20004c80 	.word	0x20004c80
 800e6b0:	20000504 	.word	0x20000504
 800e6b4:	20006398 	.word	0x20006398
 800e6b8:	10624dd3 	.word	0x10624dd3
 800e6bc:	0802aa1c 	.word	0x0802aa1c

0800e6c0 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	80fb      	strh	r3, [r7, #6]
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800e6d6:	484d      	ldr	r0, [pc, #308]	; (800e80c <Print_Siemens_MSG+0x14c>)
 800e6d8:	f018 f9b4 	bl	8026a44 <iprintf>
	if(TX_RX == TX)
 800e6dc:	797b      	ldrb	r3, [r7, #5]
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d103      	bne.n	800e6ea <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800e6e2:	484b      	ldr	r0, [pc, #300]	; (800e810 <Print_Siemens_MSG+0x150>)
 800e6e4:	f018 f9ae 	bl	8026a44 <iprintf>
 800e6e8:	e005      	b.n	800e6f6 <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800e6ea:	797b      	ldrb	r3, [r7, #5]
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d102      	bne.n	800e6f6 <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800e6f0:	4848      	ldr	r0, [pc, #288]	; (800e814 <Print_Siemens_MSG+0x154>)
 800e6f2:	f018 f9a7 	bl	8026a44 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	4846      	ldr	r0, [pc, #280]	; (800e818 <Print_Siemens_MSG+0x158>)
 800e6fe:	f018 f9a1 	bl	8026a44 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	4619      	mov	r1, r3
 800e708:	4844      	ldr	r0, [pc, #272]	; (800e81c <Print_Siemens_MSG+0x15c>)
 800e70a:	f018 f99b 	bl	8026a44 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	7b1b      	ldrb	r3, [r3, #12]
 800e712:	4619      	mov	r1, r3
 800e714:	4842      	ldr	r0, [pc, #264]	; (800e820 <Print_Siemens_MSG+0x160>)
 800e716:	f018 f995 	bl	8026a44 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	695b      	ldr	r3, [r3, #20]
 800e71e:	4619      	mov	r1, r3
 800e720:	4840      	ldr	r0, [pc, #256]	; (800e824 <Print_Siemens_MSG+0x164>)
 800e722:	f018 f98f 	bl	8026a44 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	7e1b      	ldrb	r3, [r3, #24]
 800e72a:	4619      	mov	r1, r3
 800e72c:	483e      	ldr	r0, [pc, #248]	; (800e828 <Print_Siemens_MSG+0x168>)
 800e72e:	f018 f989 	bl	8026a44 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	7e5b      	ldrb	r3, [r3, #25]
 800e736:	4619      	mov	r1, r3
 800e738:	483c      	ldr	r0, [pc, #240]	; (800e82c <Print_Siemens_MSG+0x16c>)
 800e73a:	f018 f983 	bl	8026a44 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	7e9b      	ldrb	r3, [r3, #26]
 800e742:	4619      	mov	r1, r3
 800e744:	483a      	ldr	r0, [pc, #232]	; (800e830 <Print_Siemens_MSG+0x170>)
 800e746:	f018 f97d 	bl	8026a44 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	7edb      	ldrb	r3, [r3, #27]
 800e74e:	4619      	mov	r1, r3
 800e750:	4838      	ldr	r0, [pc, #224]	; (800e834 <Print_Siemens_MSG+0x174>)
 800e752:	f018 f977 	bl	8026a44 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	69db      	ldr	r3, [r3, #28]
 800e75a:	4619      	mov	r1, r3
 800e75c:	4836      	ldr	r0, [pc, #216]	; (800e838 <Print_Siemens_MSG+0x178>)
 800e75e:	f018 f971 	bl	8026a44 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6a1b      	ldr	r3, [r3, #32]
 800e766:	4619      	mov	r1, r3
 800e768:	4834      	ldr	r0, [pc, #208]	; (800e83c <Print_Siemens_MSG+0x17c>)
 800e76a:	f018 f96b 	bl	8026a44 <iprintf>
	if(TX_RX == RX)
 800e76e:	797b      	ldrb	r3, [r7, #5]
 800e770:	2b02      	cmp	r3, #2
 800e772:	d122      	bne.n	800e7ba <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e778:	4619      	mov	r1, r3
 800e77a:	4831      	ldr	r0, [pc, #196]	; (800e840 <Print_Siemens_MSG+0x180>)
 800e77c:	f018 f962 	bl	8026a44 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e780:	2300      	movs	r3, #0
 800e782:	82fb      	strh	r3, [r7, #22]
 800e784:	e00b      	b.n	800e79e <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800e786:	8afb      	ldrh	r3, [r7, #22]
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	4413      	add	r3, r2
 800e78c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800e790:	4619      	mov	r1, r3
 800e792:	482c      	ldr	r0, [pc, #176]	; (800e844 <Print_Siemens_MSG+0x184>)
 800e794:	f018 f956 	bl	8026a44 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e798:	8afb      	ldrh	r3, [r7, #22]
 800e79a:	3301      	adds	r3, #1
 800e79c:	82fb      	strh	r3, [r7, #22]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e7a2:	8afa      	ldrh	r2, [r7, #22]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d3ee      	bcc.n	800e786 <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800e7a8:	200a      	movs	r0, #10
 800e7aa:	f018 f963 	bl	8026a74 <putchar>

		if(Debug_flag == 2)
 800e7ae:	4b26      	ldr	r3, [pc, #152]	; (800e848 <Print_Siemens_MSG+0x188>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d101      	bne.n	800e7ba <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800e7b6:	f000 ff65 	bl	800f684 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800e7ba:	4b23      	ldr	r3, [pc, #140]	; (800e848 <Print_Siemens_MSG+0x188>)
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d120      	bne.n	800e804 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	82bb      	strh	r3, [r7, #20]
 800e7c6:	e016      	b.n	800e7f6 <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800e7c8:	8abb      	ldrh	r3, [r7, #20]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d008      	beq.n	800e7e0 <Print_Siemens_MSG+0x120>
 800e7ce:	8abb      	ldrh	r3, [r7, #20]
 800e7d0:	f003 031f 	and.w	r3, r3, #31
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d102      	bne.n	800e7e0 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800e7da:	200a      	movs	r0, #10
 800e7dc:	f018 f94a 	bl	8026a74 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800e7e0:	8abb      	ldrh	r3, [r7, #20]
 800e7e2:	68ba      	ldr	r2, [r7, #8]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4816      	ldr	r0, [pc, #88]	; (800e844 <Print_Siemens_MSG+0x184>)
 800e7ec:	f018 f92a 	bl	8026a44 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e7f0:	8abb      	ldrh	r3, [r7, #20]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	82bb      	strh	r3, [r7, #20]
 800e7f6:	8aba      	ldrh	r2, [r7, #20]
 800e7f8:	88fb      	ldrh	r3, [r7, #6]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d3e4      	bcc.n	800e7c8 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800e7fe:	200a      	movs	r0, #10
 800e800:	f018 f938 	bl	8026a74 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800e804:	bf00      	nop
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	0802aa4c 	.word	0x0802aa4c
 800e810:	0802aa54 	.word	0x0802aa54
 800e814:	0802aa58 	.word	0x0802aa58
 800e818:	0802aa5c 	.word	0x0802aa5c
 800e81c:	0802aa64 	.word	0x0802aa64
 800e820:	0802aa6c 	.word	0x0802aa6c
 800e824:	0802aa74 	.word	0x0802aa74
 800e828:	0802aa7c 	.word	0x0802aa7c
 800e82c:	0802aa88 	.word	0x0802aa88
 800e830:	0802aa90 	.word	0x0802aa90
 800e834:	0802aa98 	.word	0x0802aa98
 800e838:	0802aaa0 	.word	0x0802aaa0
 800e83c:	0802aaac 	.word	0x0802aaac
 800e840:	0802aab8 	.word	0x0802aab8
 800e844:	0802a9d0 	.word	0x0802a9d0
 800e848:	20000bbb 	.word	0x20000bbb

0800e84c <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b09a      	sub	sp, #104	; 0x68
 800e850:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800e852:	2300      	movs	r3, #0
 800e854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800e858:	2300      	movs	r3, #0
 800e85a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800e85e:	2300      	movs	r3, #0
 800e860:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800e864:	2300      	movs	r3, #0
 800e866:	603b      	str	r3, [r7, #0]
 800e868:	1d3b      	adds	r3, r7, #4
 800e86a:	2260      	movs	r2, #96	; 0x60
 800e86c:	2100      	movs	r1, #0
 800e86e:	4618      	mov	r0, r3
 800e870:	f018 f800 	bl	8026874 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800e874:	4bb9      	ldr	r3, [pc, #740]	; (800eb5c <Chech_forSiemensCMD+0x310>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4618      	mov	r0, r3
 800e87a:	f001 fdbd 	bl	80103f8 <HAL_Elaps_Ticks>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b09      	cmp	r3, #9
 800e882:	f240 81ad 	bls.w	800ebe0 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800e886:	e010      	b.n	800e8aa <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800e888:	2000      	movs	r0, #0
 800e88a:	f00a fda9 	bl	80193e0 <Com_Get_Byte>
 800e88e:	4603      	mov	r3, r0
 800e890:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800e894:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e898:	1c5a      	adds	r2, r3, #1
 800e89a:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800e89e:	3368      	adds	r3, #104	; 0x68
 800e8a0:	443b      	add	r3, r7
 800e8a2:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800e8a6:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	f00a fd58 	bl	8019360 <Com_DataReady>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1e8      	bne.n	800e888 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800e8b6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f000 8144 	beq.w	800eb48 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800e8c0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e8c4:	3368      	adds	r3, #104	; 0x68
 800e8c6:	443b      	add	r3, r7
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800e8ce:	463b      	mov	r3, r7
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	48a3      	ldr	r0, [pc, #652]	; (800eb60 <Chech_forSiemensCMD+0x314>)
 800e8d4:	f018 f8b6 	bl	8026a44 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800e8d8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800e8dc:	463b      	mov	r3, r7
 800e8de:	4611      	mov	r1, r2
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f000 faf3 	bl	800eecc <Is_SiemensCommand_Valid>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b0c      	cmp	r3, #12
 800e8ea:	f200 8129 	bhi.w	800eb40 <Chech_forSiemensCMD+0x2f4>
 800e8ee:	a201      	add	r2, pc, #4	; (adr r2, 800e8f4 <Chech_forSiemensCMD+0xa8>)
 800e8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f4:	0800e929 	.word	0x0800e929
 800e8f8:	0800e937 	.word	0x0800e937
 800e8fc:	0800e99b 	.word	0x0800e99b
 800e900:	0800e9bd 	.word	0x0800e9bd
 800e904:	0800e9e5 	.word	0x0800e9e5
 800e908:	0800ea0d 	.word	0x0800ea0d
 800e90c:	0800ea35 	.word	0x0800ea35
 800e910:	0800ea5d 	.word	0x0800ea5d
 800e914:	0800ea85 	.word	0x0800ea85
 800e918:	0800eaad 	.word	0x0800eaad
 800e91c:	0800ead5 	.word	0x0800ead5
 800e920:	0800eafd 	.word	0x0800eafd
 800e924:	0800eb25 	.word	0x0800eb25
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800e928:	4b8e      	ldr	r3, [pc, #568]	; (800eb64 <Chech_forSiemensCMD+0x318>)
 800e92a:	2201      	movs	r2, #1
 800e92c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800e92e:	488e      	ldr	r0, [pc, #568]	; (800eb68 <Chech_forSiemensCMD+0x31c>)
 800e930:	f018 f924 	bl	8026b7c <puts>
				break;
 800e934:	e109      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800e936:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e93a:	3b01      	subs	r3, #1
 800e93c:	3368      	adds	r3, #104	; 0x68
 800e93e:	443b      	add	r3, r7
 800e940:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e944:	3b30      	subs	r3, #48	; 0x30
 800e946:	461a      	mov	r2, r3
 800e948:	4988      	ldr	r1, [pc, #544]	; (800eb6c <Chech_forSiemensCMD+0x320>)
 800e94a:	4889      	ldr	r0, [pc, #548]	; (800eb70 <Chech_forSiemensCMD+0x324>)
 800e94c:	f018 f87a 	bl	8026a44 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800e950:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e954:	3b01      	subs	r3, #1
 800e956:	3368      	adds	r3, #104	; 0x68
 800e958:	443b      	add	r3, r7
 800e95a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e95e:	2b2f      	cmp	r3, #47	; 0x2f
 800e960:	d914      	bls.n	800e98c <Chech_forSiemensCMD+0x140>
 800e962:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e966:	3b01      	subs	r3, #1
 800e968:	3368      	adds	r3, #104	; 0x68
 800e96a:	443b      	add	r3, r7
 800e96c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e970:	2b32      	cmp	r3, #50	; 0x32
 800e972:	d80b      	bhi.n	800e98c <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800e974:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e978:	3b01      	subs	r3, #1
 800e97a:	3368      	adds	r3, #104	; 0x68
 800e97c:	443b      	add	r3, r7
 800e97e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e982:	3b30      	subs	r3, #48	; 0x30
 800e984:	b2da      	uxtb	r2, r3
 800e986:	4b7b      	ldr	r3, [pc, #492]	; (800eb74 <Chech_forSiemensCMD+0x328>)
 800e988:	701a      	strb	r2, [r3, #0]
 800e98a:	e002      	b.n	800e992 <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800e98c:	487a      	ldr	r0, [pc, #488]	; (800eb78 <Chech_forSiemensCMD+0x32c>)
 800e98e:	f018 f8f5 	bl	8026b7c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800e992:	2301      	movs	r3, #1
 800e994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e998:	e0d7      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800e99a:	4978      	ldr	r1, [pc, #480]	; (800eb7c <Chech_forSiemensCMD+0x330>)
 800e99c:	4878      	ldr	r0, [pc, #480]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800e99e:	f018 f851 	bl	8026a44 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800e9a2:	4878      	ldr	r0, [pc, #480]	; (800eb84 <Chech_forSiemensCMD+0x338>)
 800e9a4:	f018 f8ea 	bl	8026b7c <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e9a8:	4b77      	ldr	r3, [pc, #476]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f043 0301 	orr.w	r3, r3, #1
 800e9b0:	4a75      	ldr	r2, [pc, #468]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9b2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e9ba:	e0c6      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800e9bc:	4973      	ldr	r1, [pc, #460]	; (800eb8c <Chech_forSiemensCMD+0x340>)
 800e9be:	4870      	ldr	r0, [pc, #448]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800e9c0:	f018 f840 	bl	8026a44 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800e9c4:	4872      	ldr	r0, [pc, #456]	; (800eb90 <Chech_forSiemensCMD+0x344>)
 800e9c6:	f018 f8d9 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e9ca:	4b6f      	ldr	r3, [pc, #444]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e9d0:	4b6d      	ldr	r3, [pc, #436]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f043 0302 	orr.w	r3, r3, #2
 800e9d8:	4a6b      	ldr	r2, [pc, #428]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9da:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e9e2:	e0b2      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800e9e4:	496b      	ldr	r1, [pc, #428]	; (800eb94 <Chech_forSiemensCMD+0x348>)
 800e9e6:	4866      	ldr	r0, [pc, #408]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800e9e8:	f018 f82c 	bl	8026a44 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800e9ec:	486a      	ldr	r0, [pc, #424]	; (800eb98 <Chech_forSiemensCMD+0x34c>)
 800e9ee:	f018 f8c5 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e9f2:	4b65      	ldr	r3, [pc, #404]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e9f8:	4b63      	ldr	r3, [pc, #396]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f043 0304 	orr.w	r3, r3, #4
 800ea00:	4a61      	ldr	r2, [pc, #388]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea02:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ea04:	2301      	movs	r3, #1
 800ea06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ea0a:	e09e      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800ea0c:	4963      	ldr	r1, [pc, #396]	; (800eb9c <Chech_forSiemensCMD+0x350>)
 800ea0e:	485c      	ldr	r0, [pc, #368]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800ea10:	f018 f818 	bl	8026a44 <iprintf>
				printf("INVALID_DES_PORT\n");
 800ea14:	4862      	ldr	r0, [pc, #392]	; (800eba0 <Chech_forSiemensCMD+0x354>)
 800ea16:	f018 f8b1 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ea1a:	4b5b      	ldr	r3, [pc, #364]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ea20:	4b59      	ldr	r3, [pc, #356]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f043 0308 	orr.w	r3, r3, #8
 800ea28:	4a57      	ldr	r2, [pc, #348]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea2a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ea32:	e08a      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800ea34:	495b      	ldr	r1, [pc, #364]	; (800eba4 <Chech_forSiemensCMD+0x358>)
 800ea36:	4852      	ldr	r0, [pc, #328]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800ea38:	f018 f804 	bl	8026a44 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800ea3c:	485a      	ldr	r0, [pc, #360]	; (800eba8 <Chech_forSiemensCMD+0x35c>)
 800ea3e:	f018 f89d 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ea42:	4b51      	ldr	r3, [pc, #324]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ea48:	4b4f      	ldr	r3, [pc, #316]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f043 0310 	orr.w	r3, r3, #16
 800ea50:	4a4d      	ldr	r2, [pc, #308]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea52:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ea54:	2301      	movs	r3, #1
 800ea56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ea5a:	e076      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800ea5c:	4953      	ldr	r1, [pc, #332]	; (800ebac <Chech_forSiemensCMD+0x360>)
 800ea5e:	4848      	ldr	r0, [pc, #288]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800ea60:	f017 fff0 	bl	8026a44 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800ea64:	4852      	ldr	r0, [pc, #328]	; (800ebb0 <Chech_forSiemensCMD+0x364>)
 800ea66:	f018 f889 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ea6a:	4b47      	ldr	r3, [pc, #284]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ea70:	4b45      	ldr	r3, [pc, #276]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f043 0320 	orr.w	r3, r3, #32
 800ea78:	4a43      	ldr	r2, [pc, #268]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea7a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ea82:	e062      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800ea84:	494b      	ldr	r1, [pc, #300]	; (800ebb4 <Chech_forSiemensCMD+0x368>)
 800ea86:	484c      	ldr	r0, [pc, #304]	; (800ebb8 <Chech_forSiemensCMD+0x36c>)
 800ea88:	f017 ffdc 	bl	8026a44 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800ea8c:	484b      	ldr	r0, [pc, #300]	; (800ebbc <Chech_forSiemensCMD+0x370>)
 800ea8e:	f018 f875 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ea92:	4b3d      	ldr	r3, [pc, #244]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ea98:	4b3b      	ldr	r3, [pc, #236]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaa0:	4a39      	ldr	r2, [pc, #228]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eaa2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eaaa:	e04e      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800eaac:	4944      	ldr	r1, [pc, #272]	; (800ebc0 <Chech_forSiemensCMD+0x374>)
 800eaae:	4834      	ldr	r0, [pc, #208]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800eab0:	f017 ffc8 	bl	8026a44 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800eab4:	4843      	ldr	r0, [pc, #268]	; (800ebc4 <Chech_forSiemensCMD+0x378>)
 800eab6:	f018 f861 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eaba:	4b33      	ldr	r3, [pc, #204]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800eac0:	4b31      	ldr	r3, [pc, #196]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eac8:	4a2f      	ldr	r2, [pc, #188]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eaca:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eacc:	2301      	movs	r3, #1
 800eace:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ead2:	e03a      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800ead4:	493c      	ldr	r1, [pc, #240]	; (800ebc8 <Chech_forSiemensCMD+0x37c>)
 800ead6:	482a      	ldr	r0, [pc, #168]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800ead8:	f017 ffb4 	bl	8026a44 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800eadc:	483b      	ldr	r0, [pc, #236]	; (800ebcc <Chech_forSiemensCMD+0x380>)
 800eade:	f018 f84d 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eae2:	4b29      	ldr	r3, [pc, #164]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800eae8:	4b27      	ldr	r3, [pc, #156]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eaf0:	4a25      	ldr	r2, [pc, #148]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eaf2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eafa:	e026      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800eafc:	4934      	ldr	r1, [pc, #208]	; (800ebd0 <Chech_forSiemensCMD+0x384>)
 800eafe:	4820      	ldr	r0, [pc, #128]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800eb00:	f017 ffa0 	bl	8026a44 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800eb04:	4833      	ldr	r0, [pc, #204]	; (800ebd4 <Chech_forSiemensCMD+0x388>)
 800eb06:	f018 f839 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eb0a:	4b1f      	ldr	r3, [pc, #124]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800eb10:	4b1d      	ldr	r3, [pc, #116]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb18:	4a1b      	ldr	r2, [pc, #108]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eb1a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eb22:	e012      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800eb24:	492c      	ldr	r1, [pc, #176]	; (800ebd8 <Chech_forSiemensCMD+0x38c>)
 800eb26:	4816      	ldr	r0, [pc, #88]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800eb28:	f017 ff8c 	bl	8026a44 <iprintf>
				printf("CLEAR ALL\n");
 800eb2c:	482b      	ldr	r0, [pc, #172]	; (800ebdc <Chech_forSiemensCMD+0x390>)
 800eb2e:	f018 f825 	bl	8026b7c <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eb32:	4b15      	ldr	r3, [pc, #84]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eb3e:	e004      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800eb40:	480d      	ldr	r0, [pc, #52]	; (800eb78 <Chech_forSiemensCMD+0x32c>)
 800eb42:	f018 f81b 	bl	8026b7c <puts>
 800eb46:	e000      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			}
		}
 800eb48:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800eb4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d147      	bne.n	800ebe2 <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800eb52:	f240 2005 	movw	r0, #517	; 0x205
 800eb56:	f002 fa03 	bl	8010f60 <TransmitCanPkt>
 800eb5a:	e042      	b.n	800ebe2 <Chech_forSiemensCMD+0x396>
 800eb5c:	2000c074 	.word	0x2000c074
 800eb60:	0802aac0 	.word	0x0802aac0
 800eb64:	20000bba 	.word	0x20000bba
 800eb68:	0802aad8 	.word	0x0802aad8
 800eb6c:	20005fde 	.word	0x20005fde
 800eb70:	0802ab18 	.word	0x0802ab18
 800eb74:	20000bbb 	.word	0x20000bbb
 800eb78:	0802ab2c 	.word	0x0802ab2c
 800eb7c:	20006010 	.word	0x20006010
 800eb80:	0802ab48 	.word	0x0802ab48
 800eb84:	0802ab58 	.word	0x0802ab58
 800eb88:	20004c6c 	.word	0x20004c6c
 800eb8c:	20006042 	.word	0x20006042
 800eb90:	0802ab70 	.word	0x0802ab70
 800eb94:	20006074 	.word	0x20006074
 800eb98:	0802ab88 	.word	0x0802ab88
 800eb9c:	200060a6 	.word	0x200060a6
 800eba0:	0802ab9c 	.word	0x0802ab9c
 800eba4:	200060d8 	.word	0x200060d8
 800eba8:	0802abb0 	.word	0x0802abb0
 800ebac:	2000610a 	.word	0x2000610a
 800ebb0:	0802abc4 	.word	0x0802abc4
 800ebb4:	2000613c 	.word	0x2000613c
 800ebb8:	0802abe0 	.word	0x0802abe0
 800ebbc:	0802abf8 	.word	0x0802abf8
 800ebc0:	2000616e 	.word	0x2000616e
 800ebc4:	0802ac0c 	.word	0x0802ac0c
 800ebc8:	200061a0 	.word	0x200061a0
 800ebcc:	0802ac24 	.word	0x0802ac24
 800ebd0:	200061d2 	.word	0x200061d2
 800ebd4:	0802ac44 	.word	0x0802ac44
 800ebd8:	20006204 	.word	0x20006204
 800ebdc:	0802ac64 	.word	0x0802ac64
		return;
 800ebe0:	bf00      	nop
		}
	}
}
 800ebe2:	3768      	adds	r7, #104	; 0x68
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800ebe8:	b4b0      	push	{r4, r5, r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800ebf2:	79fb      	ldrb	r3, [r7, #7]
 800ebf4:	4aa6      	ldr	r2, [pc, #664]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ebf6:	2132      	movs	r1, #50	; 0x32
 800ebf8:	fb01 f303 	mul.w	r3, r1, r3
 800ebfc:	4413      	add	r3, r2
 800ebfe:	2224      	movs	r2, #36	; 0x24
 800ec00:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800ec02:	79fb      	ldrb	r3, [r7, #7]
 800ec04:	4aa2      	ldr	r2, [pc, #648]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec06:	2132      	movs	r1, #50	; 0x32
 800ec08:	fb01 f303 	mul.w	r3, r1, r3
 800ec0c:	4413      	add	r3, r2
 800ec0e:	3301      	adds	r3, #1
 800ec10:	2201      	movs	r2, #1
 800ec12:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800ec14:	79fb      	ldrb	r3, [r7, #7]
 800ec16:	4a9e      	ldr	r2, [pc, #632]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec18:	2132      	movs	r1, #50	; 0x32
 800ec1a:	fb01 f303 	mul.w	r3, r1, r3
 800ec1e:	4413      	add	r3, r2
 800ec20:	3302      	adds	r3, #2
 800ec22:	2230      	movs	r2, #48	; 0x30
 800ec24:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800ec26:	79fb      	ldrb	r3, [r7, #7]
 800ec28:	4a99      	ldr	r2, [pc, #612]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec2a:	2132      	movs	r1, #50	; 0x32
 800ec2c:	fb01 f303 	mul.w	r3, r1, r3
 800ec30:	4413      	add	r3, r2
 800ec32:	3303      	adds	r3, #3
 800ec34:	2240      	movs	r2, #64	; 0x40
 800ec36:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800ec38:	79fb      	ldrb	r3, [r7, #7]
 800ec3a:	4a95      	ldr	r2, [pc, #596]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec3c:	2132      	movs	r1, #50	; 0x32
 800ec3e:	fb01 f303 	mul.w	r3, r1, r3
 800ec42:	4413      	add	r3, r2
 800ec44:	3304      	adds	r3, #4
 800ec46:	22c0      	movs	r2, #192	; 0xc0
 800ec48:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800ec4a:	79fb      	ldrb	r3, [r7, #7]
 800ec4c:	4a90      	ldr	r2, [pc, #576]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec4e:	2132      	movs	r1, #50	; 0x32
 800ec50:	fb01 f303 	mul.w	r3, r1, r3
 800ec54:	4413      	add	r3, r2
 800ec56:	3305      	adds	r3, #5
 800ec58:	224e      	movs	r2, #78	; 0x4e
 800ec5a:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800ec5c:	79fb      	ldrb	r3, [r7, #7]
 800ec5e:	4a8c      	ldr	r2, [pc, #560]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec60:	2132      	movs	r1, #50	; 0x32
 800ec62:	fb01 f303 	mul.w	r3, r1, r3
 800ec66:	4413      	add	r3, r2
 800ec68:	3306      	adds	r3, #6
 800ec6a:	2226      	movs	r2, #38	; 0x26
 800ec6c:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	3301      	adds	r3, #1
 800ec72:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800ec74:	79fb      	ldrb	r3, [r7, #7]
 800ec76:	1c5a      	adds	r2, r3, #1
 800ec78:	71fa      	strb	r2, [r7, #7]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	2332      	movs	r3, #50	; 0x32
 800ec7e:	fb02 f303 	mul.w	r3, r2, r3
 800ec82:	4a83      	ldr	r2, [pc, #524]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec84:	4413      	add	r3, r2
 800ec86:	4983      	ldr	r1, [pc, #524]	; (800ee94 <Update_SiemensCommands+0x2ac>)
 800ec88:	461a      	mov	r2, r3
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	cb03      	ldmia	r3!, {r0, r1}
 800ec8e:	6010      	str	r0, [r2, #0]
 800ec90:	6051      	str	r1, [r2, #4]
 800ec92:	8819      	ldrh	r1, [r3, #0]
 800ec94:	789b      	ldrb	r3, [r3, #2]
 800ec96:	8111      	strh	r1, [r2, #8]
 800ec98:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800ec9a:	79fb      	ldrb	r3, [r7, #7]
 800ec9c:	1c5a      	adds	r2, r3, #1
 800ec9e:	71fa      	strb	r2, [r7, #7]
 800eca0:	461a      	mov	r2, r3
 800eca2:	2332      	movs	r3, #50	; 0x32
 800eca4:	fb02 f303 	mul.w	r3, r2, r3
 800eca8:	4a79      	ldr	r2, [pc, #484]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ecaa:	4413      	add	r3, r2
 800ecac:	4a7a      	ldr	r2, [pc, #488]	; (800ee98 <Update_SiemensCommands+0x2b0>)
 800ecae:	461d      	mov	r5, r3
 800ecb0:	4614      	mov	r4, r2
 800ecb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecb4:	6028      	str	r0, [r5, #0]
 800ecb6:	6069      	str	r1, [r5, #4]
 800ecb8:	60aa      	str	r2, [r5, #8]
 800ecba:	60eb      	str	r3, [r5, #12]
 800ecbc:	6820      	ldr	r0, [r4, #0]
 800ecbe:	6128      	str	r0, [r5, #16]
 800ecc0:	7923      	ldrb	r3, [r4, #4]
 800ecc2:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800ecc4:	79fb      	ldrb	r3, [r7, #7]
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	71fa      	strb	r2, [r7, #7]
 800ecca:	461a      	mov	r2, r3
 800eccc:	2332      	movs	r3, #50	; 0x32
 800ecce:	fb02 f303 	mul.w	r3, r2, r3
 800ecd2:	4a6f      	ldr	r2, [pc, #444]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ecd4:	4413      	add	r3, r2
 800ecd6:	4a71      	ldr	r2, [pc, #452]	; (800ee9c <Update_SiemensCommands+0x2b4>)
 800ecd8:	461d      	mov	r5, r3
 800ecda:	4614      	mov	r4, r2
 800ecdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecde:	6028      	str	r0, [r5, #0]
 800ece0:	6069      	str	r1, [r5, #4]
 800ece2:	60aa      	str	r2, [r5, #8]
 800ece4:	60eb      	str	r3, [r5, #12]
 800ece6:	6820      	ldr	r0, [r4, #0]
 800ece8:	6128      	str	r0, [r5, #16]
 800ecea:	7923      	ldrb	r3, [r4, #4]
 800ecec:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800ecee:	79fb      	ldrb	r3, [r7, #7]
 800ecf0:	1c5a      	adds	r2, r3, #1
 800ecf2:	71fa      	strb	r2, [r7, #7]
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	2332      	movs	r3, #50	; 0x32
 800ecf8:	fb02 f303 	mul.w	r3, r2, r3
 800ecfc:	4a64      	ldr	r2, [pc, #400]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ecfe:	4413      	add	r3, r2
 800ed00:	4a67      	ldr	r2, [pc, #412]	; (800eea0 <Update_SiemensCommands+0x2b8>)
 800ed02:	461d      	mov	r5, r3
 800ed04:	4614      	mov	r4, r2
 800ed06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed08:	6028      	str	r0, [r5, #0]
 800ed0a:	6069      	str	r1, [r5, #4]
 800ed0c:	60aa      	str	r2, [r5, #8]
 800ed0e:	60eb      	str	r3, [r5, #12]
 800ed10:	7823      	ldrb	r3, [r4, #0]
 800ed12:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800ed14:	79fb      	ldrb	r3, [r7, #7]
 800ed16:	1c5a      	adds	r2, r3, #1
 800ed18:	71fa      	strb	r2, [r7, #7]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	2332      	movs	r3, #50	; 0x32
 800ed1e:	fb02 f303 	mul.w	r3, r2, r3
 800ed22:	4a5b      	ldr	r2, [pc, #364]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ed24:	4413      	add	r3, r2
 800ed26:	4a5f      	ldr	r2, [pc, #380]	; (800eea4 <Update_SiemensCommands+0x2bc>)
 800ed28:	461d      	mov	r5, r3
 800ed2a:	4614      	mov	r4, r2
 800ed2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed2e:	6028      	str	r0, [r5, #0]
 800ed30:	6069      	str	r1, [r5, #4]
 800ed32:	60aa      	str	r2, [r5, #8]
 800ed34:	60eb      	str	r3, [r5, #12]
 800ed36:	7823      	ldrb	r3, [r4, #0]
 800ed38:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	1c5a      	adds	r2, r3, #1
 800ed3e:	71fa      	strb	r2, [r7, #7]
 800ed40:	461a      	mov	r2, r3
 800ed42:	2332      	movs	r3, #50	; 0x32
 800ed44:	fb02 f303 	mul.w	r3, r2, r3
 800ed48:	4a51      	ldr	r2, [pc, #324]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ed4a:	4413      	add	r3, r2
 800ed4c:	4a56      	ldr	r2, [pc, #344]	; (800eea8 <Update_SiemensCommands+0x2c0>)
 800ed4e:	461d      	mov	r5, r3
 800ed50:	4614      	mov	r4, r2
 800ed52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed54:	6028      	str	r0, [r5, #0]
 800ed56:	6069      	str	r1, [r5, #4]
 800ed58:	60aa      	str	r2, [r5, #8]
 800ed5a:	60eb      	str	r3, [r5, #12]
 800ed5c:	7823      	ldrb	r3, [r4, #0]
 800ed5e:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800ed60:	79fb      	ldrb	r3, [r7, #7]
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	71fa      	strb	r2, [r7, #7]
 800ed66:	461a      	mov	r2, r3
 800ed68:	2332      	movs	r3, #50	; 0x32
 800ed6a:	fb02 f303 	mul.w	r3, r2, r3
 800ed6e:	4a48      	ldr	r2, [pc, #288]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ed70:	4413      	add	r3, r2
 800ed72:	4a4e      	ldr	r2, [pc, #312]	; (800eeac <Update_SiemensCommands+0x2c4>)
 800ed74:	461d      	mov	r5, r3
 800ed76:	4614      	mov	r4, r2
 800ed78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed7a:	6028      	str	r0, [r5, #0]
 800ed7c:	6069      	str	r1, [r5, #4]
 800ed7e:	60aa      	str	r2, [r5, #8]
 800ed80:	60eb      	str	r3, [r5, #12]
 800ed82:	cc03      	ldmia	r4!, {r0, r1}
 800ed84:	6128      	str	r0, [r5, #16]
 800ed86:	6169      	str	r1, [r5, #20]
 800ed88:	8823      	ldrh	r3, [r4, #0]
 800ed8a:	78a2      	ldrb	r2, [r4, #2]
 800ed8c:	832b      	strh	r3, [r5, #24]
 800ed8e:	4613      	mov	r3, r2
 800ed90:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800ed92:	79fb      	ldrb	r3, [r7, #7]
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	71fa      	strb	r2, [r7, #7]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	2332      	movs	r3, #50	; 0x32
 800ed9c:	fb02 f303 	mul.w	r3, r2, r3
 800eda0:	4a3b      	ldr	r2, [pc, #236]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800eda2:	4413      	add	r3, r2
 800eda4:	4a42      	ldr	r2, [pc, #264]	; (800eeb0 <Update_SiemensCommands+0x2c8>)
 800eda6:	461d      	mov	r5, r3
 800eda8:	4614      	mov	r4, r2
 800edaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edac:	6028      	str	r0, [r5, #0]
 800edae:	6069      	str	r1, [r5, #4]
 800edb0:	60aa      	str	r2, [r5, #8]
 800edb2:	60eb      	str	r3, [r5, #12]
 800edb4:	8823      	ldrh	r3, [r4, #0]
 800edb6:	78a2      	ldrb	r2, [r4, #2]
 800edb8:	822b      	strh	r3, [r5, #16]
 800edba:	4613      	mov	r3, r2
 800edbc:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800edbe:	79fb      	ldrb	r3, [r7, #7]
 800edc0:	1c5a      	adds	r2, r3, #1
 800edc2:	71fa      	strb	r2, [r7, #7]
 800edc4:	461a      	mov	r2, r3
 800edc6:	2332      	movs	r3, #50	; 0x32
 800edc8:	fb02 f303 	mul.w	r3, r2, r3
 800edcc:	4a30      	ldr	r2, [pc, #192]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800edce:	4413      	add	r3, r2
 800edd0:	4a38      	ldr	r2, [pc, #224]	; (800eeb4 <Update_SiemensCommands+0x2cc>)
 800edd2:	461d      	mov	r5, r3
 800edd4:	4614      	mov	r4, r2
 800edd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edd8:	6028      	str	r0, [r5, #0]
 800edda:	6069      	str	r1, [r5, #4]
 800eddc:	60aa      	str	r2, [r5, #8]
 800edde:	60eb      	str	r3, [r5, #12]
 800ede0:	cc03      	ldmia	r4!, {r0, r1}
 800ede2:	6128      	str	r0, [r5, #16]
 800ede4:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800ede6:	79fb      	ldrb	r3, [r7, #7]
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	71fa      	strb	r2, [r7, #7]
 800edec:	461a      	mov	r2, r3
 800edee:	2332      	movs	r3, #50	; 0x32
 800edf0:	fb02 f303 	mul.w	r3, r2, r3
 800edf4:	4a26      	ldr	r2, [pc, #152]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800edf6:	4413      	add	r3, r2
 800edf8:	4a2f      	ldr	r2, [pc, #188]	; (800eeb8 <Update_SiemensCommands+0x2d0>)
 800edfa:	461c      	mov	r4, r3
 800edfc:	4615      	mov	r5, r2
 800edfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee00:	6020      	str	r0, [r4, #0]
 800ee02:	6061      	str	r1, [r4, #4]
 800ee04:	60a2      	str	r2, [r4, #8]
 800ee06:	60e3      	str	r3, [r4, #12]
 800ee08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee0a:	6120      	str	r0, [r4, #16]
 800ee0c:	6161      	str	r1, [r4, #20]
 800ee0e:	61a2      	str	r2, [r4, #24]
 800ee10:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	1c5a      	adds	r2, r3, #1
 800ee16:	71fa      	strb	r2, [r7, #7]
 800ee18:	461a      	mov	r2, r3
 800ee1a:	2332      	movs	r3, #50	; 0x32
 800ee1c:	fb02 f303 	mul.w	r3, r2, r3
 800ee20:	4a1b      	ldr	r2, [pc, #108]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ee22:	4413      	add	r3, r2
 800ee24:	4a25      	ldr	r2, [pc, #148]	; (800eebc <Update_SiemensCommands+0x2d4>)
 800ee26:	461d      	mov	r5, r3
 800ee28:	4614      	mov	r4, r2
 800ee2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee2c:	6028      	str	r0, [r5, #0]
 800ee2e:	6069      	str	r1, [r5, #4]
 800ee30:	60aa      	str	r2, [r5, #8]
 800ee32:	60eb      	str	r3, [r5, #12]
 800ee34:	cc07      	ldmia	r4!, {r0, r1, r2}
 800ee36:	6128      	str	r0, [r5, #16]
 800ee38:	6169      	str	r1, [r5, #20]
 800ee3a:	61aa      	str	r2, [r5, #24]
 800ee3c:	7823      	ldrb	r3, [r4, #0]
 800ee3e:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800ee40:	79fb      	ldrb	r3, [r7, #7]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	71fa      	strb	r2, [r7, #7]
 800ee46:	461a      	mov	r2, r3
 800ee48:	2332      	movs	r3, #50	; 0x32
 800ee4a:	fb02 f303 	mul.w	r3, r2, r3
 800ee4e:	4a10      	ldr	r2, [pc, #64]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ee50:	4413      	add	r3, r2
 800ee52:	491b      	ldr	r1, [pc, #108]	; (800eec0 <Update_SiemensCommands+0x2d8>)
 800ee54:	461a      	mov	r2, r3
 800ee56:	460b      	mov	r3, r1
 800ee58:	cb03      	ldmia	r3!, {r0, r1}
 800ee5a:	6010      	str	r0, [r2, #0]
 800ee5c:	6051      	str	r1, [r2, #4]
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800ee62:	79fb      	ldrb	r3, [r7, #7]
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	71fa      	strb	r2, [r7, #7]
 800ee68:	461a      	mov	r2, r3
 800ee6a:	2332      	movs	r3, #50	; 0x32
 800ee6c:	fb02 f303 	mul.w	r3, r2, r3
 800ee70:	4a07      	ldr	r2, [pc, #28]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ee72:	4413      	add	r3, r2
 800ee74:	4a13      	ldr	r2, [pc, #76]	; (800eec4 <Update_SiemensCommands+0x2dc>)
 800ee76:	6810      	ldr	r0, [r2, #0]
 800ee78:	6018      	str	r0, [r3, #0]
 800ee7a:	7912      	ldrb	r2, [r2, #4]
 800ee7c:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800ee7e:	4a12      	ldr	r2, [pc, #72]	; (800eec8 <Update_SiemensCommands+0x2e0>)
 800ee80:	79fb      	ldrb	r3, [r7, #7]
 800ee82:	7013      	strb	r3, [r2, #0]
}
 800ee84:	bf00      	nop
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bcb0      	pop	{r4, r5, r7}
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	20005fac 	.word	0x20005fac
 800ee94:	0802ac70 	.word	0x0802ac70
 800ee98:	0802ab58 	.word	0x0802ab58
 800ee9c:	0802ab70 	.word	0x0802ab70
 800eea0:	0802ab88 	.word	0x0802ab88
 800eea4:	0802ab9c 	.word	0x0802ab9c
 800eea8:	0802abb0 	.word	0x0802abb0
 800eeac:	0802ac7c 	.word	0x0802ac7c
 800eeb0:	0802abf8 	.word	0x0802abf8
 800eeb4:	0802ac0c 	.word	0x0802ac0c
 800eeb8:	0802ac24 	.word	0x0802ac24
 800eebc:	0802ac44 	.word	0x0802ac44
 800eec0:	0802ac98 	.word	0x0802ac98
 800eec4:	0802aca4 	.word	0x0802aca4
 800eec8:	20006394 	.word	0x20006394

0800eecc <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800eecc:	b590      	push	{r4, r7, lr}
 800eece:	b085      	sub	sp, #20
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	460b      	mov	r3, r1
 800eed6:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800eed8:	2300      	movs	r3, #0
 800eeda:	73fb      	strb	r3, [r7, #15]
 800eedc:	e01c      	b.n	800ef18 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800eede:	7bfb      	ldrb	r3, [r7, #15]
 800eee0:	2232      	movs	r2, #50	; 0x32
 800eee2:	fb02 f303 	mul.w	r3, r2, r3
 800eee6:	4a11      	ldr	r2, [pc, #68]	; (800ef2c <Is_SiemensCommand_Valid+0x60>)
 800eee8:	189c      	adds	r4, r3, r2
 800eeea:	7bfb      	ldrb	r3, [r7, #15]
 800eeec:	2232      	movs	r2, #50	; 0x32
 800eeee:	fb02 f303 	mul.w	r3, r2, r3
 800eef2:	4a0e      	ldr	r2, [pc, #56]	; (800ef2c <Is_SiemensCommand_Valid+0x60>)
 800eef4:	4413      	add	r3, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7f1 f9ac 	bl	8000254 <strlen>
 800eefc:	4603      	mov	r3, r0
 800eefe:	461a      	mov	r2, r3
 800ef00:	4621      	mov	r1, r4
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f017 fc7e 	bl	8026804 <memcmp>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d101      	bne.n	800ef12 <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800ef0e:	7bfb      	ldrb	r3, [r7, #15]
 800ef10:	e008      	b.n	800ef24 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ef12:	7bfb      	ldrb	r3, [r7, #15]
 800ef14:	3301      	adds	r3, #1
 800ef16:	73fb      	strb	r3, [r7, #15]
 800ef18:	4b05      	ldr	r3, [pc, #20]	; (800ef30 <Is_SiemensCommand_Valid+0x64>)
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	7bfa      	ldrb	r2, [r7, #15]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d3dd      	bcc.n	800eede <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800ef22:	23ff      	movs	r3, #255	; 0xff
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd90      	pop	{r4, r7, pc}
 800ef2c:	20005fac 	.word	0x20005fac
 800ef30:	20006394 	.word	0x20006394

0800ef34 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b087      	sub	sp, #28
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800ef40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef44:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800ef46:	2300      	movs	r3, #0
 800ef48:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800ef4e:	2300      	movs	r3, #0
 800ef50:	82bb      	strh	r3, [r7, #20]
 800ef52:	e022      	b.n	800ef9a <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800ef54:	8abb      	ldrh	r3, [r7, #20]
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	4413      	add	r3, r2
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	8afb      	ldrh	r3, [r7, #22]
 800ef60:	4053      	eors	r3, r2
 800ef62:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800ef64:	2300      	movs	r3, #0
 800ef66:	613b      	str	r3, [r7, #16]
 800ef68:	e011      	b.n	800ef8e <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800ef6a:	8afb      	ldrh	r3, [r7, #22]
 800ef6c:	f003 0301 	and.w	r3, r3, #1
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d006      	beq.n	800ef82 <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800ef74:	8afb      	ldrh	r3, [r7, #22]
 800ef76:	085b      	lsrs	r3, r3, #1
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	4b17      	ldr	r3, [pc, #92]	; (800efd8 <Siemens_CRC+0xa4>)
 800ef7c:	4053      	eors	r3, r2
 800ef7e:	82fb      	strh	r3, [r7, #22]
 800ef80:	e002      	b.n	800ef88 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800ef82:	8afb      	ldrh	r3, [r7, #22]
 800ef84:	085b      	lsrs	r3, r3, #1
 800ef86:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	613b      	str	r3, [r7, #16]
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	2b07      	cmp	r3, #7
 800ef92:	ddea      	ble.n	800ef6a <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800ef94:	8abb      	ldrh	r3, [r7, #20]
 800ef96:	3301      	adds	r3, #1
 800ef98:	82bb      	strh	r3, [r7, #20]
 800ef9a:	8aba      	ldrh	r2, [r7, #20]
 800ef9c:	887b      	ldrh	r3, [r7, #2]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d3d8      	bcc.n	800ef54 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800efa2:	8afb      	ldrh	r3, [r7, #22]
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800efa8:	8afb      	ldrh	r3, [r7, #22]
 800efaa:	0a1b      	lsrs	r3, r3, #8
 800efac:	b29b      	uxth	r3, r3
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800efb2:	7b3b      	ldrb	r3, [r7, #12]
 800efb4:	021b      	lsls	r3, r3, #8
 800efb6:	b21a      	sxth	r2, r3
 800efb8:	7b7b      	ldrb	r3, [r7, #13]
 800efba:	b21b      	sxth	r3, r3
 800efbc:	4313      	orrs	r3, r2
 800efbe:	b21b      	sxth	r3, r3
 800efc0:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800efc2:	8afb      	ldrh	r3, [r7, #22]
 800efc4:	43db      	mvns	r3, r3
 800efc6:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800efc8:	8afb      	ldrh	r3, [r7, #22]
}
 800efca:	4618      	mov	r0, r3
 800efcc:	371c      	adds	r7, #28
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	ffff8408 	.word	0xffff8408

0800efdc <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b086      	sub	sp, #24
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	603a      	str	r2, [r7, #0]
 800efe4:	461a      	mov	r2, r3
 800efe6:	4603      	mov	r3, r0
 800efe8:	71fb      	strb	r3, [r7, #7]
 800efea:	460b      	mov	r3, r1
 800efec:	71bb      	strb	r3, [r7, #6]
 800efee:	4613      	mov	r3, r2
 800eff0:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800eff2:	2300      	movs	r3, #0
 800eff4:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800eff6:	2300      	movs	r3, #0
 800eff8:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800effa:	797b      	ldrb	r3, [r7, #5]
 800effc:	2b02      	cmp	r3, #2
 800effe:	d010      	beq.n	800f022 <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800f000:	79bb      	ldrb	r3, [r7, #6]
 800f002:	08db      	lsrs	r3, r3, #3
 800f004:	b2db      	uxtb	r3, r3
 800f006:	797a      	ldrb	r2, [r7, #5]
 800f008:	4619      	mov	r1, r3
 800f00a:	6838      	ldr	r0, [r7, #0]
 800f00c:	f000 f8d0 	bl	800f1b0 <Verify_parity>
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d110      	bne.n	800f038 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800f016:	4840      	ldr	r0, [pc, #256]	; (800f118 <Extract_Parity_Data+0x13c>)
 800f018:	f017 fdb0 	bl	8026b7c <puts>
			return -1;
 800f01c:	f04f 33ff 	mov.w	r3, #4294967295
 800f020:	e075      	b.n	800f10e <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	b29b      	uxth	r3, r3
 800f026:	79ba      	ldrb	r2, [r7, #6]
 800f028:	b291      	uxth	r1, r2
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7f1 faf1 	bl	8000614 <ExtractBits>
 800f032:	6138      	str	r0, [r7, #16]
		return Return_value;
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	e06a      	b.n	800f10e <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800f038:	79bb      	ldrb	r3, [r7, #6]
 800f03a:	2b08      	cmp	r3, #8
 800f03c:	d108      	bne.n	800f050 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800f044:	7dfb      	ldrb	r3, [r7, #23]
 800f046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f04a:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800f04c:	7dfb      	ldrb	r3, [r7, #23]
 800f04e:	e05e      	b.n	800f10e <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800f050:	79bb      	ldrb	r3, [r7, #6]
 800f052:	2b18      	cmp	r3, #24
 800f054:	d15a      	bne.n	800f10c <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
 800f05e:	f003 0301 	and.w	r3, r3, #1
 800f062:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800f064:	7dfb      	ldrb	r3, [r7, #23]
 800f066:	085b      	lsrs	r3, r3, #1
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	f003 0301 	and.w	r3, r3, #1
 800f06e:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800f070:	7dfb      	ldrb	r3, [r7, #23]
 800f072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f076:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800f078:	7dfb      	ldrb	r3, [r7, #23]
 800f07a:	089b      	lsrs	r3, r3, #2
 800f07c:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	785b      	ldrb	r3, [r3, #1]
 800f086:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800f088:	7dfb      	ldrb	r3, [r7, #23]
 800f08a:	f003 0301 	and.w	r3, r3, #1
 800f08e:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800f090:	7dfb      	ldrb	r3, [r7, #23]
 800f092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f096:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800f098:	7dfb      	ldrb	r3, [r7, #23]
 800f09a:	085b      	lsrs	r3, r3, #1
 800f09c:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800f09e:	7bbb      	ldrb	r3, [r7, #14]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d104      	bne.n	800f0ae <Extract_Parity_Data+0xd2>
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0aa:	75fb      	strb	r3, [r7, #23]
 800f0ac:	e003      	b.n	800f0b6 <Extract_Parity_Data+0xda>
 800f0ae:	7dfb      	ldrb	r3, [r7, #23]
 800f0b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f0b4:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800f0b6:	7bfb      	ldrb	r3, [r7, #15]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d104      	bne.n	800f0c6 <Extract_Parity_Data+0xea>
 800f0bc:	7dfb      	ldrb	r3, [r7, #23]
 800f0be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0c2:	75fb      	strb	r3, [r7, #23]
 800f0c4:	e003      	b.n	800f0ce <Extract_Parity_Data+0xf2>
 800f0c6:	7dfb      	ldrb	r3, [r7, #23]
 800f0c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0cc:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	021b      	lsls	r3, r3, #8
 800f0d2:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800f0d4:	7dfb      	ldrb	r3, [r7, #23]
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	4413      	add	r3, r2
 800f0da:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	789b      	ldrb	r3, [r3, #2]
 800f0e0:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800f0e2:	7b7b      	ldrb	r3, [r7, #13]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d104      	bne.n	800f0f2 <Extract_Parity_Data+0x116>
 800f0e8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0ee:	75fb      	strb	r3, [r7, #23]
 800f0f0:	e003      	b.n	800f0fa <Extract_Parity_Data+0x11e>
 800f0f2:	7dfb      	ldrb	r3, [r7, #23]
 800f0f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f0f8:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	021b      	lsls	r3, r3, #8
 800f0fe:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800f100:	7dfb      	ldrb	r3, [r7, #23]
 800f102:	693a      	ldr	r2, [r7, #16]
 800f104:	4413      	add	r3, r2
 800f106:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	e000      	b.n	800f10e <Extract_Parity_Data+0x132>
	}
	return 0;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3718      	adds	r7, #24
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	0802acac 	.word	0x0802acac

0800f11c <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	460a      	mov	r2, r1
 800f126:	71fb      	strb	r3, [r7, #7]
 800f128:	4613      	mov	r3, r2
 800f12a:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800f12c:	2300      	movs	r3, #0
 800f12e:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800f130:	2300      	movs	r3, #0
 800f132:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800f134:	2306      	movs	r3, #6
 800f136:	73fb      	strb	r3, [r7, #15]
 800f138:	e014      	b.n	800f164 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800f13a:	79fa      	ldrb	r2, [r7, #7]
 800f13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f140:	fa42 f303 	asr.w	r3, r2, r3
 800f144:	f003 0301 	and.w	r3, r3, #1
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d005      	beq.n	800f158 <Calculate_Parity+0x3c>
		{
			count++;
 800f14c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f150:	b2db      	uxtb	r3, r3
 800f152:	3301      	adds	r3, #1
 800f154:	b2db      	uxtb	r3, r3
 800f156:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800f158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	3b01      	subs	r3, #1
 800f160:	b2db      	uxtb	r3, r3
 800f162:	73fb      	strb	r3, [r7, #15]
 800f164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	dae6      	bge.n	800f13a <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800f16c:	79bb      	ldrb	r3, [r7, #6]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d109      	bne.n	800f186 <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800f172:	7bbb      	ldrb	r3, [r7, #14]
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <Calculate_Parity+0x66>
		{
			return 0;
 800f17e:	2300      	movs	r3, #0
 800f180:	e00f      	b.n	800f1a2 <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800f182:	2301      	movs	r3, #1
 800f184:	e00d      	b.n	800f1a2 <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800f186:	79bb      	ldrb	r3, [r7, #6]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d109      	bne.n	800f1a0 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800f18c:	7bbb      	ldrb	r3, [r7, #14]
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b00      	cmp	r3, #0
 800f196:	d101      	bne.n	800f19c <Calculate_Parity+0x80>
		{
			return 1;
 800f198:	2301      	movs	r3, #1
 800f19a:	e002      	b.n	800f1a2 <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800f19c:	2300      	movs	r3, #0
 800f19e:	e000      	b.n	800f1a2 <Calculate_Parity+0x86>
		}
	}
	return 0;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
	...

0800f1b0 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	70fb      	strb	r3, [r7, #3]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	73fb      	strb	r3, [r7, #15]
 800f1c8:	e03b      	b.n	800f242 <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800f1ca:	7bfb      	ldrb	r3, [r7, #15]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	78ba      	ldrb	r2, [r7, #2]
 800f1d4:	4611      	mov	r1, r2
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7ff ffa0 	bl	800f11c <Calculate_Parity>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	4619      	mov	r1, r3
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	09db      	lsrs	r3, r3, #7
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	f003 0301 	and.w	r3, r3, #1
 800f1f0:	4299      	cmp	r1, r3
 800f1f2:	d023      	beq.n	800f23c <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800f1f4:	7bfb      	ldrb	r3, [r7, #15]
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	4815      	ldr	r0, [pc, #84]	; (800f254 <Verify_parity+0xa4>)
 800f200:	f017 fc20 	bl	8026a44 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800f204:	7bfb      	ldrb	r3, [r7, #15]
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	4413      	add	r3, r2
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	78ba      	ldrb	r2, [r7, #2]
 800f20e:	4611      	mov	r1, r2
 800f210:	4618      	mov	r0, r3
 800f212:	f7ff ff83 	bl	800f11c <Calculate_Parity>
 800f216:	4603      	mov	r3, r0
 800f218:	4619      	mov	r1, r3
 800f21a:	480f      	ldr	r0, [pc, #60]	; (800f258 <Verify_parity+0xa8>)
 800f21c:	f017 fc12 	bl	8026a44 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800f220:	7bfb      	ldrb	r3, [r7, #15]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	4413      	add	r3, r2
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	09db      	lsrs	r3, r3, #7
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	4619      	mov	r1, r3
 800f232:	480a      	ldr	r0, [pc, #40]	; (800f25c <Verify_parity+0xac>)
 800f234:	f017 fc06 	bl	8026a44 <iprintf>
			return 0;
 800f238:	2300      	movs	r3, #0
 800f23a:	e007      	b.n	800f24c <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800f23c:	7bfb      	ldrb	r3, [r7, #15]
 800f23e:	3301      	adds	r3, #1
 800f240:	73fb      	strb	r3, [r7, #15]
 800f242:	7bfa      	ldrb	r2, [r7, #15]
 800f244:	78fb      	ldrb	r3, [r7, #3]
 800f246:	429a      	cmp	r2, r3
 800f248:	d3bf      	bcc.n	800f1ca <Verify_parity+0x1a>
		}
	}
	return 1;
 800f24a:	2301      	movs	r3, #1
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	0802acc8 	.word	0x0802acc8
 800f258:	0802ace0 	.word	0x0802ace0
 800f25c:	0802acf4 	.word	0x0802acf4

0800f260 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f264:	b089      	sub	sp, #36	; 0x24
 800f266:	af00      	add	r7, sp, #0
 800f268:	4603      	mov	r3, r0
 800f26a:	60ba      	str	r2, [r7, #8]
 800f26c:	73fb      	strb	r3, [r7, #15]
 800f26e:	460b      	mov	r3, r1
 800f270:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800f272:	2300      	movs	r3, #0
 800f274:	83fb      	strh	r3, [r7, #30]
 800f276:	2300      	movs	r3, #0
 800f278:	83bb      	strh	r3, [r7, #28]
 800f27a:	2300      	movs	r3, #0
 800f27c:	833b      	strh	r3, [r7, #24]
 800f27e:	2300      	movs	r3, #0
 800f280:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800f282:	2300      	movs	r3, #0
 800f284:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800f286:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800f28a:	2b02      	cmp	r3, #2
 800f28c:	d108      	bne.n	800f2a0 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800f28e:	7bfb      	ldrb	r3, [r7, #15]
 800f290:	b298      	uxth	r0, r3
 800f292:	7bbb      	ldrb	r3, [r7, #14]
 800f294:	b299      	uxth	r1, r3
 800f296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f298:	68ba      	ldr	r2, [r7, #8]
 800f29a:	f7f1 fa47 	bl	800072c <InsertBits>
		return;
 800f29e:	e13b      	b.n	800f518 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800f2a0:	7bbb      	ldrb	r3, [r7, #14]
 800f2a2:	2b08      	cmp	r3, #8
 800f2a4:	d12c      	bne.n	800f300 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800f2a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f2aa:	2a80      	cmp	r2, #128	; 0x80
 800f2ac:	f173 0300 	sbcs.w	r3, r3, #0
 800f2b0:	d303      	bcc.n	800f2ba <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800f2b2:	489b      	ldr	r0, [pc, #620]	; (800f520 <Insert_cal_parity+0x2c0>)
 800f2b4:	f017 fc62 	bl	8026b7c <puts>
			return;
 800f2b8:	e12e      	b.n	800f518 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800f2ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f2be:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f2c2:	4611      	mov	r1, r2
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7ff ff29 	bl	800f11c <Calculate_Parity>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d10b      	bne.n	800f2e8 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800f2d0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2e0:	b2da      	uxtb	r2, r3
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	701a      	strb	r2, [r3, #0]
 800f2e6:	e117      	b.n	800f518 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800f2e8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2f8:	b2da      	uxtb	r2, r3
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	701a      	strb	r2, [r3, #0]
 800f2fe:	e10b      	b.n	800f518 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	2b18      	cmp	r3, #24
 800f304:	f040 8104 	bne.w	800f510 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800f308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f30c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f310:	f173 0300 	sbcs.w	r3, r3, #0
 800f314:	d303      	bcc.n	800f31e <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800f316:	4883      	ldr	r0, [pc, #524]	; (800f524 <Insert_cal_parity+0x2c4>)
 800f318:	f017 fc30 	bl	8026b7c <puts>
			return;
 800f31c:	e0fc      	b.n	800f518 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800f31e:	2300      	movs	r3, #0
 800f320:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800f322:	2300      	movs	r3, #0
 800f324:	76bb      	strb	r3, [r7, #26]
 800f326:	e0ee      	b.n	800f506 <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800f328:	7ebb      	ldrb	r3, [r7, #26]
 800f32a:	00d9      	lsls	r1, r3, #3
 800f32c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f330:	f1c1 0620 	rsb	r6, r1, #32
 800f334:	f1a1 0c20 	sub.w	ip, r1, #32
 800f338:	fa22 f001 	lsr.w	r0, r2, r1
 800f33c:	6038      	str	r0, [r7, #0]
 800f33e:	fa03 f606 	lsl.w	r6, r3, r6
 800f342:	6838      	ldr	r0, [r7, #0]
 800f344:	4330      	orrs	r0, r6
 800f346:	6038      	str	r0, [r7, #0]
 800f348:	fa23 fc0c 	lsr.w	ip, r3, ip
 800f34c:	6838      	ldr	r0, [r7, #0]
 800f34e:	ea40 000c 	orr.w	r0, r0, ip
 800f352:	6038      	str	r0, [r7, #0]
 800f354:	40cb      	lsrs	r3, r1
 800f356:	607b      	str	r3, [r7, #4]
 800f358:	783b      	ldrb	r3, [r7, #0]
 800f35a:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800f35c:	7ebb      	ldrb	r3, [r7, #26]
 800f35e:	2b02      	cmp	r3, #2
 800f360:	d07a      	beq.n	800f458 <Insert_cal_parity+0x1f8>
 800f362:	2b02      	cmp	r3, #2
 800f364:	f300 8094 	bgt.w	800f490 <Insert_cal_parity+0x230>
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d002      	beq.n	800f372 <Insert_cal_parity+0x112>
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d01f      	beq.n	800f3b0 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800f370:	e08e      	b.n	800f490 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800f372:	7ebb      	ldrb	r3, [r7, #26]
 800f374:	00d9      	lsls	r1, r3, #3
 800f376:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f37a:	f1c1 0620 	rsb	r6, r1, #32
 800f37e:	f1a1 0020 	sub.w	r0, r1, #32
 800f382:	fa22 f401 	lsr.w	r4, r2, r1
 800f386:	fa03 f606 	lsl.w	r6, r3, r6
 800f38a:	4334      	orrs	r4, r6
 800f38c:	fa23 f000 	lsr.w	r0, r3, r0
 800f390:	4304      	orrs	r4, r0
 800f392:	fa23 f501 	lsr.w	r5, r3, r1
 800f396:	f04f 0200 	mov.w	r2, #0
 800f39a:	f04f 0300 	mov.w	r3, #0
 800f39e:	09e2      	lsrs	r2, r4, #7
 800f3a0:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800f3a4:	09eb      	lsrs	r3, r5, #7
 800f3a6:	b293      	uxth	r3, r2
 800f3a8:	f003 0301 	and.w	r3, r3, #1
 800f3ac:	83fb      	strh	r3, [r7, #30]
					break;
 800f3ae:	e070      	b.n	800f492 <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800f3b0:	7efb      	ldrb	r3, [r7, #27]
 800f3b2:	005b      	lsls	r3, r3, #1
 800f3b4:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800f3b6:	8bfb      	ldrh	r3, [r7, #30]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d104      	bne.n	800f3c6 <Insert_cal_parity+0x166>
 800f3bc:	7efb      	ldrb	r3, [r7, #27]
 800f3be:	f023 0301 	bic.w	r3, r3, #1
 800f3c2:	76fb      	strb	r3, [r7, #27]
 800f3c4:	e003      	b.n	800f3ce <Insert_cal_parity+0x16e>
 800f3c6:	7efb      	ldrb	r3, [r7, #27]
 800f3c8:	f043 0301 	orr.w	r3, r3, #1
 800f3cc:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800f3ce:	7ebb      	ldrb	r3, [r7, #26]
 800f3d0:	00d9      	lsls	r1, r3, #3
 800f3d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f3d6:	f1c1 0620 	rsb	r6, r1, #32
 800f3da:	f1a1 0020 	sub.w	r0, r1, #32
 800f3de:	fa22 f801 	lsr.w	r8, r2, r1
 800f3e2:	fa03 f606 	lsl.w	r6, r3, r6
 800f3e6:	ea48 0806 	orr.w	r8, r8, r6
 800f3ea:	fa23 f000 	lsr.w	r0, r3, r0
 800f3ee:	ea48 0800 	orr.w	r8, r8, r0
 800f3f2:	fa23 f901 	lsr.w	r9, r3, r1
 800f3f6:	f04f 0200 	mov.w	r2, #0
 800f3fa:	f04f 0300 	mov.w	r3, #0
 800f3fe:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800f402:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800f406:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800f40a:	b293      	uxth	r3, r2
 800f40c:	f003 0301 	and.w	r3, r3, #1
 800f410:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800f412:	7ebb      	ldrb	r3, [r7, #26]
 800f414:	00d9      	lsls	r1, r3, #3
 800f416:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f41a:	f1c1 0620 	rsb	r6, r1, #32
 800f41e:	f1a1 0020 	sub.w	r0, r1, #32
 800f422:	fa22 fa01 	lsr.w	sl, r2, r1
 800f426:	fa03 f606 	lsl.w	r6, r3, r6
 800f42a:	ea4a 0a06 	orr.w	sl, sl, r6
 800f42e:	fa23 f000 	lsr.w	r0, r3, r0
 800f432:	ea4a 0a00 	orr.w	sl, sl, r0
 800f436:	fa23 fb01 	lsr.w	fp, r3, r1
 800f43a:	f04f 0200 	mov.w	r2, #0
 800f43e:	f04f 0300 	mov.w	r3, #0
 800f442:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800f446:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800f44a:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800f44e:	b293      	uxth	r3, r2
 800f450:	f003 0301 	and.w	r3, r3, #1
 800f454:	83bb      	strh	r3, [r7, #28]
					break;
 800f456:	e01c      	b.n	800f492 <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800f458:	7efb      	ldrb	r3, [r7, #27]
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800f45e:	8bbb      	ldrh	r3, [r7, #28]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d104      	bne.n	800f46e <Insert_cal_parity+0x20e>
 800f464:	7efb      	ldrb	r3, [r7, #27]
 800f466:	f023 0301 	bic.w	r3, r3, #1
 800f46a:	76fb      	strb	r3, [r7, #27]
 800f46c:	e003      	b.n	800f476 <Insert_cal_parity+0x216>
 800f46e:	7efb      	ldrb	r3, [r7, #27]
 800f470:	f043 0301 	orr.w	r3, r3, #1
 800f474:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800f476:	8bfb      	ldrh	r3, [r7, #30]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d104      	bne.n	800f486 <Insert_cal_parity+0x226>
 800f47c:	7efb      	ldrb	r3, [r7, #27]
 800f47e:	f023 0302 	bic.w	r3, r3, #2
 800f482:	76fb      	strb	r3, [r7, #27]
					break;
 800f484:	e005      	b.n	800f492 <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800f486:	7efb      	ldrb	r3, [r7, #27]
 800f488:	f043 0302 	orr.w	r3, r3, #2
 800f48c:	76fb      	strb	r3, [r7, #27]
					break;
 800f48e:	e000      	b.n	800f492 <Insert_cal_parity+0x232>
					break;
 800f490:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800f492:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f496:	7efb      	ldrb	r3, [r7, #27]
 800f498:	4611      	mov	r1, r2
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7ff fe3e 	bl	800f11c <Calculate_Parity>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d116      	bne.n	800f4d4 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f4a6:	7ebb      	ldrb	r3, [r7, #26]
 800f4a8:	f1c3 0302 	rsb	r3, r3, #2
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	7efa      	ldrb	r2, [r7, #27]
 800f4b2:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800f4b4:	7ebb      	ldrb	r3, [r7, #26]
 800f4b6:	f1c3 0302 	rsb	r3, r3, #2
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	4413      	add	r3, r2
 800f4be:	781a      	ldrb	r2, [r3, #0]
 800f4c0:	7ebb      	ldrb	r3, [r7, #26]
 800f4c2:	f1c3 0302 	rsb	r3, r3, #2
 800f4c6:	68b9      	ldr	r1, [r7, #8]
 800f4c8:	440b      	add	r3, r1
 800f4ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f4ce:	b2d2      	uxtb	r2, r2
 800f4d0:	701a      	strb	r2, [r3, #0]
 800f4d2:	e015      	b.n	800f500 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f4d4:	7ebb      	ldrb	r3, [r7, #26]
 800f4d6:	f1c3 0302 	rsb	r3, r3, #2
 800f4da:	68ba      	ldr	r2, [r7, #8]
 800f4dc:	4413      	add	r3, r2
 800f4de:	7efa      	ldrb	r2, [r7, #27]
 800f4e0:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800f4e2:	7ebb      	ldrb	r3, [r7, #26]
 800f4e4:	f1c3 0302 	rsb	r3, r3, #2
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	781a      	ldrb	r2, [r3, #0]
 800f4ee:	7ebb      	ldrb	r3, [r7, #26]
 800f4f0:	f1c3 0302 	rsb	r3, r3, #2
 800f4f4:	68b9      	ldr	r1, [r7, #8]
 800f4f6:	440b      	add	r3, r1
 800f4f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f4fc:	b2d2      	uxtb	r2, r2
 800f4fe:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800f500:	7ebb      	ldrb	r3, [r7, #26]
 800f502:	3301      	adds	r3, #1
 800f504:	76bb      	strb	r3, [r7, #26]
 800f506:	7ebb      	ldrb	r3, [r7, #26]
 800f508:	2b02      	cmp	r3, #2
 800f50a:	f67f af0d 	bls.w	800f328 <Insert_cal_parity+0xc8>
 800f50e:	e003      	b.n	800f518 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800f510:	4805      	ldr	r0, [pc, #20]	; (800f528 <Insert_cal_parity+0x2c8>)
 800f512:	f017 fb33 	bl	8026b7c <puts>
		return;
 800f516:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800f518:	3724      	adds	r7, #36	; 0x24
 800f51a:	46bd      	mov	sp, r7
 800f51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f520:	0802ad0c 	.word	0x0802ad0c
 800f524:	0802ad40 	.word	0x0802ad40
 800f528:	0802ad74 	.word	0x0802ad74

0800f52c <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	460b      	mov	r3, r1
 800f536:	807b      	strh	r3, [r7, #2]
 800f538:	4613      	mov	r3, r2
 800f53a:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800f53c:	2300      	movs	r3, #0
 800f53e:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800f540:	2300      	movs	r3, #0
 800f542:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800f544:	787b      	ldrb	r3, [r7, #1]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d133      	bne.n	800f5b2 <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800f54a:	887b      	ldrh	r3, [r7, #2]
 800f54c:	085b      	lsrs	r3, r3, #1
 800f54e:	b29b      	uxth	r3, r3
 800f550:	3b02      	subs	r3, #2
 800f552:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f554:	2300      	movs	r3, #0
 800f556:	81fb      	strh	r3, [r7, #14]
 800f558:	e025      	b.n	800f5a6 <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800f55a:	89fb      	ldrh	r3, [r7, #14]
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	4413      	add	r3, r2
 800f560:	781a      	ldrb	r2, [r3, #0]
 800f562:	89f9      	ldrh	r1, [r7, #14]
 800f564:	89bb      	ldrh	r3, [r7, #12]
 800f566:	440b      	add	r3, r1
 800f568:	3302      	adds	r3, #2
 800f56a:	6879      	ldr	r1, [r7, #4]
 800f56c:	440b      	add	r3, r1
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	43db      	mvns	r3, r3
 800f572:	b2db      	uxtb	r3, r3
 800f574:	429a      	cmp	r2, r3
 800f576:	d013      	beq.n	800f5a0 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800f578:	89fb      	ldrh	r3, [r7, #14]
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	4413      	add	r3, r2
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	4619      	mov	r1, r3
 800f582:	89fa      	ldrh	r2, [r7, #14]
 800f584:	89bb      	ldrh	r3, [r7, #12]
 800f586:	4413      	add	r3, r2
 800f588:	3302      	adds	r3, #2
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	4413      	add	r3, r2
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	43db      	mvns	r3, r3
 800f592:	b2db      	uxtb	r3, r3
 800f594:	461a      	mov	r2, r3
 800f596:	481a      	ldr	r0, [pc, #104]	; (800f600 <Data_Compliment+0xd4>)
 800f598:	f017 fa54 	bl	8026a44 <iprintf>
				return 0;
 800f59c:	2300      	movs	r3, #0
 800f59e:	e02b      	b.n	800f5f8 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f5a0:	89fb      	ldrh	r3, [r7, #14]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	81fb      	strh	r3, [r7, #14]
 800f5a6:	89fa      	ldrh	r2, [r7, #14]
 800f5a8:	89bb      	ldrh	r3, [r7, #12]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d3d5      	bcc.n	800f55a <Data_Compliment+0x2e>
			}
		}
		return 1;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e022      	b.n	800f5f8 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800f5b2:	787b      	ldrb	r3, [r7, #1]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d11e      	bne.n	800f5f6 <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	81fb      	strh	r3, [r7, #14]
 800f5bc:	e010      	b.n	800f5e0 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800f5be:	89fb      	ldrh	r3, [r7, #14]
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	781a      	ldrb	r2, [r3, #0]
 800f5c6:	89fb      	ldrh	r3, [r7, #14]
 800f5c8:	1c99      	adds	r1, r3, #2
 800f5ca:	887b      	ldrh	r3, [r7, #2]
 800f5cc:	440b      	add	r3, r1
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	440b      	add	r3, r1
 800f5d4:	43d2      	mvns	r2, r2
 800f5d6:	b2d2      	uxtb	r2, r2
 800f5d8:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f5da:	89fb      	ldrh	r3, [r7, #14]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	81fb      	strh	r3, [r7, #14]
 800f5e0:	89fa      	ldrh	r2, [r7, #14]
 800f5e2:	887b      	ldrh	r3, [r7, #2]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d3ea      	bcc.n	800f5be <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800f5e8:	89fa      	ldrh	r2, [r7, #14]
 800f5ea:	887b      	ldrh	r3, [r7, #2]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	3302      	adds	r3, #2
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	e000      	b.n	800f5f8 <Data_Compliment+0xcc>
	}
	return 0;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	0802ad84 	.word	0x0802ad84

0800f604 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f60e:	4b1a      	ldr	r3, [pc, #104]	; (800f678 <CheckToSendReplyorNot+0x74>)
 800f610:	785b      	ldrb	r3, [r3, #1]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d104      	bne.n	800f620 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800f616:	79fb      	ldrb	r3, [r7, #7]
 800f618:	f043 0301 	orr.w	r3, r3, #1
 800f61c:	71fb      	strb	r3, [r7, #7]
 800f61e:	e003      	b.n	800f628 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800f620:	79fb      	ldrb	r3, [r7, #7]
 800f622:	f023 0301 	bic.w	r3, r3, #1
 800f626:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f628:	4b14      	ldr	r3, [pc, #80]	; (800f67c <CheckToSendReplyorNot+0x78>)
 800f62a:	785b      	ldrb	r3, [r3, #1]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d104      	bne.n	800f63a <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800f630:	79fb      	ldrb	r3, [r7, #7]
 800f632:	f043 0302 	orr.w	r3, r3, #2
 800f636:	71fb      	strb	r3, [r7, #7]
 800f638:	e003      	b.n	800f642 <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	f023 0302 	bic.w	r3, r3, #2
 800f640:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800f642:	79fb      	ldrb	r3, [r7, #7]
 800f644:	2b02      	cmp	r3, #2
 800f646:	dc02      	bgt.n	800f64e <CheckToSendReplyorNot+0x4a>
 800f648:	2b00      	cmp	r3, #0
 800f64a:	da03      	bge.n	800f654 <CheckToSendReplyorNot+0x50>
 800f64c:	e00a      	b.n	800f664 <CheckToSendReplyorNot+0x60>
 800f64e:	2b03      	cmp	r3, #3
 800f650:	d004      	beq.n	800f65c <CheckToSendReplyorNot+0x58>
 800f652:	e007      	b.n	800f664 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800f654:	4b0a      	ldr	r3, [pc, #40]	; (800f680 <CheckToSendReplyorNot+0x7c>)
 800f656:	2201      	movs	r2, #1
 800f658:	701a      	strb	r2, [r3, #0]
		break;
 800f65a:	e007      	b.n	800f66c <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
 800f65c:	4b08      	ldr	r3, [pc, #32]	; (800f680 <CheckToSendReplyorNot+0x7c>)
 800f65e:	2201      	movs	r2, #1
 800f660:	701a      	strb	r2, [r3, #0]
#endif
#ifdef EI_2
		SendReply = 0;
#endif
		break;
 800f662:	e003      	b.n	800f66c <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800f664:	4b06      	ldr	r3, [pc, #24]	; (800f680 <CheckToSendReplyorNot+0x7c>)
 800f666:	2201      	movs	r2, #1
 800f668:	701a      	strb	r2, [r3, #0]
		break;
 800f66a:	bf00      	nop
	}

}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	20004c74 	.word	0x20004c74
 800f67c:	20004c78 	.word	0x20004c78
 800f680:	20006395 	.word	0x20006395

0800f684 <PrintSignals>:



void PrintSignals(void)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800f68a:	4b2d      	ldr	r3, [pc, #180]	; (800f740 <PrintSignals+0xbc>)
 800f68c:	881b      	ldrh	r3, [r3, #0]
 800f68e:	461a      	mov	r2, r3
 800f690:	492c      	ldr	r1, [pc, #176]	; (800f744 <PrintSignals+0xc0>)
 800f692:	482d      	ldr	r0, [pc, #180]	; (800f748 <PrintSignals+0xc4>)
 800f694:	f017 f8c6 	bl	8026824 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f698:	2301      	movs	r3, #1
 800f69a:	80fb      	strh	r3, [r7, #6]
 800f69c:	e045      	b.n	800f72a <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800f69e:	4b2b      	ldr	r3, [pc, #172]	; (800f74c <PrintSignals+0xc8>)
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	88fa      	ldrh	r2, [r7, #6]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d83c      	bhi.n	800f722 <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800f6a8:	88fb      	ldrh	r3, [r7, #6]
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	da00      	bge.n	800f6b2 <PrintSignals+0x2e>
 800f6b0:	3307      	adds	r3, #7
 800f6b2:	10db      	asrs	r3, r3, #3
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	4b26      	ldr	r3, [pc, #152]	; (800f750 <PrintSignals+0xcc>)
 800f6b8:	4413      	add	r3, r2
 800f6ba:	789b      	ldrb	r3, [r3, #2]
 800f6bc:	4619      	mov	r1, r3
 800f6be:	88fb      	ldrh	r3, [r7, #6]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	425a      	negs	r2, r3
 800f6c4:	f003 0307 	and.w	r3, r3, #7
 800f6c8:	f002 0207 	and.w	r2, r2, #7
 800f6cc:	bf58      	it	pl
 800f6ce:	4253      	negpl	r3, r2
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f6d6:	400b      	ands	r3, r1
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	dd0c      	ble.n	800f6f6 <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800f6dc:	88fb      	ldrh	r3, [r7, #6]
 800f6de:	1e5a      	subs	r2, r3, #1
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	4413      	add	r3, r2
 800f6e6:	00db      	lsls	r3, r3, #3
 800f6e8:	4a1a      	ldr	r2, [pc, #104]	; (800f754 <PrintSignals+0xd0>)
 800f6ea:	4413      	add	r3, r2
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	481a      	ldr	r0, [pc, #104]	; (800f758 <PrintSignals+0xd4>)
 800f6f0:	f017 f9a8 	bl	8026a44 <iprintf>
 800f6f4:	e00b      	b.n	800f70e <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800f6f6:	88fb      	ldrh	r3, [r7, #6]
 800f6f8:	1e5a      	subs	r2, r3, #1
 800f6fa:	4613      	mov	r3, r2
 800f6fc:	009b      	lsls	r3, r3, #2
 800f6fe:	4413      	add	r3, r2
 800f700:	00db      	lsls	r3, r3, #3
 800f702:	4a14      	ldr	r2, [pc, #80]	; (800f754 <PrintSignals+0xd0>)
 800f704:	4413      	add	r3, r2
 800f706:	4619      	mov	r1, r3
 800f708:	4814      	ldr	r0, [pc, #80]	; (800f75c <PrintSignals+0xd8>)
 800f70a:	f017 f99b 	bl	8026a44 <iprintf>
		}

		if( (Traverser%2) == 0)
 800f70e:	88fb      	ldrh	r3, [r7, #6]
 800f710:	f003 0301 	and.w	r3, r3, #1
 800f714:	b29b      	uxth	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d104      	bne.n	800f724 <PrintSignals+0xa0>
		{
			printf("\n");
 800f71a:	200a      	movs	r0, #10
 800f71c:	f017 f9aa 	bl	8026a74 <putchar>
 800f720:	e000      	b.n	800f724 <PrintSignals+0xa0>
			continue;
 800f722:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f724:	88fb      	ldrh	r3, [r7, #6]
 800f726:	3301      	adds	r3, #1
 800f728:	80fb      	strh	r3, [r7, #6]
 800f72a:	88fa      	ldrh	r2, [r7, #6]
 800f72c:	4b08      	ldr	r3, [pc, #32]	; (800f750 <PrintSignals+0xcc>)
 800f72e:	881b      	ldrh	r3, [r3, #0]
 800f730:	00db      	lsls	r3, r3, #3
 800f732:	429a      	cmp	r2, r3
 800f734:	ddb3      	ble.n	800f69e <PrintSignals+0x1a>
		}
	}
}
 800f736:	bf00      	nop
 800f738:	bf00      	nop
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20004ea0 	.word	0x20004ea0
 800f744:	20004ea4 	.word	0x20004ea4
 800f748:	20004c9e 	.word	0x20004c9e
 800f74c:	20005fa8 	.word	0x20005fa8
 800f750:	20004c9c 	.word	0x20004c9c
 800f754:	200054b8 	.word	0x200054b8
 800f758:	0802adbc 	.word	0x0802adbc
 800f75c:	0802adcc 	.word	0x0802adcc

0800f760 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800f76a:	2300      	movs	r3, #0
 800f76c:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800f76e:	2300      	movs	r3, #0
 800f770:	607b      	str	r3, [r7, #4]

	Get_time();
 800f772:	f7fd f9bb 	bl	800caec <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800f776:	4b21      	ldr	r3, [pc, #132]	; (800f7fc <GetTimeStamp+0x9c>)
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f780:	fb03 f202 	mul.w	r2, r3, r2
 800f784:	4b1d      	ldr	r3, [pc, #116]	; (800f7fc <GetTimeStamp+0x9c>)
 800f786:	785b      	ldrb	r3, [r3, #1]
 800f788:	4619      	mov	r1, r3
 800f78a:	460b      	mov	r3, r1
 800f78c:	011b      	lsls	r3, r3, #4
 800f78e:	1a5b      	subs	r3, r3, r1
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	4413      	add	r3, r2
 800f794:	4a19      	ldr	r2, [pc, #100]	; (800f7fc <GetTimeStamp+0x9c>)
 800f796:	7892      	ldrb	r2, [r2, #2]
 800f798:	4413      	add	r3, r2
 800f79a:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800f79c:	4b18      	ldr	r3, [pc, #96]	; (800f800 <GetTimeStamp+0xa0>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d007      	beq.n	800f7b6 <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800f7a6:	4a16      	ldr	r2, [pc, #88]	; (800f800 <GetTimeStamp+0xa0>)
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800f7ac:	f00a f940 	bl	8019a30 <HAL_GetTick>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	4a14      	ldr	r2, [pc, #80]	; (800f804 <GetTimeStamp+0xa4>)
 800f7b4:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800f7b6:	4b13      	ldr	r3, [pc, #76]	; (800f804 <GetTimeStamp+0xa4>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 fe1c 	bl	80103f8 <HAL_Elaps_Ticks>
 800f7c0:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800f7c2:	68fa      	ldr	r2, [r7, #12]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	005b      	lsls	r3, r3, #1
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4a0d      	ldr	r2, [pc, #52]	; (800f808 <GetTimeStamp+0xa8>)
 800f7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f7d6:	095b      	lsrs	r3, r3, #5
 800f7d8:	440b      	add	r3, r1
 800f7da:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800f7dc:	4b0b      	ldr	r3, [pc, #44]	; (800f80c <GetTimeStamp+0xac>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d005      	beq.n	800f7f2 <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800f7e6:	4a09      	ldr	r2, [pc, #36]	; (800f80c <GetTimeStamp+0xac>)
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800f7ec:	4a08      	ldr	r2, [pc, #32]	; (800f810 <GetTimeStamp+0xb0>)
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800f7f2:	bf00      	nop
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20003fdc 	.word	0x20003fdc
 800f800:	2000639c 	.word	0x2000639c
 800f804:	200063a0 	.word	0x200063a0
 800f808:	51eb851f 	.word	0x51eb851f
 800f80c:	200063a4 	.word	0x200063a4
 800f810:	200054b4 	.word	0x200054b4

0800f814 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800f814:	b490      	push	{r4, r7}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800f81e:	79fb      	ldrb	r3, [r7, #7]
 800f820:	1c5a      	adds	r2, r3, #1
 800f822:	71fa      	strb	r2, [r7, #7]
 800f824:	461a      	mov	r2, r3
 800f826:	4613      	mov	r3, r2
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	4413      	add	r3, r2
 800f82c:	00db      	lsls	r3, r3, #3
 800f82e:	4acd      	ldr	r2, [pc, #820]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f830:	4413      	add	r3, r2
 800f832:	4acd      	ldr	r2, [pc, #820]	; (800fb68 <UpdateSIGNALSNames+0x354>)
 800f834:	6810      	ldr	r0, [r2, #0]
 800f836:	6018      	str	r0, [r3, #0]
 800f838:	8892      	ldrh	r2, [r2, #4]
 800f83a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800f83c:	79fb      	ldrb	r3, [r7, #7]
 800f83e:	1c5a      	adds	r2, r3, #1
 800f840:	71fa      	strb	r2, [r7, #7]
 800f842:	461a      	mov	r2, r3
 800f844:	4613      	mov	r3, r2
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	4413      	add	r3, r2
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	4ac5      	ldr	r2, [pc, #788]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f84e:	4413      	add	r3, r2
 800f850:	4ac6      	ldr	r2, [pc, #792]	; (800fb6c <UpdateSIGNALSNames+0x358>)
 800f852:	6810      	ldr	r0, [r2, #0]
 800f854:	6018      	str	r0, [r3, #0]
 800f856:	8892      	ldrh	r2, [r2, #4]
 800f858:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800f85a:	79fb      	ldrb	r3, [r7, #7]
 800f85c:	1c5a      	adds	r2, r3, #1
 800f85e:	71fa      	strb	r2, [r7, #7]
 800f860:	461a      	mov	r2, r3
 800f862:	4613      	mov	r3, r2
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	4413      	add	r3, r2
 800f868:	00db      	lsls	r3, r3, #3
 800f86a:	4abe      	ldr	r2, [pc, #760]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f86c:	4413      	add	r3, r2
 800f86e:	4ac0      	ldr	r2, [pc, #768]	; (800fb70 <UpdateSIGNALSNames+0x35c>)
 800f870:	6810      	ldr	r0, [r2, #0]
 800f872:	6018      	str	r0, [r3, #0]
 800f874:	8892      	ldrh	r2, [r2, #4]
 800f876:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800f878:	79fb      	ldrb	r3, [r7, #7]
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	71fa      	strb	r2, [r7, #7]
 800f87e:	461a      	mov	r2, r3
 800f880:	4613      	mov	r3, r2
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	4413      	add	r3, r2
 800f886:	00db      	lsls	r3, r3, #3
 800f888:	4ab6      	ldr	r2, [pc, #728]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f88a:	4413      	add	r3, r2
 800f88c:	4ab9      	ldr	r2, [pc, #740]	; (800fb74 <UpdateSIGNALSNames+0x360>)
 800f88e:	6810      	ldr	r0, [r2, #0]
 800f890:	6018      	str	r0, [r3, #0]
 800f892:	8892      	ldrh	r2, [r2, #4]
 800f894:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	71fa      	strb	r2, [r7, #7]
 800f89c:	461a      	mov	r2, r3
 800f89e:	4613      	mov	r3, r2
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	4413      	add	r3, r2
 800f8a4:	00db      	lsls	r3, r3, #3
 800f8a6:	4aaf      	ldr	r2, [pc, #700]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f8a8:	4413      	add	r3, r2
 800f8aa:	4ab3      	ldr	r2, [pc, #716]	; (800fb78 <UpdateSIGNALSNames+0x364>)
 800f8ac:	6810      	ldr	r0, [r2, #0]
 800f8ae:	6018      	str	r0, [r3, #0]
 800f8b0:	8892      	ldrh	r2, [r2, #4]
 800f8b2:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800f8b4:	79fb      	ldrb	r3, [r7, #7]
 800f8b6:	1c5a      	adds	r2, r3, #1
 800f8b8:	71fa      	strb	r2, [r7, #7]
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	4613      	mov	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	00db      	lsls	r3, r3, #3
 800f8c4:	4aa7      	ldr	r2, [pc, #668]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f8c6:	4413      	add	r3, r2
 800f8c8:	4aac      	ldr	r2, [pc, #688]	; (800fb7c <UpdateSIGNALSNames+0x368>)
 800f8ca:	6810      	ldr	r0, [r2, #0]
 800f8cc:	6018      	str	r0, [r3, #0]
 800f8ce:	8891      	ldrh	r1, [r2, #4]
 800f8d0:	7992      	ldrb	r2, [r2, #6]
 800f8d2:	8099      	strh	r1, [r3, #4]
 800f8d4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800f8d6:	79fb      	ldrb	r3, [r7, #7]
 800f8d8:	1c5a      	adds	r2, r3, #1
 800f8da:	71fa      	strb	r2, [r7, #7]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4613      	mov	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	4413      	add	r3, r2
 800f8e4:	00db      	lsls	r3, r3, #3
 800f8e6:	4a9f      	ldr	r2, [pc, #636]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f8e8:	4413      	add	r3, r2
 800f8ea:	4aa5      	ldr	r2, [pc, #660]	; (800fb80 <UpdateSIGNALSNames+0x36c>)
 800f8ec:	6810      	ldr	r0, [r2, #0]
 800f8ee:	6018      	str	r0, [r3, #0]
 800f8f0:	8891      	ldrh	r1, [r2, #4]
 800f8f2:	7992      	ldrb	r2, [r2, #6]
 800f8f4:	8099      	strh	r1, [r3, #4]
 800f8f6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800f8f8:	79fb      	ldrb	r3, [r7, #7]
 800f8fa:	1c5a      	adds	r2, r3, #1
 800f8fc:	71fa      	strb	r2, [r7, #7]
 800f8fe:	461a      	mov	r2, r3
 800f900:	4613      	mov	r3, r2
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	4413      	add	r3, r2
 800f906:	00db      	lsls	r3, r3, #3
 800f908:	4a96      	ldr	r2, [pc, #600]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f90a:	4413      	add	r3, r2
 800f90c:	4a9d      	ldr	r2, [pc, #628]	; (800fb84 <UpdateSIGNALSNames+0x370>)
 800f90e:	6810      	ldr	r0, [r2, #0]
 800f910:	6018      	str	r0, [r3, #0]
 800f912:	7912      	ldrb	r2, [r2, #4]
 800f914:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800f916:	79fb      	ldrb	r3, [r7, #7]
 800f918:	1c5a      	adds	r2, r3, #1
 800f91a:	71fa      	strb	r2, [r7, #7]
 800f91c:	461a      	mov	r2, r3
 800f91e:	4613      	mov	r3, r2
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	4413      	add	r3, r2
 800f924:	00db      	lsls	r3, r3, #3
 800f926:	4a8f      	ldr	r2, [pc, #572]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f928:	4413      	add	r3, r2
 800f92a:	4997      	ldr	r1, [pc, #604]	; (800fb88 <UpdateSIGNALSNames+0x374>)
 800f92c:	461a      	mov	r2, r3
 800f92e:	460b      	mov	r3, r1
 800f930:	cb03      	ldmia	r3!, {r0, r1}
 800f932:	6010      	str	r0, [r2, #0]
 800f934:	6051      	str	r1, [r2, #4]
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800f93a:	79fb      	ldrb	r3, [r7, #7]
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	71fa      	strb	r2, [r7, #7]
 800f940:	461a      	mov	r2, r3
 800f942:	4613      	mov	r3, r2
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	4413      	add	r3, r2
 800f948:	00db      	lsls	r3, r3, #3
 800f94a:	4a86      	ldr	r2, [pc, #536]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f94c:	4413      	add	r3, r2
 800f94e:	4a8f      	ldr	r2, [pc, #572]	; (800fb8c <UpdateSIGNALSNames+0x378>)
 800f950:	6810      	ldr	r0, [r2, #0]
 800f952:	6018      	str	r0, [r3, #0]
 800f954:	8892      	ldrh	r2, [r2, #4]
 800f956:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	1c5a      	adds	r2, r3, #1
 800f95c:	71fa      	strb	r2, [r7, #7]
 800f95e:	461a      	mov	r2, r3
 800f960:	4613      	mov	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	4413      	add	r3, r2
 800f966:	00db      	lsls	r3, r3, #3
 800f968:	4a7e      	ldr	r2, [pc, #504]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f96a:	4413      	add	r3, r2
 800f96c:	4988      	ldr	r1, [pc, #544]	; (800fb90 <UpdateSIGNALSNames+0x37c>)
 800f96e:	461a      	mov	r2, r3
 800f970:	460b      	mov	r3, r1
 800f972:	cb03      	ldmia	r3!, {r0, r1}
 800f974:	6010      	str	r0, [r2, #0]
 800f976:	6051      	str	r1, [r2, #4]
 800f978:	881b      	ldrh	r3, [r3, #0]
 800f97a:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800f97c:	79fb      	ldrb	r3, [r7, #7]
 800f97e:	1c5a      	adds	r2, r3, #1
 800f980:	71fa      	strb	r2, [r7, #7]
 800f982:	461a      	mov	r2, r3
 800f984:	4613      	mov	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	4413      	add	r3, r2
 800f98a:	00db      	lsls	r3, r3, #3
 800f98c:	4a75      	ldr	r2, [pc, #468]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f98e:	4413      	add	r3, r2
 800f990:	4980      	ldr	r1, [pc, #512]	; (800fb94 <UpdateSIGNALSNames+0x380>)
 800f992:	461a      	mov	r2, r3
 800f994:	460b      	mov	r3, r1
 800f996:	cb03      	ldmia	r3!, {r0, r1}
 800f998:	6010      	str	r0, [r2, #0]
 800f99a:	6051      	str	r1, [r2, #4]
 800f99c:	8819      	ldrh	r1, [r3, #0]
 800f99e:	789b      	ldrb	r3, [r3, #2]
 800f9a0:	8111      	strh	r1, [r2, #8]
 800f9a2:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	1c5a      	adds	r2, r3, #1
 800f9a8:	71fa      	strb	r2, [r7, #7]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4413      	add	r3, r2
 800f9b2:	00db      	lsls	r3, r3, #3
 800f9b4:	4a6b      	ldr	r2, [pc, #428]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f9b6:	4413      	add	r3, r2
 800f9b8:	4977      	ldr	r1, [pc, #476]	; (800fb98 <UpdateSIGNALSNames+0x384>)
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	460b      	mov	r3, r1
 800f9be:	cb03      	ldmia	r3!, {r0, r1}
 800f9c0:	6010      	str	r0, [r2, #0]
 800f9c2:	6051      	str	r1, [r2, #4]
 800f9c4:	881b      	ldrh	r3, [r3, #0]
 800f9c6:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800f9c8:	79fb      	ldrb	r3, [r7, #7]
 800f9ca:	1c5a      	adds	r2, r3, #1
 800f9cc:	71fa      	strb	r2, [r7, #7]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	4413      	add	r3, r2
 800f9d6:	00db      	lsls	r3, r3, #3
 800f9d8:	4a62      	ldr	r2, [pc, #392]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f9da:	4413      	add	r3, r2
 800f9dc:	496f      	ldr	r1, [pc, #444]	; (800fb9c <UpdateSIGNALSNames+0x388>)
 800f9de:	461a      	mov	r2, r3
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	cb03      	ldmia	r3!, {r0, r1}
 800f9e4:	6010      	str	r0, [r2, #0]
 800f9e6:	6051      	str	r1, [r2, #4]
 800f9e8:	881b      	ldrh	r3, [r3, #0]
 800f9ea:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800f9ec:	79fb      	ldrb	r3, [r7, #7]
 800f9ee:	1c5a      	adds	r2, r3, #1
 800f9f0:	71fa      	strb	r2, [r7, #7]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	4413      	add	r3, r2
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	4a59      	ldr	r2, [pc, #356]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f9fe:	4413      	add	r3, r2
 800fa00:	4967      	ldr	r1, [pc, #412]	; (800fba0 <UpdateSIGNALSNames+0x38c>)
 800fa02:	461a      	mov	r2, r3
 800fa04:	460b      	mov	r3, r1
 800fa06:	cb03      	ldmia	r3!, {r0, r1}
 800fa08:	6010      	str	r0, [r2, #0]
 800fa0a:	6051      	str	r1, [r2, #4]
 800fa0c:	8819      	ldrh	r1, [r3, #0]
 800fa0e:	789b      	ldrb	r3, [r3, #2]
 800fa10:	8111      	strh	r1, [r2, #8]
 800fa12:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800fa14:	79fb      	ldrb	r3, [r7, #7]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	71fa      	strb	r2, [r7, #7]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	4413      	add	r3, r2
 800fa22:	00db      	lsls	r3, r3, #3
 800fa24:	4a4f      	ldr	r2, [pc, #316]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fa26:	4413      	add	r3, r2
 800fa28:	495e      	ldr	r1, [pc, #376]	; (800fba4 <UpdateSIGNALSNames+0x390>)
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	cb03      	ldmia	r3!, {r0, r1}
 800fa30:	6010      	str	r0, [r2, #0]
 800fa32:	6051      	str	r1, [r2, #4]
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	1c5a      	adds	r2, r3, #1
 800fa3c:	71fa      	strb	r2, [r7, #7]
 800fa3e:	461a      	mov	r2, r3
 800fa40:	4613      	mov	r3, r2
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	00db      	lsls	r3, r3, #3
 800fa48:	4a46      	ldr	r2, [pc, #280]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fa4a:	4413      	add	r3, r2
 800fa4c:	4a56      	ldr	r2, [pc, #344]	; (800fba8 <UpdateSIGNALSNames+0x394>)
 800fa4e:	6810      	ldr	r0, [r2, #0]
 800fa50:	6018      	str	r0, [r3, #0]
 800fa52:	8891      	ldrh	r1, [r2, #4]
 800fa54:	7992      	ldrb	r2, [r2, #6]
 800fa56:	8099      	strh	r1, [r3, #4]
 800fa58:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800fa5a:	79fb      	ldrb	r3, [r7, #7]
 800fa5c:	1c5a      	adds	r2, r3, #1
 800fa5e:	71fa      	strb	r2, [r7, #7]
 800fa60:	461a      	mov	r2, r3
 800fa62:	4613      	mov	r3, r2
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4413      	add	r3, r2
 800fa68:	00db      	lsls	r3, r3, #3
 800fa6a:	4a3e      	ldr	r2, [pc, #248]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fa6c:	4413      	add	r3, r2
 800fa6e:	4a4f      	ldr	r2, [pc, #316]	; (800fbac <UpdateSIGNALSNames+0x398>)
 800fa70:	6810      	ldr	r0, [r2, #0]
 800fa72:	6018      	str	r0, [r3, #0]
 800fa74:	8891      	ldrh	r1, [r2, #4]
 800fa76:	7992      	ldrb	r2, [r2, #6]
 800fa78:	8099      	strh	r1, [r3, #4]
 800fa7a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800fa7c:	79fb      	ldrb	r3, [r7, #7]
 800fa7e:	1c5a      	adds	r2, r3, #1
 800fa80:	71fa      	strb	r2, [r7, #7]
 800fa82:	461a      	mov	r2, r3
 800fa84:	4613      	mov	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	00db      	lsls	r3, r3, #3
 800fa8c:	4a35      	ldr	r2, [pc, #212]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fa8e:	4413      	add	r3, r2
 800fa90:	4a47      	ldr	r2, [pc, #284]	; (800fbb0 <UpdateSIGNALSNames+0x39c>)
 800fa92:	6810      	ldr	r0, [r2, #0]
 800fa94:	6018      	str	r0, [r3, #0]
 800fa96:	8891      	ldrh	r1, [r2, #4]
 800fa98:	7992      	ldrb	r2, [r2, #6]
 800fa9a:	8099      	strh	r1, [r3, #4]
 800fa9c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800fa9e:	79fb      	ldrb	r3, [r7, #7]
 800faa0:	1c5a      	adds	r2, r3, #1
 800faa2:	71fa      	strb	r2, [r7, #7]
 800faa4:	461a      	mov	r2, r3
 800faa6:	4613      	mov	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4413      	add	r3, r2
 800faac:	00db      	lsls	r3, r3, #3
 800faae:	4a2d      	ldr	r2, [pc, #180]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fab0:	4413      	add	r3, r2
 800fab2:	4a40      	ldr	r2, [pc, #256]	; (800fbb4 <UpdateSIGNALSNames+0x3a0>)
 800fab4:	6810      	ldr	r0, [r2, #0]
 800fab6:	6018      	str	r0, [r3, #0]
 800fab8:	8891      	ldrh	r1, [r2, #4]
 800faba:	7992      	ldrb	r2, [r2, #6]
 800fabc:	8099      	strh	r1, [r3, #4]
 800fabe:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800fac0:	79fb      	ldrb	r3, [r7, #7]
 800fac2:	1c5a      	adds	r2, r3, #1
 800fac4:	71fa      	strb	r2, [r7, #7]
 800fac6:	461a      	mov	r2, r3
 800fac8:	4613      	mov	r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	4413      	add	r3, r2
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	4a24      	ldr	r2, [pc, #144]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fad2:	4413      	add	r3, r2
 800fad4:	4938      	ldr	r1, [pc, #224]	; (800fbb8 <UpdateSIGNALSNames+0x3a4>)
 800fad6:	461a      	mov	r2, r3
 800fad8:	460b      	mov	r3, r1
 800fada:	cb03      	ldmia	r3!, {r0, r1}
 800fadc:	6010      	str	r0, [r2, #0]
 800fade:	6051      	str	r1, [r2, #4]
 800fae0:	8819      	ldrh	r1, [r3, #0]
 800fae2:	789b      	ldrb	r3, [r3, #2]
 800fae4:	8111      	strh	r1, [r2, #8]
 800fae6:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800fae8:	79fb      	ldrb	r3, [r7, #7]
 800faea:	1c5a      	adds	r2, r3, #1
 800faec:	71fa      	strb	r2, [r7, #7]
 800faee:	461a      	mov	r2, r3
 800faf0:	4613      	mov	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4413      	add	r3, r2
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	4a1a      	ldr	r2, [pc, #104]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fafa:	4413      	add	r3, r2
 800fafc:	4a2f      	ldr	r2, [pc, #188]	; (800fbbc <UpdateSIGNALSNames+0x3a8>)
 800fafe:	6810      	ldr	r0, [r2, #0]
 800fb00:	6018      	str	r0, [r3, #0]
 800fb02:	8891      	ldrh	r1, [r2, #4]
 800fb04:	7992      	ldrb	r2, [r2, #6]
 800fb06:	8099      	strh	r1, [r3, #4]
 800fb08:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800fb0a:	79fb      	ldrb	r3, [r7, #7]
 800fb0c:	1c5a      	adds	r2, r3, #1
 800fb0e:	71fa      	strb	r2, [r7, #7]
 800fb10:	461a      	mov	r2, r3
 800fb12:	4613      	mov	r3, r2
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	4413      	add	r3, r2
 800fb18:	00db      	lsls	r3, r3, #3
 800fb1a:	4a12      	ldr	r2, [pc, #72]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fb1c:	4413      	add	r3, r2
 800fb1e:	4a28      	ldr	r2, [pc, #160]	; (800fbc0 <UpdateSIGNALSNames+0x3ac>)
 800fb20:	6810      	ldr	r0, [r2, #0]
 800fb22:	6018      	str	r0, [r3, #0]
 800fb24:	8891      	ldrh	r1, [r2, #4]
 800fb26:	7992      	ldrb	r2, [r2, #6]
 800fb28:	8099      	strh	r1, [r3, #4]
 800fb2a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800fb2c:	79fb      	ldrb	r3, [r7, #7]
 800fb2e:	1c5a      	adds	r2, r3, #1
 800fb30:	71fa      	strb	r2, [r7, #7]
 800fb32:	461a      	mov	r2, r3
 800fb34:	4613      	mov	r3, r2
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	4413      	add	r3, r2
 800fb3a:	00db      	lsls	r3, r3, #3
 800fb3c:	4a09      	ldr	r2, [pc, #36]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fb3e:	4413      	add	r3, r2
 800fb40:	4a20      	ldr	r2, [pc, #128]	; (800fbc4 <UpdateSIGNALSNames+0x3b0>)
 800fb42:	6810      	ldr	r0, [r2, #0]
 800fb44:	6018      	str	r0, [r3, #0]
 800fb46:	8891      	ldrh	r1, [r2, #4]
 800fb48:	7992      	ldrb	r2, [r2, #6]
 800fb4a:	8099      	strh	r1, [r3, #4]
 800fb4c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800fb4e:	79fb      	ldrb	r3, [r7, #7]
 800fb50:	1c5a      	adds	r2, r3, #1
 800fb52:	71fa      	strb	r2, [r7, #7]
 800fb54:	461a      	mov	r2, r3
 800fb56:	4613      	mov	r3, r2
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	4413      	add	r3, r2
 800fb5c:	00db      	lsls	r3, r3, #3
 800fb5e:	4a01      	ldr	r2, [pc, #4]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fb60:	4413      	add	r3, r2
 800fb62:	e031      	b.n	800fbc8 <UpdateSIGNALSNames+0x3b4>
 800fb64:	200054b8 	.word	0x200054b8
 800fb68:	0802addc 	.word	0x0802addc
 800fb6c:	0802ade4 	.word	0x0802ade4
 800fb70:	0802adec 	.word	0x0802adec
 800fb74:	0802adf4 	.word	0x0802adf4
 800fb78:	0802adfc 	.word	0x0802adfc
 800fb7c:	0802ae04 	.word	0x0802ae04
 800fb80:	0802ae0c 	.word	0x0802ae0c
 800fb84:	0802ae14 	.word	0x0802ae14
 800fb88:	0802ae1c 	.word	0x0802ae1c
 800fb8c:	0802ae28 	.word	0x0802ae28
 800fb90:	0802ae30 	.word	0x0802ae30
 800fb94:	0802ae3c 	.word	0x0802ae3c
 800fb98:	0802ae48 	.word	0x0802ae48
 800fb9c:	0802ae54 	.word	0x0802ae54
 800fba0:	0802ae60 	.word	0x0802ae60
 800fba4:	0802ae6c 	.word	0x0802ae6c
 800fba8:	0802ae78 	.word	0x0802ae78
 800fbac:	0802ae80 	.word	0x0802ae80
 800fbb0:	0802ae88 	.word	0x0802ae88
 800fbb4:	0802ae90 	.word	0x0802ae90
 800fbb8:	0802ae98 	.word	0x0802ae98
 800fbbc:	0802aea4 	.word	0x0802aea4
 800fbc0:	0802aeac 	.word	0x0802aeac
 800fbc4:	0802aeb4 	.word	0x0802aeb4
 800fbc8:	4acd      	ldr	r2, [pc, #820]	; (800ff00 <UpdateSIGNALSNames+0x6ec>)
 800fbca:	6810      	ldr	r0, [r2, #0]
 800fbcc:	6018      	str	r0, [r3, #0]
 800fbce:	8891      	ldrh	r1, [r2, #4]
 800fbd0:	7992      	ldrb	r2, [r2, #6]
 800fbd2:	8099      	strh	r1, [r3, #4]
 800fbd4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800fbd6:	79fb      	ldrb	r3, [r7, #7]
 800fbd8:	1c5a      	adds	r2, r3, #1
 800fbda:	71fa      	strb	r2, [r7, #7]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	4613      	mov	r3, r2
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	4413      	add	r3, r2
 800fbe4:	00db      	lsls	r3, r3, #3
 800fbe6:	4ac7      	ldr	r2, [pc, #796]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fbe8:	4413      	add	r3, r2
 800fbea:	4ac7      	ldr	r2, [pc, #796]	; (800ff08 <UpdateSIGNALSNames+0x6f4>)
 800fbec:	6810      	ldr	r0, [r2, #0]
 800fbee:	6018      	str	r0, [r3, #0]
 800fbf0:	8891      	ldrh	r1, [r2, #4]
 800fbf2:	7992      	ldrb	r2, [r2, #6]
 800fbf4:	8099      	strh	r1, [r3, #4]
 800fbf6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800fbf8:	79fb      	ldrb	r3, [r7, #7]
 800fbfa:	1c5a      	adds	r2, r3, #1
 800fbfc:	71fa      	strb	r2, [r7, #7]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	4613      	mov	r3, r2
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	00db      	lsls	r3, r3, #3
 800fc08:	4abe      	ldr	r2, [pc, #760]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc0a:	4413      	add	r3, r2
 800fc0c:	4abf      	ldr	r2, [pc, #764]	; (800ff0c <UpdateSIGNALSNames+0x6f8>)
 800fc0e:	6810      	ldr	r0, [r2, #0]
 800fc10:	6018      	str	r0, [r3, #0]
 800fc12:	8891      	ldrh	r1, [r2, #4]
 800fc14:	7992      	ldrb	r2, [r2, #6]
 800fc16:	8099      	strh	r1, [r3, #4]
 800fc18:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800fc1a:	79fb      	ldrb	r3, [r7, #7]
 800fc1c:	1c5a      	adds	r2, r3, #1
 800fc1e:	71fa      	strb	r2, [r7, #7]
 800fc20:	461a      	mov	r2, r3
 800fc22:	4613      	mov	r3, r2
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	4413      	add	r3, r2
 800fc28:	00db      	lsls	r3, r3, #3
 800fc2a:	4ab6      	ldr	r2, [pc, #728]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc2c:	4413      	add	r3, r2
 800fc2e:	4ab8      	ldr	r2, [pc, #736]	; (800ff10 <UpdateSIGNALSNames+0x6fc>)
 800fc30:	6810      	ldr	r0, [r2, #0]
 800fc32:	6018      	str	r0, [r3, #0]
 800fc34:	8891      	ldrh	r1, [r2, #4]
 800fc36:	7992      	ldrb	r2, [r2, #6]
 800fc38:	8099      	strh	r1, [r3, #4]
 800fc3a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800fc3c:	79fb      	ldrb	r3, [r7, #7]
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	71fa      	strb	r2, [r7, #7]
 800fc42:	461a      	mov	r2, r3
 800fc44:	4613      	mov	r3, r2
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	4413      	add	r3, r2
 800fc4a:	00db      	lsls	r3, r3, #3
 800fc4c:	4aad      	ldr	r2, [pc, #692]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc4e:	4413      	add	r3, r2
 800fc50:	49b0      	ldr	r1, [pc, #704]	; (800ff14 <UpdateSIGNALSNames+0x700>)
 800fc52:	461a      	mov	r2, r3
 800fc54:	460b      	mov	r3, r1
 800fc56:	cb03      	ldmia	r3!, {r0, r1}
 800fc58:	6010      	str	r0, [r2, #0]
 800fc5a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800fc5c:	79fb      	ldrb	r3, [r7, #7]
 800fc5e:	1c5a      	adds	r2, r3, #1
 800fc60:	71fa      	strb	r2, [r7, #7]
 800fc62:	461a      	mov	r2, r3
 800fc64:	4613      	mov	r3, r2
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	4413      	add	r3, r2
 800fc6a:	00db      	lsls	r3, r3, #3
 800fc6c:	4aa5      	ldr	r2, [pc, #660]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc6e:	4413      	add	r3, r2
 800fc70:	49a9      	ldr	r1, [pc, #676]	; (800ff18 <UpdateSIGNALSNames+0x704>)
 800fc72:	461a      	mov	r2, r3
 800fc74:	460b      	mov	r3, r1
 800fc76:	cb03      	ldmia	r3!, {r0, r1}
 800fc78:	6010      	str	r0, [r2, #0]
 800fc7a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800fc7c:	79fb      	ldrb	r3, [r7, #7]
 800fc7e:	1c5a      	adds	r2, r3, #1
 800fc80:	71fa      	strb	r2, [r7, #7]
 800fc82:	461a      	mov	r2, r3
 800fc84:	4613      	mov	r3, r2
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	4413      	add	r3, r2
 800fc8a:	00db      	lsls	r3, r3, #3
 800fc8c:	4a9d      	ldr	r2, [pc, #628]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc8e:	4413      	add	r3, r2
 800fc90:	49a2      	ldr	r1, [pc, #648]	; (800ff1c <UpdateSIGNALSNames+0x708>)
 800fc92:	461a      	mov	r2, r3
 800fc94:	460b      	mov	r3, r1
 800fc96:	cb03      	ldmia	r3!, {r0, r1}
 800fc98:	6010      	str	r0, [r2, #0]
 800fc9a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800fc9c:	79fb      	ldrb	r3, [r7, #7]
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	71fa      	strb	r2, [r7, #7]
 800fca2:	461a      	mov	r2, r3
 800fca4:	4613      	mov	r3, r2
 800fca6:	009b      	lsls	r3, r3, #2
 800fca8:	4413      	add	r3, r2
 800fcaa:	00db      	lsls	r3, r3, #3
 800fcac:	4a95      	ldr	r2, [pc, #596]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fcae:	4413      	add	r3, r2
 800fcb0:	499b      	ldr	r1, [pc, #620]	; (800ff20 <UpdateSIGNALSNames+0x70c>)
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	460b      	mov	r3, r1
 800fcb6:	cb03      	ldmia	r3!, {r0, r1}
 800fcb8:	6010      	str	r0, [r2, #0]
 800fcba:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800fcbc:	79fb      	ldrb	r3, [r7, #7]
 800fcbe:	1c5a      	adds	r2, r3, #1
 800fcc0:	71fa      	strb	r2, [r7, #7]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4413      	add	r3, r2
 800fcca:	00db      	lsls	r3, r3, #3
 800fccc:	4a8d      	ldr	r2, [pc, #564]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fcce:	4413      	add	r3, r2
 800fcd0:	4994      	ldr	r1, [pc, #592]	; (800ff24 <UpdateSIGNALSNames+0x710>)
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	cb03      	ldmia	r3!, {r0, r1}
 800fcd8:	6010      	str	r0, [r2, #0]
 800fcda:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800fcdc:	79fb      	ldrb	r3, [r7, #7]
 800fcde:	1c5a      	adds	r2, r3, #1
 800fce0:	71fa      	strb	r2, [r7, #7]
 800fce2:	461a      	mov	r2, r3
 800fce4:	4613      	mov	r3, r2
 800fce6:	009b      	lsls	r3, r3, #2
 800fce8:	4413      	add	r3, r2
 800fcea:	00db      	lsls	r3, r3, #3
 800fcec:	4a85      	ldr	r2, [pc, #532]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fcee:	4413      	add	r3, r2
 800fcf0:	498d      	ldr	r1, [pc, #564]	; (800ff28 <UpdateSIGNALSNames+0x714>)
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	cb03      	ldmia	r3!, {r0, r1}
 800fcf8:	6010      	str	r0, [r2, #0]
 800fcfa:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800fcfc:	79fb      	ldrb	r3, [r7, #7]
 800fcfe:	1c5a      	adds	r2, r3, #1
 800fd00:	71fa      	strb	r2, [r7, #7]
 800fd02:	461a      	mov	r2, r3
 800fd04:	4613      	mov	r3, r2
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	4413      	add	r3, r2
 800fd0a:	00db      	lsls	r3, r3, #3
 800fd0c:	4a7d      	ldr	r2, [pc, #500]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd0e:	4413      	add	r3, r2
 800fd10:	4986      	ldr	r1, [pc, #536]	; (800ff2c <UpdateSIGNALSNames+0x718>)
 800fd12:	461a      	mov	r2, r3
 800fd14:	460b      	mov	r3, r1
 800fd16:	cb03      	ldmia	r3!, {r0, r1}
 800fd18:	6010      	str	r0, [r2, #0]
 800fd1a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800fd1c:	79fb      	ldrb	r3, [r7, #7]
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	71fa      	strb	r2, [r7, #7]
 800fd22:	461a      	mov	r2, r3
 800fd24:	4613      	mov	r3, r2
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	4413      	add	r3, r2
 800fd2a:	00db      	lsls	r3, r3, #3
 800fd2c:	4a75      	ldr	r2, [pc, #468]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd2e:	4413      	add	r3, r2
 800fd30:	497f      	ldr	r1, [pc, #508]	; (800ff30 <UpdateSIGNALSNames+0x71c>)
 800fd32:	461a      	mov	r2, r3
 800fd34:	460b      	mov	r3, r1
 800fd36:	cb03      	ldmia	r3!, {r0, r1}
 800fd38:	6010      	str	r0, [r2, #0]
 800fd3a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800fd3c:	79fb      	ldrb	r3, [r7, #7]
 800fd3e:	1c5a      	adds	r2, r3, #1
 800fd40:	71fa      	strb	r2, [r7, #7]
 800fd42:	461a      	mov	r2, r3
 800fd44:	4613      	mov	r3, r2
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	4413      	add	r3, r2
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	4a6d      	ldr	r2, [pc, #436]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd4e:	4413      	add	r3, r2
 800fd50:	4978      	ldr	r1, [pc, #480]	; (800ff34 <UpdateSIGNALSNames+0x720>)
 800fd52:	461a      	mov	r2, r3
 800fd54:	460b      	mov	r3, r1
 800fd56:	cb03      	ldmia	r3!, {r0, r1}
 800fd58:	6010      	str	r0, [r2, #0]
 800fd5a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800fd5c:	79fb      	ldrb	r3, [r7, #7]
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	71fa      	strb	r2, [r7, #7]
 800fd62:	461a      	mov	r2, r3
 800fd64:	4613      	mov	r3, r2
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	4413      	add	r3, r2
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	4a65      	ldr	r2, [pc, #404]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd6e:	4413      	add	r3, r2
 800fd70:	4971      	ldr	r1, [pc, #452]	; (800ff38 <UpdateSIGNALSNames+0x724>)
 800fd72:	461a      	mov	r2, r3
 800fd74:	460b      	mov	r3, r1
 800fd76:	cb03      	ldmia	r3!, {r0, r1}
 800fd78:	6010      	str	r0, [r2, #0]
 800fd7a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	71fa      	strb	r2, [r7, #7]
 800fd82:	461a      	mov	r2, r3
 800fd84:	4613      	mov	r3, r2
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	4413      	add	r3, r2
 800fd8a:	00db      	lsls	r3, r3, #3
 800fd8c:	4a5d      	ldr	r2, [pc, #372]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd8e:	4413      	add	r3, r2
 800fd90:	496a      	ldr	r1, [pc, #424]	; (800ff3c <UpdateSIGNALSNames+0x728>)
 800fd92:	461a      	mov	r2, r3
 800fd94:	460b      	mov	r3, r1
 800fd96:	cb03      	ldmia	r3!, {r0, r1}
 800fd98:	6010      	str	r0, [r2, #0]
 800fd9a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	71fa      	strb	r2, [r7, #7]
 800fda2:	461a      	mov	r2, r3
 800fda4:	4613      	mov	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4413      	add	r3, r2
 800fdaa:	00db      	lsls	r3, r3, #3
 800fdac:	4a55      	ldr	r2, [pc, #340]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fdae:	4413      	add	r3, r2
 800fdb0:	4963      	ldr	r1, [pc, #396]	; (800ff40 <UpdateSIGNALSNames+0x72c>)
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	cb03      	ldmia	r3!, {r0, r1}
 800fdb8:	6010      	str	r0, [r2, #0]
 800fdba:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800fdbc:	79fb      	ldrb	r3, [r7, #7]
 800fdbe:	1c5a      	adds	r2, r3, #1
 800fdc0:	71fa      	strb	r2, [r7, #7]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	4413      	add	r3, r2
 800fdca:	00db      	lsls	r3, r3, #3
 800fdcc:	4a4d      	ldr	r2, [pc, #308]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fdce:	4413      	add	r3, r2
 800fdd0:	495c      	ldr	r1, [pc, #368]	; (800ff44 <UpdateSIGNALSNames+0x730>)
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	cb03      	ldmia	r3!, {r0, r1}
 800fdd8:	6010      	str	r0, [r2, #0]
 800fdda:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	1c5a      	adds	r2, r3, #1
 800fde0:	71fa      	strb	r2, [r7, #7]
 800fde2:	461a      	mov	r2, r3
 800fde4:	4613      	mov	r3, r2
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4413      	add	r3, r2
 800fdea:	00db      	lsls	r3, r3, #3
 800fdec:	4a45      	ldr	r2, [pc, #276]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fdee:	4413      	add	r3, r2
 800fdf0:	4a55      	ldr	r2, [pc, #340]	; (800ff48 <UpdateSIGNALSNames+0x734>)
 800fdf2:	461c      	mov	r4, r3
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fdf8:	6020      	str	r0, [r4, #0]
 800fdfa:	6061      	str	r1, [r4, #4]
 800fdfc:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800fdfe:	79fb      	ldrb	r3, [r7, #7]
 800fe00:	1c5a      	adds	r2, r3, #1
 800fe02:	71fa      	strb	r2, [r7, #7]
 800fe04:	461a      	mov	r2, r3
 800fe06:	4613      	mov	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	4413      	add	r3, r2
 800fe0c:	00db      	lsls	r3, r3, #3
 800fe0e:	4a3d      	ldr	r2, [pc, #244]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fe10:	4413      	add	r3, r2
 800fe12:	494e      	ldr	r1, [pc, #312]	; (800ff4c <UpdateSIGNALSNames+0x738>)
 800fe14:	461a      	mov	r2, r3
 800fe16:	460b      	mov	r3, r1
 800fe18:	cb03      	ldmia	r3!, {r0, r1}
 800fe1a:	6010      	str	r0, [r2, #0]
 800fe1c:	6051      	str	r1, [r2, #4]
 800fe1e:	8819      	ldrh	r1, [r3, #0]
 800fe20:	789b      	ldrb	r3, [r3, #2]
 800fe22:	8111      	strh	r1, [r2, #8]
 800fe24:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800fe26:	79fb      	ldrb	r3, [r7, #7]
 800fe28:	1c5a      	adds	r2, r3, #1
 800fe2a:	71fa      	strb	r2, [r7, #7]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	4613      	mov	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	00db      	lsls	r3, r3, #3
 800fe36:	4a33      	ldr	r2, [pc, #204]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fe38:	4413      	add	r3, r2
 800fe3a:	4a45      	ldr	r2, [pc, #276]	; (800ff50 <UpdateSIGNALSNames+0x73c>)
 800fe3c:	461c      	mov	r4, r3
 800fe3e:	4613      	mov	r3, r2
 800fe40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe42:	6020      	str	r0, [r4, #0]
 800fe44:	6061      	str	r1, [r4, #4]
 800fe46:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	1c5a      	adds	r2, r3, #1
 800fe4c:	71fa      	strb	r2, [r7, #7]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	4613      	mov	r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	4413      	add	r3, r2
 800fe56:	00db      	lsls	r3, r3, #3
 800fe58:	4a2a      	ldr	r2, [pc, #168]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fe5a:	4413      	add	r3, r2
 800fe5c:	493d      	ldr	r1, [pc, #244]	; (800ff54 <UpdateSIGNALSNames+0x740>)
 800fe5e:	461a      	mov	r2, r3
 800fe60:	460b      	mov	r3, r1
 800fe62:	cb03      	ldmia	r3!, {r0, r1}
 800fe64:	6010      	str	r0, [r2, #0]
 800fe66:	6051      	str	r1, [r2, #4]
 800fe68:	8819      	ldrh	r1, [r3, #0]
 800fe6a:	789b      	ldrb	r3, [r3, #2]
 800fe6c:	8111      	strh	r1, [r2, #8]
 800fe6e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800fe70:	79fb      	ldrb	r3, [r7, #7]
 800fe72:	1c5a      	adds	r2, r3, #1
 800fe74:	71fa      	strb	r2, [r7, #7]
 800fe76:	461a      	mov	r2, r3
 800fe78:	4613      	mov	r3, r2
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4413      	add	r3, r2
 800fe7e:	00db      	lsls	r3, r3, #3
 800fe80:	4a20      	ldr	r2, [pc, #128]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fe82:	4413      	add	r3, r2
 800fe84:	4934      	ldr	r1, [pc, #208]	; (800ff58 <UpdateSIGNALSNames+0x744>)
 800fe86:	461a      	mov	r2, r3
 800fe88:	460b      	mov	r3, r1
 800fe8a:	cb03      	ldmia	r3!, {r0, r1}
 800fe8c:	6010      	str	r0, [r2, #0]
 800fe8e:	6051      	str	r1, [r2, #4]
 800fe90:	8819      	ldrh	r1, [r3, #0]
 800fe92:	789b      	ldrb	r3, [r3, #2]
 800fe94:	8111      	strh	r1, [r2, #8]
 800fe96:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	1c5a      	adds	r2, r3, #1
 800fe9c:	71fa      	strb	r2, [r7, #7]
 800fe9e:	461a      	mov	r2, r3
 800fea0:	4613      	mov	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4413      	add	r3, r2
 800fea6:	00db      	lsls	r3, r3, #3
 800fea8:	4a16      	ldr	r2, [pc, #88]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800feaa:	4413      	add	r3, r2
 800feac:	4a2b      	ldr	r2, [pc, #172]	; (800ff5c <UpdateSIGNALSNames+0x748>)
 800feae:	461c      	mov	r4, r3
 800feb0:	4613      	mov	r3, r2
 800feb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800feb4:	6020      	str	r0, [r4, #0]
 800feb6:	6061      	str	r1, [r4, #4]
 800feb8:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800feba:	79fb      	ldrb	r3, [r7, #7]
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	71fa      	strb	r2, [r7, #7]
 800fec0:	461a      	mov	r2, r3
 800fec2:	4613      	mov	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	4413      	add	r3, r2
 800fec8:	00db      	lsls	r3, r3, #3
 800feca:	4a0e      	ldr	r2, [pc, #56]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fecc:	4413      	add	r3, r2
 800fece:	4924      	ldr	r1, [pc, #144]	; (800ff60 <UpdateSIGNALSNames+0x74c>)
 800fed0:	461a      	mov	r2, r3
 800fed2:	460b      	mov	r3, r1
 800fed4:	cb03      	ldmia	r3!, {r0, r1}
 800fed6:	6010      	str	r0, [r2, #0]
 800fed8:	6051      	str	r1, [r2, #4]
 800feda:	8819      	ldrh	r1, [r3, #0]
 800fedc:	789b      	ldrb	r3, [r3, #2]
 800fede:	8111      	strh	r1, [r2, #8]
 800fee0:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800fee2:	79fb      	ldrb	r3, [r7, #7]
 800fee4:	1c5a      	adds	r2, r3, #1
 800fee6:	71fa      	strb	r2, [r7, #7]
 800fee8:	461a      	mov	r2, r3
 800feea:	4613      	mov	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4413      	add	r3, r2
 800fef0:	00db      	lsls	r3, r3, #3
 800fef2:	4a04      	ldr	r2, [pc, #16]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fef4:	4413      	add	r3, r2
 800fef6:	4a1b      	ldr	r2, [pc, #108]	; (800ff64 <UpdateSIGNALSNames+0x750>)
 800fef8:	6810      	ldr	r0, [r2, #0]
 800fefa:	6018      	str	r0, [r3, #0]
 800fefc:	e034      	b.n	800ff68 <UpdateSIGNALSNames+0x754>
 800fefe:	bf00      	nop
 800ff00:	0802aebc 	.word	0x0802aebc
 800ff04:	200054b8 	.word	0x200054b8
 800ff08:	0802aec4 	.word	0x0802aec4
 800ff0c:	0802aecc 	.word	0x0802aecc
 800ff10:	0802aed4 	.word	0x0802aed4
 800ff14:	0802aedc 	.word	0x0802aedc
 800ff18:	0802aee4 	.word	0x0802aee4
 800ff1c:	0802aeec 	.word	0x0802aeec
 800ff20:	0802aef4 	.word	0x0802aef4
 800ff24:	0802aefc 	.word	0x0802aefc
 800ff28:	0802af04 	.word	0x0802af04
 800ff2c:	0802af0c 	.word	0x0802af0c
 800ff30:	0802af14 	.word	0x0802af14
 800ff34:	0802af1c 	.word	0x0802af1c
 800ff38:	0802af24 	.word	0x0802af24
 800ff3c:	0802af2c 	.word	0x0802af2c
 800ff40:	0802af34 	.word	0x0802af34
 800ff44:	0802af3c 	.word	0x0802af3c
 800ff48:	0802af44 	.word	0x0802af44
 800ff4c:	0802af50 	.word	0x0802af50
 800ff50:	0802af5c 	.word	0x0802af5c
 800ff54:	0802af68 	.word	0x0802af68
 800ff58:	0802af74 	.word	0x0802af74
 800ff5c:	0802af80 	.word	0x0802af80
 800ff60:	0802af8c 	.word	0x0802af8c
 800ff64:	0802af98 	.word	0x0802af98
 800ff68:	8891      	ldrh	r1, [r2, #4]
 800ff6a:	7992      	ldrb	r2, [r2, #6]
 800ff6c:	8099      	strh	r1, [r3, #4]
 800ff6e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800ff70:	79fb      	ldrb	r3, [r7, #7]
 800ff72:	1c5a      	adds	r2, r3, #1
 800ff74:	71fa      	strb	r2, [r7, #7]
 800ff76:	461a      	mov	r2, r3
 800ff78:	4613      	mov	r3, r2
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	4413      	add	r3, r2
 800ff7e:	00db      	lsls	r3, r3, #3
 800ff80:	4a82      	ldr	r2, [pc, #520]	; (801018c <UpdateSIGNALSNames+0x978>)
 800ff82:	4413      	add	r3, r2
 800ff84:	4a82      	ldr	r2, [pc, #520]	; (8010190 <UpdateSIGNALSNames+0x97c>)
 800ff86:	6810      	ldr	r0, [r2, #0]
 800ff88:	6018      	str	r0, [r3, #0]
 800ff8a:	8891      	ldrh	r1, [r2, #4]
 800ff8c:	7992      	ldrb	r2, [r2, #6]
 800ff8e:	8099      	strh	r1, [r3, #4]
 800ff90:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	1c5a      	adds	r2, r3, #1
 800ff96:	71fa      	strb	r2, [r7, #7]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	4413      	add	r3, r2
 800ffa0:	00db      	lsls	r3, r3, #3
 800ffa2:	4a7a      	ldr	r2, [pc, #488]	; (801018c <UpdateSIGNALSNames+0x978>)
 800ffa4:	4413      	add	r3, r2
 800ffa6:	4a7b      	ldr	r2, [pc, #492]	; (8010194 <UpdateSIGNALSNames+0x980>)
 800ffa8:	6810      	ldr	r0, [r2, #0]
 800ffaa:	6018      	str	r0, [r3, #0]
 800ffac:	8891      	ldrh	r1, [r2, #4]
 800ffae:	7992      	ldrb	r2, [r2, #6]
 800ffb0:	8099      	strh	r1, [r3, #4]
 800ffb2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800ffb4:	79fb      	ldrb	r3, [r7, #7]
 800ffb6:	1c5a      	adds	r2, r3, #1
 800ffb8:	71fa      	strb	r2, [r7, #7]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	4413      	add	r3, r2
 800ffc2:	00db      	lsls	r3, r3, #3
 800ffc4:	4a71      	ldr	r2, [pc, #452]	; (801018c <UpdateSIGNALSNames+0x978>)
 800ffc6:	4413      	add	r3, r2
 800ffc8:	4a73      	ldr	r2, [pc, #460]	; (8010198 <UpdateSIGNALSNames+0x984>)
 800ffca:	6810      	ldr	r0, [r2, #0]
 800ffcc:	6018      	str	r0, [r3, #0]
 800ffce:	8891      	ldrh	r1, [r2, #4]
 800ffd0:	7992      	ldrb	r2, [r2, #6]
 800ffd2:	8099      	strh	r1, [r3, #4]
 800ffd4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	1c5a      	adds	r2, r3, #1
 800ffda:	71fa      	strb	r2, [r7, #7]
 800ffdc:	461a      	mov	r2, r3
 800ffde:	4613      	mov	r3, r2
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	4413      	add	r3, r2
 800ffe4:	00db      	lsls	r3, r3, #3
 800ffe6:	4a69      	ldr	r2, [pc, #420]	; (801018c <UpdateSIGNALSNames+0x978>)
 800ffe8:	4413      	add	r3, r2
 800ffea:	4a6c      	ldr	r2, [pc, #432]	; (801019c <UpdateSIGNALSNames+0x988>)
 800ffec:	6810      	ldr	r0, [r2, #0]
 800ffee:	6018      	str	r0, [r3, #0]
 800fff0:	8891      	ldrh	r1, [r2, #4]
 800fff2:	7992      	ldrb	r2, [r2, #6]
 800fff4:	8099      	strh	r1, [r3, #4]
 800fff6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800fff8:	79fb      	ldrb	r3, [r7, #7]
 800fffa:	1c5a      	adds	r2, r3, #1
 800fffc:	71fa      	strb	r2, [r7, #7]
 800fffe:	461a      	mov	r2, r3
 8010000:	4613      	mov	r3, r2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	4413      	add	r3, r2
 8010006:	00db      	lsls	r3, r3, #3
 8010008:	4a60      	ldr	r2, [pc, #384]	; (801018c <UpdateSIGNALSNames+0x978>)
 801000a:	4413      	add	r3, r2
 801000c:	4a64      	ldr	r2, [pc, #400]	; (80101a0 <UpdateSIGNALSNames+0x98c>)
 801000e:	6810      	ldr	r0, [r2, #0]
 8010010:	6018      	str	r0, [r3, #0]
 8010012:	8891      	ldrh	r1, [r2, #4]
 8010014:	7992      	ldrb	r2, [r2, #6]
 8010016:	8099      	strh	r1, [r3, #4]
 8010018:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 801001a:	79fb      	ldrb	r3, [r7, #7]
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	71fa      	strb	r2, [r7, #7]
 8010020:	461a      	mov	r2, r3
 8010022:	4613      	mov	r3, r2
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	4413      	add	r3, r2
 8010028:	00db      	lsls	r3, r3, #3
 801002a:	4a58      	ldr	r2, [pc, #352]	; (801018c <UpdateSIGNALSNames+0x978>)
 801002c:	4413      	add	r3, r2
 801002e:	4a5d      	ldr	r2, [pc, #372]	; (80101a4 <UpdateSIGNALSNames+0x990>)
 8010030:	6810      	ldr	r0, [r2, #0]
 8010032:	6018      	str	r0, [r3, #0]
 8010034:	8891      	ldrh	r1, [r2, #4]
 8010036:	7992      	ldrb	r2, [r2, #6]
 8010038:	8099      	strh	r1, [r3, #4]
 801003a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 801003c:	79fb      	ldrb	r3, [r7, #7]
 801003e:	1c5a      	adds	r2, r3, #1
 8010040:	71fa      	strb	r2, [r7, #7]
 8010042:	461a      	mov	r2, r3
 8010044:	4613      	mov	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	00db      	lsls	r3, r3, #3
 801004c:	4a4f      	ldr	r2, [pc, #316]	; (801018c <UpdateSIGNALSNames+0x978>)
 801004e:	4413      	add	r3, r2
 8010050:	4a55      	ldr	r2, [pc, #340]	; (80101a8 <UpdateSIGNALSNames+0x994>)
 8010052:	6810      	ldr	r0, [r2, #0]
 8010054:	6018      	str	r0, [r3, #0]
 8010056:	8891      	ldrh	r1, [r2, #4]
 8010058:	7992      	ldrb	r2, [r2, #6]
 801005a:	8099      	strh	r1, [r3, #4]
 801005c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 801005e:	79fb      	ldrb	r3, [r7, #7]
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	71fa      	strb	r2, [r7, #7]
 8010064:	461a      	mov	r2, r3
 8010066:	4613      	mov	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	4413      	add	r3, r2
 801006c:	00db      	lsls	r3, r3, #3
 801006e:	4a47      	ldr	r2, [pc, #284]	; (801018c <UpdateSIGNALSNames+0x978>)
 8010070:	4413      	add	r3, r2
 8010072:	4a4e      	ldr	r2, [pc, #312]	; (80101ac <UpdateSIGNALSNames+0x998>)
 8010074:	6810      	ldr	r0, [r2, #0]
 8010076:	6018      	str	r0, [r3, #0]
 8010078:	8891      	ldrh	r1, [r2, #4]
 801007a:	7992      	ldrb	r2, [r2, #6]
 801007c:	8099      	strh	r1, [r3, #4]
 801007e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 8010080:	79fb      	ldrb	r3, [r7, #7]
 8010082:	1c5a      	adds	r2, r3, #1
 8010084:	71fa      	strb	r2, [r7, #7]
 8010086:	461a      	mov	r2, r3
 8010088:	4613      	mov	r3, r2
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4413      	add	r3, r2
 801008e:	00db      	lsls	r3, r3, #3
 8010090:	4a3e      	ldr	r2, [pc, #248]	; (801018c <UpdateSIGNALSNames+0x978>)
 8010092:	4413      	add	r3, r2
 8010094:	4a46      	ldr	r2, [pc, #280]	; (80101b0 <UpdateSIGNALSNames+0x99c>)
 8010096:	6810      	ldr	r0, [r2, #0]
 8010098:	6018      	str	r0, [r3, #0]
 801009a:	8891      	ldrh	r1, [r2, #4]
 801009c:	7992      	ldrb	r2, [r2, #6]
 801009e:	8099      	strh	r1, [r3, #4]
 80100a0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 80100a2:	79fb      	ldrb	r3, [r7, #7]
 80100a4:	1c5a      	adds	r2, r3, #1
 80100a6:	71fa      	strb	r2, [r7, #7]
 80100a8:	461a      	mov	r2, r3
 80100aa:	4613      	mov	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4413      	add	r3, r2
 80100b0:	00db      	lsls	r3, r3, #3
 80100b2:	4a36      	ldr	r2, [pc, #216]	; (801018c <UpdateSIGNALSNames+0x978>)
 80100b4:	4413      	add	r3, r2
 80100b6:	4a3f      	ldr	r2, [pc, #252]	; (80101b4 <UpdateSIGNALSNames+0x9a0>)
 80100b8:	6810      	ldr	r0, [r2, #0]
 80100ba:	6018      	str	r0, [r3, #0]
 80100bc:	8891      	ldrh	r1, [r2, #4]
 80100be:	7992      	ldrb	r2, [r2, #6]
 80100c0:	8099      	strh	r1, [r3, #4]
 80100c2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 80100c4:	79fb      	ldrb	r3, [r7, #7]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	71fa      	strb	r2, [r7, #7]
 80100ca:	461a      	mov	r2, r3
 80100cc:	4613      	mov	r3, r2
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	4413      	add	r3, r2
 80100d2:	00db      	lsls	r3, r3, #3
 80100d4:	4a2d      	ldr	r2, [pc, #180]	; (801018c <UpdateSIGNALSNames+0x978>)
 80100d6:	4413      	add	r3, r2
 80100d8:	4a37      	ldr	r2, [pc, #220]	; (80101b8 <UpdateSIGNALSNames+0x9a4>)
 80100da:	6810      	ldr	r0, [r2, #0]
 80100dc:	6018      	str	r0, [r3, #0]
 80100de:	8891      	ldrh	r1, [r2, #4]
 80100e0:	7992      	ldrb	r2, [r2, #6]
 80100e2:	8099      	strh	r1, [r3, #4]
 80100e4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 80100e6:	79fb      	ldrb	r3, [r7, #7]
 80100e8:	1c5a      	adds	r2, r3, #1
 80100ea:	71fa      	strb	r2, [r7, #7]
 80100ec:	461a      	mov	r2, r3
 80100ee:	4613      	mov	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	4413      	add	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	4a25      	ldr	r2, [pc, #148]	; (801018c <UpdateSIGNALSNames+0x978>)
 80100f8:	4413      	add	r3, r2
 80100fa:	4930      	ldr	r1, [pc, #192]	; (80101bc <UpdateSIGNALSNames+0x9a8>)
 80100fc:	461a      	mov	r2, r3
 80100fe:	460b      	mov	r3, r1
 8010100:	cb03      	ldmia	r3!, {r0, r1}
 8010102:	6010      	str	r0, [r2, #0]
 8010104:	6051      	str	r1, [r2, #4]
 8010106:	881b      	ldrh	r3, [r3, #0]
 8010108:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 801010a:	79fb      	ldrb	r3, [r7, #7]
 801010c:	1c5a      	adds	r2, r3, #1
 801010e:	71fa      	strb	r2, [r7, #7]
 8010110:	461a      	mov	r2, r3
 8010112:	4613      	mov	r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4413      	add	r3, r2
 8010118:	00db      	lsls	r3, r3, #3
 801011a:	4a1c      	ldr	r2, [pc, #112]	; (801018c <UpdateSIGNALSNames+0x978>)
 801011c:	4413      	add	r3, r2
 801011e:	4a28      	ldr	r2, [pc, #160]	; (80101c0 <UpdateSIGNALSNames+0x9ac>)
 8010120:	6810      	ldr	r0, [r2, #0]
 8010122:	6018      	str	r0, [r3, #0]
 8010124:	8891      	ldrh	r1, [r2, #4]
 8010126:	7992      	ldrb	r2, [r2, #6]
 8010128:	8099      	strh	r1, [r3, #4]
 801012a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 801012c:	79fb      	ldrb	r3, [r7, #7]
 801012e:	1c5a      	adds	r2, r3, #1
 8010130:	71fa      	strb	r2, [r7, #7]
 8010132:	461a      	mov	r2, r3
 8010134:	4613      	mov	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	4413      	add	r3, r2
 801013a:	00db      	lsls	r3, r3, #3
 801013c:	4a13      	ldr	r2, [pc, #76]	; (801018c <UpdateSIGNALSNames+0x978>)
 801013e:	4413      	add	r3, r2
 8010140:	4a20      	ldr	r2, [pc, #128]	; (80101c4 <UpdateSIGNALSNames+0x9b0>)
 8010142:	461c      	mov	r4, r3
 8010144:	4613      	mov	r3, r2
 8010146:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010148:	6020      	str	r0, [r4, #0]
 801014a:	6061      	str	r1, [r4, #4]
 801014c:	60a2      	str	r2, [r4, #8]
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 8010152:	79fb      	ldrb	r3, [r7, #7]
 8010154:	1c5a      	adds	r2, r3, #1
 8010156:	71fa      	strb	r2, [r7, #7]
 8010158:	461a      	mov	r2, r3
 801015a:	4613      	mov	r3, r2
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	4413      	add	r3, r2
 8010160:	00db      	lsls	r3, r3, #3
 8010162:	4a0a      	ldr	r2, [pc, #40]	; (801018c <UpdateSIGNALSNames+0x978>)
 8010164:	4413      	add	r3, r2
 8010166:	4a18      	ldr	r2, [pc, #96]	; (80101c8 <UpdateSIGNALSNames+0x9b4>)
 8010168:	461c      	mov	r4, r3
 801016a:	4613      	mov	r3, r2
 801016c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801016e:	6020      	str	r0, [r4, #0]
 8010170:	6061      	str	r1, [r4, #4]
 8010172:	60a2      	str	r2, [r4, #8]
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	b29a      	uxth	r2, r3
 801017c:	4b13      	ldr	r3, [pc, #76]	; (80101cc <UpdateSIGNALSNames+0x9b8>)
 801017e:	801a      	strh	r2, [r3, #0]


}
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bc90      	pop	{r4, r7}
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	200054b8 	.word	0x200054b8
 8010190:	0802afa0 	.word	0x0802afa0
 8010194:	0802afa8 	.word	0x0802afa8
 8010198:	0802afb0 	.word	0x0802afb0
 801019c:	0802afb8 	.word	0x0802afb8
 80101a0:	0802afc0 	.word	0x0802afc0
 80101a4:	0802afc8 	.word	0x0802afc8
 80101a8:	0802afd0 	.word	0x0802afd0
 80101ac:	0802afd8 	.word	0x0802afd8
 80101b0:	0802afe0 	.word	0x0802afe0
 80101b4:	0802afe8 	.word	0x0802afe8
 80101b8:	0802aff0 	.word	0x0802aff0
 80101bc:	0802aff8 	.word	0x0802aff8
 80101c0:	0802b004 	.word	0x0802b004
 80101c4:	0802b00c 	.word	0x0802b00c
 80101c8:	0802b01c 	.word	0x0802b01c
 80101cc:	20005fa8 	.word	0x20005fa8

080101d0 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 80101d0:	b5b0      	push	{r4, r5, r7, lr}
 80101d2:	b086      	sub	sp, #24
 80101d4:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 80101d6:	4974      	ldr	r1, [pc, #464]	; (80103a8 <print_self_DetailsSiemens+0x1d8>)
 80101d8:	4874      	ldr	r0, [pc, #464]	; (80103ac <print_self_DetailsSiemens+0x1dc>)
 80101da:	f016 fc33 	bl	8026a44 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 80101de:	4b74      	ldr	r3, [pc, #464]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80101e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80101e4:	4619      	mov	r1, r3
 80101e6:	4873      	ldr	r0, [pc, #460]	; (80103b4 <print_self_DetailsSiemens+0x1e4>)
 80101e8:	f016 fc2c 	bl	8026a44 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 80101ec:	4b70      	ldr	r3, [pc, #448]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80101ee:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 80101f2:	4619      	mov	r1, r3
 80101f4:	4b6e      	ldr	r3, [pc, #440]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80101f6:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 80101fa:	461a      	mov	r2, r3
 80101fc:	4b6c      	ldr	r3, [pc, #432]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80101fe:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 8010202:	4618      	mov	r0, r3
 8010204:	4b6a      	ldr	r3, [pc, #424]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010206:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	4603      	mov	r3, r0
 801020e:	486a      	ldr	r0, [pc, #424]	; (80103b8 <print_self_DetailsSiemens+0x1e8>)
 8010210:	f016 fc18 	bl	8026a44 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 8010214:	4b66      	ldr	r3, [pc, #408]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010216:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 801021a:	4618      	mov	r0, r3
 801021c:	4b64      	ldr	r3, [pc, #400]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801021e:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 8010222:	461c      	mov	r4, r3
 8010224:	4b62      	ldr	r3, [pc, #392]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010226:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 801022a:	461d      	mov	r5, r3
 801022c:	4b60      	ldr	r3, [pc, #384]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801022e:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 8010232:	461a      	mov	r2, r3
 8010234:	4b5e      	ldr	r3, [pc, #376]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010236:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 801023a:	4619      	mov	r1, r3
 801023c:	4b5c      	ldr	r3, [pc, #368]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801023e:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 8010242:	9302      	str	r3, [sp, #8]
 8010244:	9101      	str	r1, [sp, #4]
 8010246:	9200      	str	r2, [sp, #0]
 8010248:	462b      	mov	r3, r5
 801024a:	4622      	mov	r2, r4
 801024c:	4601      	mov	r1, r0
 801024e:	485b      	ldr	r0, [pc, #364]	; (80103bc <print_self_DetailsSiemens+0x1ec>)
 8010250:	f016 fbf8 	bl	8026a44 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 8010254:	4b56      	ldr	r3, [pc, #344]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010256:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 801025a:	4619      	mov	r1, r3
 801025c:	4858      	ldr	r0, [pc, #352]	; (80103c0 <print_self_DetailsSiemens+0x1f0>)
 801025e:	f016 fbf1 	bl	8026a44 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 8010262:	2300      	movs	r3, #0
 8010264:	71fb      	strb	r3, [r7, #7]
 8010266:	e037      	b.n	80102d8 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 8010268:	79fb      	ldrb	r3, [r7, #7]
 801026a:	1c59      	adds	r1, r3, #1
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	4a50      	ldr	r2, [pc, #320]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010270:	33ae      	adds	r3, #174	; 0xae
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	4413      	add	r3, r2
 8010276:	785b      	ldrb	r3, [r3, #1]
 8010278:	461c      	mov	r4, r3
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	4a4c      	ldr	r2, [pc, #304]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	4413      	add	r3, r2
 8010282:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010286:	461d      	mov	r5, r3
 8010288:	79fb      	ldrb	r3, [r7, #7]
 801028a:	4a49      	ldr	r2, [pc, #292]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4413      	add	r3, r2
 8010290:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010294:	4618      	mov	r0, r3
 8010296:	79fb      	ldrb	r3, [r7, #7]
 8010298:	4a45      	ldr	r2, [pc, #276]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801029a:	009b      	lsls	r3, r3, #2
 801029c:	4413      	add	r3, r2
 801029e:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	9000      	str	r0, [sp, #0]
 80102a6:	462b      	mov	r3, r5
 80102a8:	4622      	mov	r2, r4
 80102aa:	4846      	ldr	r0, [pc, #280]	; (80103c4 <print_self_DetailsSiemens+0x1f4>)
 80102ac:	f016 fbca 	bl	8026a44 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 80102b0:	79fb      	ldrb	r3, [r7, #7]
 80102b2:	4a3f      	ldr	r2, [pc, #252]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102b4:	33b6      	adds	r3, #182	; 0xb6
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	4413      	add	r3, r2
 80102ba:	88db      	ldrh	r3, [r3, #6]
 80102bc:	4619      	mov	r1, r3
 80102be:	79fb      	ldrb	r3, [r7, #7]
 80102c0:	4a3b      	ldr	r2, [pc, #236]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 80102ca:	461a      	mov	r2, r3
 80102cc:	483e      	ldr	r0, [pc, #248]	; (80103c8 <print_self_DetailsSiemens+0x1f8>)
 80102ce:	f016 fbb9 	bl	8026a44 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	3301      	adds	r3, #1
 80102d6:	71fb      	strb	r3, [r7, #7]
 80102d8:	4b35      	ldr	r3, [pc, #212]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80102de:	79fa      	ldrb	r2, [r7, #7]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d3c1      	bcc.n	8010268 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 80102e4:	4b32      	ldr	r3, [pc, #200]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102e6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80102ea:	4619      	mov	r1, r3
 80102ec:	4837      	ldr	r0, [pc, #220]	; (80103cc <print_self_DetailsSiemens+0x1fc>)
 80102ee:	f016 fba9 	bl	8026a44 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 80102f2:	4b2f      	ldr	r3, [pc, #188]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102f4:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 80102f8:	4619      	mov	r1, r3
 80102fa:	4835      	ldr	r0, [pc, #212]	; (80103d0 <print_self_DetailsSiemens+0x200>)
 80102fc:	f016 fba2 	bl	8026a44 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 8010300:	4b2b      	ldr	r3, [pc, #172]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010302:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010306:	4619      	mov	r1, r3
 8010308:	4832      	ldr	r0, [pc, #200]	; (80103d4 <print_self_DetailsSiemens+0x204>)
 801030a:	f016 fb9b 	bl	8026a44 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 801030e:	4b28      	ldr	r3, [pc, #160]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010310:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8010314:	4619      	mov	r1, r3
 8010316:	482f      	ldr	r0, [pc, #188]	; (80103d4 <print_self_DetailsSiemens+0x204>)
 8010318:	f016 fb94 	bl	8026a44 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 801031c:	4b24      	ldr	r3, [pc, #144]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801031e:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 8010322:	4619      	mov	r1, r3
 8010324:	482c      	ldr	r0, [pc, #176]	; (80103d8 <print_self_DetailsSiemens+0x208>)
 8010326:	f016 fb8d 	bl	8026a44 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 801032a:	4b21      	ldr	r3, [pc, #132]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801032c:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 8010330:	4619      	mov	r1, r3
 8010332:	482a      	ldr	r0, [pc, #168]	; (80103dc <print_self_DetailsSiemens+0x20c>)
 8010334:	f016 fb86 	bl	8026a44 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 8010338:	4b1d      	ldr	r3, [pc, #116]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801033a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 801033e:	4619      	mov	r1, r3
 8010340:	4827      	ldr	r0, [pc, #156]	; (80103e0 <print_self_DetailsSiemens+0x210>)
 8010342:	f016 fb7f 	bl	8026a44 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 8010346:	4b1a      	ldr	r3, [pc, #104]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010348:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 801034c:	4619      	mov	r1, r3
 801034e:	4825      	ldr	r0, [pc, #148]	; (80103e4 <print_self_DetailsSiemens+0x214>)
 8010350:	f016 fb78 	bl	8026a44 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 8010354:	4b16      	ldr	r3, [pc, #88]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010356:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 801035a:	4619      	mov	r1, r3
 801035c:	4822      	ldr	r0, [pc, #136]	; (80103e8 <print_self_DetailsSiemens+0x218>)
 801035e:	f016 fb71 	bl	8026a44 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 8010362:	4b13      	ldr	r3, [pc, #76]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010364:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8010368:	4619      	mov	r1, r3
 801036a:	4820      	ldr	r0, [pc, #128]	; (80103ec <print_self_DetailsSiemens+0x21c>)
 801036c:	f016 fb6a 	bl	8026a44 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 8010370:	4b0f      	ldr	r3, [pc, #60]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010372:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 8010376:	4619      	mov	r1, r3
 8010378:	481d      	ldr	r0, [pc, #116]	; (80103f0 <print_self_DetailsSiemens+0x220>)
 801037a:	f016 fb63 	bl	8026a44 <iprintf>
	if(EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount == 0)
 801037e:	4b0c      	ldr	r3, [pc, #48]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010380:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8010384:	2b00      	cmp	r3, #0
 8010386:	d103      	bne.n	8010390 <print_self_DetailsSiemens+0x1c0>
	{
		EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount = 50;
 8010388:	4b09      	ldr	r3, [pc, #36]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801038a:	2232      	movs	r2, #50	; 0x32
 801038c:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	}
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 8010390:	4b07      	ldr	r3, [pc, #28]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010392:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8010396:	4619      	mov	r1, r3
 8010398:	4816      	ldr	r0, [pc, #88]	; (80103f4 <print_self_DetailsSiemens+0x224>)
 801039a:	f016 fb53 	bl	8026a44 <iprintf>

}
 801039e:	bf00      	nop
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bdb0      	pop	{r4, r5, r7, pc}
 80103a6:	bf00      	nop
 80103a8:	20000505 	.word	0x20000505
 80103ac:	0802b02c 	.word	0x0802b02c
 80103b0:	20000504 	.word	0x20000504
 80103b4:	0802b040 	.word	0x0802b040
 80103b8:	0802b050 	.word	0x0802b050
 80103bc:	0802b068 	.word	0x0802b068
 80103c0:	0802b090 	.word	0x0802b090
 80103c4:	0802b0a8 	.word	0x0802b0a8
 80103c8:	0802b0bc 	.word	0x0802b0bc
 80103cc:	0802b0d4 	.word	0x0802b0d4
 80103d0:	0802b0e4 	.word	0x0802b0e4
 80103d4:	0802b0f8 	.word	0x0802b0f8
 80103d8:	0802b10c 	.word	0x0802b10c
 80103dc:	0802b11c 	.word	0x0802b11c
 80103e0:	0802b12c 	.word	0x0802b12c
 80103e4:	0802b140 	.word	0x0802b140
 80103e8:	0802b158 	.word	0x0802b158
 80103ec:	0802b170 	.word	0x0802b170
 80103f0:	0802b18c 	.word	0x0802b18c
 80103f4:	0802b1a8 	.word	0x0802b1a8

080103f8 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 8010400:	f009 fb16 	bl	8019a30 <HAL_GetTick>
 8010404:	4602      	mov	r2, r0
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	1ad3      	subs	r3, r2, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	bfb8      	it	lt
 801040e:	425b      	neglt	r3, r3
}
 8010410:	4618      	mov	r0, r3
 8010412:	3708      	adds	r7, #8
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 801041e:	23f3      	movs	r3, #243	; 0xf3
 8010420:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 8010422:	f013 fe19 	bl	8024058 <udp_new>
 8010426:	4603      	mov	r3, r0
 8010428:	4a7a      	ldr	r2, [pc, #488]	; (8010614 <udpServer_init+0x1fc>)
 801042a:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 801042c:	4b7a      	ldr	r3, [pc, #488]	; (8010618 <udpServer_init+0x200>)
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	2b01      	cmp	r3, #1
 8010432:	d002      	beq.n	801043a <udpServer_init+0x22>
 8010434:	2b02      	cmp	r3, #2
 8010436:	d074      	beq.n	8010522 <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 8010438:	e0e9      	b.n	801060e <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 801043a:	4b77      	ldr	r3, [pc, #476]	; (8010618 <udpServer_init+0x200>)
 801043c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010440:	061a      	lsls	r2, r3, #24
 8010442:	4b75      	ldr	r3, [pc, #468]	; (8010618 <udpServer_init+0x200>)
 8010444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010448:	041b      	lsls	r3, r3, #16
 801044a:	431a      	orrs	r2, r3
 801044c:	4b72      	ldr	r3, [pc, #456]	; (8010618 <udpServer_init+0x200>)
 801044e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010452:	021b      	lsls	r3, r3, #8
 8010454:	4313      	orrs	r3, r2
 8010456:	4a70      	ldr	r2, [pc, #448]	; (8010618 <udpServer_init+0x200>)
 8010458:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 801045c:	4313      	orrs	r3, r2
 801045e:	061a      	lsls	r2, r3, #24
 8010460:	4b6d      	ldr	r3, [pc, #436]	; (8010618 <udpServer_init+0x200>)
 8010462:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010466:	0619      	lsls	r1, r3, #24
 8010468:	4b6b      	ldr	r3, [pc, #428]	; (8010618 <udpServer_init+0x200>)
 801046a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801046e:	041b      	lsls	r3, r3, #16
 8010470:	4319      	orrs	r1, r3
 8010472:	4b69      	ldr	r3, [pc, #420]	; (8010618 <udpServer_init+0x200>)
 8010474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010478:	021b      	lsls	r3, r3, #8
 801047a:	430b      	orrs	r3, r1
 801047c:	4966      	ldr	r1, [pc, #408]	; (8010618 <udpServer_init+0x200>)
 801047e:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 8010482:	430b      	orrs	r3, r1
 8010484:	021b      	lsls	r3, r3, #8
 8010486:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801048a:	431a      	orrs	r2, r3
 801048c:	4b62      	ldr	r3, [pc, #392]	; (8010618 <udpServer_init+0x200>)
 801048e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010492:	0619      	lsls	r1, r3, #24
 8010494:	4b60      	ldr	r3, [pc, #384]	; (8010618 <udpServer_init+0x200>)
 8010496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801049a:	041b      	lsls	r3, r3, #16
 801049c:	4319      	orrs	r1, r3
 801049e:	4b5e      	ldr	r3, [pc, #376]	; (8010618 <udpServer_init+0x200>)
 80104a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80104a4:	021b      	lsls	r3, r3, #8
 80104a6:	430b      	orrs	r3, r1
 80104a8:	495b      	ldr	r1, [pc, #364]	; (8010618 <udpServer_init+0x200>)
 80104aa:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 80104ae:	430b      	orrs	r3, r1
 80104b0:	0a1b      	lsrs	r3, r3, #8
 80104b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80104b6:	431a      	orrs	r2, r3
 80104b8:	4b57      	ldr	r3, [pc, #348]	; (8010618 <udpServer_init+0x200>)
 80104ba:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80104be:	0619      	lsls	r1, r3, #24
 80104c0:	4b55      	ldr	r3, [pc, #340]	; (8010618 <udpServer_init+0x200>)
 80104c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80104c6:	041b      	lsls	r3, r3, #16
 80104c8:	4319      	orrs	r1, r3
 80104ca:	4b53      	ldr	r3, [pc, #332]	; (8010618 <udpServer_init+0x200>)
 80104cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80104d0:	021b      	lsls	r3, r3, #8
 80104d2:	430b      	orrs	r3, r1
 80104d4:	4950      	ldr	r1, [pc, #320]	; (8010618 <udpServer_init+0x200>)
 80104d6:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 80104da:	430b      	orrs	r3, r1
 80104dc:	0e1b      	lsrs	r3, r3, #24
 80104de:	4313      	orrs	r3, r2
 80104e0:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 80104e2:	4b4c      	ldr	r3, [pc, #304]	; (8010614 <udpServer_init+0x1fc>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4a4c      	ldr	r2, [pc, #304]	; (8010618 <udpServer_init+0x200>)
 80104e8:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 80104ec:	4639      	mov	r1, r7
 80104ee:	4618      	mov	r0, r3
 80104f0:	f013 fcc8 	bl	8023e84 <udp_bind>
 80104f4:	4603      	mov	r3, r0
 80104f6:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 80104f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d107      	bne.n	8010510 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 8010500:	4b44      	ldr	r3, [pc, #272]	; (8010614 <udpServer_init+0x1fc>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2200      	movs	r2, #0
 8010506:	4945      	ldr	r1, [pc, #276]	; (801061c <udpServer_init+0x204>)
 8010508:	4618      	mov	r0, r3
 801050a:	f013 fd43 	bl	8023f94 <udp_recv>
		break;
 801050e:	e07c      	b.n	801060a <udpServer_init+0x1f2>
			printf("N-OK\n");
 8010510:	4843      	ldr	r0, [pc, #268]	; (8010620 <udpServer_init+0x208>)
 8010512:	f016 fb33 	bl	8026b7c <puts>
			udp_remove(upcb);
 8010516:	4b3f      	ldr	r3, [pc, #252]	; (8010614 <udpServer_init+0x1fc>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4618      	mov	r0, r3
 801051c:	f013 fd5a 	bl	8023fd4 <udp_remove>
		break;
 8010520:	e073      	b.n	801060a <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 8010522:	4b3d      	ldr	r3, [pc, #244]	; (8010618 <udpServer_init+0x200>)
 8010524:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 8010528:	061a      	lsls	r2, r3, #24
 801052a:	4b3b      	ldr	r3, [pc, #236]	; (8010618 <udpServer_init+0x200>)
 801052c:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 8010530:	041b      	lsls	r3, r3, #16
 8010532:	431a      	orrs	r2, r3
 8010534:	4b38      	ldr	r3, [pc, #224]	; (8010618 <udpServer_init+0x200>)
 8010536:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 801053a:	021b      	lsls	r3, r3, #8
 801053c:	4313      	orrs	r3, r2
 801053e:	4a36      	ldr	r2, [pc, #216]	; (8010618 <udpServer_init+0x200>)
 8010540:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 8010544:	4313      	orrs	r3, r2
 8010546:	061a      	lsls	r2, r3, #24
 8010548:	4b33      	ldr	r3, [pc, #204]	; (8010618 <udpServer_init+0x200>)
 801054a:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 801054e:	0619      	lsls	r1, r3, #24
 8010550:	4b31      	ldr	r3, [pc, #196]	; (8010618 <udpServer_init+0x200>)
 8010552:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 8010556:	041b      	lsls	r3, r3, #16
 8010558:	4319      	orrs	r1, r3
 801055a:	4b2f      	ldr	r3, [pc, #188]	; (8010618 <udpServer_init+0x200>)
 801055c:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 8010560:	021b      	lsls	r3, r3, #8
 8010562:	430b      	orrs	r3, r1
 8010564:	492c      	ldr	r1, [pc, #176]	; (8010618 <udpServer_init+0x200>)
 8010566:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 801056a:	430b      	orrs	r3, r1
 801056c:	021b      	lsls	r3, r3, #8
 801056e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010572:	431a      	orrs	r2, r3
 8010574:	4b28      	ldr	r3, [pc, #160]	; (8010618 <udpServer_init+0x200>)
 8010576:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 801057a:	0619      	lsls	r1, r3, #24
 801057c:	4b26      	ldr	r3, [pc, #152]	; (8010618 <udpServer_init+0x200>)
 801057e:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 8010582:	041b      	lsls	r3, r3, #16
 8010584:	4319      	orrs	r1, r3
 8010586:	4b24      	ldr	r3, [pc, #144]	; (8010618 <udpServer_init+0x200>)
 8010588:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 801058c:	021b      	lsls	r3, r3, #8
 801058e:	430b      	orrs	r3, r1
 8010590:	4921      	ldr	r1, [pc, #132]	; (8010618 <udpServer_init+0x200>)
 8010592:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 8010596:	430b      	orrs	r3, r1
 8010598:	0a1b      	lsrs	r3, r3, #8
 801059a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801059e:	431a      	orrs	r2, r3
 80105a0:	4b1d      	ldr	r3, [pc, #116]	; (8010618 <udpServer_init+0x200>)
 80105a2:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 80105a6:	0619      	lsls	r1, r3, #24
 80105a8:	4b1b      	ldr	r3, [pc, #108]	; (8010618 <udpServer_init+0x200>)
 80105aa:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 80105ae:	041b      	lsls	r3, r3, #16
 80105b0:	4319      	orrs	r1, r3
 80105b2:	4b19      	ldr	r3, [pc, #100]	; (8010618 <udpServer_init+0x200>)
 80105b4:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 80105b8:	021b      	lsls	r3, r3, #8
 80105ba:	430b      	orrs	r3, r1
 80105bc:	4916      	ldr	r1, [pc, #88]	; (8010618 <udpServer_init+0x200>)
 80105be:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 80105c2:	430b      	orrs	r3, r1
 80105c4:	0e1b      	lsrs	r3, r3, #24
 80105c6:	4313      	orrs	r3, r2
 80105c8:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 80105ca:	4b12      	ldr	r3, [pc, #72]	; (8010614 <udpServer_init+0x1fc>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	4a12      	ldr	r2, [pc, #72]	; (8010618 <udpServer_init+0x200>)
 80105d0:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 80105d4:	4639      	mov	r1, r7
 80105d6:	4618      	mov	r0, r3
 80105d8:	f013 fc54 	bl	8023e84 <udp_bind>
 80105dc:	4603      	mov	r3, r0
 80105de:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 80105e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d107      	bne.n	80105f8 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 80105e8:	4b0a      	ldr	r3, [pc, #40]	; (8010614 <udpServer_init+0x1fc>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2200      	movs	r2, #0
 80105ee:	490b      	ldr	r1, [pc, #44]	; (801061c <udpServer_init+0x204>)
 80105f0:	4618      	mov	r0, r3
 80105f2:	f013 fccf 	bl	8023f94 <udp_recv>
		break;
 80105f6:	e007      	b.n	8010608 <udpServer_init+0x1f0>
			printf("N-OK\n");
 80105f8:	4809      	ldr	r0, [pc, #36]	; (8010620 <udpServer_init+0x208>)
 80105fa:	f016 fabf 	bl	8026b7c <puts>
			udp_remove(upcb);
 80105fe:	4b05      	ldr	r3, [pc, #20]	; (8010614 <udpServer_init+0x1fc>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4618      	mov	r0, r3
 8010604:	f013 fce6 	bl	8023fd4 <udp_remove>
		break;
 8010608:	bf00      	nop
	}

	udpClient_connect();
 801060a:	f000 f90d 	bl	8010828 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 801060e:	3708      	adds	r7, #8
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	20006a28 	.word	0x20006a28
 8010618:	20000504 	.word	0x20000504
 801061c:	08010625 	.word	0x08010625
 8010620:	0802b1c8 	.word	0x0802b1c8

08010624 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 8010632:	2300      	movs	r3, #0
 8010634:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 8010636:	2300      	movs	r3, #0
 8010638:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 801063e:	4a70      	ldr	r2, [pc, #448]	; (8010800 <UDP_Receive_Callback+0x1dc>)
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	6013      	str	r3, [r2, #0]
	Length = p->len;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	895b      	ldrh	r3, [r3, #10]
 801064a:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 801064c:	4b6d      	ldr	r3, [pc, #436]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	2b01      	cmp	r3, #1
 8010652:	d02e      	beq.n	80106b2 <UDP_Receive_Callback+0x8e>
 8010654:	2b02      	cmp	r3, #2
 8010656:	d045      	beq.n	80106e4 <UDP_Receive_Callback+0xc0>
 8010658:	e069      	b.n	801072e <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 801065a:	4b69      	ldr	r3, [pc, #420]	; (8010800 <UDP_Receive_Callback+0x1dc>)
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	7dfb      	ldrb	r3, [r7, #23]
 8010660:	4969      	ldr	r1, [pc, #420]	; (8010808 <UDP_Receive_Callback+0x1e4>)
 8010662:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010666:	429a      	cmp	r2, r3
 8010668:	d120      	bne.n	80106ac <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 801066a:	7dbb      	ldrb	r3, [r7, #22]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d109      	bne.n	8010684 <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 8010670:	6838      	ldr	r0, [r7, #0]
 8010672:	f015 f8ef 	bl	8025854 <ip4addr_ntoa>
 8010676:	4603      	mov	r3, r0
 8010678:	4619      	mov	r1, r3
 801067a:	4864      	ldr	r0, [pc, #400]	; (801080c <UDP_Receive_Callback+0x1e8>)
 801067c:	f016 f9e2 	bl	8026a44 <iprintf>
					IpMatched = 1;
 8010680:	2301      	movs	r3, #1
 8010682:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 8010684:	7dfb      	ldrb	r3, [r7, #23]
 8010686:	085b      	lsrs	r3, r3, #1
 8010688:	b2db      	uxtb	r3, r3
 801068a:	4619      	mov	r1, r3
 801068c:	4a60      	ldr	r2, [pc, #384]	; (8010810 <UDP_Receive_Callback+0x1ec>)
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 8010696:	7dfb      	ldrb	r3, [r7, #23]
 8010698:	f003 0301 	and.w	r3, r3, #1
 801069c:	b2db      	uxtb	r3, r3
 801069e:	7dfa      	ldrb	r2, [r7, #23]
 80106a0:	0852      	lsrs	r2, r2, #1
 80106a2:	b2d2      	uxtb	r2, r2
 80106a4:	3301      	adds	r3, #1
 80106a6:	b2d9      	uxtb	r1, r3
 80106a8:	4b5a      	ldr	r3, [pc, #360]	; (8010814 <UDP_Receive_Callback+0x1f0>)
 80106aa:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80106ac:	7dfb      	ldrb	r3, [r7, #23]
 80106ae:	3301      	adds	r3, #1
 80106b0:	75fb      	strb	r3, [r7, #23]
 80106b2:	4b54      	ldr	r3, [pc, #336]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 80106b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80106b8:	7dfa      	ldrb	r2, [r7, #23]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d3cd      	bcc.n	801065a <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 80106be:	4b51      	ldr	r3, [pc, #324]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 80106c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80106c4:	7dfa      	ldrb	r2, [r7, #23]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d935      	bls.n	8010736 <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f012 fc82 	bl	8022fd4 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 80106d0:	6838      	ldr	r0, [r7, #0]
 80106d2:	f015 f8bf 	bl	8025854 <ip4addr_ntoa>
 80106d6:	4601      	mov	r1, r0
 80106d8:	7dfb      	ldrb	r3, [r7, #23]
 80106da:	461a      	mov	r2, r3
 80106dc:	484e      	ldr	r0, [pc, #312]	; (8010818 <UDP_Receive_Callback+0x1f4>)
 80106de:	f016 f9b1 	bl	8026a44 <iprintf>
			return;
 80106e2:	e08a      	b.n	80107fa <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 80106e4:	2300      	movs	r3, #0
 80106e6:	75fb      	strb	r3, [r7, #23]
 80106e8:	e00a      	b.n	8010700 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 80106ea:	4b45      	ldr	r3, [pc, #276]	; (8010800 <UDP_Receive_Callback+0x1dc>)
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	7dfb      	ldrb	r3, [r7, #23]
 80106f0:	4945      	ldr	r1, [pc, #276]	; (8010808 <UDP_Receive_Callback+0x1e4>)
 80106f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d009      	beq.n	801070e <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 80106fa:	7dfb      	ldrb	r3, [r7, #23]
 80106fc:	3301      	adds	r3, #1
 80106fe:	75fb      	strb	r3, [r7, #23]
 8010700:	4b40      	ldr	r3, [pc, #256]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 8010702:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010706:	7dfa      	ldrb	r2, [r7, #23]
 8010708:	429a      	cmp	r2, r3
 801070a:	d3ee      	bcc.n	80106ea <UDP_Receive_Callback+0xc6>
 801070c:	e000      	b.n	8010710 <UDP_Receive_Callback+0xec>
			{
				break;
 801070e:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 8010710:	4b3c      	ldr	r3, [pc, #240]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 8010712:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010716:	7dfa      	ldrb	r2, [r7, #23]
 8010718:	429a      	cmp	r2, r3
 801071a:	d90e      	bls.n	801073a <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f012 fc59 	bl	8022fd4 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 8010722:	7dfb      	ldrb	r3, [r7, #23]
 8010724:	4619      	mov	r1, r3
 8010726:	483d      	ldr	r0, [pc, #244]	; (801081c <UDP_Receive_Callback+0x1f8>)
 8010728:	f016 f98c 	bl	8026a44 <iprintf>
			return;
 801072c:	e065      	b.n	80107fa <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f012 fc50 	bl	8022fd4 <pbuf_free>
		return;
 8010734:	e061      	b.n	80107fa <UDP_Receive_Callback+0x1d6>
		break;
 8010736:	bf00      	nop
 8010738:	e000      	b.n	801073c <UDP_Receive_Callback+0x118>
		break;
 801073a:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 801073c:	4b31      	ldr	r3, [pc, #196]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d002      	beq.n	801074a <UDP_Receive_Callback+0x126>
 8010744:	2b02      	cmp	r3, #2
 8010746:	d049      	beq.n	80107dc <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 8010748:	e054      	b.n	80107f4 <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 801074a:	f009 f971 	bl	8019a30 <HAL_GetTick>
 801074e:	4603      	mov	r3, r0
 8010750:	4a33      	ldr	r2, [pc, #204]	; (8010820 <UDP_Receive_Callback+0x1fc>)
 8010752:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 8010754:	4b33      	ldr	r3, [pc, #204]	; (8010824 <UDP_Receive_Callback+0x200>)
 8010756:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801075a:	461a      	mov	r2, r3
 801075c:	8abb      	ldrh	r3, [r7, #20]
 801075e:	4413      	add	r3, r2
 8010760:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010764:	dd24      	ble.n	80107b0 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 8010766:	4b2f      	ldr	r3, [pc, #188]	; (8010824 <UDP_Receive_Callback+0x200>)
 8010768:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801076c:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8010770:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 8010772:	4b2c      	ldr	r3, [pc, #176]	; (8010824 <UDP_Receive_Callback+0x200>)
 8010774:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010778:	461a      	mov	r2, r3
 801077a:	4b2a      	ldr	r3, [pc, #168]	; (8010824 <UDP_Receive_Callback+0x200>)
 801077c:	18d0      	adds	r0, r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	8a7a      	ldrh	r2, [r7, #18]
 8010784:	4619      	mov	r1, r3
 8010786:	f016 f84d 	bl	8026824 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	685a      	ldr	r2, [r3, #4]
 801078e:	8a7b      	ldrh	r3, [r7, #18]
 8010790:	18d1      	adds	r1, r2, r3
 8010792:	8aba      	ldrh	r2, [r7, #20]
 8010794:	8a7b      	ldrh	r3, [r7, #18]
 8010796:	1ad3      	subs	r3, r2, r3
 8010798:	461a      	mov	r2, r3
 801079a:	4822      	ldr	r0, [pc, #136]	; (8010824 <UDP_Receive_Callback+0x200>)
 801079c:	f016 f842 	bl	8026824 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 80107a0:	8aba      	ldrh	r2, [r7, #20]
 80107a2:	8a7b      	ldrh	r3, [r7, #18]
 80107a4:	1ad3      	subs	r3, r2, r3
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	4b1e      	ldr	r3, [pc, #120]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107aa:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 80107ae:	e021      	b.n	80107f4 <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 80107b0:	4b1c      	ldr	r3, [pc, #112]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107b2:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 80107b6:	461a      	mov	r2, r3
 80107b8:	4b1a      	ldr	r3, [pc, #104]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107ba:	18d0      	adds	r0, r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	8aba      	ldrh	r2, [r7, #20]
 80107c2:	4619      	mov	r1, r3
 80107c4:	f016 f82e 	bl	8026824 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 80107c8:	4b16      	ldr	r3, [pc, #88]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107ca:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 80107ce:	8abb      	ldrh	r3, [r7, #20]
 80107d0:	4413      	add	r3, r2
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	4b13      	ldr	r3, [pc, #76]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107d6:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 80107da:	e00b      	b.n	80107f4 <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	8aba      	ldrh	r2, [r7, #20]
 80107e2:	4619      	mov	r1, r3
 80107e4:	480f      	ldr	r0, [pc, #60]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107e6:	f016 f81d 	bl	8026824 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 80107ea:	4a0e      	ldr	r2, [pc, #56]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107ec:	8abb      	ldrh	r3, [r7, #20]
 80107ee:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 80107f2:	bf00      	nop
	}


	pbuf_free(p);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f012 fbed 	bl	8022fd4 <pbuf_free>
}
 80107fa:	3718      	adds	r7, #24
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	200069fc 	.word	0x200069fc
 8010804:	20000504 	.word	0x20000504
 8010808:	200069ac 	.word	0x200069ac
 801080c:	0802b1d0 	.word	0x0802b1d0
 8010810:	200026e4 	.word	0x200026e4
 8010814:	2000270c 	.word	0x2000270c
 8010818:	0802b1dc 	.word	0x0802b1dc
 801081c:	0802b208 	.word	0x0802b208
 8010820:	200024b0 	.word	0x200024b0
 8010824:	200063a8 	.word	0x200063a8

08010828 <udpClient_connect>:
void udpClient_connect(void)
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
//	err_t err;
	uint8_t Traverser = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 8010832:	4ba6      	ldr	r3, [pc, #664]	; (8010acc <udpClient_connect+0x2a4>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	2b01      	cmp	r3, #1
 8010838:	d003      	beq.n	8010842 <udpClient_connect+0x1a>
 801083a:	2b02      	cmp	r3, #2
 801083c:	f000 80a1 	beq.w	8010982 <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 8010840:	e13f      	b.n	8010ac2 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8010842:	2300      	movs	r3, #0
 8010844:	71fb      	strb	r3, [r7, #7]
 8010846:	e094      	b.n	8010972 <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8010848:	79fb      	ldrb	r3, [r7, #7]
 801084a:	4aa0      	ldr	r2, [pc, #640]	; (8010acc <udpClient_connect+0x2a4>)
 801084c:	3312      	adds	r3, #18
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	4413      	add	r3, r2
 8010852:	78db      	ldrb	r3, [r3, #3]
 8010854:	061a      	lsls	r2, r3, #24
 8010856:	79fb      	ldrb	r3, [r7, #7]
 8010858:	499c      	ldr	r1, [pc, #624]	; (8010acc <udpClient_connect+0x2a4>)
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	440b      	add	r3, r1
 801085e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010862:	041b      	lsls	r3, r3, #16
 8010864:	431a      	orrs	r2, r3
 8010866:	79fb      	ldrb	r3, [r7, #7]
 8010868:	4998      	ldr	r1, [pc, #608]	; (8010acc <udpClient_connect+0x2a4>)
 801086a:	009b      	lsls	r3, r3, #2
 801086c:	440b      	add	r3, r1
 801086e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010872:	021b      	lsls	r3, r3, #8
 8010874:	431a      	orrs	r2, r3
 8010876:	79fb      	ldrb	r3, [r7, #7]
 8010878:	4994      	ldr	r1, [pc, #592]	; (8010acc <udpClient_connect+0x2a4>)
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	440b      	add	r3, r1
 801087e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010882:	4313      	orrs	r3, r2
 8010884:	061a      	lsls	r2, r3, #24
 8010886:	79fb      	ldrb	r3, [r7, #7]
 8010888:	4990      	ldr	r1, [pc, #576]	; (8010acc <udpClient_connect+0x2a4>)
 801088a:	3312      	adds	r3, #18
 801088c:	009b      	lsls	r3, r3, #2
 801088e:	440b      	add	r3, r1
 8010890:	78db      	ldrb	r3, [r3, #3]
 8010892:	0619      	lsls	r1, r3, #24
 8010894:	79fb      	ldrb	r3, [r7, #7]
 8010896:	488d      	ldr	r0, [pc, #564]	; (8010acc <udpClient_connect+0x2a4>)
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	4403      	add	r3, r0
 801089c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80108a0:	041b      	lsls	r3, r3, #16
 80108a2:	4319      	orrs	r1, r3
 80108a4:	79fb      	ldrb	r3, [r7, #7]
 80108a6:	4889      	ldr	r0, [pc, #548]	; (8010acc <udpClient_connect+0x2a4>)
 80108a8:	009b      	lsls	r3, r3, #2
 80108aa:	4403      	add	r3, r0
 80108ac:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80108b0:	021b      	lsls	r3, r3, #8
 80108b2:	4319      	orrs	r1, r3
 80108b4:	79fb      	ldrb	r3, [r7, #7]
 80108b6:	4885      	ldr	r0, [pc, #532]	; (8010acc <udpClient_connect+0x2a4>)
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	4403      	add	r3, r0
 80108bc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80108c0:	430b      	orrs	r3, r1
 80108c2:	021b      	lsls	r3, r3, #8
 80108c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80108c8:	431a      	orrs	r2, r3
 80108ca:	79fb      	ldrb	r3, [r7, #7]
 80108cc:	497f      	ldr	r1, [pc, #508]	; (8010acc <udpClient_connect+0x2a4>)
 80108ce:	3312      	adds	r3, #18
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	440b      	add	r3, r1
 80108d4:	78db      	ldrb	r3, [r3, #3]
 80108d6:	0619      	lsls	r1, r3, #24
 80108d8:	79fb      	ldrb	r3, [r7, #7]
 80108da:	487c      	ldr	r0, [pc, #496]	; (8010acc <udpClient_connect+0x2a4>)
 80108dc:	009b      	lsls	r3, r3, #2
 80108de:	4403      	add	r3, r0
 80108e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80108e4:	041b      	lsls	r3, r3, #16
 80108e6:	4319      	orrs	r1, r3
 80108e8:	79fb      	ldrb	r3, [r7, #7]
 80108ea:	4878      	ldr	r0, [pc, #480]	; (8010acc <udpClient_connect+0x2a4>)
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	4403      	add	r3, r0
 80108f0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80108f4:	021b      	lsls	r3, r3, #8
 80108f6:	4319      	orrs	r1, r3
 80108f8:	79fb      	ldrb	r3, [r7, #7]
 80108fa:	4874      	ldr	r0, [pc, #464]	; (8010acc <udpClient_connect+0x2a4>)
 80108fc:	009b      	lsls	r3, r3, #2
 80108fe:	4403      	add	r3, r0
 8010900:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010904:	430b      	orrs	r3, r1
 8010906:	0a1b      	lsrs	r3, r3, #8
 8010908:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801090c:	ea42 0103 	orr.w	r1, r2, r3
 8010910:	79fb      	ldrb	r3, [r7, #7]
 8010912:	4a6e      	ldr	r2, [pc, #440]	; (8010acc <udpClient_connect+0x2a4>)
 8010914:	3312      	adds	r3, #18
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4413      	add	r3, r2
 801091a:	78db      	ldrb	r3, [r3, #3]
 801091c:	061a      	lsls	r2, r3, #24
 801091e:	79fb      	ldrb	r3, [r7, #7]
 8010920:	486a      	ldr	r0, [pc, #424]	; (8010acc <udpClient_connect+0x2a4>)
 8010922:	009b      	lsls	r3, r3, #2
 8010924:	4403      	add	r3, r0
 8010926:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801092a:	041b      	lsls	r3, r3, #16
 801092c:	431a      	orrs	r2, r3
 801092e:	79fb      	ldrb	r3, [r7, #7]
 8010930:	4866      	ldr	r0, [pc, #408]	; (8010acc <udpClient_connect+0x2a4>)
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4403      	add	r3, r0
 8010936:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801093a:	021b      	lsls	r3, r3, #8
 801093c:	431a      	orrs	r2, r3
 801093e:	79fb      	ldrb	r3, [r7, #7]
 8010940:	4862      	ldr	r0, [pc, #392]	; (8010acc <udpClient_connect+0x2a4>)
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	4403      	add	r3, r0
 8010946:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801094a:	4313      	orrs	r3, r2
 801094c:	0e1a      	lsrs	r2, r3, #24
 801094e:	79fb      	ldrb	r3, [r7, #7]
 8010950:	430a      	orrs	r2, r1
 8010952:	495f      	ldr	r1, [pc, #380]	; (8010ad0 <udpClient_connect+0x2a8>)
 8010954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010958:	79fb      	ldrb	r3, [r7, #7]
 801095a:	79fa      	ldrb	r2, [r7, #7]
 801095c:	495b      	ldr	r1, [pc, #364]	; (8010acc <udpClient_connect+0x2a4>)
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	440b      	add	r3, r1
 8010962:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 8010966:	4b5b      	ldr	r3, [pc, #364]	; (8010ad4 <udpClient_connect+0x2ac>)
 8010968:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 801096c:	79fb      	ldrb	r3, [r7, #7]
 801096e:	3301      	adds	r3, #1
 8010970:	71fb      	strb	r3, [r7, #7]
 8010972:	4b56      	ldr	r3, [pc, #344]	; (8010acc <udpClient_connect+0x2a4>)
 8010974:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010978:	79fa      	ldrb	r2, [r7, #7]
 801097a:	429a      	cmp	r2, r3
 801097c:	f4ff af64 	bcc.w	8010848 <udpClient_connect+0x20>
		break;
 8010980:	e09f      	b.n	8010ac2 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010982:	2300      	movs	r3, #0
 8010984:	71fb      	strb	r3, [r7, #7]
 8010986:	e094      	b.n	8010ab2 <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 8010988:	79fb      	ldrb	r3, [r7, #7]
 801098a:	4a50      	ldr	r2, [pc, #320]	; (8010acc <udpClient_connect+0x2a4>)
 801098c:	33ae      	adds	r3, #174	; 0xae
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	4413      	add	r3, r2
 8010992:	785b      	ldrb	r3, [r3, #1]
 8010994:	061a      	lsls	r2, r3, #24
 8010996:	79fb      	ldrb	r3, [r7, #7]
 8010998:	494c      	ldr	r1, [pc, #304]	; (8010acc <udpClient_connect+0x2a4>)
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	440b      	add	r3, r1
 801099e:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 80109a2:	041b      	lsls	r3, r3, #16
 80109a4:	431a      	orrs	r2, r3
 80109a6:	79fb      	ldrb	r3, [r7, #7]
 80109a8:	4948      	ldr	r1, [pc, #288]	; (8010acc <udpClient_connect+0x2a4>)
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	440b      	add	r3, r1
 80109ae:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 80109b2:	021b      	lsls	r3, r3, #8
 80109b4:	431a      	orrs	r2, r3
 80109b6:	79fb      	ldrb	r3, [r7, #7]
 80109b8:	4944      	ldr	r1, [pc, #272]	; (8010acc <udpClient_connect+0x2a4>)
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	440b      	add	r3, r1
 80109be:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 80109c2:	4313      	orrs	r3, r2
 80109c4:	061a      	lsls	r2, r3, #24
 80109c6:	79fb      	ldrb	r3, [r7, #7]
 80109c8:	4940      	ldr	r1, [pc, #256]	; (8010acc <udpClient_connect+0x2a4>)
 80109ca:	33ae      	adds	r3, #174	; 0xae
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	440b      	add	r3, r1
 80109d0:	785b      	ldrb	r3, [r3, #1]
 80109d2:	0619      	lsls	r1, r3, #24
 80109d4:	79fb      	ldrb	r3, [r7, #7]
 80109d6:	483d      	ldr	r0, [pc, #244]	; (8010acc <udpClient_connect+0x2a4>)
 80109d8:	009b      	lsls	r3, r3, #2
 80109da:	4403      	add	r3, r0
 80109dc:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 80109e0:	041b      	lsls	r3, r3, #16
 80109e2:	4319      	orrs	r1, r3
 80109e4:	79fb      	ldrb	r3, [r7, #7]
 80109e6:	4839      	ldr	r0, [pc, #228]	; (8010acc <udpClient_connect+0x2a4>)
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	4403      	add	r3, r0
 80109ec:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 80109f0:	021b      	lsls	r3, r3, #8
 80109f2:	4319      	orrs	r1, r3
 80109f4:	79fb      	ldrb	r3, [r7, #7]
 80109f6:	4835      	ldr	r0, [pc, #212]	; (8010acc <udpClient_connect+0x2a4>)
 80109f8:	009b      	lsls	r3, r3, #2
 80109fa:	4403      	add	r3, r0
 80109fc:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010a00:	430b      	orrs	r3, r1
 8010a02:	021b      	lsls	r3, r3, #8
 8010a04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a08:	431a      	orrs	r2, r3
 8010a0a:	79fb      	ldrb	r3, [r7, #7]
 8010a0c:	492f      	ldr	r1, [pc, #188]	; (8010acc <udpClient_connect+0x2a4>)
 8010a0e:	33ae      	adds	r3, #174	; 0xae
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	440b      	add	r3, r1
 8010a14:	785b      	ldrb	r3, [r3, #1]
 8010a16:	0619      	lsls	r1, r3, #24
 8010a18:	79fb      	ldrb	r3, [r7, #7]
 8010a1a:	482c      	ldr	r0, [pc, #176]	; (8010acc <udpClient_connect+0x2a4>)
 8010a1c:	009b      	lsls	r3, r3, #2
 8010a1e:	4403      	add	r3, r0
 8010a20:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010a24:	041b      	lsls	r3, r3, #16
 8010a26:	4319      	orrs	r1, r3
 8010a28:	79fb      	ldrb	r3, [r7, #7]
 8010a2a:	4828      	ldr	r0, [pc, #160]	; (8010acc <udpClient_connect+0x2a4>)
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4403      	add	r3, r0
 8010a30:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010a34:	021b      	lsls	r3, r3, #8
 8010a36:	4319      	orrs	r1, r3
 8010a38:	79fb      	ldrb	r3, [r7, #7]
 8010a3a:	4824      	ldr	r0, [pc, #144]	; (8010acc <udpClient_connect+0x2a4>)
 8010a3c:	009b      	lsls	r3, r3, #2
 8010a3e:	4403      	add	r3, r0
 8010a40:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010a44:	430b      	orrs	r3, r1
 8010a46:	0a1b      	lsrs	r3, r3, #8
 8010a48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a4c:	ea42 0103 	orr.w	r1, r2, r3
 8010a50:	79fb      	ldrb	r3, [r7, #7]
 8010a52:	4a1e      	ldr	r2, [pc, #120]	; (8010acc <udpClient_connect+0x2a4>)
 8010a54:	33ae      	adds	r3, #174	; 0xae
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	4413      	add	r3, r2
 8010a5a:	785b      	ldrb	r3, [r3, #1]
 8010a5c:	061a      	lsls	r2, r3, #24
 8010a5e:	79fb      	ldrb	r3, [r7, #7]
 8010a60:	481a      	ldr	r0, [pc, #104]	; (8010acc <udpClient_connect+0x2a4>)
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4403      	add	r3, r0
 8010a66:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010a6a:	041b      	lsls	r3, r3, #16
 8010a6c:	431a      	orrs	r2, r3
 8010a6e:	79fb      	ldrb	r3, [r7, #7]
 8010a70:	4816      	ldr	r0, [pc, #88]	; (8010acc <udpClient_connect+0x2a4>)
 8010a72:	009b      	lsls	r3, r3, #2
 8010a74:	4403      	add	r3, r0
 8010a76:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010a7a:	021b      	lsls	r3, r3, #8
 8010a7c:	431a      	orrs	r2, r3
 8010a7e:	79fb      	ldrb	r3, [r7, #7]
 8010a80:	4812      	ldr	r0, [pc, #72]	; (8010acc <udpClient_connect+0x2a4>)
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	4403      	add	r3, r0
 8010a86:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	0e1a      	lsrs	r2, r3, #24
 8010a8e:	79fb      	ldrb	r3, [r7, #7]
 8010a90:	430a      	orrs	r2, r1
 8010a92:	490f      	ldr	r1, [pc, #60]	; (8010ad0 <udpClient_connect+0x2a8>)
 8010a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010a98:	79fb      	ldrb	r3, [r7, #7]
 8010a9a:	79fa      	ldrb	r2, [r7, #7]
 8010a9c:	490b      	ldr	r1, [pc, #44]	; (8010acc <udpClient_connect+0x2a4>)
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	440b      	add	r3, r1
 8010aa2:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 8010aa6:	4b0b      	ldr	r3, [pc, #44]	; (8010ad4 <udpClient_connect+0x2ac>)
 8010aa8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010aac:	79fb      	ldrb	r3, [r7, #7]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	71fb      	strb	r3, [r7, #7]
 8010ab2:	4b06      	ldr	r3, [pc, #24]	; (8010acc <udpClient_connect+0x2a4>)
 8010ab4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010ab8:	79fa      	ldrb	r2, [r7, #7]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	f4ff af64 	bcc.w	8010988 <udpClient_connect+0x160>
		break;
 8010ac0:	bf00      	nop
	}
}
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr
 8010acc:	20000504 	.word	0x20000504
 8010ad0:	200069ac 	.word	0x200069ac
 8010ad4:	20006a00 	.word	0x20006a00

08010ad8 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b086      	sub	sp, #24
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	60f8      	str	r0, [r7, #12]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	607a      	str	r2, [r7, #4]
 8010ae4:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8010aea:	7afb      	ldrb	r3, [r7, #11]
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010af2:	4619      	mov	r1, r3
 8010af4:	2036      	movs	r0, #54	; 0x36
 8010af6:	f011 ff8b 	bl	8022a10 <pbuf_alloc>
 8010afa:	6138      	str	r0, [r7, #16]

//		char *SendingIP = ipaddr_ntoa(&IP_addr);
//
//		printf("\nSent IP:%s:%u\n",SendingIP,des_port[0]);

	if (txBuf != NULL)
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d01d      	beq.n	8010b3e <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 8010b02:	7afb      	ldrb	r3, [r7, #11]
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	461a      	mov	r2, r3
 8010b08:	68f9      	ldr	r1, [r7, #12]
 8010b0a:	6938      	ldr	r0, [r7, #16]
 8010b0c:	f012 fc5c 	bl	80233c8 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 8010b10:	4b0d      	ldr	r3, [pc, #52]	; (8010b48 <udpClient_send+0x70>)
 8010b12:	6818      	ldr	r0, [r3, #0]
 8010b14:	4b0d      	ldr	r3, [pc, #52]	; (8010b4c <udpClient_send+0x74>)
 8010b16:	881b      	ldrh	r3, [r3, #0]
 8010b18:	1d3a      	adds	r2, r7, #4
 8010b1a:	6939      	ldr	r1, [r7, #16]
 8010b1c:	f012 fffc 	bl	8023b18 <udp_sendto>
 8010b20:	4603      	mov	r3, r0
 8010b22:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 8010b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d005      	beq.n	8010b38 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 8010b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b30:	4619      	mov	r1, r3
 8010b32:	4807      	ldr	r0, [pc, #28]	; (8010b50 <udpClient_send+0x78>)
 8010b34:	f015 ff86 	bl	8026a44 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 8010b38:	6938      	ldr	r0, [r7, #16]
 8010b3a:	f012 fa4b 	bl	8022fd4 <pbuf_free>
	}
}
 8010b3e:	bf00      	nop
 8010b40:	3718      	adds	r7, #24
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	20006a28 	.word	0x20006a28
 8010b4c:	20006a00 	.word	0x20006a00
 8010b50:	0802b230 	.word	0x0802b230

08010b54 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 8010b54:	b480      	push	{r7}
 8010b56:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 8010b58:	4b07      	ldr	r3, [pc, #28]	; (8010b78 <Is_There_EI_Data+0x24>)
 8010b5a:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 8010b5e:	4b06      	ldr	r3, [pc, #24]	; (8010b78 <Is_There_EI_Data+0x24>)
 8010b60:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d001      	beq.n	8010b6c <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 8010b68:	2301      	movs	r3, #1
 8010b6a:	e000      	b.n	8010b6e <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 8010b6c:	2300      	movs	r3, #0
	}
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	200063a8 	.word	0x200063a8

08010b7c <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 8010b82:	4b15      	ldr	r3, [pc, #84]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010b84:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010b88:	1c5a      	adds	r2, r3, #1
 8010b8a:	b291      	uxth	r1, r2
 8010b8c:	4a12      	ldr	r2, [pc, #72]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010b8e:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 8010b92:	461a      	mov	r2, r3
 8010b94:	4b10      	ldr	r3, [pc, #64]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010b96:	5c9b      	ldrb	r3, [r3, r2]
 8010b98:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 8010b9a:	4b0f      	ldr	r3, [pc, #60]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010b9c:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010ba0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010ba4:	d313      	bcc.n	8010bce <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 8010ba6:	4b0c      	ldr	r3, [pc, #48]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 8010bae:	4b0a      	ldr	r3, [pc, #40]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010bb0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010bb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010bb8:	d109      	bne.n	8010bce <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 8010bba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	4805      	ldr	r0, [pc, #20]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010bc2:	f015 fe57 	bl	8026874 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 8010bc6:	4b04      	ldr	r3, [pc, #16]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 8010bce:	79fb      	ldrb	r3, [r7, #7]
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	200063a8 	.word	0x200063a8

08010bdc <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	460b      	mov	r3, r1
 8010be6:	607a      	str	r2, [r7, #4]
 8010be8:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8010bee:	7afb      	ldrb	r3, [r7, #11]
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	2036      	movs	r0, #54	; 0x36
 8010bfa:	f011 ff09 	bl	8022a10 <pbuf_alloc>
 8010bfe:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d01a      	beq.n	8010c3c <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 8010c06:	7afb      	ldrb	r3, [r7, #11]
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	68f9      	ldr	r1, [r7, #12]
 8010c0e:	6938      	ldr	r0, [r7, #16]
 8010c10:	f012 fbda 	bl	80233c8 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 8010c14:	4b0b      	ldr	r3, [pc, #44]	; (8010c44 <Udp_Send_SigInfo+0x68>)
 8010c16:	6818      	ldr	r0, [r3, #0]
 8010c18:	1d3a      	adds	r2, r7, #4
 8010c1a:	f243 0339 	movw	r3, #12345	; 0x3039
 8010c1e:	6939      	ldr	r1, [r7, #16]
 8010c20:	f012 ff7a 	bl	8023b18 <udp_sendto>
 8010c24:	4603      	mov	r3, r0
 8010c26:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 8010c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d002      	beq.n	8010c36 <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 8010c30:	4805      	ldr	r0, [pc, #20]	; (8010c48 <Udp_Send_SigInfo+0x6c>)
 8010c32:	f015 ffa3 	bl	8026b7c <puts>
		}
		pbuf_free(txBuf);
 8010c36:	6938      	ldr	r0, [r7, #16]
 8010c38:	f012 f9cc 	bl	8022fd4 <pbuf_free>
	}
}
 8010c3c:	bf00      	nop
 8010c3e:	3718      	adds	r7, #24
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	20006a28 	.word	0x20006a28
 8010c48:	0802b258 	.word	0x0802b258

08010c4c <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b094      	sub	sp, #80	; 0x50
 8010c50:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8010c52:	4b38      	ldr	r3, [pc, #224]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c54:	4a38      	ldr	r2, [pc, #224]	; (8010d38 <MX_CAN2_Init+0xec>)
 8010c56:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 8010c58:	4b36      	ldr	r3, [pc, #216]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c5a:	2212      	movs	r2, #18
 8010c5c:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8010c5e:	4b35      	ldr	r3, [pc, #212]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c60:	2200      	movs	r2, #0
 8010c62:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8010c64:	4b33      	ldr	r3, [pc, #204]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c66:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8010c6a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8010c6c:	4b31      	ldr	r3, [pc, #196]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010c72:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8010c74:	4b2f      	ldr	r3, [pc, #188]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010c7a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8010c7c:	4b2d      	ldr	r3, [pc, #180]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8010c82:	4b2c      	ldr	r3, [pc, #176]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c84:	2200      	movs	r2, #0
 8010c86:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8010c88:	4b2a      	ldr	r3, [pc, #168]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 8010c8e:	4b29      	ldr	r3, [pc, #164]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c90:	2201      	movs	r2, #1
 8010c92:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8010c94:	4b27      	ldr	r3, [pc, #156]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c96:	2200      	movs	r2, #0
 8010c98:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8010c9a:	4b26      	ldr	r3, [pc, #152]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8010ca0:	4824      	ldr	r0, [pc, #144]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010ca2:	f008 fef5 	bl	8019a90 <HAL_CAN_Init>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d001      	beq.n	8010cb0 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 8010cac:	f007 f8c6 	bl	8017e3c <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 8010cb4:	2304      	movs	r3, #4
 8010cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 8010cbc:	f242 0360 	movw	r3, #8288	; 0x2060
 8010cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 8010cc6:	f242 0360 	movw	r3, #8288	; 0x2060
 8010cca:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 8010cd8:	2302      	movs	r3, #2
 8010cda:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 8010cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	4814      	ldr	r0, [pc, #80]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010ce4:	f009 f81a 	bl	8019d1c <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 8010cec:	2305      	movs	r3, #5
 8010cee:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 8010cf4:	f242 1320 	movw	r3, #8480	; 0x2120
 8010cf8:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 8010cfe:	f242 1320 	movw	r3, #8480	; 0x2120
 8010d02:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 8010d04:	2300      	movs	r3, #0
 8010d06:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 8010d08:	2301      	movs	r3, #1
 8010d0a:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 8010d10:	2302      	movs	r3, #2
 8010d12:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 8010d14:	463b      	mov	r3, r7
 8010d16:	4619      	mov	r1, r3
 8010d18:	4806      	ldr	r0, [pc, #24]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010d1a:	f008 ffff 	bl	8019d1c <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 8010d1e:	4805      	ldr	r0, [pc, #20]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010d20:	f009 f8e8 	bl	8019ef4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 8010d24:	2110      	movs	r1, #16
 8010d26:	4803      	ldr	r0, [pc, #12]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010d28:	f009 fb2e 	bl	801a388 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 8010d2c:	bf00      	nop
 8010d2e:	3750      	adds	r7, #80	; 0x50
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	2000b2e8 	.word	0x2000b2e8
 8010d38:	40006800 	.word	0x40006800

08010d3c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b08a      	sub	sp, #40	; 0x28
 8010d40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 8010d42:	4b34      	ldr	r3, [pc, #208]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d44:	4a34      	ldr	r2, [pc, #208]	; (8010e18 <MX_CAN3_Init+0xdc>)
 8010d46:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 8010d48:	4b32      	ldr	r3, [pc, #200]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d4a:	2205      	movs	r2, #5
 8010d4c:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 8010d4e:	4b31      	ldr	r3, [pc, #196]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8010d54:	4b2f      	ldr	r3, [pc, #188]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d56:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8010d5a:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 8010d5c:	4b2d      	ldr	r3, [pc, #180]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d5e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8010d62:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 8010d64:	4b2b      	ldr	r3, [pc, #172]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 8010d6a:	4b2a      	ldr	r3, [pc, #168]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d6c:	4a2a      	ldr	r2, [pc, #168]	; (8010e18 <MX_CAN3_Init+0xdc>)
 8010d6e:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 8010d70:	4b28      	ldr	r3, [pc, #160]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d72:	2212      	movs	r2, #18
 8010d74:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 8010d76:	4b27      	ldr	r3, [pc, #156]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d78:	2200      	movs	r2, #0
 8010d7a:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8010d7c:	4b25      	ldr	r3, [pc, #148]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d7e:	2200      	movs	r2, #0
 8010d80:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 8010d82:	4b24      	ldr	r3, [pc, #144]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010d88:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8010d8a:	4b22      	ldr	r3, [pc, #136]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010d90:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 8010d92:	4b20      	ldr	r3, [pc, #128]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d94:	2200      	movs	r2, #0
 8010d96:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 8010d98:	4b1e      	ldr	r3, [pc, #120]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 8010d9e:	4b1d      	ldr	r3, [pc, #116]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010da0:	2200      	movs	r2, #0
 8010da2:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 8010da4:	4b1b      	ldr	r3, [pc, #108]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010da6:	2201      	movs	r2, #1
 8010da8:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 8010daa:	4b1a      	ldr	r3, [pc, #104]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010dac:	2200      	movs	r2, #0
 8010dae:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 8010db0:	4b18      	ldr	r3, [pc, #96]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010db2:	2200      	movs	r2, #0
 8010db4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8010db6:	4817      	ldr	r0, [pc, #92]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010db8:	f008 fe6a 	bl	8019a90 <HAL_CAN_Init>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d001      	beq.n	8010dc6 <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 8010dc2:	f007 f83b 	bl	8017e3c <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 8010dca:	2301      	movs	r3, #1
 8010dcc:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 8010dd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010dd6:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 8010ddc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010de0:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 8010de2:	2300      	movs	r3, #0
 8010de4:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 8010de6:	2300      	movs	r3, #0
 8010de8:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8010dea:	2301      	movs	r3, #1
 8010dec:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 8010dee:	2306      	movs	r3, #6
 8010df0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 8010df2:	463b      	mov	r3, r7
 8010df4:	4619      	mov	r1, r3
 8010df6:	4807      	ldr	r0, [pc, #28]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010df8:	f008 ff90 	bl	8019d1c <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 8010dfc:	4805      	ldr	r0, [pc, #20]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010dfe:	f009 f879 	bl	8019ef4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 8010e02:	2102      	movs	r1, #2
 8010e04:	4803      	ldr	r0, [pc, #12]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010e06:	f009 fabf 	bl	801a388 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 8010e0a:	bf00      	nop
 8010e0c:	3728      	adds	r7, #40	; 0x28
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	2000b34c 	.word	0x2000b34c
 8010e18:	40003400 	.word	0x40003400

08010e1c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b08c      	sub	sp, #48	; 0x30
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e24:	f107 031c 	add.w	r3, r7, #28
 8010e28:	2200      	movs	r2, #0
 8010e2a:	601a      	str	r2, [r3, #0]
 8010e2c:	605a      	str	r2, [r3, #4]
 8010e2e:	609a      	str	r2, [r3, #8]
 8010e30:	60da      	str	r2, [r3, #12]
 8010e32:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	4a44      	ldr	r2, [pc, #272]	; (8010f4c <HAL_CAN_MspInit+0x130>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d144      	bne.n	8010ec8 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8010e3e:	4b44      	ldr	r3, [pc, #272]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e42:	4a43      	ldr	r2, [pc, #268]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010e48:	6413      	str	r3, [r2, #64]	; 0x40
 8010e4a:	4b41      	ldr	r3, [pc, #260]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e52:	61bb      	str	r3, [r7, #24]
 8010e54:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8010e56:	4b3e      	ldr	r3, [pc, #248]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5a:	4a3d      	ldr	r2, [pc, #244]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010e60:	6413      	str	r3, [r2, #64]	; 0x40
 8010e62:	4b3b      	ldr	r3, [pc, #236]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e6a:	617b      	str	r3, [r7, #20]
 8010e6c:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8010e6e:	4b38      	ldr	r3, [pc, #224]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e72:	4a37      	ldr	r2, [pc, #220]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e74:	f043 0302 	orr.w	r3, r3, #2
 8010e78:	6313      	str	r3, [r2, #48]	; 0x30
 8010e7a:	4b35      	ldr	r3, [pc, #212]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e7e:	f003 0302 	and.w	r3, r3, #2
 8010e82:	613b      	str	r3, [r7, #16]
 8010e84:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 8010e86:	2360      	movs	r3, #96	; 0x60
 8010e88:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e8a:	2302      	movs	r3, #2
 8010e8c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e92:	2303      	movs	r3, #3
 8010e94:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8010e96:	2309      	movs	r3, #9
 8010e98:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010e9a:	f107 031c 	add.w	r3, r7, #28
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	482c      	ldr	r0, [pc, #176]	; (8010f54 <HAL_CAN_MspInit+0x138>)
 8010ea2:	f00b f8d1 	bl	801c048 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	2104      	movs	r1, #4
 8010eaa:	2040      	movs	r0, #64	; 0x40
 8010eac:	f009 fda1 	bl	801a9f2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8010eb0:	2040      	movs	r0, #64	; 0x40
 8010eb2:	f009 fdba 	bl	801aa2a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	2104      	movs	r1, #4
 8010eba:	2041      	movs	r0, #65	; 0x41
 8010ebc:	f009 fd99 	bl	801a9f2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8010ec0:	2041      	movs	r0, #65	; 0x41
 8010ec2:	f009 fdb2 	bl	801aa2a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 8010ec6:	e03d      	b.n	8010f44 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a22      	ldr	r2, [pc, #136]	; (8010f58 <HAL_CAN_MspInit+0x13c>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d138      	bne.n	8010f44 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 8010ed2:	4b1f      	ldr	r3, [pc, #124]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed6:	4a1e      	ldr	r2, [pc, #120]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010edc:	6413      	str	r3, [r2, #64]	; 0x40
 8010ede:	4b1c      	ldr	r3, [pc, #112]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ee6:	60fb      	str	r3, [r7, #12]
 8010ee8:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8010eea:	4b19      	ldr	r3, [pc, #100]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eee:	4a18      	ldr	r2, [pc, #96]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ef0:	f043 0301 	orr.w	r3, r3, #1
 8010ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8010ef6:	4b16      	ldr	r3, [pc, #88]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010efa:	f003 0301 	and.w	r3, r3, #1
 8010efe:	60bb      	str	r3, [r7, #8]
 8010f00:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 8010f02:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8010f06:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f08:	2302      	movs	r3, #2
 8010f0a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f10:	2303      	movs	r3, #3
 8010f12:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8010f14:	230b      	movs	r3, #11
 8010f16:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f18:	f107 031c 	add.w	r3, r7, #28
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	480f      	ldr	r0, [pc, #60]	; (8010f5c <HAL_CAN_MspInit+0x140>)
 8010f20:	f00b f892 	bl	801c048 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8010f24:	2200      	movs	r2, #0
 8010f26:	2100      	movs	r1, #0
 8010f28:	2069      	movs	r0, #105	; 0x69
 8010f2a:	f009 fd62 	bl	801a9f2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8010f2e:	2069      	movs	r0, #105	; 0x69
 8010f30:	f009 fd7b 	bl	801aa2a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 8010f34:	2200      	movs	r2, #0
 8010f36:	2100      	movs	r1, #0
 8010f38:	206a      	movs	r0, #106	; 0x6a
 8010f3a:	f009 fd5a 	bl	801a9f2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 8010f3e:	206a      	movs	r0, #106	; 0x6a
 8010f40:	f009 fd73 	bl	801aa2a <HAL_NVIC_EnableIRQ>
}
 8010f44:	bf00      	nop
 8010f46:	3730      	adds	r7, #48	; 0x30
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	40006800 	.word	0x40006800
 8010f50:	40023800 	.word	0x40023800
 8010f54:	40020400 	.word	0x40020400
 8010f58:	40003400 	.word	0x40003400
 8010f5c:	40020000 	.word	0x40020000

08010f60 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 8010f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f62:	b087      	sub	sp, #28
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	4603      	mov	r3, r0
 8010f68:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	823b      	strh	r3, [r7, #16]
	uint16_t uc_size = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	82fb      	strh	r3, [r7, #22]



	switch(EI_data.ProtocolType)
 8010f72:	4ba1      	ldr	r3, [pc, #644]	; (80111f8 <TransmitCanPkt+0x298>)
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	3b01      	subs	r3, #1
 8010f78:	2b03      	cmp	r3, #3
 8010f7a:	f200 8344 	bhi.w	8011606 <TransmitCanPkt+0x6a6>
 8010f7e:	a201      	add	r2, pc, #4	; (adr r2, 8010f84 <TransmitCanPkt+0x24>)
 8010f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f84:	08010f95 	.word	0x08010f95
 8010f88:	08011175 	.word	0x08011175
 8010f8c:	08011311 	.word	0x08011311
 8010f90:	0801148f 	.word	0x0801148f
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8010f94:	4b99      	ldr	r3, [pc, #612]	; (80111fc <TransmitCanPkt+0x29c>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	0a1b      	lsrs	r3, r3, #8
 8010f9a:	f003 0301 	and.w	r3, r3, #1
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d003      	beq.n	8010faa <TransmitCanPkt+0x4a>
		{
			printf("Stopping CAN Transmission\n");
 8010fa2:	4897      	ldr	r0, [pc, #604]	; (8011200 <TransmitCanPkt+0x2a0>)
 8010fa4:	f015 fdea 	bl	8026b7c <puts>
			return;
 8010fa8:	e32d      	b.n	8011606 <TransmitCanPkt+0x6a6>
		}

		switch((int)Ken_idetifier)
 8010faa:	88fb      	ldrh	r3, [r7, #6]
 8010fac:	f240 220a 	movw	r2, #522	; 0x20a
 8010fb0:	4293      	cmp	r3, r2
 8010fb2:	f300 80d9 	bgt.w	8011168 <TransmitCanPkt+0x208>
 8010fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fba:	dc0d      	bgt.n	8010fd8 <TransmitCanPkt+0x78>
 8010fbc:	f240 1219 	movw	r2, #281	; 0x119
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d025      	beq.n	8011010 <TransmitCanPkt+0xb0>
 8010fc4:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8010fc8:	f340 80ce 	ble.w	8011168 <TransmitCanPkt+0x208>
 8010fcc:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	f200 80c9 	bhi.w	8011168 <TransmitCanPkt+0x208>
 8010fd6:	e058      	b.n	801108a <TransmitCanPkt+0x12a>
 8010fd8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010fdc:	2b09      	cmp	r3, #9
 8010fde:	f200 80c3 	bhi.w	8011168 <TransmitCanPkt+0x208>
 8010fe2:	a201      	add	r2, pc, #4	; (adr r2, 8010fe8 <TransmitCanPkt+0x88>)
 8010fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fe8:	080110af 	.word	0x080110af
 8010fec:	080110af 	.word	0x080110af
 8010ff0:	080110d9 	.word	0x080110d9
 8010ff4:	080110d9 	.word	0x080110d9
 8010ff8:	080110fd 	.word	0x080110fd
 8010ffc:	08011169 	.word	0x08011169
 8011000:	08011121 	.word	0x08011121
 8011004:	08011121 	.word	0x08011121
 8011008:	08011145 	.word	0x08011145
 801100c:	08011145 	.word	0x08011145
		{
		case EI_PROCESS_DATA:
			if(ReorderFlag == RESET)
 8011010:	4b7c      	ldr	r3, [pc, #496]	; (8011204 <TransmitCanPkt+0x2a4>)
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d11c      	bne.n	8011052 <TransmitCanPkt+0xf2>
			{
				vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 8011018:	4b77      	ldr	r3, [pc, #476]	; (80111f8 <TransmitCanPkt+0x298>)
 801101a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801101e:	b29b      	uxth	r3, r3
 8011020:	011b      	lsls	r3, r3, #4
 8011022:	b29a      	uxth	r2, r3
 8011024:	4b78      	ldr	r3, [pc, #480]	; (8011208 <TransmitCanPkt+0x2a8>)
 8011026:	801a      	strh	r2, [r3, #0]
				pp_ptr = &vEI_Transver_EI_To_MIE;
 8011028:	4b77      	ldr	r3, [pc, #476]	; (8011208 <TransmitCanPkt+0x2a8>)
 801102a:	60fb      	str	r3, [r7, #12]
				uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 801102c:	4b76      	ldr	r3, [pc, #472]	; (8011208 <TransmitCanPkt+0x2a8>)
 801102e:	881b      	ldrh	r3, [r3, #0]
 8011030:	3302      	adds	r3, #2
 8011032:	82fb      	strh	r3, [r7, #22]
				//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
				sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8011034:	8afb      	ldrh	r3, [r7, #22]
 8011036:	88fa      	ldrh	r2, [r7, #6]
 8011038:	4619      	mov	r1, r3
 801103a:	68f8      	ldr	r0, [r7, #12]
 801103c:	f000 fafc 	bl	8011638 <sendCanPkts>
				if(Debug_flag == 1)
 8011040:	4b72      	ldr	r3, [pc, #456]	; (801120c <TransmitCanPkt+0x2ac>)
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	2b01      	cmp	r3, #1
 8011046:	f040 8091 	bne.w	801116c <TransmitCanPkt+0x20c>
				{
					printf("SENT SIGNAL DATA TO MIE\n");
 801104a:	4871      	ldr	r0, [pc, #452]	; (8011210 <TransmitCanPkt+0x2b0>)
 801104c:	f015 fd96 	bl	8026b7c <puts>
				if(Debug_flag == 1)
				{
					printf("SENT ReArranged SIGNAL DATA TO MIE\n");
				}
			}
			break;
 8011050:	e08c      	b.n	801116c <TransmitCanPkt+0x20c>
				HitachiEI_DataReArranged_st.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 8011052:	4b69      	ldr	r3, [pc, #420]	; (80111f8 <TransmitCanPkt+0x298>)
 8011054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011058:	b29b      	uxth	r3, r3
 801105a:	011b      	lsls	r3, r3, #4
 801105c:	b29a      	uxth	r2, r3
 801105e:	4b6d      	ldr	r3, [pc, #436]	; (8011214 <TransmitCanPkt+0x2b4>)
 8011060:	801a      	strh	r2, [r3, #0]
				pp_ptr = &HitachiEI_DataReArranged_st;
 8011062:	4b6c      	ldr	r3, [pc, #432]	; (8011214 <TransmitCanPkt+0x2b4>)
 8011064:	60fb      	str	r3, [r7, #12]
				uc_size =(HitachiEI_DataReArranged_st.ActualDataBytes + sizeof(HitachiEI_DataReArranged_st.ActualDataBytes)); /* +2 is by Considering */
 8011066:	4b6b      	ldr	r3, [pc, #428]	; (8011214 <TransmitCanPkt+0x2b4>)
 8011068:	881b      	ldrh	r3, [r3, #0]
 801106a:	3302      	adds	r3, #2
 801106c:	82fb      	strh	r3, [r7, #22]
				sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 801106e:	8afb      	ldrh	r3, [r7, #22]
 8011070:	88fa      	ldrh	r2, [r7, #6]
 8011072:	4619      	mov	r1, r3
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f000 fadf 	bl	8011638 <sendCanPkts>
				if(Debug_flag == 1)
 801107a:	4b64      	ldr	r3, [pc, #400]	; (801120c <TransmitCanPkt+0x2ac>)
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	2b01      	cmp	r3, #1
 8011080:	d174      	bne.n	801116c <TransmitCanPkt+0x20c>
					printf("SENT ReArranged SIGNAL DATA TO MIE\n");
 8011082:	4865      	ldr	r0, [pc, #404]	; (8011218 <TransmitCanPkt+0x2b8>)
 8011084:	f015 fd7a 	bl	8026b7c <puts>
			break;
 8011088:	e070      	b.n	801116c <TransmitCanPkt+0x20c>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 801108a:	4b64      	ldr	r3, [pc, #400]	; (801121c <TransmitCanPkt+0x2bc>)
 801108c:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 801108e:	2316      	movs	r3, #22
 8011090:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011092:	4b5e      	ldr	r3, [pc, #376]	; (801120c <TransmitCanPkt+0x2ac>)
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	2b01      	cmp	r3, #1
 8011098:	d102      	bne.n	80110a0 <TransmitCanPkt+0x140>
			{
				printf("\nHealth 2 MIE\n");
 801109a:	4861      	ldr	r0, [pc, #388]	; (8011220 <TransmitCanPkt+0x2c0>)
 801109c:	f015 fd6e 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80110a0:	8afb      	ldrh	r3, [r7, #22]
 80110a2:	88fa      	ldrh	r2, [r7, #6]
 80110a4:	4619      	mov	r1, r3
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f000 fac6 	bl	8011638 <sendCanPkts>
			break;
 80110ac:	e061      	b.n	8011172 <TransmitCanPkt+0x212>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 80110ae:	4b5d      	ldr	r3, [pc, #372]	; (8011224 <TransmitCanPkt+0x2c4>)
 80110b0:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(EI_SELF_SHARING_t);
 80110b2:	2318      	movs	r3, #24
 80110b4:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80110b6:	8afb      	ldrh	r3, [r7, #22]
 80110b8:	88fa      	ldrh	r2, [r7, #6]
 80110ba:	4619      	mov	r1, r3
 80110bc:	68f8      	ldr	r0, [r7, #12]
 80110be:	f000 fabb 	bl	8011638 <sendCanPkts>
			if(Debug_flag == 1)
 80110c2:	4b52      	ldr	r3, [pc, #328]	; (801120c <TransmitCanPkt+0x2ac>)
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d152      	bne.n	8011170 <TransmitCanPkt+0x210>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 80110ca:	4b56      	ldr	r3, [pc, #344]	; (8011224 <TransmitCanPkt+0x2c4>)
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	4619      	mov	r1, r3
 80110d0:	4855      	ldr	r0, [pc, #340]	; (8011228 <TransmitCanPkt+0x2c8>)
 80110d2:	f015 fcb7 	bl	8026a44 <iprintf>
			}
			break;
 80110d6:	e04b      	b.n	8011170 <TransmitCanPkt+0x210>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 80110d8:	4b54      	ldr	r3, [pc, #336]	; (801122c <TransmitCanPkt+0x2cc>)
 80110da:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 80110dc:	2346      	movs	r3, #70	; 0x46
 80110de:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80110e0:	4b4a      	ldr	r3, [pc, #296]	; (801120c <TransmitCanPkt+0x2ac>)
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	d102      	bne.n	80110ee <TransmitCanPkt+0x18e>
			{
				printf("\nSending V-Message 2-O\n");
 80110e8:	4851      	ldr	r0, [pc, #324]	; (8011230 <TransmitCanPkt+0x2d0>)
 80110ea:	f015 fd47 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80110ee:	8afb      	ldrh	r3, [r7, #22]
 80110f0:	88fa      	ldrh	r2, [r7, #6]
 80110f2:	4619      	mov	r1, r3
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f000 fa9f 	bl	8011638 <sendCanPkts>
			break;
 80110fa:	e03a      	b.n	8011172 <TransmitCanPkt+0x212>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 80110fc:	4b3f      	ldr	r3, [pc, #252]	; (80111fc <TransmitCanPkt+0x29c>)
 80110fe:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 8011100:	2308      	movs	r3, #8
 8011102:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011104:	4b41      	ldr	r3, [pc, #260]	; (801120c <TransmitCanPkt+0x2ac>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	2b01      	cmp	r3, #1
 801110a:	d102      	bne.n	8011112 <TransmitCanPkt+0x1b2>
			{
				printf("\nSending Fault Injection data 2-O\n");
 801110c:	4849      	ldr	r0, [pc, #292]	; (8011234 <TransmitCanPkt+0x2d4>)
 801110e:	f015 fd35 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8011112:	8afb      	ldrh	r3, [r7, #22]
 8011114:	88fa      	ldrh	r2, [r7, #6]
 8011116:	4619      	mov	r1, r3
 8011118:	68f8      	ldr	r0, [r7, #12]
 801111a:	f000 fa8d 	bl	8011638 <sendCanPkts>
			break;
 801111e:	e028      	b.n	8011172 <TransmitCanPkt+0x212>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 8011120:	4b45      	ldr	r3, [pc, #276]	; (8011238 <TransmitCanPkt+0x2d8>)
 8011122:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(RELAYS_t);
 8011124:	2314      	movs	r3, #20
 8011126:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011128:	4b38      	ldr	r3, [pc, #224]	; (801120c <TransmitCanPkt+0x2ac>)
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	2b01      	cmp	r3, #1
 801112e:	d102      	bne.n	8011136 <TransmitCanPkt+0x1d6>
			{
				printf("Sending Relays-O\n");
 8011130:	4842      	ldr	r0, [pc, #264]	; (801123c <TransmitCanPkt+0x2dc>)
 8011132:	f015 fd23 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011136:	8afb      	ldrh	r3, [r7, #22]
 8011138:	88fa      	ldrh	r2, [r7, #6]
 801113a:	4619      	mov	r1, r3
 801113c:	68f8      	ldr	r0, [r7, #12]
 801113e:	f000 fa7b 	bl	8011638 <sendCanPkts>
			break;
 8011142:	e016      	b.n	8011172 <TransmitCanPkt+0x212>

		case DAT_CRC_EXCHANGE_1:
		case DAT_CRC_EXCHANGE_2:
			pp_ptr = &DatCrcXchangeOther_st;
 8011144:	4b3e      	ldr	r3, [pc, #248]	; (8011240 <TransmitCanPkt+0x2e0>)
 8011146:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 8011148:	2302      	movs	r3, #2
 801114a:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 801114c:	4b2f      	ldr	r3, [pc, #188]	; (801120c <TransmitCanPkt+0x2ac>)
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	2b01      	cmp	r3, #1
 8011152:	d102      	bne.n	801115a <TransmitCanPkt+0x1fa>
			{
				printf("Sending App Data CRC to Other\n");
 8011154:	483b      	ldr	r0, [pc, #236]	; (8011244 <TransmitCanPkt+0x2e4>)
 8011156:	f015 fd11 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 801115a:	8afb      	ldrh	r3, [r7, #22]
 801115c:	88fa      	ldrh	r2, [r7, #6]
 801115e:	4619      	mov	r1, r3
 8011160:	68f8      	ldr	r0, [r7, #12]
 8011162:	f000 fa69 	bl	8011638 <sendCanPkts>
			break;
 8011166:	e004      	b.n	8011172 <TransmitCanPkt+0x212>


		default:
			break;
 8011168:	bf00      	nop
 801116a:	e24c      	b.n	8011606 <TransmitCanPkt+0x6a6>
			break;
 801116c:	bf00      	nop
 801116e:	e24a      	b.n	8011606 <TransmitCanPkt+0x6a6>
			break;
 8011170:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 8011172:	e248      	b.n	8011606 <TransmitCanPkt+0x6a6>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 8011174:	88fb      	ldrh	r3, [r7, #6]
 8011176:	f240 1219 	movw	r2, #281	; 0x119
 801117a:	4293      	cmp	r3, r2
 801117c:	d028      	beq.n	80111d0 <TransmitCanPkt+0x270>
 801117e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8011182:	f340 80c3 	ble.w	801130c <TransmitCanPkt+0x3ac>
 8011186:	f240 220a 	movw	r2, #522	; 0x20a
 801118a:	4293      	cmp	r3, r2
 801118c:	f300 80be 	bgt.w	801130c <TransmitCanPkt+0x3ac>
 8011190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011194:	f340 80ba 	ble.w	801130c <TransmitCanPkt+0x3ac>
 8011198:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801119c:	2b09      	cmp	r3, #9
 801119e:	f200 80b5 	bhi.w	801130c <TransmitCanPkt+0x3ac>
 80111a2:	a201      	add	r2, pc, #4	; (adr r2, 80111a8 <TransmitCanPkt+0x248>)
 80111a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111a8:	08011251 	.word	0x08011251
 80111ac:	08011251 	.word	0x08011251
 80111b0:	0801130d 	.word	0x0801130d
 80111b4:	0801130d 	.word	0x0801130d
 80111b8:	080112cd 	.word	0x080112cd
 80111bc:	0801130d 	.word	0x0801130d
 80111c0:	08011275 	.word	0x08011275
 80111c4:	08011275 	.word	0x08011275
 80111c8:	080112e9 	.word	0x080112e9
 80111cc:	080112e9 	.word	0x080112e9
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 80111d0:	4b1d      	ldr	r3, [pc, #116]	; (8011248 <TransmitCanPkt+0x2e8>)
 80111d2:	60fb      	str	r3, [r7, #12]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 80111d4:	4b1c      	ldr	r3, [pc, #112]	; (8011248 <TransmitCanPkt+0x2e8>)
 80111d6:	881b      	ldrh	r3, [r3, #0]
 80111d8:	3302      	adds	r3, #2
 80111da:	82fb      	strh	r3, [r7, #22]

			if(Debug_flag == 1)
 80111dc:	4b0b      	ldr	r3, [pc, #44]	; (801120c <TransmitCanPkt+0x2ac>)
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d102      	bne.n	80111ea <TransmitCanPkt+0x28a>
			{
				printf("Sending Signals 2 MIE\n");
 80111e4:	4819      	ldr	r0, [pc, #100]	; (801124c <TransmitCanPkt+0x2ec>)
 80111e6:	f015 fcc9 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80111ea:	8afb      	ldrh	r3, [r7, #22]
 80111ec:	88fa      	ldrh	r2, [r7, #6]
 80111ee:	4619      	mov	r1, r3
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f000 fa21 	bl	8011638 <sendCanPkts>
			break;
 80111f6:	e08a      	b.n	801130e <TransmitCanPkt+0x3ae>
 80111f8:	20000504 	.word	0x20000504
 80111fc:	2000308c 	.word	0x2000308c
 8011200:	0802b26c 	.word	0x0802b26c
 8011204:	2000254e 	.word	0x2000254e
 8011208:	20002770 	.word	0x20002770
 801120c:	20000bbb 	.word	0x20000bbb
 8011210:	0802b288 	.word	0x0802b288
 8011214:	20002814 	.word	0x20002814
 8011218:	0802b2a0 	.word	0x0802b2a0
 801121c:	20003094 	.word	0x20003094
 8011220:	0802b2c4 	.word	0x0802b2c4
 8011224:	20002f84 	.word	0x20002f84
 8011228:	0802b2d4 	.word	0x0802b2d4
 801122c:	20002fb4 	.word	0x20002fb4
 8011230:	0802b2e0 	.word	0x0802b2e0
 8011234:	0802b2f8 	.word	0x0802b2f8
 8011238:	20003740 	.word	0x20003740
 801123c:	0802b31c 	.word	0x0802b31c
 8011240:	20000bb8 	.word	0x20000bb8
 8011244:	0802b330 	.word	0x0802b330
 8011248:	20004c9c 	.word	0x20004c9c
 801124c:	0802b350 	.word	0x0802b350

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 8011250:	4b9c      	ldr	r3, [pc, #624]	; (80114c4 <TransmitCanPkt+0x564>)
 8011252:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 8011254:	2304      	movs	r3, #4
 8011256:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011258:	4b9b      	ldr	r3, [pc, #620]	; (80114c8 <TransmitCanPkt+0x568>)
 801125a:	781b      	ldrb	r3, [r3, #0]
 801125c:	2b01      	cmp	r3, #1
 801125e:	d102      	bne.n	8011266 <TransmitCanPkt+0x306>
			{
				printf("Sending Signals 2 MIE\n");
 8011260:	489a      	ldr	r0, [pc, #616]	; (80114cc <TransmitCanPkt+0x56c>)
 8011262:	f015 fc8b 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011266:	8afb      	ldrh	r3, [r7, #22]
 8011268:	88fa      	ldrh	r2, [r7, #6]
 801126a:	4619      	mov	r1, r3
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	f000 f9e3 	bl	8011638 <sendCanPkts>
			break;
 8011272:	e04c      	b.n	801130e <TransmitCanPkt+0x3ae>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 8011274:	4b96      	ldr	r3, [pc, #600]	; (80114d0 <TransmitCanPkt+0x570>)
 8011276:	60fb      	str	r3, [r7, #12]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 8011278:	4b96      	ldr	r3, [pc, #600]	; (80114d4 <TransmitCanPkt+0x574>)
 801127a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 801127e:	f003 0307 	and.w	r3, r3, #7
 8011282:	82fb      	strh	r3, [r7, #22]
			if (uc_size != 0)
 8011284:	8afb      	ldrh	r3, [r7, #22]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d007      	beq.n	801129a <TransmitCanPkt+0x33a>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 801128a:	4b92      	ldr	r3, [pc, #584]	; (80114d4 <TransmitCanPkt+0x574>)
 801128c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8011290:	08db      	lsrs	r3, r3, #3
 8011292:	b29b      	uxth	r3, r3
 8011294:	3301      	adds	r3, #1
 8011296:	82fb      	strh	r3, [r7, #22]
 8011298:	e004      	b.n	80112a4 <TransmitCanPkt+0x344>
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 801129a:	4b8e      	ldr	r3, [pc, #568]	; (80114d4 <TransmitCanPkt+0x574>)
 801129c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80112a0:	08db      	lsrs	r3, r3, #3
 80112a2:	82fb      	strh	r3, [r7, #22]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 80112a4:	4a8a      	ldr	r2, [pc, #552]	; (80114d0 <TransmitCanPkt+0x570>)
 80112a6:	8afb      	ldrh	r3, [r7, #22]
 80112a8:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 80112aa:	8afb      	ldrh	r3, [r7, #22]
 80112ac:	3304      	adds	r3, #4
 80112ae:	82fb      	strh	r3, [r7, #22]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 80112b0:	4b85      	ldr	r3, [pc, #532]	; (80114c8 <TransmitCanPkt+0x568>)
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d102      	bne.n	80112be <TransmitCanPkt+0x35e>
			{
				printf("Sending Relays 2 Other\n");
 80112b8:	4887      	ldr	r0, [pc, #540]	; (80114d8 <TransmitCanPkt+0x578>)
 80112ba:	f015 fc5f 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80112be:	8afb      	ldrh	r3, [r7, #22]
 80112c0:	88fa      	ldrh	r2, [r7, #6]
 80112c2:	4619      	mov	r1, r3
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	f000 f9b7 	bl	8011638 <sendCanPkts>
			break;
 80112ca:	e020      	b.n	801130e <TransmitCanPkt+0x3ae>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 80112cc:	4b83      	ldr	r3, [pc, #524]	; (80114dc <TransmitCanPkt+0x57c>)
 80112ce:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 80112d0:	2308      	movs	r3, #8
 80112d2:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 80112d4:	4882      	ldr	r0, [pc, #520]	; (80114e0 <TransmitCanPkt+0x580>)
 80112d6:	f015 fc51 	bl	8026b7c <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80112da:	8afb      	ldrh	r3, [r7, #22]
 80112dc:	88fa      	ldrh	r2, [r7, #6]
 80112de:	4619      	mov	r1, r3
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	f000 f9a9 	bl	8011638 <sendCanPkts>
			break;
 80112e6:	e012      	b.n	801130e <TransmitCanPkt+0x3ae>

		case DAT_CRC_EXCHANGE_1:
		case DAT_CRC_EXCHANGE_2:
			pp_ptr = &DatCrcXchangeOther_st;
 80112e8:	4b7e      	ldr	r3, [pc, #504]	; (80114e4 <TransmitCanPkt+0x584>)
 80112ea:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 80112ec:	2302      	movs	r3, #2
 80112ee:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80112f0:	4b75      	ldr	r3, [pc, #468]	; (80114c8 <TransmitCanPkt+0x568>)
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d102      	bne.n	80112fe <TransmitCanPkt+0x39e>
			{
				printf("Sending App Data CRC to Other\n");
 80112f8:	487b      	ldr	r0, [pc, #492]	; (80114e8 <TransmitCanPkt+0x588>)
 80112fa:	f015 fc3f 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80112fe:	8afb      	ldrh	r3, [r7, #22]
 8011300:	88fa      	ldrh	r2, [r7, #6]
 8011302:	4619      	mov	r1, r3
 8011304:	68f8      	ldr	r0, [r7, #12]
 8011306:	f000 f997 	bl	8011638 <sendCanPkts>
			break;
 801130a:	e000      	b.n	801130e <TransmitCanPkt+0x3ae>

		default:
			break;
 801130c:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 801130e:	e17a      	b.n	8011606 <TransmitCanPkt+0x6a6>

	case MEDHA:
	{

		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 8011310:	88fb      	ldrh	r3, [r7, #6]
 8011312:	f240 220a 	movw	r2, #522	; 0x20a
 8011316:	4293      	cmp	r3, r2
 8011318:	f300 80b5 	bgt.w	8011486 <TransmitCanPkt+0x526>
 801131c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011320:	dc0d      	bgt.n	801133e <TransmitCanPkt+0x3de>
 8011322:	f240 1219 	movw	r2, #281	; 0x119
 8011326:	4293      	cmp	r3, r2
 8011328:	d026      	beq.n	8011378 <TransmitCanPkt+0x418>
 801132a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801132e:	f340 80aa 	ble.w	8011486 <TransmitCanPkt+0x526>
 8011332:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8011336:	2b01      	cmp	r3, #1
 8011338:	f200 80a5 	bhi.w	8011486 <TransmitCanPkt+0x526>
 801133c:	e05f      	b.n	80113fe <TransmitCanPkt+0x49e>
 801133e:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011342:	2b09      	cmp	r3, #9
 8011344:	f200 809f 	bhi.w	8011486 <TransmitCanPkt+0x526>
 8011348:	a201      	add	r2, pc, #4	; (adr r2, 8011350 <TransmitCanPkt+0x3f0>)
 801134a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801134e:	bf00      	nop
 8011350:	080113db 	.word	0x080113db
 8011354:	080113db 	.word	0x080113db
 8011358:	08011487 	.word	0x08011487
 801135c:	08011487 	.word	0x08011487
 8011360:	08011423 	.word	0x08011423
 8011364:	08011487 	.word	0x08011487
 8011368:	0801143f 	.word	0x0801143f
 801136c:	0801143f 	.word	0x0801143f
 8011370:	08011463 	.word	0x08011463
 8011374:	08011463 	.word	0x08011463
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 8011378:	4b5c      	ldr	r3, [pc, #368]	; (80114ec <TransmitCanPkt+0x58c>)
 801137a:	60fb      	str	r3, [r7, #12]

			uint16_t Length =  EI_data.Medha_Prms_st.NoofRelays%8;
 801137c:	4b55      	ldr	r3, [pc, #340]	; (80114d4 <TransmitCanPkt+0x574>)
 801137e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8011382:	b29b      	uxth	r3, r3
 8011384:	f003 0307 	and.w	r3, r3, #7
 8011388:	82bb      	strh	r3, [r7, #20]

			if(Length != 0)
 801138a:	8abb      	ldrh	r3, [r7, #20]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d007      	beq.n	80113a0 <TransmitCanPkt+0x440>
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8) + 1;
 8011390:	4b50      	ldr	r3, [pc, #320]	; (80114d4 <TransmitCanPkt+0x574>)
 8011392:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8011396:	08db      	lsrs	r3, r3, #3
 8011398:	b29b      	uxth	r3, r3
 801139a:	3301      	adds	r3, #1
 801139c:	82bb      	strh	r3, [r7, #20]
 801139e:	e004      	b.n	80113aa <TransmitCanPkt+0x44a>
			}
			else
			{
				Length = ((EI_data.Medha_Prms_st.NoofRelays)/8);
 80113a0:	4b4c      	ldr	r3, [pc, #304]	; (80114d4 <TransmitCanPkt+0x574>)
 80113a2:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80113a6:	08db      	lsrs	r3, r3, #3
 80113a8:	82bb      	strh	r3, [r7, #20]
			}

			Medha_Relay_Sts_st.ActualDataBytes =  Length;
 80113aa:	4a50      	ldr	r2, [pc, #320]	; (80114ec <TransmitCanPkt+0x58c>)
 80113ac:	8abb      	ldrh	r3, [r7, #20]
 80113ae:	8013      	strh	r3, [r2, #0]
			uc_size =(Length + sizeof(Length)); /* +2 is by Considering */
 80113b0:	8abb      	ldrh	r3, [r7, #20]
 80113b2:	3302      	adds	r3, #2
 80113b4:	82fb      	strh	r3, [r7, #22]

			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80113b6:	8afb      	ldrh	r3, [r7, #22]
 80113b8:	88fa      	ldrh	r2, [r7, #6]
 80113ba:	4619      	mov	r1, r3
 80113bc:	68f8      	ldr	r0, [r7, #12]
 80113be:	f000 f93b 	bl	8011638 <sendCanPkts>
			if(Debug_flag == 1)
 80113c2:	4b41      	ldr	r3, [pc, #260]	; (80114c8 <TransmitCanPkt+0x568>)
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	2b01      	cmp	r3, #1
 80113c8:	d15f      	bne.n	801148a <TransmitCanPkt+0x52a>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 80113ca:	f008 fb31 	bl	8019a30 <HAL_GetTick>
 80113ce:	4603      	mov	r3, r0
 80113d0:	4619      	mov	r1, r3
 80113d2:	4847      	ldr	r0, [pc, #284]	; (80114f0 <TransmitCanPkt+0x590>)
 80113d4:	f015 fb36 	bl	8026a44 <iprintf>
			}
			break;
 80113d8:	e057      	b.n	801148a <TransmitCanPkt+0x52a>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 80113da:	4b46      	ldr	r3, [pc, #280]	; (80114f4 <TransmitCanPkt+0x594>)
 80113dc:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 80113de:	2308      	movs	r3, #8
 80113e0:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80113e2:	4b39      	ldr	r3, [pc, #228]	; (80114c8 <TransmitCanPkt+0x568>)
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	d102      	bne.n	80113f0 <TransmitCanPkt+0x490>
			{
				printf("\nSending_2_O\n");
 80113ea:	4843      	ldr	r0, [pc, #268]	; (80114f8 <TransmitCanPkt+0x598>)
 80113ec:	f015 fbc6 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80113f0:	8afb      	ldrh	r3, [r7, #22]
 80113f2:	88fa      	ldrh	r2, [r7, #6]
 80113f4:	4619      	mov	r1, r3
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f000 f91e 	bl	8011638 <sendCanPkts>
			break;
 80113fc:	e046      	b.n	801148c <TransmitCanPkt+0x52c>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 80113fe:	4b3f      	ldr	r3, [pc, #252]	; (80114fc <TransmitCanPkt+0x59c>)
 8011400:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 8011402:	2316      	movs	r3, #22
 8011404:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011406:	4b30      	ldr	r3, [pc, #192]	; (80114c8 <TransmitCanPkt+0x568>)
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	2b01      	cmp	r3, #1
 801140c:	d102      	bne.n	8011414 <TransmitCanPkt+0x4b4>
			{
				printf("\nHealth 2 MIE\n");
 801140e:	483c      	ldr	r0, [pc, #240]	; (8011500 <TransmitCanPkt+0x5a0>)
 8011410:	f015 fbb4 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011414:	8afb      	ldrh	r3, [r7, #22]
 8011416:	88fa      	ldrh	r2, [r7, #6]
 8011418:	4619      	mov	r1, r3
 801141a:	68f8      	ldr	r0, [r7, #12]
 801141c:	f000 f90c 	bl	8011638 <sendCanPkts>
			break;
 8011420:	e034      	b.n	801148c <TransmitCanPkt+0x52c>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 8011422:	4b38      	ldr	r3, [pc, #224]	; (8011504 <TransmitCanPkt+0x5a4>)
 8011424:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 8011426:	2304      	movs	r3, #4
 8011428:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 801142a:	482d      	ldr	r0, [pc, #180]	; (80114e0 <TransmitCanPkt+0x580>)
 801142c:	f015 fba6 	bl	8026b7c <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011430:	8afb      	ldrh	r3, [r7, #22]
 8011432:	88fa      	ldrh	r2, [r7, #6]
 8011434:	4619      	mov	r1, r3
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f000 f8fe 	bl	8011638 <sendCanPkts>
			break;
 801143c:	e026      	b.n	801148c <TransmitCanPkt+0x52c>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 801143e:	4b32      	ldr	r3, [pc, #200]	; (8011508 <TransmitCanPkt+0x5a8>)
 8011440:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 8011442:	2384      	movs	r3, #132	; 0x84
 8011444:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 8011446:	4b20      	ldr	r3, [pc, #128]	; (80114c8 <TransmitCanPkt+0x568>)
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d102      	bne.n	8011454 <TransmitCanPkt+0x4f4>
			{
				printf("\nRelay Data 2-O\n");
 801144e:	482f      	ldr	r0, [pc, #188]	; (801150c <TransmitCanPkt+0x5ac>)
 8011450:	f015 fb94 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011454:	8afb      	ldrh	r3, [r7, #22]
 8011456:	88fa      	ldrh	r2, [r7, #6]
 8011458:	4619      	mov	r1, r3
 801145a:	68f8      	ldr	r0, [r7, #12]
 801145c:	f000 f8ec 	bl	8011638 <sendCanPkts>
			break;
 8011460:	e014      	b.n	801148c <TransmitCanPkt+0x52c>

		case DAT_CRC_EXCHANGE_1:
		case DAT_CRC_EXCHANGE_2:
			pp_ptr = &DatCrcXchangeOther_st;
 8011462:	4b20      	ldr	r3, [pc, #128]	; (80114e4 <TransmitCanPkt+0x584>)
 8011464:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 8011466:	2302      	movs	r3, #2
 8011468:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 801146a:	4b17      	ldr	r3, [pc, #92]	; (80114c8 <TransmitCanPkt+0x568>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d102      	bne.n	8011478 <TransmitCanPkt+0x518>
			{
				printf("Sending App Data CRC to Other\n");
 8011472:	481d      	ldr	r0, [pc, #116]	; (80114e8 <TransmitCanPkt+0x588>)
 8011474:	f015 fb82 	bl	8026b7c <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 8011478:	8afb      	ldrh	r3, [r7, #22]
 801147a:	88fa      	ldrh	r2, [r7, #6]
 801147c:	4619      	mov	r1, r3
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	f000 f8da 	bl	8011638 <sendCanPkts>
			break;
 8011484:	e002      	b.n	801148c <TransmitCanPkt+0x52c>

		default:
			break;
 8011486:	bf00      	nop
 8011488:	e0bd      	b.n	8011606 <TransmitCanPkt+0x6a6>
			break;
 801148a:	bf00      	nop
		}

		break;
 801148c:	e0bb      	b.n	8011606 <TransmitCanPkt+0x6a6>
		/* _____________________________ MEDHA ________________________________________ */

	}
	case KYOSAN:
	{
		switch((int)Ken_idetifier)
 801148e:	88fb      	ldrh	r3, [r7, #6]
 8011490:	f240 220a 	movw	r2, #522	; 0x20a
 8011494:	4293      	cmp	r3, r2
 8011496:	f300 80b2 	bgt.w	80115fe <TransmitCanPkt+0x69e>
 801149a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801149e:	f300 809c 	bgt.w	80115da <TransmitCanPkt+0x67a>
 80114a2:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80114a6:	f300 80aa 	bgt.w	80115fe <TransmitCanPkt+0x69e>
 80114aa:	f240 2207 	movw	r2, #519	; 0x207
 80114ae:	4293      	cmp	r3, r2
 80114b0:	da77      	bge.n	80115a2 <TransmitCanPkt+0x642>
 80114b2:	f240 1219 	movw	r2, #281	; 0x119
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d02a      	beq.n	8011510 <TransmitCanPkt+0x5b0>
 80114ba:	f240 2205 	movw	r2, #517	; 0x205
 80114be:	4293      	cmp	r3, r2
 80114c0:	d07d      	beq.n	80115be <TransmitCanPkt+0x65e>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
			break;

		default:
			break;
 80114c2:	e09c      	b.n	80115fe <TransmitCanPkt+0x69e>
 80114c4:	20004c74 	.word	0x20004c74
 80114c8:	20000bbb 	.word	0x20000bbb
 80114cc:	0802b350 	.word	0x0802b350
 80114d0:	20004ea0 	.word	0x20004ea0
 80114d4:	20000504 	.word	0x20000504
 80114d8:	0802b368 	.word	0x0802b368
 80114dc:	20004c6c 	.word	0x20004c6c
 80114e0:	0802b2f8 	.word	0x0802b2f8
 80114e4:	20000bb8 	.word	0x20000bb8
 80114e8:	0802b330 	.word	0x0802b330
 80114ec:	20003dc0 	.word	0x20003dc0
 80114f0:	0802b380 	.word	0x0802b380
 80114f4:	20003e04 	.word	0x20003e04
 80114f8:	0802b3a4 	.word	0x0802b3a4
 80114fc:	20003094 	.word	0x20003094
 8011500:	0802b2c4 	.word	0x0802b2c4
 8011504:	20003e00 	.word	0x20003e00
 8011508:	20003e1c 	.word	0x20003e1c
 801150c:	0802b3b4 	.word	0x0802b3b4
			memcpy(Kyosan_can_relays_st.Relays,Kyosan_FinalRelays.Relays,MAX_KYOSAN_RELAYS);
 8011510:	4a3e      	ldr	r2, [pc, #248]	; (801160c <TransmitCanPkt+0x6ac>)
 8011512:	4b3f      	ldr	r3, [pc, #252]	; (8011610 <TransmitCanPkt+0x6b0>)
 8011514:	3302      	adds	r3, #2
 8011516:	1c90      	adds	r0, r2, #2
 8011518:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801151c:	4602      	mov	r2, r0
 801151e:	4619      	mov	r1, r3
 8011520:	f8d1 c000 	ldr.w	ip, [r1]
 8011524:	684e      	ldr	r6, [r1, #4]
 8011526:	688d      	ldr	r5, [r1, #8]
 8011528:	68c9      	ldr	r1, [r1, #12]
 801152a:	f8c2 c000 	str.w	ip, [r2]
 801152e:	6056      	str	r6, [r2, #4]
 8011530:	6095      	str	r5, [r2, #8]
 8011532:	60d1      	str	r1, [r2, #12]
 8011534:	3310      	adds	r3, #16
 8011536:	3010      	adds	r0, #16
 8011538:	42a3      	cmp	r3, r4
 801153a:	d1ef      	bne.n	801151c <TransmitCanPkt+0x5bc>
 801153c:	4602      	mov	r2, r0
 801153e:	6818      	ldr	r0, [r3, #0]
 8011540:	6859      	ldr	r1, [r3, #4]
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	6010      	str	r0, [r2, #0]
 8011546:	6051      	str	r1, [r2, #4]
 8011548:	6093      	str	r3, [r2, #8]
			Kyosan_can_relays_st.No_Of_CAN_Bytes = 60;
 801154a:	4b30      	ldr	r3, [pc, #192]	; (801160c <TransmitCanPkt+0x6ac>)
 801154c:	223c      	movs	r2, #60	; 0x3c
 801154e:	801a      	strh	r2, [r3, #0]
			pp_ptr = &Kyosan_can_relays_st;
 8011550:	4b2e      	ldr	r3, [pc, #184]	; (801160c <TransmitCanPkt+0x6ac>)
 8011552:	60fb      	str	r3, [r7, #12]
			uc_size =(sizeof(KYOSAN_CAN_RELAYS_t));
 8011554:	233e      	movs	r3, #62	; 0x3e
 8011556:	82fb      	strh	r3, [r7, #22]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 8011558:	8afb      	ldrh	r3, [r7, #22]
 801155a:	88fa      	ldrh	r2, [r7, #6]
 801155c:	4619      	mov	r1, r3
 801155e:	68f8      	ldr	r0, [r7, #12]
 8011560:	f000 f86a 	bl	8011638 <sendCanPkts>
			if(Debug_flag == 1)
 8011564:	4b2b      	ldr	r3, [pc, #172]	; (8011614 <TransmitCanPkt+0x6b4>)
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	2b01      	cmp	r3, #1
 801156a:	d14a      	bne.n	8011602 <TransmitCanPkt+0x6a2>
				printf("SENT SIGNAL DATA TO MIE\n");
 801156c:	482a      	ldr	r0, [pc, #168]	; (8011618 <TransmitCanPkt+0x6b8>)
 801156e:	f015 fb05 	bl	8026b7c <puts>
				for(uint8_t i=0;i<Kyosan_can_relays_st.No_Of_CAN_Bytes;++i)
 8011572:	2300      	movs	r3, #0
 8011574:	74fb      	strb	r3, [r7, #19]
 8011576:	e00a      	b.n	801158e <TransmitCanPkt+0x62e>
					printf("%02X ",Kyosan_can_relays_st.Relays[i]);
 8011578:	7cfb      	ldrb	r3, [r7, #19]
 801157a:	4a24      	ldr	r2, [pc, #144]	; (801160c <TransmitCanPkt+0x6ac>)
 801157c:	4413      	add	r3, r2
 801157e:	789b      	ldrb	r3, [r3, #2]
 8011580:	4619      	mov	r1, r3
 8011582:	4826      	ldr	r0, [pc, #152]	; (801161c <TransmitCanPkt+0x6bc>)
 8011584:	f015 fa5e 	bl	8026a44 <iprintf>
				for(uint8_t i=0;i<Kyosan_can_relays_st.No_Of_CAN_Bytes;++i)
 8011588:	7cfb      	ldrb	r3, [r7, #19]
 801158a:	3301      	adds	r3, #1
 801158c:	74fb      	strb	r3, [r7, #19]
 801158e:	7cfb      	ldrb	r3, [r7, #19]
 8011590:	b29a      	uxth	r2, r3
 8011592:	4b1e      	ldr	r3, [pc, #120]	; (801160c <TransmitCanPkt+0x6ac>)
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	429a      	cmp	r2, r3
 8011598:	d3ee      	bcc.n	8011578 <TransmitCanPkt+0x618>
				printf("\n");
 801159a:	200a      	movs	r0, #10
 801159c:	f015 fa6a 	bl	8026a74 <putchar>
			break;
 80115a0:	e02f      	b.n	8011602 <TransmitCanPkt+0x6a2>
			pp_ptr = &Kyosan_SelfRelays;
 80115a2:	4b1f      	ldr	r3, [pc, #124]	; (8011620 <TransmitCanPkt+0x6c0>)
 80115a4:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_RELAYS_t);
 80115a6:	2340      	movs	r3, #64	; 0x40
 80115a8:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Relays 2-O\n");
 80115aa:	481e      	ldr	r0, [pc, #120]	; (8011624 <TransmitCanPkt+0x6c4>)
 80115ac:	f015 fae6 	bl	8026b7c <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80115b0:	8afb      	ldrh	r3, [r7, #22]
 80115b2:	88fa      	ldrh	r2, [r7, #6]
 80115b4:	4619      	mov	r1, r3
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	f000 f83e 	bl	8011638 <sendCanPkts>
			break;
 80115bc:	e022      	b.n	8011604 <TransmitCanPkt+0x6a4>
			pp_ptr = &KyosanFaultInjection_st;
 80115be:	4b1a      	ldr	r3, [pc, #104]	; (8011628 <TransmitCanPkt+0x6c8>)
 80115c0:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(KYOSAN_FAULT_INJECTION_t);
 80115c2:	2308      	movs	r3, #8
 80115c4:	82fb      	strh	r3, [r7, #22]
			printf("\nSending Fault Injection data 2-O\n");
 80115c6:	4819      	ldr	r0, [pc, #100]	; (801162c <TransmitCanPkt+0x6cc>)
 80115c8:	f015 fad8 	bl	8026b7c <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 80115cc:	8afb      	ldrh	r3, [r7, #22]
 80115ce:	88fa      	ldrh	r2, [r7, #6]
 80115d0:	4619      	mov	r1, r3
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f000 f830 	bl	8011638 <sendCanPkts>
			break;
 80115d8:	e014      	b.n	8011604 <TransmitCanPkt+0x6a4>
			pp_ptr = &DatCrcXchangeOther_st;
 80115da:	4b15      	ldr	r3, [pc, #84]	; (8011630 <TransmitCanPkt+0x6d0>)
 80115dc:	60fb      	str	r3, [r7, #12]
			uc_size = sizeof(DAT_CRC_XCHANGE_t);
 80115de:	2302      	movs	r3, #2
 80115e0:	82fb      	strh	r3, [r7, #22]
			if(Debug_flag == 1)
 80115e2:	4b0c      	ldr	r3, [pc, #48]	; (8011614 <TransmitCanPkt+0x6b4>)
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d102      	bne.n	80115f0 <TransmitCanPkt+0x690>
				printf("Sending App Data CRC to Other\n");
 80115ea:	4812      	ldr	r0, [pc, #72]	; (8011634 <TransmitCanPkt+0x6d4>)
 80115ec:	f015 fac6 	bl	8026b7c <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 80115f0:	8afb      	ldrh	r3, [r7, #22]
 80115f2:	88fa      	ldrh	r2, [r7, #6]
 80115f4:	4619      	mov	r1, r3
 80115f6:	68f8      	ldr	r0, [r7, #12]
 80115f8:	f000 f81e 	bl	8011638 <sendCanPkts>
			break;
 80115fc:	e002      	b.n	8011604 <TransmitCanPkt+0x6a4>
			break;
 80115fe:	bf00      	nop
 8011600:	e000      	b.n	8011604 <TransmitCanPkt+0x6a4>
			break;
 8011602:	bf00      	nop
		}
		break;
 8011604:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 8011606:	371c      	adds	r7, #28
 8011608:	46bd      	mov	sp, r7
 801160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801160c:	2000b598 	.word	0x2000b598
 8011610:	2000b558 	.word	0x2000b558
 8011614:	20000bbb 	.word	0x20000bbb
 8011618:	0802b288 	.word	0x0802b288
 801161c:	0802b3c4 	.word	0x0802b3c4
 8011620:	2000b498 	.word	0x2000b498
 8011624:	0802b3cc 	.word	0x0802b3cc
 8011628:	2000b47c 	.word	0x2000b47c
 801162c:	0802b2f8 	.word	0x0802b2f8
 8011630:	20000bb8 	.word	0x20000bb8
 8011634:	0802b330 	.word	0x0802b330

08011638 <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b088      	sub	sp, #32
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	4613      	mov	r3, r2
 8011644:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	61fb      	str	r3, [r7, #28]
 801164a:	2300      	movs	r3, #0
 801164c:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	617b      	str	r3, [r7, #20]
	while(j > 0)
 8011652:	e019      	b.n	8011688 <sendCanPkts+0x50>
	{
		if(j < 7)
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	2b06      	cmp	r3, #6
 8011658:	dc07      	bgt.n	801166a <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 801165a:	88f8      	ldrh	r0, [r7, #6]
 801165c:	69fb      	ldr	r3, [r7, #28]
 801165e:	1c5a      	adds	r2, r3, #1
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	6979      	ldr	r1, [r7, #20]
 8011664:	f000 f818 	bl	8011698 <CAN_transmit>
 8011668:	e005      	b.n	8011676 <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 801166a:	88f8      	ldrh	r0, [r7, #6]
 801166c:	69bb      	ldr	r3, [r7, #24]
 801166e:	2208      	movs	r2, #8
 8011670:	6979      	ldr	r1, [r7, #20]
 8011672:	f000 f811 	bl	8011698 <CAN_transmit>
		}
		cptr += 7;
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	3307      	adds	r3, #7
 801167a:	617b      	str	r3, [r7, #20]
		j-=7;
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	3b07      	subs	r3, #7
 8011680:	61fb      	str	r3, [r7, #28]
		seqNo++;
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	3301      	adds	r3, #1
 8011686:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	2b00      	cmp	r3, #0
 801168c:	dce2      	bgt.n	8011654 <sendCanPkts+0x1c>
	}
}
 801168e:	bf00      	nop
 8011690:	bf00      	nop
 8011692:	3720      	adds	r7, #32
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b088      	sub	sp, #32
 801169c:	af00      	add	r7, sp, #0
 801169e:	60f8      	str	r0, [r7, #12]
 80116a0:	60b9      	str	r1, [r7, #8]
 80116a2:	607a      	str	r2, [r7, #4]
 80116a4:	603b      	str	r3, [r7, #0]
	char i=0;
 80116a6:	2300      	movs	r3, #0
 80116a8:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 80116aa:	f008 f9c1 	bl	8019a30 <HAL_GetTick>
 80116ae:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	b2da      	uxtb	r2, r3
 80116b4:	4b4d      	ldr	r3, [pc, #308]	; (80117ec <CAN_transmit+0x154>)
 80116b6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 80116b8:	2300      	movs	r3, #0
 80116ba:	77fb      	strb	r3, [r7, #31]
 80116bc:	e00a      	b.n	80116d4 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 80116be:	7ffb      	ldrb	r3, [r7, #31]
 80116c0:	68ba      	ldr	r2, [r7, #8]
 80116c2:	441a      	add	r2, r3
 80116c4:	7ffb      	ldrb	r3, [r7, #31]
 80116c6:	3301      	adds	r3, #1
 80116c8:	7811      	ldrb	r1, [r2, #0]
 80116ca:	4a48      	ldr	r2, [pc, #288]	; (80117ec <CAN_transmit+0x154>)
 80116cc:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 80116ce:	7ffb      	ldrb	r3, [r7, #31]
 80116d0:	3301      	adds	r3, #1
 80116d2:	77fb      	strb	r3, [r7, #31]
 80116d4:	7ffa      	ldrb	r2, [r7, #31]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	3b01      	subs	r3, #1
 80116da:	429a      	cmp	r2, r3
 80116dc:	dbef      	blt.n	80116be <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80116e4:	da3b      	bge.n	801175e <CAN_transmit+0xc6>
	{
		while(len!=0)
 80116e6:	e036      	b.n	8011756 <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 80116e8:	4b41      	ldr	r3, [pc, #260]	; (80117f0 <CAN_transmit+0x158>)
 80116ea:	2200      	movs	r2, #0
 80116ec:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	4a3f      	ldr	r2, [pc, #252]	; (80117f0 <CAN_transmit+0x158>)
 80116f2:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 80116f4:	4b3e      	ldr	r3, [pc, #248]	; (80117f0 <CAN_transmit+0x158>)
 80116f6:	2200      	movs	r2, #0
 80116f8:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	4a3c      	ldr	r2, [pc, #240]	; (80117f0 <CAN_transmit+0x158>)
 80116fe:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 8011700:	2300      	movs	r3, #0
 8011702:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 8011704:	4b3b      	ldr	r3, [pc, #236]	; (80117f4 <CAN_transmit+0x15c>)
 8011706:	4a39      	ldr	r2, [pc, #228]	; (80117ec <CAN_transmit+0x154>)
 8011708:	4939      	ldr	r1, [pc, #228]	; (80117f0 <CAN_transmit+0x158>)
 801170a:	483b      	ldr	r0, [pc, #236]	; (80117f8 <CAN_transmit+0x160>)
 801170c:	f008 fc36 	bl	8019f7c <HAL_CAN_AddTxMessage>
 8011710:	4603      	mov	r3, r0
 8011712:	461a      	mov	r2, r3
 8011714:	4b39      	ldr	r3, [pc, #228]	; (80117fc <CAN_transmit+0x164>)
 8011716:	701a      	strb	r2, [r3, #0]
 8011718:	4b38      	ldr	r3, [pc, #224]	; (80117fc <CAN_transmit+0x164>)
 801171a:	781b      	ldrb	r3, [r3, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00d      	beq.n	801173c <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 8011720:	4837      	ldr	r0, [pc, #220]	; (8011800 <CAN_transmit+0x168>)
 8011722:	f015 fa2b 	bl	8026b7c <puts>
				return;
 8011726:	e05e      	b.n	80117e6 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 8011728:	69b8      	ldr	r0, [r7, #24]
 801172a:	f7fe fe65 	bl	80103f8 <HAL_Elaps_Ticks>
 801172e:	4603      	mov	r3, r0
 8011730:	2b64      	cmp	r3, #100	; 0x64
 8011732:	d903      	bls.n	801173c <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 8011734:	4832      	ldr	r0, [pc, #200]	; (8011800 <CAN_transmit+0x168>)
 8011736:	f015 fa21 	bl	8026b7c <puts>
					return;
 801173a:	e054      	b.n	80117e6 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 801173c:	4b2d      	ldr	r3, [pc, #180]	; (80117f4 <CAN_transmit+0x15c>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4619      	mov	r1, r3
 8011742:	482d      	ldr	r0, [pc, #180]	; (80117f8 <CAN_transmit+0x160>)
 8011744:	f008 fcea 	bl	801a11c <HAL_CAN_IsTxMessagePending>
 8011748:	4603      	mov	r3, r0
 801174a:	75bb      	strb	r3, [r7, #22]
 801174c:	7dbb      	ldrb	r3, [r7, #22]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d1ea      	bne.n	8011728 <CAN_transmit+0x90>
				}
			}

			len=0;
 8011752:	2300      	movs	r3, #0
 8011754:	607b      	str	r3, [r7, #4]
		while(len!=0)
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d1c5      	bne.n	80116e8 <CAN_transmit+0x50>
 801175c:	e043      	b.n	80117e6 <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 801175e:	4929      	ldr	r1, [pc, #164]	; (8011804 <CAN_transmit+0x16c>)
 8011760:	4829      	ldr	r0, [pc, #164]	; (8011808 <CAN_transmit+0x170>)
 8011762:	f7ee fd6d 	bl	8000240 <strcmp>
 8011766:	4603      	mov	r3, r0
 8011768:	2b00      	cmp	r3, #0
 801176a:	d03b      	beq.n	80117e4 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 801176c:	e036      	b.n	80117dc <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 801176e:	4b27      	ldr	r3, [pc, #156]	; (801180c <CAN_transmit+0x174>)
 8011770:	2200      	movs	r2, #0
 8011772:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	4a25      	ldr	r2, [pc, #148]	; (801180c <CAN_transmit+0x174>)
 8011778:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 801177a:	4b24      	ldr	r3, [pc, #144]	; (801180c <CAN_transmit+0x174>)
 801177c:	2200      	movs	r2, #0
 801177e:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4a22      	ldr	r2, [pc, #136]	; (801180c <CAN_transmit+0x174>)
 8011784:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 8011786:	2300      	movs	r3, #0
 8011788:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 801178a:	4b21      	ldr	r3, [pc, #132]	; (8011810 <CAN_transmit+0x178>)
 801178c:	4a17      	ldr	r2, [pc, #92]	; (80117ec <CAN_transmit+0x154>)
 801178e:	491f      	ldr	r1, [pc, #124]	; (801180c <CAN_transmit+0x174>)
 8011790:	4820      	ldr	r0, [pc, #128]	; (8011814 <CAN_transmit+0x17c>)
 8011792:	f008 fbf3 	bl	8019f7c <HAL_CAN_AddTxMessage>
 8011796:	4603      	mov	r3, r0
 8011798:	461a      	mov	r2, r3
 801179a:	4b18      	ldr	r3, [pc, #96]	; (80117fc <CAN_transmit+0x164>)
 801179c:	701a      	strb	r2, [r3, #0]
 801179e:	4b17      	ldr	r3, [pc, #92]	; (80117fc <CAN_transmit+0x164>)
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d00d      	beq.n	80117c2 <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 80117a6:	481c      	ldr	r0, [pc, #112]	; (8011818 <CAN_transmit+0x180>)
 80117a8:	f015 f9e8 	bl	8026b7c <puts>
				return;
 80117ac:	e01b      	b.n	80117e6 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 80117ae:	69b8      	ldr	r0, [r7, #24]
 80117b0:	f7fe fe22 	bl	80103f8 <HAL_Elaps_Ticks>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b64      	cmp	r3, #100	; 0x64
 80117b8:	d903      	bls.n	80117c2 <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 80117ba:	4817      	ldr	r0, [pc, #92]	; (8011818 <CAN_transmit+0x180>)
 80117bc:	f015 f9de 	bl	8026b7c <puts>
					return;
 80117c0:	e011      	b.n	80117e6 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 80117c2:	4b13      	ldr	r3, [pc, #76]	; (8011810 <CAN_transmit+0x178>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	4619      	mov	r1, r3
 80117c8:	4812      	ldr	r0, [pc, #72]	; (8011814 <CAN_transmit+0x17c>)
 80117ca:	f008 fca7 	bl	801a11c <HAL_CAN_IsTxMessagePending>
 80117ce:	4603      	mov	r3, r0
 80117d0:	75fb      	strb	r3, [r7, #23]
 80117d2:	7dfb      	ldrb	r3, [r7, #23]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d1ea      	bne.n	80117ae <CAN_transmit+0x116>
				}
			}
			len=0;
 80117d8:	2300      	movs	r3, #0
 80117da:	607b      	str	r3, [r7, #4]
		while(len!=0)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1c5      	bne.n	801176e <CAN_transmit+0xd6>
 80117e2:	e000      	b.n	80117e6 <CAN_transmit+0x14e>
			return;
 80117e4:	bf00      	nop
		}
	}
}
 80117e6:	3720      	adds	r7, #32
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	2000b2dc 	.word	0x2000b2dc
 80117f0:	2000b25c 	.word	0x2000b25c
 80117f4:	2000b28c 	.word	0x2000b28c
 80117f8:	2000b2e8 	.word	0x2000b2e8
 80117fc:	2000b2e4 	.word	0x2000b2e4
 8011800:	0802b3e0 	.word	0x0802b3e0
 8011804:	0802b3f0 	.word	0x0802b3f0
 8011808:	20000505 	.word	0x20000505
 801180c:	2000b274 	.word	0x2000b274
 8011810:	2000b290 	.word	0x2000b290
 8011814:	2000b34c 	.word	0x2000b34c
 8011818:	0802b3fc 	.word	0x0802b3fc

0801181c <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4a3e      	ldr	r2, [pc, #248]	; (8011924 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d175      	bne.n	801191a <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 801182e:	4b3e      	ldr	r3, [pc, #248]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011830:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011834:	881b      	ldrh	r3, [r3, #0]
 8011836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801183a:	d104      	bne.n	8011846 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 801183c:	4b3a      	ldr	r3, [pc, #232]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801183e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011842:	2200      	movs	r2, #0
 8011844:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 8011846:	4b39      	ldr	r3, [pc, #228]	; (801192c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8011848:	4a39      	ldr	r2, [pc, #228]	; (8011930 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801184a:	2100      	movs	r1, #0
 801184c:	4839      	ldr	r0, [pc, #228]	; (8011934 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 801184e:	f008 fc89 	bl	801a164 <HAL_CAN_GetRxMessage>
 8011852:	4603      	mov	r3, r0
 8011854:	2b00      	cmp	r3, #0
 8011856:	d001      	beq.n	801185c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 8011858:	f006 faf0 	bl	8017e3c <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 801185c:	4b32      	ldr	r3, [pc, #200]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801185e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011862:	881b      	ldrh	r3, [r3, #0]
 8011864:	4a30      	ldr	r2, [pc, #192]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011866:	011b      	lsls	r3, r3, #4
 8011868:	4413      	add	r3, r2
 801186a:	330f      	adds	r3, #15
 801186c:	2203      	movs	r2, #3
 801186e:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 8011870:	4b2f      	ldr	r3, [pc, #188]	; (8011930 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8011872:	691a      	ldr	r2, [r3, #16]
 8011874:	4b2c      	ldr	r3, [pc, #176]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011876:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801187a:	881b      	ldrh	r3, [r3, #0]
 801187c:	b2d1      	uxtb	r1, r2
 801187e:	4a2a      	ldr	r2, [pc, #168]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011880:	011b      	lsls	r3, r3, #4
 8011882:	4413      	add	r3, r2
 8011884:	330c      	adds	r3, #12
 8011886:	460a      	mov	r2, r1
 8011888:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 801188a:	4b29      	ldr	r3, [pc, #164]	; (8011930 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801188c:	689a      	ldr	r2, [r3, #8]
 801188e:	4b26      	ldr	r3, [pc, #152]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011890:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	b2d1      	uxtb	r1, r2
 8011898:	4a23      	ldr	r2, [pc, #140]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801189a:	011b      	lsls	r3, r3, #4
 801189c:	4413      	add	r3, r2
 801189e:	330d      	adds	r3, #13
 80118a0:	460a      	mov	r2, r1
 80118a2:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 80118a4:	4b22      	ldr	r3, [pc, #136]	; (8011930 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80118a6:	68da      	ldr	r2, [r3, #12]
 80118a8:	4b1f      	ldr	r3, [pc, #124]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80118aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118ae:	881b      	ldrh	r3, [r3, #0]
 80118b0:	b2d1      	uxtb	r1, r2
 80118b2:	4a1d      	ldr	r2, [pc, #116]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80118b4:	011b      	lsls	r3, r3, #4
 80118b6:	4413      	add	r3, r2
 80118b8:	330e      	adds	r3, #14
 80118ba:	460a      	mov	r2, r1
 80118bc:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 80118be:	4b1a      	ldr	r3, [pc, #104]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80118c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	4618      	mov	r0, r3
 80118c8:	4b19      	ldr	r3, [pc, #100]	; (8011930 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	4916      	ldr	r1, [pc, #88]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80118ce:	0103      	lsls	r3, r0, #4
 80118d0:	440b      	add	r3, r1
 80118d2:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 80118d4:	4b14      	ldr	r3, [pc, #80]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80118d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118da:	881b      	ldrh	r3, [r3, #0]
 80118dc:	4a12      	ldr	r2, [pc, #72]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80118de:	011b      	lsls	r3, r3, #4
 80118e0:	4413      	add	r3, r2
 80118e2:	330e      	adds	r3, #14
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d117      	bne.n	801191a <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 80118ea:	4b0f      	ldr	r3, [pc, #60]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80118ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118f0:	881b      	ldrh	r3, [r3, #0]
 80118f2:	011b      	lsls	r3, r3, #4
 80118f4:	4a0c      	ldr	r2, [pc, #48]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80118f6:	4413      	add	r3, r2
 80118f8:	3304      	adds	r3, #4
 80118fa:	490c      	ldr	r1, [pc, #48]	; (801192c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80118fc:	461a      	mov	r2, r3
 80118fe:	460b      	mov	r3, r1
 8011900:	cb03      	ldmia	r3!, {r0, r1}
 8011902:	6010      	str	r0, [r2, #0]
 8011904:	6051      	str	r1, [r2, #4]
			canRead.In++;
 8011906:	4b08      	ldr	r3, [pc, #32]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011908:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801190c:	881b      	ldrh	r3, [r3, #0]
 801190e:	3301      	adds	r3, #1
 8011910:	b29a      	uxth	r2, r3
 8011912:	4b05      	ldr	r3, [pc, #20]	; (8011928 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011914:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011918:	801a      	strh	r2, [r3, #0]
		}
	}
}
 801191a:	bf00      	nop
 801191c:	3708      	adds	r7, #8
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	40003400 	.word	0x40003400
 8011928:	20007258 	.word	0x20007258
 801192c:	2000b2d4 	.word	0x2000b2d4
 8011930:	2000b2b0 	.word	0x2000b2b0
 8011934:	2000b34c 	.word	0x2000b34c

08011938 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 8011940:	4b42      	ldr	r3, [pc, #264]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011942:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011946:	881b      	ldrh	r3, [r3, #0]
 8011948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801194c:	d104      	bne.n	8011958 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 801194e:	4b3f      	ldr	r3, [pc, #252]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011950:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011954:	2200      	movs	r2, #0
 8011956:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 8011958:	4b3d      	ldr	r3, [pc, #244]	; (8011a50 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 801195a:	4a3e      	ldr	r2, [pc, #248]	; (8011a54 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 801195c:	2101      	movs	r1, #1
 801195e:	483e      	ldr	r0, [pc, #248]	; (8011a58 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8011960:	f008 fc00 	bl	801a164 <HAL_CAN_GetRxMessage>
 8011964:	4603      	mov	r3, r0
 8011966:	461a      	mov	r2, r3
 8011968:	4b3c      	ldr	r3, [pc, #240]	; (8011a5c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 801196a:	701a      	strb	r2, [r3, #0]
 801196c:	4b3b      	ldr	r3, [pc, #236]	; (8011a5c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d007      	beq.n	8011984 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 8011974:	4b39      	ldr	r3, [pc, #228]	; (8011a5c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	4619      	mov	r1, r3
 801197a:	4839      	ldr	r0, [pc, #228]	; (8011a60 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 801197c:	f015 f862 	bl	8026a44 <iprintf>
		Error_Handler();
 8011980:	f006 fa5c 	bl	8017e3c <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 8011984:	4b31      	ldr	r3, [pc, #196]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011986:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801198a:	881b      	ldrh	r3, [r3, #0]
 801198c:	4a2f      	ldr	r2, [pc, #188]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801198e:	011b      	lsls	r3, r3, #4
 8011990:	4413      	add	r3, r2
 8011992:	330f      	adds	r3, #15
 8011994:	2202      	movs	r2, #2
 8011996:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 8011998:	4b2e      	ldr	r3, [pc, #184]	; (8011a54 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 801199a:	691a      	ldr	r2, [r3, #16]
 801199c:	4b2b      	ldr	r3, [pc, #172]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801199e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119a2:	881b      	ldrh	r3, [r3, #0]
 80119a4:	b2d1      	uxtb	r1, r2
 80119a6:	4a29      	ldr	r2, [pc, #164]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80119a8:	011b      	lsls	r3, r3, #4
 80119aa:	4413      	add	r3, r2
 80119ac:	330c      	adds	r3, #12
 80119ae:	460a      	mov	r2, r1
 80119b0:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 80119b2:	4b28      	ldr	r3, [pc, #160]	; (8011a54 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80119b4:	689a      	ldr	r2, [r3, #8]
 80119b6:	4b25      	ldr	r3, [pc, #148]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80119b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	b2d1      	uxtb	r1, r2
 80119c0:	4a22      	ldr	r2, [pc, #136]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80119c2:	011b      	lsls	r3, r3, #4
 80119c4:	4413      	add	r3, r2
 80119c6:	330d      	adds	r3, #13
 80119c8:	460a      	mov	r2, r1
 80119ca:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 80119cc:	4b21      	ldr	r3, [pc, #132]	; (8011a54 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80119ce:	68da      	ldr	r2, [r3, #12]
 80119d0:	4b1e      	ldr	r3, [pc, #120]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80119d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119d6:	881b      	ldrh	r3, [r3, #0]
 80119d8:	b2d1      	uxtb	r1, r2
 80119da:	4a1c      	ldr	r2, [pc, #112]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80119dc:	011b      	lsls	r3, r3, #4
 80119de:	4413      	add	r3, r2
 80119e0:	330e      	adds	r3, #14
 80119e2:	460a      	mov	r2, r1
 80119e4:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 80119e6:	4b19      	ldr	r3, [pc, #100]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80119e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119ec:	881b      	ldrh	r3, [r3, #0]
 80119ee:	4618      	mov	r0, r3
 80119f0:	4b18      	ldr	r3, [pc, #96]	; (8011a54 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	4915      	ldr	r1, [pc, #84]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80119f6:	0103      	lsls	r3, r0, #4
 80119f8:	440b      	add	r3, r1
 80119fa:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 80119fc:	4b13      	ldr	r3, [pc, #76]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80119fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	4a11      	ldr	r2, [pc, #68]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011a06:	011b      	lsls	r3, r3, #4
 8011a08:	4413      	add	r3, r2
 8011a0a:	330e      	adds	r3, #14
 8011a0c:	781b      	ldrb	r3, [r3, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d117      	bne.n	8011a42 <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 8011a12:	4b0e      	ldr	r3, [pc, #56]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011a14:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	011b      	lsls	r3, r3, #4
 8011a1c:	4a0b      	ldr	r2, [pc, #44]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011a1e:	4413      	add	r3, r2
 8011a20:	3304      	adds	r3, #4
 8011a22:	490b      	ldr	r1, [pc, #44]	; (8011a50 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8011a24:	461a      	mov	r2, r3
 8011a26:	460b      	mov	r3, r1
 8011a28:	cb03      	ldmia	r3!, {r0, r1}
 8011a2a:	6010      	str	r0, [r2, #0]
 8011a2c:	6051      	str	r1, [r2, #4]
		canRead.In++;
 8011a2e:	4b07      	ldr	r3, [pc, #28]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011a30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a34:	881b      	ldrh	r3, [r3, #0]
 8011a36:	3301      	adds	r3, #1
 8011a38:	b29a      	uxth	r2, r3
 8011a3a:	4b04      	ldr	r3, [pc, #16]	; (8011a4c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011a3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a40:	801a      	strh	r2, [r3, #0]
	}
}
 8011a42:	bf00      	nop
 8011a44:	3708      	adds	r7, #8
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
 8011a4a:	bf00      	nop
 8011a4c:	20007258 	.word	0x20007258
 8011a50:	2000b2cc 	.word	0x2000b2cc
 8011a54:	2000b294 	.word	0x2000b294
 8011a58:	2000b2e8 	.word	0x2000b2e8
 8011a5c:	2000b2e4 	.word	0x2000b2e4
 8011a60:	0802b40c 	.word	0x0802b40c

08011a64 <canDataReady>:


unsigned char canDataReady()
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 8011a6e:	4b27      	ldr	r3, [pc, #156]	; (8011b0c <canDataReady+0xa8>)
 8011a70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a74:	881a      	ldrh	r2, [r3, #0]
 8011a76:	4b25      	ldr	r3, [pc, #148]	; (8011b0c <canDataReady+0xa8>)
 8011a78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a7c:	885b      	ldrh	r3, [r3, #2]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d101      	bne.n	8011a86 <canDataReady+0x22>
	{
		return 0;
 8011a82:	2300      	movs	r3, #0
 8011a84:	e03e      	b.n	8011b04 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8011a86:	4b21      	ldr	r3, [pc, #132]	; (8011b0c <canDataReady+0xa8>)
 8011a88:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a8c:	885b      	ldrh	r3, [r3, #2]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	607b      	str	r3, [r7, #4]
 8011a92:	e02e      	b.n	8011af2 <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 8011a94:	4b1d      	ldr	r3, [pc, #116]	; (8011b0c <canDataReady+0xa8>)
 8011a96:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a9a:	885b      	ldrh	r3, [r3, #2]
 8011a9c:	011b      	lsls	r3, r3, #4
 8011a9e:	4a1b      	ldr	r2, [pc, #108]	; (8011b0c <canDataReady+0xa8>)
 8011aa0:	1898      	adds	r0, r3, r2
 8011aa2:	4b1a      	ldr	r3, [pc, #104]	; (8011b0c <canDataReady+0xa8>)
 8011aa4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011aa8:	881b      	ldrh	r3, [r3, #0]
 8011aaa:	011b      	lsls	r3, r3, #4
 8011aac:	4a17      	ldr	r2, [pc, #92]	; (8011b0c <canDataReady+0xa8>)
 8011aae:	4413      	add	r3, r2
 8011ab0:	2210      	movs	r2, #16
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	f014 fea6 	bl	8026804 <memcmp>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d116      	bne.n	8011aec <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011abe:	4b13      	ldr	r3, [pc, #76]	; (8011b0c <canDataReady+0xa8>)
 8011ac0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ac4:	885b      	ldrh	r3, [r3, #2]
 8011ac6:	011b      	lsls	r3, r3, #4
 8011ac8:	4a10      	ldr	r2, [pc, #64]	; (8011b0c <canDataReady+0xa8>)
 8011aca:	4413      	add	r3, r2
 8011acc:	2210      	movs	r2, #16
 8011ace:	2100      	movs	r1, #0
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f014 fecf 	bl	8026874 <memset>
			canRead.Out++;
 8011ad6:	4b0d      	ldr	r3, [pc, #52]	; (8011b0c <canDataReady+0xa8>)
 8011ad8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011adc:	885b      	ldrh	r3, [r3, #2]
 8011ade:	3301      	adds	r3, #1
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	4b0a      	ldr	r3, [pc, #40]	; (8011b0c <canDataReady+0xa8>)
 8011ae4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ae8:	805a      	strh	r2, [r3, #2]
			break;
 8011aea:	e00a      	b.n	8011b02 <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	3301      	adds	r3, #1
 8011af0:	607b      	str	r3, [r7, #4]
 8011af2:	4b06      	ldr	r3, [pc, #24]	; (8011b0c <canDataReady+0xa8>)
 8011af4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011af8:	881b      	ldrh	r3, [r3, #0]
 8011afa:	461a      	mov	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	4293      	cmp	r3, r2
 8011b00:	d3c8      	bcc.n	8011a94 <canDataReady+0x30>
		}
	}
	return 1;
 8011b02:	2301      	movs	r3, #1
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3708      	adds	r7, #8
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	20007258 	.word	0x20007258

08011b10 <readCanToStructs>:

void readCanToStructs(void)
{
 8011b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b12:	b08f      	sub	sp, #60	; 0x3c
 8011b14:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 8011b16:	2300      	movs	r3, #0
 8011b18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011b22:	2300      	movs	r3, #0
 8011b24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 8011b2c:	4bc4      	ldr	r3, [pc, #784]	; (8011e40 <readCanToStructs+0x330>)
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	3b01      	subs	r3, #1
 8011b32:	2b03      	cmp	r3, #3
 8011b34:	f204 80d7 	bhi.w	8015ce6 <readCanToStructs+0x41d6>
 8011b38:	a201      	add	r2, pc, #4	; (adr r2, 8011b40 <readCanToStructs+0x30>)
 8011b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b3e:	bf00      	nop
 8011b40:	08011b51 	.word	0x08011b51
 8011b44:	08014257 	.word	0x08014257
 8011b48:	08015325 	.word	0x08015325
 8011b4c:	08015cdb 	.word	0x08015cdb
	{
	case HITACHI:
	{
		/* ___________________ HITACHI _______________ */
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8011b50:	4bbc      	ldr	r3, [pc, #752]	; (8011e44 <readCanToStructs+0x334>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	09db      	lsrs	r3, r3, #7
 8011b56:	f003 0301 	and.w	r3, r3, #1
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	f044 80c5 	bne.w	8015cea <readCanToStructs+0x41da>
		{
			return;
		}
		while(canDataReady())
 8011b60:	f001 baf3 	b.w	801314a <readCanToStructs+0x163a>
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011b64:	4bb8      	ldr	r3, [pc, #736]	; (8011e48 <readCanToStructs+0x338>)
 8011b66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b6a:	885b      	ldrh	r3, [r3, #2]
 8011b6c:	4ab6      	ldr	r2, [pc, #728]	; (8011e48 <readCanToStructs+0x338>)
 8011b6e:	011b      	lsls	r3, r3, #4
 8011b70:	4413      	add	r3, r2
 8011b72:	330f      	adds	r3, #15
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	3b01      	subs	r3, #1
 8011b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011b7c:	4bb2      	ldr	r3, [pc, #712]	; (8011e48 <readCanToStructs+0x338>)
 8011b7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b82:	885b      	ldrh	r3, [r3, #2]
 8011b84:	4ab0      	ldr	r2, [pc, #704]	; (8011e48 <readCanToStructs+0x338>)
 8011b86:	011b      	lsls	r3, r3, #4
 8011b88:	4413      	add	r3, r2
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	f240 220a 	movw	r2, #522	; 0x20a
 8011b90:	4293      	cmp	r3, r2
 8011b92:	f201 82b7 	bhi.w	8013104 <readCanToStructs+0x15f4>
 8011b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b9a:	d80a      	bhi.n	8011bb2 <readCanToStructs+0xa2>
 8011b9c:	f240 1203 	movw	r2, #259	; 0x103
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	d023      	beq.n	8011bec <readCanToStructs+0xdc>
 8011ba4:	f240 1209 	movw	r2, #265	; 0x109
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	f000 80f5 	beq.w	8011d98 <readCanToStructs+0x288>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8011bae:	f001 baa9 	b.w	8013104 <readCanToStructs+0x15f4>
 8011bb2:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011bb6:	2b09      	cmp	r3, #9
 8011bb8:	f201 82a4 	bhi.w	8013104 <readCanToStructs+0x15f4>
 8011bbc:	a201      	add	r2, pc, #4	; (adr r2, 8011bc4 <readCanToStructs+0xb4>)
 8011bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc2:	bf00      	nop
 8011bc4:	08011f6d 	.word	0x08011f6d
 8011bc8:	08012175 	.word	0x08012175
 8011bcc:	0801234d 	.word	0x0801234d
 8011bd0:	08012567 	.word	0x08012567
 8011bd4:	08012783 	.word	0x08012783
 8011bd8:	08013105 	.word	0x08013105
 8011bdc:	0801291b 	.word	0x0801291b
 8011be0:	08012b53 	.word	0x08012b53
 8011be4:	08012d8f 	.word	0x08012d8f
 8011be8:	08012f31 	.word	0x08012f31
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011bec:	4b97      	ldr	r3, [pc, #604]	; (8011e4c <readCanToStructs+0x33c>)
 8011bee:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011bf0:	4b95      	ldr	r3, [pc, #596]	; (8011e48 <readCanToStructs+0x338>)
 8011bf2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bf6:	885b      	ldrh	r3, [r3, #2]
 8011bf8:	4a93      	ldr	r2, [pc, #588]	; (8011e48 <readCanToStructs+0x338>)
 8011bfa:	011b      	lsls	r3, r3, #4
 8011bfc:	4413      	add	r3, r2
 8011bfe:	3304      	adds	r3, #4
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011c06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d110      	bne.n	8011c30 <readCanToStructs+0x120>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011c0e:	2206      	movs	r2, #6
 8011c10:	2100      	movs	r1, #0
 8011c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c14:	f014 fe2e 	bl	8026874 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c1c:	4a8c      	ldr	r2, [pc, #560]	; (8011e50 <readCanToStructs+0x340>)
 8011c1e:	f240 4116 	movw	r1, #1046	; 0x416
 8011c22:	fb01 f303 	mul.w	r3, r1, r3
 8011c26:	4413      	add	r3, r2
 8011c28:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011c30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c34:	4a86      	ldr	r2, [pc, #536]	; (8011e50 <readCanToStructs+0x340>)
 8011c36:	f240 4116 	movw	r1, #1046	; 0x416
 8011c3a:	fb01 f303 	mul.w	r3, r1, r3
 8011c3e:	4413      	add	r3, r2
 8011c40:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d015      	beq.n	8011c7a <readCanToStructs+0x16a>
					printf("GPS Packet Seq no MisMatch\n");
 8011c4e:	4881      	ldr	r0, [pc, #516]	; (8011e54 <readCanToStructs+0x344>)
 8011c50:	f014 ff94 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011c54:	2206      	movs	r2, #6
 8011c56:	2100      	movs	r1, #0
 8011c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c5a:	f014 fe0b 	bl	8026874 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c62:	4a7b      	ldr	r2, [pc, #492]	; (8011e50 <readCanToStructs+0x340>)
 8011c64:	f240 4116 	movw	r1, #1046	; 0x416
 8011c68:	fb01 f303 	mul.w	r3, r1, r3
 8011c6c:	4413      	add	r3, r2
 8011c6e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011c72:	2200      	movs	r2, #0
 8011c74:	701a      	strb	r2, [r3, #0]
					break;
 8011c76:	f001 ba46 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011c7a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c7e:	4613      	mov	r3, r2
 8011c80:	00db      	lsls	r3, r3, #3
 8011c82:	1a9b      	subs	r3, r3, r2
 8011c84:	461a      	mov	r2, r3
 8011c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c88:	4413      	add	r3, r2
 8011c8a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c92:	e016      	b.n	8011cc2 <readCanToStructs+0x1b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011c94:	4b6c      	ldr	r3, [pc, #432]	; (8011e48 <readCanToStructs+0x338>)
 8011c96:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c9a:	885b      	ldrh	r3, [r3, #2]
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ca2:	4969      	ldr	r1, [pc, #420]	; (8011e48 <readCanToStructs+0x338>)
 8011ca4:	0112      	lsls	r2, r2, #4
 8011ca6:	440a      	add	r2, r1
 8011ca8:	4413      	add	r3, r2
 8011caa:	3304      	adds	r3, #4
 8011cac:	781a      	ldrb	r2, [r3, #0]
 8011cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011cc2:	4b61      	ldr	r3, [pc, #388]	; (8011e48 <readCanToStructs+0x338>)
 8011cc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011cc8:	885b      	ldrh	r3, [r3, #2]
 8011cca:	4a5f      	ldr	r2, [pc, #380]	; (8011e48 <readCanToStructs+0x338>)
 8011ccc:	011b      	lsls	r3, r3, #4
 8011cce:	4413      	add	r3, r2
 8011cd0:	330c      	adds	r3, #12
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d3db      	bcc.n	8011c94 <readCanToStructs+0x184>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ce0:	4a5b      	ldr	r2, [pc, #364]	; (8011e50 <readCanToStructs+0x340>)
 8011ce2:	f240 4116 	movw	r1, #1046	; 0x416
 8011ce6:	fb01 f303 	mul.w	r3, r1, r3
 8011cea:	4413      	add	r3, r2
 8011cec:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011cfa:	4b53      	ldr	r3, [pc, #332]	; (8011e48 <readCanToStructs+0x338>)
 8011cfc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d00:	885b      	ldrh	r3, [r3, #2]
 8011d02:	4951      	ldr	r1, [pc, #324]	; (8011e48 <readCanToStructs+0x338>)
 8011d04:	011b      	lsls	r3, r3, #4
 8011d06:	440b      	add	r3, r1
 8011d08:	330c      	adds	r3, #12
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011d10:	2b05      	cmp	r3, #5
 8011d12:	d91c      	bls.n	8011d4e <readCanToStructs+0x23e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011d14:	4b50      	ldr	r3, [pc, #320]	; (8011e58 <readCanToStructs+0x348>)
 8011d16:	4a4d      	ldr	r2, [pc, #308]	; (8011e4c <readCanToStructs+0x33c>)
 8011d18:	6811      	ldr	r1, [r2, #0]
 8011d1a:	6019      	str	r1, [r3, #0]
 8011d1c:	8892      	ldrh	r2, [r2, #4]
 8011d1e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011d20:	4b4e      	ldr	r3, [pc, #312]	; (8011e5c <readCanToStructs+0x34c>)
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d102      	bne.n	8011d2e <readCanToStructs+0x21e>
						printf("GPS_PACKET_RECEIVED\n");
 8011d28:	484d      	ldr	r0, [pc, #308]	; (8011e60 <readCanToStructs+0x350>)
 8011d2a:	f014 ff27 	bl	8026b7c <puts>
					Write_RTC();
 8011d2e:	f7fa fe3b 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d36:	4a46      	ldr	r2, [pc, #280]	; (8011e50 <readCanToStructs+0x340>)
 8011d38:	f240 4116 	movw	r1, #1046	; 0x416
 8011d3c:	fb01 f303 	mul.w	r3, r1, r3
 8011d40:	4413      	add	r3, r2
 8011d42:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011d46:	2200      	movs	r2, #0
 8011d48:	701a      	strb	r2, [r3, #0]
				break;
 8011d4a:	f001 b9dc 	b.w	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8011d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d52:	4a3f      	ldr	r2, [pc, #252]	; (8011e50 <readCanToStructs+0x340>)
 8011d54:	f240 4116 	movw	r1, #1046	; 0x416
 8011d58:	fb01 f303 	mul.w	r3, r1, r3
 8011d5c:	4413      	add	r3, r2
 8011d5e:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011d62:	2201      	movs	r2, #1
 8011d64:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8011d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d6a:	4939      	ldr	r1, [pc, #228]	; (8011e50 <readCanToStructs+0x340>)
 8011d6c:	f240 4216 	movw	r2, #1046	; 0x416
 8011d70:	fb03 f202 	mul.w	r2, r3, r2
 8011d74:	440a      	add	r2, r1
 8011d76:	f202 2207 	addw	r2, r2, #519	; 0x207
 8011d7a:	7812      	ldrb	r2, [r2, #0]
 8011d7c:	3201      	adds	r2, #1
 8011d7e:	b2d0      	uxtb	r0, r2
 8011d80:	4a33      	ldr	r2, [pc, #204]	; (8011e50 <readCanToStructs+0x340>)
 8011d82:	f240 4116 	movw	r1, #1046	; 0x416
 8011d86:	fb01 f303 	mul.w	r3, r1, r3
 8011d8a:	4413      	add	r3, r2
 8011d8c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011d90:	4602      	mov	r2, r0
 8011d92:	701a      	strb	r2, [r3, #0]
				break;
 8011d94:	f001 b9b7 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011d98:	4b2c      	ldr	r3, [pc, #176]	; (8011e4c <readCanToStructs+0x33c>)
 8011d9a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011d9c:	4b2a      	ldr	r3, [pc, #168]	; (8011e48 <readCanToStructs+0x338>)
 8011d9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011da2:	885b      	ldrh	r3, [r3, #2]
 8011da4:	4a28      	ldr	r2, [pc, #160]	; (8011e48 <readCanToStructs+0x338>)
 8011da6:	011b      	lsls	r3, r3, #4
 8011da8:	4413      	add	r3, r2
 8011daa:	3304      	adds	r3, #4
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011db2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d110      	bne.n	8011ddc <readCanToStructs+0x2cc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011dba:	2206      	movs	r2, #6
 8011dbc:	2100      	movs	r1, #0
 8011dbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dc0:	f014 fd58 	bl	8026874 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dc8:	4a21      	ldr	r2, [pc, #132]	; (8011e50 <readCanToStructs+0x340>)
 8011dca:	f240 4116 	movw	r1, #1046	; 0x416
 8011dce:	fb01 f303 	mul.w	r3, r1, r3
 8011dd2:	4413      	add	r3, r2
 8011dd4:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011dd8:	2200      	movs	r2, #0
 8011dda:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011de0:	4a1b      	ldr	r2, [pc, #108]	; (8011e50 <readCanToStructs+0x340>)
 8011de2:	f240 4116 	movw	r1, #1046	; 0x416
 8011de6:	fb01 f303 	mul.w	r3, r1, r3
 8011dea:	4413      	add	r3, r2
 8011dec:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d015      	beq.n	8011e26 <readCanToStructs+0x316>
					printf("GPS2 Packet Seq no MisMatch\n");
 8011dfa:	481a      	ldr	r0, [pc, #104]	; (8011e64 <readCanToStructs+0x354>)
 8011dfc:	f014 febe 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011e00:	2206      	movs	r2, #6
 8011e02:	2100      	movs	r1, #0
 8011e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e06:	f014 fd35 	bl	8026874 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e0e:	4a10      	ldr	r2, [pc, #64]	; (8011e50 <readCanToStructs+0x340>)
 8011e10:	f240 4116 	movw	r1, #1046	; 0x416
 8011e14:	fb01 f303 	mul.w	r3, r1, r3
 8011e18:	4413      	add	r3, r2
 8011e1a:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011e1e:	2200      	movs	r2, #0
 8011e20:	701a      	strb	r2, [r3, #0]
					break;
 8011e22:	f001 b970 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011e26:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011e2a:	4613      	mov	r3, r2
 8011e2c:	00db      	lsls	r3, r3, #3
 8011e2e:	1a9b      	subs	r3, r3, r2
 8011e30:	461a      	mov	r2, r3
 8011e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e34:	4413      	add	r3, r2
 8011e36:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011e38:	2301      	movs	r3, #1
 8011e3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011e3e:	e02a      	b.n	8011e96 <readCanToStructs+0x386>
 8011e40:	20000504 	.word	0x20000504
 8011e44:	2000308c 	.word	0x2000308c
 8011e48:	20007258 	.word	0x20007258
 8011e4c:	20003fd4 	.word	0x20003fd4
 8011e50:	20006a2c 	.word	0x20006a2c
 8011e54:	0802b434 	.word	0x0802b434
 8011e58:	20003fcc 	.word	0x20003fcc
 8011e5c:	20000bbb 	.word	0x20000bbb
 8011e60:	0802b450 	.word	0x0802b450
 8011e64:	0802b464 	.word	0x0802b464
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011e68:	4bb6      	ldr	r3, [pc, #728]	; (8012144 <readCanToStructs+0x634>)
 8011e6a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e6e:	885b      	ldrh	r3, [r3, #2]
 8011e70:	461a      	mov	r2, r3
 8011e72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e76:	49b3      	ldr	r1, [pc, #716]	; (8012144 <readCanToStructs+0x634>)
 8011e78:	0112      	lsls	r2, r2, #4
 8011e7a:	440a      	add	r2, r1
 8011e7c:	4413      	add	r3, r2
 8011e7e:	3304      	adds	r3, #4
 8011e80:	781a      	ldrb	r2, [r3, #0]
 8011e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e84:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e88:	3301      	adds	r3, #1
 8011e8a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e90:	3301      	adds	r3, #1
 8011e92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011e96:	4bab      	ldr	r3, [pc, #684]	; (8012144 <readCanToStructs+0x634>)
 8011e98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e9c:	885b      	ldrh	r3, [r3, #2]
 8011e9e:	4aa9      	ldr	r2, [pc, #676]	; (8012144 <readCanToStructs+0x634>)
 8011ea0:	011b      	lsls	r3, r3, #4
 8011ea2:	4413      	add	r3, r2
 8011ea4:	330c      	adds	r3, #12
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d3db      	bcc.n	8011e68 <readCanToStructs+0x358>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011eb4:	4aa4      	ldr	r2, [pc, #656]	; (8012148 <readCanToStructs+0x638>)
 8011eb6:	f240 4116 	movw	r1, #1046	; 0x416
 8011eba:	fb01 f303 	mul.w	r3, r1, r3
 8011ebe:	4413      	add	r3, r2
 8011ec0:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	4613      	mov	r3, r2
 8011eca:	00db      	lsls	r3, r3, #3
 8011ecc:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011ece:	4b9d      	ldr	r3, [pc, #628]	; (8012144 <readCanToStructs+0x634>)
 8011ed0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ed4:	885b      	ldrh	r3, [r3, #2]
 8011ed6:	499b      	ldr	r1, [pc, #620]	; (8012144 <readCanToStructs+0x634>)
 8011ed8:	011b      	lsls	r3, r3, #4
 8011eda:	440b      	add	r3, r1
 8011edc:	330c      	adds	r3, #12
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011ee4:	2b05      	cmp	r3, #5
 8011ee6:	d91c      	bls.n	8011f22 <readCanToStructs+0x412>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011ee8:	4b98      	ldr	r3, [pc, #608]	; (801214c <readCanToStructs+0x63c>)
 8011eea:	4a99      	ldr	r2, [pc, #612]	; (8012150 <readCanToStructs+0x640>)
 8011eec:	6811      	ldr	r1, [r2, #0]
 8011eee:	6019      	str	r1, [r3, #0]
 8011ef0:	8892      	ldrh	r2, [r2, #4]
 8011ef2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011ef4:	4b97      	ldr	r3, [pc, #604]	; (8012154 <readCanToStructs+0x644>)
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d102      	bne.n	8011f02 <readCanToStructs+0x3f2>
						printf("GPS2_PACKET_RECEIVED\n");
 8011efc:	4896      	ldr	r0, [pc, #600]	; (8012158 <readCanToStructs+0x648>)
 8011efe:	f014 fe3d 	bl	8026b7c <puts>
					Write_RTC();
 8011f02:	f7fa fd51 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f0a:	4a8f      	ldr	r2, [pc, #572]	; (8012148 <readCanToStructs+0x638>)
 8011f0c:	f240 4116 	movw	r1, #1046	; 0x416
 8011f10:	fb01 f303 	mul.w	r3, r1, r3
 8011f14:	4413      	add	r3, r2
 8011f16:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	701a      	strb	r2, [r3, #0]
				break;
 8011f1e:	f001 b8f2 	b.w	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8011f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f26:	4a88      	ldr	r2, [pc, #544]	; (8012148 <readCanToStructs+0x638>)
 8011f28:	f240 4116 	movw	r1, #1046	; 0x416
 8011f2c:	fb01 f303 	mul.w	r3, r1, r3
 8011f30:	4413      	add	r3, r2
 8011f32:	f203 2312 	addw	r3, r3, #530	; 0x212
 8011f36:	2201      	movs	r2, #1
 8011f38:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8011f3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f3e:	4982      	ldr	r1, [pc, #520]	; (8012148 <readCanToStructs+0x638>)
 8011f40:	f240 4216 	movw	r2, #1046	; 0x416
 8011f44:	fb03 f202 	mul.w	r2, r3, r2
 8011f48:	440a      	add	r2, r1
 8011f4a:	f202 2213 	addw	r2, r2, #531	; 0x213
 8011f4e:	7812      	ldrb	r2, [r2, #0]
 8011f50:	3201      	adds	r2, #1
 8011f52:	b2d0      	uxtb	r0, r2
 8011f54:	4a7c      	ldr	r2, [pc, #496]	; (8012148 <readCanToStructs+0x638>)
 8011f56:	f240 4116 	movw	r1, #1046	; 0x416
 8011f5a:	fb01 f303 	mul.w	r3, r1, r3
 8011f5e:	4413      	add	r3, r2
 8011f60:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011f64:	4602      	mov	r2, r0
 8011f66:	701a      	strb	r2, [r3, #0]
				break;
 8011f68:	f001 b8cd 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8011f6c:	4b7b      	ldr	r3, [pc, #492]	; (801215c <readCanToStructs+0x64c>)
 8011f6e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011f70:	4b74      	ldr	r3, [pc, #464]	; (8012144 <readCanToStructs+0x634>)
 8011f72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f76:	885b      	ldrh	r3, [r3, #2]
 8011f78:	4a72      	ldr	r2, [pc, #456]	; (8012144 <readCanToStructs+0x634>)
 8011f7a:	011b      	lsls	r3, r3, #4
 8011f7c:	4413      	add	r3, r2
 8011f7e:	3304      	adds	r3, #4
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011f86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d110      	bne.n	8011fb0 <readCanToStructs+0x4a0>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011f8e:	2218      	movs	r2, #24
 8011f90:	2100      	movs	r1, #0
 8011f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f94:	f014 fc6e 	bl	8026874 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011f98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f9c:	4a6a      	ldr	r2, [pc, #424]	; (8012148 <readCanToStructs+0x638>)
 8011f9e:	f240 4116 	movw	r1, #1046	; 0x416
 8011fa2:	fb01 f303 	mul.w	r3, r1, r3
 8011fa6:	4413      	add	r3, r2
 8011fa8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011fac:	2200      	movs	r2, #0
 8011fae:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8011fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fb4:	4a64      	ldr	r2, [pc, #400]	; (8012148 <readCanToStructs+0x638>)
 8011fb6:	f240 4116 	movw	r1, #1046	; 0x416
 8011fba:	fb01 f303 	mul.w	r3, r1, r3
 8011fbe:	4413      	add	r3, r2
 8011fc0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d015      	beq.n	8011ffa <readCanToStructs+0x4ea>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8011fce:	4864      	ldr	r0, [pc, #400]	; (8012160 <readCanToStructs+0x650>)
 8011fd0:	f014 fdd4 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011fd4:	2218      	movs	r2, #24
 8011fd6:	2100      	movs	r1, #0
 8011fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fda:	f014 fc4b 	bl	8026874 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fe2:	4a59      	ldr	r2, [pc, #356]	; (8012148 <readCanToStructs+0x638>)
 8011fe4:	f240 4116 	movw	r1, #1046	; 0x416
 8011fe8:	fb01 f303 	mul.w	r3, r1, r3
 8011fec:	4413      	add	r3, r2
 8011fee:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	701a      	strb	r2, [r3, #0]
					break;
 8011ff6:	f001 b886 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011ffa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011ffe:	4613      	mov	r3, r2
 8012000:	00db      	lsls	r3, r3, #3
 8012002:	1a9b      	subs	r3, r3, r2
 8012004:	461a      	mov	r2, r3
 8012006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012008:	4413      	add	r3, r2
 801200a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801200c:	2301      	movs	r3, #1
 801200e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012012:	e016      	b.n	8012042 <readCanToStructs+0x532>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012014:	4b4b      	ldr	r3, [pc, #300]	; (8012144 <readCanToStructs+0x634>)
 8012016:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801201a:	885b      	ldrh	r3, [r3, #2]
 801201c:	461a      	mov	r2, r3
 801201e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012022:	4948      	ldr	r1, [pc, #288]	; (8012144 <readCanToStructs+0x634>)
 8012024:	0112      	lsls	r2, r2, #4
 8012026:	440a      	add	r2, r1
 8012028:	4413      	add	r3, r2
 801202a:	3304      	adds	r3, #4
 801202c:	781a      	ldrb	r2, [r3, #0]
 801202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012030:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012034:	3301      	adds	r3, #1
 8012036:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012038:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801203c:	3301      	adds	r3, #1
 801203e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012042:	4b40      	ldr	r3, [pc, #256]	; (8012144 <readCanToStructs+0x634>)
 8012044:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012048:	885b      	ldrh	r3, [r3, #2]
 801204a:	4a3e      	ldr	r2, [pc, #248]	; (8012144 <readCanToStructs+0x634>)
 801204c:	011b      	lsls	r3, r3, #4
 801204e:	4413      	add	r3, r2
 8012050:	330c      	adds	r3, #12
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012058:	429a      	cmp	r2, r3
 801205a:	d3db      	bcc.n	8012014 <readCanToStructs+0x504>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 801205c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012060:	4a39      	ldr	r2, [pc, #228]	; (8012148 <readCanToStructs+0x638>)
 8012062:	f240 4116 	movw	r1, #1046	; 0x416
 8012066:	fb01 f303 	mul.w	r3, r1, r3
 801206a:	4413      	add	r3, r2
 801206c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	461a      	mov	r2, r3
 8012074:	4613      	mov	r3, r2
 8012076:	00db      	lsls	r3, r3, #3
 8012078:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 801207a:	4b32      	ldr	r3, [pc, #200]	; (8012144 <readCanToStructs+0x634>)
 801207c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012080:	885b      	ldrh	r3, [r3, #2]
 8012082:	4930      	ldr	r1, [pc, #192]	; (8012144 <readCanToStructs+0x634>)
 8012084:	011b      	lsls	r3, r3, #4
 8012086:	440b      	add	r3, r1
 8012088:	330c      	adds	r3, #12
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	3b01      	subs	r3, #1
 801208e:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012090:	2b17      	cmp	r3, #23
 8012092:	d932      	bls.n	80120fa <readCanToStructs+0x5ea>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8012094:	4b31      	ldr	r3, [pc, #196]	; (801215c <readCanToStructs+0x64c>)
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	461a      	mov	r2, r3
 801209a:	4613      	mov	r3, r2
 801209c:	005b      	lsls	r3, r3, #1
 801209e:	4413      	add	r3, r2
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	4a30      	ldr	r2, [pc, #192]	; (8012164 <readCanToStructs+0x654>)
 80120a4:	4413      	add	r3, r2
 80120a6:	2218      	movs	r2, #24
 80120a8:	492c      	ldr	r1, [pc, #176]	; (801215c <readCanToStructs+0x64c>)
 80120aa:	4618      	mov	r0, r3
 80120ac:	f014 fbba 	bl	8026824 <memcpy>
					if(Debug_flag == 1)
 80120b0:	4b28      	ldr	r3, [pc, #160]	; (8012154 <readCanToStructs+0x644>)
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d105      	bne.n	80120c4 <readCanToStructs+0x5b4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 80120b8:	4b28      	ldr	r3, [pc, #160]	; (801215c <readCanToStructs+0x64c>)
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	4619      	mov	r1, r3
 80120be:	482a      	ldr	r0, [pc, #168]	; (8012168 <readCanToStructs+0x658>)
 80120c0:	f014 fcc0 	bl	8026a44 <iprintf>
					Is_CAN_Exchange_happening = YES;
 80120c4:	4b29      	ldr	r3, [pc, #164]	; (801216c <readCanToStructs+0x65c>)
 80120c6:	2201      	movs	r2, #1
 80120c8:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 80120ca:	f007 fcb1 	bl	8019a30 <HAL_GetTick>
 80120ce:	4603      	mov	r3, r0
 80120d0:	4a27      	ldr	r2, [pc, #156]	; (8012170 <readCanToStructs+0x660>)
 80120d2:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 80120d4:	4b21      	ldr	r3, [pc, #132]	; (801215c <readCanToStructs+0x64c>)
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	4618      	mov	r0, r3
 80120da:	f7f6 fb5d 	bl	8008798 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80120de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120e2:	4a19      	ldr	r2, [pc, #100]	; (8012148 <readCanToStructs+0x638>)
 80120e4:	f240 4116 	movw	r1, #1046	; 0x416
 80120e8:	fb01 f303 	mul.w	r3, r1, r3
 80120ec:	4413      	add	r3, r2
 80120ee:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80120f2:	2200      	movs	r2, #0
 80120f4:	701a      	strb	r2, [r3, #0]
				break;
 80120f6:	f001 b806 	b.w	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80120fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120fe:	4a12      	ldr	r2, [pc, #72]	; (8012148 <readCanToStructs+0x638>)
 8012100:	f240 4116 	movw	r1, #1046	; 0x416
 8012104:	fb01 f303 	mul.w	r3, r1, r3
 8012108:	4413      	add	r3, r2
 801210a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801210e:	2201      	movs	r2, #1
 8012110:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8012112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012116:	490c      	ldr	r1, [pc, #48]	; (8012148 <readCanToStructs+0x638>)
 8012118:	f240 4216 	movw	r2, #1046	; 0x416
 801211c:	fb03 f202 	mul.w	r2, r3, r2
 8012120:	440a      	add	r2, r1
 8012122:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8012126:	7812      	ldrb	r2, [r2, #0]
 8012128:	3201      	adds	r2, #1
 801212a:	b2d0      	uxtb	r0, r2
 801212c:	4a06      	ldr	r2, [pc, #24]	; (8012148 <readCanToStructs+0x638>)
 801212e:	f240 4116 	movw	r1, #1046	; 0x416
 8012132:	fb01 f303 	mul.w	r3, r1, r3
 8012136:	4413      	add	r3, r2
 8012138:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801213c:	4602      	mov	r2, r0
 801213e:	701a      	strb	r2, [r3, #0]
				break;
 8012140:	f000 bfe1 	b.w	8013106 <readCanToStructs+0x15f6>
 8012144:	20007258 	.word	0x20007258
 8012148:	20006a2c 	.word	0x20006a2c
 801214c:	20003fcc 	.word	0x20003fcc
 8012150:	20003fd4 	.word	0x20003fd4
 8012154:	20000bbb 	.word	0x20000bbb
 8012158:	0802b480 	.word	0x0802b480
 801215c:	20002f9c 	.word	0x20002f9c
 8012160:	0802b498 	.word	0x0802b498
 8012164:	20002e94 	.word	0x20002e94
 8012168:	0802b4bc 	.word	0x0802b4bc
 801216c:	2000030b 	.word	0x2000030b
 8012170:	200024b4 	.word	0x200024b4
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8012174:	4b9f      	ldr	r3, [pc, #636]	; (80123f4 <readCanToStructs+0x8e4>)
 8012176:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012178:	4b9f      	ldr	r3, [pc, #636]	; (80123f8 <readCanToStructs+0x8e8>)
 801217a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801217e:	885b      	ldrh	r3, [r3, #2]
 8012180:	4a9d      	ldr	r2, [pc, #628]	; (80123f8 <readCanToStructs+0x8e8>)
 8012182:	011b      	lsls	r3, r3, #4
 8012184:	4413      	add	r3, r2
 8012186:	3304      	adds	r3, #4
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801218e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012192:	2b00      	cmp	r3, #0
 8012194:	d110      	bne.n	80121b8 <readCanToStructs+0x6a8>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8012196:	2218      	movs	r2, #24
 8012198:	2100      	movs	r1, #0
 801219a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801219c:	f014 fb6a 	bl	8026874 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80121a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121a4:	4a95      	ldr	r2, [pc, #596]	; (80123fc <readCanToStructs+0x8ec>)
 80121a6:	f240 4116 	movw	r1, #1046	; 0x416
 80121aa:	fb01 f303 	mul.w	r3, r1, r3
 80121ae:	4413      	add	r3, r2
 80121b0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80121b4:	2200      	movs	r2, #0
 80121b6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 80121b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121bc:	4a8f      	ldr	r2, [pc, #572]	; (80123fc <readCanToStructs+0x8ec>)
 80121be:	f240 4116 	movw	r1, #1046	; 0x416
 80121c2:	fb01 f303 	mul.w	r3, r1, r3
 80121c6:	4413      	add	r3, r2
 80121c8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d015      	beq.n	8012202 <readCanToStructs+0x6f2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 80121d6:	488a      	ldr	r0, [pc, #552]	; (8012400 <readCanToStructs+0x8f0>)
 80121d8:	f014 fcd0 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80121dc:	2218      	movs	r2, #24
 80121de:	2100      	movs	r1, #0
 80121e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121e2:	f014 fb47 	bl	8026874 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80121e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121ea:	4a84      	ldr	r2, [pc, #528]	; (80123fc <readCanToStructs+0x8ec>)
 80121ec:	f240 4116 	movw	r1, #1046	; 0x416
 80121f0:	fb01 f303 	mul.w	r3, r1, r3
 80121f4:	4413      	add	r3, r2
 80121f6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80121fa:	2200      	movs	r2, #0
 80121fc:	701a      	strb	r2, [r3, #0]
					break;
 80121fe:	f000 bf82 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012202:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012206:	4613      	mov	r3, r2
 8012208:	00db      	lsls	r3, r3, #3
 801220a:	1a9b      	subs	r3, r3, r2
 801220c:	461a      	mov	r2, r3
 801220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012210:	4413      	add	r3, r2
 8012212:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012214:	2301      	movs	r3, #1
 8012216:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801221a:	e016      	b.n	801224a <readCanToStructs+0x73a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801221c:	4b76      	ldr	r3, [pc, #472]	; (80123f8 <readCanToStructs+0x8e8>)
 801221e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012222:	885b      	ldrh	r3, [r3, #2]
 8012224:	461a      	mov	r2, r3
 8012226:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801222a:	4973      	ldr	r1, [pc, #460]	; (80123f8 <readCanToStructs+0x8e8>)
 801222c:	0112      	lsls	r2, r2, #4
 801222e:	440a      	add	r2, r1
 8012230:	4413      	add	r3, r2
 8012232:	3304      	adds	r3, #4
 8012234:	781a      	ldrb	r2, [r3, #0]
 8012236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012238:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223c:	3301      	adds	r3, #1
 801223e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012240:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012244:	3301      	adds	r3, #1
 8012246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801224a:	4b6b      	ldr	r3, [pc, #428]	; (80123f8 <readCanToStructs+0x8e8>)
 801224c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012250:	885b      	ldrh	r3, [r3, #2]
 8012252:	4a69      	ldr	r2, [pc, #420]	; (80123f8 <readCanToStructs+0x8e8>)
 8012254:	011b      	lsls	r3, r3, #4
 8012256:	4413      	add	r3, r2
 8012258:	330c      	adds	r3, #12
 801225a:	781b      	ldrb	r3, [r3, #0]
 801225c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012260:	429a      	cmp	r2, r3
 8012262:	d3db      	bcc.n	801221c <readCanToStructs+0x70c>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8012264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012268:	4a64      	ldr	r2, [pc, #400]	; (80123fc <readCanToStructs+0x8ec>)
 801226a:	f240 4116 	movw	r1, #1046	; 0x416
 801226e:	fb01 f303 	mul.w	r3, r1, r3
 8012272:	4413      	add	r3, r2
 8012274:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	461a      	mov	r2, r3
 801227c:	4613      	mov	r3, r2
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8012282:	4b5d      	ldr	r3, [pc, #372]	; (80123f8 <readCanToStructs+0x8e8>)
 8012284:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012288:	885b      	ldrh	r3, [r3, #2]
 801228a:	495b      	ldr	r1, [pc, #364]	; (80123f8 <readCanToStructs+0x8e8>)
 801228c:	011b      	lsls	r3, r3, #4
 801228e:	440b      	add	r3, r1
 8012290:	330c      	adds	r3, #12
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	3b01      	subs	r3, #1
 8012296:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8012298:	2b17      	cmp	r3, #23
 801229a:	d932      	bls.n	8012302 <readCanToStructs+0x7f2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 801229c:	4b55      	ldr	r3, [pc, #340]	; (80123f4 <readCanToStructs+0x8e4>)
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	461a      	mov	r2, r3
 80122a2:	4613      	mov	r3, r2
 80122a4:	005b      	lsls	r3, r3, #1
 80122a6:	4413      	add	r3, r2
 80122a8:	00db      	lsls	r3, r3, #3
 80122aa:	4a56      	ldr	r2, [pc, #344]	; (8012404 <readCanToStructs+0x8f4>)
 80122ac:	4413      	add	r3, r2
 80122ae:	2218      	movs	r2, #24
 80122b0:	4950      	ldr	r1, [pc, #320]	; (80123f4 <readCanToStructs+0x8e4>)
 80122b2:	4618      	mov	r0, r3
 80122b4:	f014 fab6 	bl	8026824 <memcpy>
					if(Debug_flag == 1)
 80122b8:	4b53      	ldr	r3, [pc, #332]	; (8012408 <readCanToStructs+0x8f8>)
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d105      	bne.n	80122cc <readCanToStructs+0x7bc>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 80122c0:	4b4c      	ldr	r3, [pc, #304]	; (80123f4 <readCanToStructs+0x8e4>)
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	4619      	mov	r1, r3
 80122c6:	4851      	ldr	r0, [pc, #324]	; (801240c <readCanToStructs+0x8fc>)
 80122c8:	f014 fbbc 	bl	8026a44 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 80122cc:	f007 fbb0 	bl	8019a30 <HAL_GetTick>
 80122d0:	4603      	mov	r3, r0
 80122d2:	4a4f      	ldr	r2, [pc, #316]	; (8012410 <readCanToStructs+0x900>)
 80122d4:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 80122d6:	4b4f      	ldr	r3, [pc, #316]	; (8012414 <readCanToStructs+0x904>)
 80122d8:	2201      	movs	r2, #1
 80122da:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 80122dc:	4b45      	ldr	r3, [pc, #276]	; (80123f4 <readCanToStructs+0x8e4>)
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7f6 fa59 	bl	8008798 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80122e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122ea:	4a44      	ldr	r2, [pc, #272]	; (80123fc <readCanToStructs+0x8ec>)
 80122ec:	f240 4116 	movw	r1, #1046	; 0x416
 80122f0:	fb01 f303 	mul.w	r3, r1, r3
 80122f4:	4413      	add	r3, r2
 80122f6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80122fa:	2200      	movs	r2, #0
 80122fc:	701a      	strb	r2, [r3, #0]
				break;
 80122fe:	f000 bf02 	b.w	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8012302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012306:	4a3d      	ldr	r2, [pc, #244]	; (80123fc <readCanToStructs+0x8ec>)
 8012308:	f240 4116 	movw	r1, #1046	; 0x416
 801230c:	fb01 f303 	mul.w	r3, r1, r3
 8012310:	4413      	add	r3, r2
 8012312:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012316:	2201      	movs	r2, #1
 8012318:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 801231a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801231e:	4937      	ldr	r1, [pc, #220]	; (80123fc <readCanToStructs+0x8ec>)
 8012320:	f240 4216 	movw	r2, #1046	; 0x416
 8012324:	fb03 f202 	mul.w	r2, r3, r2
 8012328:	440a      	add	r2, r1
 801232a:	f202 4205 	addw	r2, r2, #1029	; 0x405
 801232e:	7812      	ldrb	r2, [r2, #0]
 8012330:	3201      	adds	r2, #1
 8012332:	b2d0      	uxtb	r0, r2
 8012334:	4a31      	ldr	r2, [pc, #196]	; (80123fc <readCanToStructs+0x8ec>)
 8012336:	f240 4116 	movw	r1, #1046	; 0x416
 801233a:	fb01 f303 	mul.w	r3, r1, r3
 801233e:	4413      	add	r3, r2
 8012340:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012344:	4602      	mov	r2, r0
 8012346:	701a      	strb	r2, [r3, #0]
				break;
 8012348:	f000 bedd 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 801234c:	4b32      	ldr	r3, [pc, #200]	; (8012418 <readCanToStructs+0x908>)
 801234e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012350:	4b29      	ldr	r3, [pc, #164]	; (80123f8 <readCanToStructs+0x8e8>)
 8012352:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012356:	885b      	ldrh	r3, [r3, #2]
 8012358:	4a27      	ldr	r2, [pc, #156]	; (80123f8 <readCanToStructs+0x8e8>)
 801235a:	011b      	lsls	r3, r3, #4
 801235c:	4413      	add	r3, r2
 801235e:	3304      	adds	r3, #4
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012366:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801236a:	2b00      	cmp	r3, #0
 801236c:	d110      	bne.n	8012390 <readCanToStructs+0x880>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801236e:	2246      	movs	r2, #70	; 0x46
 8012370:	2100      	movs	r1, #0
 8012372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012374:	f014 fa7e 	bl	8026874 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8012378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801237c:	4a1f      	ldr	r2, [pc, #124]	; (80123fc <readCanToStructs+0x8ec>)
 801237e:	f240 4116 	movw	r1, #1046	; 0x416
 8012382:	fb01 f303 	mul.w	r3, r1, r3
 8012386:	4413      	add	r3, r2
 8012388:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801238c:	2200      	movs	r2, #0
 801238e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8012390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012394:	4a19      	ldr	r2, [pc, #100]	; (80123fc <readCanToStructs+0x8ec>)
 8012396:	f240 4116 	movw	r1, #1046	; 0x416
 801239a:	fb01 f303 	mul.w	r3, r1, r3
 801239e:	4413      	add	r3, r2
 80123a0:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d015      	beq.n	80123da <readCanToStructs+0x8ca>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 80123ae:	481b      	ldr	r0, [pc, #108]	; (801241c <readCanToStructs+0x90c>)
 80123b0:	f014 fbe4 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80123b4:	2246      	movs	r2, #70	; 0x46
 80123b6:	2100      	movs	r1, #0
 80123b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123ba:	f014 fa5b 	bl	8026874 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 80123be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123c2:	4a0e      	ldr	r2, [pc, #56]	; (80123fc <readCanToStructs+0x8ec>)
 80123c4:	f240 4116 	movw	r1, #1046	; 0x416
 80123c8:	fb01 f303 	mul.w	r3, r1, r3
 80123cc:	4413      	add	r3, r2
 80123ce:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80123d2:	2200      	movs	r2, #0
 80123d4:	701a      	strb	r2, [r3, #0]
					break;
 80123d6:	f000 be96 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80123da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80123de:	4613      	mov	r3, r2
 80123e0:	00db      	lsls	r3, r3, #3
 80123e2:	1a9b      	subs	r3, r3, r2
 80123e4:	461a      	mov	r2, r3
 80123e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e8:	4413      	add	r3, r2
 80123ea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80123ec:	2301      	movs	r3, #1
 80123ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80123f2:	e02c      	b.n	801244e <readCanToStructs+0x93e>
 80123f4:	20002f9c 	.word	0x20002f9c
 80123f8:	20007258 	.word	0x20007258
 80123fc:	20006a2c 	.word	0x20006a2c
 8012400:	0802b4cc 	.word	0x0802b4cc
 8012404:	20002e94 	.word	0x20002e94
 8012408:	20000bbb 	.word	0x20000bbb
 801240c:	0802b4f0 	.word	0x0802b4f0
 8012410:	200024b4 	.word	0x200024b4
 8012414:	2000030b 	.word	0x2000030b
 8012418:	20003044 	.word	0x20003044
 801241c:	0802b500 	.word	0x0802b500
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012420:	4bba      	ldr	r3, [pc, #744]	; (801270c <readCanToStructs+0xbfc>)
 8012422:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012426:	885b      	ldrh	r3, [r3, #2]
 8012428:	461a      	mov	r2, r3
 801242a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801242e:	49b7      	ldr	r1, [pc, #732]	; (801270c <readCanToStructs+0xbfc>)
 8012430:	0112      	lsls	r2, r2, #4
 8012432:	440a      	add	r2, r1
 8012434:	4413      	add	r3, r2
 8012436:	3304      	adds	r3, #4
 8012438:	781a      	ldrb	r2, [r3, #0]
 801243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012440:	3301      	adds	r3, #1
 8012442:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012444:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012448:	3301      	adds	r3, #1
 801244a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801244e:	4baf      	ldr	r3, [pc, #700]	; (801270c <readCanToStructs+0xbfc>)
 8012450:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012454:	885b      	ldrh	r3, [r3, #2]
 8012456:	4aad      	ldr	r2, [pc, #692]	; (801270c <readCanToStructs+0xbfc>)
 8012458:	011b      	lsls	r3, r3, #4
 801245a:	4413      	add	r3, r2
 801245c:	330c      	adds	r3, #12
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012464:	429a      	cmp	r2, r3
 8012466:	d3db      	bcc.n	8012420 <readCanToStructs+0x910>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8012468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801246c:	4aa8      	ldr	r2, [pc, #672]	; (8012710 <readCanToStructs+0xc00>)
 801246e:	f240 4116 	movw	r1, #1046	; 0x416
 8012472:	fb01 f303 	mul.w	r3, r1, r3
 8012476:	4413      	add	r3, r2
 8012478:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	461a      	mov	r2, r3
 8012480:	4613      	mov	r3, r2
 8012482:	00db      	lsls	r3, r3, #3
 8012484:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8012486:	4ba1      	ldr	r3, [pc, #644]	; (801270c <readCanToStructs+0xbfc>)
 8012488:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801248c:	885b      	ldrh	r3, [r3, #2]
 801248e:	499f      	ldr	r1, [pc, #636]	; (801270c <readCanToStructs+0xbfc>)
 8012490:	011b      	lsls	r3, r3, #4
 8012492:	440b      	add	r3, r1
 8012494:	330c      	adds	r3, #12
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	3b01      	subs	r3, #1
 801249a:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 801249c:	2b45      	cmp	r3, #69	; 0x45
 801249e:	d93d      	bls.n	801251c <readCanToStructs+0xa0c>
					if(Debug_flag == 1)
 80124a0:	4b9c      	ldr	r3, [pc, #624]	; (8012714 <readCanToStructs+0xc04>)
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d102      	bne.n	80124ae <readCanToStructs+0x99e>
						printf("RCV V-Message-1\n");
 80124a8:	489b      	ldr	r0, [pc, #620]	; (8012718 <readCanToStructs+0xc08>)
 80124aa:	f014 fb67 	bl	8026b7c <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80124ae:	2246      	movs	r2, #70	; 0x46
 80124b0:	2100      	movs	r1, #0
 80124b2:	489a      	ldr	r0, [pc, #616]	; (801271c <readCanToStructs+0xc0c>)
 80124b4:	f014 f9de 	bl	8026874 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80124b8:	4a98      	ldr	r2, [pc, #608]	; (801271c <readCanToStructs+0xc0c>)
 80124ba:	4b99      	ldr	r3, [pc, #612]	; (8012720 <readCanToStructs+0xc10>)
 80124bc:	4610      	mov	r0, r2
 80124be:	4619      	mov	r1, r3
 80124c0:	2346      	movs	r3, #70	; 0x46
 80124c2:	461a      	mov	r2, r3
 80124c4:	f014 f9ae 	bl	8026824 <memcpy>
					Is_CAN_Exchange_happening = YES;
 80124c8:	4b96      	ldr	r3, [pc, #600]	; (8012724 <readCanToStructs+0xc14>)
 80124ca:	2201      	movs	r2, #1
 80124cc:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 80124ce:	4b93      	ldr	r3, [pc, #588]	; (801271c <readCanToStructs+0xc0c>)
 80124d0:	881b      	ldrh	r3, [r3, #0]
 80124d2:	4619      	mov	r1, r3
 80124d4:	4a94      	ldr	r2, [pc, #592]	; (8012728 <readCanToStructs+0xc18>)
 80124d6:	460b      	mov	r3, r1
 80124d8:	005b      	lsls	r3, r3, #1
 80124da:	440b      	add	r3, r1
 80124dc:	00db      	lsls	r3, r3, #3
 80124de:	4413      	add	r3, r2
 80124e0:	3304      	adds	r3, #4
 80124e2:	781b      	ldrb	r3, [r3, #0]
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d00b      	beq.n	8012500 <readCanToStructs+0x9f0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 80124e8:	4b8c      	ldr	r3, [pc, #560]	; (801271c <readCanToStructs+0xc0c>)
 80124ea:	889b      	ldrh	r3, [r3, #4]
 80124ec:	b2d9      	uxtb	r1, r3
 80124ee:	4b8b      	ldr	r3, [pc, #556]	; (801271c <readCanToStructs+0xc0c>)
 80124f0:	881b      	ldrh	r3, [r3, #0]
 80124f2:	b2da      	uxtb	r2, r3
 80124f4:	4b89      	ldr	r3, [pc, #548]	; (801271c <readCanToStructs+0xc0c>)
 80124f6:	885b      	ldrh	r3, [r3, #2]
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	488c      	ldr	r0, [pc, #560]	; (801272c <readCanToStructs+0xc1c>)
 80124fc:	f7f2 fcfa 	bl	8004ef4 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8012500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012504:	4a82      	ldr	r2, [pc, #520]	; (8012710 <readCanToStructs+0xc00>)
 8012506:	f240 4116 	movw	r1, #1046	; 0x416
 801250a:	fb01 f303 	mul.w	r3, r1, r3
 801250e:	4413      	add	r3, r2
 8012510:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8012514:	2200      	movs	r2, #0
 8012516:	701a      	strb	r2, [r3, #0]
				break;
 8012518:	f000 bdf5 	b.w	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 801251c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012520:	4a7b      	ldr	r2, [pc, #492]	; (8012710 <readCanToStructs+0xc00>)
 8012522:	f240 4116 	movw	r1, #1046	; 0x416
 8012526:	fb01 f303 	mul.w	r3, r1, r3
 801252a:	4413      	add	r3, r2
 801252c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012530:	2201      	movs	r2, #1
 8012532:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 8012534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012538:	4975      	ldr	r1, [pc, #468]	; (8012710 <readCanToStructs+0xc00>)
 801253a:	f240 4216 	movw	r2, #1046	; 0x416
 801253e:	fb03 f202 	mul.w	r2, r3, r2
 8012542:	440a      	add	r2, r1
 8012544:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8012548:	7812      	ldrb	r2, [r2, #0]
 801254a:	3201      	adds	r2, #1
 801254c:	b2d0      	uxtb	r0, r2
 801254e:	4a70      	ldr	r2, [pc, #448]	; (8012710 <readCanToStructs+0xc00>)
 8012550:	f240 4116 	movw	r1, #1046	; 0x416
 8012554:	fb01 f303 	mul.w	r3, r1, r3
 8012558:	4413      	add	r3, r2
 801255a:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801255e:	4602      	mov	r2, r0
 8012560:	701a      	strb	r2, [r3, #0]
				break;
 8012562:	f000 bdd0 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8012566:	4b6e      	ldr	r3, [pc, #440]	; (8012720 <readCanToStructs+0xc10>)
 8012568:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801256a:	4b68      	ldr	r3, [pc, #416]	; (801270c <readCanToStructs+0xbfc>)
 801256c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012570:	885b      	ldrh	r3, [r3, #2]
 8012572:	4a66      	ldr	r2, [pc, #408]	; (801270c <readCanToStructs+0xbfc>)
 8012574:	011b      	lsls	r3, r3, #4
 8012576:	4413      	add	r3, r2
 8012578:	3304      	adds	r3, #4
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012580:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012584:	2b00      	cmp	r3, #0
 8012586:	d110      	bne.n	80125aa <readCanToStructs+0xa9a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8012588:	2246      	movs	r2, #70	; 0x46
 801258a:	2100      	movs	r1, #0
 801258c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801258e:	f014 f971 	bl	8026874 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8012592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012596:	4a5e      	ldr	r2, [pc, #376]	; (8012710 <readCanToStructs+0xc00>)
 8012598:	f240 4116 	movw	r1, #1046	; 0x416
 801259c:	fb01 f303 	mul.w	r3, r1, r3
 80125a0:	4413      	add	r3, r2
 80125a2:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80125a6:	2200      	movs	r2, #0
 80125a8:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 80125aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125ae:	4a58      	ldr	r2, [pc, #352]	; (8012710 <readCanToStructs+0xc00>)
 80125b0:	f240 4116 	movw	r1, #1046	; 0x416
 80125b4:	fb01 f303 	mul.w	r3, r1, r3
 80125b8:	4413      	add	r3, r2
 80125ba:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d015      	beq.n	80125f4 <readCanToStructs+0xae4>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 80125c8:	4859      	ldr	r0, [pc, #356]	; (8012730 <readCanToStructs+0xc20>)
 80125ca:	f014 fad7 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80125ce:	2246      	movs	r2, #70	; 0x46
 80125d0:	2100      	movs	r1, #0
 80125d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125d4:	f014 f94e 	bl	8026874 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80125d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125dc:	4a4c      	ldr	r2, [pc, #304]	; (8012710 <readCanToStructs+0xc00>)
 80125de:	f240 4116 	movw	r1, #1046	; 0x416
 80125e2:	fb01 f303 	mul.w	r3, r1, r3
 80125e6:	4413      	add	r3, r2
 80125e8:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80125ec:	2200      	movs	r2, #0
 80125ee:	701a      	strb	r2, [r3, #0]
					break;
 80125f0:	f000 bd89 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80125f4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125f8:	4613      	mov	r3, r2
 80125fa:	00db      	lsls	r3, r3, #3
 80125fc:	1a9b      	subs	r3, r3, r2
 80125fe:	461a      	mov	r2, r3
 8012600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012602:	4413      	add	r3, r2
 8012604:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012606:	2301      	movs	r3, #1
 8012608:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801260c:	e016      	b.n	801263c <readCanToStructs+0xb2c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801260e:	4b3f      	ldr	r3, [pc, #252]	; (801270c <readCanToStructs+0xbfc>)
 8012610:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012614:	885b      	ldrh	r3, [r3, #2]
 8012616:	461a      	mov	r2, r3
 8012618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801261c:	493b      	ldr	r1, [pc, #236]	; (801270c <readCanToStructs+0xbfc>)
 801261e:	0112      	lsls	r2, r2, #4
 8012620:	440a      	add	r2, r1
 8012622:	4413      	add	r3, r2
 8012624:	3304      	adds	r3, #4
 8012626:	781a      	ldrb	r2, [r3, #0]
 8012628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262a:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262e:	3301      	adds	r3, #1
 8012630:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012632:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012636:	3301      	adds	r3, #1
 8012638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801263c:	4b33      	ldr	r3, [pc, #204]	; (801270c <readCanToStructs+0xbfc>)
 801263e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012642:	885b      	ldrh	r3, [r3, #2]
 8012644:	4a31      	ldr	r2, [pc, #196]	; (801270c <readCanToStructs+0xbfc>)
 8012646:	011b      	lsls	r3, r3, #4
 8012648:	4413      	add	r3, r2
 801264a:	330c      	adds	r3, #12
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012652:	429a      	cmp	r2, r3
 8012654:	d3db      	bcc.n	801260e <readCanToStructs+0xafe>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8012656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801265a:	4a2d      	ldr	r2, [pc, #180]	; (8012710 <readCanToStructs+0xc00>)
 801265c:	f240 4116 	movw	r1, #1046	; 0x416
 8012660:	fb01 f303 	mul.w	r3, r1, r3
 8012664:	4413      	add	r3, r2
 8012666:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	461a      	mov	r2, r3
 801266e:	4613      	mov	r3, r2
 8012670:	00db      	lsls	r3, r3, #3
 8012672:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8012674:	4b25      	ldr	r3, [pc, #148]	; (801270c <readCanToStructs+0xbfc>)
 8012676:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801267a:	885b      	ldrh	r3, [r3, #2]
 801267c:	4923      	ldr	r1, [pc, #140]	; (801270c <readCanToStructs+0xbfc>)
 801267e:	011b      	lsls	r3, r3, #4
 8012680:	440b      	add	r3, r1
 8012682:	330c      	adds	r3, #12
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	3b01      	subs	r3, #1
 8012688:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 801268a:	2b45      	cmp	r3, #69	; 0x45
 801268c:	d954      	bls.n	8012738 <readCanToStructs+0xc28>
					if(Debug_flag == 1)
 801268e:	4b21      	ldr	r3, [pc, #132]	; (8012714 <readCanToStructs+0xc04>)
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	2b01      	cmp	r3, #1
 8012694:	d102      	bne.n	801269c <readCanToStructs+0xb8c>
						printf("RCV V-Message-2\n");
 8012696:	4827      	ldr	r0, [pc, #156]	; (8012734 <readCanToStructs+0xc24>)
 8012698:	f014 fa70 	bl	8026b7c <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801269c:	2246      	movs	r2, #70	; 0x46
 801269e:	2100      	movs	r1, #0
 80126a0:	481e      	ldr	r0, [pc, #120]	; (801271c <readCanToStructs+0xc0c>)
 80126a2:	f014 f8e7 	bl	8026874 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80126a6:	4a1d      	ldr	r2, [pc, #116]	; (801271c <readCanToStructs+0xc0c>)
 80126a8:	4b1d      	ldr	r3, [pc, #116]	; (8012720 <readCanToStructs+0xc10>)
 80126aa:	4610      	mov	r0, r2
 80126ac:	4619      	mov	r1, r3
 80126ae:	2346      	movs	r3, #70	; 0x46
 80126b0:	461a      	mov	r2, r3
 80126b2:	f014 f8b7 	bl	8026824 <memcpy>
					Is_CAN_Exchange_happening = YES;
 80126b6:	4b1b      	ldr	r3, [pc, #108]	; (8012724 <readCanToStructs+0xc14>)
 80126b8:	2201      	movs	r2, #1
 80126ba:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 80126bc:	4b17      	ldr	r3, [pc, #92]	; (801271c <readCanToStructs+0xc0c>)
 80126be:	881b      	ldrh	r3, [r3, #0]
 80126c0:	4619      	mov	r1, r3
 80126c2:	4a19      	ldr	r2, [pc, #100]	; (8012728 <readCanToStructs+0xc18>)
 80126c4:	460b      	mov	r3, r1
 80126c6:	005b      	lsls	r3, r3, #1
 80126c8:	440b      	add	r3, r1
 80126ca:	00db      	lsls	r3, r3, #3
 80126cc:	4413      	add	r3, r2
 80126ce:	3303      	adds	r3, #3
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	d00b      	beq.n	80126ee <readCanToStructs+0xbde>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 80126d6:	4b11      	ldr	r3, [pc, #68]	; (801271c <readCanToStructs+0xc0c>)
 80126d8:	889b      	ldrh	r3, [r3, #4]
 80126da:	b2d9      	uxtb	r1, r3
 80126dc:	4b0f      	ldr	r3, [pc, #60]	; (801271c <readCanToStructs+0xc0c>)
 80126de:	881b      	ldrh	r3, [r3, #0]
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	4b0e      	ldr	r3, [pc, #56]	; (801271c <readCanToStructs+0xc0c>)
 80126e4:	885b      	ldrh	r3, [r3, #2]
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	4810      	ldr	r0, [pc, #64]	; (801272c <readCanToStructs+0xc1c>)
 80126ea:	f7f2 fc03 	bl	8004ef4 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80126ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126f2:	4a07      	ldr	r2, [pc, #28]	; (8012710 <readCanToStructs+0xc00>)
 80126f4:	f240 4116 	movw	r1, #1046	; 0x416
 80126f8:	fb01 f303 	mul.w	r3, r1, r3
 80126fc:	4413      	add	r3, r2
 80126fe:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8012702:	2200      	movs	r2, #0
 8012704:	701a      	strb	r2, [r3, #0]
				break;
 8012706:	f000 bcfe 	b.w	8013106 <readCanToStructs+0x15f6>
 801270a:	bf00      	nop
 801270c:	20007258 	.word	0x20007258
 8012710:	20006a2c 	.word	0x20006a2c
 8012714:	20000bbb 	.word	0x20000bbb
 8012718:	0802b524 	.word	0x0802b524
 801271c:	20002ffc 	.word	0x20002ffc
 8012720:	20003044 	.word	0x20003044
 8012724:	2000030b 	.word	0x2000030b
 8012728:	20002da4 	.word	0x20002da4
 801272c:	20003002 	.word	0x20003002
 8012730:	0802b534 	.word	0x0802b534
 8012734:	0802b558 	.word	0x0802b558
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 8012738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801273c:	4aa0      	ldr	r2, [pc, #640]	; (80129c0 <readCanToStructs+0xeb0>)
 801273e:	f240 4116 	movw	r1, #1046	; 0x416
 8012742:	fb01 f303 	mul.w	r3, r1, r3
 8012746:	4413      	add	r3, r2
 8012748:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801274c:	2201      	movs	r2, #1
 801274e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 8012750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012754:	499a      	ldr	r1, [pc, #616]	; (80129c0 <readCanToStructs+0xeb0>)
 8012756:	f240 4216 	movw	r2, #1046	; 0x416
 801275a:	fb03 f202 	mul.w	r2, r3, r2
 801275e:	440a      	add	r2, r1
 8012760:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8012764:	7812      	ldrb	r2, [r2, #0]
 8012766:	3201      	adds	r2, #1
 8012768:	b2d0      	uxtb	r0, r2
 801276a:	4a95      	ldr	r2, [pc, #596]	; (80129c0 <readCanToStructs+0xeb0>)
 801276c:	f240 4116 	movw	r1, #1046	; 0x416
 8012770:	fb01 f303 	mul.w	r3, r1, r3
 8012774:	4413      	add	r3, r2
 8012776:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801277a:	4602      	mov	r2, r0
 801277c:	701a      	strb	r2, [r3, #0]
				break;
 801277e:	f000 bcc2 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8012782:	4b90      	ldr	r3, [pc, #576]	; (80129c4 <readCanToStructs+0xeb4>)
 8012784:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012786:	4b90      	ldr	r3, [pc, #576]	; (80129c8 <readCanToStructs+0xeb8>)
 8012788:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801278c:	885b      	ldrh	r3, [r3, #2]
 801278e:	4a8e      	ldr	r2, [pc, #568]	; (80129c8 <readCanToStructs+0xeb8>)
 8012790:	011b      	lsls	r3, r3, #4
 8012792:	4413      	add	r3, r2
 8012794:	3304      	adds	r3, #4
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801279c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d110      	bne.n	80127c6 <readCanToStructs+0xcb6>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80127a4:	2208      	movs	r2, #8
 80127a6:	2100      	movs	r1, #0
 80127a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127aa:	f014 f863 	bl	8026874 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80127ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127b2:	4a83      	ldr	r2, [pc, #524]	; (80129c0 <readCanToStructs+0xeb0>)
 80127b4:	f240 4116 	movw	r1, #1046	; 0x416
 80127b8:	fb01 f303 	mul.w	r3, r1, r3
 80127bc:	4413      	add	r3, r2
 80127be:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80127c2:	2200      	movs	r2, #0
 80127c4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80127c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127ca:	4a7d      	ldr	r2, [pc, #500]	; (80129c0 <readCanToStructs+0xeb0>)
 80127cc:	f240 4116 	movw	r1, #1046	; 0x416
 80127d0:	fb01 f303 	mul.w	r3, r1, r3
 80127d4:	4413      	add	r3, r2
 80127d6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d015      	beq.n	8012810 <readCanToStructs+0xd00>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 80127e4:	4879      	ldr	r0, [pc, #484]	; (80129cc <readCanToStructs+0xebc>)
 80127e6:	f014 f9c9 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80127ea:	2208      	movs	r2, #8
 80127ec:	2100      	movs	r1, #0
 80127ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127f0:	f014 f840 	bl	8026874 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80127f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127f8:	4a71      	ldr	r2, [pc, #452]	; (80129c0 <readCanToStructs+0xeb0>)
 80127fa:	f240 4116 	movw	r1, #1046	; 0x416
 80127fe:	fb01 f303 	mul.w	r3, r1, r3
 8012802:	4413      	add	r3, r2
 8012804:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012808:	2200      	movs	r2, #0
 801280a:	701a      	strb	r2, [r3, #0]
					break;
 801280c:	f000 bc7b 	b.w	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012810:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012814:	4613      	mov	r3, r2
 8012816:	00db      	lsls	r3, r3, #3
 8012818:	1a9b      	subs	r3, r3, r2
 801281a:	461a      	mov	r2, r3
 801281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801281e:	4413      	add	r3, r2
 8012820:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012822:	2301      	movs	r3, #1
 8012824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012828:	e016      	b.n	8012858 <readCanToStructs+0xd48>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801282a:	4b67      	ldr	r3, [pc, #412]	; (80129c8 <readCanToStructs+0xeb8>)
 801282c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012830:	885b      	ldrh	r3, [r3, #2]
 8012832:	461a      	mov	r2, r3
 8012834:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012838:	4963      	ldr	r1, [pc, #396]	; (80129c8 <readCanToStructs+0xeb8>)
 801283a:	0112      	lsls	r2, r2, #4
 801283c:	440a      	add	r2, r1
 801283e:	4413      	add	r3, r2
 8012840:	3304      	adds	r3, #4
 8012842:	781a      	ldrb	r2, [r3, #0]
 8012844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012846:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284a:	3301      	adds	r3, #1
 801284c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801284e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012852:	3301      	adds	r3, #1
 8012854:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012858:	4b5b      	ldr	r3, [pc, #364]	; (80129c8 <readCanToStructs+0xeb8>)
 801285a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801285e:	885b      	ldrh	r3, [r3, #2]
 8012860:	4a59      	ldr	r2, [pc, #356]	; (80129c8 <readCanToStructs+0xeb8>)
 8012862:	011b      	lsls	r3, r3, #4
 8012864:	4413      	add	r3, r2
 8012866:	330c      	adds	r3, #12
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801286e:	429a      	cmp	r2, r3
 8012870:	d3db      	bcc.n	801282a <readCanToStructs+0xd1a>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8012872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012876:	4a52      	ldr	r2, [pc, #328]	; (80129c0 <readCanToStructs+0xeb0>)
 8012878:	f240 4116 	movw	r1, #1046	; 0x416
 801287c:	fb01 f303 	mul.w	r3, r1, r3
 8012880:	4413      	add	r3, r2
 8012882:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	461a      	mov	r2, r3
 801288a:	4613      	mov	r3, r2
 801288c:	00db      	lsls	r3, r3, #3
 801288e:	1a9a      	subs	r2, r3, r2
 8012890:	4b4d      	ldr	r3, [pc, #308]	; (80129c8 <readCanToStructs+0xeb8>)
 8012892:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012896:	885b      	ldrh	r3, [r3, #2]
 8012898:	494b      	ldr	r1, [pc, #300]	; (80129c8 <readCanToStructs+0xeb8>)
 801289a:	011b      	lsls	r3, r3, #4
 801289c:	440b      	add	r3, r1
 801289e:	330c      	adds	r3, #12
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	3b01      	subs	r3, #1
 80128a4:	4413      	add	r3, r2
 80128a6:	2b07      	cmp	r3, #7
 80128a8:	d913      	bls.n	80128d2 <readCanToStructs+0xdc2>
					printf("Received Fault Injection Data\n");
 80128aa:	4849      	ldr	r0, [pc, #292]	; (80129d0 <readCanToStructs+0xec0>)
 80128ac:	f014 f966 	bl	8026b7c <puts>
					Is_CAN_Exchange_happening = YES;
 80128b0:	4b48      	ldr	r3, [pc, #288]	; (80129d4 <readCanToStructs+0xec4>)
 80128b2:	2201      	movs	r2, #1
 80128b4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80128b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128ba:	4a41      	ldr	r2, [pc, #260]	; (80129c0 <readCanToStructs+0xeb0>)
 80128bc:	f240 4116 	movw	r1, #1046	; 0x416
 80128c0:	fb01 f303 	mul.w	r3, r1, r3
 80128c4:	4413      	add	r3, r2
 80128c6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80128ca:	2200      	movs	r2, #0
 80128cc:	701a      	strb	r2, [r3, #0]
				break;
 80128ce:	f000 bc1a 	b.w	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80128d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128d6:	4a3a      	ldr	r2, [pc, #232]	; (80129c0 <readCanToStructs+0xeb0>)
 80128d8:	f240 4116 	movw	r1, #1046	; 0x416
 80128dc:	fb01 f303 	mul.w	r3, r1, r3
 80128e0:	4413      	add	r3, r2
 80128e2:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80128e6:	2201      	movs	r2, #1
 80128e8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80128ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128ee:	4934      	ldr	r1, [pc, #208]	; (80129c0 <readCanToStructs+0xeb0>)
 80128f0:	f240 4216 	movw	r2, #1046	; 0x416
 80128f4:	fb03 f202 	mul.w	r2, r3, r2
 80128f8:	440a      	add	r2, r1
 80128fa:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80128fe:	7812      	ldrb	r2, [r2, #0]
 8012900:	3201      	adds	r2, #1
 8012902:	b2d0      	uxtb	r0, r2
 8012904:	4a2e      	ldr	r2, [pc, #184]	; (80129c0 <readCanToStructs+0xeb0>)
 8012906:	f240 4116 	movw	r1, #1046	; 0x416
 801290a:	fb01 f303 	mul.w	r3, r1, r3
 801290e:	4413      	add	r3, r2
 8012910:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012914:	4602      	mov	r2, r0
 8012916:	701a      	strb	r2, [r3, #0]
				break;
 8012918:	e3f5      	b.n	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 801291a:	4b2f      	ldr	r3, [pc, #188]	; (80129d8 <readCanToStructs+0xec8>)
 801291c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801291e:	4b2a      	ldr	r3, [pc, #168]	; (80129c8 <readCanToStructs+0xeb8>)
 8012920:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012924:	885b      	ldrh	r3, [r3, #2]
 8012926:	4a28      	ldr	r2, [pc, #160]	; (80129c8 <readCanToStructs+0xeb8>)
 8012928:	011b      	lsls	r3, r3, #4
 801292a:	4413      	add	r3, r2
 801292c:	3304      	adds	r3, #4
 801292e:	781b      	ldrb	r3, [r3, #0]
 8012930:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012934:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012938:	2b00      	cmp	r3, #0
 801293a:	d110      	bne.n	801295e <readCanToStructs+0xe4e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 801293c:	2214      	movs	r2, #20
 801293e:	2100      	movs	r1, #0
 8012940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012942:	f013 ff97 	bl	8026874 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801294a:	4a1d      	ldr	r2, [pc, #116]	; (80129c0 <readCanToStructs+0xeb0>)
 801294c:	f240 4116 	movw	r1, #1046	; 0x416
 8012950:	fb01 f303 	mul.w	r3, r1, r3
 8012954:	4413      	add	r3, r2
 8012956:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801295a:	2200      	movs	r2, #0
 801295c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 801295e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012962:	4a17      	ldr	r2, [pc, #92]	; (80129c0 <readCanToStructs+0xeb0>)
 8012964:	f240 4116 	movw	r1, #1046	; 0x416
 8012968:	fb01 f303 	mul.w	r3, r1, r3
 801296c:	4413      	add	r3, r2
 801296e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012978:	429a      	cmp	r2, r3
 801297a:	d014      	beq.n	80129a6 <readCanToStructs+0xe96>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 801297c:	4817      	ldr	r0, [pc, #92]	; (80129dc <readCanToStructs+0xecc>)
 801297e:	f014 f8fd 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012982:	2214      	movs	r2, #20
 8012984:	2100      	movs	r1, #0
 8012986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012988:	f013 ff74 	bl	8026874 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801298c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012990:	4a0b      	ldr	r2, [pc, #44]	; (80129c0 <readCanToStructs+0xeb0>)
 8012992:	f240 4116 	movw	r1, #1046	; 0x416
 8012996:	fb01 f303 	mul.w	r3, r1, r3
 801299a:	4413      	add	r3, r2
 801299c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80129a0:	2200      	movs	r2, #0
 80129a2:	701a      	strb	r2, [r3, #0]
					break;
 80129a4:	e3af      	b.n	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80129a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129aa:	4613      	mov	r3, r2
 80129ac:	00db      	lsls	r3, r3, #3
 80129ae:	1a9b      	subs	r3, r3, r2
 80129b0:	461a      	mov	r2, r3
 80129b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b4:	4413      	add	r3, r2
 80129b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80129b8:	2301      	movs	r3, #1
 80129ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80129be:	e026      	b.n	8012a0e <readCanToStructs+0xefe>
 80129c0:	20006a2c 	.word	0x20006a2c
 80129c4:	2000308c 	.word	0x2000308c
 80129c8:	20007258 	.word	0x20007258
 80129cc:	0802b568 	.word	0x0802b568
 80129d0:	0802b588 	.word	0x0802b588
 80129d4:	2000030b 	.word	0x2000030b
 80129d8:	20003754 	.word	0x20003754
 80129dc:	0802b5a8 	.word	0x0802b5a8
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80129e0:	4bb9      	ldr	r3, [pc, #740]	; (8012cc8 <readCanToStructs+0x11b8>)
 80129e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129e6:	885b      	ldrh	r3, [r3, #2]
 80129e8:	461a      	mov	r2, r3
 80129ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129ee:	49b6      	ldr	r1, [pc, #728]	; (8012cc8 <readCanToStructs+0x11b8>)
 80129f0:	0112      	lsls	r2, r2, #4
 80129f2:	440a      	add	r2, r1
 80129f4:	4413      	add	r3, r2
 80129f6:	3304      	adds	r3, #4
 80129f8:	781a      	ldrb	r2, [r3, #0]
 80129fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80129fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a00:	3301      	adds	r3, #1
 8012a02:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a08:	3301      	adds	r3, #1
 8012a0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a0e:	4bae      	ldr	r3, [pc, #696]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012a10:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a14:	885b      	ldrh	r3, [r3, #2]
 8012a16:	4aac      	ldr	r2, [pc, #688]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012a18:	011b      	lsls	r3, r3, #4
 8012a1a:	4413      	add	r3, r2
 8012a1c:	330c      	adds	r3, #12
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d3db      	bcc.n	80129e0 <readCanToStructs+0xed0>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8012a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a2c:	4aa7      	ldr	r2, [pc, #668]	; (8012ccc <readCanToStructs+0x11bc>)
 8012a2e:	f240 4116 	movw	r1, #1046	; 0x416
 8012a32:	fb01 f303 	mul.w	r3, r1, r3
 8012a36:	4413      	add	r3, r2
 8012a38:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	461a      	mov	r2, r3
 8012a40:	4613      	mov	r3, r2
 8012a42:	00db      	lsls	r3, r3, #3
 8012a44:	1a9a      	subs	r2, r3, r2
 8012a46:	4ba0      	ldr	r3, [pc, #640]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012a48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a4c:	885b      	ldrh	r3, [r3, #2]
 8012a4e:	499e      	ldr	r1, [pc, #632]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012a50:	011b      	lsls	r3, r3, #4
 8012a52:	440b      	add	r3, r1
 8012a54:	330c      	adds	r3, #12
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	3b01      	subs	r3, #1
 8012a5a:	4413      	add	r3, r2
 8012a5c:	2b13      	cmp	r3, #19
 8012a5e:	d954      	bls.n	8012b0a <readCanToStructs+0xffa>
					uint16_t CRC16 = 0;
 8012a60:	2300      	movs	r3, #0
 8012a62:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 8012a64:	2300      	movs	r3, #0
 8012a66:	603b      	str	r3, [r7, #0]
 8012a68:	1d3b      	adds	r3, r7, #4
 8012a6a:	2224      	movs	r2, #36	; 0x24
 8012a6c:	2100      	movs	r1, #0
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f013 ff00 	bl	8026874 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8012a74:	463b      	mov	r3, r7
 8012a76:	2214      	movs	r2, #20
 8012a78:	4995      	ldr	r1, [pc, #596]	; (8012cd0 <readCanToStructs+0x11c0>)
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f013 fed2 	bl	8026824 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8012a80:	463b      	mov	r3, r7
 8012a82:	2214      	movs	r2, #20
 8012a84:	4619      	mov	r1, r3
 8012a86:	2000      	movs	r0, #0
 8012a88:	f003 f98c 	bl	8015da4 <GetCRC16>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 8012a90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d10c      	bne.n	8012ab0 <readCanToStructs+0xfa0>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a9a:	4a8c      	ldr	r2, [pc, #560]	; (8012ccc <readCanToStructs+0x11bc>)
 8012a9c:	f240 4116 	movw	r1, #1046	; 0x416
 8012aa0:	fb01 f303 	mul.w	r3, r1, r3
 8012aa4:	4413      	add	r3, r2
 8012aa6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012aaa:	2200      	movs	r2, #0
 8012aac:	701a      	strb	r2, [r3, #0]
				break;
 8012aae:	e32a      	b.n	8013106 <readCanToStructs+0x15f6>
						if(Debug_flag == 1)
 8012ab0:	4b88      	ldr	r3, [pc, #544]	; (8012cd4 <readCanToStructs+0x11c4>)
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d10a      	bne.n	8012ace <readCanToStructs+0xfbe>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8012ab8:	4b85      	ldr	r3, [pc, #532]	; (8012cd0 <readCanToStructs+0x11c0>)
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	4a86      	ldr	r2, [pc, #536]	; (8012cd8 <readCanToStructs+0x11c8>)
 8012abe:	3366      	adds	r3, #102	; 0x66
 8012ac0:	009b      	lsls	r3, r3, #2
 8012ac2:	4413      	add	r3, r2
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	4884      	ldr	r0, [pc, #528]	; (8012cdc <readCanToStructs+0x11cc>)
 8012aca:	f013 ffbb 	bl	8026a44 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8012ace:	4b80      	ldr	r3, [pc, #512]	; (8012cd0 <readCanToStructs+0x11c0>)
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	4613      	mov	r3, r2
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	4413      	add	r3, r2
 8012ada:	009b      	lsls	r3, r3, #2
 8012adc:	4a80      	ldr	r2, [pc, #512]	; (8012ce0 <readCanToStructs+0x11d0>)
 8012ade:	4413      	add	r3, r2
 8012ae0:	2214      	movs	r2, #20
 8012ae2:	497b      	ldr	r1, [pc, #492]	; (8012cd0 <readCanToStructs+0x11c0>)
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f013 fe9d 	bl	8026824 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8012aea:	4b7e      	ldr	r3, [pc, #504]	; (8012ce4 <readCanToStructs+0x11d4>)
 8012aec:	2201      	movs	r2, #1
 8012aee:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012af4:	4a75      	ldr	r2, [pc, #468]	; (8012ccc <readCanToStructs+0x11bc>)
 8012af6:	f240 4116 	movw	r1, #1046	; 0x416
 8012afa:	fb01 f303 	mul.w	r3, r1, r3
 8012afe:	4413      	add	r3, r2
 8012b00:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012b04:	2200      	movs	r2, #0
 8012b06:	701a      	strb	r2, [r3, #0]
				break;
 8012b08:	e2fd      	b.n	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8012b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b0e:	4a6f      	ldr	r2, [pc, #444]	; (8012ccc <readCanToStructs+0x11bc>)
 8012b10:	f240 4116 	movw	r1, #1046	; 0x416
 8012b14:	fb01 f303 	mul.w	r3, r1, r3
 8012b18:	4413      	add	r3, r2
 8012b1a:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8012b1e:	2201      	movs	r2, #1
 8012b20:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b26:	4969      	ldr	r1, [pc, #420]	; (8012ccc <readCanToStructs+0x11bc>)
 8012b28:	f240 4216 	movw	r2, #1046	; 0x416
 8012b2c:	fb03 f202 	mul.w	r2, r3, r2
 8012b30:	440a      	add	r2, r1
 8012b32:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8012b36:	7812      	ldrb	r2, [r2, #0]
 8012b38:	3201      	adds	r2, #1
 8012b3a:	b2d0      	uxtb	r0, r2
 8012b3c:	4a63      	ldr	r2, [pc, #396]	; (8012ccc <readCanToStructs+0x11bc>)
 8012b3e:	f240 4116 	movw	r1, #1046	; 0x416
 8012b42:	fb01 f303 	mul.w	r3, r1, r3
 8012b46:	4413      	add	r3, r2
 8012b48:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	701a      	strb	r2, [r3, #0]
				break;
 8012b50:	e2d9      	b.n	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8012b52:	4b5f      	ldr	r3, [pc, #380]	; (8012cd0 <readCanToStructs+0x11c0>)
 8012b54:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012b56:	4b5c      	ldr	r3, [pc, #368]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012b58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b5c:	885b      	ldrh	r3, [r3, #2]
 8012b5e:	4a5a      	ldr	r2, [pc, #360]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012b60:	011b      	lsls	r3, r3, #4
 8012b62:	4413      	add	r3, r2
 8012b64:	3304      	adds	r3, #4
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012b6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d110      	bne.n	8012b96 <readCanToStructs+0x1086>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012b74:	2214      	movs	r2, #20
 8012b76:	2100      	movs	r1, #0
 8012b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b7a:	f013 fe7b 	bl	8026874 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b82:	4a52      	ldr	r2, [pc, #328]	; (8012ccc <readCanToStructs+0x11bc>)
 8012b84:	f240 4116 	movw	r1, #1046	; 0x416
 8012b88:	fb01 f303 	mul.w	r3, r1, r3
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012b92:	2200      	movs	r2, #0
 8012b94:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b9a:	4a4c      	ldr	r2, [pc, #304]	; (8012ccc <readCanToStructs+0x11bc>)
 8012b9c:	f240 4116 	movw	r1, #1046	; 0x416
 8012ba0:	fb01 f303 	mul.w	r3, r1, r3
 8012ba4:	4413      	add	r3, r2
 8012ba6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d014      	beq.n	8012bde <readCanToStructs+0x10ce>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8012bb4:	484c      	ldr	r0, [pc, #304]	; (8012ce8 <readCanToStructs+0x11d8>)
 8012bb6:	f013 ffe1 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8012bba:	2214      	movs	r2, #20
 8012bbc:	2100      	movs	r1, #0
 8012bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bc0:	f013 fe58 	bl	8026874 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bc8:	4a40      	ldr	r2, [pc, #256]	; (8012ccc <readCanToStructs+0x11bc>)
 8012bca:	f240 4116 	movw	r1, #1046	; 0x416
 8012bce:	fb01 f303 	mul.w	r3, r1, r3
 8012bd2:	4413      	add	r3, r2
 8012bd4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012bd8:	2200      	movs	r2, #0
 8012bda:	701a      	strb	r2, [r3, #0]
					break;
 8012bdc:	e293      	b.n	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012bde:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012be2:	4613      	mov	r3, r2
 8012be4:	00db      	lsls	r3, r3, #3
 8012be6:	1a9b      	subs	r3, r3, r2
 8012be8:	461a      	mov	r2, r3
 8012bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bec:	4413      	add	r3, r2
 8012bee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012bf6:	e016      	b.n	8012c26 <readCanToStructs+0x1116>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012bf8:	4b33      	ldr	r3, [pc, #204]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012bfa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bfe:	885b      	ldrh	r3, [r3, #2]
 8012c00:	461a      	mov	r2, r3
 8012c02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c06:	4930      	ldr	r1, [pc, #192]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012c08:	0112      	lsls	r2, r2, #4
 8012c0a:	440a      	add	r2, r1
 8012c0c:	4413      	add	r3, r2
 8012c0e:	3304      	adds	r3, #4
 8012c10:	781a      	ldrb	r2, [r3, #0]
 8012c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c14:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c18:	3301      	adds	r3, #1
 8012c1a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012c1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c20:	3301      	adds	r3, #1
 8012c22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c26:	4b28      	ldr	r3, [pc, #160]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012c28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c2c:	885b      	ldrh	r3, [r3, #2]
 8012c2e:	4a26      	ldr	r2, [pc, #152]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012c30:	011b      	lsls	r3, r3, #4
 8012c32:	4413      	add	r3, r2
 8012c34:	330c      	adds	r3, #12
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d3db      	bcc.n	8012bf8 <readCanToStructs+0x10e8>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8012c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c44:	4a21      	ldr	r2, [pc, #132]	; (8012ccc <readCanToStructs+0x11bc>)
 8012c46:	f240 4116 	movw	r1, #1046	; 0x416
 8012c4a:	fb01 f303 	mul.w	r3, r1, r3
 8012c4e:	4413      	add	r3, r2
 8012c50:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	461a      	mov	r2, r3
 8012c58:	4613      	mov	r3, r2
 8012c5a:	00db      	lsls	r3, r3, #3
 8012c5c:	1a9a      	subs	r2, r3, r2
 8012c5e:	4b1a      	ldr	r3, [pc, #104]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012c60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c64:	885b      	ldrh	r3, [r3, #2]
 8012c66:	4918      	ldr	r1, [pc, #96]	; (8012cc8 <readCanToStructs+0x11b8>)
 8012c68:	011b      	lsls	r3, r3, #4
 8012c6a:	440b      	add	r3, r1
 8012c6c:	330c      	adds	r3, #12
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	3b01      	subs	r3, #1
 8012c72:	4413      	add	r3, r2
 8012c74:	2b13      	cmp	r3, #19
 8012c76:	d966      	bls.n	8012d46 <readCanToStructs+0x1236>
					uint16_t CRC16 = 0;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	603b      	str	r3, [r7, #0]
 8012c80:	1d3b      	adds	r3, r7, #4
 8012c82:	2224      	movs	r2, #36	; 0x24
 8012c84:	2100      	movs	r1, #0
 8012c86:	4618      	mov	r0, r3
 8012c88:	f013 fdf4 	bl	8026874 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8012c8c:	463b      	mov	r3, r7
 8012c8e:	2214      	movs	r2, #20
 8012c90:	490f      	ldr	r1, [pc, #60]	; (8012cd0 <readCanToStructs+0x11c0>)
 8012c92:	4618      	mov	r0, r3
 8012c94:	f013 fdc6 	bl	8026824 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8012c98:	463b      	mov	r3, r7
 8012c9a:	2214      	movs	r2, #20
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	f003 f880 	bl	8015da4 <GetCRC16>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 8012ca8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d11e      	bne.n	8012cec <readCanToStructs+0x11dc>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cb2:	4a06      	ldr	r2, [pc, #24]	; (8012ccc <readCanToStructs+0x11bc>)
 8012cb4:	f240 4116 	movw	r1, #1046	; 0x416
 8012cb8:	fb01 f303 	mul.w	r3, r1, r3
 8012cbc:	4413      	add	r3, r2
 8012cbe:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	701a      	strb	r2, [r3, #0]
				break;
 8012cc6:	e21e      	b.n	8013106 <readCanToStructs+0x15f6>
 8012cc8:	20007258 	.word	0x20007258
 8012ccc:	20006a2c 	.word	0x20006a2c
 8012cd0:	20003754 	.word	0x20003754
 8012cd4:	20000bbb 	.word	0x20000bbb
 8012cd8:	20000504 	.word	0x20000504
 8012cdc:	0802b5c4 	.word	0x0802b5c4
 8012ce0:	20003678 	.word	0x20003678
 8012ce4:	2000030b 	.word	0x2000030b
 8012ce8:	0802b5d8 	.word	0x0802b5d8
						if(Debug_flag == 1)
 8012cec:	4bba      	ldr	r3, [pc, #744]	; (8012fd8 <readCanToStructs+0x14c8>)
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	2b01      	cmp	r3, #1
 8012cf2:	d10a      	bne.n	8012d0a <readCanToStructs+0x11fa>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8012cf4:	4bb9      	ldr	r3, [pc, #740]	; (8012fdc <readCanToStructs+0x14cc>)
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	4ab9      	ldr	r2, [pc, #740]	; (8012fe0 <readCanToStructs+0x14d0>)
 8012cfa:	3366      	adds	r3, #102	; 0x66
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4413      	add	r3, r2
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	4619      	mov	r1, r3
 8012d04:	48b7      	ldr	r0, [pc, #732]	; (8012fe4 <readCanToStructs+0x14d4>)
 8012d06:	f013 fe9d 	bl	8026a44 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8012d0a:	4bb4      	ldr	r3, [pc, #720]	; (8012fdc <readCanToStructs+0x14cc>)
 8012d0c:	781b      	ldrb	r3, [r3, #0]
 8012d0e:	461a      	mov	r2, r3
 8012d10:	4613      	mov	r3, r2
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	4413      	add	r3, r2
 8012d16:	009b      	lsls	r3, r3, #2
 8012d18:	4ab3      	ldr	r2, [pc, #716]	; (8012fe8 <readCanToStructs+0x14d8>)
 8012d1a:	4413      	add	r3, r2
 8012d1c:	2214      	movs	r2, #20
 8012d1e:	49af      	ldr	r1, [pc, #700]	; (8012fdc <readCanToStructs+0x14cc>)
 8012d20:	4618      	mov	r0, r3
 8012d22:	f013 fd7f 	bl	8026824 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8012d26:	4bb1      	ldr	r3, [pc, #708]	; (8012fec <readCanToStructs+0x14dc>)
 8012d28:	2201      	movs	r2, #1
 8012d2a:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d30:	4aaf      	ldr	r2, [pc, #700]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012d32:	f240 4116 	movw	r1, #1046	; 0x416
 8012d36:	fb01 f303 	mul.w	r3, r1, r3
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012d40:	2200      	movs	r2, #0
 8012d42:	701a      	strb	r2, [r3, #0]
				break;
 8012d44:	e1df      	b.n	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8012d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d4a:	4aa9      	ldr	r2, [pc, #676]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012d4c:	f240 4116 	movw	r1, #1046	; 0x416
 8012d50:	fb01 f303 	mul.w	r3, r1, r3
 8012d54:	4413      	add	r3, r2
 8012d56:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d62:	49a3      	ldr	r1, [pc, #652]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012d64:	f240 4216 	movw	r2, #1046	; 0x416
 8012d68:	fb03 f202 	mul.w	r2, r3, r2
 8012d6c:	440a      	add	r2, r1
 8012d6e:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012d72:	7812      	ldrb	r2, [r2, #0]
 8012d74:	3201      	adds	r2, #1
 8012d76:	b2d0      	uxtb	r0, r2
 8012d78:	4a9d      	ldr	r2, [pc, #628]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012d7a:	f240 4116 	movw	r1, #1046	; 0x416
 8012d7e:	fb01 f303 	mul.w	r3, r1, r3
 8012d82:	4413      	add	r3, r2
 8012d84:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012d88:	4602      	mov	r2, r0
 8012d8a:	701a      	strb	r2, [r3, #0]
				break;
 8012d8c:	e1bb      	b.n	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8012d8e:	4b99      	ldr	r3, [pc, #612]	; (8012ff4 <readCanToStructs+0x14e4>)
 8012d90:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012d92:	4b99      	ldr	r3, [pc, #612]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012d94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d98:	885b      	ldrh	r3, [r3, #2]
 8012d9a:	4a97      	ldr	r2, [pc, #604]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012d9c:	011b      	lsls	r3, r3, #4
 8012d9e:	4413      	add	r3, r2
 8012da0:	3304      	adds	r3, #4
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012da8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d110      	bne.n	8012dd2 <readCanToStructs+0x12c2>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012db0:	2202      	movs	r2, #2
 8012db2:	2100      	movs	r1, #0
 8012db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012db6:	f013 fd5d 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8012dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dbe:	4a8c      	ldr	r2, [pc, #560]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012dc0:	f240 4116 	movw	r1, #1046	; 0x416
 8012dc4:	fb01 f303 	mul.w	r3, r1, r3
 8012dc8:	4413      	add	r3, r2
 8012dca:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012dce:	2200      	movs	r2, #0
 8012dd0:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8012dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dd6:	4a86      	ldr	r2, [pc, #536]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012dd8:	f240 4116 	movw	r1, #1046	; 0x416
 8012ddc:	fb01 f303 	mul.w	r3, r1, r3
 8012de0:	4413      	add	r3, r2
 8012de2:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d014      	beq.n	8012e1a <readCanToStructs+0x130a>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8012df0:	4882      	ldr	r0, [pc, #520]	; (8012ffc <readCanToStructs+0x14ec>)
 8012df2:	f013 fec3 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012df6:	2202      	movs	r2, #2
 8012df8:	2100      	movs	r1, #0
 8012dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dfc:	f013 fd3a 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8012e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e04:	4a7a      	ldr	r2, [pc, #488]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012e06:	f240 4116 	movw	r1, #1046	; 0x416
 8012e0a:	fb01 f303 	mul.w	r3, r1, r3
 8012e0e:	4413      	add	r3, r2
 8012e10:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012e14:	2200      	movs	r2, #0
 8012e16:	701a      	strb	r2, [r3, #0]
					break;
 8012e18:	e175      	b.n	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012e1a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012e1e:	4613      	mov	r3, r2
 8012e20:	00db      	lsls	r3, r3, #3
 8012e22:	1a9b      	subs	r3, r3, r2
 8012e24:	461a      	mov	r2, r3
 8012e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e28:	4413      	add	r3, r2
 8012e2a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e32:	e016      	b.n	8012e62 <readCanToStructs+0x1352>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012e34:	4b70      	ldr	r3, [pc, #448]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012e36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e3a:	885b      	ldrh	r3, [r3, #2]
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e42:	496d      	ldr	r1, [pc, #436]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012e44:	0112      	lsls	r2, r2, #4
 8012e46:	440a      	add	r2, r1
 8012e48:	4413      	add	r3, r2
 8012e4a:	3304      	adds	r3, #4
 8012e4c:	781a      	ldrb	r2, [r3, #0]
 8012e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e50:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e54:	3301      	adds	r3, #1
 8012e56:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012e58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e62:	4b65      	ldr	r3, [pc, #404]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012e64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e68:	885b      	ldrh	r3, [r3, #2]
 8012e6a:	4a63      	ldr	r2, [pc, #396]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012e6c:	011b      	lsls	r3, r3, #4
 8012e6e:	4413      	add	r3, r2
 8012e70:	330c      	adds	r3, #12
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d3db      	bcc.n	8012e34 <readCanToStructs+0x1324>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8012e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e80:	4a5b      	ldr	r2, [pc, #364]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012e82:	f240 4116 	movw	r1, #1046	; 0x416
 8012e86:	fb01 f303 	mul.w	r3, r1, r3
 8012e8a:	4413      	add	r3, r2
 8012e8c:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	461a      	mov	r2, r3
 8012e94:	4613      	mov	r3, r2
 8012e96:	00db      	lsls	r3, r3, #3
 8012e98:	1a9a      	subs	r2, r3, r2
 8012e9a:	4b57      	ldr	r3, [pc, #348]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012e9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ea0:	885b      	ldrh	r3, [r3, #2]
 8012ea2:	4955      	ldr	r1, [pc, #340]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012ea4:	011b      	lsls	r3, r3, #4
 8012ea6:	440b      	add	r3, r1
 8012ea8:	330c      	adds	r3, #12
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	3b01      	subs	r3, #1
 8012eae:	4413      	add	r3, r2
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d919      	bls.n	8012ee8 <readCanToStructs+0x13d8>
					if(Debug_flag == 1)
 8012eb4:	4b48      	ldr	r3, [pc, #288]	; (8012fd8 <readCanToStructs+0x14c8>)
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d105      	bne.n	8012ec8 <readCanToStructs+0x13b8>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8012ebc:	4b4d      	ldr	r3, [pc, #308]	; (8012ff4 <readCanToStructs+0x14e4>)
 8012ebe:	881b      	ldrh	r3, [r3, #0]
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	484f      	ldr	r0, [pc, #316]	; (8013000 <readCanToStructs+0x14f0>)
 8012ec4:	f013 fdbe 	bl	8026a44 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8012ec8:	4b48      	ldr	r3, [pc, #288]	; (8012fec <readCanToStructs+0x14dc>)
 8012eca:	2201      	movs	r2, #1
 8012ecc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8012ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ed2:	4a47      	ldr	r2, [pc, #284]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012ed4:	f240 4116 	movw	r1, #1046	; 0x416
 8012ed8:	fb01 f303 	mul.w	r3, r1, r3
 8012edc:	4413      	add	r3, r2
 8012ede:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	701a      	strb	r2, [r3, #0]
				break;
 8012ee6:	e10e      	b.n	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8012ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012eec:	4a40      	ldr	r2, [pc, #256]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012eee:	f240 4116 	movw	r1, #1046	; 0x416
 8012ef2:	fb01 f303 	mul.w	r3, r1, r3
 8012ef6:	4413      	add	r3, r2
 8012ef8:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8012efc:	2201      	movs	r2, #1
 8012efe:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8012f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f04:	493a      	ldr	r1, [pc, #232]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012f06:	f240 4216 	movw	r2, #1046	; 0x416
 8012f0a:	fb03 f202 	mul.w	r2, r3, r2
 8012f0e:	440a      	add	r2, r1
 8012f10:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8012f14:	7812      	ldrb	r2, [r2, #0]
 8012f16:	3201      	adds	r2, #1
 8012f18:	b2d0      	uxtb	r0, r2
 8012f1a:	4a35      	ldr	r2, [pc, #212]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012f1c:	f240 4116 	movw	r1, #1046	; 0x416
 8012f20:	fb01 f303 	mul.w	r3, r1, r3
 8012f24:	4413      	add	r3, r2
 8012f26:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	701a      	strb	r2, [r3, #0]
				break;
 8012f2e:	e0ea      	b.n	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8012f30:	4b30      	ldr	r3, [pc, #192]	; (8012ff4 <readCanToStructs+0x14e4>)
 8012f32:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012f34:	4b30      	ldr	r3, [pc, #192]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012f36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f3a:	885b      	ldrh	r3, [r3, #2]
 8012f3c:	4a2e      	ldr	r2, [pc, #184]	; (8012ff8 <readCanToStructs+0x14e8>)
 8012f3e:	011b      	lsls	r3, r3, #4
 8012f40:	4413      	add	r3, r2
 8012f42:	3304      	adds	r3, #4
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012f4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d110      	bne.n	8012f74 <readCanToStructs+0x1464>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012f52:	2202      	movs	r2, #2
 8012f54:	2100      	movs	r1, #0
 8012f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f58:	f013 fc8c 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8012f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f60:	4a23      	ldr	r2, [pc, #140]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012f62:	f240 4116 	movw	r1, #1046	; 0x416
 8012f66:	fb01 f303 	mul.w	r3, r1, r3
 8012f6a:	4413      	add	r3, r2
 8012f6c:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012f70:	2200      	movs	r2, #0
 8012f72:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8012f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f78:	4a1d      	ldr	r2, [pc, #116]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012f7a:	f240 4116 	movw	r1, #1046	; 0x416
 8012f7e:	fb01 f303 	mul.w	r3, r1, r3
 8012f82:	4413      	add	r3, r2
 8012f84:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d014      	beq.n	8012fbc <readCanToStructs+0x14ac>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8012f92:	481c      	ldr	r0, [pc, #112]	; (8013004 <readCanToStructs+0x14f4>)
 8012f94:	f013 fdf2 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012f98:	2202      	movs	r2, #2
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f9e:	f013 fc69 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8012fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fa6:	4a12      	ldr	r2, [pc, #72]	; (8012ff0 <readCanToStructs+0x14e0>)
 8012fa8:	f240 4116 	movw	r1, #1046	; 0x416
 8012fac:	fb01 f303 	mul.w	r3, r1, r3
 8012fb0:	4413      	add	r3, r2
 8012fb2:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	701a      	strb	r2, [r3, #0]
					break;
 8012fba:	e0a4      	b.n	8013106 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012fbc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	00db      	lsls	r3, r3, #3
 8012fc4:	1a9b      	subs	r3, r3, r2
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fca:	4413      	add	r3, r2
 8012fcc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012fce:	2301      	movs	r3, #1
 8012fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012fd4:	e02f      	b.n	8013036 <readCanToStructs+0x1526>
 8012fd6:	bf00      	nop
 8012fd8:	20000bbb 	.word	0x20000bbb
 8012fdc:	20003754 	.word	0x20003754
 8012fe0:	20000504 	.word	0x20000504
 8012fe4:	0802b5f8 	.word	0x0802b5f8
 8012fe8:	20003678 	.word	0x20003678
 8012fec:	2000030b 	.word	0x2000030b
 8012ff0:	20006a2c 	.word	0x20006a2c
 8012ff4:	20000bb8 	.word	0x20000bb8
 8012ff8:	20007258 	.word	0x20007258
 8012ffc:	0802b60c 	.word	0x0802b60c
 8013000:	0802b634 	.word	0x0802b634
 8013004:	0802b648 	.word	0x0802b648
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013008:	4b9f      	ldr	r3, [pc, #636]	; (8013288 <readCanToStructs+0x1778>)
 801300a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801300e:	885b      	ldrh	r3, [r3, #2]
 8013010:	461a      	mov	r2, r3
 8013012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013016:	499c      	ldr	r1, [pc, #624]	; (8013288 <readCanToStructs+0x1778>)
 8013018:	0112      	lsls	r2, r2, #4
 801301a:	440a      	add	r2, r1
 801301c:	4413      	add	r3, r2
 801301e:	3304      	adds	r3, #4
 8013020:	781a      	ldrb	r2, [r3, #0]
 8013022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013024:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013028:	3301      	adds	r3, #1
 801302a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801302c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013030:	3301      	adds	r3, #1
 8013032:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013036:	4b94      	ldr	r3, [pc, #592]	; (8013288 <readCanToStructs+0x1778>)
 8013038:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801303c:	885b      	ldrh	r3, [r3, #2]
 801303e:	4a92      	ldr	r2, [pc, #584]	; (8013288 <readCanToStructs+0x1778>)
 8013040:	011b      	lsls	r3, r3, #4
 8013042:	4413      	add	r3, r2
 8013044:	330c      	adds	r3, #12
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801304c:	429a      	cmp	r2, r3
 801304e:	d3db      	bcc.n	8013008 <readCanToStructs+0x14f8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8013050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013054:	4a8d      	ldr	r2, [pc, #564]	; (801328c <readCanToStructs+0x177c>)
 8013056:	f240 4116 	movw	r1, #1046	; 0x416
 801305a:	fb01 f303 	mul.w	r3, r1, r3
 801305e:	4413      	add	r3, r2
 8013060:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	461a      	mov	r2, r3
 8013068:	4613      	mov	r3, r2
 801306a:	00db      	lsls	r3, r3, #3
 801306c:	1a9a      	subs	r2, r3, r2
 801306e:	4b86      	ldr	r3, [pc, #536]	; (8013288 <readCanToStructs+0x1778>)
 8013070:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013074:	885b      	ldrh	r3, [r3, #2]
 8013076:	4984      	ldr	r1, [pc, #528]	; (8013288 <readCanToStructs+0x1778>)
 8013078:	011b      	lsls	r3, r3, #4
 801307a:	440b      	add	r3, r1
 801307c:	330c      	adds	r3, #12
 801307e:	781b      	ldrb	r3, [r3, #0]
 8013080:	3b01      	subs	r3, #1
 8013082:	4413      	add	r3, r2
 8013084:	2b01      	cmp	r3, #1
 8013086:	d919      	bls.n	80130bc <readCanToStructs+0x15ac>
					if(Debug_flag == 1)
 8013088:	4b81      	ldr	r3, [pc, #516]	; (8013290 <readCanToStructs+0x1780>)
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	2b01      	cmp	r3, #1
 801308e:	d105      	bne.n	801309c <readCanToStructs+0x158c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8013090:	4b80      	ldr	r3, [pc, #512]	; (8013294 <readCanToStructs+0x1784>)
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	4619      	mov	r1, r3
 8013096:	4880      	ldr	r0, [pc, #512]	; (8013298 <readCanToStructs+0x1788>)
 8013098:	f013 fcd4 	bl	8026a44 <iprintf>
					Is_CAN_Exchange_happening = YES;
 801309c:	4b7f      	ldr	r3, [pc, #508]	; (801329c <readCanToStructs+0x178c>)
 801309e:	2201      	movs	r2, #1
 80130a0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 80130a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130a6:	4a79      	ldr	r2, [pc, #484]	; (801328c <readCanToStructs+0x177c>)
 80130a8:	f240 4116 	movw	r1, #1046	; 0x416
 80130ac:	fb01 f303 	mul.w	r3, r1, r3
 80130b0:	4413      	add	r3, r2
 80130b2:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80130b6:	2200      	movs	r2, #0
 80130b8:	701a      	strb	r2, [r3, #0]
				break;
 80130ba:	e024      	b.n	8013106 <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 80130bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130c0:	4a72      	ldr	r2, [pc, #456]	; (801328c <readCanToStructs+0x177c>)
 80130c2:	f240 4116 	movw	r1, #1046	; 0x416
 80130c6:	fb01 f303 	mul.w	r3, r1, r3
 80130ca:	4413      	add	r3, r2
 80130cc:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80130d0:	2201      	movs	r2, #1
 80130d2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 80130d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130d8:	496c      	ldr	r1, [pc, #432]	; (801328c <readCanToStructs+0x177c>)
 80130da:	f240 4216 	movw	r2, #1046	; 0x416
 80130de:	fb03 f202 	mul.w	r2, r3, r2
 80130e2:	440a      	add	r2, r1
 80130e4:	f202 4215 	addw	r2, r2, #1045	; 0x415
 80130e8:	7812      	ldrb	r2, [r2, #0]
 80130ea:	3201      	adds	r2, #1
 80130ec:	b2d0      	uxtb	r0, r2
 80130ee:	4a67      	ldr	r2, [pc, #412]	; (801328c <readCanToStructs+0x177c>)
 80130f0:	f240 4116 	movw	r1, #1046	; 0x416
 80130f4:	fb01 f303 	mul.w	r3, r1, r3
 80130f8:	4413      	add	r3, r2
 80130fa:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80130fe:	4602      	mov	r2, r0
 8013100:	701a      	strb	r2, [r3, #0]
				break;
 8013102:	e000      	b.n	8013106 <readCanToStructs+0x15f6>
				break;
 8013104:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8013106:	4b60      	ldr	r3, [pc, #384]	; (8013288 <readCanToStructs+0x1778>)
 8013108:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801310c:	885b      	ldrh	r3, [r3, #2]
 801310e:	011b      	lsls	r3, r3, #4
 8013110:	4a5d      	ldr	r2, [pc, #372]	; (8013288 <readCanToStructs+0x1778>)
 8013112:	4413      	add	r3, r2
 8013114:	2210      	movs	r2, #16
 8013116:	2100      	movs	r1, #0
 8013118:	4618      	mov	r0, r3
 801311a:	f013 fbab 	bl	8026874 <memset>
			canRead.Out++;
 801311e:	4b5a      	ldr	r3, [pc, #360]	; (8013288 <readCanToStructs+0x1778>)
 8013120:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013124:	885b      	ldrh	r3, [r3, #2]
 8013126:	3301      	adds	r3, #1
 8013128:	b29a      	uxth	r2, r3
 801312a:	4b57      	ldr	r3, [pc, #348]	; (8013288 <readCanToStructs+0x1778>)
 801312c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013130:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8013132:	4b55      	ldr	r3, [pc, #340]	; (8013288 <readCanToStructs+0x1778>)
 8013134:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013138:	885b      	ldrh	r3, [r3, #2]
 801313a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801313e:	d104      	bne.n	801314a <readCanToStructs+0x163a>
				canRead.Out = 0;
 8013140:	4b51      	ldr	r3, [pc, #324]	; (8013288 <readCanToStructs+0x1778>)
 8013142:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013146:	2200      	movs	r2, #0
 8013148:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 801314a:	f7fe fc8b 	bl	8011a64 <canDataReady>
 801314e:	4603      	mov	r3, r0
 8013150:	2b00      	cmp	r3, #0
 8013152:	f47e ad07 	bne.w	8011b64 <readCanToStructs+0x54>

		}
		/* ___________________ HITACHI _______________ */
	}
	break;
 8013156:	f002 bdc9 	b.w	8015cec <readCanToStructs+0x41dc>
	case SIEMENS:
	{
		/* __________ SIEMENS _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 801315a:	4b4b      	ldr	r3, [pc, #300]	; (8013288 <readCanToStructs+0x1778>)
 801315c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013160:	885b      	ldrh	r3, [r3, #2]
 8013162:	4a49      	ldr	r2, [pc, #292]	; (8013288 <readCanToStructs+0x1778>)
 8013164:	011b      	lsls	r3, r3, #4
 8013166:	4413      	add	r3, r2
 8013168:	330f      	adds	r3, #15
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	3b01      	subs	r3, #1
 801316e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8013172:	4b45      	ldr	r3, [pc, #276]	; (8013288 <readCanToStructs+0x1778>)
 8013174:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013178:	885b      	ldrh	r3, [r3, #2]
 801317a:	4a43      	ldr	r2, [pc, #268]	; (8013288 <readCanToStructs+0x1778>)
 801317c:	011b      	lsls	r3, r3, #4
 801317e:	4413      	add	r3, r2
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	f240 220a 	movw	r2, #522	; 0x20a
 8013186:	4293      	cmp	r3, r2
 8013188:	f201 803e 	bhi.w	8014208 <readCanToStructs+0x26f8>
 801318c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013190:	d80a      	bhi.n	80131a8 <readCanToStructs+0x1698>
 8013192:	f240 1203 	movw	r2, #259	; 0x103
 8013196:	4293      	cmp	r3, r2
 8013198:	d022      	beq.n	80131e0 <readCanToStructs+0x16d0>
 801319a:	f240 1209 	movw	r2, #265	; 0x109
 801319e:	4293      	cmp	r3, r2
 80131a0:	f000 8104 	beq.w	80133ac <readCanToStructs+0x189c>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 80131a4:	f001 b830 	b.w	8014208 <readCanToStructs+0x26f8>
 80131a8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80131ac:	2b09      	cmp	r3, #9
 80131ae:	f201 802b 	bhi.w	8014208 <readCanToStructs+0x26f8>
 80131b2:	a201      	add	r2, pc, #4	; (adr r2, 80131b8 <readCanToStructs+0x16a8>)
 80131b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b8:	08013579 	.word	0x08013579
 80131bc:	0801372f 	.word	0x0801372f
 80131c0:	08014209 	.word	0x08014209
 80131c4:	08014209 	.word	0x08014209
 80131c8:	08013ccf 	.word	0x08013ccf
 80131cc:	08014209 	.word	0x08014209
 80131d0:	0801390f 	.word	0x0801390f
 80131d4:	08013adb 	.word	0x08013adb
 80131d8:	08013ea1 	.word	0x08013ea1
 80131dc:	08014043 	.word	0x08014043
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80131e0:	4b2f      	ldr	r3, [pc, #188]	; (80132a0 <readCanToStructs+0x1790>)
 80131e2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80131e4:	4b28      	ldr	r3, [pc, #160]	; (8013288 <readCanToStructs+0x1778>)
 80131e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80131ea:	885b      	ldrh	r3, [r3, #2]
 80131ec:	4a26      	ldr	r2, [pc, #152]	; (8013288 <readCanToStructs+0x1778>)
 80131ee:	011b      	lsls	r3, r3, #4
 80131f0:	4413      	add	r3, r2
 80131f2:	3304      	adds	r3, #4
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80131fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d110      	bne.n	8013224 <readCanToStructs+0x1714>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013202:	2206      	movs	r2, #6
 8013204:	2100      	movs	r1, #0
 8013206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013208:	f013 fb34 	bl	8026874 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801320c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013210:	4a1e      	ldr	r2, [pc, #120]	; (801328c <readCanToStructs+0x177c>)
 8013212:	f240 4116 	movw	r1, #1046	; 0x416
 8013216:	fb01 f303 	mul.w	r3, r1, r3
 801321a:	4413      	add	r3, r2
 801321c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013220:	2200      	movs	r2, #0
 8013222:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8013224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013228:	4a18      	ldr	r2, [pc, #96]	; (801328c <readCanToStructs+0x177c>)
 801322a:	f240 4116 	movw	r1, #1046	; 0x416
 801322e:	fb01 f303 	mul.w	r3, r1, r3
 8013232:	4413      	add	r3, r2
 8013234:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801323e:	429a      	cmp	r2, r3
 8013240:	d015      	beq.n	801326e <readCanToStructs+0x175e>
					printf("GPS Packet Seq no MisMatch\n");
 8013242:	4818      	ldr	r0, [pc, #96]	; (80132a4 <readCanToStructs+0x1794>)
 8013244:	f013 fc9a 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013248:	2206      	movs	r2, #6
 801324a:	2100      	movs	r1, #0
 801324c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801324e:	f013 fb11 	bl	8026874 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8013252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013256:	4a0d      	ldr	r2, [pc, #52]	; (801328c <readCanToStructs+0x177c>)
 8013258:	f240 4116 	movw	r1, #1046	; 0x416
 801325c:	fb01 f303 	mul.w	r3, r1, r3
 8013260:	4413      	add	r3, r2
 8013262:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013266:	2200      	movs	r2, #0
 8013268:	701a      	strb	r2, [r3, #0]
					break;
 801326a:	f000 bfd2 	b.w	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 801326e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013272:	4613      	mov	r3, r2
 8013274:	00db      	lsls	r3, r3, #3
 8013276:	1a9b      	subs	r3, r3, r2
 8013278:	461a      	mov	r2, r3
 801327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801327c:	4413      	add	r3, r2
 801327e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013280:	2301      	movs	r3, #1
 8013282:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013286:	e026      	b.n	80132d6 <readCanToStructs+0x17c6>
 8013288:	20007258 	.word	0x20007258
 801328c:	20006a2c 	.word	0x20006a2c
 8013290:	20000bbb 	.word	0x20000bbb
 8013294:	20000bb8 	.word	0x20000bb8
 8013298:	0802b670 	.word	0x0802b670
 801329c:	2000030b 	.word	0x2000030b
 80132a0:	20003fd4 	.word	0x20003fd4
 80132a4:	0802b434 	.word	0x0802b434
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80132a8:	4bab      	ldr	r3, [pc, #684]	; (8013558 <readCanToStructs+0x1a48>)
 80132aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132ae:	885b      	ldrh	r3, [r3, #2]
 80132b0:	461a      	mov	r2, r3
 80132b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132b6:	49a8      	ldr	r1, [pc, #672]	; (8013558 <readCanToStructs+0x1a48>)
 80132b8:	0112      	lsls	r2, r2, #4
 80132ba:	440a      	add	r2, r1
 80132bc:	4413      	add	r3, r2
 80132be:	3304      	adds	r3, #4
 80132c0:	781a      	ldrb	r2, [r3, #0]
 80132c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80132c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c8:	3301      	adds	r3, #1
 80132ca:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80132cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132d0:	3301      	adds	r3, #1
 80132d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132d6:	4ba0      	ldr	r3, [pc, #640]	; (8013558 <readCanToStructs+0x1a48>)
 80132d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132dc:	885b      	ldrh	r3, [r3, #2]
 80132de:	4a9e      	ldr	r2, [pc, #632]	; (8013558 <readCanToStructs+0x1a48>)
 80132e0:	011b      	lsls	r3, r3, #4
 80132e2:	4413      	add	r3, r2
 80132e4:	330c      	adds	r3, #12
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d3db      	bcc.n	80132a8 <readCanToStructs+0x1798>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80132f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132f4:	4a99      	ldr	r2, [pc, #612]	; (801355c <readCanToStructs+0x1a4c>)
 80132f6:	f240 4116 	movw	r1, #1046	; 0x416
 80132fa:	fb01 f303 	mul.w	r3, r1, r3
 80132fe:	4413      	add	r3, r2
 8013300:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	461a      	mov	r2, r3
 8013308:	4613      	mov	r3, r2
 801330a:	00db      	lsls	r3, r3, #3
 801330c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801330e:	4b92      	ldr	r3, [pc, #584]	; (8013558 <readCanToStructs+0x1a48>)
 8013310:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013314:	885b      	ldrh	r3, [r3, #2]
 8013316:	4990      	ldr	r1, [pc, #576]	; (8013558 <readCanToStructs+0x1a48>)
 8013318:	011b      	lsls	r3, r3, #4
 801331a:	440b      	add	r3, r1
 801331c:	330c      	adds	r3, #12
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	3b01      	subs	r3, #1
 8013322:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8013324:	2b05      	cmp	r3, #5
 8013326:	d91c      	bls.n	8013362 <readCanToStructs+0x1852>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8013328:	4b8d      	ldr	r3, [pc, #564]	; (8013560 <readCanToStructs+0x1a50>)
 801332a:	4a8e      	ldr	r2, [pc, #568]	; (8013564 <readCanToStructs+0x1a54>)
 801332c:	6811      	ldr	r1, [r2, #0]
 801332e:	6019      	str	r1, [r3, #0]
 8013330:	8892      	ldrh	r2, [r2, #4]
 8013332:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8013334:	4b8c      	ldr	r3, [pc, #560]	; (8013568 <readCanToStructs+0x1a58>)
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	2b01      	cmp	r3, #1
 801333a:	d102      	bne.n	8013342 <readCanToStructs+0x1832>
						printf("GPS_PACKET_RECEIVED\n");
 801333c:	488b      	ldr	r0, [pc, #556]	; (801356c <readCanToStructs+0x1a5c>)
 801333e:	f013 fc1d 	bl	8026b7c <puts>
					Write_RTC();
 8013342:	f7f9 fb31 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8013346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801334a:	4a84      	ldr	r2, [pc, #528]	; (801355c <readCanToStructs+0x1a4c>)
 801334c:	f240 4116 	movw	r1, #1046	; 0x416
 8013350:	fb01 f303 	mul.w	r3, r1, r3
 8013354:	4413      	add	r3, r2
 8013356:	f203 2307 	addw	r3, r3, #519	; 0x207
 801335a:	2200      	movs	r2, #0
 801335c:	701a      	strb	r2, [r3, #0]
				break;
 801335e:	f000 bf58 	b.w	8014212 <readCanToStructs+0x2702>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8013362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013366:	4a7d      	ldr	r2, [pc, #500]	; (801355c <readCanToStructs+0x1a4c>)
 8013368:	f240 4116 	movw	r1, #1046	; 0x416
 801336c:	fb01 f303 	mul.w	r3, r1, r3
 8013370:	4413      	add	r3, r2
 8013372:	f203 2306 	addw	r3, r3, #518	; 0x206
 8013376:	2201      	movs	r2, #1
 8013378:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801337a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801337e:	4977      	ldr	r1, [pc, #476]	; (801355c <readCanToStructs+0x1a4c>)
 8013380:	f240 4216 	movw	r2, #1046	; 0x416
 8013384:	fb03 f202 	mul.w	r2, r3, r2
 8013388:	440a      	add	r2, r1
 801338a:	f202 2207 	addw	r2, r2, #519	; 0x207
 801338e:	7812      	ldrb	r2, [r2, #0]
 8013390:	3201      	adds	r2, #1
 8013392:	b2d0      	uxtb	r0, r2
 8013394:	4a71      	ldr	r2, [pc, #452]	; (801355c <readCanToStructs+0x1a4c>)
 8013396:	f240 4116 	movw	r1, #1046	; 0x416
 801339a:	fb01 f303 	mul.w	r3, r1, r3
 801339e:	4413      	add	r3, r2
 80133a0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80133a4:	4602      	mov	r2, r0
 80133a6:	701a      	strb	r2, [r3, #0]
				break;
 80133a8:	f000 bf33 	b.w	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80133ac:	4b6d      	ldr	r3, [pc, #436]	; (8013564 <readCanToStructs+0x1a54>)
 80133ae:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80133b0:	4b69      	ldr	r3, [pc, #420]	; (8013558 <readCanToStructs+0x1a48>)
 80133b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80133b6:	885b      	ldrh	r3, [r3, #2]
 80133b8:	4a67      	ldr	r2, [pc, #412]	; (8013558 <readCanToStructs+0x1a48>)
 80133ba:	011b      	lsls	r3, r3, #4
 80133bc:	4413      	add	r3, r2
 80133be:	3304      	adds	r3, #4
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80133c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d110      	bne.n	80133f0 <readCanToStructs+0x18e0>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80133ce:	2206      	movs	r2, #6
 80133d0:	2100      	movs	r1, #0
 80133d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133d4:	f013 fa4e 	bl	8026874 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80133d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133dc:	4a5f      	ldr	r2, [pc, #380]	; (801355c <readCanToStructs+0x1a4c>)
 80133de:	f240 4116 	movw	r1, #1046	; 0x416
 80133e2:	fb01 f303 	mul.w	r3, r1, r3
 80133e6:	4413      	add	r3, r2
 80133e8:	f203 2313 	addw	r3, r3, #531	; 0x213
 80133ec:	2200      	movs	r2, #0
 80133ee:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80133f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133f4:	4a59      	ldr	r2, [pc, #356]	; (801355c <readCanToStructs+0x1a4c>)
 80133f6:	f240 4116 	movw	r1, #1046	; 0x416
 80133fa:	fb01 f303 	mul.w	r3, r1, r3
 80133fe:	4413      	add	r3, r2
 8013400:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801340a:	429a      	cmp	r2, r3
 801340c:	d015      	beq.n	801343a <readCanToStructs+0x192a>
					printf("GPS2 Packet Seq no MisMatch\n");
 801340e:	4858      	ldr	r0, [pc, #352]	; (8013570 <readCanToStructs+0x1a60>)
 8013410:	f013 fbb4 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013414:	2206      	movs	r2, #6
 8013416:	2100      	movs	r1, #0
 8013418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801341a:	f013 fa2b 	bl	8026874 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801341e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013422:	4a4e      	ldr	r2, [pc, #312]	; (801355c <readCanToStructs+0x1a4c>)
 8013424:	f240 4116 	movw	r1, #1046	; 0x416
 8013428:	fb01 f303 	mul.w	r3, r1, r3
 801342c:	4413      	add	r3, r2
 801342e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013432:	2200      	movs	r2, #0
 8013434:	701a      	strb	r2, [r3, #0]
					break;
 8013436:	f000 beec 	b.w	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 801343a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801343e:	4613      	mov	r3, r2
 8013440:	00db      	lsls	r3, r3, #3
 8013442:	1a9b      	subs	r3, r3, r2
 8013444:	461a      	mov	r2, r3
 8013446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013448:	4413      	add	r3, r2
 801344a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801344c:	2301      	movs	r3, #1
 801344e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013452:	e016      	b.n	8013482 <readCanToStructs+0x1972>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013454:	4b40      	ldr	r3, [pc, #256]	; (8013558 <readCanToStructs+0x1a48>)
 8013456:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801345a:	885b      	ldrh	r3, [r3, #2]
 801345c:	461a      	mov	r2, r3
 801345e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013462:	493d      	ldr	r1, [pc, #244]	; (8013558 <readCanToStructs+0x1a48>)
 8013464:	0112      	lsls	r2, r2, #4
 8013466:	440a      	add	r2, r1
 8013468:	4413      	add	r3, r2
 801346a:	3304      	adds	r3, #4
 801346c:	781a      	ldrb	r2, [r3, #0]
 801346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013470:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013474:	3301      	adds	r3, #1
 8013476:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801347c:	3301      	adds	r3, #1
 801347e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013482:	4b35      	ldr	r3, [pc, #212]	; (8013558 <readCanToStructs+0x1a48>)
 8013484:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013488:	885b      	ldrh	r3, [r3, #2]
 801348a:	4a33      	ldr	r2, [pc, #204]	; (8013558 <readCanToStructs+0x1a48>)
 801348c:	011b      	lsls	r3, r3, #4
 801348e:	4413      	add	r3, r2
 8013490:	330c      	adds	r3, #12
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013498:	429a      	cmp	r2, r3
 801349a:	d3db      	bcc.n	8013454 <readCanToStructs+0x1944>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801349c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134a0:	4a2e      	ldr	r2, [pc, #184]	; (801355c <readCanToStructs+0x1a4c>)
 80134a2:	f240 4116 	movw	r1, #1046	; 0x416
 80134a6:	fb01 f303 	mul.w	r3, r1, r3
 80134aa:	4413      	add	r3, r2
 80134ac:	f203 2313 	addw	r3, r3, #531	; 0x213
 80134b0:	781b      	ldrb	r3, [r3, #0]
 80134b2:	461a      	mov	r2, r3
 80134b4:	4613      	mov	r3, r2
 80134b6:	00db      	lsls	r3, r3, #3
 80134b8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80134ba:	4b27      	ldr	r3, [pc, #156]	; (8013558 <readCanToStructs+0x1a48>)
 80134bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134c0:	885b      	ldrh	r3, [r3, #2]
 80134c2:	4925      	ldr	r1, [pc, #148]	; (8013558 <readCanToStructs+0x1a48>)
 80134c4:	011b      	lsls	r3, r3, #4
 80134c6:	440b      	add	r3, r1
 80134c8:	330c      	adds	r3, #12
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	3b01      	subs	r3, #1
 80134ce:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80134d0:	2b05      	cmp	r3, #5
 80134d2:	d91c      	bls.n	801350e <readCanToStructs+0x19fe>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80134d4:	4b22      	ldr	r3, [pc, #136]	; (8013560 <readCanToStructs+0x1a50>)
 80134d6:	4a23      	ldr	r2, [pc, #140]	; (8013564 <readCanToStructs+0x1a54>)
 80134d8:	6811      	ldr	r1, [r2, #0]
 80134da:	6019      	str	r1, [r3, #0]
 80134dc:	8892      	ldrh	r2, [r2, #4]
 80134de:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80134e0:	4b21      	ldr	r3, [pc, #132]	; (8013568 <readCanToStructs+0x1a58>)
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	2b01      	cmp	r3, #1
 80134e6:	d102      	bne.n	80134ee <readCanToStructs+0x19de>
						printf("GPS2_PACKET_RECEIVED\n");
 80134e8:	4822      	ldr	r0, [pc, #136]	; (8013574 <readCanToStructs+0x1a64>)
 80134ea:	f013 fb47 	bl	8026b7c <puts>
					Write_RTC();
 80134ee:	f7f9 fa5b 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80134f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134f6:	4a19      	ldr	r2, [pc, #100]	; (801355c <readCanToStructs+0x1a4c>)
 80134f8:	f240 4116 	movw	r1, #1046	; 0x416
 80134fc:	fb01 f303 	mul.w	r3, r1, r3
 8013500:	4413      	add	r3, r2
 8013502:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013506:	2200      	movs	r2, #0
 8013508:	701a      	strb	r2, [r3, #0]
				break;
 801350a:	f000 be82 	b.w	8014212 <readCanToStructs+0x2702>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 801350e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013512:	4a12      	ldr	r2, [pc, #72]	; (801355c <readCanToStructs+0x1a4c>)
 8013514:	f240 4116 	movw	r1, #1046	; 0x416
 8013518:	fb01 f303 	mul.w	r3, r1, r3
 801351c:	4413      	add	r3, r2
 801351e:	f203 2312 	addw	r3, r3, #530	; 0x212
 8013522:	2201      	movs	r2, #1
 8013524:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8013526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801352a:	490c      	ldr	r1, [pc, #48]	; (801355c <readCanToStructs+0x1a4c>)
 801352c:	f240 4216 	movw	r2, #1046	; 0x416
 8013530:	fb03 f202 	mul.w	r2, r3, r2
 8013534:	440a      	add	r2, r1
 8013536:	f202 2213 	addw	r2, r2, #531	; 0x213
 801353a:	7812      	ldrb	r2, [r2, #0]
 801353c:	3201      	adds	r2, #1
 801353e:	b2d0      	uxtb	r0, r2
 8013540:	4a06      	ldr	r2, [pc, #24]	; (801355c <readCanToStructs+0x1a4c>)
 8013542:	f240 4116 	movw	r1, #1046	; 0x416
 8013546:	fb01 f303 	mul.w	r3, r1, r3
 801354a:	4413      	add	r3, r2
 801354c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013550:	4602      	mov	r2, r0
 8013552:	701a      	strb	r2, [r3, #0]
				break;
 8013554:	f000 be5d 	b.w	8014212 <readCanToStructs+0x2702>
 8013558:	20007258 	.word	0x20007258
 801355c:	20006a2c 	.word	0x20006a2c
 8013560:	20003fcc 	.word	0x20003fcc
 8013564:	20003fd4 	.word	0x20003fd4
 8013568:	20000bbb 	.word	0x20000bbb
 801356c:	0802b450 	.word	0x0802b450
 8013570:	0802b464 	.word	0x0802b464
 8013574:	0802b480 	.word	0x0802b480
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8013578:	4bc8      	ldr	r3, [pc, #800]	; (801389c <readCanToStructs+0x1d8c>)
 801357a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801357c:	4bc8      	ldr	r3, [pc, #800]	; (80138a0 <readCanToStructs+0x1d90>)
 801357e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013582:	885b      	ldrh	r3, [r3, #2]
 8013584:	4ac6      	ldr	r2, [pc, #792]	; (80138a0 <readCanToStructs+0x1d90>)
 8013586:	011b      	lsls	r3, r3, #4
 8013588:	4413      	add	r3, r2
 801358a:	3304      	adds	r3, #4
 801358c:	781b      	ldrb	r3, [r3, #0]
 801358e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013592:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013596:	2b00      	cmp	r3, #0
 8013598:	d110      	bne.n	80135bc <readCanToStructs+0x1aac>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 801359a:	2204      	movs	r2, #4
 801359c:	2100      	movs	r1, #0
 801359e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135a0:	f013 f968 	bl	8026874 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80135a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135a8:	4abe      	ldr	r2, [pc, #760]	; (80138a4 <readCanToStructs+0x1d94>)
 80135aa:	f240 4116 	movw	r1, #1046	; 0x416
 80135ae:	fb01 f303 	mul.w	r3, r1, r3
 80135b2:	4413      	add	r3, r2
 80135b4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80135b8:	2200      	movs	r2, #0
 80135ba:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80135bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135c0:	4ab8      	ldr	r2, [pc, #736]	; (80138a4 <readCanToStructs+0x1d94>)
 80135c2:	f240 4116 	movw	r1, #1046	; 0x416
 80135c6:	fb01 f303 	mul.w	r3, r1, r3
 80135ca:	4413      	add	r3, r2
 80135cc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d015      	beq.n	8013606 <readCanToStructs+0x1af6>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 80135da:	48b3      	ldr	r0, [pc, #716]	; (80138a8 <readCanToStructs+0x1d98>)
 80135dc:	f013 face 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80135e0:	2204      	movs	r2, #4
 80135e2:	2100      	movs	r1, #0
 80135e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135e6:	f013 f945 	bl	8026874 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80135ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135ee:	4aad      	ldr	r2, [pc, #692]	; (80138a4 <readCanToStructs+0x1d94>)
 80135f0:	f240 4116 	movw	r1, #1046	; 0x416
 80135f4:	fb01 f303 	mul.w	r3, r1, r3
 80135f8:	4413      	add	r3, r2
 80135fa:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80135fe:	2200      	movs	r2, #0
 8013600:	701a      	strb	r2, [r3, #0]
					break;
 8013602:	f000 be06 	b.w	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013606:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801360a:	4613      	mov	r3, r2
 801360c:	00db      	lsls	r3, r3, #3
 801360e:	1a9b      	subs	r3, r3, r2
 8013610:	461a      	mov	r2, r3
 8013612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013614:	4413      	add	r3, r2
 8013616:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013618:	2301      	movs	r3, #1
 801361a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801361e:	e016      	b.n	801364e <readCanToStructs+0x1b3e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013620:	4b9f      	ldr	r3, [pc, #636]	; (80138a0 <readCanToStructs+0x1d90>)
 8013622:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013626:	885b      	ldrh	r3, [r3, #2]
 8013628:	461a      	mov	r2, r3
 801362a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801362e:	499c      	ldr	r1, [pc, #624]	; (80138a0 <readCanToStructs+0x1d90>)
 8013630:	0112      	lsls	r2, r2, #4
 8013632:	440a      	add	r2, r1
 8013634:	4413      	add	r3, r2
 8013636:	3304      	adds	r3, #4
 8013638:	781a      	ldrb	r2, [r3, #0]
 801363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	3301      	adds	r3, #1
 8013642:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013648:	3301      	adds	r3, #1
 801364a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801364e:	4b94      	ldr	r3, [pc, #592]	; (80138a0 <readCanToStructs+0x1d90>)
 8013650:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013654:	885b      	ldrh	r3, [r3, #2]
 8013656:	4a92      	ldr	r2, [pc, #584]	; (80138a0 <readCanToStructs+0x1d90>)
 8013658:	011b      	lsls	r3, r3, #4
 801365a:	4413      	add	r3, r2
 801365c:	330c      	adds	r3, #12
 801365e:	781b      	ldrb	r3, [r3, #0]
 8013660:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013664:	429a      	cmp	r2, r3
 8013666:	d3db      	bcc.n	8013620 <readCanToStructs+0x1b10>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8013668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801366c:	4a8d      	ldr	r2, [pc, #564]	; (80138a4 <readCanToStructs+0x1d94>)
 801366e:	f240 4116 	movw	r1, #1046	; 0x416
 8013672:	fb01 f303 	mul.w	r3, r1, r3
 8013676:	4413      	add	r3, r2
 8013678:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	461a      	mov	r2, r3
 8013680:	4613      	mov	r3, r2
 8013682:	00db      	lsls	r3, r3, #3
 8013684:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8013686:	4b86      	ldr	r3, [pc, #536]	; (80138a0 <readCanToStructs+0x1d90>)
 8013688:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801368c:	885b      	ldrh	r3, [r3, #2]
 801368e:	4984      	ldr	r1, [pc, #528]	; (80138a0 <readCanToStructs+0x1d90>)
 8013690:	011b      	lsls	r3, r3, #4
 8013692:	440b      	add	r3, r1
 8013694:	330c      	adds	r3, #12
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	3b01      	subs	r3, #1
 801369a:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 801369c:	2b03      	cmp	r3, #3
 801369e:	d921      	bls.n	80136e4 <readCanToStructs+0x1bd4>
 80136a0:	4b7e      	ldr	r3, [pc, #504]	; (801389c <readCanToStructs+0x1d8c>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 80136a6:	4b81      	ldr	r3, [pc, #516]	; (80138ac <readCanToStructs+0x1d9c>)
 80136a8:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 80136aa:	4b81      	ldr	r3, [pc, #516]	; (80138b0 <readCanToStructs+0x1da0>)
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d102      	bne.n	80136b8 <readCanToStructs+0x1ba8>
						printf("O_Info1_RCV\n");
 80136b2:	4880      	ldr	r0, [pc, #512]	; (80138b4 <readCanToStructs+0x1da4>)
 80136b4:	f013 fa62 	bl	8026b7c <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80136b8:	4b7f      	ldr	r3, [pc, #508]	; (80138b8 <readCanToStructs+0x1da8>)
 80136ba:	2201      	movs	r2, #1
 80136bc:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80136be:	f006 f9b7 	bl	8019a30 <HAL_GetTick>
 80136c2:	4603      	mov	r3, r0
 80136c4:	4a7c      	ldr	r2, [pc, #496]	; (80138b8 <readCanToStructs+0x1da8>)
 80136c6:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80136c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136cc:	4a75      	ldr	r2, [pc, #468]	; (80138a4 <readCanToStructs+0x1d94>)
 80136ce:	f240 4116 	movw	r1, #1046	; 0x416
 80136d2:	fb01 f303 	mul.w	r3, r1, r3
 80136d6:	4413      	add	r3, r2
 80136d8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80136dc:	2200      	movs	r2, #0
 80136de:	701a      	strb	r2, [r3, #0]
				break;
 80136e0:	f000 bd97 	b.w	8014212 <readCanToStructs+0x2702>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80136e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136e8:	4a6e      	ldr	r2, [pc, #440]	; (80138a4 <readCanToStructs+0x1d94>)
 80136ea:	f240 4116 	movw	r1, #1046	; 0x416
 80136ee:	fb01 f303 	mul.w	r3, r1, r3
 80136f2:	4413      	add	r3, r2
 80136f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80136f8:	2201      	movs	r2, #1
 80136fa:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80136fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013700:	4968      	ldr	r1, [pc, #416]	; (80138a4 <readCanToStructs+0x1d94>)
 8013702:	f240 4216 	movw	r2, #1046	; 0x416
 8013706:	fb03 f202 	mul.w	r2, r3, r2
 801370a:	440a      	add	r2, r1
 801370c:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8013710:	7812      	ldrb	r2, [r2, #0]
 8013712:	3201      	adds	r2, #1
 8013714:	b2d0      	uxtb	r0, r2
 8013716:	4a63      	ldr	r2, [pc, #396]	; (80138a4 <readCanToStructs+0x1d94>)
 8013718:	f240 4116 	movw	r1, #1046	; 0x416
 801371c:	fb01 f303 	mul.w	r3, r1, r3
 8013720:	4413      	add	r3, r2
 8013722:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013726:	4602      	mov	r2, r0
 8013728:	701a      	strb	r2, [r3, #0]
				break;
 801372a:	f000 bd72 	b.w	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 801372e:	4b5b      	ldr	r3, [pc, #364]	; (801389c <readCanToStructs+0x1d8c>)
 8013730:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013732:	4b5b      	ldr	r3, [pc, #364]	; (80138a0 <readCanToStructs+0x1d90>)
 8013734:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013738:	885b      	ldrh	r3, [r3, #2]
 801373a:	4a59      	ldr	r2, [pc, #356]	; (80138a0 <readCanToStructs+0x1d90>)
 801373c:	011b      	lsls	r3, r3, #4
 801373e:	4413      	add	r3, r2
 8013740:	3304      	adds	r3, #4
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013748:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801374c:	2b00      	cmp	r3, #0
 801374e:	d110      	bne.n	8013772 <readCanToStructs+0x1c62>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8013750:	2204      	movs	r2, #4
 8013752:	2100      	movs	r1, #0
 8013754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013756:	f013 f88d 	bl	8026874 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801375a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801375e:	4a51      	ldr	r2, [pc, #324]	; (80138a4 <readCanToStructs+0x1d94>)
 8013760:	f240 4116 	movw	r1, #1046	; 0x416
 8013764:	fb01 f303 	mul.w	r3, r1, r3
 8013768:	4413      	add	r3, r2
 801376a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801376e:	2200      	movs	r2, #0
 8013770:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8013772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013776:	4a4b      	ldr	r2, [pc, #300]	; (80138a4 <readCanToStructs+0x1d94>)
 8013778:	f240 4116 	movw	r1, #1046	; 0x416
 801377c:	fb01 f303 	mul.w	r3, r1, r3
 8013780:	4413      	add	r3, r2
 8013782:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013786:	781b      	ldrb	r3, [r3, #0]
 8013788:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801378c:	429a      	cmp	r2, r3
 801378e:	d015      	beq.n	80137bc <readCanToStructs+0x1cac>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8013790:	484a      	ldr	r0, [pc, #296]	; (80138bc <readCanToStructs+0x1dac>)
 8013792:	f013 f9f3 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8013796:	2204      	movs	r2, #4
 8013798:	2100      	movs	r1, #0
 801379a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801379c:	f013 f86a 	bl	8026874 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80137a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137a4:	4a3f      	ldr	r2, [pc, #252]	; (80138a4 <readCanToStructs+0x1d94>)
 80137a6:	f240 4116 	movw	r1, #1046	; 0x416
 80137aa:	fb01 f303 	mul.w	r3, r1, r3
 80137ae:	4413      	add	r3, r2
 80137b0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80137b4:	2200      	movs	r2, #0
 80137b6:	701a      	strb	r2, [r3, #0]
					break;
 80137b8:	f000 bd2b 	b.w	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80137bc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80137c0:	4613      	mov	r3, r2
 80137c2:	00db      	lsls	r3, r3, #3
 80137c4:	1a9b      	subs	r3, r3, r2
 80137c6:	461a      	mov	r2, r3
 80137c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ca:	4413      	add	r3, r2
 80137cc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80137ce:	2301      	movs	r3, #1
 80137d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80137d4:	e016      	b.n	8013804 <readCanToStructs+0x1cf4>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80137d6:	4b32      	ldr	r3, [pc, #200]	; (80138a0 <readCanToStructs+0x1d90>)
 80137d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80137dc:	885b      	ldrh	r3, [r3, #2]
 80137de:	461a      	mov	r2, r3
 80137e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137e4:	492e      	ldr	r1, [pc, #184]	; (80138a0 <readCanToStructs+0x1d90>)
 80137e6:	0112      	lsls	r2, r2, #4
 80137e8:	440a      	add	r2, r1
 80137ea:	4413      	add	r3, r2
 80137ec:	3304      	adds	r3, #4
 80137ee:	781a      	ldrb	r2, [r3, #0]
 80137f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f2:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80137f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f6:	3301      	adds	r3, #1
 80137f8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80137fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137fe:	3301      	adds	r3, #1
 8013800:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013804:	4b26      	ldr	r3, [pc, #152]	; (80138a0 <readCanToStructs+0x1d90>)
 8013806:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801380a:	885b      	ldrh	r3, [r3, #2]
 801380c:	4a24      	ldr	r2, [pc, #144]	; (80138a0 <readCanToStructs+0x1d90>)
 801380e:	011b      	lsls	r3, r3, #4
 8013810:	4413      	add	r3, r2
 8013812:	330c      	adds	r3, #12
 8013814:	781b      	ldrb	r3, [r3, #0]
 8013816:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801381a:	429a      	cmp	r2, r3
 801381c:	d3db      	bcc.n	80137d6 <readCanToStructs+0x1cc6>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801381e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013822:	4a20      	ldr	r2, [pc, #128]	; (80138a4 <readCanToStructs+0x1d94>)
 8013824:	f240 4116 	movw	r1, #1046	; 0x416
 8013828:	fb01 f303 	mul.w	r3, r1, r3
 801382c:	4413      	add	r3, r2
 801382e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	461a      	mov	r2, r3
 8013836:	4613      	mov	r3, r2
 8013838:	00db      	lsls	r3, r3, #3
 801383a:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 801383c:	4b18      	ldr	r3, [pc, #96]	; (80138a0 <readCanToStructs+0x1d90>)
 801383e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013842:	885b      	ldrh	r3, [r3, #2]
 8013844:	4916      	ldr	r1, [pc, #88]	; (80138a0 <readCanToStructs+0x1d90>)
 8013846:	011b      	lsls	r3, r3, #4
 8013848:	440b      	add	r3, r1
 801384a:	330c      	adds	r3, #12
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	3b01      	subs	r3, #1
 8013850:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8013852:	2b03      	cmp	r3, #3
 8013854:	d936      	bls.n	80138c4 <readCanToStructs+0x1db4>
 8013856:	4b11      	ldr	r3, [pc, #68]	; (801389c <readCanToStructs+0x1d8c>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 801385c:	4b13      	ldr	r3, [pc, #76]	; (80138ac <readCanToStructs+0x1d9c>)
 801385e:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8013860:	4b13      	ldr	r3, [pc, #76]	; (80138b0 <readCanToStructs+0x1da0>)
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	2b01      	cmp	r3, #1
 8013866:	d102      	bne.n	801386e <readCanToStructs+0x1d5e>
						printf("O_Info2_RCV\n");
 8013868:	4815      	ldr	r0, [pc, #84]	; (80138c0 <readCanToStructs+0x1db0>)
 801386a:	f013 f987 	bl	8026b7c <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801386e:	4b12      	ldr	r3, [pc, #72]	; (80138b8 <readCanToStructs+0x1da8>)
 8013870:	2201      	movs	r2, #1
 8013872:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013874:	f006 f8dc 	bl	8019a30 <HAL_GetTick>
 8013878:	4603      	mov	r3, r0
 801387a:	4a0f      	ldr	r2, [pc, #60]	; (80138b8 <readCanToStructs+0x1da8>)
 801387c:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801387e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013882:	4a08      	ldr	r2, [pc, #32]	; (80138a4 <readCanToStructs+0x1d94>)
 8013884:	f240 4116 	movw	r1, #1046	; 0x416
 8013888:	fb01 f303 	mul.w	r3, r1, r3
 801388c:	4413      	add	r3, r2
 801388e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013892:	2200      	movs	r2, #0
 8013894:	701a      	strb	r2, [r3, #0]
				break;
 8013896:	f000 bcbc 	b.w	8014212 <readCanToStructs+0x2702>
 801389a:	bf00      	nop
 801389c:	20004c7c 	.word	0x20004c7c
 80138a0:	20007258 	.word	0x20007258
 80138a4:	20006a2c 	.word	0x20006a2c
 80138a8:	0802b498 	.word	0x0802b498
 80138ac:	20004c78 	.word	0x20004c78
 80138b0:	20000bbb 	.word	0x20000bbb
 80138b4:	0802b684 	.word	0x0802b684
 80138b8:	20004c80 	.word	0x20004c80
 80138bc:	0802b4cc 	.word	0x0802b4cc
 80138c0:	0802b690 	.word	0x0802b690
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80138c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138c8:	4a9f      	ldr	r2, [pc, #636]	; (8013b48 <readCanToStructs+0x2038>)
 80138ca:	f240 4116 	movw	r1, #1046	; 0x416
 80138ce:	fb01 f303 	mul.w	r3, r1, r3
 80138d2:	4413      	add	r3, r2
 80138d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80138d8:	2201      	movs	r2, #1
 80138da:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80138dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138e0:	4999      	ldr	r1, [pc, #612]	; (8013b48 <readCanToStructs+0x2038>)
 80138e2:	f240 4216 	movw	r2, #1046	; 0x416
 80138e6:	fb03 f202 	mul.w	r2, r3, r2
 80138ea:	440a      	add	r2, r1
 80138ec:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80138f0:	7812      	ldrb	r2, [r2, #0]
 80138f2:	3201      	adds	r2, #1
 80138f4:	b2d0      	uxtb	r0, r2
 80138f6:	4a94      	ldr	r2, [pc, #592]	; (8013b48 <readCanToStructs+0x2038>)
 80138f8:	f240 4116 	movw	r1, #1046	; 0x416
 80138fc:	fb01 f303 	mul.w	r3, r1, r3
 8013900:	4413      	add	r3, r2
 8013902:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013906:	4602      	mov	r2, r0
 8013908:	701a      	strb	r2, [r3, #0]
				break;
 801390a:	f000 bc82 	b.w	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 801390e:	4b8f      	ldr	r3, [pc, #572]	; (8013b4c <readCanToStructs+0x203c>)
 8013910:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013912:	4b8f      	ldr	r3, [pc, #572]	; (8013b50 <readCanToStructs+0x2040>)
 8013914:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013918:	885b      	ldrh	r3, [r3, #2]
 801391a:	4a8d      	ldr	r2, [pc, #564]	; (8013b50 <readCanToStructs+0x2040>)
 801391c:	011b      	lsls	r3, r3, #4
 801391e:	4413      	add	r3, r2
 8013920:	3304      	adds	r3, #4
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8013928:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801392c:	2b00      	cmp	r3, #0
 801392e:	d005      	beq.n	801393c <readCanToStructs+0x1e2c>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8013930:	4b88      	ldr	r3, [pc, #544]	; (8013b54 <readCanToStructs+0x2044>)
 8013932:	881b      	ldrh	r3, [r3, #0]
 8013934:	461a      	mov	r2, r3
 8013936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013938:	4413      	add	r3, r2
 801393a:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 801393c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013940:	2b00      	cmp	r3, #0
 8013942:	d117      	bne.n	8013974 <readCanToStructs+0x1e64>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013944:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013948:	2100      	movs	r1, #0
 801394a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801394c:	f012 ff92 	bl	8026874 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013954:	4a7c      	ldr	r2, [pc, #496]	; (8013b48 <readCanToStructs+0x2038>)
 8013956:	f240 4116 	movw	r1, #1046	; 0x416
 801395a:	fb01 f303 	mul.w	r3, r1, r3
 801395e:	4413      	add	r3, r2
 8013960:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013964:	2200      	movs	r2, #0
 8013966:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013968:	4b7a      	ldr	r3, [pc, #488]	; (8013b54 <readCanToStructs+0x2044>)
 801396a:	2200      	movs	r2, #0
 801396c:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 801396e:	4b7a      	ldr	r3, [pc, #488]	; (8013b58 <readCanToStructs+0x2048>)
 8013970:	2200      	movs	r2, #0
 8013972:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013974:	2301      	movs	r3, #1
 8013976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801397a:	e01c      	b.n	80139b6 <readCanToStructs+0x1ea6>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801397c:	4b74      	ldr	r3, [pc, #464]	; (8013b50 <readCanToStructs+0x2040>)
 801397e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013982:	885b      	ldrh	r3, [r3, #2]
 8013984:	461a      	mov	r2, r3
 8013986:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801398a:	4971      	ldr	r1, [pc, #452]	; (8013b50 <readCanToStructs+0x2040>)
 801398c:	0112      	lsls	r2, r2, #4
 801398e:	440a      	add	r2, r1
 8013990:	4413      	add	r3, r2
 8013992:	3304      	adds	r3, #4
 8013994:	781a      	ldrb	r2, [r3, #0]
 8013996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013998:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399c:	3301      	adds	r3, #1
 801399e:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 80139a0:	4b6c      	ldr	r3, [pc, #432]	; (8013b54 <readCanToStructs+0x2044>)
 80139a2:	881b      	ldrh	r3, [r3, #0]
 80139a4:	3301      	adds	r3, #1
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	4b6a      	ldr	r3, [pc, #424]	; (8013b54 <readCanToStructs+0x2044>)
 80139aa:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80139ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80139b0:	3301      	adds	r3, #1
 80139b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80139b6:	4b66      	ldr	r3, [pc, #408]	; (8013b50 <readCanToStructs+0x2040>)
 80139b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139bc:	885b      	ldrh	r3, [r3, #2]
 80139be:	4a64      	ldr	r2, [pc, #400]	; (8013b50 <readCanToStructs+0x2040>)
 80139c0:	011b      	lsls	r3, r3, #4
 80139c2:	4413      	add	r3, r2
 80139c4:	330c      	adds	r3, #12
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d3d5      	bcc.n	801397c <readCanToStructs+0x1e6c>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80139d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139d4:	4a5c      	ldr	r2, [pc, #368]	; (8013b48 <readCanToStructs+0x2038>)
 80139d6:	f240 4116 	movw	r1, #1046	; 0x416
 80139da:	fb01 f303 	mul.w	r3, r1, r3
 80139de:	4413      	add	r3, r2
 80139e0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d026      	beq.n	8013a3c <readCanToStructs+0x1f2c>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 80139ee:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80139f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139f6:	4a54      	ldr	r2, [pc, #336]	; (8013b48 <readCanToStructs+0x2038>)
 80139f8:	f240 4016 	movw	r0, #1046	; 0x416
 80139fc:	fb00 f303 	mul.w	r3, r0, r3
 8013a00:	4413      	add	r3, r2
 8013a02:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	461a      	mov	r2, r3
 8013a0a:	4854      	ldr	r0, [pc, #336]	; (8013b5c <readCanToStructs+0x204c>)
 8013a0c:	f013 f81a 	bl	8026a44 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013a10:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013a14:	2100      	movs	r1, #0
 8013a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a18:	f012 ff2c 	bl	8026874 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a20:	4a49      	ldr	r2, [pc, #292]	; (8013b48 <readCanToStructs+0x2038>)
 8013a22:	f240 4116 	movw	r1, #1046	; 0x416
 8013a26:	fb01 f303 	mul.w	r3, r1, r3
 8013a2a:	4413      	add	r3, r2
 8013a2c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013a30:	2200      	movs	r2, #0
 8013a32:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013a34:	4b47      	ldr	r3, [pc, #284]	; (8013b54 <readCanToStructs+0x2044>)
 8013a36:	2200      	movs	r2, #0
 8013a38:	801a      	strh	r2, [r3, #0]
					break;
 8013a3a:	e3ea      	b.n	8014212 <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8013a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a40:	4941      	ldr	r1, [pc, #260]	; (8013b48 <readCanToStructs+0x2038>)
 8013a42:	f240 4216 	movw	r2, #1046	; 0x416
 8013a46:	fb03 f202 	mul.w	r2, r3, r2
 8013a4a:	440a      	add	r2, r1
 8013a4c:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8013a50:	7812      	ldrb	r2, [r2, #0]
 8013a52:	3201      	adds	r2, #1
 8013a54:	b2d0      	uxtb	r0, r2
 8013a56:	4a3c      	ldr	r2, [pc, #240]	; (8013b48 <readCanToStructs+0x2038>)
 8013a58:	f240 4116 	movw	r1, #1046	; 0x416
 8013a5c:	fb01 f303 	mul.w	r3, r1, r3
 8013a60:	4413      	add	r3, r2
 8013a62:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013a66:	4602      	mov	r2, r0
 8013a68:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8013a6a:	4b38      	ldr	r3, [pc, #224]	; (8013b4c <readCanToStructs+0x203c>)
 8013a6c:	881b      	ldrh	r3, [r3, #0]
 8013a6e:	3304      	adds	r3, #4
 8013a70:	b29a      	uxth	r2, r3
 8013a72:	4b39      	ldr	r3, [pc, #228]	; (8013b58 <readCanToStructs+0x2048>)
 8013a74:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8013a76:	4b37      	ldr	r3, [pc, #220]	; (8013b54 <readCanToStructs+0x2044>)
 8013a78:	881a      	ldrh	r2, [r3, #0]
 8013a7a:	4b37      	ldr	r3, [pc, #220]	; (8013b58 <readCanToStructs+0x2048>)
 8013a7c:	881b      	ldrh	r3, [r3, #0]
 8013a7e:	429a      	cmp	r2, r3
 8013a80:	f0c0 83c4 	bcc.w	801420c <readCanToStructs+0x26fc>
					if(Debug_flag == 1)
 8013a84:	4b36      	ldr	r3, [pc, #216]	; (8013b60 <readCanToStructs+0x2050>)
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d102      	bne.n	8013a92 <readCanToStructs+0x1f82>
						printf("EI1 Relay Info Received\n");
 8013a8c:	4835      	ldr	r0, [pc, #212]	; (8013b64 <readCanToStructs+0x2054>)
 8013a8e:	f013 f875 	bl	8026b7c <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8013a92:	4a35      	ldr	r2, [pc, #212]	; (8013b68 <readCanToStructs+0x2058>)
 8013a94:	4b2d      	ldr	r3, [pc, #180]	; (8013b4c <readCanToStructs+0x203c>)
 8013a96:	4610      	mov	r0, r2
 8013a98:	4619      	mov	r1, r3
 8013a9a:	f44f 7301 	mov.w	r3, #516	; 0x204
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	f012 fec0 	bl	8026824 <memcpy>
					DataTraverser = 0;
 8013aa4:	4b2b      	ldr	r3, [pc, #172]	; (8013b54 <readCanToStructs+0x2044>)
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8013aaa:	4b2b      	ldr	r3, [pc, #172]	; (8013b58 <readCanToStructs+0x2048>)
 8013aac:	2200      	movs	r2, #0
 8013aae:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013ab0:	4b2e      	ldr	r3, [pc, #184]	; (8013b6c <readCanToStructs+0x205c>)
 8013ab2:	2201      	movs	r2, #1
 8013ab4:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013ab6:	f005 ffbb 	bl	8019a30 <HAL_GetTick>
 8013aba:	4603      	mov	r3, r0
 8013abc:	4a2b      	ldr	r2, [pc, #172]	; (8013b6c <readCanToStructs+0x205c>)
 8013abe:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ac4:	4a20      	ldr	r2, [pc, #128]	; (8013b48 <readCanToStructs+0x2038>)
 8013ac6:	f240 4116 	movw	r1, #1046	; 0x416
 8013aca:	fb01 f303 	mul.w	r3, r1, r3
 8013ace:	4413      	add	r3, r2
 8013ad0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	701a      	strb	r2, [r3, #0]
				break;
 8013ad8:	e398      	b.n	801420c <readCanToStructs+0x26fc>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8013ada:	4b1c      	ldr	r3, [pc, #112]	; (8013b4c <readCanToStructs+0x203c>)
 8013adc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013ade:	4b1c      	ldr	r3, [pc, #112]	; (8013b50 <readCanToStructs+0x2040>)
 8013ae0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013ae4:	885b      	ldrh	r3, [r3, #2]
 8013ae6:	4a1a      	ldr	r2, [pc, #104]	; (8013b50 <readCanToStructs+0x2040>)
 8013ae8:	011b      	lsls	r3, r3, #4
 8013aea:	4413      	add	r3, r2
 8013aec:	3304      	adds	r3, #4
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8013af4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d005      	beq.n	8013b08 <readCanToStructs+0x1ff8>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8013afc:	4b15      	ldr	r3, [pc, #84]	; (8013b54 <readCanToStructs+0x2044>)
 8013afe:	881b      	ldrh	r3, [r3, #0]
 8013b00:	461a      	mov	r2, r3
 8013b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b04:	4413      	add	r3, r2
 8013b06:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8013b08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d117      	bne.n	8013b40 <readCanToStructs+0x2030>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013b10:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013b14:	2100      	movs	r1, #0
 8013b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b18:	f012 feac 	bl	8026874 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b20:	4a09      	ldr	r2, [pc, #36]	; (8013b48 <readCanToStructs+0x2038>)
 8013b22:	f240 4116 	movw	r1, #1046	; 0x416
 8013b26:	fb01 f303 	mul.w	r3, r1, r3
 8013b2a:	4413      	add	r3, r2
 8013b2c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013b30:	2200      	movs	r2, #0
 8013b32:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013b34:	4b07      	ldr	r3, [pc, #28]	; (8013b54 <readCanToStructs+0x2044>)
 8013b36:	2200      	movs	r2, #0
 8013b38:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8013b3a:	4b07      	ldr	r3, [pc, #28]	; (8013b58 <readCanToStructs+0x2048>)
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013b40:	2301      	movs	r3, #1
 8013b42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013b46:	e030      	b.n	8013baa <readCanToStructs+0x209a>
 8013b48:	20006a2c 	.word	0x20006a2c
 8013b4c:	200052a8 	.word	0x200052a8
 8013b50:	20007258 	.word	0x20007258
 8013b54:	2000b3b0 	.word	0x2000b3b0
 8013b58:	2000b3b2 	.word	0x2000b3b2
 8013b5c:	0802b69c 	.word	0x0802b69c
 8013b60:	20000bbb 	.word	0x20000bbb
 8013b64:	0802b6c8 	.word	0x0802b6c8
 8013b68:	200050a4 	.word	0x200050a4
 8013b6c:	20004c80 	.word	0x20004c80
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013b70:	4bbe      	ldr	r3, [pc, #760]	; (8013e6c <readCanToStructs+0x235c>)
 8013b72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b76:	885b      	ldrh	r3, [r3, #2]
 8013b78:	461a      	mov	r2, r3
 8013b7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b7e:	49bb      	ldr	r1, [pc, #748]	; (8013e6c <readCanToStructs+0x235c>)
 8013b80:	0112      	lsls	r2, r2, #4
 8013b82:	440a      	add	r2, r1
 8013b84:	4413      	add	r3, r2
 8013b86:	3304      	adds	r3, #4
 8013b88:	781a      	ldrb	r2, [r3, #0]
 8013b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b8c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b90:	3301      	adds	r3, #1
 8013b92:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8013b94:	4bb6      	ldr	r3, [pc, #728]	; (8013e70 <readCanToStructs+0x2360>)
 8013b96:	881b      	ldrh	r3, [r3, #0]
 8013b98:	3301      	adds	r3, #1
 8013b9a:	b29a      	uxth	r2, r3
 8013b9c:	4bb4      	ldr	r3, [pc, #720]	; (8013e70 <readCanToStructs+0x2360>)
 8013b9e:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013ba0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013baa:	4bb0      	ldr	r3, [pc, #704]	; (8013e6c <readCanToStructs+0x235c>)
 8013bac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013bb0:	885b      	ldrh	r3, [r3, #2]
 8013bb2:	4aae      	ldr	r2, [pc, #696]	; (8013e6c <readCanToStructs+0x235c>)
 8013bb4:	011b      	lsls	r3, r3, #4
 8013bb6:	4413      	add	r3, r2
 8013bb8:	330c      	adds	r3, #12
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	d3d5      	bcc.n	8013b70 <readCanToStructs+0x2060>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8013bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bc8:	4aaa      	ldr	r2, [pc, #680]	; (8013e74 <readCanToStructs+0x2364>)
 8013bca:	f240 4116 	movw	r1, #1046	; 0x416
 8013bce:	fb01 f303 	mul.w	r3, r1, r3
 8013bd2:	4413      	add	r3, r2
 8013bd4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013bd8:	781b      	ldrb	r3, [r3, #0]
 8013bda:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d026      	beq.n	8013c30 <readCanToStructs+0x2120>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8013be2:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bea:	4aa2      	ldr	r2, [pc, #648]	; (8013e74 <readCanToStructs+0x2364>)
 8013bec:	f240 4016 	movw	r0, #1046	; 0x416
 8013bf0:	fb00 f303 	mul.w	r3, r0, r3
 8013bf4:	4413      	add	r3, r2
 8013bf6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	461a      	mov	r2, r3
 8013bfe:	489e      	ldr	r0, [pc, #632]	; (8013e78 <readCanToStructs+0x2368>)
 8013c00:	f012 ff20 	bl	8026a44 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013c04:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013c08:	2100      	movs	r1, #0
 8013c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c0c:	f012 fe32 	bl	8026874 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013c10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c14:	4a97      	ldr	r2, [pc, #604]	; (8013e74 <readCanToStructs+0x2364>)
 8013c16:	f240 4116 	movw	r1, #1046	; 0x416
 8013c1a:	fb01 f303 	mul.w	r3, r1, r3
 8013c1e:	4413      	add	r3, r2
 8013c20:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013c24:	2200      	movs	r2, #0
 8013c26:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013c28:	4b91      	ldr	r3, [pc, #580]	; (8013e70 <readCanToStructs+0x2360>)
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	801a      	strh	r2, [r3, #0]
					break;
 8013c2e:	e2f0      	b.n	8014212 <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8013c30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c34:	498f      	ldr	r1, [pc, #572]	; (8013e74 <readCanToStructs+0x2364>)
 8013c36:	f240 4216 	movw	r2, #1046	; 0x416
 8013c3a:	fb03 f202 	mul.w	r2, r3, r2
 8013c3e:	440a      	add	r2, r1
 8013c40:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8013c44:	7812      	ldrb	r2, [r2, #0]
 8013c46:	3201      	adds	r2, #1
 8013c48:	b2d0      	uxtb	r0, r2
 8013c4a:	4a8a      	ldr	r2, [pc, #552]	; (8013e74 <readCanToStructs+0x2364>)
 8013c4c:	f240 4116 	movw	r1, #1046	; 0x416
 8013c50:	fb01 f303 	mul.w	r3, r1, r3
 8013c54:	4413      	add	r3, r2
 8013c56:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8013c5e:	4b87      	ldr	r3, [pc, #540]	; (8013e7c <readCanToStructs+0x236c>)
 8013c60:	881b      	ldrh	r3, [r3, #0]
 8013c62:	3304      	adds	r3, #4
 8013c64:	b29a      	uxth	r2, r3
 8013c66:	4b86      	ldr	r3, [pc, #536]	; (8013e80 <readCanToStructs+0x2370>)
 8013c68:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8013c6a:	4b81      	ldr	r3, [pc, #516]	; (8013e70 <readCanToStructs+0x2360>)
 8013c6c:	881a      	ldrh	r2, [r3, #0]
 8013c6e:	4b84      	ldr	r3, [pc, #528]	; (8013e80 <readCanToStructs+0x2370>)
 8013c70:	881b      	ldrh	r3, [r3, #0]
 8013c72:	429a      	cmp	r2, r3
 8013c74:	f0c0 82cc 	bcc.w	8014210 <readCanToStructs+0x2700>
					if(Debug_flag == 1)
 8013c78:	4b82      	ldr	r3, [pc, #520]	; (8013e84 <readCanToStructs+0x2374>)
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d102      	bne.n	8013c86 <readCanToStructs+0x2176>
						printf("EI2 Relay Info Received\n");
 8013c80:	4881      	ldr	r0, [pc, #516]	; (8013e88 <readCanToStructs+0x2378>)
 8013c82:	f012 ff7b 	bl	8026b7c <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8013c86:	4a81      	ldr	r2, [pc, #516]	; (8013e8c <readCanToStructs+0x237c>)
 8013c88:	4b7c      	ldr	r3, [pc, #496]	; (8013e7c <readCanToStructs+0x236c>)
 8013c8a:	4610      	mov	r0, r2
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8013c92:	461a      	mov	r2, r3
 8013c94:	f012 fdc6 	bl	8026824 <memcpy>
					DataTraverser = 0;
 8013c98:	4b75      	ldr	r3, [pc, #468]	; (8013e70 <readCanToStructs+0x2360>)
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8013c9e:	4b78      	ldr	r3, [pc, #480]	; (8013e80 <readCanToStructs+0x2370>)
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013ca4:	4b7a      	ldr	r3, [pc, #488]	; (8013e90 <readCanToStructs+0x2380>)
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013caa:	f005 fec1 	bl	8019a30 <HAL_GetTick>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	4a77      	ldr	r2, [pc, #476]	; (8013e90 <readCanToStructs+0x2380>)
 8013cb2:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cb8:	4a6e      	ldr	r2, [pc, #440]	; (8013e74 <readCanToStructs+0x2364>)
 8013cba:	f240 4116 	movw	r1, #1046	; 0x416
 8013cbe:	fb01 f303 	mul.w	r3, r1, r3
 8013cc2:	4413      	add	r3, r2
 8013cc4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013cc8:	2200      	movs	r2, #0
 8013cca:	701a      	strb	r2, [r3, #0]
				break;
 8013ccc:	e2a0      	b.n	8014210 <readCanToStructs+0x2700>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8013cce:	4b71      	ldr	r3, [pc, #452]	; (8013e94 <readCanToStructs+0x2384>)
 8013cd0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013cd2:	4b66      	ldr	r3, [pc, #408]	; (8013e6c <readCanToStructs+0x235c>)
 8013cd4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013cd8:	885b      	ldrh	r3, [r3, #2]
 8013cda:	4a64      	ldr	r2, [pc, #400]	; (8013e6c <readCanToStructs+0x235c>)
 8013cdc:	011b      	lsls	r3, r3, #4
 8013cde:	4413      	add	r3, r2
 8013ce0:	3304      	adds	r3, #4
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013ce8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d110      	bne.n	8013d12 <readCanToStructs+0x2202>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8013cf0:	2208      	movs	r2, #8
 8013cf2:	2100      	movs	r1, #0
 8013cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cf6:	f012 fdbd 	bl	8026874 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cfe:	4a5d      	ldr	r2, [pc, #372]	; (8013e74 <readCanToStructs+0x2364>)
 8013d00:	f240 4116 	movw	r1, #1046	; 0x416
 8013d04:	fb01 f303 	mul.w	r3, r1, r3
 8013d08:	4413      	add	r3, r2
 8013d0a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013d0e:	2200      	movs	r2, #0
 8013d10:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8013d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d16:	4a57      	ldr	r2, [pc, #348]	; (8013e74 <readCanToStructs+0x2364>)
 8013d18:	f240 4116 	movw	r1, #1046	; 0x416
 8013d1c:	fb01 f303 	mul.w	r3, r1, r3
 8013d20:	4413      	add	r3, r2
 8013d22:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d014      	beq.n	8013d5a <readCanToStructs+0x224a>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8013d30:	4859      	ldr	r0, [pc, #356]	; (8013e98 <readCanToStructs+0x2388>)
 8013d32:	f012 ff23 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8013d36:	2208      	movs	r2, #8
 8013d38:	2100      	movs	r1, #0
 8013d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d3c:	f012 fd9a 	bl	8026874 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013d40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d44:	4a4b      	ldr	r2, [pc, #300]	; (8013e74 <readCanToStructs+0x2364>)
 8013d46:	f240 4116 	movw	r1, #1046	; 0x416
 8013d4a:	fb01 f303 	mul.w	r3, r1, r3
 8013d4e:	4413      	add	r3, r2
 8013d50:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013d54:	2200      	movs	r2, #0
 8013d56:	701a      	strb	r2, [r3, #0]
					break;
 8013d58:	e25b      	b.n	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013d5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013d5e:	4613      	mov	r3, r2
 8013d60:	00db      	lsls	r3, r3, #3
 8013d62:	1a9b      	subs	r3, r3, r2
 8013d64:	461a      	mov	r2, r3
 8013d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d68:	4413      	add	r3, r2
 8013d6a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013d72:	e016      	b.n	8013da2 <readCanToStructs+0x2292>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013d74:	4b3d      	ldr	r3, [pc, #244]	; (8013e6c <readCanToStructs+0x235c>)
 8013d76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d7a:	885b      	ldrh	r3, [r3, #2]
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d82:	493a      	ldr	r1, [pc, #232]	; (8013e6c <readCanToStructs+0x235c>)
 8013d84:	0112      	lsls	r2, r2, #4
 8013d86:	440a      	add	r2, r1
 8013d88:	4413      	add	r3, r2
 8013d8a:	3304      	adds	r3, #4
 8013d8c:	781a      	ldrb	r2, [r3, #0]
 8013d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d90:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d94:	3301      	adds	r3, #1
 8013d96:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013d98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013da2:	4b32      	ldr	r3, [pc, #200]	; (8013e6c <readCanToStructs+0x235c>)
 8013da4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013da8:	885b      	ldrh	r3, [r3, #2]
 8013daa:	4a30      	ldr	r2, [pc, #192]	; (8013e6c <readCanToStructs+0x235c>)
 8013dac:	011b      	lsls	r3, r3, #4
 8013dae:	4413      	add	r3, r2
 8013db0:	330c      	adds	r3, #12
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013db8:	429a      	cmp	r2, r3
 8013dba:	d3db      	bcc.n	8013d74 <readCanToStructs+0x2264>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8013dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013dc0:	4a2c      	ldr	r2, [pc, #176]	; (8013e74 <readCanToStructs+0x2364>)
 8013dc2:	f240 4116 	movw	r1, #1046	; 0x416
 8013dc6:	fb01 f303 	mul.w	r3, r1, r3
 8013dca:	4413      	add	r3, r2
 8013dcc:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	461a      	mov	r2, r3
 8013dd4:	4613      	mov	r3, r2
 8013dd6:	00db      	lsls	r3, r3, #3
 8013dd8:	1a9a      	subs	r2, r3, r2
 8013dda:	4b24      	ldr	r3, [pc, #144]	; (8013e6c <readCanToStructs+0x235c>)
 8013ddc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013de0:	885b      	ldrh	r3, [r3, #2]
 8013de2:	4922      	ldr	r1, [pc, #136]	; (8013e6c <readCanToStructs+0x235c>)
 8013de4:	011b      	lsls	r3, r3, #4
 8013de6:	440b      	add	r3, r1
 8013de8:	330c      	adds	r3, #12
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	3b01      	subs	r3, #1
 8013dee:	4413      	add	r3, r2
 8013df0:	2b07      	cmp	r3, #7
 8013df2:	d917      	bls.n	8013e24 <readCanToStructs+0x2314>
					printf("Received Fault Injection Data\n");
 8013df4:	4829      	ldr	r0, [pc, #164]	; (8013e9c <readCanToStructs+0x238c>)
 8013df6:	f012 fec1 	bl	8026b7c <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013dfa:	4b25      	ldr	r3, [pc, #148]	; (8013e90 <readCanToStructs+0x2380>)
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013e00:	f005 fe16 	bl	8019a30 <HAL_GetTick>
 8013e04:	4603      	mov	r3, r0
 8013e06:	4a22      	ldr	r2, [pc, #136]	; (8013e90 <readCanToStructs+0x2380>)
 8013e08:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e0e:	4a19      	ldr	r2, [pc, #100]	; (8013e74 <readCanToStructs+0x2364>)
 8013e10:	f240 4116 	movw	r1, #1046	; 0x416
 8013e14:	fb01 f303 	mul.w	r3, r1, r3
 8013e18:	4413      	add	r3, r2
 8013e1a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013e1e:	2200      	movs	r2, #0
 8013e20:	701a      	strb	r2, [r3, #0]
				break;
 8013e22:	e1f6      	b.n	8014212 <readCanToStructs+0x2702>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8013e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e28:	4a12      	ldr	r2, [pc, #72]	; (8013e74 <readCanToStructs+0x2364>)
 8013e2a:	f240 4116 	movw	r1, #1046	; 0x416
 8013e2e:	fb01 f303 	mul.w	r3, r1, r3
 8013e32:	4413      	add	r3, r2
 8013e34:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8013e38:	2201      	movs	r2, #1
 8013e3a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8013e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e40:	490c      	ldr	r1, [pc, #48]	; (8013e74 <readCanToStructs+0x2364>)
 8013e42:	f240 4216 	movw	r2, #1046	; 0x416
 8013e46:	fb03 f202 	mul.w	r2, r3, r2
 8013e4a:	440a      	add	r2, r1
 8013e4c:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8013e50:	7812      	ldrb	r2, [r2, #0]
 8013e52:	3201      	adds	r2, #1
 8013e54:	b2d0      	uxtb	r0, r2
 8013e56:	4a07      	ldr	r2, [pc, #28]	; (8013e74 <readCanToStructs+0x2364>)
 8013e58:	f240 4116 	movw	r1, #1046	; 0x416
 8013e5c:	fb01 f303 	mul.w	r3, r1, r3
 8013e60:	4413      	add	r3, r2
 8013e62:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013e66:	4602      	mov	r2, r0
 8013e68:	701a      	strb	r2, [r3, #0]
				break;
 8013e6a:	e1d2      	b.n	8014212 <readCanToStructs+0x2702>
 8013e6c:	20007258 	.word	0x20007258
 8013e70:	2000b3b0 	.word	0x2000b3b0
 8013e74:	20006a2c 	.word	0x20006a2c
 8013e78:	0802b6e0 	.word	0x0802b6e0
 8013e7c:	200052a8 	.word	0x200052a8
 8013e80:	2000b3b2 	.word	0x2000b3b2
 8013e84:	20000bbb 	.word	0x20000bbb
 8013e88:	0802b70c 	.word	0x0802b70c
 8013e8c:	200050a4 	.word	0x200050a4
 8013e90:	20004c80 	.word	0x20004c80
 8013e94:	20004c6c 	.word	0x20004c6c
 8013e98:	0802b568 	.word	0x0802b568
 8013e9c:	0802b588 	.word	0x0802b588
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8013ea0:	4bbe      	ldr	r3, [pc, #760]	; (801419c <readCanToStructs+0x268c>)
 8013ea2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013ea4:	4bbe      	ldr	r3, [pc, #760]	; (80141a0 <readCanToStructs+0x2690>)
 8013ea6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013eaa:	885b      	ldrh	r3, [r3, #2]
 8013eac:	4abc      	ldr	r2, [pc, #752]	; (80141a0 <readCanToStructs+0x2690>)
 8013eae:	011b      	lsls	r3, r3, #4
 8013eb0:	4413      	add	r3, r2
 8013eb2:	3304      	adds	r3, #4
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013eba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d110      	bne.n	8013ee4 <readCanToStructs+0x23d4>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8013ec2:	2202      	movs	r2, #2
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ec8:	f012 fcd4 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ed0:	4ab4      	ldr	r2, [pc, #720]	; (80141a4 <readCanToStructs+0x2694>)
 8013ed2:	f240 4116 	movw	r1, #1046	; 0x416
 8013ed6:	fb01 f303 	mul.w	r3, r1, r3
 8013eda:	4413      	add	r3, r2
 8013edc:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8013ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ee8:	4aae      	ldr	r2, [pc, #696]	; (80141a4 <readCanToStructs+0x2694>)
 8013eea:	f240 4116 	movw	r1, #1046	; 0x416
 8013eee:	fb01 f303 	mul.w	r3, r1, r3
 8013ef2:	4413      	add	r3, r2
 8013ef4:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013ef8:	781b      	ldrb	r3, [r3, #0]
 8013efa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d014      	beq.n	8013f2c <readCanToStructs+0x241c>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8013f02:	48a9      	ldr	r0, [pc, #676]	; (80141a8 <readCanToStructs+0x2698>)
 8013f04:	f012 fe3a 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8013f08:	2202      	movs	r2, #2
 8013f0a:	2100      	movs	r1, #0
 8013f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f0e:	f012 fcb1 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f16:	4aa3      	ldr	r2, [pc, #652]	; (80141a4 <readCanToStructs+0x2694>)
 8013f18:	f240 4116 	movw	r1, #1046	; 0x416
 8013f1c:	fb01 f303 	mul.w	r3, r1, r3
 8013f20:	4413      	add	r3, r2
 8013f22:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013f26:	2200      	movs	r2, #0
 8013f28:	701a      	strb	r2, [r3, #0]
					break;
 8013f2a:	e172      	b.n	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013f2c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013f30:	4613      	mov	r3, r2
 8013f32:	00db      	lsls	r3, r3, #3
 8013f34:	1a9b      	subs	r3, r3, r2
 8013f36:	461a      	mov	r2, r3
 8013f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f3a:	4413      	add	r3, r2
 8013f3c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013f3e:	2301      	movs	r3, #1
 8013f40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013f44:	e016      	b.n	8013f74 <readCanToStructs+0x2464>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013f46:	4b96      	ldr	r3, [pc, #600]	; (80141a0 <readCanToStructs+0x2690>)
 8013f48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f4c:	885b      	ldrh	r3, [r3, #2]
 8013f4e:	461a      	mov	r2, r3
 8013f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f54:	4992      	ldr	r1, [pc, #584]	; (80141a0 <readCanToStructs+0x2690>)
 8013f56:	0112      	lsls	r2, r2, #4
 8013f58:	440a      	add	r2, r1
 8013f5a:	4413      	add	r3, r2
 8013f5c:	3304      	adds	r3, #4
 8013f5e:	781a      	ldrb	r2, [r3, #0]
 8013f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f62:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f66:	3301      	adds	r3, #1
 8013f68:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013f6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f6e:	3301      	adds	r3, #1
 8013f70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013f74:	4b8a      	ldr	r3, [pc, #552]	; (80141a0 <readCanToStructs+0x2690>)
 8013f76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f7a:	885b      	ldrh	r3, [r3, #2]
 8013f7c:	4a88      	ldr	r2, [pc, #544]	; (80141a0 <readCanToStructs+0x2690>)
 8013f7e:	011b      	lsls	r3, r3, #4
 8013f80:	4413      	add	r3, r2
 8013f82:	330c      	adds	r3, #12
 8013f84:	781b      	ldrb	r3, [r3, #0]
 8013f86:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d3db      	bcc.n	8013f46 <readCanToStructs+0x2436>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8013f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f92:	4a84      	ldr	r2, [pc, #528]	; (80141a4 <readCanToStructs+0x2694>)
 8013f94:	f240 4116 	movw	r1, #1046	; 0x416
 8013f98:	fb01 f303 	mul.w	r3, r1, r3
 8013f9c:	4413      	add	r3, r2
 8013f9e:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013fa2:	781b      	ldrb	r3, [r3, #0]
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	00db      	lsls	r3, r3, #3
 8013faa:	1a9a      	subs	r2, r3, r2
 8013fac:	4b7c      	ldr	r3, [pc, #496]	; (80141a0 <readCanToStructs+0x2690>)
 8013fae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013fb2:	885b      	ldrh	r3, [r3, #2]
 8013fb4:	497a      	ldr	r1, [pc, #488]	; (80141a0 <readCanToStructs+0x2690>)
 8013fb6:	011b      	lsls	r3, r3, #4
 8013fb8:	440b      	add	r3, r1
 8013fba:	330c      	adds	r3, #12
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	3b01      	subs	r3, #1
 8013fc0:	4413      	add	r3, r2
 8013fc2:	2b01      	cmp	r3, #1
 8013fc4:	d919      	bls.n	8013ffa <readCanToStructs+0x24ea>
					if(Debug_flag == 1)
 8013fc6:	4b79      	ldr	r3, [pc, #484]	; (80141ac <readCanToStructs+0x269c>)
 8013fc8:	781b      	ldrb	r3, [r3, #0]
 8013fca:	2b01      	cmp	r3, #1
 8013fcc:	d105      	bne.n	8013fda <readCanToStructs+0x24ca>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8013fce:	4b73      	ldr	r3, [pc, #460]	; (801419c <readCanToStructs+0x268c>)
 8013fd0:	881b      	ldrh	r3, [r3, #0]
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	4876      	ldr	r0, [pc, #472]	; (80141b0 <readCanToStructs+0x26a0>)
 8013fd6:	f012 fd35 	bl	8026a44 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8013fda:	4b76      	ldr	r3, [pc, #472]	; (80141b4 <readCanToStructs+0x26a4>)
 8013fdc:	2201      	movs	r2, #1
 8013fde:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fe4:	4a6f      	ldr	r2, [pc, #444]	; (80141a4 <readCanToStructs+0x2694>)
 8013fe6:	f240 4116 	movw	r1, #1046	; 0x416
 8013fea:	fb01 f303 	mul.w	r3, r1, r3
 8013fee:	4413      	add	r3, r2
 8013ff0:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	701a      	strb	r2, [r3, #0]
				break;
 8013ff8:	e10b      	b.n	8014212 <readCanToStructs+0x2702>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8013ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ffe:	4a69      	ldr	r2, [pc, #420]	; (80141a4 <readCanToStructs+0x2694>)
 8014000:	f240 4116 	movw	r1, #1046	; 0x416
 8014004:	fb01 f303 	mul.w	r3, r1, r3
 8014008:	4413      	add	r3, r2
 801400a:	f203 4312 	addw	r3, r3, #1042	; 0x412
 801400e:	2201      	movs	r2, #1
 8014010:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8014012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014016:	4963      	ldr	r1, [pc, #396]	; (80141a4 <readCanToStructs+0x2694>)
 8014018:	f240 4216 	movw	r2, #1046	; 0x416
 801401c:	fb03 f202 	mul.w	r2, r3, r2
 8014020:	440a      	add	r2, r1
 8014022:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8014026:	7812      	ldrb	r2, [r2, #0]
 8014028:	3201      	adds	r2, #1
 801402a:	b2d0      	uxtb	r0, r2
 801402c:	4a5d      	ldr	r2, [pc, #372]	; (80141a4 <readCanToStructs+0x2694>)
 801402e:	f240 4116 	movw	r1, #1046	; 0x416
 8014032:	fb01 f303 	mul.w	r3, r1, r3
 8014036:	4413      	add	r3, r2
 8014038:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801403c:	4602      	mov	r2, r0
 801403e:	701a      	strb	r2, [r3, #0]
				break;
 8014040:	e0e7      	b.n	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8014042:	4b56      	ldr	r3, [pc, #344]	; (801419c <readCanToStructs+0x268c>)
 8014044:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014046:	4b56      	ldr	r3, [pc, #344]	; (80141a0 <readCanToStructs+0x2690>)
 8014048:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801404c:	885b      	ldrh	r3, [r3, #2]
 801404e:	4a54      	ldr	r2, [pc, #336]	; (80141a0 <readCanToStructs+0x2690>)
 8014050:	011b      	lsls	r3, r3, #4
 8014052:	4413      	add	r3, r2
 8014054:	3304      	adds	r3, #4
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801405c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014060:	2b00      	cmp	r3, #0
 8014062:	d110      	bne.n	8014086 <readCanToStructs+0x2576>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014064:	2202      	movs	r2, #2
 8014066:	2100      	movs	r1, #0
 8014068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801406a:	f012 fc03 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801406e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014072:	4a4c      	ldr	r2, [pc, #304]	; (80141a4 <readCanToStructs+0x2694>)
 8014074:	f240 4116 	movw	r1, #1046	; 0x416
 8014078:	fb01 f303 	mul.w	r3, r1, r3
 801407c:	4413      	add	r3, r2
 801407e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014082:	2200      	movs	r2, #0
 8014084:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8014086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801408a:	4a46      	ldr	r2, [pc, #280]	; (80141a4 <readCanToStructs+0x2694>)
 801408c:	f240 4116 	movw	r1, #1046	; 0x416
 8014090:	fb01 f303 	mul.w	r3, r1, r3
 8014094:	4413      	add	r3, r2
 8014096:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d014      	beq.n	80140ce <readCanToStructs+0x25be>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 80140a4:	4844      	ldr	r0, [pc, #272]	; (80141b8 <readCanToStructs+0x26a8>)
 80140a6:	f012 fd69 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80140aa:	2202      	movs	r2, #2
 80140ac:	2100      	movs	r1, #0
 80140ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140b0:	f012 fbe0 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 80140b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140b8:	4a3a      	ldr	r2, [pc, #232]	; (80141a4 <readCanToStructs+0x2694>)
 80140ba:	f240 4116 	movw	r1, #1046	; 0x416
 80140be:	fb01 f303 	mul.w	r3, r1, r3
 80140c2:	4413      	add	r3, r2
 80140c4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80140c8:	2200      	movs	r2, #0
 80140ca:	701a      	strb	r2, [r3, #0]
					break;
 80140cc:	e0a1      	b.n	8014212 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80140ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80140d2:	4613      	mov	r3, r2
 80140d4:	00db      	lsls	r3, r3, #3
 80140d6:	1a9b      	subs	r3, r3, r2
 80140d8:	461a      	mov	r2, r3
 80140da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140dc:	4413      	add	r3, r2
 80140de:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80140e0:	2301      	movs	r3, #1
 80140e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80140e6:	e016      	b.n	8014116 <readCanToStructs+0x2606>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80140e8:	4b2d      	ldr	r3, [pc, #180]	; (80141a0 <readCanToStructs+0x2690>)
 80140ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80140ee:	885b      	ldrh	r3, [r3, #2]
 80140f0:	461a      	mov	r2, r3
 80140f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140f6:	492a      	ldr	r1, [pc, #168]	; (80141a0 <readCanToStructs+0x2690>)
 80140f8:	0112      	lsls	r2, r2, #4
 80140fa:	440a      	add	r2, r1
 80140fc:	4413      	add	r3, r2
 80140fe:	3304      	adds	r3, #4
 8014100:	781a      	ldrb	r2, [r3, #0]
 8014102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014104:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014108:	3301      	adds	r3, #1
 801410a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801410c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014110:	3301      	adds	r3, #1
 8014112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014116:	4b22      	ldr	r3, [pc, #136]	; (80141a0 <readCanToStructs+0x2690>)
 8014118:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801411c:	885b      	ldrh	r3, [r3, #2]
 801411e:	4a20      	ldr	r2, [pc, #128]	; (80141a0 <readCanToStructs+0x2690>)
 8014120:	011b      	lsls	r3, r3, #4
 8014122:	4413      	add	r3, r2
 8014124:	330c      	adds	r3, #12
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801412c:	429a      	cmp	r2, r3
 801412e:	d3db      	bcc.n	80140e8 <readCanToStructs+0x25d8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8014130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014134:	4a1b      	ldr	r2, [pc, #108]	; (80141a4 <readCanToStructs+0x2694>)
 8014136:	f240 4116 	movw	r1, #1046	; 0x416
 801413a:	fb01 f303 	mul.w	r3, r1, r3
 801413e:	4413      	add	r3, r2
 8014140:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014144:	781b      	ldrb	r3, [r3, #0]
 8014146:	461a      	mov	r2, r3
 8014148:	4613      	mov	r3, r2
 801414a:	00db      	lsls	r3, r3, #3
 801414c:	1a9a      	subs	r2, r3, r2
 801414e:	4b14      	ldr	r3, [pc, #80]	; (80141a0 <readCanToStructs+0x2690>)
 8014150:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014154:	885b      	ldrh	r3, [r3, #2]
 8014156:	4912      	ldr	r1, [pc, #72]	; (80141a0 <readCanToStructs+0x2690>)
 8014158:	011b      	lsls	r3, r3, #4
 801415a:	440b      	add	r3, r1
 801415c:	330c      	adds	r3, #12
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	3b01      	subs	r3, #1
 8014162:	4413      	add	r3, r2
 8014164:	2b01      	cmp	r3, #1
 8014166:	d92b      	bls.n	80141c0 <readCanToStructs+0x26b0>
					if(Debug_flag == 1)
 8014168:	4b10      	ldr	r3, [pc, #64]	; (80141ac <readCanToStructs+0x269c>)
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	2b01      	cmp	r3, #1
 801416e:	d105      	bne.n	801417c <readCanToStructs+0x266c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8014170:	4b0a      	ldr	r3, [pc, #40]	; (801419c <readCanToStructs+0x268c>)
 8014172:	881b      	ldrh	r3, [r3, #0]
 8014174:	4619      	mov	r1, r3
 8014176:	4811      	ldr	r0, [pc, #68]	; (80141bc <readCanToStructs+0x26ac>)
 8014178:	f012 fc64 	bl	8026a44 <iprintf>
					Is_CAN_Exchange_happening = YES;
 801417c:	4b0d      	ldr	r3, [pc, #52]	; (80141b4 <readCanToStructs+0x26a4>)
 801417e:	2201      	movs	r2, #1
 8014180:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014186:	4a07      	ldr	r2, [pc, #28]	; (80141a4 <readCanToStructs+0x2694>)
 8014188:	f240 4116 	movw	r1, #1046	; 0x416
 801418c:	fb01 f303 	mul.w	r3, r1, r3
 8014190:	4413      	add	r3, r2
 8014192:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014196:	2200      	movs	r2, #0
 8014198:	701a      	strb	r2, [r3, #0]
				break;
 801419a:	e03a      	b.n	8014212 <readCanToStructs+0x2702>
 801419c:	20000bb8 	.word	0x20000bb8
 80141a0:	20007258 	.word	0x20007258
 80141a4:	20006a2c 	.word	0x20006a2c
 80141a8:	0802b60c 	.word	0x0802b60c
 80141ac:	20000bbb 	.word	0x20000bbb
 80141b0:	0802b634 	.word	0x0802b634
 80141b4:	2000030b 	.word	0x2000030b
 80141b8:	0802b648 	.word	0x0802b648
 80141bc:	0802b670 	.word	0x0802b670
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 80141c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141c4:	4ab4      	ldr	r2, [pc, #720]	; (8014498 <readCanToStructs+0x2988>)
 80141c6:	f240 4116 	movw	r1, #1046	; 0x416
 80141ca:	fb01 f303 	mul.w	r3, r1, r3
 80141ce:	4413      	add	r3, r2
 80141d0:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80141d4:	2201      	movs	r2, #1
 80141d6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 80141d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141dc:	49ae      	ldr	r1, [pc, #696]	; (8014498 <readCanToStructs+0x2988>)
 80141de:	f240 4216 	movw	r2, #1046	; 0x416
 80141e2:	fb03 f202 	mul.w	r2, r3, r2
 80141e6:	440a      	add	r2, r1
 80141e8:	f202 4215 	addw	r2, r2, #1045	; 0x415
 80141ec:	7812      	ldrb	r2, [r2, #0]
 80141ee:	3201      	adds	r2, #1
 80141f0:	b2d0      	uxtb	r0, r2
 80141f2:	4aa9      	ldr	r2, [pc, #676]	; (8014498 <readCanToStructs+0x2988>)
 80141f4:	f240 4116 	movw	r1, #1046	; 0x416
 80141f8:	fb01 f303 	mul.w	r3, r1, r3
 80141fc:	4413      	add	r3, r2
 80141fe:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014202:	4602      	mov	r2, r0
 8014204:	701a      	strb	r2, [r3, #0]
				break;
 8014206:	e004      	b.n	8014212 <readCanToStructs+0x2702>
				break;
 8014208:	bf00      	nop
 801420a:	e002      	b.n	8014212 <readCanToStructs+0x2702>
				break;
 801420c:	bf00      	nop
 801420e:	e000      	b.n	8014212 <readCanToStructs+0x2702>
				break;
 8014210:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8014212:	4ba2      	ldr	r3, [pc, #648]	; (801449c <readCanToStructs+0x298c>)
 8014214:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014218:	885b      	ldrh	r3, [r3, #2]
 801421a:	011b      	lsls	r3, r3, #4
 801421c:	4a9f      	ldr	r2, [pc, #636]	; (801449c <readCanToStructs+0x298c>)
 801421e:	4413      	add	r3, r2
 8014220:	2210      	movs	r2, #16
 8014222:	2100      	movs	r1, #0
 8014224:	4618      	mov	r0, r3
 8014226:	f012 fb25 	bl	8026874 <memset>
			canRead.Out++;
 801422a:	4b9c      	ldr	r3, [pc, #624]	; (801449c <readCanToStructs+0x298c>)
 801422c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014230:	885b      	ldrh	r3, [r3, #2]
 8014232:	3301      	adds	r3, #1
 8014234:	b29a      	uxth	r2, r3
 8014236:	4b99      	ldr	r3, [pc, #612]	; (801449c <readCanToStructs+0x298c>)
 8014238:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801423c:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801423e:	4b97      	ldr	r3, [pc, #604]	; (801449c <readCanToStructs+0x298c>)
 8014240:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014244:	885b      	ldrh	r3, [r3, #2]
 8014246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801424a:	d104      	bne.n	8014256 <readCanToStructs+0x2746>
			{
				canRead.Out = 0;
 801424c:	4b93      	ldr	r3, [pc, #588]	; (801449c <readCanToStructs+0x298c>)
 801424e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014252:	2200      	movs	r2, #0
 8014254:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8014256:	f7fd fc05 	bl	8011a64 <canDataReady>
 801425a:	4603      	mov	r3, r0
 801425c:	2b00      	cmp	r3, #0
 801425e:	f47e af7c 	bne.w	801315a <readCanToStructs+0x164a>
			}

		}
		/* __________ SIEMENS _________ */
	}
	break;
 8014262:	f001 bd43 	b.w	8015cec <readCanToStructs+0x41dc>
	case MEDHA:
	{
		/* __________ MEDHA _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8014266:	4b8d      	ldr	r3, [pc, #564]	; (801449c <readCanToStructs+0x298c>)
 8014268:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801426c:	885b      	ldrh	r3, [r3, #2]
 801426e:	4a8b      	ldr	r2, [pc, #556]	; (801449c <readCanToStructs+0x298c>)
 8014270:	011b      	lsls	r3, r3, #4
 8014272:	4413      	add	r3, r2
 8014274:	330f      	adds	r3, #15
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	3b01      	subs	r3, #1
 801427a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 801427e:	4b87      	ldr	r3, [pc, #540]	; (801449c <readCanToStructs+0x298c>)
 8014280:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014284:	885b      	ldrh	r3, [r3, #2]
 8014286:	4a85      	ldr	r2, [pc, #532]	; (801449c <readCanToStructs+0x298c>)
 8014288:	011b      	lsls	r3, r3, #4
 801428a:	4413      	add	r3, r2
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	f240 220a 	movw	r2, #522	; 0x20a
 8014292:	4293      	cmp	r3, r2
 8014294:	f201 8023 	bhi.w	80152de <readCanToStructs+0x37ce>
 8014298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801429c:	d80a      	bhi.n	80142b4 <readCanToStructs+0x27a4>
 801429e:	f240 1203 	movw	r2, #259	; 0x103
 80142a2:	4293      	cmp	r3, r2
 80142a4:	d022      	beq.n	80142ec <readCanToStructs+0x27dc>
 80142a6:	f240 1209 	movw	r2, #265	; 0x109
 80142aa:	4293      	cmp	r3, r2
 80142ac:	f000 8102 	beq.w	80144b4 <readCanToStructs+0x29a4>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 80142b0:	f001 b815 	b.w	80152de <readCanToStructs+0x37ce>
 80142b4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80142b8:	2b09      	cmp	r3, #9
 80142ba:	f201 8010 	bhi.w	80152de <readCanToStructs+0x37ce>
 80142be:	a201      	add	r2, pc, #4	; (adr r2, 80142c4 <readCanToStructs+0x27b4>)
 80142c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142c4:	08014661 	.word	0x08014661
 80142c8:	08014865 	.word	0x08014865
 80142cc:	080152df 	.word	0x080152df
 80142d0:	080152df 	.word	0x080152df
 80142d4:	08014a6d 	.word	0x08014a6d
 80142d8:	080152df 	.word	0x080152df
 80142dc:	08014bff 	.word	0x08014bff
 80142e0:	08014dcd 	.word	0x08014dcd
 80142e4:	08014f73 	.word	0x08014f73
 80142e8:	0801513d 	.word	0x0801513d
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80142ec:	4b6c      	ldr	r3, [pc, #432]	; (80144a0 <readCanToStructs+0x2990>)
 80142ee:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80142f0:	4b6a      	ldr	r3, [pc, #424]	; (801449c <readCanToStructs+0x298c>)
 80142f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80142f6:	885b      	ldrh	r3, [r3, #2]
 80142f8:	4a68      	ldr	r2, [pc, #416]	; (801449c <readCanToStructs+0x298c>)
 80142fa:	011b      	lsls	r3, r3, #4
 80142fc:	4413      	add	r3, r2
 80142fe:	3304      	adds	r3, #4
 8014300:	781b      	ldrb	r3, [r3, #0]
 8014302:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014306:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801430a:	2b00      	cmp	r3, #0
 801430c:	d110      	bne.n	8014330 <readCanToStructs+0x2820>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801430e:	2206      	movs	r2, #6
 8014310:	2100      	movs	r1, #0
 8014312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014314:	f012 faae 	bl	8026874 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8014318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801431c:	4a5e      	ldr	r2, [pc, #376]	; (8014498 <readCanToStructs+0x2988>)
 801431e:	f240 4116 	movw	r1, #1046	; 0x416
 8014322:	fb01 f303 	mul.w	r3, r1, r3
 8014326:	4413      	add	r3, r2
 8014328:	f203 2307 	addw	r3, r3, #519	; 0x207
 801432c:	2200      	movs	r2, #0
 801432e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8014330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014334:	4a58      	ldr	r2, [pc, #352]	; (8014498 <readCanToStructs+0x2988>)
 8014336:	f240 4116 	movw	r1, #1046	; 0x416
 801433a:	fb01 f303 	mul.w	r3, r1, r3
 801433e:	4413      	add	r3, r2
 8014340:	f203 2307 	addw	r3, r3, #519	; 0x207
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801434a:	429a      	cmp	r2, r3
 801434c:	d015      	beq.n	801437a <readCanToStructs+0x286a>
					printf("GPS Packet Seq no MisMatch\n");
 801434e:	4855      	ldr	r0, [pc, #340]	; (80144a4 <readCanToStructs+0x2994>)
 8014350:	f012 fc14 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8014354:	2206      	movs	r2, #6
 8014356:	2100      	movs	r1, #0
 8014358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801435a:	f012 fa8b 	bl	8026874 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801435e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014362:	4a4d      	ldr	r2, [pc, #308]	; (8014498 <readCanToStructs+0x2988>)
 8014364:	f240 4116 	movw	r1, #1046	; 0x416
 8014368:	fb01 f303 	mul.w	r3, r1, r3
 801436c:	4413      	add	r3, r2
 801436e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8014372:	2200      	movs	r2, #0
 8014374:	701a      	strb	r2, [r3, #0]
					break;
 8014376:	f000 bfb3 	b.w	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 801437a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801437e:	4613      	mov	r3, r2
 8014380:	00db      	lsls	r3, r3, #3
 8014382:	1a9b      	subs	r3, r3, r2
 8014384:	461a      	mov	r2, r3
 8014386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014388:	4413      	add	r3, r2
 801438a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801438c:	2301      	movs	r3, #1
 801438e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014392:	e016      	b.n	80143c2 <readCanToStructs+0x28b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014394:	4b41      	ldr	r3, [pc, #260]	; (801449c <readCanToStructs+0x298c>)
 8014396:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801439a:	885b      	ldrh	r3, [r3, #2]
 801439c:	461a      	mov	r2, r3
 801439e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80143a2:	493e      	ldr	r1, [pc, #248]	; (801449c <readCanToStructs+0x298c>)
 80143a4:	0112      	lsls	r2, r2, #4
 80143a6:	440a      	add	r2, r1
 80143a8:	4413      	add	r3, r2
 80143aa:	3304      	adds	r3, #4
 80143ac:	781a      	ldrb	r2, [r3, #0]
 80143ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80143b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b4:	3301      	adds	r3, #1
 80143b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80143b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80143bc:	3301      	adds	r3, #1
 80143be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80143c2:	4b36      	ldr	r3, [pc, #216]	; (801449c <readCanToStructs+0x298c>)
 80143c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80143c8:	885b      	ldrh	r3, [r3, #2]
 80143ca:	4a34      	ldr	r2, [pc, #208]	; (801449c <readCanToStructs+0x298c>)
 80143cc:	011b      	lsls	r3, r3, #4
 80143ce:	4413      	add	r3, r2
 80143d0:	330c      	adds	r3, #12
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80143d8:	429a      	cmp	r2, r3
 80143da:	d3db      	bcc.n	8014394 <readCanToStructs+0x2884>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80143dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143e0:	4a2d      	ldr	r2, [pc, #180]	; (8014498 <readCanToStructs+0x2988>)
 80143e2:	f240 4116 	movw	r1, #1046	; 0x416
 80143e6:	fb01 f303 	mul.w	r3, r1, r3
 80143ea:	4413      	add	r3, r2
 80143ec:	f203 2307 	addw	r3, r3, #519	; 0x207
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	461a      	mov	r2, r3
 80143f4:	4613      	mov	r3, r2
 80143f6:	00db      	lsls	r3, r3, #3
 80143f8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80143fa:	4b28      	ldr	r3, [pc, #160]	; (801449c <readCanToStructs+0x298c>)
 80143fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014400:	885b      	ldrh	r3, [r3, #2]
 8014402:	4926      	ldr	r1, [pc, #152]	; (801449c <readCanToStructs+0x298c>)
 8014404:	011b      	lsls	r3, r3, #4
 8014406:	440b      	add	r3, r1
 8014408:	330c      	adds	r3, #12
 801440a:	781b      	ldrb	r3, [r3, #0]
 801440c:	3b01      	subs	r3, #1
 801440e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8014410:	2b05      	cmp	r3, #5
 8014412:	d91c      	bls.n	801444e <readCanToStructs+0x293e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8014414:	4b24      	ldr	r3, [pc, #144]	; (80144a8 <readCanToStructs+0x2998>)
 8014416:	4a22      	ldr	r2, [pc, #136]	; (80144a0 <readCanToStructs+0x2990>)
 8014418:	6811      	ldr	r1, [r2, #0]
 801441a:	6019      	str	r1, [r3, #0]
 801441c:	8892      	ldrh	r2, [r2, #4]
 801441e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8014420:	4b22      	ldr	r3, [pc, #136]	; (80144ac <readCanToStructs+0x299c>)
 8014422:	781b      	ldrb	r3, [r3, #0]
 8014424:	2b01      	cmp	r3, #1
 8014426:	d102      	bne.n	801442e <readCanToStructs+0x291e>
						printf("GPS_PACKET_RECEIVED\n");
 8014428:	4821      	ldr	r0, [pc, #132]	; (80144b0 <readCanToStructs+0x29a0>)
 801442a:	f012 fba7 	bl	8026b7c <puts>
					Write_RTC();
 801442e:	f7f8 fabb 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8014432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014436:	4a18      	ldr	r2, [pc, #96]	; (8014498 <readCanToStructs+0x2988>)
 8014438:	f240 4116 	movw	r1, #1046	; 0x416
 801443c:	fb01 f303 	mul.w	r3, r1, r3
 8014440:	4413      	add	r3, r2
 8014442:	f203 2307 	addw	r3, r3, #519	; 0x207
 8014446:	2200      	movs	r2, #0
 8014448:	701a      	strb	r2, [r3, #0]
				break;
 801444a:	f000 bf49 	b.w	80152e0 <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801444e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014452:	4a11      	ldr	r2, [pc, #68]	; (8014498 <readCanToStructs+0x2988>)
 8014454:	f240 4116 	movw	r1, #1046	; 0x416
 8014458:	fb01 f303 	mul.w	r3, r1, r3
 801445c:	4413      	add	r3, r2
 801445e:	f203 2306 	addw	r3, r3, #518	; 0x206
 8014462:	2201      	movs	r2, #1
 8014464:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8014466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801446a:	490b      	ldr	r1, [pc, #44]	; (8014498 <readCanToStructs+0x2988>)
 801446c:	f240 4216 	movw	r2, #1046	; 0x416
 8014470:	fb03 f202 	mul.w	r2, r3, r2
 8014474:	440a      	add	r2, r1
 8014476:	f202 2207 	addw	r2, r2, #519	; 0x207
 801447a:	7812      	ldrb	r2, [r2, #0]
 801447c:	3201      	adds	r2, #1
 801447e:	b2d0      	uxtb	r0, r2
 8014480:	4a05      	ldr	r2, [pc, #20]	; (8014498 <readCanToStructs+0x2988>)
 8014482:	f240 4116 	movw	r1, #1046	; 0x416
 8014486:	fb01 f303 	mul.w	r3, r1, r3
 801448a:	4413      	add	r3, r2
 801448c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8014490:	4602      	mov	r2, r0
 8014492:	701a      	strb	r2, [r3, #0]
				break;
 8014494:	f000 bf24 	b.w	80152e0 <readCanToStructs+0x37d0>
 8014498:	20006a2c 	.word	0x20006a2c
 801449c:	20007258 	.word	0x20007258
 80144a0:	20003fd4 	.word	0x20003fd4
 80144a4:	0802b434 	.word	0x0802b434
 80144a8:	20003fcc 	.word	0x20003fcc
 80144ac:	20000bbb 	.word	0x20000bbb
 80144b0:	0802b450 	.word	0x0802b450
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80144b4:	4b9d      	ldr	r3, [pc, #628]	; (801472c <readCanToStructs+0x2c1c>)
 80144b6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80144b8:	4b9d      	ldr	r3, [pc, #628]	; (8014730 <readCanToStructs+0x2c20>)
 80144ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80144be:	885b      	ldrh	r3, [r3, #2]
 80144c0:	4a9b      	ldr	r2, [pc, #620]	; (8014730 <readCanToStructs+0x2c20>)
 80144c2:	011b      	lsls	r3, r3, #4
 80144c4:	4413      	add	r3, r2
 80144c6:	3304      	adds	r3, #4
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80144ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d110      	bne.n	80144f8 <readCanToStructs+0x29e8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80144d6:	2206      	movs	r2, #6
 80144d8:	2100      	movs	r1, #0
 80144da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144dc:	f012 f9ca 	bl	8026874 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80144e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144e4:	4a93      	ldr	r2, [pc, #588]	; (8014734 <readCanToStructs+0x2c24>)
 80144e6:	f240 4116 	movw	r1, #1046	; 0x416
 80144ea:	fb01 f303 	mul.w	r3, r1, r3
 80144ee:	4413      	add	r3, r2
 80144f0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80144f4:	2200      	movs	r2, #0
 80144f6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80144f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144fc:	4a8d      	ldr	r2, [pc, #564]	; (8014734 <readCanToStructs+0x2c24>)
 80144fe:	f240 4116 	movw	r1, #1046	; 0x416
 8014502:	fb01 f303 	mul.w	r3, r1, r3
 8014506:	4413      	add	r3, r2
 8014508:	f203 2313 	addw	r3, r3, #531	; 0x213
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014512:	429a      	cmp	r2, r3
 8014514:	d015      	beq.n	8014542 <readCanToStructs+0x2a32>
					printf("GPS2 Packet Seq no MisMatch\n");
 8014516:	4888      	ldr	r0, [pc, #544]	; (8014738 <readCanToStructs+0x2c28>)
 8014518:	f012 fb30 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801451c:	2206      	movs	r2, #6
 801451e:	2100      	movs	r1, #0
 8014520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014522:	f012 f9a7 	bl	8026874 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8014526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801452a:	4a82      	ldr	r2, [pc, #520]	; (8014734 <readCanToStructs+0x2c24>)
 801452c:	f240 4116 	movw	r1, #1046	; 0x416
 8014530:	fb01 f303 	mul.w	r3, r1, r3
 8014534:	4413      	add	r3, r2
 8014536:	f203 2313 	addw	r3, r3, #531	; 0x213
 801453a:	2200      	movs	r2, #0
 801453c:	701a      	strb	r2, [r3, #0]
					break;
 801453e:	f000 becf 	b.w	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014542:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014546:	4613      	mov	r3, r2
 8014548:	00db      	lsls	r3, r3, #3
 801454a:	1a9b      	subs	r3, r3, r2
 801454c:	461a      	mov	r2, r3
 801454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014550:	4413      	add	r3, r2
 8014552:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014554:	2301      	movs	r3, #1
 8014556:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801455a:	e016      	b.n	801458a <readCanToStructs+0x2a7a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801455c:	4b74      	ldr	r3, [pc, #464]	; (8014730 <readCanToStructs+0x2c20>)
 801455e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014562:	885b      	ldrh	r3, [r3, #2]
 8014564:	461a      	mov	r2, r3
 8014566:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801456a:	4971      	ldr	r1, [pc, #452]	; (8014730 <readCanToStructs+0x2c20>)
 801456c:	0112      	lsls	r2, r2, #4
 801456e:	440a      	add	r2, r1
 8014570:	4413      	add	r3, r2
 8014572:	3304      	adds	r3, #4
 8014574:	781a      	ldrb	r2, [r3, #0]
 8014576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014578:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801457c:	3301      	adds	r3, #1
 801457e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014584:	3301      	adds	r3, #1
 8014586:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801458a:	4b69      	ldr	r3, [pc, #420]	; (8014730 <readCanToStructs+0x2c20>)
 801458c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014590:	885b      	ldrh	r3, [r3, #2]
 8014592:	4a67      	ldr	r2, [pc, #412]	; (8014730 <readCanToStructs+0x2c20>)
 8014594:	011b      	lsls	r3, r3, #4
 8014596:	4413      	add	r3, r2
 8014598:	330c      	adds	r3, #12
 801459a:	781b      	ldrb	r3, [r3, #0]
 801459c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d3db      	bcc.n	801455c <readCanToStructs+0x2a4c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80145a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145a8:	4a62      	ldr	r2, [pc, #392]	; (8014734 <readCanToStructs+0x2c24>)
 80145aa:	f240 4116 	movw	r1, #1046	; 0x416
 80145ae:	fb01 f303 	mul.w	r3, r1, r3
 80145b2:	4413      	add	r3, r2
 80145b4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	461a      	mov	r2, r3
 80145bc:	4613      	mov	r3, r2
 80145be:	00db      	lsls	r3, r3, #3
 80145c0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80145c2:	4b5b      	ldr	r3, [pc, #364]	; (8014730 <readCanToStructs+0x2c20>)
 80145c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80145c8:	885b      	ldrh	r3, [r3, #2]
 80145ca:	4959      	ldr	r1, [pc, #356]	; (8014730 <readCanToStructs+0x2c20>)
 80145cc:	011b      	lsls	r3, r3, #4
 80145ce:	440b      	add	r3, r1
 80145d0:	330c      	adds	r3, #12
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	3b01      	subs	r3, #1
 80145d6:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80145d8:	2b05      	cmp	r3, #5
 80145da:	d91c      	bls.n	8014616 <readCanToStructs+0x2b06>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80145dc:	4b57      	ldr	r3, [pc, #348]	; (801473c <readCanToStructs+0x2c2c>)
 80145de:	4a53      	ldr	r2, [pc, #332]	; (801472c <readCanToStructs+0x2c1c>)
 80145e0:	6811      	ldr	r1, [r2, #0]
 80145e2:	6019      	str	r1, [r3, #0]
 80145e4:	8892      	ldrh	r2, [r2, #4]
 80145e6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80145e8:	4b55      	ldr	r3, [pc, #340]	; (8014740 <readCanToStructs+0x2c30>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	2b01      	cmp	r3, #1
 80145ee:	d102      	bne.n	80145f6 <readCanToStructs+0x2ae6>
						printf("GPS2_PACKET_RECEIVED\n");
 80145f0:	4854      	ldr	r0, [pc, #336]	; (8014744 <readCanToStructs+0x2c34>)
 80145f2:	f012 fac3 	bl	8026b7c <puts>
					Write_RTC();
 80145f6:	f7f8 f9d7 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80145fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145fe:	4a4d      	ldr	r2, [pc, #308]	; (8014734 <readCanToStructs+0x2c24>)
 8014600:	f240 4116 	movw	r1, #1046	; 0x416
 8014604:	fb01 f303 	mul.w	r3, r1, r3
 8014608:	4413      	add	r3, r2
 801460a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801460e:	2200      	movs	r2, #0
 8014610:	701a      	strb	r2, [r3, #0]
				break;
 8014612:	f000 be65 	b.w	80152e0 <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8014616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801461a:	4a46      	ldr	r2, [pc, #280]	; (8014734 <readCanToStructs+0x2c24>)
 801461c:	f240 4116 	movw	r1, #1046	; 0x416
 8014620:	fb01 f303 	mul.w	r3, r1, r3
 8014624:	4413      	add	r3, r2
 8014626:	f203 2312 	addw	r3, r3, #530	; 0x212
 801462a:	2201      	movs	r2, #1
 801462c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801462e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014632:	4940      	ldr	r1, [pc, #256]	; (8014734 <readCanToStructs+0x2c24>)
 8014634:	f240 4216 	movw	r2, #1046	; 0x416
 8014638:	fb03 f202 	mul.w	r2, r3, r2
 801463c:	440a      	add	r2, r1
 801463e:	f202 2213 	addw	r2, r2, #531	; 0x213
 8014642:	7812      	ldrb	r2, [r2, #0]
 8014644:	3201      	adds	r2, #1
 8014646:	b2d0      	uxtb	r0, r2
 8014648:	4a3a      	ldr	r2, [pc, #232]	; (8014734 <readCanToStructs+0x2c24>)
 801464a:	f240 4116 	movw	r1, #1046	; 0x416
 801464e:	fb01 f303 	mul.w	r3, r1, r3
 8014652:	4413      	add	r3, r2
 8014654:	f203 2313 	addw	r3, r3, #531	; 0x213
 8014658:	4602      	mov	r2, r0
 801465a:	701a      	strb	r2, [r3, #0]
				break;
 801465c:	f000 be40 	b.w	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8014660:	4b39      	ldr	r3, [pc, #228]	; (8014748 <readCanToStructs+0x2c38>)
 8014662:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014664:	4b32      	ldr	r3, [pc, #200]	; (8014730 <readCanToStructs+0x2c20>)
 8014666:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801466a:	885b      	ldrh	r3, [r3, #2]
 801466c:	4a30      	ldr	r2, [pc, #192]	; (8014730 <readCanToStructs+0x2c20>)
 801466e:	011b      	lsls	r3, r3, #4
 8014670:	4413      	add	r3, r2
 8014672:	3304      	adds	r3, #4
 8014674:	781b      	ldrb	r3, [r3, #0]
 8014676:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801467a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801467e:	2b00      	cmp	r3, #0
 8014680:	d110      	bne.n	80146a4 <readCanToStructs+0x2b94>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014682:	2208      	movs	r2, #8
 8014684:	2100      	movs	r1, #0
 8014686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014688:	f012 f8f4 	bl	8026874 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801468c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014690:	4a28      	ldr	r2, [pc, #160]	; (8014734 <readCanToStructs+0x2c24>)
 8014692:	f240 4116 	movw	r1, #1046	; 0x416
 8014696:	fb01 f303 	mul.w	r3, r1, r3
 801469a:	4413      	add	r3, r2
 801469c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80146a0:	2200      	movs	r2, #0
 80146a2:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80146a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146a8:	4a22      	ldr	r2, [pc, #136]	; (8014734 <readCanToStructs+0x2c24>)
 80146aa:	f240 4116 	movw	r1, #1046	; 0x416
 80146ae:	fb01 f303 	mul.w	r3, r1, r3
 80146b2:	4413      	add	r3, r2
 80146b4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80146b8:	781b      	ldrb	r3, [r3, #0]
 80146ba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80146be:	429a      	cmp	r2, r3
 80146c0:	d026      	beq.n	8014710 <readCanToStructs+0x2c00>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 80146c2:	4822      	ldr	r0, [pc, #136]	; (801474c <readCanToStructs+0x2c3c>)
 80146c4:	f012 fa5a 	bl	8026b7c <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo);
 80146c8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80146cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146d0:	4a18      	ldr	r2, [pc, #96]	; (8014734 <readCanToStructs+0x2c24>)
 80146d2:	f240 4016 	movw	r0, #1046	; 0x416
 80146d6:	fb00 f303 	mul.w	r3, r0, r3
 80146da:	4413      	add	r3, r2
 80146dc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	461a      	mov	r2, r3
 80146e4:	481a      	ldr	r0, [pc, #104]	; (8014750 <readCanToStructs+0x2c40>)
 80146e6:	f012 f9ad 	bl	8026a44 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80146ea:	2208      	movs	r2, #8
 80146ec:	2100      	movs	r1, #0
 80146ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146f0:	f012 f8c0 	bl	8026874 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80146f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146f8:	4a0e      	ldr	r2, [pc, #56]	; (8014734 <readCanToStructs+0x2c24>)
 80146fa:	f240 4116 	movw	r1, #1046	; 0x416
 80146fe:	fb01 f303 	mul.w	r3, r1, r3
 8014702:	4413      	add	r3, r2
 8014704:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8014708:	2200      	movs	r2, #0
 801470a:	701a      	strb	r2, [r3, #0]
					break;
 801470c:	f000 bde8 	b.w	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014710:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014714:	4613      	mov	r3, r2
 8014716:	00db      	lsls	r3, r3, #3
 8014718:	1a9b      	subs	r3, r3, r2
 801471a:	461a      	mov	r2, r3
 801471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801471e:	4413      	add	r3, r2
 8014720:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014722:	2301      	movs	r3, #1
 8014724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014728:	e02b      	b.n	8014782 <readCanToStructs+0x2c72>
 801472a:	bf00      	nop
 801472c:	20003fd4 	.word	0x20003fd4
 8014730:	20007258 	.word	0x20007258
 8014734:	20006a2c 	.word	0x20006a2c
 8014738:	0802b464 	.word	0x0802b464
 801473c:	20003fcc 	.word	0x20003fcc
 8014740:	20000bbb 	.word	0x20000bbb
 8014744:	0802b480 	.word	0x0802b480
 8014748:	20003e14 	.word	0x20003e14
 801474c:	0802b724 	.word	0x0802b724
 8014750:	0802b74c 	.word	0x0802b74c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014754:	4bba      	ldr	r3, [pc, #744]	; (8014a40 <readCanToStructs+0x2f30>)
 8014756:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801475a:	885b      	ldrh	r3, [r3, #2]
 801475c:	461a      	mov	r2, r3
 801475e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014762:	49b7      	ldr	r1, [pc, #732]	; (8014a40 <readCanToStructs+0x2f30>)
 8014764:	0112      	lsls	r2, r2, #4
 8014766:	440a      	add	r2, r1
 8014768:	4413      	add	r3, r2
 801476a:	3304      	adds	r3, #4
 801476c:	781a      	ldrb	r2, [r3, #0]
 801476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014770:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014774:	3301      	adds	r3, #1
 8014776:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014778:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801477c:	3301      	adds	r3, #1
 801477e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014782:	4baf      	ldr	r3, [pc, #700]	; (8014a40 <readCanToStructs+0x2f30>)
 8014784:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014788:	885b      	ldrh	r3, [r3, #2]
 801478a:	4aad      	ldr	r2, [pc, #692]	; (8014a40 <readCanToStructs+0x2f30>)
 801478c:	011b      	lsls	r3, r3, #4
 801478e:	4413      	add	r3, r2
 8014790:	330c      	adds	r3, #12
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014798:	429a      	cmp	r2, r3
 801479a:	d3db      	bcc.n	8014754 <readCanToStructs+0x2c44>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 801479c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147a0:	4aa8      	ldr	r2, [pc, #672]	; (8014a44 <readCanToStructs+0x2f34>)
 80147a2:	f240 4116 	movw	r1, #1046	; 0x416
 80147a6:	fb01 f303 	mul.w	r3, r1, r3
 80147aa:	4413      	add	r3, r2
 80147ac:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	461a      	mov	r2, r3
 80147b4:	4613      	mov	r3, r2
 80147b6:	00db      	lsls	r3, r3, #3
 80147b8:	1a9a      	subs	r2, r3, r2
 80147ba:	4ba1      	ldr	r3, [pc, #644]	; (8014a40 <readCanToStructs+0x2f30>)
 80147bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80147c0:	885b      	ldrh	r3, [r3, #2]
 80147c2:	499f      	ldr	r1, [pc, #636]	; (8014a40 <readCanToStructs+0x2f30>)
 80147c4:	011b      	lsls	r3, r3, #4
 80147c6:	440b      	add	r3, r1
 80147c8:	330c      	adds	r3, #12
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	3b01      	subs	r3, #1
 80147ce:	4413      	add	r3, r2
 80147d0:	2b07      	cmp	r3, #7
 80147d2:	d922      	bls.n	801481a <readCanToStructs+0x2d0a>
					if(Debug_flag == 1)
 80147d4:	4b9c      	ldr	r3, [pc, #624]	; (8014a48 <readCanToStructs+0x2f38>)
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d102      	bne.n	80147e2 <readCanToStructs+0x2cd2>
						printf("\nRCV OTH_INFO1\n");
 80147dc:	489b      	ldr	r0, [pc, #620]	; (8014a4c <readCanToStructs+0x2f3c>)
 80147de:	f012 f9cd 	bl	8026b7c <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 80147e2:	4b9b      	ldr	r3, [pc, #620]	; (8014a50 <readCanToStructs+0x2f40>)
 80147e4:	4a9b      	ldr	r2, [pc, #620]	; (8014a54 <readCanToStructs+0x2f44>)
 80147e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147ea:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 80147ee:	4b9a      	ldr	r3, [pc, #616]	; (8014a58 <readCanToStructs+0x2f48>)
 80147f0:	2201      	movs	r2, #1
 80147f2:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80147f4:	f005 f91c 	bl	8019a30 <HAL_GetTick>
 80147f8:	4603      	mov	r3, r0
 80147fa:	4a98      	ldr	r2, [pc, #608]	; (8014a5c <readCanToStructs+0x2f4c>)
 80147fc:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80147fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014802:	4a90      	ldr	r2, [pc, #576]	; (8014a44 <readCanToStructs+0x2f34>)
 8014804:	f240 4116 	movw	r1, #1046	; 0x416
 8014808:	fb01 f303 	mul.w	r3, r1, r3
 801480c:	4413      	add	r3, r2
 801480e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8014812:	2200      	movs	r2, #0
 8014814:	701a      	strb	r2, [r3, #0]
				break;
 8014816:	f000 bd63 	b.w	80152e0 <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 801481a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801481e:	4a89      	ldr	r2, [pc, #548]	; (8014a44 <readCanToStructs+0x2f34>)
 8014820:	f240 4116 	movw	r1, #1046	; 0x416
 8014824:	fb01 f303 	mul.w	r3, r1, r3
 8014828:	4413      	add	r3, r2
 801482a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801482e:	2201      	movs	r2, #1
 8014830:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8014832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014836:	4983      	ldr	r1, [pc, #524]	; (8014a44 <readCanToStructs+0x2f34>)
 8014838:	f240 4216 	movw	r2, #1046	; 0x416
 801483c:	fb03 f202 	mul.w	r2, r3, r2
 8014840:	440a      	add	r2, r1
 8014842:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8014846:	7812      	ldrb	r2, [r2, #0]
 8014848:	3201      	adds	r2, #1
 801484a:	b2d0      	uxtb	r0, r2
 801484c:	4a7d      	ldr	r2, [pc, #500]	; (8014a44 <readCanToStructs+0x2f34>)
 801484e:	f240 4116 	movw	r1, #1046	; 0x416
 8014852:	fb01 f303 	mul.w	r3, r1, r3
 8014856:	4413      	add	r3, r2
 8014858:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801485c:	4602      	mov	r2, r0
 801485e:	701a      	strb	r2, [r3, #0]
				break;
 8014860:	f000 bd3e 	b.w	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8014864:	4b7b      	ldr	r3, [pc, #492]	; (8014a54 <readCanToStructs+0x2f44>)
 8014866:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014868:	4b75      	ldr	r3, [pc, #468]	; (8014a40 <readCanToStructs+0x2f30>)
 801486a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801486e:	885b      	ldrh	r3, [r3, #2]
 8014870:	4a73      	ldr	r2, [pc, #460]	; (8014a40 <readCanToStructs+0x2f30>)
 8014872:	011b      	lsls	r3, r3, #4
 8014874:	4413      	add	r3, r2
 8014876:	3304      	adds	r3, #4
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801487e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014882:	2b00      	cmp	r3, #0
 8014884:	d110      	bne.n	80148a8 <readCanToStructs+0x2d98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014886:	2208      	movs	r2, #8
 8014888:	2100      	movs	r1, #0
 801488a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801488c:	f011 fff2 	bl	8026874 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8014890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014894:	4a6b      	ldr	r2, [pc, #428]	; (8014a44 <readCanToStructs+0x2f34>)
 8014896:	f240 4116 	movw	r1, #1046	; 0x416
 801489a:	fb01 f303 	mul.w	r3, r1, r3
 801489e:	4413      	add	r3, r2
 80148a0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80148a4:	2200      	movs	r2, #0
 80148a6:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 80148a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148ac:	4a65      	ldr	r2, [pc, #404]	; (8014a44 <readCanToStructs+0x2f34>)
 80148ae:	f240 4116 	movw	r1, #1046	; 0x416
 80148b2:	fb01 f303 	mul.w	r3, r1, r3
 80148b6:	4413      	add	r3, r2
 80148b8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80148bc:	781b      	ldrb	r3, [r3, #0]
 80148be:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d026      	beq.n	8014914 <readCanToStructs+0x2e04>
					printf("Seq No Mismatch for EI_2_SELF_SHARING\n");
 80148c6:	4866      	ldr	r0, [pc, #408]	; (8014a60 <readCanToStructs+0x2f50>)
 80148c8:	f012 f958 	bl	8026b7c <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo);
 80148cc:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80148d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148d4:	4a5b      	ldr	r2, [pc, #364]	; (8014a44 <readCanToStructs+0x2f34>)
 80148d6:	f240 4016 	movw	r0, #1046	; 0x416
 80148da:	fb00 f303 	mul.w	r3, r0, r3
 80148de:	4413      	add	r3, r2
 80148e0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80148e4:	781b      	ldrb	r3, [r3, #0]
 80148e6:	461a      	mov	r2, r3
 80148e8:	485e      	ldr	r0, [pc, #376]	; (8014a64 <readCanToStructs+0x2f54>)
 80148ea:	f012 f8ab 	bl	8026a44 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80148ee:	2208      	movs	r2, #8
 80148f0:	2100      	movs	r1, #0
 80148f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80148f4:	f011 ffbe 	bl	8026874 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80148f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148fc:	4a51      	ldr	r2, [pc, #324]	; (8014a44 <readCanToStructs+0x2f34>)
 80148fe:	f240 4116 	movw	r1, #1046	; 0x416
 8014902:	fb01 f303 	mul.w	r3, r1, r3
 8014906:	4413      	add	r3, r2
 8014908:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801490c:	2200      	movs	r2, #0
 801490e:	701a      	strb	r2, [r3, #0]
					break;
 8014910:	f000 bce6 	b.w	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014914:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014918:	4613      	mov	r3, r2
 801491a:	00db      	lsls	r3, r3, #3
 801491c:	1a9b      	subs	r3, r3, r2
 801491e:	461a      	mov	r2, r3
 8014920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014922:	4413      	add	r3, r2
 8014924:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014926:	2301      	movs	r3, #1
 8014928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801492c:	e016      	b.n	801495c <readCanToStructs+0x2e4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801492e:	4b44      	ldr	r3, [pc, #272]	; (8014a40 <readCanToStructs+0x2f30>)
 8014930:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014934:	885b      	ldrh	r3, [r3, #2]
 8014936:	461a      	mov	r2, r3
 8014938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801493c:	4940      	ldr	r1, [pc, #256]	; (8014a40 <readCanToStructs+0x2f30>)
 801493e:	0112      	lsls	r2, r2, #4
 8014940:	440a      	add	r2, r1
 8014942:	4413      	add	r3, r2
 8014944:	3304      	adds	r3, #4
 8014946:	781a      	ldrb	r2, [r3, #0]
 8014948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801494a:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801494e:	3301      	adds	r3, #1
 8014950:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014952:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014956:	3301      	adds	r3, #1
 8014958:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801495c:	4b38      	ldr	r3, [pc, #224]	; (8014a40 <readCanToStructs+0x2f30>)
 801495e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014962:	885b      	ldrh	r3, [r3, #2]
 8014964:	4a36      	ldr	r2, [pc, #216]	; (8014a40 <readCanToStructs+0x2f30>)
 8014966:	011b      	lsls	r3, r3, #4
 8014968:	4413      	add	r3, r2
 801496a:	330c      	adds	r3, #12
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014972:	429a      	cmp	r2, r3
 8014974:	d3db      	bcc.n	801492e <readCanToStructs+0x2e1e>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8014976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801497a:	4a32      	ldr	r2, [pc, #200]	; (8014a44 <readCanToStructs+0x2f34>)
 801497c:	f240 4116 	movw	r1, #1046	; 0x416
 8014980:	fb01 f303 	mul.w	r3, r1, r3
 8014984:	4413      	add	r3, r2
 8014986:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	461a      	mov	r2, r3
 801498e:	4613      	mov	r3, r2
 8014990:	00db      	lsls	r3, r3, #3
 8014992:	1a9a      	subs	r2, r3, r2
 8014994:	4b2a      	ldr	r3, [pc, #168]	; (8014a40 <readCanToStructs+0x2f30>)
 8014996:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801499a:	885b      	ldrh	r3, [r3, #2]
 801499c:	4928      	ldr	r1, [pc, #160]	; (8014a40 <readCanToStructs+0x2f30>)
 801499e:	011b      	lsls	r3, r3, #4
 80149a0:	440b      	add	r3, r1
 80149a2:	330c      	adds	r3, #12
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	3b01      	subs	r3, #1
 80149a8:	4413      	add	r3, r2
 80149aa:	2b07      	cmp	r3, #7
 80149ac:	d922      	bls.n	80149f4 <readCanToStructs+0x2ee4>
					if(Debug_flag == 1)
 80149ae:	4b26      	ldr	r3, [pc, #152]	; (8014a48 <readCanToStructs+0x2f38>)
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	2b01      	cmp	r3, #1
 80149b4:	d102      	bne.n	80149bc <readCanToStructs+0x2eac>
						printf("\nRCV OTH_INFO2\n");
 80149b6:	482c      	ldr	r0, [pc, #176]	; (8014a68 <readCanToStructs+0x2f58>)
 80149b8:	f012 f8e0 	bl	8026b7c <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 80149bc:	4b24      	ldr	r3, [pc, #144]	; (8014a50 <readCanToStructs+0x2f40>)
 80149be:	4a25      	ldr	r2, [pc, #148]	; (8014a54 <readCanToStructs+0x2f44>)
 80149c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149c4:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 80149c8:	4b23      	ldr	r3, [pc, #140]	; (8014a58 <readCanToStructs+0x2f48>)
 80149ca:	2201      	movs	r2, #1
 80149cc:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80149ce:	f005 f82f 	bl	8019a30 <HAL_GetTick>
 80149d2:	4603      	mov	r3, r0
 80149d4:	4a21      	ldr	r2, [pc, #132]	; (8014a5c <readCanToStructs+0x2f4c>)
 80149d6:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80149d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149dc:	4a19      	ldr	r2, [pc, #100]	; (8014a44 <readCanToStructs+0x2f34>)
 80149de:	f240 4116 	movw	r1, #1046	; 0x416
 80149e2:	fb01 f303 	mul.w	r3, r1, r3
 80149e6:	4413      	add	r3, r2
 80149e8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80149ec:	2200      	movs	r2, #0
 80149ee:	701a      	strb	r2, [r3, #0]
				break;
 80149f0:	f000 bc76 	b.w	80152e0 <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80149f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149f8:	4a12      	ldr	r2, [pc, #72]	; (8014a44 <readCanToStructs+0x2f34>)
 80149fa:	f240 4116 	movw	r1, #1046	; 0x416
 80149fe:	fb01 f303 	mul.w	r3, r1, r3
 8014a02:	4413      	add	r3, r2
 8014a04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014a08:	2201      	movs	r2, #1
 8014a0a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8014a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a10:	490c      	ldr	r1, [pc, #48]	; (8014a44 <readCanToStructs+0x2f34>)
 8014a12:	f240 4216 	movw	r2, #1046	; 0x416
 8014a16:	fb03 f202 	mul.w	r2, r3, r2
 8014a1a:	440a      	add	r2, r1
 8014a1c:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8014a20:	7812      	ldrb	r2, [r2, #0]
 8014a22:	3201      	adds	r2, #1
 8014a24:	b2d0      	uxtb	r0, r2
 8014a26:	4a07      	ldr	r2, [pc, #28]	; (8014a44 <readCanToStructs+0x2f34>)
 8014a28:	f240 4116 	movw	r1, #1046	; 0x416
 8014a2c:	fb01 f303 	mul.w	r3, r1, r3
 8014a30:	4413      	add	r3, r2
 8014a32:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014a36:	4602      	mov	r2, r0
 8014a38:	701a      	strb	r2, [r3, #0]
				break;
 8014a3a:	f000 bc51 	b.w	80152e0 <readCanToStructs+0x37d0>
 8014a3e:	bf00      	nop
 8014a40:	20007258 	.word	0x20007258
 8014a44:	20006a2c 	.word	0x20006a2c
 8014a48:	20000bbb 	.word	0x20000bbb
 8014a4c:	0802b75c 	.word	0x0802b75c
 8014a50:	20003e0c 	.word	0x20003e0c
 8014a54:	20003e14 	.word	0x20003e14
 8014a58:	200038a8 	.word	0x200038a8
 8014a5c:	200038ac 	.word	0x200038ac
 8014a60:	0802b76c 	.word	0x0802b76c
 8014a64:	0802b74c 	.word	0x0802b74c
 8014a68:	0802b794 	.word	0x0802b794
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 8014a6c:	4bbb      	ldr	r3, [pc, #748]	; (8014d5c <readCanToStructs+0x324c>)
 8014a6e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014a70:	4bbb      	ldr	r3, [pc, #748]	; (8014d60 <readCanToStructs+0x3250>)
 8014a72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014a76:	885b      	ldrh	r3, [r3, #2]
 8014a78:	4ab9      	ldr	r2, [pc, #740]	; (8014d60 <readCanToStructs+0x3250>)
 8014a7a:	011b      	lsls	r3, r3, #4
 8014a7c:	4413      	add	r3, r2
 8014a7e:	3304      	adds	r3, #4
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014a86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d110      	bne.n	8014ab0 <readCanToStructs+0x2fa0>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8014a8e:	2204      	movs	r2, #4
 8014a90:	2100      	movs	r1, #0
 8014a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a94:	f011 feee 	bl	8026874 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a9c:	4ab1      	ldr	r2, [pc, #708]	; (8014d64 <readCanToStructs+0x3254>)
 8014a9e:	f240 4116 	movw	r1, #1046	; 0x416
 8014aa2:	fb01 f303 	mul.w	r3, r1, r3
 8014aa6:	4413      	add	r3, r2
 8014aa8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014aac:	2200      	movs	r2, #0
 8014aae:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8014ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ab4:	4aab      	ldr	r2, [pc, #684]	; (8014d64 <readCanToStructs+0x3254>)
 8014ab6:	f240 4116 	movw	r1, #1046	; 0x416
 8014aba:	fb01 f303 	mul.w	r3, r1, r3
 8014abe:	4413      	add	r3, r2
 8014ac0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014aca:	429a      	cmp	r2, r3
 8014acc:	d011      	beq.n	8014af2 <readCanToStructs+0x2fe2>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8014ace:	2204      	movs	r2, #4
 8014ad0:	2100      	movs	r1, #0
 8014ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014ad4:	f011 fece 	bl	8026874 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014adc:	4aa1      	ldr	r2, [pc, #644]	; (8014d64 <readCanToStructs+0x3254>)
 8014ade:	f240 4116 	movw	r1, #1046	; 0x416
 8014ae2:	fb01 f303 	mul.w	r3, r1, r3
 8014ae6:	4413      	add	r3, r2
 8014ae8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014aec:	2200      	movs	r2, #0
 8014aee:	701a      	strb	r2, [r3, #0]
					break;
 8014af0:	e3f6      	b.n	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014af2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014af6:	4613      	mov	r3, r2
 8014af8:	00db      	lsls	r3, r3, #3
 8014afa:	1a9b      	subs	r3, r3, r2
 8014afc:	461a      	mov	r2, r3
 8014afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b00:	4413      	add	r3, r2
 8014b02:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014b04:	2301      	movs	r3, #1
 8014b06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014b0a:	e016      	b.n	8014b3a <readCanToStructs+0x302a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014b0c:	4b94      	ldr	r3, [pc, #592]	; (8014d60 <readCanToStructs+0x3250>)
 8014b0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b12:	885b      	ldrh	r3, [r3, #2]
 8014b14:	461a      	mov	r2, r3
 8014b16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b1a:	4991      	ldr	r1, [pc, #580]	; (8014d60 <readCanToStructs+0x3250>)
 8014b1c:	0112      	lsls	r2, r2, #4
 8014b1e:	440a      	add	r2, r1
 8014b20:	4413      	add	r3, r2
 8014b22:	3304      	adds	r3, #4
 8014b24:	781a      	ldrb	r2, [r3, #0]
 8014b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b28:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2c:	3301      	adds	r3, #1
 8014b2e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014b30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b34:	3301      	adds	r3, #1
 8014b36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014b3a:	4b89      	ldr	r3, [pc, #548]	; (8014d60 <readCanToStructs+0x3250>)
 8014b3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b40:	885b      	ldrh	r3, [r3, #2]
 8014b42:	4a87      	ldr	r2, [pc, #540]	; (8014d60 <readCanToStructs+0x3250>)
 8014b44:	011b      	lsls	r3, r3, #4
 8014b46:	4413      	add	r3, r2
 8014b48:	330c      	adds	r3, #12
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d3db      	bcc.n	8014b0c <readCanToStructs+0x2ffc>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 8014b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b58:	4a82      	ldr	r2, [pc, #520]	; (8014d64 <readCanToStructs+0x3254>)
 8014b5a:	f240 4116 	movw	r1, #1046	; 0x416
 8014b5e:	fb01 f303 	mul.w	r3, r1, r3
 8014b62:	4413      	add	r3, r2
 8014b64:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	461a      	mov	r2, r3
 8014b6c:	4613      	mov	r3, r2
 8014b6e:	00db      	lsls	r3, r3, #3
 8014b70:	1a9a      	subs	r2, r3, r2
 8014b72:	4b7b      	ldr	r3, [pc, #492]	; (8014d60 <readCanToStructs+0x3250>)
 8014b74:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b78:	885b      	ldrh	r3, [r3, #2]
 8014b7a:	4979      	ldr	r1, [pc, #484]	; (8014d60 <readCanToStructs+0x3250>)
 8014b7c:	011b      	lsls	r3, r3, #4
 8014b7e:	440b      	add	r3, r1
 8014b80:	330c      	adds	r3, #12
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	3b01      	subs	r3, #1
 8014b86:	4413      	add	r3, r2
 8014b88:	2b03      	cmp	r3, #3
 8014b8a:	d914      	bls.n	8014bb6 <readCanToStructs+0x30a6>
					printf("Received CAN_FAULT_INJECTION\n");
 8014b8c:	4876      	ldr	r0, [pc, #472]	; (8014d68 <readCanToStructs+0x3258>)
 8014b8e:	f011 fff5 	bl	8026b7c <puts>
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014b92:	f004 ff4d 	bl	8019a30 <HAL_GetTick>
 8014b96:	4603      	mov	r3, r0
 8014b98:	4a74      	ldr	r2, [pc, #464]	; (8014d6c <readCanToStructs+0x325c>)
 8014b9a:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ba0:	4a70      	ldr	r2, [pc, #448]	; (8014d64 <readCanToStructs+0x3254>)
 8014ba2:	f240 4116 	movw	r1, #1046	; 0x416
 8014ba6:	fb01 f303 	mul.w	r3, r1, r3
 8014baa:	4413      	add	r3, r2
 8014bac:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	701a      	strb	r2, [r3, #0]
				break;
 8014bb4:	e394      	b.n	80152e0 <readCanToStructs+0x37d0>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8014bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014bba:	4a6a      	ldr	r2, [pc, #424]	; (8014d64 <readCanToStructs+0x3254>)
 8014bbc:	f240 4116 	movw	r1, #1046	; 0x416
 8014bc0:	fb01 f303 	mul.w	r3, r1, r3
 8014bc4:	4413      	add	r3, r2
 8014bc6:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8014bca:	2201      	movs	r2, #1
 8014bcc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8014bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014bd2:	4964      	ldr	r1, [pc, #400]	; (8014d64 <readCanToStructs+0x3254>)
 8014bd4:	f240 4216 	movw	r2, #1046	; 0x416
 8014bd8:	fb03 f202 	mul.w	r2, r3, r2
 8014bdc:	440a      	add	r2, r1
 8014bde:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8014be2:	7812      	ldrb	r2, [r2, #0]
 8014be4:	3201      	adds	r2, #1
 8014be6:	b2d0      	uxtb	r0, r2
 8014be8:	4a5e      	ldr	r2, [pc, #376]	; (8014d64 <readCanToStructs+0x3254>)
 8014bea:	f240 4116 	movw	r1, #1046	; 0x416
 8014bee:	fb01 f303 	mul.w	r3, r1, r3
 8014bf2:	4413      	add	r3, r2
 8014bf4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	701a      	strb	r2, [r3, #0]
				break;
 8014bfc:	e370      	b.n	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8014bfe:	4b5c      	ldr	r3, [pc, #368]	; (8014d70 <readCanToStructs+0x3260>)
 8014c00:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014c02:	4b57      	ldr	r3, [pc, #348]	; (8014d60 <readCanToStructs+0x3250>)
 8014c04:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014c08:	885b      	ldrh	r3, [r3, #2]
 8014c0a:	4a55      	ldr	r2, [pc, #340]	; (8014d60 <readCanToStructs+0x3250>)
 8014c0c:	011b      	lsls	r3, r3, #4
 8014c0e:	4413      	add	r3, r2
 8014c10:	3304      	adds	r3, #4
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014c18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d110      	bne.n	8014c42 <readCanToStructs+0x3132>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014c20:	2284      	movs	r2, #132	; 0x84
 8014c22:	2100      	movs	r1, #0
 8014c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c26:	f011 fe25 	bl	8026874 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c2e:	4a4d      	ldr	r2, [pc, #308]	; (8014d64 <readCanToStructs+0x3254>)
 8014c30:	f240 4116 	movw	r1, #1046	; 0x416
 8014c34:	fb01 f303 	mul.w	r3, r1, r3
 8014c38:	4413      	add	r3, r2
 8014c3a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014c3e:	2200      	movs	r2, #0
 8014c40:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8014c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c46:	4a47      	ldr	r2, [pc, #284]	; (8014d64 <readCanToStructs+0x3254>)
 8014c48:	f240 4116 	movw	r1, #1046	; 0x416
 8014c4c:	fb01 f303 	mul.w	r3, r1, r3
 8014c50:	4413      	add	r3, r2
 8014c52:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d011      	beq.n	8014c84 <readCanToStructs+0x3174>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014c60:	2284      	movs	r2, #132	; 0x84
 8014c62:	2100      	movs	r1, #0
 8014c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c66:	f011 fe05 	bl	8026874 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c6e:	4a3d      	ldr	r2, [pc, #244]	; (8014d64 <readCanToStructs+0x3254>)
 8014c70:	f240 4116 	movw	r1, #1046	; 0x416
 8014c74:	fb01 f303 	mul.w	r3, r1, r3
 8014c78:	4413      	add	r3, r2
 8014c7a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014c7e:	2200      	movs	r2, #0
 8014c80:	701a      	strb	r2, [r3, #0]
					break;
 8014c82:	e32d      	b.n	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014c84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014c88:	4613      	mov	r3, r2
 8014c8a:	00db      	lsls	r3, r3, #3
 8014c8c:	1a9b      	subs	r3, r3, r2
 8014c8e:	461a      	mov	r2, r3
 8014c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c92:	4413      	add	r3, r2
 8014c94:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014c96:	2301      	movs	r3, #1
 8014c98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014c9c:	e016      	b.n	8014ccc <readCanToStructs+0x31bc>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014c9e:	4b30      	ldr	r3, [pc, #192]	; (8014d60 <readCanToStructs+0x3250>)
 8014ca0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014ca4:	885b      	ldrh	r3, [r3, #2]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014cac:	492c      	ldr	r1, [pc, #176]	; (8014d60 <readCanToStructs+0x3250>)
 8014cae:	0112      	lsls	r2, r2, #4
 8014cb0:	440a      	add	r2, r1
 8014cb2:	4413      	add	r3, r2
 8014cb4:	3304      	adds	r3, #4
 8014cb6:	781a      	ldrb	r2, [r3, #0]
 8014cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cba:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014ccc:	4b24      	ldr	r3, [pc, #144]	; (8014d60 <readCanToStructs+0x3250>)
 8014cce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014cd2:	885b      	ldrh	r3, [r3, #2]
 8014cd4:	4a22      	ldr	r2, [pc, #136]	; (8014d60 <readCanToStructs+0x3250>)
 8014cd6:	011b      	lsls	r3, r3, #4
 8014cd8:	4413      	add	r3, r2
 8014cda:	330c      	adds	r3, #12
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d3db      	bcc.n	8014c9e <readCanToStructs+0x318e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8014ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cea:	4a1e      	ldr	r2, [pc, #120]	; (8014d64 <readCanToStructs+0x3254>)
 8014cec:	f240 4116 	movw	r1, #1046	; 0x416
 8014cf0:	fb01 f303 	mul.w	r3, r1, r3
 8014cf4:	4413      	add	r3, r2
 8014cf6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	461a      	mov	r2, r3
 8014cfe:	4613      	mov	r3, r2
 8014d00:	00db      	lsls	r3, r3, #3
 8014d02:	1a9a      	subs	r2, r3, r2
 8014d04:	4b16      	ldr	r3, [pc, #88]	; (8014d60 <readCanToStructs+0x3250>)
 8014d06:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014d0a:	885b      	ldrh	r3, [r3, #2]
 8014d0c:	4914      	ldr	r1, [pc, #80]	; (8014d60 <readCanToStructs+0x3250>)
 8014d0e:	011b      	lsls	r3, r3, #4
 8014d10:	440b      	add	r3, r1
 8014d12:	330c      	adds	r3, #12
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	3b01      	subs	r3, #1
 8014d18:	4413      	add	r3, r2
 8014d1a:	2b83      	cmp	r3, #131	; 0x83
 8014d1c:	d932      	bls.n	8014d84 <readCanToStructs+0x3274>
					if(Debug_flag == 1)
 8014d1e:	4b15      	ldr	r3, [pc, #84]	; (8014d74 <readCanToStructs+0x3264>)
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	d102      	bne.n	8014d2c <readCanToStructs+0x321c>
						printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8014d26:	4814      	ldr	r0, [pc, #80]	; (8014d78 <readCanToStructs+0x3268>)
 8014d28:	f011 ff28 	bl	8026b7c <puts>
					Received_CAN_Relay_Status = YES;
 8014d2c:	4b13      	ldr	r3, [pc, #76]	; (8014d7c <readCanToStructs+0x326c>)
 8014d2e:	2201      	movs	r2, #1
 8014d30:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = SET;
 8014d32:	4b13      	ldr	r3, [pc, #76]	; (8014d80 <readCanToStructs+0x3270>)
 8014d34:	2201      	movs	r2, #1
 8014d36:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014d38:	f004 fe7a 	bl	8019a30 <HAL_GetTick>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	4a0b      	ldr	r2, [pc, #44]	; (8014d6c <readCanToStructs+0x325c>)
 8014d40:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d46:	4a07      	ldr	r2, [pc, #28]	; (8014d64 <readCanToStructs+0x3254>)
 8014d48:	f240 4116 	movw	r1, #1046	; 0x416
 8014d4c:	fb01 f303 	mul.w	r3, r1, r3
 8014d50:	4413      	add	r3, r2
 8014d52:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014d56:	2200      	movs	r2, #0
 8014d58:	701a      	strb	r2, [r3, #0]
				break;
 8014d5a:	e2c1      	b.n	80152e0 <readCanToStructs+0x37d0>
 8014d5c:	20003e00 	.word	0x20003e00
 8014d60:	20007258 	.word	0x20007258
 8014d64:	20006a2c 	.word	0x20006a2c
 8014d68:	0802b7a4 	.word	0x0802b7a4
 8014d6c:	200038ac 	.word	0x200038ac
 8014d70:	20003ea0 	.word	0x20003ea0
 8014d74:	20000bbb 	.word	0x20000bbb
 8014d78:	0802b7c4 	.word	0x0802b7c4
 8014d7c:	200038a9 	.word	0x200038a9
 8014d80:	200038a8 	.word	0x200038a8
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8014d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d88:	4aa3      	ldr	r2, [pc, #652]	; (8015018 <readCanToStructs+0x3508>)
 8014d8a:	f240 4116 	movw	r1, #1046	; 0x416
 8014d8e:	fb01 f303 	mul.w	r3, r1, r3
 8014d92:	4413      	add	r3, r2
 8014d94:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8014d98:	2201      	movs	r2, #1
 8014d9a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8014d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014da0:	499d      	ldr	r1, [pc, #628]	; (8015018 <readCanToStructs+0x3508>)
 8014da2:	f240 4216 	movw	r2, #1046	; 0x416
 8014da6:	fb03 f202 	mul.w	r2, r3, r2
 8014daa:	440a      	add	r2, r1
 8014dac:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8014db0:	7812      	ldrb	r2, [r2, #0]
 8014db2:	3201      	adds	r2, #1
 8014db4:	b2d0      	uxtb	r0, r2
 8014db6:	4a98      	ldr	r2, [pc, #608]	; (8015018 <readCanToStructs+0x3508>)
 8014db8:	f240 4116 	movw	r1, #1046	; 0x416
 8014dbc:	fb01 f303 	mul.w	r3, r1, r3
 8014dc0:	4413      	add	r3, r2
 8014dc2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014dc6:	4602      	mov	r2, r0
 8014dc8:	701a      	strb	r2, [r3, #0]
				break;
 8014dca:	e289      	b.n	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8014dcc:	4b93      	ldr	r3, [pc, #588]	; (801501c <readCanToStructs+0x350c>)
 8014dce:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014dd0:	4b93      	ldr	r3, [pc, #588]	; (8015020 <readCanToStructs+0x3510>)
 8014dd2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014dd6:	885b      	ldrh	r3, [r3, #2]
 8014dd8:	4a91      	ldr	r2, [pc, #580]	; (8015020 <readCanToStructs+0x3510>)
 8014dda:	011b      	lsls	r3, r3, #4
 8014ddc:	4413      	add	r3, r2
 8014dde:	3304      	adds	r3, #4
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014de6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d110      	bne.n	8014e10 <readCanToStructs+0x3300>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014dee:	2284      	movs	r2, #132	; 0x84
 8014df0:	2100      	movs	r1, #0
 8014df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014df4:	f011 fd3e 	bl	8026874 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dfc:	4a86      	ldr	r2, [pc, #536]	; (8015018 <readCanToStructs+0x3508>)
 8014dfe:	f240 4116 	movw	r1, #1046	; 0x416
 8014e02:	fb01 f303 	mul.w	r3, r1, r3
 8014e06:	4413      	add	r3, r2
 8014e08:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8014e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e14:	4a80      	ldr	r2, [pc, #512]	; (8015018 <readCanToStructs+0x3508>)
 8014e16:	f240 4116 	movw	r1, #1046	; 0x416
 8014e1a:	fb01 f303 	mul.w	r3, r1, r3
 8014e1e:	4413      	add	r3, r2
 8014e20:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d011      	beq.n	8014e52 <readCanToStructs+0x3342>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014e2e:	2284      	movs	r2, #132	; 0x84
 8014e30:	2100      	movs	r1, #0
 8014e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e34:	f011 fd1e 	bl	8026874 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e3c:	4a76      	ldr	r2, [pc, #472]	; (8015018 <readCanToStructs+0x3508>)
 8014e3e:	f240 4116 	movw	r1, #1046	; 0x416
 8014e42:	fb01 f303 	mul.w	r3, r1, r3
 8014e46:	4413      	add	r3, r2
 8014e48:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	701a      	strb	r2, [r3, #0]
					break;
 8014e50:	e246      	b.n	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014e52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014e56:	4613      	mov	r3, r2
 8014e58:	00db      	lsls	r3, r3, #3
 8014e5a:	1a9b      	subs	r3, r3, r2
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e60:	4413      	add	r3, r2
 8014e62:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014e64:	2301      	movs	r3, #1
 8014e66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014e6a:	e016      	b.n	8014e9a <readCanToStructs+0x338a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014e6c:	4b6c      	ldr	r3, [pc, #432]	; (8015020 <readCanToStructs+0x3510>)
 8014e6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e72:	885b      	ldrh	r3, [r3, #2]
 8014e74:	461a      	mov	r2, r3
 8014e76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e7a:	4969      	ldr	r1, [pc, #420]	; (8015020 <readCanToStructs+0x3510>)
 8014e7c:	0112      	lsls	r2, r2, #4
 8014e7e:	440a      	add	r2, r1
 8014e80:	4413      	add	r3, r2
 8014e82:	3304      	adds	r3, #4
 8014e84:	781a      	ldrb	r2, [r3, #0]
 8014e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e88:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e8c:	3301      	adds	r3, #1
 8014e8e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e94:	3301      	adds	r3, #1
 8014e96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014e9a:	4b61      	ldr	r3, [pc, #388]	; (8015020 <readCanToStructs+0x3510>)
 8014e9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014ea0:	885b      	ldrh	r3, [r3, #2]
 8014ea2:	4a5f      	ldr	r2, [pc, #380]	; (8015020 <readCanToStructs+0x3510>)
 8014ea4:	011b      	lsls	r3, r3, #4
 8014ea6:	4413      	add	r3, r2
 8014ea8:	330c      	adds	r3, #12
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d3db      	bcc.n	8014e6c <readCanToStructs+0x335c>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8014eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014eb8:	4a57      	ldr	r2, [pc, #348]	; (8015018 <readCanToStructs+0x3508>)
 8014eba:	f240 4116 	movw	r1, #1046	; 0x416
 8014ebe:	fb01 f303 	mul.w	r3, r1, r3
 8014ec2:	4413      	add	r3, r2
 8014ec4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014ec8:	781b      	ldrb	r3, [r3, #0]
 8014eca:	461a      	mov	r2, r3
 8014ecc:	4613      	mov	r3, r2
 8014ece:	00db      	lsls	r3, r3, #3
 8014ed0:	1a9a      	subs	r2, r3, r2
 8014ed2:	4b53      	ldr	r3, [pc, #332]	; (8015020 <readCanToStructs+0x3510>)
 8014ed4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014ed8:	885b      	ldrh	r3, [r3, #2]
 8014eda:	4951      	ldr	r1, [pc, #324]	; (8015020 <readCanToStructs+0x3510>)
 8014edc:	011b      	lsls	r3, r3, #4
 8014ede:	440b      	add	r3, r1
 8014ee0:	330c      	adds	r3, #12
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	3b01      	subs	r3, #1
 8014ee6:	4413      	add	r3, r2
 8014ee8:	2b83      	cmp	r3, #131	; 0x83
 8014eea:	d91e      	bls.n	8014f2a <readCanToStructs+0x341a>
					if(Debug_flag == 1)
 8014eec:	4b4d      	ldr	r3, [pc, #308]	; (8015024 <readCanToStructs+0x3514>)
 8014eee:	781b      	ldrb	r3, [r3, #0]
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	d102      	bne.n	8014efa <readCanToStructs+0x33ea>
						printf("\nRCV RELAY_DATA_EI2\n");
 8014ef4:	484c      	ldr	r0, [pc, #304]	; (8015028 <readCanToStructs+0x3518>)
 8014ef6:	f011 fe41 	bl	8026b7c <puts>
					Medha_CAN_Xchanging_Happening = SET;
 8014efa:	4b4c      	ldr	r3, [pc, #304]	; (801502c <readCanToStructs+0x351c>)
 8014efc:	2201      	movs	r2, #1
 8014efe:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014f00:	f004 fd96 	bl	8019a30 <HAL_GetTick>
 8014f04:	4603      	mov	r3, r0
 8014f06:	4a4a      	ldr	r2, [pc, #296]	; (8015030 <readCanToStructs+0x3520>)
 8014f08:	6013      	str	r3, [r2, #0]
					Received_CAN_Relay_Status = YES;
 8014f0a:	4b4a      	ldr	r3, [pc, #296]	; (8015034 <readCanToStructs+0x3524>)
 8014f0c:	2201      	movs	r2, #1
 8014f0e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f14:	4a40      	ldr	r2, [pc, #256]	; (8015018 <readCanToStructs+0x3508>)
 8014f16:	f240 4116 	movw	r1, #1046	; 0x416
 8014f1a:	fb01 f303 	mul.w	r3, r1, r3
 8014f1e:	4413      	add	r3, r2
 8014f20:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014f24:	2200      	movs	r2, #0
 8014f26:	701a      	strb	r2, [r3, #0]
				break;
 8014f28:	e1da      	b.n	80152e0 <readCanToStructs+0x37d0>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8014f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f2e:	4a3a      	ldr	r2, [pc, #232]	; (8015018 <readCanToStructs+0x3508>)
 8014f30:	f240 4116 	movw	r1, #1046	; 0x416
 8014f34:	fb01 f303 	mul.w	r3, r1, r3
 8014f38:	4413      	add	r3, r2
 8014f3a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8014f3e:	2201      	movs	r2, #1
 8014f40:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8014f42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f46:	4934      	ldr	r1, [pc, #208]	; (8015018 <readCanToStructs+0x3508>)
 8014f48:	f240 4216 	movw	r2, #1046	; 0x416
 8014f4c:	fb03 f202 	mul.w	r2, r3, r2
 8014f50:	440a      	add	r2, r1
 8014f52:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8014f56:	7812      	ldrb	r2, [r2, #0]
 8014f58:	3201      	adds	r2, #1
 8014f5a:	b2d0      	uxtb	r0, r2
 8014f5c:	4a2e      	ldr	r2, [pc, #184]	; (8015018 <readCanToStructs+0x3508>)
 8014f5e:	f240 4116 	movw	r1, #1046	; 0x416
 8014f62:	fb01 f303 	mul.w	r3, r1, r3
 8014f66:	4413      	add	r3, r2
 8014f68:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014f6c:	4602      	mov	r2, r0
 8014f6e:	701a      	strb	r2, [r3, #0]
				break;
 8014f70:	e1b6      	b.n	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8014f72:	4b31      	ldr	r3, [pc, #196]	; (8015038 <readCanToStructs+0x3528>)
 8014f74:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014f76:	4b2a      	ldr	r3, [pc, #168]	; (8015020 <readCanToStructs+0x3510>)
 8014f78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f7c:	885b      	ldrh	r3, [r3, #2]
 8014f7e:	4a28      	ldr	r2, [pc, #160]	; (8015020 <readCanToStructs+0x3510>)
 8014f80:	011b      	lsls	r3, r3, #4
 8014f82:	4413      	add	r3, r2
 8014f84:	3304      	adds	r3, #4
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014f8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d110      	bne.n	8014fb6 <readCanToStructs+0x34a6>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014f94:	2202      	movs	r2, #2
 8014f96:	2100      	movs	r1, #0
 8014f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f9a:	f011 fc6b 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fa2:	4a1d      	ldr	r2, [pc, #116]	; (8015018 <readCanToStructs+0x3508>)
 8014fa4:	f240 4116 	movw	r1, #1046	; 0x416
 8014fa8:	fb01 f303 	mul.w	r3, r1, r3
 8014fac:	4413      	add	r3, r2
 8014fae:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8014fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fba:	4a17      	ldr	r2, [pc, #92]	; (8015018 <readCanToStructs+0x3508>)
 8014fbc:	f240 4116 	movw	r1, #1046	; 0x416
 8014fc0:	fb01 f303 	mul.w	r3, r1, r3
 8014fc4:	4413      	add	r3, r2
 8014fc6:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014fca:	781b      	ldrb	r3, [r3, #0]
 8014fcc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d014      	beq.n	8014ffe <readCanToStructs+0x34ee>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8014fd4:	4819      	ldr	r0, [pc, #100]	; (801503c <readCanToStructs+0x352c>)
 8014fd6:	f011 fdd1 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014fda:	2202      	movs	r2, #2
 8014fdc:	2100      	movs	r1, #0
 8014fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fe0:	f011 fc48 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fe8:	4a0b      	ldr	r2, [pc, #44]	; (8015018 <readCanToStructs+0x3508>)
 8014fea:	f240 4116 	movw	r1, #1046	; 0x416
 8014fee:	fb01 f303 	mul.w	r3, r1, r3
 8014ff2:	4413      	add	r3, r2
 8014ff4:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	701a      	strb	r2, [r3, #0]
					break;
 8014ffc:	e170      	b.n	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014ffe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015002:	4613      	mov	r3, r2
 8015004:	00db      	lsls	r3, r3, #3
 8015006:	1a9b      	subs	r3, r3, r2
 8015008:	461a      	mov	r2, r3
 801500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801500c:	4413      	add	r3, r2
 801500e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015010:	2301      	movs	r3, #1
 8015012:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015016:	e02a      	b.n	801506e <readCanToStructs+0x355e>
 8015018:	20006a2c 	.word	0x20006a2c
 801501c:	20003ea0 	.word	0x20003ea0
 8015020:	20007258 	.word	0x20007258
 8015024:	20000bbb 	.word	0x20000bbb
 8015028:	0802b7e0 	.word	0x0802b7e0
 801502c:	200038a8 	.word	0x200038a8
 8015030:	200038ac 	.word	0x200038ac
 8015034:	200038a9 	.word	0x200038a9
 8015038:	20000bb8 	.word	0x20000bb8
 801503c:	0802b60c 	.word	0x0802b60c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8015040:	4bbc      	ldr	r3, [pc, #752]	; (8015334 <readCanToStructs+0x3824>)
 8015042:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015046:	885b      	ldrh	r3, [r3, #2]
 8015048:	461a      	mov	r2, r3
 801504a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801504e:	49b9      	ldr	r1, [pc, #740]	; (8015334 <readCanToStructs+0x3824>)
 8015050:	0112      	lsls	r2, r2, #4
 8015052:	440a      	add	r2, r1
 8015054:	4413      	add	r3, r2
 8015056:	3304      	adds	r3, #4
 8015058:	781a      	ldrb	r2, [r3, #0]
 801505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801505c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015060:	3301      	adds	r3, #1
 8015062:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015064:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015068:	3301      	adds	r3, #1
 801506a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801506e:	4bb1      	ldr	r3, [pc, #708]	; (8015334 <readCanToStructs+0x3824>)
 8015070:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015074:	885b      	ldrh	r3, [r3, #2]
 8015076:	4aaf      	ldr	r2, [pc, #700]	; (8015334 <readCanToStructs+0x3824>)
 8015078:	011b      	lsls	r3, r3, #4
 801507a:	4413      	add	r3, r2
 801507c:	330c      	adds	r3, #12
 801507e:	781b      	ldrb	r3, [r3, #0]
 8015080:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015084:	429a      	cmp	r2, r3
 8015086:	d3db      	bcc.n	8015040 <readCanToStructs+0x3530>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8015088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801508c:	4aaa      	ldr	r2, [pc, #680]	; (8015338 <readCanToStructs+0x3828>)
 801508e:	f240 4116 	movw	r1, #1046	; 0x416
 8015092:	fb01 f303 	mul.w	r3, r1, r3
 8015096:	4413      	add	r3, r2
 8015098:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801509c:	781b      	ldrb	r3, [r3, #0]
 801509e:	461a      	mov	r2, r3
 80150a0:	4613      	mov	r3, r2
 80150a2:	00db      	lsls	r3, r3, #3
 80150a4:	1a9a      	subs	r2, r3, r2
 80150a6:	4ba3      	ldr	r3, [pc, #652]	; (8015334 <readCanToStructs+0x3824>)
 80150a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80150ac:	885b      	ldrh	r3, [r3, #2]
 80150ae:	49a1      	ldr	r1, [pc, #644]	; (8015334 <readCanToStructs+0x3824>)
 80150b0:	011b      	lsls	r3, r3, #4
 80150b2:	440b      	add	r3, r1
 80150b4:	330c      	adds	r3, #12
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	3b01      	subs	r3, #1
 80150ba:	4413      	add	r3, r2
 80150bc:	2b01      	cmp	r3, #1
 80150be:	d919      	bls.n	80150f4 <readCanToStructs+0x35e4>
					if(Debug_flag == 1)
 80150c0:	4b9e      	ldr	r3, [pc, #632]	; (801533c <readCanToStructs+0x382c>)
 80150c2:	781b      	ldrb	r3, [r3, #0]
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	d105      	bne.n	80150d4 <readCanToStructs+0x35c4>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 80150c8:	4b9d      	ldr	r3, [pc, #628]	; (8015340 <readCanToStructs+0x3830>)
 80150ca:	881b      	ldrh	r3, [r3, #0]
 80150cc:	4619      	mov	r1, r3
 80150ce:	489d      	ldr	r0, [pc, #628]	; (8015344 <readCanToStructs+0x3834>)
 80150d0:	f011 fcb8 	bl	8026a44 <iprintf>
					Is_CAN_Exchange_happening = YES;
 80150d4:	4b9c      	ldr	r3, [pc, #624]	; (8015348 <readCanToStructs+0x3838>)
 80150d6:	2201      	movs	r2, #1
 80150d8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80150da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150de:	4a96      	ldr	r2, [pc, #600]	; (8015338 <readCanToStructs+0x3828>)
 80150e0:	f240 4116 	movw	r1, #1046	; 0x416
 80150e4:	fb01 f303 	mul.w	r3, r1, r3
 80150e8:	4413      	add	r3, r2
 80150ea:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80150ee:	2200      	movs	r2, #0
 80150f0:	701a      	strb	r2, [r3, #0]
				break;
 80150f2:	e0f5      	b.n	80152e0 <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 80150f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150f8:	4a8f      	ldr	r2, [pc, #572]	; (8015338 <readCanToStructs+0x3828>)
 80150fa:	f240 4116 	movw	r1, #1046	; 0x416
 80150fe:	fb01 f303 	mul.w	r3, r1, r3
 8015102:	4413      	add	r3, r2
 8015104:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8015108:	2201      	movs	r2, #1
 801510a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 801510c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015110:	4989      	ldr	r1, [pc, #548]	; (8015338 <readCanToStructs+0x3828>)
 8015112:	f240 4216 	movw	r2, #1046	; 0x416
 8015116:	fb03 f202 	mul.w	r2, r3, r2
 801511a:	440a      	add	r2, r1
 801511c:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8015120:	7812      	ldrb	r2, [r2, #0]
 8015122:	3201      	adds	r2, #1
 8015124:	b2d0      	uxtb	r0, r2
 8015126:	4a84      	ldr	r2, [pc, #528]	; (8015338 <readCanToStructs+0x3828>)
 8015128:	f240 4116 	movw	r1, #1046	; 0x416
 801512c:	fb01 f303 	mul.w	r3, r1, r3
 8015130:	4413      	add	r3, r2
 8015132:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015136:	4602      	mov	r2, r0
 8015138:	701a      	strb	r2, [r3, #0]
				break;
 801513a:	e0d1      	b.n	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 801513c:	4b80      	ldr	r3, [pc, #512]	; (8015340 <readCanToStructs+0x3830>)
 801513e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015140:	4b7c      	ldr	r3, [pc, #496]	; (8015334 <readCanToStructs+0x3824>)
 8015142:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015146:	885b      	ldrh	r3, [r3, #2]
 8015148:	4a7a      	ldr	r2, [pc, #488]	; (8015334 <readCanToStructs+0x3824>)
 801514a:	011b      	lsls	r3, r3, #4
 801514c:	4413      	add	r3, r2
 801514e:	3304      	adds	r3, #4
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8015156:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801515a:	2b00      	cmp	r3, #0
 801515c:	d110      	bne.n	8015180 <readCanToStructs+0x3670>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801515e:	2202      	movs	r2, #2
 8015160:	2100      	movs	r1, #0
 8015162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015164:	f011 fb86 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015168:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801516c:	4a72      	ldr	r2, [pc, #456]	; (8015338 <readCanToStructs+0x3828>)
 801516e:	f240 4116 	movw	r1, #1046	; 0x416
 8015172:	fb01 f303 	mul.w	r3, r1, r3
 8015176:	4413      	add	r3, r2
 8015178:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801517c:	2200      	movs	r2, #0
 801517e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8015180:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015184:	4a6c      	ldr	r2, [pc, #432]	; (8015338 <readCanToStructs+0x3828>)
 8015186:	f240 4116 	movw	r1, #1046	; 0x416
 801518a:	fb01 f303 	mul.w	r3, r1, r3
 801518e:	4413      	add	r3, r2
 8015190:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015194:	781b      	ldrb	r3, [r3, #0]
 8015196:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801519a:	429a      	cmp	r2, r3
 801519c:	d014      	beq.n	80151c8 <readCanToStructs+0x36b8>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 801519e:	486b      	ldr	r0, [pc, #428]	; (801534c <readCanToStructs+0x383c>)
 80151a0:	f011 fcec 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80151a4:	2202      	movs	r2, #2
 80151a6:	2100      	movs	r1, #0
 80151a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151aa:	f011 fb63 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 80151ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80151b2:	4a61      	ldr	r2, [pc, #388]	; (8015338 <readCanToStructs+0x3828>)
 80151b4:	f240 4116 	movw	r1, #1046	; 0x416
 80151b8:	fb01 f303 	mul.w	r3, r1, r3
 80151bc:	4413      	add	r3, r2
 80151be:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80151c2:	2200      	movs	r2, #0
 80151c4:	701a      	strb	r2, [r3, #0]
					break;
 80151c6:	e08b      	b.n	80152e0 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 80151c8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80151cc:	4613      	mov	r3, r2
 80151ce:	00db      	lsls	r3, r3, #3
 80151d0:	1a9b      	subs	r3, r3, r2
 80151d2:	461a      	mov	r2, r3
 80151d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d6:	4413      	add	r3, r2
 80151d8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80151da:	2301      	movs	r3, #1
 80151dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80151e0:	e016      	b.n	8015210 <readCanToStructs+0x3700>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80151e2:	4b54      	ldr	r3, [pc, #336]	; (8015334 <readCanToStructs+0x3824>)
 80151e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80151e8:	885b      	ldrh	r3, [r3, #2]
 80151ea:	461a      	mov	r2, r3
 80151ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80151f0:	4950      	ldr	r1, [pc, #320]	; (8015334 <readCanToStructs+0x3824>)
 80151f2:	0112      	lsls	r2, r2, #4
 80151f4:	440a      	add	r2, r1
 80151f6:	4413      	add	r3, r2
 80151f8:	3304      	adds	r3, #4
 80151fa:	781a      	ldrb	r2, [r3, #0]
 80151fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151fe:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8015200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015202:	3301      	adds	r3, #1
 8015204:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015206:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801520a:	3301      	adds	r3, #1
 801520c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015210:	4b48      	ldr	r3, [pc, #288]	; (8015334 <readCanToStructs+0x3824>)
 8015212:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015216:	885b      	ldrh	r3, [r3, #2]
 8015218:	4a46      	ldr	r2, [pc, #280]	; (8015334 <readCanToStructs+0x3824>)
 801521a:	011b      	lsls	r3, r3, #4
 801521c:	4413      	add	r3, r2
 801521e:	330c      	adds	r3, #12
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015226:	429a      	cmp	r2, r3
 8015228:	d3db      	bcc.n	80151e2 <readCanToStructs+0x36d2>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 801522a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801522e:	4a42      	ldr	r2, [pc, #264]	; (8015338 <readCanToStructs+0x3828>)
 8015230:	f240 4116 	movw	r1, #1046	; 0x416
 8015234:	fb01 f303 	mul.w	r3, r1, r3
 8015238:	4413      	add	r3, r2
 801523a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	461a      	mov	r2, r3
 8015242:	4613      	mov	r3, r2
 8015244:	00db      	lsls	r3, r3, #3
 8015246:	1a9a      	subs	r2, r3, r2
 8015248:	4b3a      	ldr	r3, [pc, #232]	; (8015334 <readCanToStructs+0x3824>)
 801524a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801524e:	885b      	ldrh	r3, [r3, #2]
 8015250:	4938      	ldr	r1, [pc, #224]	; (8015334 <readCanToStructs+0x3824>)
 8015252:	011b      	lsls	r3, r3, #4
 8015254:	440b      	add	r3, r1
 8015256:	330c      	adds	r3, #12
 8015258:	781b      	ldrb	r3, [r3, #0]
 801525a:	3b01      	subs	r3, #1
 801525c:	4413      	add	r3, r2
 801525e:	2b01      	cmp	r3, #1
 8015260:	d919      	bls.n	8015296 <readCanToStructs+0x3786>
					if(Debug_flag == 1)
 8015262:	4b36      	ldr	r3, [pc, #216]	; (801533c <readCanToStructs+0x382c>)
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	2b01      	cmp	r3, #1
 8015268:	d105      	bne.n	8015276 <readCanToStructs+0x3766>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 801526a:	4b35      	ldr	r3, [pc, #212]	; (8015340 <readCanToStructs+0x3830>)
 801526c:	881b      	ldrh	r3, [r3, #0]
 801526e:	4619      	mov	r1, r3
 8015270:	4837      	ldr	r0, [pc, #220]	; (8015350 <readCanToStructs+0x3840>)
 8015272:	f011 fbe7 	bl	8026a44 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8015276:	4b34      	ldr	r3, [pc, #208]	; (8015348 <readCanToStructs+0x3838>)
 8015278:	2201      	movs	r2, #1
 801527a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801527c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015280:	4a2d      	ldr	r2, [pc, #180]	; (8015338 <readCanToStructs+0x3828>)
 8015282:	f240 4116 	movw	r1, #1046	; 0x416
 8015286:	fb01 f303 	mul.w	r3, r1, r3
 801528a:	4413      	add	r3, r2
 801528c:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015290:	2200      	movs	r2, #0
 8015292:	701a      	strb	r2, [r3, #0]
				break;
 8015294:	e024      	b.n	80152e0 <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8015296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801529a:	4a27      	ldr	r2, [pc, #156]	; (8015338 <readCanToStructs+0x3828>)
 801529c:	f240 4116 	movw	r1, #1046	; 0x416
 80152a0:	fb01 f303 	mul.w	r3, r1, r3
 80152a4:	4413      	add	r3, r2
 80152a6:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80152aa:	2201      	movs	r2, #1
 80152ac:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 80152ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152b2:	4921      	ldr	r1, [pc, #132]	; (8015338 <readCanToStructs+0x3828>)
 80152b4:	f240 4216 	movw	r2, #1046	; 0x416
 80152b8:	fb03 f202 	mul.w	r2, r3, r2
 80152bc:	440a      	add	r2, r1
 80152be:	f202 4215 	addw	r2, r2, #1045	; 0x415
 80152c2:	7812      	ldrb	r2, [r2, #0]
 80152c4:	3201      	adds	r2, #1
 80152c6:	b2d0      	uxtb	r0, r2
 80152c8:	4a1b      	ldr	r2, [pc, #108]	; (8015338 <readCanToStructs+0x3828>)
 80152ca:	f240 4116 	movw	r1, #1046	; 0x416
 80152ce:	fb01 f303 	mul.w	r3, r1, r3
 80152d2:	4413      	add	r3, r2
 80152d4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80152d8:	4602      	mov	r2, r0
 80152da:	701a      	strb	r2, [r3, #0]
				break;
 80152dc:	e000      	b.n	80152e0 <readCanToStructs+0x37d0>
				break;
 80152de:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80152e0:	4b14      	ldr	r3, [pc, #80]	; (8015334 <readCanToStructs+0x3824>)
 80152e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80152e6:	885b      	ldrh	r3, [r3, #2]
 80152e8:	011b      	lsls	r3, r3, #4
 80152ea:	4a12      	ldr	r2, [pc, #72]	; (8015334 <readCanToStructs+0x3824>)
 80152ec:	4413      	add	r3, r2
 80152ee:	2210      	movs	r2, #16
 80152f0:	2100      	movs	r1, #0
 80152f2:	4618      	mov	r0, r3
 80152f4:	f011 fabe 	bl	8026874 <memset>
			canRead.Out++;
 80152f8:	4b0e      	ldr	r3, [pc, #56]	; (8015334 <readCanToStructs+0x3824>)
 80152fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80152fe:	885b      	ldrh	r3, [r3, #2]
 8015300:	3301      	adds	r3, #1
 8015302:	b29a      	uxth	r2, r3
 8015304:	4b0b      	ldr	r3, [pc, #44]	; (8015334 <readCanToStructs+0x3824>)
 8015306:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801530a:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801530c:	4b09      	ldr	r3, [pc, #36]	; (8015334 <readCanToStructs+0x3824>)
 801530e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015312:	885b      	ldrh	r3, [r3, #2]
 8015314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015318:	d104      	bne.n	8015324 <readCanToStructs+0x3814>
				canRead.Out = 0;
 801531a:	4b06      	ldr	r3, [pc, #24]	; (8015334 <readCanToStructs+0x3824>)
 801531c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015320:	2200      	movs	r2, #0
 8015322:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8015324:	f7fc fb9e 	bl	8011a64 <canDataReady>
 8015328:	4603      	mov	r3, r0
 801532a:	2b00      	cmp	r3, #0
 801532c:	f47e af9b 	bne.w	8014266 <readCanToStructs+0x2756>
		}
		/* __________ MEDHA _________ */
	}
	break;
 8015330:	f000 bcdc 	b.w	8015cec <readCanToStructs+0x41dc>
 8015334:	20007258 	.word	0x20007258
 8015338:	20006a2c 	.word	0x20006a2c
 801533c:	20000bbb 	.word	0x20000bbb
 8015340:	20000bb8 	.word	0x20000bb8
 8015344:	0802b634 	.word	0x0802b634
 8015348:	2000030b 	.word	0x2000030b
 801534c:	0802b648 	.word	0x0802b648
 8015350:	0802b670 	.word	0x0802b670
	case KYOSAN:
	{
		/* __________ KYOSAN _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8015354:	4bb3      	ldr	r3, [pc, #716]	; (8015624 <readCanToStructs+0x3b14>)
 8015356:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801535a:	885b      	ldrh	r3, [r3, #2]
 801535c:	4ab1      	ldr	r2, [pc, #708]	; (8015624 <readCanToStructs+0x3b14>)
 801535e:	011b      	lsls	r3, r3, #4
 8015360:	4413      	add	r3, r2
 8015362:	330f      	adds	r3, #15
 8015364:	781b      	ldrb	r3, [r3, #0]
 8015366:	3b01      	subs	r3, #1
 8015368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 801536c:	4bad      	ldr	r3, [pc, #692]	; (8015624 <readCanToStructs+0x3b14>)
 801536e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015372:	885b      	ldrh	r3, [r3, #2]
 8015374:	4aab      	ldr	r2, [pc, #684]	; (8015624 <readCanToStructs+0x3b14>)
 8015376:	011b      	lsls	r3, r3, #4
 8015378:	4413      	add	r3, r2
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015380:	2b05      	cmp	r3, #5
 8015382:	f200 8487 	bhi.w	8015c94 <readCanToStructs+0x4184>
 8015386:	a201      	add	r2, pc, #4	; (adr r2, 801538c <readCanToStructs+0x387c>)
 8015388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801538c:	0801577d 	.word	0x0801577d
 8015390:	08015c95 	.word	0x08015c95
 8015394:	080153a5 	.word	0x080153a5
 8015398:	0801557d 	.word	0x0801557d
 801539c:	0801592d 	.word	0x0801592d
 80153a0:	08015acf 	.word	0x08015acf
			{

			case EIPC1_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 80153a4:	4ba0      	ldr	r3, [pc, #640]	; (8015628 <readCanToStructs+0x3b18>)
 80153a6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80153a8:	4b9e      	ldr	r3, [pc, #632]	; (8015624 <readCanToStructs+0x3b14>)
 80153aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80153ae:	885b      	ldrh	r3, [r3, #2]
 80153b0:	4a9c      	ldr	r2, [pc, #624]	; (8015624 <readCanToStructs+0x3b14>)
 80153b2:	011b      	lsls	r3, r3, #4
 80153b4:	4413      	add	r3, r2
 80153b6:	3304      	adds	r3, #4
 80153b8:	781b      	ldrb	r3, [r3, #0]
 80153ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80153be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d110      	bne.n	80153e8 <readCanToStructs+0x38d8>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80153c6:	2240      	movs	r2, #64	; 0x40
 80153c8:	2100      	movs	r1, #0
 80153ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153cc:	f011 fa52 	bl	8026874 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80153d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153d4:	4a95      	ldr	r2, [pc, #596]	; (801562c <readCanToStructs+0x3b1c>)
 80153d6:	f240 4116 	movw	r1, #1046	; 0x416
 80153da:	fb01 f303 	mul.w	r3, r1, r3
 80153de:	4413      	add	r3, r2
 80153e0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80153e4:	2200      	movs	r2, #0
 80153e6:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80153e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153ec:	4a8f      	ldr	r2, [pc, #572]	; (801562c <readCanToStructs+0x3b1c>)
 80153ee:	f240 4116 	movw	r1, #1046	; 0x416
 80153f2:	fb01 f303 	mul.w	r3, r1, r3
 80153f6:	4413      	add	r3, r2
 80153f8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80153fc:	781b      	ldrb	r3, [r3, #0]
 80153fe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015402:	429a      	cmp	r2, r3
 8015404:	d015      	beq.n	8015432 <readCanToStructs+0x3922>
				{
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8015406:	488a      	ldr	r0, [pc, #552]	; (8015630 <readCanToStructs+0x3b20>)
 8015408:	f011 fbb8 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 801540c:	2240      	movs	r2, #64	; 0x40
 801540e:	2100      	movs	r1, #0
 8015410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015412:	f011 fa2f 	bl	8026874 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8015416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801541a:	4a84      	ldr	r2, [pc, #528]	; (801562c <readCanToStructs+0x3b1c>)
 801541c:	f240 4116 	movw	r1, #1046	; 0x416
 8015420:	fb01 f303 	mul.w	r3, r1, r3
 8015424:	4413      	add	r3, r2
 8015426:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801542a:	2200      	movs	r2, #0
 801542c:	701a      	strb	r2, [r3, #0]
					break;
 801542e:	f000 bc32 	b.w	8015c96 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8015432:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015436:	4613      	mov	r3, r2
 8015438:	00db      	lsls	r3, r3, #3
 801543a:	1a9b      	subs	r3, r3, r2
 801543c:	461a      	mov	r2, r3
 801543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015440:	4413      	add	r3, r2
 8015442:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015444:	2301      	movs	r3, #1
 8015446:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801544a:	e016      	b.n	801547a <readCanToStructs+0x396a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801544c:	4b75      	ldr	r3, [pc, #468]	; (8015624 <readCanToStructs+0x3b14>)
 801544e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015452:	885b      	ldrh	r3, [r3, #2]
 8015454:	461a      	mov	r2, r3
 8015456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801545a:	4972      	ldr	r1, [pc, #456]	; (8015624 <readCanToStructs+0x3b14>)
 801545c:	0112      	lsls	r2, r2, #4
 801545e:	440a      	add	r2, r1
 8015460:	4413      	add	r3, r2
 8015462:	3304      	adds	r3, #4
 8015464:	781a      	ldrb	r2, [r3, #0]
 8015466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015468:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801546c:	3301      	adds	r3, #1
 801546e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015470:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015474:	3301      	adds	r3, #1
 8015476:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801547a:	4b6a      	ldr	r3, [pc, #424]	; (8015624 <readCanToStructs+0x3b14>)
 801547c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015480:	885b      	ldrh	r3, [r3, #2]
 8015482:	4a68      	ldr	r2, [pc, #416]	; (8015624 <readCanToStructs+0x3b14>)
 8015484:	011b      	lsls	r3, r3, #4
 8015486:	4413      	add	r3, r2
 8015488:	330c      	adds	r3, #12
 801548a:	781b      	ldrb	r3, [r3, #0]
 801548c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015490:	429a      	cmp	r2, r3
 8015492:	d3db      	bcc.n	801544c <readCanToStructs+0x393c>
				}
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8015494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015498:	4a64      	ldr	r2, [pc, #400]	; (801562c <readCanToStructs+0x3b1c>)
 801549a:	f240 4116 	movw	r1, #1046	; 0x416
 801549e:	fb01 f303 	mul.w	r3, r1, r3
 80154a2:	4413      	add	r3, r2
 80154a4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80154a8:	781b      	ldrb	r3, [r3, #0]
 80154aa:	461a      	mov	r2, r3
 80154ac:	4613      	mov	r3, r2
 80154ae:	00db      	lsls	r3, r3, #3
 80154b0:	1a9a      	subs	r2, r3, r2
 80154b2:	4b5c      	ldr	r3, [pc, #368]	; (8015624 <readCanToStructs+0x3b14>)
 80154b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80154b8:	885b      	ldrh	r3, [r3, #2]
 80154ba:	495a      	ldr	r1, [pc, #360]	; (8015624 <readCanToStructs+0x3b14>)
 80154bc:	011b      	lsls	r3, r3, #4
 80154be:	440b      	add	r3, r1
 80154c0:	330c      	adds	r3, #12
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	3b01      	subs	r3, #1
 80154c6:	4413      	add	r3, r2
 80154c8:	2b3f      	cmp	r3, #63	; 0x3f
 80154ca:	d933      	bls.n	8015534 <readCanToStructs+0x3a24>
				{
					if(Debug_flag == 1)
 80154cc:	4b59      	ldr	r3, [pc, #356]	; (8015634 <readCanToStructs+0x3b24>)
 80154ce:	781b      	ldrb	r3, [r3, #0]
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	d105      	bne.n	80154e0 <readCanToStructs+0x39d0>
					{
						printf("Rcv Relays1-O:%u\n",Kyosan_CANRelays.Index);
 80154d4:	4b54      	ldr	r3, [pc, #336]	; (8015628 <readCanToStructs+0x3b18>)
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	4619      	mov	r1, r3
 80154da:	4857      	ldr	r0, [pc, #348]	; (8015638 <readCanToStructs+0x3b28>)
 80154dc:	f011 fab2 	bl	8026a44 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 80154e0:	4a56      	ldr	r2, [pc, #344]	; (801563c <readCanToStructs+0x3b2c>)
 80154e2:	4b51      	ldr	r3, [pc, #324]	; (8015628 <readCanToStructs+0x3b18>)
 80154e4:	4610      	mov	r0, r2
 80154e6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80154ea:	4602      	mov	r2, r0
 80154ec:	4619      	mov	r1, r3
 80154ee:	f8d1 c000 	ldr.w	ip, [r1]
 80154f2:	684e      	ldr	r6, [r1, #4]
 80154f4:	688d      	ldr	r5, [r1, #8]
 80154f6:	68c9      	ldr	r1, [r1, #12]
 80154f8:	f8c2 c000 	str.w	ip, [r2]
 80154fc:	6056      	str	r6, [r2, #4]
 80154fe:	6095      	str	r5, [r2, #8]
 8015500:	60d1      	str	r1, [r2, #12]
 8015502:	3310      	adds	r3, #16
 8015504:	3010      	adds	r0, #16
 8015506:	42a3      	cmp	r3, r4
 8015508:	d1ef      	bne.n	80154ea <readCanToStructs+0x39da>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 801550a:	f004 fa91 	bl	8019a30 <HAL_GetTick>
 801550e:	4603      	mov	r3, r0
 8015510:	4a4b      	ldr	r2, [pc, #300]	; (8015640 <readCanToStructs+0x3b30>)
 8015512:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 8015514:	4b4b      	ldr	r3, [pc, #300]	; (8015644 <readCanToStructs+0x3b34>)
 8015516:	2201      	movs	r2, #1
 8015518:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801551a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801551e:	4a43      	ldr	r2, [pc, #268]	; (801562c <readCanToStructs+0x3b1c>)
 8015520:	f240 4116 	movw	r1, #1046	; 0x416
 8015524:	fb01 f303 	mul.w	r3, r1, r3
 8015528:	4413      	add	r3, r2
 801552a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801552e:	2200      	movs	r2, #0
 8015530:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 8015532:	e3b0      	b.n	8015c96 <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8015534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015538:	4a3c      	ldr	r2, [pc, #240]	; (801562c <readCanToStructs+0x3b1c>)
 801553a:	f240 4116 	movw	r1, #1046	; 0x416
 801553e:	fb01 f303 	mul.w	r3, r1, r3
 8015542:	4413      	add	r3, r2
 8015544:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8015548:	2201      	movs	r2, #1
 801554a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 801554c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015550:	4936      	ldr	r1, [pc, #216]	; (801562c <readCanToStructs+0x3b1c>)
 8015552:	f240 4216 	movw	r2, #1046	; 0x416
 8015556:	fb03 f202 	mul.w	r2, r3, r2
 801555a:	440a      	add	r2, r1
 801555c:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8015560:	7812      	ldrb	r2, [r2, #0]
 8015562:	3201      	adds	r2, #1
 8015564:	b2d0      	uxtb	r0, r2
 8015566:	4a31      	ldr	r2, [pc, #196]	; (801562c <readCanToStructs+0x3b1c>)
 8015568:	f240 4116 	movw	r1, #1046	; 0x416
 801556c:	fb01 f303 	mul.w	r3, r1, r3
 8015570:	4413      	add	r3, r2
 8015572:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8015576:	4602      	mov	r2, r0
 8015578:	701a      	strb	r2, [r3, #0]
				break;
 801557a:	e38c      	b.n	8015c96 <readCanToStructs+0x4186>

			case EIPC2_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 801557c:	4b2a      	ldr	r3, [pc, #168]	; (8015628 <readCanToStructs+0x3b18>)
 801557e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015580:	4b28      	ldr	r3, [pc, #160]	; (8015624 <readCanToStructs+0x3b14>)
 8015582:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015586:	885b      	ldrh	r3, [r3, #2]
 8015588:	4a26      	ldr	r2, [pc, #152]	; (8015624 <readCanToStructs+0x3b14>)
 801558a:	011b      	lsls	r3, r3, #4
 801558c:	4413      	add	r3, r2
 801558e:	3304      	adds	r3, #4
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8015596:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801559a:	2b00      	cmp	r3, #0
 801559c:	d110      	bne.n	80155c0 <readCanToStructs+0x3ab0>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 801559e:	2240      	movs	r2, #64	; 0x40
 80155a0:	2100      	movs	r1, #0
 80155a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155a4:	f011 f966 	bl	8026874 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80155a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80155ac:	4a1f      	ldr	r2, [pc, #124]	; (801562c <readCanToStructs+0x3b1c>)
 80155ae:	f240 4116 	movw	r1, #1046	; 0x416
 80155b2:	fb01 f303 	mul.w	r3, r1, r3
 80155b6:	4413      	add	r3, r2
 80155b8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80155bc:	2200      	movs	r2, #0
 80155be:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80155c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80155c4:	4a19      	ldr	r2, [pc, #100]	; (801562c <readCanToStructs+0x3b1c>)
 80155c6:	f240 4116 	movw	r1, #1046	; 0x416
 80155ca:	fb01 f303 	mul.w	r3, r1, r3
 80155ce:	4413      	add	r3, r2
 80155d0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80155d4:	781b      	ldrb	r3, [r3, #0]
 80155d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80155da:	429a      	cmp	r2, r3
 80155dc:	d014      	beq.n	8015608 <readCanToStructs+0x3af8>
				{
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 80155de:	481a      	ldr	r0, [pc, #104]	; (8015648 <readCanToStructs+0x3b38>)
 80155e0:	f011 facc 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80155e4:	2240      	movs	r2, #64	; 0x40
 80155e6:	2100      	movs	r1, #0
 80155e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155ea:	f011 f943 	bl	8026874 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80155ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80155f2:	4a0e      	ldr	r2, [pc, #56]	; (801562c <readCanToStructs+0x3b1c>)
 80155f4:	f240 4116 	movw	r1, #1046	; 0x416
 80155f8:	fb01 f303 	mul.w	r3, r1, r3
 80155fc:	4413      	add	r3, r2
 80155fe:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8015602:	2200      	movs	r2, #0
 8015604:	701a      	strb	r2, [r3, #0]
					break;
 8015606:	e346      	b.n	8015c96 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8015608:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801560c:	4613      	mov	r3, r2
 801560e:	00db      	lsls	r3, r3, #3
 8015610:	1a9b      	subs	r3, r3, r2
 8015612:	461a      	mov	r2, r3
 8015614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015616:	4413      	add	r3, r2
 8015618:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801561a:	2301      	movs	r3, #1
 801561c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015620:	e02b      	b.n	801567a <readCanToStructs+0x3b6a>
 8015622:	bf00      	nop
 8015624:	20007258 	.word	0x20007258
 8015628:	2000b518 	.word	0x2000b518
 801562c:	20006a2c 	.word	0x20006a2c
 8015630:	0802b5a8 	.word	0x0802b5a8
 8015634:	20000bbb 	.word	0x20000bbb
 8015638:	0802b7f4 	.word	0x0802b7f4
 801563c:	2000b4d8 	.word	0x2000b4d8
 8015640:	2000b5dc 	.word	0x2000b5dc
 8015644:	2000030b 	.word	0x2000030b
 8015648:	0802b5d8 	.word	0x0802b5d8
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801564c:	4bad      	ldr	r3, [pc, #692]	; (8015904 <readCanToStructs+0x3df4>)
 801564e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015652:	885b      	ldrh	r3, [r3, #2]
 8015654:	461a      	mov	r2, r3
 8015656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801565a:	49aa      	ldr	r1, [pc, #680]	; (8015904 <readCanToStructs+0x3df4>)
 801565c:	0112      	lsls	r2, r2, #4
 801565e:	440a      	add	r2, r1
 8015660:	4413      	add	r3, r2
 8015662:	3304      	adds	r3, #4
 8015664:	781a      	ldrb	r2, [r3, #0]
 8015666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015668:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801566c:	3301      	adds	r3, #1
 801566e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015674:	3301      	adds	r3, #1
 8015676:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801567a:	4ba2      	ldr	r3, [pc, #648]	; (8015904 <readCanToStructs+0x3df4>)
 801567c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015680:	885b      	ldrh	r3, [r3, #2]
 8015682:	4aa0      	ldr	r2, [pc, #640]	; (8015904 <readCanToStructs+0x3df4>)
 8015684:	011b      	lsls	r3, r3, #4
 8015686:	4413      	add	r3, r2
 8015688:	330c      	adds	r3, #12
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015690:	429a      	cmp	r2, r3
 8015692:	d3db      	bcc.n	801564c <readCanToStructs+0x3b3c>
				}
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8015694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015698:	4a9b      	ldr	r2, [pc, #620]	; (8015908 <readCanToStructs+0x3df8>)
 801569a:	f240 4116 	movw	r1, #1046	; 0x416
 801569e:	fb01 f303 	mul.w	r3, r1, r3
 80156a2:	4413      	add	r3, r2
 80156a4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80156a8:	781b      	ldrb	r3, [r3, #0]
 80156aa:	461a      	mov	r2, r3
 80156ac:	4613      	mov	r3, r2
 80156ae:	00db      	lsls	r3, r3, #3
 80156b0:	1a9a      	subs	r2, r3, r2
 80156b2:	4b94      	ldr	r3, [pc, #592]	; (8015904 <readCanToStructs+0x3df4>)
 80156b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80156b8:	885b      	ldrh	r3, [r3, #2]
 80156ba:	4992      	ldr	r1, [pc, #584]	; (8015904 <readCanToStructs+0x3df4>)
 80156bc:	011b      	lsls	r3, r3, #4
 80156be:	440b      	add	r3, r1
 80156c0:	330c      	adds	r3, #12
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	3b01      	subs	r3, #1
 80156c6:	4413      	add	r3, r2
 80156c8:	2b3f      	cmp	r3, #63	; 0x3f
 80156ca:	d933      	bls.n	8015734 <readCanToStructs+0x3c24>
				{
					if(Debug_flag == 1)
 80156cc:	4b8f      	ldr	r3, [pc, #572]	; (801590c <readCanToStructs+0x3dfc>)
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d105      	bne.n	80156e0 <readCanToStructs+0x3bd0>
					{
						printf("Rcv Relays2-O:%u\n",Kyosan_CANRelays.Index);
 80156d4:	4b8e      	ldr	r3, [pc, #568]	; (8015910 <readCanToStructs+0x3e00>)
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	4619      	mov	r1, r3
 80156da:	488e      	ldr	r0, [pc, #568]	; (8015914 <readCanToStructs+0x3e04>)
 80156dc:	f011 f9b2 	bl	8026a44 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 80156e0:	4a8d      	ldr	r2, [pc, #564]	; (8015918 <readCanToStructs+0x3e08>)
 80156e2:	4b8b      	ldr	r3, [pc, #556]	; (8015910 <readCanToStructs+0x3e00>)
 80156e4:	4610      	mov	r0, r2
 80156e6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80156ea:	4602      	mov	r2, r0
 80156ec:	4619      	mov	r1, r3
 80156ee:	f8d1 c000 	ldr.w	ip, [r1]
 80156f2:	684e      	ldr	r6, [r1, #4]
 80156f4:	688d      	ldr	r5, [r1, #8]
 80156f6:	68c9      	ldr	r1, [r1, #12]
 80156f8:	f8c2 c000 	str.w	ip, [r2]
 80156fc:	6056      	str	r6, [r2, #4]
 80156fe:	6095      	str	r5, [r2, #8]
 8015700:	60d1      	str	r1, [r2, #12]
 8015702:	3310      	adds	r3, #16
 8015704:	3010      	adds	r0, #16
 8015706:	42a3      	cmp	r3, r4
 8015708:	d1ef      	bne.n	80156ea <readCanToStructs+0x3bda>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 801570a:	f004 f991 	bl	8019a30 <HAL_GetTick>
 801570e:	4603      	mov	r3, r0
 8015710:	4a82      	ldr	r2, [pc, #520]	; (801591c <readCanToStructs+0x3e0c>)
 8015712:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 8015714:	4b82      	ldr	r3, [pc, #520]	; (8015920 <readCanToStructs+0x3e10>)
 8015716:	2201      	movs	r2, #1
 8015718:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801571a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801571e:	4a7a      	ldr	r2, [pc, #488]	; (8015908 <readCanToStructs+0x3df8>)
 8015720:	f240 4116 	movw	r1, #1046	; 0x416
 8015724:	fb01 f303 	mul.w	r3, r1, r3
 8015728:	4413      	add	r3, r2
 801572a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801572e:	2200      	movs	r2, #0
 8015730:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 8015732:	e2b0      	b.n	8015c96 <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8015734:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015738:	4a73      	ldr	r2, [pc, #460]	; (8015908 <readCanToStructs+0x3df8>)
 801573a:	f240 4116 	movw	r1, #1046	; 0x416
 801573e:	fb01 f303 	mul.w	r3, r1, r3
 8015742:	4413      	add	r3, r2
 8015744:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8015748:	2201      	movs	r2, #1
 801574a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 801574c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015750:	496d      	ldr	r1, [pc, #436]	; (8015908 <readCanToStructs+0x3df8>)
 8015752:	f240 4216 	movw	r2, #1046	; 0x416
 8015756:	fb03 f202 	mul.w	r2, r3, r2
 801575a:	440a      	add	r2, r1
 801575c:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8015760:	7812      	ldrb	r2, [r2, #0]
 8015762:	3201      	adds	r2, #1
 8015764:	b2d0      	uxtb	r0, r2
 8015766:	4a68      	ldr	r2, [pc, #416]	; (8015908 <readCanToStructs+0x3df8>)
 8015768:	f240 4116 	movw	r1, #1046	; 0x416
 801576c:	fb01 f303 	mul.w	r3, r1, r3
 8015770:	4413      	add	r3, r2
 8015772:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8015776:	4602      	mov	r2, r0
 8015778:	701a      	strb	r2, [r3, #0]
				break;
 801577a:	e28c      	b.n	8015c96 <readCanToStructs+0x4186>

			case CAN_FAULT_INJECTION:

				uc_pp_charPtr = (uint8_t *)&KyosanFaultInjection_st;
 801577c:	4b69      	ldr	r3, [pc, #420]	; (8015924 <readCanToStructs+0x3e14>)
 801577e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015780:	4b60      	ldr	r3, [pc, #384]	; (8015904 <readCanToStructs+0x3df4>)
 8015782:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015786:	885b      	ldrh	r3, [r3, #2]
 8015788:	4a5e      	ldr	r2, [pc, #376]	; (8015904 <readCanToStructs+0x3df4>)
 801578a:	011b      	lsls	r3, r3, #4
 801578c:	4413      	add	r3, r2
 801578e:	3304      	adds	r3, #4
 8015790:	781b      	ldrb	r3, [r3, #0]
 8015792:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8015796:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801579a:	2b00      	cmp	r3, #0
 801579c:	d110      	bne.n	80157c0 <readCanToStructs+0x3cb0>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 801579e:	2208      	movs	r2, #8
 80157a0:	2100      	movs	r1, #0
 80157a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157a4:	f011 f866 	bl	8026874 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80157a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157ac:	4a56      	ldr	r2, [pc, #344]	; (8015908 <readCanToStructs+0x3df8>)
 80157ae:	f240 4116 	movw	r1, #1046	; 0x416
 80157b2:	fb01 f303 	mul.w	r3, r1, r3
 80157b6:	4413      	add	r3, r2
 80157b8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80157bc:	2200      	movs	r2, #0
 80157be:	701a      	strb	r2, [r3, #0]
				}
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80157c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157c4:	4a50      	ldr	r2, [pc, #320]	; (8015908 <readCanToStructs+0x3df8>)
 80157c6:	f240 4116 	movw	r1, #1046	; 0x416
 80157ca:	fb01 f303 	mul.w	r3, r1, r3
 80157ce:	4413      	add	r3, r2
 80157d0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80157da:	429a      	cmp	r2, r3
 80157dc:	d011      	beq.n	8015802 <readCanToStructs+0x3cf2>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 80157de:	2208      	movs	r2, #8
 80157e0:	2100      	movs	r1, #0
 80157e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157e4:	f011 f846 	bl	8026874 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80157e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80157ec:	4a46      	ldr	r2, [pc, #280]	; (8015908 <readCanToStructs+0x3df8>)
 80157ee:	f240 4116 	movw	r1, #1046	; 0x416
 80157f2:	fb01 f303 	mul.w	r3, r1, r3
 80157f6:	4413      	add	r3, r2
 80157f8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80157fc:	2200      	movs	r2, #0
 80157fe:	701a      	strb	r2, [r3, #0]
					break;
 8015800:	e249      	b.n	8015c96 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8015802:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015806:	4613      	mov	r3, r2
 8015808:	00db      	lsls	r3, r3, #3
 801580a:	1a9b      	subs	r3, r3, r2
 801580c:	461a      	mov	r2, r3
 801580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015810:	4413      	add	r3, r2
 8015812:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015814:	2301      	movs	r3, #1
 8015816:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801581a:	e016      	b.n	801584a <readCanToStructs+0x3d3a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801581c:	4b39      	ldr	r3, [pc, #228]	; (8015904 <readCanToStructs+0x3df4>)
 801581e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015822:	885b      	ldrh	r3, [r3, #2]
 8015824:	461a      	mov	r2, r3
 8015826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801582a:	4936      	ldr	r1, [pc, #216]	; (8015904 <readCanToStructs+0x3df4>)
 801582c:	0112      	lsls	r2, r2, #4
 801582e:	440a      	add	r2, r1
 8015830:	4413      	add	r3, r2
 8015832:	3304      	adds	r3, #4
 8015834:	781a      	ldrb	r2, [r3, #0]
 8015836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015838:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801583c:	3301      	adds	r3, #1
 801583e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015840:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015844:	3301      	adds	r3, #1
 8015846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801584a:	4b2e      	ldr	r3, [pc, #184]	; (8015904 <readCanToStructs+0x3df4>)
 801584c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015850:	885b      	ldrh	r3, [r3, #2]
 8015852:	4a2c      	ldr	r2, [pc, #176]	; (8015904 <readCanToStructs+0x3df4>)
 8015854:	011b      	lsls	r3, r3, #4
 8015856:	4413      	add	r3, r2
 8015858:	330c      	adds	r3, #12
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015860:	429a      	cmp	r2, r3
 8015862:	d3db      	bcc.n	801581c <readCanToStructs+0x3d0c>
				}
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_FAULT_INJECTION_t))
 8015864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015868:	4a27      	ldr	r2, [pc, #156]	; (8015908 <readCanToStructs+0x3df8>)
 801586a:	f240 4116 	movw	r1, #1046	; 0x416
 801586e:	fb01 f303 	mul.w	r3, r1, r3
 8015872:	4413      	add	r3, r2
 8015874:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8015878:	781b      	ldrb	r3, [r3, #0]
 801587a:	461a      	mov	r2, r3
 801587c:	4613      	mov	r3, r2
 801587e:	00db      	lsls	r3, r3, #3
 8015880:	1a9a      	subs	r2, r3, r2
 8015882:	4b20      	ldr	r3, [pc, #128]	; (8015904 <readCanToStructs+0x3df4>)
 8015884:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015888:	885b      	ldrh	r3, [r3, #2]
 801588a:	491e      	ldr	r1, [pc, #120]	; (8015904 <readCanToStructs+0x3df4>)
 801588c:	011b      	lsls	r3, r3, #4
 801588e:	440b      	add	r3, r1
 8015890:	330c      	adds	r3, #12
 8015892:	781b      	ldrb	r3, [r3, #0]
 8015894:	3b01      	subs	r3, #1
 8015896:	4413      	add	r3, r2
 8015898:	2b07      	cmp	r3, #7
 801589a:	d90f      	bls.n	80158bc <readCanToStructs+0x3dac>
				{
					printf("Received CAN_FAULT_INJECTION\n");
 801589c:	4822      	ldr	r0, [pc, #136]	; (8015928 <readCanToStructs+0x3e18>)
 801589e:	f011 f96d 	bl	8026b7c <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80158a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80158a6:	4a18      	ldr	r2, [pc, #96]	; (8015908 <readCanToStructs+0x3df8>)
 80158a8:	f240 4116 	movw	r1, #1046	; 0x416
 80158ac:	fb01 f303 	mul.w	r3, r1, r3
 80158b0:	4413      	add	r3, r2
 80158b2:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80158b6:	2200      	movs	r2, #0
 80158b8:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
				}
				break;
 80158ba:	e1ec      	b.n	8015c96 <readCanToStructs+0x4186>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80158bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80158c0:	4a11      	ldr	r2, [pc, #68]	; (8015908 <readCanToStructs+0x3df8>)
 80158c2:	f240 4116 	movw	r1, #1046	; 0x416
 80158c6:	fb01 f303 	mul.w	r3, r1, r3
 80158ca:	4413      	add	r3, r2
 80158cc:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80158d0:	2201      	movs	r2, #1
 80158d2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80158d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80158d8:	490b      	ldr	r1, [pc, #44]	; (8015908 <readCanToStructs+0x3df8>)
 80158da:	f240 4216 	movw	r2, #1046	; 0x416
 80158de:	fb03 f202 	mul.w	r2, r3, r2
 80158e2:	440a      	add	r2, r1
 80158e4:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80158e8:	7812      	ldrb	r2, [r2, #0]
 80158ea:	3201      	adds	r2, #1
 80158ec:	b2d0      	uxtb	r0, r2
 80158ee:	4a06      	ldr	r2, [pc, #24]	; (8015908 <readCanToStructs+0x3df8>)
 80158f0:	f240 4116 	movw	r1, #1046	; 0x416
 80158f4:	fb01 f303 	mul.w	r3, r1, r3
 80158f8:	4413      	add	r3, r2
 80158fa:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80158fe:	4602      	mov	r2, r0
 8015900:	701a      	strb	r2, [r3, #0]
				break;
 8015902:	e1c8      	b.n	8015c96 <readCanToStructs+0x4186>
 8015904:	20007258 	.word	0x20007258
 8015908:	20006a2c 	.word	0x20006a2c
 801590c:	20000bbb 	.word	0x20000bbb
 8015910:	2000b518 	.word	0x2000b518
 8015914:	0802b808 	.word	0x0802b808
 8015918:	2000b4d8 	.word	0x2000b4d8
 801591c:	2000b5dc 	.word	0x2000b5dc
 8015920:	2000030b 	.word	0x2000030b
 8015924:	2000b47c 	.word	0x2000b47c
 8015928:	0802b7a4 	.word	0x0802b7a4

			case DAT_CRC_EXCHANGE_1:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 801592c:	4bbe      	ldr	r3, [pc, #760]	; (8015c28 <readCanToStructs+0x4118>)
 801592e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015930:	4bbe      	ldr	r3, [pc, #760]	; (8015c2c <readCanToStructs+0x411c>)
 8015932:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015936:	885b      	ldrh	r3, [r3, #2]
 8015938:	4abc      	ldr	r2, [pc, #752]	; (8015c2c <readCanToStructs+0x411c>)
 801593a:	011b      	lsls	r3, r3, #4
 801593c:	4413      	add	r3, r2
 801593e:	3304      	adds	r3, #4
 8015940:	781b      	ldrb	r3, [r3, #0]
 8015942:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8015946:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801594a:	2b00      	cmp	r3, #0
 801594c:	d110      	bne.n	8015970 <readCanToStructs+0x3e60>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801594e:	2202      	movs	r2, #2
 8015950:	2100      	movs	r1, #0
 8015952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015954:	f010 ff8e 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8015958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801595c:	4ab4      	ldr	r2, [pc, #720]	; (8015c30 <readCanToStructs+0x4120>)
 801595e:	f240 4116 	movw	r1, #1046	; 0x416
 8015962:	fb01 f303 	mul.w	r3, r1, r3
 8015966:	4413      	add	r3, r2
 8015968:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801596c:	2200      	movs	r2, #0
 801596e:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8015970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015974:	4aae      	ldr	r2, [pc, #696]	; (8015c30 <readCanToStructs+0x4120>)
 8015976:	f240 4116 	movw	r1, #1046	; 0x416
 801597a:	fb01 f303 	mul.w	r3, r1, r3
 801597e:	4413      	add	r3, r2
 8015980:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015984:	781b      	ldrb	r3, [r3, #0]
 8015986:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801598a:	429a      	cmp	r2, r3
 801598c:	d014      	beq.n	80159b8 <readCanToStructs+0x3ea8>
				{
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 801598e:	48a9      	ldr	r0, [pc, #676]	; (8015c34 <readCanToStructs+0x4124>)
 8015990:	f011 f8f4 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015994:	2202      	movs	r2, #2
 8015996:	2100      	movs	r1, #0
 8015998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801599a:	f010 ff6b 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 801599e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80159a2:	4aa3      	ldr	r2, [pc, #652]	; (8015c30 <readCanToStructs+0x4120>)
 80159a4:	f240 4116 	movw	r1, #1046	; 0x416
 80159a8:	fb01 f303 	mul.w	r3, r1, r3
 80159ac:	4413      	add	r3, r2
 80159ae:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80159b2:	2200      	movs	r2, #0
 80159b4:	701a      	strb	r2, [r3, #0]
					break;
 80159b6:	e16e      	b.n	8015c96 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 80159b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80159bc:	4613      	mov	r3, r2
 80159be:	00db      	lsls	r3, r3, #3
 80159c0:	1a9b      	subs	r3, r3, r2
 80159c2:	461a      	mov	r2, r3
 80159c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c6:	4413      	add	r3, r2
 80159c8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80159ca:	2301      	movs	r3, #1
 80159cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80159d0:	e016      	b.n	8015a00 <readCanToStructs+0x3ef0>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80159d2:	4b96      	ldr	r3, [pc, #600]	; (8015c2c <readCanToStructs+0x411c>)
 80159d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80159d8:	885b      	ldrh	r3, [r3, #2]
 80159da:	461a      	mov	r2, r3
 80159dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80159e0:	4992      	ldr	r1, [pc, #584]	; (8015c2c <readCanToStructs+0x411c>)
 80159e2:	0112      	lsls	r2, r2, #4
 80159e4:	440a      	add	r2, r1
 80159e6:	4413      	add	r3, r2
 80159e8:	3304      	adds	r3, #4
 80159ea:	781a      	ldrb	r2, [r3, #0]
 80159ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ee:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80159f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f2:	3301      	adds	r3, #1
 80159f4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80159f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80159fa:	3301      	adds	r3, #1
 80159fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015a00:	4b8a      	ldr	r3, [pc, #552]	; (8015c2c <readCanToStructs+0x411c>)
 8015a02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015a06:	885b      	ldrh	r3, [r3, #2]
 8015a08:	4a88      	ldr	r2, [pc, #544]	; (8015c2c <readCanToStructs+0x411c>)
 8015a0a:	011b      	lsls	r3, r3, #4
 8015a0c:	4413      	add	r3, r2
 8015a0e:	330c      	adds	r3, #12
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d3db      	bcc.n	80159d2 <readCanToStructs+0x3ec2>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8015a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a1e:	4a84      	ldr	r2, [pc, #528]	; (8015c30 <readCanToStructs+0x4120>)
 8015a20:	f240 4116 	movw	r1, #1046	; 0x416
 8015a24:	fb01 f303 	mul.w	r3, r1, r3
 8015a28:	4413      	add	r3, r2
 8015a2a:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	461a      	mov	r2, r3
 8015a32:	4613      	mov	r3, r2
 8015a34:	00db      	lsls	r3, r3, #3
 8015a36:	1a9a      	subs	r2, r3, r2
 8015a38:	4b7c      	ldr	r3, [pc, #496]	; (8015c2c <readCanToStructs+0x411c>)
 8015a3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015a3e:	885b      	ldrh	r3, [r3, #2]
 8015a40:	497a      	ldr	r1, [pc, #488]	; (8015c2c <readCanToStructs+0x411c>)
 8015a42:	011b      	lsls	r3, r3, #4
 8015a44:	440b      	add	r3, r1
 8015a46:	330c      	adds	r3, #12
 8015a48:	781b      	ldrb	r3, [r3, #0]
 8015a4a:	3b01      	subs	r3, #1
 8015a4c:	4413      	add	r3, r2
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	d919      	bls.n	8015a86 <readCanToStructs+0x3f76>
				{
					if(Debug_flag == 1)
 8015a52:	4b79      	ldr	r3, [pc, #484]	; (8015c38 <readCanToStructs+0x4128>)
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	d105      	bne.n	8015a66 <readCanToStructs+0x3f56>
					{
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8015a5a:	4b73      	ldr	r3, [pc, #460]	; (8015c28 <readCanToStructs+0x4118>)
 8015a5c:	881b      	ldrh	r3, [r3, #0]
 8015a5e:	4619      	mov	r1, r3
 8015a60:	4876      	ldr	r0, [pc, #472]	; (8015c3c <readCanToStructs+0x412c>)
 8015a62:	f010 ffef 	bl	8026a44 <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 8015a66:	4b76      	ldr	r3, [pc, #472]	; (8015c40 <readCanToStructs+0x4130>)
 8015a68:	2201      	movs	r2, #1
 8015a6a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8015a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a70:	4a6f      	ldr	r2, [pc, #444]	; (8015c30 <readCanToStructs+0x4120>)
 8015a72:	f240 4116 	movw	r1, #1046	; 0x416
 8015a76:	fb01 f303 	mul.w	r3, r1, r3
 8015a7a:	4413      	add	r3, r2
 8015a7c:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015a80:	2200      	movs	r2, #0
 8015a82:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
				}
				break;
 8015a84:	e107      	b.n	8015c96 <readCanToStructs+0x4186>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8015a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015a8a:	4a69      	ldr	r2, [pc, #420]	; (8015c30 <readCanToStructs+0x4120>)
 8015a8c:	f240 4116 	movw	r1, #1046	; 0x416
 8015a90:	fb01 f303 	mul.w	r3, r1, r3
 8015a94:	4413      	add	r3, r2
 8015a96:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8015a9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015aa2:	4963      	ldr	r1, [pc, #396]	; (8015c30 <readCanToStructs+0x4120>)
 8015aa4:	f240 4216 	movw	r2, #1046	; 0x416
 8015aa8:	fb03 f202 	mul.w	r2, r3, r2
 8015aac:	440a      	add	r2, r1
 8015aae:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8015ab2:	7812      	ldrb	r2, [r2, #0]
 8015ab4:	3201      	adds	r2, #1
 8015ab6:	b2d0      	uxtb	r0, r2
 8015ab8:	4a5d      	ldr	r2, [pc, #372]	; (8015c30 <readCanToStructs+0x4120>)
 8015aba:	f240 4116 	movw	r1, #1046	; 0x416
 8015abe:	fb01 f303 	mul.w	r3, r1, r3
 8015ac2:	4413      	add	r3, r2
 8015ac4:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015ac8:	4602      	mov	r2, r0
 8015aca:	701a      	strb	r2, [r3, #0]
				break;
 8015acc:	e0e3      	b.n	8015c96 <readCanToStructs+0x4186>

			case DAT_CRC_EXCHANGE_2:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8015ace:	4b56      	ldr	r3, [pc, #344]	; (8015c28 <readCanToStructs+0x4118>)
 8015ad0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015ad2:	4b56      	ldr	r3, [pc, #344]	; (8015c2c <readCanToStructs+0x411c>)
 8015ad4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015ad8:	885b      	ldrh	r3, [r3, #2]
 8015ada:	4a54      	ldr	r2, [pc, #336]	; (8015c2c <readCanToStructs+0x411c>)
 8015adc:	011b      	lsls	r3, r3, #4
 8015ade:	4413      	add	r3, r2
 8015ae0:	3304      	adds	r3, #4
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8015ae8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d110      	bne.n	8015b12 <readCanToStructs+0x4002>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015af0:	2202      	movs	r2, #2
 8015af2:	2100      	movs	r1, #0
 8015af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015af6:	f010 febd 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015afe:	4a4c      	ldr	r2, [pc, #304]	; (8015c30 <readCanToStructs+0x4120>)
 8015b00:	f240 4116 	movw	r1, #1046	; 0x416
 8015b04:	fb01 f303 	mul.w	r3, r1, r3
 8015b08:	4413      	add	r3, r2
 8015b0a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015b0e:	2200      	movs	r2, #0
 8015b10:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8015b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b16:	4a46      	ldr	r2, [pc, #280]	; (8015c30 <readCanToStructs+0x4120>)
 8015b18:	f240 4116 	movw	r1, #1046	; 0x416
 8015b1c:	fb01 f303 	mul.w	r3, r1, r3
 8015b20:	4413      	add	r3, r2
 8015b22:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015b26:	781b      	ldrb	r3, [r3, #0]
 8015b28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d014      	beq.n	8015b5a <readCanToStructs+0x404a>
				{
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8015b30:	4844      	ldr	r0, [pc, #272]	; (8015c44 <readCanToStructs+0x4134>)
 8015b32:	f011 f823 	bl	8026b7c <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015b36:	2202      	movs	r2, #2
 8015b38:	2100      	movs	r1, #0
 8015b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b3c:	f010 fe9a 	bl	8026874 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b44:	4a3a      	ldr	r2, [pc, #232]	; (8015c30 <readCanToStructs+0x4120>)
 8015b46:	f240 4116 	movw	r1, #1046	; 0x416
 8015b4a:	fb01 f303 	mul.w	r3, r1, r3
 8015b4e:	4413      	add	r3, r2
 8015b50:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015b54:	2200      	movs	r2, #0
 8015b56:	701a      	strb	r2, [r3, #0]
					break;
 8015b58:	e09d      	b.n	8015c96 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8015b5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015b5e:	4613      	mov	r3, r2
 8015b60:	00db      	lsls	r3, r3, #3
 8015b62:	1a9b      	subs	r3, r3, r2
 8015b64:	461a      	mov	r2, r3
 8015b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b68:	4413      	add	r3, r2
 8015b6a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015b72:	e016      	b.n	8015ba2 <readCanToStructs+0x4092>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8015b74:	4b2d      	ldr	r3, [pc, #180]	; (8015c2c <readCanToStructs+0x411c>)
 8015b76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015b7a:	885b      	ldrh	r3, [r3, #2]
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b82:	492a      	ldr	r1, [pc, #168]	; (8015c2c <readCanToStructs+0x411c>)
 8015b84:	0112      	lsls	r2, r2, #4
 8015b86:	440a      	add	r2, r1
 8015b88:	4413      	add	r3, r2
 8015b8a:	3304      	adds	r3, #4
 8015b8c:	781a      	ldrb	r2, [r3, #0]
 8015b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b90:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8015b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b94:	3301      	adds	r3, #1
 8015b96:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8015b98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b9c:	3301      	adds	r3, #1
 8015b9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015ba2:	4b22      	ldr	r3, [pc, #136]	; (8015c2c <readCanToStructs+0x411c>)
 8015ba4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015ba8:	885b      	ldrh	r3, [r3, #2]
 8015baa:	4a20      	ldr	r2, [pc, #128]	; (8015c2c <readCanToStructs+0x411c>)
 8015bac:	011b      	lsls	r3, r3, #4
 8015bae:	4413      	add	r3, r2
 8015bb0:	330c      	adds	r3, #12
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	d3db      	bcc.n	8015b74 <readCanToStructs+0x4064>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8015bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015bc0:	4a1b      	ldr	r2, [pc, #108]	; (8015c30 <readCanToStructs+0x4120>)
 8015bc2:	f240 4116 	movw	r1, #1046	; 0x416
 8015bc6:	fb01 f303 	mul.w	r3, r1, r3
 8015bca:	4413      	add	r3, r2
 8015bcc:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015bd0:	781b      	ldrb	r3, [r3, #0]
 8015bd2:	461a      	mov	r2, r3
 8015bd4:	4613      	mov	r3, r2
 8015bd6:	00db      	lsls	r3, r3, #3
 8015bd8:	1a9a      	subs	r2, r3, r2
 8015bda:	4b14      	ldr	r3, [pc, #80]	; (8015c2c <readCanToStructs+0x411c>)
 8015bdc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015be0:	885b      	ldrh	r3, [r3, #2]
 8015be2:	4912      	ldr	r1, [pc, #72]	; (8015c2c <readCanToStructs+0x411c>)
 8015be4:	011b      	lsls	r3, r3, #4
 8015be6:	440b      	add	r3, r1
 8015be8:	330c      	adds	r3, #12
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	3b01      	subs	r3, #1
 8015bee:	4413      	add	r3, r2
 8015bf0:	2b01      	cmp	r3, #1
 8015bf2:	d92b      	bls.n	8015c4c <readCanToStructs+0x413c>
				{
					if(Debug_flag == 1)
 8015bf4:	4b10      	ldr	r3, [pc, #64]	; (8015c38 <readCanToStructs+0x4128>)
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	2b01      	cmp	r3, #1
 8015bfa:	d105      	bne.n	8015c08 <readCanToStructs+0x40f8>
					{
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8015bfc:	4b0a      	ldr	r3, [pc, #40]	; (8015c28 <readCanToStructs+0x4118>)
 8015bfe:	881b      	ldrh	r3, [r3, #0]
 8015c00:	4619      	mov	r1, r3
 8015c02:	4811      	ldr	r0, [pc, #68]	; (8015c48 <readCanToStructs+0x4138>)
 8015c04:	f010 ff1e 	bl	8026a44 <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 8015c08:	4b0d      	ldr	r3, [pc, #52]	; (8015c40 <readCanToStructs+0x4130>)
 8015c0a:	2201      	movs	r2, #1
 8015c0c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c12:	4a07      	ldr	r2, [pc, #28]	; (8015c30 <readCanToStructs+0x4120>)
 8015c14:	f240 4116 	movw	r1, #1046	; 0x416
 8015c18:	fb01 f303 	mul.w	r3, r1, r3
 8015c1c:	4413      	add	r3, r2
 8015c1e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015c22:	2200      	movs	r2, #0
 8015c24:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;
 8015c26:	e036      	b.n	8015c96 <readCanToStructs+0x4186>
 8015c28:	20000bb8 	.word	0x20000bb8
 8015c2c:	20007258 	.word	0x20007258
 8015c30:	20006a2c 	.word	0x20006a2c
 8015c34:	0802b60c 	.word	0x0802b60c
 8015c38:	20000bbb 	.word	0x20000bbb
 8015c3c:	0802b634 	.word	0x0802b634
 8015c40:	2000030b 	.word	0x2000030b
 8015c44:	0802b648 	.word	0x0802b648
 8015c48:	0802b670 	.word	0x0802b670
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8015c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c50:	4a28      	ldr	r2, [pc, #160]	; (8015cf4 <readCanToStructs+0x41e4>)
 8015c52:	f240 4116 	movw	r1, #1046	; 0x416
 8015c56:	fb01 f303 	mul.w	r3, r1, r3
 8015c5a:	4413      	add	r3, r2
 8015c5c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8015c60:	2201      	movs	r2, #1
 8015c62:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8015c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c68:	4922      	ldr	r1, [pc, #136]	; (8015cf4 <readCanToStructs+0x41e4>)
 8015c6a:	f240 4216 	movw	r2, #1046	; 0x416
 8015c6e:	fb03 f202 	mul.w	r2, r3, r2
 8015c72:	440a      	add	r2, r1
 8015c74:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8015c78:	7812      	ldrb	r2, [r2, #0]
 8015c7a:	3201      	adds	r2, #1
 8015c7c:	b2d0      	uxtb	r0, r2
 8015c7e:	4a1d      	ldr	r2, [pc, #116]	; (8015cf4 <readCanToStructs+0x41e4>)
 8015c80:	f240 4116 	movw	r1, #1046	; 0x416
 8015c84:	fb01 f303 	mul.w	r3, r1, r3
 8015c88:	4413      	add	r3, r2
 8015c8a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015c8e:	4602      	mov	r2, r0
 8015c90:	701a      	strb	r2, [r3, #0]
				break;
 8015c92:	e000      	b.n	8015c96 <readCanToStructs+0x4186>

			default:
				break;
 8015c94:	bf00      	nop
			}

			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8015c96:	4b18      	ldr	r3, [pc, #96]	; (8015cf8 <readCanToStructs+0x41e8>)
 8015c98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015c9c:	885b      	ldrh	r3, [r3, #2]
 8015c9e:	011b      	lsls	r3, r3, #4
 8015ca0:	4a15      	ldr	r2, [pc, #84]	; (8015cf8 <readCanToStructs+0x41e8>)
 8015ca2:	4413      	add	r3, r2
 8015ca4:	2210      	movs	r2, #16
 8015ca6:	2100      	movs	r1, #0
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f010 fde3 	bl	8026874 <memset>
			canRead.Out++;
 8015cae:	4b12      	ldr	r3, [pc, #72]	; (8015cf8 <readCanToStructs+0x41e8>)
 8015cb0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015cb4:	885b      	ldrh	r3, [r3, #2]
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	b29a      	uxth	r2, r3
 8015cba:	4b0f      	ldr	r3, [pc, #60]	; (8015cf8 <readCanToStructs+0x41e8>)
 8015cbc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015cc0:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8015cc2:	4b0d      	ldr	r3, [pc, #52]	; (8015cf8 <readCanToStructs+0x41e8>)
 8015cc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015cc8:	885b      	ldrh	r3, [r3, #2]
 8015cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015cce:	d104      	bne.n	8015cda <readCanToStructs+0x41ca>
				canRead.Out = 0;
 8015cd0:	4b09      	ldr	r3, [pc, #36]	; (8015cf8 <readCanToStructs+0x41e8>)
 8015cd2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8015cda:	f7fb fec3 	bl	8011a64 <canDataReady>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	f47f ab37 	bne.w	8015354 <readCanToStructs+0x3844>
			/* Protocol Type */
		}
	}
	default:
		break;
 8015ce6:	bf00      	nop
 8015ce8:	e000      	b.n	8015cec <readCanToStructs+0x41dc>
			return;
 8015cea:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8015cec:	373c      	adds	r7, #60	; 0x3c
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cf2:	bf00      	nop
 8015cf4:	20006a2c 	.word	0x20006a2c
 8015cf8:	20007258 	.word	0x20007258

08015cfc <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b084      	sub	sp, #16
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
 8015d04:	460b      	mov	r3, r1
 8015d06:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8015d0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015d10:	461a      	mov	r2, r3
 8015d12:	6879      	ldr	r1, [r7, #4]
 8015d14:	2000      	movs	r0, #0
 8015d16:	f000 f845 	bl	8015da4 <GetCRC16>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	4b1d      	ldr	r3, [pc, #116]	; (8015d94 <CheckCRC+0x98>)
 8015d20:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8015d22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015d26:	687a      	ldr	r2, [r7, #4]
 8015d28:	4413      	add	r3, r2
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	b29a      	uxth	r2, r3
 8015d2e:	4b1a      	ldr	r3, [pc, #104]	; (8015d98 <CheckCRC+0x9c>)
 8015d30:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8015d32:	4b19      	ldr	r3, [pc, #100]	; (8015d98 <CheckCRC+0x9c>)
 8015d34:	881b      	ldrh	r3, [r3, #0]
 8015d36:	021b      	lsls	r3, r3, #8
 8015d38:	b29a      	uxth	r2, r3
 8015d3a:	4b17      	ldr	r3, [pc, #92]	; (8015d98 <CheckCRC+0x9c>)
 8015d3c:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 8015d3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015d42:	3301      	adds	r3, #1
 8015d44:	687a      	ldr	r2, [r7, #4]
 8015d46:	4413      	add	r3, r2
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	b29a      	uxth	r2, r3
 8015d4c:	4b12      	ldr	r3, [pc, #72]	; (8015d98 <CheckCRC+0x9c>)
 8015d4e:	881b      	ldrh	r3, [r3, #0]
 8015d50:	4313      	orrs	r3, r2
 8015d52:	b29a      	uxth	r2, r3
 8015d54:	4b10      	ldr	r3, [pc, #64]	; (8015d98 <CheckCRC+0x9c>)
 8015d56:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8015d58:	4b0f      	ldr	r3, [pc, #60]	; (8015d98 <CheckCRC+0x9c>)
 8015d5a:	881a      	ldrh	r2, [r3, #0]
 8015d5c:	4b0d      	ldr	r3, [pc, #52]	; (8015d94 <CheckCRC+0x98>)
 8015d5e:	881b      	ldrh	r3, [r3, #0]
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d105      	bne.n	8015d70 <CheckCRC+0x74>
	{
		retVal = 1;
 8015d64:	2301      	movs	r3, #1
 8015d66:	81fb      	strh	r3, [r7, #14]
		return k;
 8015d68:	4b0b      	ldr	r3, [pc, #44]	; (8015d98 <CheckCRC+0x9c>)
 8015d6a:	881b      	ldrh	r3, [r3, #0]
 8015d6c:	b21b      	sxth	r3, r3
 8015d6e:	e00d      	b.n	8015d8c <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8015d70:	4b08      	ldr	r3, [pc, #32]	; (8015d94 <CheckCRC+0x98>)
 8015d72:	881b      	ldrh	r3, [r3, #0]
 8015d74:	4619      	mov	r1, r3
 8015d76:	4809      	ldr	r0, [pc, #36]	; (8015d9c <CheckCRC+0xa0>)
 8015d78:	f010 fe64 	bl	8026a44 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8015d7c:	4b06      	ldr	r3, [pc, #24]	; (8015d98 <CheckCRC+0x9c>)
 8015d7e:	881b      	ldrh	r3, [r3, #0]
 8015d80:	4619      	mov	r1, r3
 8015d82:	4807      	ldr	r0, [pc, #28]	; (8015da0 <CheckCRC+0xa4>)
 8015d84:	f010 fe5e 	bl	8026a44 <iprintf>
	return retVal;
 8015d88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3710      	adds	r7, #16
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	2000b3b4 	.word	0x2000b3b4
 8015d98:	2000b3b6 	.word	0x2000b3b6
 8015d9c:	0802b81c 	.word	0x0802b81c
 8015da0:	0802b834 	.word	0x0802b834

08015da4 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8015da4:	b480      	push	{r7}
 8015da6:	b085      	sub	sp, #20
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	4603      	mov	r3, r0
 8015dac:	6039      	str	r1, [r7, #0]
 8015dae:	80fb      	strh	r3, [r7, #6]
 8015db0:	4613      	mov	r3, r2
 8015db2:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8015db4:	88fb      	ldrh	r3, [r7, #6]
 8015db6:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8015db8:	e038      	b.n	8015e2c <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8015dba:	89fb      	ldrh	r3, [r7, #14]
 8015dbc:	f003 030f 	and.w	r3, r3, #15
 8015dc0:	4a22      	ldr	r2, [pc, #136]	; (8015e4c <GetCRC16+0xa8>)
 8015dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015dc6:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8015dc8:	89fb      	ldrh	r3, [r7, #14]
 8015dca:	091b      	lsrs	r3, r3, #4
 8015dcc:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 8015dce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015dd2:	89bb      	ldrh	r3, [r7, #12]
 8015dd4:	4053      	eors	r3, r2
 8015dd6:	b21a      	sxth	r2, r3
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	f003 030f 	and.w	r3, r3, #15
 8015de0:	491a      	ldr	r1, [pc, #104]	; (8015e4c <GetCRC16+0xa8>)
 8015de2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015de6:	b21b      	sxth	r3, r3
 8015de8:	4053      	eors	r3, r2
 8015dea:	b21b      	sxth	r3, r3
 8015dec:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8015dee:	89fb      	ldrh	r3, [r7, #14]
 8015df0:	f003 030f 	and.w	r3, r3, #15
 8015df4:	4a15      	ldr	r2, [pc, #84]	; (8015e4c <GetCRC16+0xa8>)
 8015df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015dfa:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8015dfc:	89fb      	ldrh	r3, [r7, #14]
 8015dfe:	091b      	lsrs	r3, r3, #4
 8015e00:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8015e02:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015e06:	89bb      	ldrh	r3, [r7, #12]
 8015e08:	4053      	eors	r3, r2
 8015e0a:	b21a      	sxth	r2, r3
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	781b      	ldrb	r3, [r3, #0]
 8015e10:	091b      	lsrs	r3, r3, #4
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	f003 030f 	and.w	r3, r3, #15
 8015e18:	490c      	ldr	r1, [pc, #48]	; (8015e4c <GetCRC16+0xa8>)
 8015e1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015e1e:	b21b      	sxth	r3, r3
 8015e20:	4053      	eors	r3, r2
 8015e22:	b21b      	sxth	r3, r3
 8015e24:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	3301      	adds	r3, #1
 8015e2a:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 8015e2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015e30:	b29a      	uxth	r2, r3
 8015e32:	3a01      	subs	r2, #1
 8015e34:	b292      	uxth	r2, r2
 8015e36:	80ba      	strh	r2, [r7, #4]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	dcbe      	bgt.n	8015dba <GetCRC16+0x16>
	}
	return(uiCrc);
 8015e3c:	89fb      	ldrh	r3, [r7, #14]
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3714      	adds	r7, #20
 8015e42:	46bd      	mov	sp, r7
 8015e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e48:	4770      	bx	lr
 8015e4a:	bf00      	nop
 8015e4c:	0802dd30 	.word	0x0802dd30

08015e50 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b082      	sub	sp, #8
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	460b      	mov	r3, r1
 8015e5a:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8015e5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e60:	461a      	mov	r2, r3
 8015e62:	6879      	ldr	r1, [r7, #4]
 8015e64:	2000      	movs	r0, #0
 8015e66:	f7ff ff9d 	bl	8015da4 <GetCRC16>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	461a      	mov	r2, r3
 8015e6e:	4b11      	ldr	r3, [pc, #68]	; (8015eb4 <ComputeCRC+0x64>)
 8015e70:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8015e72:	4b10      	ldr	r3, [pc, #64]	; (8015eb4 <ComputeCRC+0x64>)
 8015e74:	881a      	ldrh	r2, [r3, #0]
 8015e76:	4b10      	ldr	r3, [pc, #64]	; (8015eb8 <ComputeCRC+0x68>)
 8015e78:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8015e7a:	4b0e      	ldr	r3, [pc, #56]	; (8015eb4 <ComputeCRC+0x64>)
 8015e7c:	8819      	ldrh	r1, [r3, #0]
 8015e7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015e82:	3301      	adds	r3, #1
 8015e84:	687a      	ldr	r2, [r7, #4]
 8015e86:	4413      	add	r3, r2
 8015e88:	b2ca      	uxtb	r2, r1
 8015e8a:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8015e8c:	4b09      	ldr	r3, [pc, #36]	; (8015eb4 <ComputeCRC+0x64>)
 8015e8e:	881b      	ldrh	r3, [r3, #0]
 8015e90:	0a1b      	lsrs	r3, r3, #8
 8015e92:	b29a      	uxth	r2, r3
 8015e94:	4b07      	ldr	r3, [pc, #28]	; (8015eb4 <ComputeCRC+0x64>)
 8015e96:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8015e98:	4b06      	ldr	r3, [pc, #24]	; (8015eb4 <ComputeCRC+0x64>)
 8015e9a:	8819      	ldrh	r1, [r3, #0]
 8015e9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ea0:	687a      	ldr	r2, [r7, #4]
 8015ea2:	4413      	add	r3, r2
 8015ea4:	b2ca      	uxtb	r2, r1
 8015ea6:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8015ea8:	4b03      	ldr	r3, [pc, #12]	; (8015eb8 <ComputeCRC+0x68>)
 8015eaa:	881b      	ldrh	r3, [r3, #0]
}
 8015eac:	4618      	mov	r0, r3
 8015eae:	3708      	adds	r7, #8
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}
 8015eb4:	2000b3b8 	.word	0x2000b3b8
 8015eb8:	2000b3ba 	.word	0x2000b3ba

08015ebc <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b087      	sub	sp, #28
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	005b      	lsls	r3, r3, #1
 8015ed4:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	60fb      	str	r3, [r7, #12]
 8015eda:	e012      	b.n	8015f02 <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	f003 0301 	and.w	r3, r3, #1
 8015ee2:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	f1c3 031f 	rsb	r3, r3, #31
 8015eea:	68ba      	ldr	r2, [r7, #8]
 8015eec:	fa02 f303 	lsl.w	r3, r2, r3
 8015ef0:	697a      	ldr	r2, [r7, #20]
 8015ef2:	4313      	orrs	r3, r2
 8015ef4:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	085b      	lsrs	r3, r3, #1
 8015efa:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	3301      	adds	r3, #1
 8015f00:	60fb      	str	r3, [r7, #12]
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2b1f      	cmp	r3, #31
 8015f06:	dde9      	ble.n	8015edc <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 8015f08:	697b      	ldr	r3, [r7, #20]
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	371c      	adds	r7, #28
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr
	...

08015f18 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b088      	sub	sp, #32
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	460b      	mov	r3, r1
 8015f22:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8015f24:	2300      	movs	r3, #0
 8015f26:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 8015f28:	2300      	movs	r3, #0
 8015f2a:	617b      	str	r3, [r7, #20]
	int converted = 0;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	613b      	str	r3, [r7, #16]
	int i=0;
 8015f30:	2300      	movs	r3, #0
 8015f32:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8015f34:	4b26      	ldr	r3, [pc, #152]	; (8015fd0 <CalculateDirectReverseCrc+0xb8>)
 8015f36:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 8015f38:	68f8      	ldr	r0, [r7, #12]
 8015f3a:	f7ff ffbf 	bl	8015ebc <ReverseCRCPolynomial>
 8015f3e:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 8015f40:	2300      	movs	r3, #0
 8015f42:	61bb      	str	r3, [r7, #24]
 8015f44:	e00d      	b.n	8015f62 <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 8015f46:	69f8      	ldr	r0, [r7, #28]
 8015f48:	69bb      	ldr	r3, [r7, #24]
 8015f4a:	687a      	ldr	r2, [r7, #4]
 8015f4c:	4413      	add	r3, r2
 8015f4e:	781b      	ldrb	r3, [r3, #0]
 8015f50:	697a      	ldr	r2, [r7, #20]
 8015f52:	4619      	mov	r1, r3
 8015f54:	f000 f844 	bl	8015fe0 <AnsoldoCrc>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8015f5c:	69bb      	ldr	r3, [r7, #24]
 8015f5e:	3301      	adds	r3, #1
 8015f60:	61bb      	str	r3, [r7, #24]
 8015f62:	887b      	ldrh	r3, [r7, #2]
 8015f64:	69ba      	ldr	r2, [r7, #24]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	dbed      	blt.n	8015f46 <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8015f6a:	69fb      	ldr	r3, [r7, #28]
 8015f6c:	061b      	lsls	r3, r3, #24
 8015f6e:	693a      	ldr	r2, [r7, #16]
 8015f70:	4313      	orrs	r3, r2
 8015f72:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8015f74:	69fb      	ldr	r3, [r7, #28]
 8015f76:	021b      	lsls	r3, r3, #8
 8015f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015f7c:	693a      	ldr	r2, [r7, #16]
 8015f7e:	4313      	orrs	r3, r2
 8015f80:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 8015f82:	69fb      	ldr	r3, [r7, #28]
 8015f84:	121b      	asrs	r3, r3, #8
 8015f86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015f8a:	693a      	ldr	r2, [r7, #16]
 8015f8c:	4313      	orrs	r3, r2
 8015f8e:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 8015f90:	69fb      	ldr	r3, [r7, #28]
 8015f92:	0e1a      	lsrs	r2, r3, #24
 8015f94:	693b      	ldr	r3, [r7, #16]
 8015f96:	4313      	orrs	r3, r2
 8015f98:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8015f9a:	4b0e      	ldr	r3, [pc, #56]	; (8015fd4 <CalculateDirectReverseCrc+0xbc>)
 8015f9c:	781b      	ldrb	r3, [r3, #0]
 8015f9e:	2b01      	cmp	r3, #1
 8015fa0:	d110      	bne.n	8015fc4 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8015fa2:	480d      	ldr	r0, [pc, #52]	; (8015fd8 <CalculateDirectReverseCrc+0xc0>)
 8015fa4:	f008 f9f6 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8015fa8:	4601      	mov	r1, r0
 8015faa:	4b0c      	ldr	r3, [pc, #48]	; (8015fdc <CalculateDirectReverseCrc+0xc4>)
 8015fac:	fba3 2301 	umull	r2, r3, r3, r1
 8015fb0:	08da      	lsrs	r2, r3, #3
 8015fb2:	4613      	mov	r3, r2
 8015fb4:	009b      	lsls	r3, r3, #2
 8015fb6:	4413      	add	r3, r2
 8015fb8:	005b      	lsls	r3, r3, #1
 8015fba:	1aca      	subs	r2, r1, r3
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	4413      	add	r3, r2
 8015fc0:	3301      	adds	r3, #1
 8015fc2:	e000      	b.n	8015fc6 <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8015fc4:	693b      	ldr	r3, [r7, #16]
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3720      	adds	r7, #32
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}
 8015fce:	bf00      	nop
 8015fd0:	d20d8a81 	.word	0xd20d8a81
 8015fd4:	200024af 	.word	0x200024af
 8015fd8:	2000bcec 	.word	0x2000bcec
 8015fdc:	cccccccd 	.word	0xcccccccd

08015fe0 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8015fe0:	b480      	push	{r7}
 8015fe2:	b08b      	sub	sp, #44	; 0x2c
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	460b      	mov	r3, r1
 8015fea:	607a      	str	r2, [r7, #4]
 8015fec:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8015fee:	7afb      	ldrb	r3, [r7, #11]
 8015ff0:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8015ff2:	2301      	movs	r3, #1
 8015ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ff8:	e01d      	b.n	8016036 <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	f003 0301 	and.w	r3, r3, #1
 8016000:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8016002:	6a3b      	ldr	r3, [r7, #32]
 8016004:	f003 0301 	and.w	r3, r3, #1
 8016008:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	085b      	lsrs	r3, r3, #1
 801600e:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8016010:	69fa      	ldr	r2, [r7, #28]
 8016012:	69bb      	ldr	r3, [r7, #24]
 8016014:	4053      	eors	r3, r2
 8016016:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	2b01      	cmp	r3, #1
 801601c:	d103      	bne.n	8016026 <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 801601e:	68fa      	ldr	r2, [r7, #12]
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	4053      	eors	r3, r2
 8016024:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 8016026:	6a3b      	ldr	r3, [r7, #32]
 8016028:	085b      	lsrs	r3, r3, #1
 801602a:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 801602c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016030:	3301      	adds	r3, #1
 8016032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801603a:	2b08      	cmp	r3, #8
 801603c:	d9dd      	bls.n	8015ffa <AnsoldoCrc+0x1a>
	}
	return (Crc);
 801603e:	68fb      	ldr	r3, [r7, #12]
}
 8016040:	4618      	mov	r0, r3
 8016042:	372c      	adds	r7, #44	; 0x2c
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr

0801604c <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b090      	sub	sp, #64	; 0x40
 8016050:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016056:	2200      	movs	r2, #0
 8016058:	601a      	str	r2, [r3, #0]
 801605a:	605a      	str	r2, [r3, #4]
 801605c:	609a      	str	r2, [r3, #8]
 801605e:	60da      	str	r2, [r3, #12]
 8016060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8016062:	4bb2      	ldr	r3, [pc, #712]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016066:	4ab1      	ldr	r2, [pc, #708]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801606c:	6313      	str	r3, [r2, #48]	; 0x30
 801606e:	4baf      	ldr	r3, [pc, #700]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016076:	62bb      	str	r3, [r7, #40]	; 0x28
 8016078:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801607a:	4bac      	ldr	r3, [pc, #688]	; (801632c <MX_GPIO_Init+0x2e0>)
 801607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801607e:	4aab      	ldr	r2, [pc, #684]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016080:	f043 0320 	orr.w	r3, r3, #32
 8016084:	6313      	str	r3, [r2, #48]	; 0x30
 8016086:	4ba9      	ldr	r3, [pc, #676]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801608a:	f003 0320 	and.w	r3, r3, #32
 801608e:	627b      	str	r3, [r7, #36]	; 0x24
 8016090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8016092:	4ba6      	ldr	r3, [pc, #664]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016096:	4aa5      	ldr	r2, [pc, #660]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801609c:	6313      	str	r3, [r2, #48]	; 0x30
 801609e:	4ba3      	ldr	r3, [pc, #652]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80160a6:	623b      	str	r3, [r7, #32]
 80160a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80160aa:	4ba0      	ldr	r3, [pc, #640]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160ae:	4a9f      	ldr	r2, [pc, #636]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160b0:	f043 0304 	orr.w	r3, r3, #4
 80160b4:	6313      	str	r3, [r2, #48]	; 0x30
 80160b6:	4b9d      	ldr	r3, [pc, #628]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160ba:	f003 0304 	and.w	r3, r3, #4
 80160be:	61fb      	str	r3, [r7, #28]
 80160c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80160c2:	4b9a      	ldr	r3, [pc, #616]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160c6:	4a99      	ldr	r2, [pc, #612]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160c8:	f043 0301 	orr.w	r3, r3, #1
 80160cc:	6313      	str	r3, [r2, #48]	; 0x30
 80160ce:	4b97      	ldr	r3, [pc, #604]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160d2:	f003 0301 	and.w	r3, r3, #1
 80160d6:	61bb      	str	r3, [r7, #24]
 80160d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80160da:	4b94      	ldr	r3, [pc, #592]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160de:	4a93      	ldr	r2, [pc, #588]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160e4:	6313      	str	r3, [r2, #48]	; 0x30
 80160e6:	4b91      	ldr	r3, [pc, #580]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160ee:	617b      	str	r3, [r7, #20]
 80160f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80160f2:	4b8e      	ldr	r3, [pc, #568]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160f6:	4a8d      	ldr	r2, [pc, #564]	; (801632c <MX_GPIO_Init+0x2e0>)
 80160f8:	f043 0310 	orr.w	r3, r3, #16
 80160fc:	6313      	str	r3, [r2, #48]	; 0x30
 80160fe:	4b8b      	ldr	r3, [pc, #556]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016102:	f003 0310 	and.w	r3, r3, #16
 8016106:	613b      	str	r3, [r7, #16]
 8016108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801610a:	4b88      	ldr	r3, [pc, #544]	; (801632c <MX_GPIO_Init+0x2e0>)
 801610c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801610e:	4a87      	ldr	r2, [pc, #540]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016110:	f043 0302 	orr.w	r3, r3, #2
 8016114:	6313      	str	r3, [r2, #48]	; 0x30
 8016116:	4b85      	ldr	r3, [pc, #532]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801611a:	f003 0302 	and.w	r3, r3, #2
 801611e:	60fb      	str	r3, [r7, #12]
 8016120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8016122:	4b82      	ldr	r3, [pc, #520]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016126:	4a81      	ldr	r2, [pc, #516]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016128:	f043 0308 	orr.w	r3, r3, #8
 801612c:	6313      	str	r3, [r2, #48]	; 0x30
 801612e:	4b7f      	ldr	r3, [pc, #508]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016132:	f003 0308 	and.w	r3, r3, #8
 8016136:	60bb      	str	r3, [r7, #8]
 8016138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801613a:	4b7c      	ldr	r3, [pc, #496]	; (801632c <MX_GPIO_Init+0x2e0>)
 801613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801613e:	4a7b      	ldr	r2, [pc, #492]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016144:	6313      	str	r3, [r2, #48]	; 0x30
 8016146:	4b79      	ldr	r3, [pc, #484]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801614a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801614e:	607b      	str	r3, [r7, #4]
 8016150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8016152:	4b76      	ldr	r3, [pc, #472]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016156:	4a75      	ldr	r2, [pc, #468]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016158:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801615c:	6313      	str	r3, [r2, #48]	; 0x30
 801615e:	4b73      	ldr	r3, [pc, #460]	; (801632c <MX_GPIO_Init+0x2e0>)
 8016160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016166:	603b      	str	r3, [r7, #0]
 8016168:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 801616a:	2200      	movs	r2, #0
 801616c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8016170:	486f      	ldr	r0, [pc, #444]	; (8016330 <MX_GPIO_Init+0x2e4>)
 8016172:	f006 f92d 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8016176:	2200      	movs	r2, #0
 8016178:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801617c:	486d      	ldr	r0, [pc, #436]	; (8016334 <MX_GPIO_Init+0x2e8>)
 801617e:	f006 f927 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 8016182:	2200      	movs	r2, #0
 8016184:	f240 7104 	movw	r1, #1796	; 0x704
 8016188:	486b      	ldr	r0, [pc, #428]	; (8016338 <MX_GPIO_Init+0x2ec>)
 801618a:	f006 f921 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 801618e:	2201      	movs	r2, #1
 8016190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016194:	4869      	ldr	r0, [pc, #420]	; (801633c <MX_GPIO_Init+0x2f0>)
 8016196:	f006 f91b 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 801619a:	2200      	movs	r2, #0
 801619c:	f241 0104 	movw	r1, #4100	; 0x1004
 80161a0:	4867      	ldr	r0, [pc, #412]	; (8016340 <MX_GPIO_Init+0x2f4>)
 80161a2:	f006 f915 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 80161a6:	2201      	movs	r2, #1
 80161a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80161ac:	4865      	ldr	r0, [pc, #404]	; (8016344 <MX_GPIO_Init+0x2f8>)
 80161ae:	f006 f90f 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 80161b2:	2200      	movs	r2, #0
 80161b4:	2108      	movs	r1, #8
 80161b6:	4864      	ldr	r0, [pc, #400]	; (8016348 <MX_GPIO_Init+0x2fc>)
 80161b8:	f006 f90a 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 80161bc:	2201      	movs	r2, #1
 80161be:	2160      	movs	r1, #96	; 0x60
 80161c0:	4861      	ldr	r0, [pc, #388]	; (8016348 <MX_GPIO_Init+0x2fc>)
 80161c2:	f006 f905 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 80161c6:	2200      	movs	r2, #0
 80161c8:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80161cc:	485f      	ldr	r0, [pc, #380]	; (801634c <MX_GPIO_Init+0x300>)
 80161ce:	f006 f8ff 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 80161d2:	2201      	movs	r2, #1
 80161d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80161d8:	485c      	ldr	r0, [pc, #368]	; (801634c <MX_GPIO_Init+0x300>)
 80161da:	f006 f8f9 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80161de:	2201      	movs	r2, #1
 80161e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80161e4:	4856      	ldr	r0, [pc, #344]	; (8016340 <MX_GPIO_Init+0x2f4>)
 80161e6:	f006 f8f3 	bl	801c3d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 80161ea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80161ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80161f0:	2301      	movs	r3, #1
 80161f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161f4:	2300      	movs	r3, #0
 80161f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80161f8:	2303      	movs	r3, #3
 80161fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80161fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016200:	4619      	mov	r1, r3
 8016202:	484b      	ldr	r0, [pc, #300]	; (8016330 <MX_GPIO_Init+0x2e4>)
 8016204:	f005 ff20 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 8016208:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801620c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801620e:	2300      	movs	r3, #0
 8016210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016212:	2300      	movs	r3, #0
 8016214:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8016216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801621a:	4619      	mov	r1, r3
 801621c:	4844      	ldr	r0, [pc, #272]	; (8016330 <MX_GPIO_Init+0x2e4>)
 801621e:	f005 ff13 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 8016222:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8016226:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016228:	2301      	movs	r3, #1
 801622a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801622c:	2300      	movs	r3, #0
 801622e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016230:	2303      	movs	r3, #3
 8016232:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8016234:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016238:	4619      	mov	r1, r3
 801623a:	483e      	ldr	r0, [pc, #248]	; (8016334 <MX_GPIO_Init+0x2e8>)
 801623c:	f005 ff04 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 8016240:	2304      	movs	r3, #4
 8016242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016244:	2300      	movs	r3, #0
 8016246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016248:	2300      	movs	r3, #0
 801624a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 801624c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016250:	4619      	mov	r1, r3
 8016252:	483c      	ldr	r0, [pc, #240]	; (8016344 <MX_GPIO_Init+0x2f8>)
 8016254:	f005 fef8 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8016258:	f240 7304 	movw	r3, #1796	; 0x704
 801625c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801625e:	2301      	movs	r3, #1
 8016260:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016262:	2300      	movs	r3, #0
 8016264:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016266:	2303      	movs	r3, #3
 8016268:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801626a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801626e:	4619      	mov	r1, r3
 8016270:	4831      	ldr	r0, [pc, #196]	; (8016338 <MX_GPIO_Init+0x2ec>)
 8016272:	f005 fee9 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 8016276:	2303      	movs	r3, #3
 8016278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801627a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 801627e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016280:	2300      	movs	r3, #0
 8016282:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8016284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016288:	4619      	mov	r1, r3
 801628a:	482d      	ldr	r0, [pc, #180]	; (8016340 <MX_GPIO_Init+0x2f4>)
 801628c:	f005 fedc 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 8016290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8016294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016296:	2300      	movs	r3, #0
 8016298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801629a:	2300      	movs	r3, #0
 801629c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 801629e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80162a2:	4619      	mov	r1, r3
 80162a4:	4825      	ldr	r0, [pc, #148]	; (801633c <MX_GPIO_Init+0x2f0>)
 80162a6:	f005 fecf 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 80162aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80162ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80162b0:	2301      	movs	r3, #1
 80162b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80162b4:	2300      	movs	r3, #0
 80162b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80162b8:	2303      	movs	r3, #3
 80162ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 80162bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80162c0:	4619      	mov	r1, r3
 80162c2:	481e      	ldr	r0, [pc, #120]	; (801633c <MX_GPIO_Init+0x2f0>)
 80162c4:	f005 fec0 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 80162c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80162cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80162ce:	2300      	movs	r3, #0
 80162d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80162d2:	2300      	movs	r3, #0
 80162d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80162d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80162da:	4619      	mov	r1, r3
 80162dc:	481a      	ldr	r0, [pc, #104]	; (8016348 <MX_GPIO_Init+0x2fc>)
 80162de:	f005 feb3 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 80162e2:	f241 4304 	movw	r3, #5124	; 0x1404
 80162e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80162e8:	2301      	movs	r3, #1
 80162ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80162ec:	2300      	movs	r3, #0
 80162ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80162f0:	2303      	movs	r3, #3
 80162f2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80162f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80162f8:	4619      	mov	r1, r3
 80162fa:	4811      	ldr	r0, [pc, #68]	; (8016340 <MX_GPIO_Init+0x2f4>)
 80162fc:	f005 fea4 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8016300:	2308      	movs	r3, #8
 8016302:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016304:	2300      	movs	r3, #0
 8016306:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016308:	2300      	movs	r3, #0
 801630a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 801630c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016310:	4619      	mov	r1, r3
 8016312:	480b      	ldr	r0, [pc, #44]	; (8016340 <MX_GPIO_Init+0x2f4>)
 8016314:	f005 fe98 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8016318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801631c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801631e:	2301      	movs	r3, #1
 8016320:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016322:	2300      	movs	r3, #0
 8016324:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016326:	2300      	movs	r3, #0
 8016328:	63bb      	str	r3, [r7, #56]	; 0x38
 801632a:	e011      	b.n	8016350 <MX_GPIO_Init+0x304>
 801632c:	40023800 	.word	0x40023800
 8016330:	40022000 	.word	0x40022000
 8016334:	40021400 	.word	0x40021400
 8016338:	40021c00 	.word	0x40021c00
 801633c:	40021000 	.word	0x40021000
 8016340:	40021800 	.word	0x40021800
 8016344:	40020800 	.word	0x40020800
 8016348:	40020c00 	.word	0x40020c00
 801634c:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8016350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016354:	4619      	mov	r1, r3
 8016356:	4836      	ldr	r0, [pc, #216]	; (8016430 <MX_GPIO_Init+0x3e4>)
 8016358:	f005 fe76 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 801635c:	2303      	movs	r3, #3
 801635e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016360:	2302      	movs	r3, #2
 8016362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016364:	2300      	movs	r3, #0
 8016366:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016368:	2303      	movs	r3, #3
 801636a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 801636c:	2309      	movs	r3, #9
 801636e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016374:	4619      	mov	r1, r3
 8016376:	482f      	ldr	r0, [pc, #188]	; (8016434 <MX_GPIO_Init+0x3e8>)
 8016378:	f005 fe66 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 801637c:	2368      	movs	r3, #104	; 0x68
 801637e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016380:	2301      	movs	r3, #1
 8016382:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016384:	2300      	movs	r3, #0
 8016386:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016388:	2303      	movs	r3, #3
 801638a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801638c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016390:	4619      	mov	r1, r3
 8016392:	4828      	ldr	r0, [pc, #160]	; (8016434 <MX_GPIO_Init+0x3e8>)
 8016394:	f005 fe58 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8016398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801639c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801639e:	2300      	movs	r3, #0
 80163a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163a2:	2300      	movs	r3, #0
 80163a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 80163a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80163aa:	4619      	mov	r1, r3
 80163ac:	4822      	ldr	r0, [pc, #136]	; (8016438 <MX_GPIO_Init+0x3ec>)
 80163ae:	f005 fe4b 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 80163b2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80163b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80163b8:	2301      	movs	r3, #1
 80163ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163bc:	2300      	movs	r3, #0
 80163be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80163c0:	2300      	movs	r3, #0
 80163c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80163c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80163c8:	4619      	mov	r1, r3
 80163ca:	481b      	ldr	r0, [pc, #108]	; (8016438 <MX_GPIO_Init+0x3ec>)
 80163cc:	f005 fe3c 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 80163d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80163d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80163d6:	2301      	movs	r3, #1
 80163d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163da:	2300      	movs	r3, #0
 80163dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80163de:	2303      	movs	r3, #3
 80163e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 80163e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80163e6:	4619      	mov	r1, r3
 80163e8:	4813      	ldr	r0, [pc, #76]	; (8016438 <MX_GPIO_Init+0x3ec>)
 80163ea:	f005 fe2d 	bl	801c048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 80163ee:	2318      	movs	r3, #24
 80163f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80163f2:	2300      	movs	r3, #0
 80163f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80163f6:	2300      	movs	r3, #0
 80163f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80163fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80163fe:	4619      	mov	r1, r3
 8016400:	480e      	ldr	r0, [pc, #56]	; (801643c <MX_GPIO_Init+0x3f0>)
 8016402:	f005 fe21 	bl	801c048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8016406:	2200      	movs	r2, #0
 8016408:	2101      	movs	r1, #1
 801640a:	2006      	movs	r0, #6
 801640c:	f004 faf1 	bl	801a9f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8016410:	2006      	movs	r0, #6
 8016412:	f004 fb0a 	bl	801aa2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8016416:	2201      	movs	r2, #1
 8016418:	2101      	movs	r1, #1
 801641a:	2007      	movs	r0, #7
 801641c:	f004 fae9 	bl	801a9f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8016420:	2007      	movs	r0, #7
 8016422:	f004 fb02 	bl	801aa2a <HAL_NVIC_EnableIRQ>

}
 8016426:	bf00      	nop
 8016428:	3740      	adds	r7, #64	; 0x40
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}
 801642e:	bf00      	nop
 8016430:	40020800 	.word	0x40020800
 8016434:	40020c00 	.word	0x40020c00
 8016438:	40022400 	.word	0x40022400
 801643c:	40022800 	.word	0x40022800

08016440 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 8016444:	4b0a      	ldr	r3, [pc, #40]	; (8016470 <Feed_wdt+0x30>)
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	4618      	mov	r0, r3
 801644a:	f7f9 ffd5 	bl	80103f8 <HAL_Elaps_Ticks>
 801644e:	4603      	mov	r3, r0
 8016450:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016454:	d309      	bcc.n	801646a <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 8016456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801645a:	4806      	ldr	r0, [pc, #24]	; (8016474 <Feed_wdt+0x34>)
 801645c:	f005 ffd1 	bl	801c402 <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 8016460:	f003 fae6 	bl	8019a30 <HAL_GetTick>
 8016464:	4603      	mov	r3, r0
 8016466:	4a02      	ldr	r2, [pc, #8]	; (8016470 <Feed_wdt+0x30>)
 8016468:	6013      	str	r3, [r2, #0]
	}

}
 801646a:	bf00      	nop
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	2000b3bc 	.word	0x2000b3bc
 8016474:	40022400 	.word	0x40022400

08016478 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 801647c:	4b09      	ldr	r3, [pc, #36]	; (80164a4 <Blink_S2+0x2c>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	4618      	mov	r0, r3
 8016482:	f7f9 ffb9 	bl	80103f8 <HAL_Elaps_Ticks>
 8016486:	4603      	mov	r3, r0
 8016488:	2b64      	cmp	r3, #100	; 0x64
 801648a:	d909      	bls.n	80164a0 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 801648c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016490:	4805      	ldr	r0, [pc, #20]	; (80164a8 <Blink_S2+0x30>)
 8016492:	f005 ffb6 	bl	801c402 <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 8016496:	f003 facb 	bl	8019a30 <HAL_GetTick>
 801649a:	4603      	mov	r3, r0
 801649c:	4a01      	ldr	r2, [pc, #4]	; (80164a4 <Blink_S2+0x2c>)
 801649e:	6013      	str	r3, [r2, #0]
	}
}
 80164a0:	bf00      	nop
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	2000b3c0 	.word	0x2000b3c0
 80164a8:	40021c00 	.word	0x40021c00

080164ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80164b0:	4b1b      	ldr	r3, [pc, #108]	; (8016520 <MX_I2C1_Init+0x74>)
 80164b2:	4a1c      	ldr	r2, [pc, #112]	; (8016524 <MX_I2C1_Init+0x78>)
 80164b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 80164b6:	4b1a      	ldr	r3, [pc, #104]	; (8016520 <MX_I2C1_Init+0x74>)
 80164b8:	4a1b      	ldr	r2, [pc, #108]	; (8016528 <MX_I2C1_Init+0x7c>)
 80164ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80164bc:	4b18      	ldr	r3, [pc, #96]	; (8016520 <MX_I2C1_Init+0x74>)
 80164be:	2200      	movs	r2, #0
 80164c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80164c2:	4b17      	ldr	r3, [pc, #92]	; (8016520 <MX_I2C1_Init+0x74>)
 80164c4:	2201      	movs	r2, #1
 80164c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80164c8:	4b15      	ldr	r3, [pc, #84]	; (8016520 <MX_I2C1_Init+0x74>)
 80164ca:	2200      	movs	r2, #0
 80164cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80164ce:	4b14      	ldr	r3, [pc, #80]	; (8016520 <MX_I2C1_Init+0x74>)
 80164d0:	2200      	movs	r2, #0
 80164d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80164d4:	4b12      	ldr	r3, [pc, #72]	; (8016520 <MX_I2C1_Init+0x74>)
 80164d6:	2200      	movs	r2, #0
 80164d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80164da:	4b11      	ldr	r3, [pc, #68]	; (8016520 <MX_I2C1_Init+0x74>)
 80164dc:	2200      	movs	r2, #0
 80164de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80164e0:	4b0f      	ldr	r3, [pc, #60]	; (8016520 <MX_I2C1_Init+0x74>)
 80164e2:	2200      	movs	r2, #0
 80164e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80164e6:	480e      	ldr	r0, [pc, #56]	; (8016520 <MX_I2C1_Init+0x74>)
 80164e8:	f005 ffca 	bl	801c480 <HAL_I2C_Init>
 80164ec:	4603      	mov	r3, r0
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d001      	beq.n	80164f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80164f2:	f001 fca3 	bl	8017e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80164f6:	2100      	movs	r1, #0
 80164f8:	4809      	ldr	r0, [pc, #36]	; (8016520 <MX_I2C1_Init+0x74>)
 80164fa:	f006 fd19 	bl	801cf30 <HAL_I2CEx_ConfigAnalogFilter>
 80164fe:	4603      	mov	r3, r0
 8016500:	2b00      	cmp	r3, #0
 8016502:	d001      	beq.n	8016508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8016504:	f001 fc9a 	bl	8017e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8016508:	2100      	movs	r1, #0
 801650a:	4805      	ldr	r0, [pc, #20]	; (8016520 <MX_I2C1_Init+0x74>)
 801650c:	f006 fd5b 	bl	801cfc6 <HAL_I2CEx_ConfigDigitalFilter>
 8016510:	4603      	mov	r3, r0
 8016512:	2b00      	cmp	r3, #0
 8016514:	d001      	beq.n	801651a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8016516:	f001 fc91 	bl	8017e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801651a:	bf00      	nop
 801651c:	bd80      	pop	{r7, pc}
 801651e:	bf00      	nop
 8016520:	2000b3c4 	.word	0x2000b3c4
 8016524:	40005400 	.word	0x40005400
 8016528:	c0000e12 	.word	0xc0000e12

0801652c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8016530:	4b1b      	ldr	r3, [pc, #108]	; (80165a0 <MX_I2C2_Init+0x74>)
 8016532:	4a1c      	ldr	r2, [pc, #112]	; (80165a4 <MX_I2C2_Init+0x78>)
 8016534:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 8016536:	4b1a      	ldr	r3, [pc, #104]	; (80165a0 <MX_I2C2_Init+0x74>)
 8016538:	4a1b      	ldr	r2, [pc, #108]	; (80165a8 <MX_I2C2_Init+0x7c>)
 801653a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 801653c:	4b18      	ldr	r3, [pc, #96]	; (80165a0 <MX_I2C2_Init+0x74>)
 801653e:	2200      	movs	r2, #0
 8016540:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8016542:	4b17      	ldr	r3, [pc, #92]	; (80165a0 <MX_I2C2_Init+0x74>)
 8016544:	2201      	movs	r2, #1
 8016546:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8016548:	4b15      	ldr	r3, [pc, #84]	; (80165a0 <MX_I2C2_Init+0x74>)
 801654a:	2200      	movs	r2, #0
 801654c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 801654e:	4b14      	ldr	r3, [pc, #80]	; (80165a0 <MX_I2C2_Init+0x74>)
 8016550:	2200      	movs	r2, #0
 8016552:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8016554:	4b12      	ldr	r3, [pc, #72]	; (80165a0 <MX_I2C2_Init+0x74>)
 8016556:	2200      	movs	r2, #0
 8016558:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801655a:	4b11      	ldr	r3, [pc, #68]	; (80165a0 <MX_I2C2_Init+0x74>)
 801655c:	2200      	movs	r2, #0
 801655e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8016560:	4b0f      	ldr	r3, [pc, #60]	; (80165a0 <MX_I2C2_Init+0x74>)
 8016562:	2200      	movs	r2, #0
 8016564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8016566:	480e      	ldr	r0, [pc, #56]	; (80165a0 <MX_I2C2_Init+0x74>)
 8016568:	f005 ff8a 	bl	801c480 <HAL_I2C_Init>
 801656c:	4603      	mov	r3, r0
 801656e:	2b00      	cmp	r3, #0
 8016570:	d001      	beq.n	8016576 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8016572:	f001 fc63 	bl	8017e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8016576:	2100      	movs	r1, #0
 8016578:	4809      	ldr	r0, [pc, #36]	; (80165a0 <MX_I2C2_Init+0x74>)
 801657a:	f006 fcd9 	bl	801cf30 <HAL_I2CEx_ConfigAnalogFilter>
 801657e:	4603      	mov	r3, r0
 8016580:	2b00      	cmp	r3, #0
 8016582:	d001      	beq.n	8016588 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8016584:	f001 fc5a 	bl	8017e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8016588:	2100      	movs	r1, #0
 801658a:	4805      	ldr	r0, [pc, #20]	; (80165a0 <MX_I2C2_Init+0x74>)
 801658c:	f006 fd1b 	bl	801cfc6 <HAL_I2CEx_ConfigDigitalFilter>
 8016590:	4603      	mov	r3, r0
 8016592:	2b00      	cmp	r3, #0
 8016594:	d001      	beq.n	801659a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8016596:	f001 fc51 	bl	8017e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 801659a:	bf00      	nop
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	2000b418 	.word	0x2000b418
 80165a4:	40005800 	.word	0x40005800
 80165a8:	c0000e12 	.word	0xc0000e12

080165ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b0b0      	sub	sp, #192	; 0xc0
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80165b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80165b8:	2200      	movs	r2, #0
 80165ba:	601a      	str	r2, [r3, #0]
 80165bc:	605a      	str	r2, [r3, #4]
 80165be:	609a      	str	r2, [r3, #8]
 80165c0:	60da      	str	r2, [r3, #12]
 80165c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80165c4:	f107 031c 	add.w	r3, r7, #28
 80165c8:	2290      	movs	r2, #144	; 0x90
 80165ca:	2100      	movs	r1, #0
 80165cc:	4618      	mov	r0, r3
 80165ce:	f010 f951 	bl	8026874 <memset>
  if(i2cHandle->Instance==I2C1)
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	4a44      	ldr	r2, [pc, #272]	; (80166e8 <HAL_I2C_MspInit+0x13c>)
 80165d8:	4293      	cmp	r3, r2
 80165da:	d13e      	bne.n	801665a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80165dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80165e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80165e2:	2300      	movs	r3, #0
 80165e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80165e8:	f107 031c 	add.w	r3, r7, #28
 80165ec:	4618      	mov	r0, r3
 80165ee:	f007 fa29 	bl	801da44 <HAL_RCCEx_PeriphCLKConfig>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d001      	beq.n	80165fc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80165f8:	f001 fc20 	bl	8017e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80165fc:	4b3b      	ldr	r3, [pc, #236]	; (80166ec <HAL_I2C_MspInit+0x140>)
 80165fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016600:	4a3a      	ldr	r2, [pc, #232]	; (80166ec <HAL_I2C_MspInit+0x140>)
 8016602:	f043 0302 	orr.w	r3, r3, #2
 8016606:	6313      	str	r3, [r2, #48]	; 0x30
 8016608:	4b38      	ldr	r3, [pc, #224]	; (80166ec <HAL_I2C_MspInit+0x140>)
 801660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801660c:	f003 0302 	and.w	r3, r3, #2
 8016610:	61bb      	str	r3, [r7, #24]
 8016612:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8016614:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8016618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801661c:	2312      	movs	r3, #18
 801661e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016622:	2300      	movs	r3, #0
 8016624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016628:	2303      	movs	r3, #3
 801662a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801662e:	2304      	movs	r3, #4
 8016630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016634:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016638:	4619      	mov	r1, r3
 801663a:	482d      	ldr	r0, [pc, #180]	; (80166f0 <HAL_I2C_MspInit+0x144>)
 801663c:	f005 fd04 	bl	801c048 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8016640:	4b2a      	ldr	r3, [pc, #168]	; (80166ec <HAL_I2C_MspInit+0x140>)
 8016642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016644:	4a29      	ldr	r2, [pc, #164]	; (80166ec <HAL_I2C_MspInit+0x140>)
 8016646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801664a:	6413      	str	r3, [r2, #64]	; 0x40
 801664c:	4b27      	ldr	r3, [pc, #156]	; (80166ec <HAL_I2C_MspInit+0x140>)
 801664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016654:	617b      	str	r3, [r7, #20]
 8016656:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8016658:	e041      	b.n	80166de <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	4a25      	ldr	r2, [pc, #148]	; (80166f4 <HAL_I2C_MspInit+0x148>)
 8016660:	4293      	cmp	r3, r2
 8016662:	d13c      	bne.n	80166de <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8016664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016668:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801666a:	2300      	movs	r3, #0
 801666c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016670:	f107 031c 	add.w	r3, r7, #28
 8016674:	4618      	mov	r0, r3
 8016676:	f007 f9e5 	bl	801da44 <HAL_RCCEx_PeriphCLKConfig>
 801667a:	4603      	mov	r3, r0
 801667c:	2b00      	cmp	r3, #0
 801667e:	d001      	beq.n	8016684 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8016680:	f001 fbdc 	bl	8017e3c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8016684:	4b19      	ldr	r3, [pc, #100]	; (80166ec <HAL_I2C_MspInit+0x140>)
 8016686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016688:	4a18      	ldr	r2, [pc, #96]	; (80166ec <HAL_I2C_MspInit+0x140>)
 801668a:	f043 0320 	orr.w	r3, r3, #32
 801668e:	6313      	str	r3, [r2, #48]	; 0x30
 8016690:	4b16      	ldr	r3, [pc, #88]	; (80166ec <HAL_I2C_MspInit+0x140>)
 8016692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016694:	f003 0320 	and.w	r3, r3, #32
 8016698:	613b      	str	r3, [r7, #16]
 801669a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 801669c:	2303      	movs	r3, #3
 801669e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80166a2:	2312      	movs	r3, #18
 80166a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166a8:	2300      	movs	r3, #0
 80166aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80166ae:	2303      	movs	r3, #3
 80166b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80166b4:	2304      	movs	r3, #4
 80166b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80166ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80166be:	4619      	mov	r1, r3
 80166c0:	480d      	ldr	r0, [pc, #52]	; (80166f8 <HAL_I2C_MspInit+0x14c>)
 80166c2:	f005 fcc1 	bl	801c048 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80166c6:	4b09      	ldr	r3, [pc, #36]	; (80166ec <HAL_I2C_MspInit+0x140>)
 80166c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166ca:	4a08      	ldr	r2, [pc, #32]	; (80166ec <HAL_I2C_MspInit+0x140>)
 80166cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80166d0:	6413      	str	r3, [r2, #64]	; 0x40
 80166d2:	4b06      	ldr	r3, [pc, #24]	; (80166ec <HAL_I2C_MspInit+0x140>)
 80166d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80166da:	60fb      	str	r3, [r7, #12]
 80166dc:	68fb      	ldr	r3, [r7, #12]
}
 80166de:	bf00      	nop
 80166e0:	37c0      	adds	r7, #192	; 0xc0
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd80      	pop	{r7, pc}
 80166e6:	bf00      	nop
 80166e8:	40005400 	.word	0x40005400
 80166ec:	40023800 	.word	0x40023800
 80166f0:	40020400 	.word	0x40020400
 80166f4:	40005800 	.word	0x40005800
 80166f8:	40021400 	.word	0x40021400

080166fc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8016700:	4b0b      	ldr	r3, [pc, #44]	; (8016730 <MX_IWDG_Init+0x34>)
 8016702:	4a0c      	ldr	r2, [pc, #48]	; (8016734 <MX_IWDG_Init+0x38>)
 8016704:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8016706:	4b0a      	ldr	r3, [pc, #40]	; (8016730 <MX_IWDG_Init+0x34>)
 8016708:	2203      	movs	r2, #3
 801670a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 801670c:	4b08      	ldr	r3, [pc, #32]	; (8016730 <MX_IWDG_Init+0x34>)
 801670e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8016712:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 8016714:	4b06      	ldr	r3, [pc, #24]	; (8016730 <MX_IWDG_Init+0x34>)
 8016716:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801671a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 801671c:	4804      	ldr	r0, [pc, #16]	; (8016730 <MX_IWDG_Init+0x34>)
 801671e:	f006 fc9e 	bl	801d05e <HAL_IWDG_Init>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d001      	beq.n	801672c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8016728:	f001 fb88 	bl	8017e3c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 801672c:	bf00      	nop
 801672e:	bd80      	pop	{r7, pc}
 8016730:	2000b46c 	.word	0x2000b46c
 8016734:	40003000 	.word	0x40003000

08016738 <Process_Kyosan_EI>:
#ifdef EI_1
uint8_t SendThisCardRelays = 0;
#endif

void Process_Kyosan_EI(void)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	af00      	add	r7, sp, #0

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 801673c:	4811      	ldr	r0, [pc, #68]	; (8016784 <Process_Kyosan_EI+0x4c>)
 801673e:	f006 fcdd 	bl	801d0fc <HAL_IWDG_Refresh>

		Feed_wdt();
 8016742:	f7ff fe7d 	bl	8016440 <Feed_wdt>

		Get_Kyosan_EI_Message(KYOSAN_PORT);
 8016746:	2003      	movs	r0, #3
 8016748:	f000 f9f4 	bl	8016b34 <Get_Kyosan_EI_Message>

		Process_Send_Signals_2_MIE_Kyosan();
 801674c:	f000 f912 	bl	8016974 <Process_Send_Signals_2_MIE_Kyosan>

		DetectCanXchangeFailure();
 8016750:	f000 f8ce 	bl	80168f0 <DetectCanXchangeFailure>

		Process_ComFailTimeout();
 8016754:	f000 f81c 	bl	8016790 <Process_ComFailTimeout>

		readCanToStructs();
 8016758:	f7fb f9da 	bl	8011b10 <readCanToStructs>

		Check_forKyosanCMD();
 801675c:	f000 fe72 	bl	8017444 <Check_forKyosanCMD>

		SendKyosanRelays2Other();
 8016760:	f000 f8ac 	bl	80168bc <SendKyosanRelays2Other>

		CheckEIPC_DAT_CRC();
 8016764:	f7ea fbf2 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 8016768:	4b07      	ldr	r3, [pc, #28]	; (8016788 <Process_Kyosan_EI+0x50>)
 801676a:	781b      	ldrb	r3, [r3, #0]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d0e5      	beq.n	801673c <Process_Kyosan_EI+0x4>
		{
			gucFlagUpdate = 3;
 8016770:	4b06      	ldr	r3, [pc, #24]	; (801678c <Process_Kyosan_EI+0x54>)
 8016772:	2203      	movs	r2, #3
 8016774:	701a      	strb	r2, [r3, #0]
		}
	}

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8016776:	4803      	ldr	r0, [pc, #12]	; (8016784 <Process_Kyosan_EI+0x4c>)
 8016778:	f006 fcc0 	bl	801d0fc <HAL_IWDG_Refresh>
		Data_Processing();
 801677c:	f001 ffdc 	bl	8018738 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8016780:	e7f9      	b.n	8016776 <Process_Kyosan_EI+0x3e>
 8016782:	bf00      	nop
 8016784:	2000b46c 	.word	0x2000b46c
 8016788:	20000bba 	.word	0x20000bba
 801678c:	20000fbd 	.word	0x20000fbd

08016790 <Process_ComFailTimeout>:
	}
}

void Process_ComFailTimeout(void)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	af00      	add	r7, sp, #0
	if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) > EI_data.Kyosan_st.Comm_Fail_Time)
 8016794:	4b43      	ldr	r3, [pc, #268]	; (80168a4 <Process_ComFailTimeout+0x114>)
 8016796:	685b      	ldr	r3, [r3, #4]
 8016798:	4618      	mov	r0, r3
 801679a:	f7f9 fe2d 	bl	80103f8 <HAL_Elaps_Ticks>
 801679e:	4602      	mov	r2, r0
 80167a0:	4b41      	ldr	r3, [pc, #260]	; (80168a8 <Process_ComFailTimeout+0x118>)
 80167a2:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80167a6:	429a      	cmp	r2, r3
 80167a8:	d82b      	bhi.n	8016802 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 80167aa:	4b3e      	ldr	r3, [pc, #248]	; (80168a4 <Process_ComFailTimeout+0x114>)
 80167ac:	689b      	ldr	r3, [r3, #8]
 80167ae:	4618      	mov	r0, r3
 80167b0:	f7f9 fe22 	bl	80103f8 <HAL_Elaps_Ticks>
 80167b4:	4602      	mov	r2, r0
 80167b6:	4b3c      	ldr	r3, [pc, #240]	; (80168a8 <Process_ComFailTimeout+0x118>)
 80167b8:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80167bc:	429a      	cmp	r2, r3
 80167be:	d820      	bhi.n	8016802 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 80167c0:	4b38      	ldr	r3, [pc, #224]	; (80168a4 <Process_ComFailTimeout+0x114>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7f9 fe17 	bl	80103f8 <HAL_Elaps_Ticks>
 80167ca:	4602      	mov	r2, r0
 80167cc:	4b36      	ldr	r3, [pc, #216]	; (80168a8 <Process_ComFailTimeout+0x118>)
 80167ce:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d815      	bhi.n	8016802 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 80167d6:	4b33      	ldr	r3, [pc, #204]	; (80168a4 <Process_ComFailTimeout+0x114>)
 80167d8:	68db      	ldr	r3, [r3, #12]
 80167da:	4618      	mov	r0, r3
 80167dc:	f7f9 fe0c 	bl	80103f8 <HAL_Elaps_Ticks>
 80167e0:	4602      	mov	r2, r0
 80167e2:	4b31      	ldr	r3, [pc, #196]	; (80168a8 <Process_ComFailTimeout+0x118>)
 80167e4:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80167e8:	429a      	cmp	r2, r3
 80167ea:	d80a      	bhi.n	8016802 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time))
 80167ec:	4b2d      	ldr	r3, [pc, #180]	; (80168a4 <Process_ComFailTimeout+0x114>)
 80167ee:	691b      	ldr	r3, [r3, #16]
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7f9 fe01 	bl	80103f8 <HAL_Elaps_Ticks>
 80167f6:	4602      	mov	r2, r0
 80167f8:	4b2b      	ldr	r3, [pc, #172]	; (80168a8 <Process_ComFailTimeout+0x118>)
 80167fa:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80167fe:	429a      	cmp	r2, r3
 8016800:	d913      	bls.n	801682a <Process_ComFailTimeout+0x9a>
	{

		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 8016802:	492a      	ldr	r1, [pc, #168]	; (80168ac <Process_ComFailTimeout+0x11c>)
 8016804:	482a      	ldr	r0, [pc, #168]	; (80168b0 <Process_ComFailTimeout+0x120>)
 8016806:	f7e9 fd1b 	bl	8000240 <strcmp>
 801680a:	4603      	mov	r3, r0
 801680c:	2b00      	cmp	r3, #0
 801680e:	d047      	beq.n	80168a0 <Process_ComFailTimeout+0x110>
			return;
		}



		if(Kyosan_SelfRelays.Message_Receiving == SET)
 8016810:	4b28      	ldr	r3, [pc, #160]	; (80168b4 <Process_ComFailTimeout+0x124>)
 8016812:	785b      	ldrb	r3, [r3, #1]
 8016814:	2b01      	cmp	r3, #1
 8016816:	d144      	bne.n	80168a2 <Process_ComFailTimeout+0x112>
		{
			printf("Time out for Message Packets Reached\n");
 8016818:	4827      	ldr	r0, [pc, #156]	; (80168b8 <Process_ComFailTimeout+0x128>)
 801681a:	f010 f9af 	bl	8026b7c <puts>
			memset(&Kyosan_SelfRelays,0,sizeof(KYOSAN_RELAYS_t));
 801681e:	2240      	movs	r2, #64	; 0x40
 8016820:	2100      	movs	r1, #0
 8016822:	4824      	ldr	r0, [pc, #144]	; (80168b4 <Process_ComFailTimeout+0x124>)
 8016824:	f010 f826 	bl	8026874 <memset>
		if(Kyosan_SelfRelays.Message_Receiving == SET)
 8016828:	e03b      	b.n	80168a2 <Process_ComFailTimeout+0x112>
		}
	}
	else if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) < EI_data.Kyosan_st.Comm_Fail_Time)
 801682a:	4b1e      	ldr	r3, [pc, #120]	; (80168a4 <Process_ComFailTimeout+0x114>)
 801682c:	685b      	ldr	r3, [r3, #4]
 801682e:	4618      	mov	r0, r3
 8016830:	f7f9 fde2 	bl	80103f8 <HAL_Elaps_Ticks>
 8016834:	4602      	mov	r2, r0
 8016836:	4b1c      	ldr	r3, [pc, #112]	; (80168a8 <Process_ComFailTimeout+0x118>)
 8016838:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801683c:	429a      	cmp	r2, r3
 801683e:	d230      	bcs.n	80168a2 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8016840:	4b18      	ldr	r3, [pc, #96]	; (80168a4 <Process_ComFailTimeout+0x114>)
 8016842:	689b      	ldr	r3, [r3, #8]
 8016844:	4618      	mov	r0, r3
 8016846:	f7f9 fdd7 	bl	80103f8 <HAL_Elaps_Ticks>
 801684a:	4602      	mov	r2, r0
 801684c:	4b16      	ldr	r3, [pc, #88]	; (80168a8 <Process_ComFailTimeout+0x118>)
 801684e:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016852:	429a      	cmp	r2, r3
 8016854:	d225      	bcs.n	80168a2 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8016856:	4b13      	ldr	r3, [pc, #76]	; (80168a4 <Process_ComFailTimeout+0x114>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	4618      	mov	r0, r3
 801685c:	f7f9 fdcc 	bl	80103f8 <HAL_Elaps_Ticks>
 8016860:	4602      	mov	r2, r0
 8016862:	4b11      	ldr	r3, [pc, #68]	; (80168a8 <Process_ComFailTimeout+0x118>)
 8016864:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016868:	429a      	cmp	r2, r3
 801686a:	d21a      	bcs.n	80168a2 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 801686c:	4b0d      	ldr	r3, [pc, #52]	; (80168a4 <Process_ComFailTimeout+0x114>)
 801686e:	68db      	ldr	r3, [r3, #12]
 8016870:	4618      	mov	r0, r3
 8016872:	f7f9 fdc1 	bl	80103f8 <HAL_Elaps_Ticks>
 8016876:	4602      	mov	r2, r0
 8016878:	4b0b      	ldr	r3, [pc, #44]	; (80168a8 <Process_ComFailTimeout+0x118>)
 801687a:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801687e:	429a      	cmp	r2, r3
 8016880:	d20f      	bcs.n	80168a2 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time))
 8016882:	4b08      	ldr	r3, [pc, #32]	; (80168a4 <Process_ComFailTimeout+0x114>)
 8016884:	691b      	ldr	r3, [r3, #16]
 8016886:	4618      	mov	r0, r3
 8016888:	f7f9 fdb6 	bl	80103f8 <HAL_Elaps_Ticks>
 801688c:	4602      	mov	r2, r0
 801688e:	4b06      	ldr	r3, [pc, #24]	; (80168a8 <Process_ComFailTimeout+0x118>)
 8016890:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016894:	429a      	cmp	r2, r3
 8016896:	d204      	bcs.n	80168a2 <Process_ComFailTimeout+0x112>

	{
		Kyosan_SelfRelays.Message_Receiving = SET;
 8016898:	4b06      	ldr	r3, [pc, #24]	; (80168b4 <Process_ComFailTimeout+0x124>)
 801689a:	2201      	movs	r2, #1
 801689c:	705a      	strb	r2, [r3, #1]
 801689e:	e000      	b.n	80168a2 <Process_ComFailTimeout+0x112>
			return;
 80168a0:	bf00      	nop
	}
}
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	2000b484 	.word	0x2000b484
 80168a8:	20000504 	.word	0x20000504
 80168ac:	0802b84c 	.word	0x0802b84c
 80168b0:	20000505 	.word	0x20000505
 80168b4:	2000b498 	.word	0x2000b498
 80168b8:	0802b858 	.word	0x0802b858

080168bc <SendKyosanRelays2Other>:
		RelayMisMatchCnt = RESET;
	}
}

void SendKyosanRelays2Other(void)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	af00      	add	r7, sp, #0
	static uint32_t RelaySendingClk = 0;
	if(HAL_Elaps_Ticks(RelaySendingClk) > 3000)
 80168c0:	4b0a      	ldr	r3, [pc, #40]	; (80168ec <SendKyosanRelays2Other+0x30>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7f9 fd97 	bl	80103f8 <HAL_Elaps_Ticks>
 80168ca:	4603      	mov	r3, r0
 80168cc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80168d0:	4293      	cmp	r3, r2
 80168d2:	d908      	bls.n	80168e6 <SendKyosanRelays2Other+0x2a>
	{
#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 80168d4:	f240 2007 	movw	r0, #519	; 0x207
 80168d8:	f7fa fb42 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		RelaySendingClk = HAL_GetTick();
 80168dc:	f003 f8a8 	bl	8019a30 <HAL_GetTick>
 80168e0:	4603      	mov	r3, r0
 80168e2:	4a02      	ldr	r2, [pc, #8]	; (80168ec <SendKyosanRelays2Other+0x30>)
 80168e4:	6013      	str	r3, [r2, #0]
	}
}
 80168e6:	bf00      	nop
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	2000b9d0 	.word	0x2000b9d0

080168f0 <DetectCanXchangeFailure>:

void DetectCanXchangeFailure(void)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	af00      	add	r7, sp, #0
	static uint32_t S2_BlinkClk = 0;

	if( (HAL_Elaps_Ticks(LastCANReceived_Clk_Kyosan) > EI_data.Kyosan_st.CAN_Fail_Clk) && (Is_CAN_Exchange_happening != RESET ))
 80168f4:	4b18      	ldr	r3, [pc, #96]	; (8016958 <DetectCanXchangeFailure+0x68>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7f9 fd7d 	bl	80103f8 <HAL_Elaps_Ticks>
 80168fe:	4602      	mov	r2, r0
 8016900:	4b16      	ldr	r3, [pc, #88]	; (801695c <DetectCanXchangeFailure+0x6c>)
 8016902:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8016906:	429a      	cmp	r2, r3
 8016908:	d912      	bls.n	8016930 <DetectCanXchangeFailure+0x40>
 801690a:	4b15      	ldr	r3, [pc, #84]	; (8016960 <DetectCanXchangeFailure+0x70>)
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d00e      	beq.n	8016930 <DetectCanXchangeFailure+0x40>
	{
		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 8016912:	4914      	ldr	r1, [pc, #80]	; (8016964 <DetectCanXchangeFailure+0x74>)
 8016914:	4814      	ldr	r0, [pc, #80]	; (8016968 <DetectCanXchangeFailure+0x78>)
 8016916:	f7e9 fc93 	bl	8000240 <strcmp>
 801691a:	4603      	mov	r3, r0
 801691c:	2b00      	cmp	r3, #0
 801691e:	d103      	bne.n	8016928 <DetectCanXchangeFailure+0x38>
		{
			Is_CAN_Exchange_happening = SET;
 8016920:	4b0f      	ldr	r3, [pc, #60]	; (8016960 <DetectCanXchangeFailure+0x70>)
 8016922:	2201      	movs	r2, #1
 8016924:	701a      	strb	r2, [r3, #0]
			return;
 8016926:	e016      	b.n	8016956 <DetectCanXchangeFailure+0x66>
		}

		Is_CAN_Exchange_happening = RESET;
 8016928:	4b0d      	ldr	r3, [pc, #52]	; (8016960 <DetectCanXchangeFailure+0x70>)
 801692a:	2200      	movs	r2, #0
 801692c:	701a      	strb	r2, [r3, #0]
 801692e:	e012      	b.n	8016956 <DetectCanXchangeFailure+0x66>
	}
	else
	{
		if(HAL_Elaps_Ticks(S2_BlinkClk) > 300)
 8016930:	4b0e      	ldr	r3, [pc, #56]	; (801696c <DetectCanXchangeFailure+0x7c>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	4618      	mov	r0, r3
 8016936:	f7f9 fd5f 	bl	80103f8 <HAL_Elaps_Ticks>
 801693a:	4603      	mov	r3, r0
 801693c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016940:	d909      	bls.n	8016956 <DetectCanXchangeFailure+0x66>
		{
			S2_BlinkClk = HAL_GetTick();
 8016942:	f003 f875 	bl	8019a30 <HAL_GetTick>
 8016946:	4603      	mov	r3, r0
 8016948:	4a08      	ldr	r2, [pc, #32]	; (801696c <DetectCanXchangeFailure+0x7c>)
 801694a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 801694c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016950:	4807      	ldr	r0, [pc, #28]	; (8016970 <DetectCanXchangeFailure+0x80>)
 8016952:	f005 fd56 	bl	801c402 <HAL_GPIO_TogglePin>
		}

	}
}
 8016956:	bd80      	pop	{r7, pc}
 8016958:	2000b5dc 	.word	0x2000b5dc
 801695c:	20000504 	.word	0x20000504
 8016960:	2000030b 	.word	0x2000030b
 8016964:	0802b84c 	.word	0x0802b84c
 8016968:	20000505 	.word	0x20000505
 801696c:	2000b9d4 	.word	0x2000b9d4
 8016970:	40021c00 	.word	0x40021c00

08016974 <Process_Send_Signals_2_MIE_Kyosan>:

void Process_Send_Signals_2_MIE_Kyosan(void)
{
 8016974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016976:	b083      	sub	sp, #12
 8016978:	af00      	add	r7, sp, #0
	uint8_t Choice =0;
 801697a:	2300      	movs	r3, #0
 801697c:	71fb      	strb	r3, [r7, #7]

	if(HAL_Elaps_Ticks(MIE_SignalsSending_Clk_Kyosan) > EI_data.Kyosan_st.MIE_SEND_CLK)
 801697e:	4b62      	ldr	r3, [pc, #392]	; (8016b08 <Process_Send_Signals_2_MIE_Kyosan+0x194>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	4618      	mov	r0, r3
 8016984:	f7f9 fd38 	bl	80103f8 <HAL_Elaps_Ticks>
 8016988:	4602      	mov	r2, r0
 801698a:	4b60      	ldr	r3, [pc, #384]	; (8016b0c <Process_Send_Signals_2_MIE_Kyosan+0x198>)
 801698c:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8016990:	429a      	cmp	r2, r3
 8016992:	f240 80b5 	bls.w	8016b00 <Process_Send_Signals_2_MIE_Kyosan+0x18c>
	{
#ifdef EI_1
		if((Is_CAN_Exchange_happening == SET) && (MisMatchFlagKyosan == RESET) )
 8016996:	4b5e      	ldr	r3, [pc, #376]	; (8016b10 <Process_Send_Signals_2_MIE_Kyosan+0x19c>)
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	2b01      	cmp	r3, #1
 801699c:	f040 80a2 	bne.w	8016ae4 <Process_Send_Signals_2_MIE_Kyosan+0x170>
 80169a0:	4b5c      	ldr	r3, [pc, #368]	; (8016b14 <Process_Send_Signals_2_MIE_Kyosan+0x1a0>)
 80169a2:	781b      	ldrb	r3, [r3, #0]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	f040 809d 	bne.w	8016ae4 <Process_Send_Signals_2_MIE_Kyosan+0x170>
		{

			Choice = 0;
 80169aa:	2300      	movs	r3, #0
 80169ac:	71fb      	strb	r3, [r7, #7]
			(Kyosan_OtherRelays.Message_Receiving == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 80169ae:	4b5a      	ldr	r3, [pc, #360]	; (8016b18 <Process_Send_Signals_2_MIE_Kyosan+0x1a4>)
 80169b0:	785b      	ldrb	r3, [r3, #1]
 80169b2:	2b01      	cmp	r3, #1
 80169b4:	d104      	bne.n	80169c0 <Process_Send_Signals_2_MIE_Kyosan+0x4c>
 80169b6:	79fb      	ldrb	r3, [r7, #7]
 80169b8:	f043 0301 	orr.w	r3, r3, #1
 80169bc:	71fb      	strb	r3, [r7, #7]
 80169be:	e003      	b.n	80169c8 <Process_Send_Signals_2_MIE_Kyosan+0x54>
 80169c0:	79fb      	ldrb	r3, [r7, #7]
 80169c2:	f023 0301 	bic.w	r3, r3, #1
 80169c6:	71fb      	strb	r3, [r7, #7]
			(Kyosan_SelfRelays.Message_Receiving == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 80169c8:	4b54      	ldr	r3, [pc, #336]	; (8016b1c <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 80169ca:	785b      	ldrb	r3, [r3, #1]
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d104      	bne.n	80169da <Process_Send_Signals_2_MIE_Kyosan+0x66>
 80169d0:	79fb      	ldrb	r3, [r7, #7]
 80169d2:	f043 0302 	orr.w	r3, r3, #2
 80169d6:	71fb      	strb	r3, [r7, #7]
 80169d8:	e003      	b.n	80169e2 <Process_Send_Signals_2_MIE_Kyosan+0x6e>
 80169da:	79fb      	ldrb	r3, [r7, #7]
 80169dc:	f023 0302 	bic.w	r3, r3, #2
 80169e0:	71fb      	strb	r3, [r7, #7]

			switch(Choice)
 80169e2:	79fb      	ldrb	r3, [r7, #7]
 80169e4:	2b01      	cmp	r3, #1
 80169e6:	d005      	beq.n	80169f4 <Process_Send_Signals_2_MIE_Kyosan+0x80>
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	dd45      	ble.n	8016a78 <Process_Send_Signals_2_MIE_Kyosan+0x104>
 80169ec:	3b02      	subs	r3, #2
 80169ee:	2b01      	cmp	r3, #1
 80169f0:	d842      	bhi.n	8016a78 <Process_Send_Signals_2_MIE_Kyosan+0x104>
 80169f2:	e020      	b.n	8016a36 <Process_Send_Signals_2_MIE_Kyosan+0xc2>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_OtherRelays.Relays,MAX_KYOSAN_RELAYS);
 80169f4:	4a4a      	ldr	r2, [pc, #296]	; (8016b20 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 80169f6:	4b48      	ldr	r3, [pc, #288]	; (8016b18 <Process_Send_Signals_2_MIE_Kyosan+0x1a4>)
 80169f8:	3302      	adds	r3, #2
 80169fa:	1c90      	adds	r0, r2, #2
 80169fc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016a00:	4602      	mov	r2, r0
 8016a02:	4619      	mov	r1, r3
 8016a04:	f8d1 c000 	ldr.w	ip, [r1]
 8016a08:	684e      	ldr	r6, [r1, #4]
 8016a0a:	688d      	ldr	r5, [r1, #8]
 8016a0c:	68c9      	ldr	r1, [r1, #12]
 8016a0e:	f8c2 c000 	str.w	ip, [r2]
 8016a12:	6056      	str	r6, [r2, #4]
 8016a14:	6095      	str	r5, [r2, #8]
 8016a16:	60d1      	str	r1, [r2, #12]
 8016a18:	3310      	adds	r3, #16
 8016a1a:	3010      	adds	r0, #16
 8016a1c:	42a3      	cmp	r3, r4
 8016a1e:	d1ef      	bne.n	8016a00 <Process_Send_Signals_2_MIE_Kyosan+0x8c>
 8016a20:	4602      	mov	r2, r0
 8016a22:	6818      	ldr	r0, [r3, #0]
 8016a24:	6859      	ldr	r1, [r3, #4]
 8016a26:	689b      	ldr	r3, [r3, #8]
 8016a28:	6010      	str	r0, [r2, #0]
 8016a2a:	6051      	str	r1, [r2, #4]
 8016a2c:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = RESET;
 8016a2e:	4b3d      	ldr	r3, [pc, #244]	; (8016b24 <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 8016a30:	2200      	movs	r2, #0
 8016a32:	701a      	strb	r2, [r3, #0]
#endif
				break;
 8016a34:	e028      	b.n	8016a88 <Process_Send_Signals_2_MIE_Kyosan+0x114>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_SelfRelays.Relays,MAX_KYOSAN_RELAYS);
 8016a36:	4a3a      	ldr	r2, [pc, #232]	; (8016b20 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8016a38:	4b38      	ldr	r3, [pc, #224]	; (8016b1c <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 8016a3a:	3302      	adds	r3, #2
 8016a3c:	1c90      	adds	r0, r2, #2
 8016a3e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016a42:	4602      	mov	r2, r0
 8016a44:	4619      	mov	r1, r3
 8016a46:	f8d1 c000 	ldr.w	ip, [r1]
 8016a4a:	684e      	ldr	r6, [r1, #4]
 8016a4c:	688d      	ldr	r5, [r1, #8]
 8016a4e:	68c9      	ldr	r1, [r1, #12]
 8016a50:	f8c2 c000 	str.w	ip, [r2]
 8016a54:	6056      	str	r6, [r2, #4]
 8016a56:	6095      	str	r5, [r2, #8]
 8016a58:	60d1      	str	r1, [r2, #12]
 8016a5a:	3310      	adds	r3, #16
 8016a5c:	3010      	adds	r0, #16
 8016a5e:	42a3      	cmp	r3, r4
 8016a60:	d1ef      	bne.n	8016a42 <Process_Send_Signals_2_MIE_Kyosan+0xce>
 8016a62:	4602      	mov	r2, r0
 8016a64:	6818      	ldr	r0, [r3, #0]
 8016a66:	6859      	ldr	r1, [r3, #4]
 8016a68:	689b      	ldr	r3, [r3, #8]
 8016a6a:	6010      	str	r0, [r2, #0]
 8016a6c:	6051      	str	r1, [r2, #4]
 8016a6e:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = SET;
 8016a70:	4b2c      	ldr	r3, [pc, #176]	; (8016b24 <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 8016a72:	2201      	movs	r2, #1
 8016a74:	701a      	strb	r2, [r3, #0]
#endif
				break;
 8016a76:	e007      	b.n	8016a88 <Process_Send_Signals_2_MIE_Kyosan+0x114>

			default:
				memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 8016a78:	2240      	movs	r2, #64	; 0x40
 8016a7a:	2100      	movs	r1, #0
 8016a7c:	4828      	ldr	r0, [pc, #160]	; (8016b20 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8016a7e:	f00f fef9 	bl	8026874 <memset>
#ifdef EI_1
				SendThisCardRelays = RESET;
 8016a82:	4b28      	ldr	r3, [pc, #160]	; (8016b24 <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 8016a84:	2200      	movs	r2, #0
 8016a86:	701a      	strb	r2, [r3, #0]
#endif
			}

			printf("Data Sending 2 MIE:\n");
 8016a88:	4827      	ldr	r0, [pc, #156]	; (8016b28 <Process_Send_Signals_2_MIE_Kyosan+0x1b4>)
 8016a8a:	f010 f877 	bl	8026b7c <puts>
			for(uint8_t i=0;i<60;++i)
 8016a8e:	2300      	movs	r3, #0
 8016a90:	71bb      	strb	r3, [r7, #6]
 8016a92:	e01c      	b.n	8016ace <Process_Send_Signals_2_MIE_Kyosan+0x15a>
			{
				printf("%02X ",Kyosan_FinalRelays.Relays[i]);
 8016a94:	79bb      	ldrb	r3, [r7, #6]
 8016a96:	4a22      	ldr	r2, [pc, #136]	; (8016b20 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8016a98:	4413      	add	r3, r2
 8016a9a:	789b      	ldrb	r3, [r3, #2]
 8016a9c:	4619      	mov	r1, r3
 8016a9e:	4823      	ldr	r0, [pc, #140]	; (8016b2c <Process_Send_Signals_2_MIE_Kyosan+0x1b8>)
 8016aa0:	f00f ffd0 	bl	8026a44 <iprintf>

				if(((i+1)%10)==0)
 8016aa4:	79bb      	ldrb	r3, [r7, #6]
 8016aa6:	1c59      	adds	r1, r3, #1
 8016aa8:	4b21      	ldr	r3, [pc, #132]	; (8016b30 <Process_Send_Signals_2_MIE_Kyosan+0x1bc>)
 8016aaa:	fb83 2301 	smull	r2, r3, r3, r1
 8016aae:	109a      	asrs	r2, r3, #2
 8016ab0:	17cb      	asrs	r3, r1, #31
 8016ab2:	1ad2      	subs	r2, r2, r3
 8016ab4:	4613      	mov	r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	4413      	add	r3, r2
 8016aba:	005b      	lsls	r3, r3, #1
 8016abc:	1aca      	subs	r2, r1, r3
 8016abe:	2a00      	cmp	r2, #0
 8016ac0:	d102      	bne.n	8016ac8 <Process_Send_Signals_2_MIE_Kyosan+0x154>
				{
					printf("\n");
 8016ac2:	200a      	movs	r0, #10
 8016ac4:	f00f ffd6 	bl	8026a74 <putchar>
			for(uint8_t i=0;i<60;++i)
 8016ac8:	79bb      	ldrb	r3, [r7, #6]
 8016aca:	3301      	adds	r3, #1
 8016acc:	71bb      	strb	r3, [r7, #6]
 8016ace:	79bb      	ldrb	r3, [r7, #6]
 8016ad0:	2b3b      	cmp	r3, #59	; 0x3b
 8016ad2:	d9df      	bls.n	8016a94 <Process_Send_Signals_2_MIE_Kyosan+0x120>
				}
			}
			printf("\n");
 8016ad4:	200a      	movs	r0, #10
 8016ad6:	f00f ffcd 	bl	8026a74 <putchar>
//			PrintSignalsKyosan();


			TransmitCanPkt(EI_PROCESS_DATA);
 8016ada:	f240 1019 	movw	r0, #281	; 0x119
 8016ade:	f7fa fa3f 	bl	8010f60 <TransmitCanPkt>
 8016ae2:	e008      	b.n	8016af6 <Process_Send_Signals_2_MIE_Kyosan+0x182>
		}
		else
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 8016ae4:	2240      	movs	r2, #64	; 0x40
 8016ae6:	2100      	movs	r1, #0
 8016ae8:	480d      	ldr	r0, [pc, #52]	; (8016b20 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 8016aea:	f00f fec3 	bl	8026874 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8016aee:	f240 1019 	movw	r0, #281	; 0x119
 8016af2:	f7fa fa35 	bl	8010f60 <TransmitCanPkt>
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
			TransmitCanPkt(EI_PROCESS_DATA);
		}
#endif
		MIE_SignalsSending_Clk_Kyosan = HAL_GetTick();
 8016af6:	f002 ff9b 	bl	8019a30 <HAL_GetTick>
 8016afa:	4603      	mov	r3, r0
 8016afc:	4a02      	ldr	r2, [pc, #8]	; (8016b08 <Process_Send_Signals_2_MIE_Kyosan+0x194>)
 8016afe:	6013      	str	r3, [r2, #0]
	}
}
 8016b00:	bf00      	nop
 8016b02:	370c      	adds	r7, #12
 8016b04:	46bd      	mov	sp, r7
 8016b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b08:	2000b5d8 	.word	0x2000b5d8
 8016b0c:	20000504 	.word	0x20000504
 8016b10:	2000030b 	.word	0x2000030b
 8016b14:	2000b5e0 	.word	0x2000b5e0
 8016b18:	2000b4d8 	.word	0x2000b4d8
 8016b1c:	2000b498 	.word	0x2000b498
 8016b20:	2000b558 	.word	0x2000b558
 8016b24:	2000b9cd 	.word	0x2000b9cd
 8016b28:	0802b880 	.word	0x0802b880
 8016b2c:	0802b894 	.word	0x0802b894
 8016b30:	66666667 	.word	0x66666667

08016b34 <Get_Kyosan_EI_Message>:

void Get_Kyosan_EI_Message(uint8_t ComPort)
{
 8016b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b36:	b089      	sub	sp, #36	; 0x24
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	737b      	strb	r3, [r7, #13]
	static uint16_t Cur_Receive_Length = 0;
	static uint8_t Buffer[256] = {0,};
	static uint8_t Curnt_ProcessingDataType = 0;
	static uint8_t Control_DataReceived = RESET;
	static uint32_t Last_ValidControlInfoClk = 0;
	uint16_t C_CRC = 0;
 8016b42:	2300      	movs	r3, #0
 8016b44:	817b      	strh	r3, [r7, #10]
	uint16_t R_CRC = 0;
 8016b46:	2300      	movs	r3, #0
 8016b48:	83fb      	strh	r3, [r7, #30]
#ifdef EI_1
	static uint16_t PrevRelayCRC = 0;
#endif
	static uint8_t ControlData_Positive[256] = {0,};
	static uint8_t ControlData_Negative[256] = {0,};
	uint8_t Pos_NegDataMisMatch = RESET;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	777b      	strb	r3, [r7, #29]
	static uint8_t Pos_NegDataMisMatch_Count = RESET;
	uint8_t TypeofDataMisMatch = RESET;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	773b      	strb	r3, [r7, #28]
	uint8_t ControlID = 0;
 8016b52:	2300      	movs	r3, #0
 8016b54:	727b      	strb	r3, [r7, #9]



	if((HAL_Elaps_Ticks(Last_ValidControlInfoClk) >= EI_data.Kyosan_st.Comm_Fail_Time) && (Control_DataReceived == SET))
 8016b56:	4b33      	ldr	r3, [pc, #204]	; (8016c24 <Get_Kyosan_EI_Message+0xf0>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7f9 fc4c 	bl	80103f8 <HAL_Elaps_Ticks>
 8016b60:	4602      	mov	r2, r0
 8016b62:	4b31      	ldr	r3, [pc, #196]	; (8016c28 <Get_Kyosan_EI_Message+0xf4>)
 8016b64:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	f0c0 8407 	bcc.w	801737c <Get_Kyosan_EI_Message+0x848>
 8016b6e:	4b2f      	ldr	r3, [pc, #188]	; (8016c2c <Get_Kyosan_EI_Message+0xf8>)
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	2b01      	cmp	r3, #1
 8016b74:	f040 8402 	bne.w	801737c <Get_Kyosan_EI_Message+0x848>
	{
		Control_DataReceived = RESET;
 8016b78:	4b2c      	ldr	r3, [pc, #176]	; (8016c2c <Get_Kyosan_EI_Message+0xf8>)
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	701a      	strb	r2, [r3, #0]
	}

	while(Com_DataReady(ComPort))
 8016b7e:	e3fd      	b.n	801737c <Get_Kyosan_EI_Message+0x848>
	{
		Data = Com_Get_Byte(ComPort);
 8016b80:	79fb      	ldrb	r3, [r7, #7]
 8016b82:	4618      	mov	r0, r3
 8016b84:	f002 fc2c 	bl	80193e0 <Com_Get_Byte>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	737b      	strb	r3, [r7, #13]
		//		printf("%02X ",Data);

		if((Cur_Receive_Length == Max_Receive_Length) || (Cur_Receive_Length == RESET))
 8016b8c:	4b28      	ldr	r3, [pc, #160]	; (8016c30 <Get_Kyosan_EI_Message+0xfc>)
 8016b8e:	881a      	ldrh	r2, [r3, #0]
 8016b90:	4b28      	ldr	r3, [pc, #160]	; (8016c34 <Get_Kyosan_EI_Message+0x100>)
 8016b92:	881b      	ldrh	r3, [r3, #0]
 8016b94:	429a      	cmp	r2, r3
 8016b96:	d003      	beq.n	8016ba0 <Get_Kyosan_EI_Message+0x6c>
 8016b98:	4b25      	ldr	r3, [pc, #148]	; (8016c30 <Get_Kyosan_EI_Message+0xfc>)
 8016b9a:	881b      	ldrh	r3, [r3, #0]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d139      	bne.n	8016c14 <Get_Kyosan_EI_Message+0xe0>
		{
			memset(Buffer,0,sizeof(Buffer));
 8016ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016ba4:	2100      	movs	r1, #0
 8016ba6:	4824      	ldr	r0, [pc, #144]	; (8016c38 <Get_Kyosan_EI_Message+0x104>)
 8016ba8:	f00f fe64 	bl	8026874 <memset>
			Cur_Receive_Length = RESET;
 8016bac:	4b20      	ldr	r3, [pc, #128]	; (8016c30 <Get_Kyosan_EI_Message+0xfc>)
 8016bae:	2200      	movs	r2, #0
 8016bb0:	801a      	strh	r2, [r3, #0]

			switch(Data)
 8016bb2:	7b7b      	ldrb	r3, [r7, #13]
 8016bb4:	2b01      	cmp	r3, #1
 8016bb6:	d001      	beq.n	8016bbc <Get_Kyosan_EI_Message+0x88>
 8016bb8:	2bfe      	cmp	r3, #254	; 0xfe
 8016bba:	d113      	bne.n	8016be4 <Get_Kyosan_EI_Message+0xb0>
			{
			case ACTUAL_CONTROL_DATA:
			case COMPLIMENT_CONTROL_DATA:
				Max_Receive_Length = (	EI_data.Kyosan_st.No_ofFrames * 64);
 8016bbc:	4b1a      	ldr	r3, [pc, #104]	; (8016c28 <Get_Kyosan_EI_Message+0xf4>)
 8016bbe:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8016bc2:	b29b      	uxth	r3, r3
 8016bc4:	019b      	lsls	r3, r3, #6
 8016bc6:	b29a      	uxth	r2, r3
 8016bc8:	4b1a      	ldr	r3, [pc, #104]	; (8016c34 <Get_Kyosan_EI_Message+0x100>)
 8016bca:	801a      	strh	r2, [r3, #0]
				if(EI_data.Kyosan_st.No_ofFrames == 4)
 8016bcc:	4b16      	ldr	r3, [pc, #88]	; (8016c28 <Get_Kyosan_EI_Message+0xf4>)
 8016bce:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8016bd2:	2b04      	cmp	r3, #4
 8016bd4:	d102      	bne.n	8016bdc <Get_Kyosan_EI_Message+0xa8>
				{
					Max_Receive_Length = 192;
 8016bd6:	4b17      	ldr	r3, [pc, #92]	; (8016c34 <Get_Kyosan_EI_Message+0x100>)
 8016bd8:	22c0      	movs	r2, #192	; 0xc0
 8016bda:	801a      	strh	r2, [r3, #0]
				}
				Curnt_ProcessingDataType = CONTROL_DATA;
 8016bdc:	4b17      	ldr	r3, [pc, #92]	; (8016c3c <Get_Kyosan_EI_Message+0x108>)
 8016bde:	2201      	movs	r2, #1
 8016be0:	701a      	strb	r2, [r3, #0]
				//				printf("Received Ctrl Data|");
				break;
 8016be2:	e017      	b.n	8016c14 <Get_Kyosan_EI_Message+0xe0>

			default:

				/* Polling Data Range (0x11-0x7f for Positive data) (0x80-0xEE for Negative data)*/
				/* Control_DataReceived checking is added to Avoid Control information data to be processed as Polling Information */
				if( (Control_DataReceived == SET) && (((Data >= 0X11 ) && (Data <= 0X7F)) || ((Data >= 0X80 ) && (Data <= 0XEE))) )
 8016be4:	4b11      	ldr	r3, [pc, #68]	; (8016c2c <Get_Kyosan_EI_Message+0xf8>)
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	2b01      	cmp	r3, #1
 8016bea:	d113      	bne.n	8016c14 <Get_Kyosan_EI_Message+0xe0>
 8016bec:	7b7b      	ldrb	r3, [r7, #13]
 8016bee:	2b10      	cmp	r3, #16
 8016bf0:	d903      	bls.n	8016bfa <Get_Kyosan_EI_Message+0xc6>
 8016bf2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	da06      	bge.n	8016c08 <Get_Kyosan_EI_Message+0xd4>
 8016bfa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	da08      	bge.n	8016c14 <Get_Kyosan_EI_Message+0xe0>
 8016c02:	7b7b      	ldrb	r3, [r7, #13]
 8016c04:	2bee      	cmp	r3, #238	; 0xee
 8016c06:	d805      	bhi.n	8016c14 <Get_Kyosan_EI_Message+0xe0>
				{
					/* Consider the data as Polling Data */
					//					printf("Received Polling Data:%u|%02X\n",Control_DataReceived,Data);
					Curnt_ProcessingDataType = POLLING_DATA;
 8016c08:	4b0c      	ldr	r3, [pc, #48]	; (8016c3c <Get_Kyosan_EI_Message+0x108>)
 8016c0a:	2202      	movs	r2, #2
 8016c0c:	701a      	strb	r2, [r3, #0]
					Max_Receive_Length = 3;
 8016c0e:	4b09      	ldr	r3, [pc, #36]	; (8016c34 <Get_Kyosan_EI_Message+0x100>)
 8016c10:	2203      	movs	r2, #3
 8016c12:	801a      	strh	r2, [r3, #0]
				}
			}
		}

		switch(Curnt_ProcessingDataType)
 8016c14:	4b09      	ldr	r3, [pc, #36]	; (8016c3c <Get_Kyosan_EI_Message+0x108>)
 8016c16:	781b      	ldrb	r3, [r3, #0]
 8016c18:	2b01      	cmp	r3, #1
 8016c1a:	d011      	beq.n	8016c40 <Get_Kyosan_EI_Message+0x10c>
 8016c1c:	2b02      	cmp	r3, #2
 8016c1e:	f000 82d9 	beq.w	80171d4 <Get_Kyosan_EI_Message+0x6a0>
 8016c22:	e3a8      	b.n	8017376 <Get_Kyosan_EI_Message+0x842>
 8016c24:	2000b9d8 	.word	0x2000b9d8
 8016c28:	20000504 	.word	0x20000504
 8016c2c:	2000b9dc 	.word	0x2000b9dc
 8016c30:	2000b9de 	.word	0x2000b9de
 8016c34:	2000b9e0 	.word	0x2000b9e0
 8016c38:	2000b9e4 	.word	0x2000b9e4
 8016c3c:	2000bae4 	.word	0x2000bae4
		{
		case CONTROL_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 8016c40:	4bae      	ldr	r3, [pc, #696]	; (8016efc <Get_Kyosan_EI_Message+0x3c8>)
 8016c42:	881b      	ldrh	r3, [r3, #0]
 8016c44:	1c5a      	adds	r2, r3, #1
 8016c46:	b291      	uxth	r1, r2
 8016c48:	4aac      	ldr	r2, [pc, #688]	; (8016efc <Get_Kyosan_EI_Message+0x3c8>)
 8016c4a:	8011      	strh	r1, [r2, #0]
 8016c4c:	4619      	mov	r1, r3
 8016c4e:	4aac      	ldr	r2, [pc, #688]	; (8016f00 <Get_Kyosan_EI_Message+0x3cc>)
 8016c50:	7b7b      	ldrb	r3, [r7, #13]
 8016c52:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 8016c54:	4ba9      	ldr	r3, [pc, #676]	; (8016efc <Get_Kyosan_EI_Message+0x3c8>)
 8016c56:	881a      	ldrh	r2, [r3, #0]
 8016c58:	4baa      	ldr	r3, [pc, #680]	; (8016f04 <Get_Kyosan_EI_Message+0x3d0>)
 8016c5a:	881b      	ldrh	r3, [r3, #0]
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	f040 838d 	bne.w	801737c <Get_Kyosan_EI_Message+0x848>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 8016c62:	4ba6      	ldr	r3, [pc, #664]	; (8016efc <Get_Kyosan_EI_Message+0x3c8>)
 8016c64:	881b      	ldrh	r3, [r3, #0]
 8016c66:	3b02      	subs	r3, #2
 8016c68:	4619      	mov	r1, r3
 8016c6a:	48a5      	ldr	r0, [pc, #660]	; (8016f00 <Get_Kyosan_EI_Message+0x3cc>)
 8016c6c:	f000 fbae 	bl	80173cc <Calc_Kysoan_CRC>
 8016c70:	4603      	mov	r3, r0
 8016c72:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 8016c74:	4ba1      	ldr	r3, [pc, #644]	; (8016efc <Get_Kyosan_EI_Message+0x3c8>)
 8016c76:	881b      	ldrh	r3, [r3, #0]
 8016c78:	3b02      	subs	r3, #2
 8016c7a:	4aa1      	ldr	r2, [pc, #644]	; (8016f00 <Get_Kyosan_EI_Message+0x3cc>)
 8016c7c:	4413      	add	r3, r2
 8016c7e:	461a      	mov	r2, r3
 8016c80:	2110      	movs	r1, #16
 8016c82:	2000      	movs	r0, #0
 8016c84:	f7e9 fcc6 	bl	8000614 <ExtractBits>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	83fb      	strh	r3, [r7, #30]


				if( (  (CHECKFLAG(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8016c8c:	4b9e      	ldr	r3, [pc, #632]	; (8016f08 <Get_Kyosan_EI_Message+0x3d4>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	f003 0301 	and.w	r3, r3, #1
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d02d      	beq.n	8016cf4 <Get_Kyosan_EI_Message+0x1c0>
 8016c98:	4b99      	ldr	r3, [pc, #612]	; (8016f00 <Get_Kyosan_EI_Message+0x3cc>)
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	b25b      	sxtb	r3, r3
 8016c9e:	11db      	asrs	r3, r3, #7
 8016ca0:	b25b      	sxtb	r3, r3
 8016ca2:	f003 0301 	and.w	r3, r3, #1
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d124      	bne.n	8016cf4 <Get_Kyosan_EI_Message+0x1c0>
				{
					printf("\nInjecting Positive Control Data CRC Failure\n");
 8016caa:	4898      	ldr	r0, [pc, #608]	; (8016f0c <Get_Kyosan_EI_Message+0x3d8>)
 8016cac:	f00f ff66 	bl	8026b7c <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016cb0:	4897      	ldr	r0, [pc, #604]	; (8016f10 <Get_Kyosan_EI_Message+0x3dc>)
 8016cb2:	f007 fb6f 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8016cb6:	4601      	mov	r1, r0
 8016cb8:	4b96      	ldr	r3, [pc, #600]	; (8016f14 <Get_Kyosan_EI_Message+0x3e0>)
 8016cba:	fba3 2301 	umull	r2, r3, r3, r1
 8016cbe:	0bda      	lsrs	r2, r3, #15
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	041b      	lsls	r3, r3, #16
 8016cc4:	1a9b      	subs	r3, r3, r2
 8016cc6:	1aca      	subs	r2, r1, r3
 8016cc8:	4613      	mov	r3, r2
 8016cca:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016ccc:	8bfa      	ldrh	r2, [r7, #30]
 8016cce:	897b      	ldrh	r3, [r7, #10]
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d10f      	bne.n	8016cf4 <Get_Kyosan_EI_Message+0x1c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8016cd4:	488e      	ldr	r0, [pc, #568]	; (8016f10 <Get_Kyosan_EI_Message+0x3dc>)
 8016cd6:	f007 fb5d 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8016cda:	4601      	mov	r1, r0
 8016cdc:	4b8e      	ldr	r3, [pc, #568]	; (8016f18 <Get_Kyosan_EI_Message+0x3e4>)
 8016cde:	fba3 2301 	umull	r2, r3, r3, r1
 8016ce2:	09da      	lsrs	r2, r3, #7
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	021b      	lsls	r3, r3, #8
 8016ce8:	1a9b      	subs	r3, r3, r2
 8016cea:	1aca      	subs	r2, r1, r3
 8016cec:	b293      	uxth	r3, r2
 8016cee:	8bfa      	ldrh	r2, [r7, #30]
 8016cf0:	1ad3      	subs	r3, r2, r3
 8016cf2:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016cf4:	4b84      	ldr	r3, [pc, #528]	; (8016f08 <Get_Kyosan_EI_Message+0x3d4>)
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	085b      	lsrs	r3, r3, #1
 8016cfa:	f003 0301 	and.w	r3, r3, #1
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d02d      	beq.n	8016d5e <Get_Kyosan_EI_Message+0x22a>
 8016d02:	4b7f      	ldr	r3, [pc, #508]	; (8016f00 <Get_Kyosan_EI_Message+0x3cc>)
 8016d04:	781b      	ldrb	r3, [r3, #0]
 8016d06:	b25b      	sxtb	r3, r3
 8016d08:	11db      	asrs	r3, r3, #7
 8016d0a:	b25b      	sxtb	r3, r3
 8016d0c:	f003 0301 	and.w	r3, r3, #1
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d024      	beq.n	8016d5e <Get_Kyosan_EI_Message+0x22a>
				{
					printf("\nInjecting Negative Control Data CRC Failure\n");
 8016d14:	4881      	ldr	r0, [pc, #516]	; (8016f1c <Get_Kyosan_EI_Message+0x3e8>)
 8016d16:	f00f ff31 	bl	8026b7c <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016d1a:	487d      	ldr	r0, [pc, #500]	; (8016f10 <Get_Kyosan_EI_Message+0x3dc>)
 8016d1c:	f007 fb3a 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8016d20:	4601      	mov	r1, r0
 8016d22:	4b7c      	ldr	r3, [pc, #496]	; (8016f14 <Get_Kyosan_EI_Message+0x3e0>)
 8016d24:	fba3 2301 	umull	r2, r3, r3, r1
 8016d28:	0bda      	lsrs	r2, r3, #15
 8016d2a:	4613      	mov	r3, r2
 8016d2c:	041b      	lsls	r3, r3, #16
 8016d2e:	1a9b      	subs	r3, r3, r2
 8016d30:	1aca      	subs	r2, r1, r3
 8016d32:	4613      	mov	r3, r2
 8016d34:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016d36:	8bfa      	ldrh	r2, [r7, #30]
 8016d38:	897b      	ldrh	r3, [r7, #10]
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d10f      	bne.n	8016d5e <Get_Kyosan_EI_Message+0x22a>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8016d3e:	4874      	ldr	r0, [pc, #464]	; (8016f10 <Get_Kyosan_EI_Message+0x3dc>)
 8016d40:	f007 fb28 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8016d44:	4601      	mov	r1, r0
 8016d46:	4b74      	ldr	r3, [pc, #464]	; (8016f18 <Get_Kyosan_EI_Message+0x3e4>)
 8016d48:	fba3 2301 	umull	r2, r3, r3, r1
 8016d4c:	09da      	lsrs	r2, r3, #7
 8016d4e:	4613      	mov	r3, r2
 8016d50:	021b      	lsls	r3, r3, #8
 8016d52:	1a9b      	subs	r3, r3, r2
 8016d54:	1aca      	subs	r2, r1, r3
 8016d56:	b293      	uxth	r3, r2
 8016d58:	8bfa      	ldrh	r2, [r7, #30]
 8016d5a:	1ad3      	subs	r3, r2, r3
 8016d5c:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(R_CRC == C_CRC)
 8016d5e:	8bfa      	ldrh	r2, [r7, #30]
 8016d60:	897b      	ldrh	r3, [r7, #10]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	f040 81f3 	bne.w	801714e <Get_Kyosan_EI_Message+0x61a>
				{

					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8016d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016d6c:	486c      	ldr	r0, [pc, #432]	; (8016f20 <Get_Kyosan_EI_Message+0x3ec>)
 8016d6e:	f005 fb48 	bl	801c402 <HAL_GPIO_TogglePin>


					Last_ValidControlInfoClk = HAL_GetTick();
 8016d72:	f002 fe5d 	bl	8019a30 <HAL_GetTick>
 8016d76:	4603      	mov	r3, r0
 8016d78:	4a6a      	ldr	r2, [pc, #424]	; (8016f24 <Get_Kyosan_EI_Message+0x3f0>)
 8016d7a:	6013      	str	r3, [r2, #0]
					Control_DataReceived = SET;
 8016d7c:	4b6a      	ldr	r3, [pc, #424]	; (8016f28 <Get_Kyosan_EI_Message+0x3f4>)
 8016d7e:	2201      	movs	r2, #1
 8016d80:	701a      	strb	r2, [r3, #0]
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 8016d82:	f002 fe55 	bl	8019a30 <HAL_GetTick>
 8016d86:	4603      	mov	r3, r0
 8016d88:	4a68      	ldr	r2, [pc, #416]	; (8016f2c <Get_Kyosan_EI_Message+0x3f8>)
 8016d8a:	6013      	str	r3, [r2, #0]

					//					printf("CTRL-Data CRC OK\n");
					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8016d8c:	4b5c      	ldr	r3, [pc, #368]	; (8016f00 <Get_Kyosan_EI_Message+0x3cc>)
 8016d8e:	781b      	ldrb	r3, [r3, #0]
 8016d90:	b25b      	sxtb	r3, r3
 8016d92:	11db      	asrs	r3, r3, #7
 8016d94:	b25b      	sxtb	r3, r3
 8016d96:	f003 0301 	and.w	r3, r3, #1
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f040 80de 	bne.w	8016f5c <Get_Kyosan_EI_Message+0x428>
					{
						printf("+ Ctrl Data|");
 8016da0:	4863      	ldr	r0, [pc, #396]	; (8016f30 <Get_Kyosan_EI_Message+0x3fc>)
 8016da2:	f00f fe4f 	bl	8026a44 <iprintf>
						memcpy(&ControlData_Positive,&Buffer,Cur_Receive_Length);
 8016da6:	4b55      	ldr	r3, [pc, #340]	; (8016efc <Get_Kyosan_EI_Message+0x3c8>)
 8016da8:	881b      	ldrh	r3, [r3, #0]
 8016daa:	461a      	mov	r2, r3
 8016dac:	4954      	ldr	r1, [pc, #336]	; (8016f00 <Get_Kyosan_EI_Message+0x3cc>)
 8016dae:	4861      	ldr	r0, [pc, #388]	; (8016f34 <Get_Kyosan_EI_Message+0x400>)
 8016db0:	f00f fd38 	bl	8026824 <memcpy>

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016db4:	4b54      	ldr	r3, [pc, #336]	; (8016f08 <Get_Kyosan_EI_Message+0x3d4>)
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	091b      	lsrs	r3, r3, #4
 8016dba:	f003 0301 	and.w	r3, r3, #1
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d027      	beq.n	8016e12 <Get_Kyosan_EI_Message+0x2de>
 8016dc2:	4b4f      	ldr	r3, [pc, #316]	; (8016f00 <Get_Kyosan_EI_Message+0x3cc>)
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	b25b      	sxtb	r3, r3
 8016dc8:	11db      	asrs	r3, r3, #7
 8016dca:	b25b      	sxtb	r3, r3
 8016dcc:	f003 0301 	and.w	r3, r3, #1
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d01e      	beq.n	8016e12 <Get_Kyosan_EI_Message+0x2de>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8016dd4:	4858      	ldr	r0, [pc, #352]	; (8016f38 <Get_Kyosan_EI_Message+0x404>)
 8016dd6:	f00f fed1 	bl	8026b7c <puts>
							ControlData_Positive[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 8016dda:	484d      	ldr	r0, [pc, #308]	; (8016f10 <Get_Kyosan_EI_Message+0x3dc>)
 8016ddc:	f007 fada 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8016de0:	4602      	mov	r2, r0
 8016de2:	4b4d      	ldr	r3, [pc, #308]	; (8016f18 <Get_Kyosan_EI_Message+0x3e4>)
 8016de4:	fba3 1302 	umull	r1, r3, r3, r2
 8016de8:	09dc      	lsrs	r4, r3, #7
 8016dea:	4623      	mov	r3, r4
 8016dec:	021b      	lsls	r3, r3, #8
 8016dee:	1b1b      	subs	r3, r3, r4
 8016df0:	1ad4      	subs	r4, r2, r3
 8016df2:	4847      	ldr	r0, [pc, #284]	; (8016f10 <Get_Kyosan_EI_Message+0x3dc>)
 8016df4:	f007 face 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8016df8:	4601      	mov	r1, r0
 8016dfa:	4b50      	ldr	r3, [pc, #320]	; (8016f3c <Get_Kyosan_EI_Message+0x408>)
 8016dfc:	fba3 2301 	umull	r2, r3, r3, r1
 8016e00:	08da      	lsrs	r2, r3, #3
 8016e02:	4613      	mov	r3, r2
 8016e04:	011b      	lsls	r3, r3, #4
 8016e06:	1a9b      	subs	r3, r3, r2
 8016e08:	1aca      	subs	r2, r1, r3
 8016e0a:	1c53      	adds	r3, r2, #1
 8016e0c:	b2e1      	uxtb	r1, r4
 8016e0e:	4a49      	ldr	r2, [pc, #292]	; (8016f34 <Get_Kyosan_EI_Message+0x400>)
 8016e10:	54d1      	strb	r1, [r2, r3]
						}

						ControlID = (uint8_t)((uint8_t)ControlData_Positive[0]&(uint8_t)0x0f);
 8016e12:	4b48      	ldr	r3, [pc, #288]	; (8016f34 <Get_Kyosan_EI_Message+0x400>)
 8016e14:	781b      	ldrb	r3, [r3, #0]
 8016e16:	f003 030f 	and.w	r3, r3, #15
 8016e1a:	727b      	strb	r3, [r7, #9]
						//						printf("%u|",ControlID);
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	837b      	strh	r3, [r7, #26]
 8016e20:	e011      	b.n	8016e46 <Get_Kyosan_EI_Message+0x312>
						{
							if(ControlData_Negative[i] != (uint8_t)(~ControlData_Positive[i]))
 8016e22:	8b7b      	ldrh	r3, [r7, #26]
 8016e24:	4a46      	ldr	r2, [pc, #280]	; (8016f40 <Get_Kyosan_EI_Message+0x40c>)
 8016e26:	5cd2      	ldrb	r2, [r2, r3]
 8016e28:	8b7b      	ldrh	r3, [r7, #26]
 8016e2a:	4942      	ldr	r1, [pc, #264]	; (8016f34 <Get_Kyosan_EI_Message+0x400>)
 8016e2c:	5ccb      	ldrb	r3, [r1, r3]
 8016e2e:	43db      	mvns	r3, r3
 8016e30:	b2db      	uxtb	r3, r3
 8016e32:	429a      	cmp	r2, r3
 8016e34:	d004      	beq.n	8016e40 <Get_Kyosan_EI_Message+0x30c>
							{
								Pos_NegDataMisMatch = SET;
 8016e36:	2301      	movs	r3, #1
 8016e38:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = POS_DATA_MISMATCH;
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	773b      	strb	r3, [r7, #28]
								//								printf("Positive & Negative data not Matching\n");
								//								printf("P:%X-N:%X -> %X\n",ControlData_Positive[i],ControlData_Negative[i],(uint8_t)(~ControlData_Positive[i]));
								break;
 8016e3e:	e008      	b.n	8016e52 <Get_Kyosan_EI_Message+0x31e>
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016e40:	8b7b      	ldrh	r3, [r7, #26]
 8016e42:	3301      	adds	r3, #1
 8016e44:	837b      	strh	r3, [r7, #26]
 8016e46:	8b7a      	ldrh	r2, [r7, #26]
 8016e48:	4b2c      	ldr	r3, [pc, #176]	; (8016efc <Get_Kyosan_EI_Message+0x3c8>)
 8016e4a:	881b      	ldrh	r3, [r3, #0]
 8016e4c:	3b02      	subs	r3, #2
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	dbe7      	blt.n	8016e22 <Get_Kyosan_EI_Message+0x2ee>
							}
						}

						if(Pos_NegDataMisMatch == RESET)
 8016e52:	7f7b      	ldrb	r3, [r7, #29]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	f040 80d9 	bne.w	801700c <Get_Kyosan_EI_Message+0x4d8>
						{
							printf("\nR:");
 8016e5a:	483a      	ldr	r0, [pc, #232]	; (8016f44 <Get_Kyosan_EI_Message+0x410>)
 8016e5c:	f00f fdf2 	bl	8026a44 <iprintf>
							for(uint8_t i=1;i<61;++i)
 8016e60:	2301      	movs	r3, #1
 8016e62:	767b      	strb	r3, [r7, #25]
 8016e64:	e009      	b.n	8016e7a <Get_Kyosan_EI_Message+0x346>
							{
								printf("%02X ",ControlData_Positive[i]);
 8016e66:	7e7b      	ldrb	r3, [r7, #25]
 8016e68:	4a32      	ldr	r2, [pc, #200]	; (8016f34 <Get_Kyosan_EI_Message+0x400>)
 8016e6a:	5cd3      	ldrb	r3, [r2, r3]
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	4836      	ldr	r0, [pc, #216]	; (8016f48 <Get_Kyosan_EI_Message+0x414>)
 8016e70:	f00f fde8 	bl	8026a44 <iprintf>
							for(uint8_t i=1;i<61;++i)
 8016e74:	7e7b      	ldrb	r3, [r7, #25]
 8016e76:	3301      	adds	r3, #1
 8016e78:	767b      	strb	r3, [r7, #25]
 8016e7a:	7e7b      	ldrb	r3, [r7, #25]
 8016e7c:	2b3c      	cmp	r3, #60	; 0x3c
 8016e7e:	d9f2      	bls.n	8016e66 <Get_Kyosan_EI_Message+0x332>
							}
							printf("\n");
 8016e80:	200a      	movs	r0, #10
 8016e82:	f00f fdf7 	bl	8026a74 <putchar>

							memcpy(Kyosan_SelfRelays.Relays,&ControlData_Positive[1],60);
 8016e86:	4a31      	ldr	r2, [pc, #196]	; (8016f4c <Get_Kyosan_EI_Message+0x418>)
 8016e88:	4b2a      	ldr	r3, [pc, #168]	; (8016f34 <Get_Kyosan_EI_Message+0x400>)
 8016e8a:	3301      	adds	r3, #1
 8016e8c:	1c90      	adds	r0, r2, #2
 8016e8e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016e92:	4602      	mov	r2, r0
 8016e94:	4619      	mov	r1, r3
 8016e96:	f8d1 c000 	ldr.w	ip, [r1]
 8016e9a:	684e      	ldr	r6, [r1, #4]
 8016e9c:	688d      	ldr	r5, [r1, #8]
 8016e9e:	68c9      	ldr	r1, [r1, #12]
 8016ea0:	f8c2 c000 	str.w	ip, [r2]
 8016ea4:	6056      	str	r6, [r2, #4]
 8016ea6:	6095      	str	r5, [r2, #8]
 8016ea8:	60d1      	str	r1, [r2, #12]
 8016eaa:	3310      	adds	r3, #16
 8016eac:	3010      	adds	r0, #16
 8016eae:	42a3      	cmp	r3, r4
 8016eb0:	d1ef      	bne.n	8016e92 <Get_Kyosan_EI_Message+0x35e>
 8016eb2:	4602      	mov	r2, r0
 8016eb4:	6818      	ldr	r0, [r3, #0]
 8016eb6:	6859      	ldr	r1, [r3, #4]
 8016eb8:	689b      	ldr	r3, [r3, #8]
 8016eba:	6010      	str	r0, [r2, #0]
 8016ebc:	6051      	str	r1, [r2, #4]
 8016ebe:	6093      	str	r3, [r2, #8]
							Kyosan_SelfRelays.Relay_CRC = Calc_Kysoan_CRC(Kyosan_SelfRelays.Relays, 60);
 8016ec0:	213c      	movs	r1, #60	; 0x3c
 8016ec2:	4823      	ldr	r0, [pc, #140]	; (8016f50 <Get_Kyosan_EI_Message+0x41c>)
 8016ec4:	f000 fa82 	bl	80173cc <Calc_Kysoan_CRC>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	461a      	mov	r2, r3
 8016ecc:	4b1f      	ldr	r3, [pc, #124]	; (8016f4c <Get_Kyosan_EI_Message+0x418>)
 8016ece:	87da      	strh	r2, [r3, #62]	; 0x3e

#ifdef EI_1
							if((SendThisCardRelays == SET)&&(PrevRelayCRC != Kyosan_SelfRelays.Relay_CRC))
 8016ed0:	4b20      	ldr	r3, [pc, #128]	; (8016f54 <Get_Kyosan_EI_Message+0x420>)
 8016ed2:	781b      	ldrb	r3, [r3, #0]
 8016ed4:	2b01      	cmp	r3, #1
 8016ed6:	f040 8099 	bne.w	801700c <Get_Kyosan_EI_Message+0x4d8>
 8016eda:	4b1c      	ldr	r3, [pc, #112]	; (8016f4c <Get_Kyosan_EI_Message+0x418>)
 8016edc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8016ede:	4b1e      	ldr	r3, [pc, #120]	; (8016f58 <Get_Kyosan_EI_Message+0x424>)
 8016ee0:	881b      	ldrh	r3, [r3, #0]
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	f000 8092 	beq.w	801700c <Get_Kyosan_EI_Message+0x4d8>
							{
								PrevRelayCRC = Kyosan_SelfRelays.Relay_CRC;
 8016ee8:	4b18      	ldr	r3, [pc, #96]	; (8016f4c <Get_Kyosan_EI_Message+0x418>)
 8016eea:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8016eec:	4b1a      	ldr	r3, [pc, #104]	; (8016f58 <Get_Kyosan_EI_Message+0x424>)
 8016eee:	801a      	strh	r2, [r3, #0]
								TransmitCanPkt(EI_PROCESS_DATA);
 8016ef0:	f240 1019 	movw	r0, #281	; 0x119
 8016ef4:	f7fa f834 	bl	8010f60 <TransmitCanPkt>
 8016ef8:	e088      	b.n	801700c <Get_Kyosan_EI_Message+0x4d8>
 8016efa:	bf00      	nop
 8016efc:	2000b9de 	.word	0x2000b9de
 8016f00:	2000b9e4 	.word	0x2000b9e4
 8016f04:	2000b9e0 	.word	0x2000b9e0
 8016f08:	2000b47c 	.word	0x2000b47c
 8016f0c:	0802b89c 	.word	0x0802b89c
 8016f10:	2000bcec 	.word	0x2000bcec
 8016f14:	80008001 	.word	0x80008001
 8016f18:	80808081 	.word	0x80808081
 8016f1c:	0802b8cc 	.word	0x0802b8cc
 8016f20:	40021c00 	.word	0x40021c00
 8016f24:	2000b9d8 	.word	0x2000b9d8
 8016f28:	2000b9dc 	.word	0x2000b9dc
 8016f2c:	2000b484 	.word	0x2000b484
 8016f30:	0802b8fc 	.word	0x0802b8fc
 8016f34:	2000bae8 	.word	0x2000bae8
 8016f38:	0802b90c 	.word	0x0802b90c
 8016f3c:	88888889 	.word	0x88888889
 8016f40:	2000bbe8 	.word	0x2000bbe8
 8016f44:	0802b94c 	.word	0x0802b94c
 8016f48:	0802b894 	.word	0x0802b894
 8016f4c:	2000b498 	.word	0x2000b498
 8016f50:	2000b49a 	.word	0x2000b49a
 8016f54:	2000b9cd 	.word	0x2000b9cd
 8016f58:	2000bce8 	.word	0x2000bce8
						}

					}
					else
					{
						printf("- Ctrl Data|");
 8016f5c:	4888      	ldr	r0, [pc, #544]	; (8017180 <Get_Kyosan_EI_Message+0x64c>)
 8016f5e:	f00f fd71 	bl	8026a44 <iprintf>
						memcpy(&ControlData_Negative,&Buffer,Cur_Receive_Length);
 8016f62:	4b88      	ldr	r3, [pc, #544]	; (8017184 <Get_Kyosan_EI_Message+0x650>)
 8016f64:	881b      	ldrh	r3, [r3, #0]
 8016f66:	461a      	mov	r2, r3
 8016f68:	4987      	ldr	r1, [pc, #540]	; (8017188 <Get_Kyosan_EI_Message+0x654>)
 8016f6a:	4888      	ldr	r0, [pc, #544]	; (801718c <Get_Kyosan_EI_Message+0x658>)
 8016f6c:	f00f fc5a 	bl	8026824 <memcpy>
						ControlID = (uint8_t)(~ControlData_Negative[0]);
 8016f70:	4b86      	ldr	r3, [pc, #536]	; (801718c <Get_Kyosan_EI_Message+0x658>)
 8016f72:	781b      	ldrb	r3, [r3, #0]
 8016f74:	43db      	mvns	r3, r3
 8016f76:	727b      	strb	r3, [r7, #9]

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016f78:	4b85      	ldr	r3, [pc, #532]	; (8017190 <Get_Kyosan_EI_Message+0x65c>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	091b      	lsrs	r3, r3, #4
 8016f7e:	f003 0301 	and.w	r3, r3, #1
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d027      	beq.n	8016fd6 <Get_Kyosan_EI_Message+0x4a2>
 8016f86:	4b80      	ldr	r3, [pc, #512]	; (8017188 <Get_Kyosan_EI_Message+0x654>)
 8016f88:	781b      	ldrb	r3, [r3, #0]
 8016f8a:	b25b      	sxtb	r3, r3
 8016f8c:	11db      	asrs	r3, r3, #7
 8016f8e:	b25b      	sxtb	r3, r3
 8016f90:	f003 0301 	and.w	r3, r3, #1
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d01e      	beq.n	8016fd6 <Get_Kyosan_EI_Message+0x4a2>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8016f98:	487e      	ldr	r0, [pc, #504]	; (8017194 <Get_Kyosan_EI_Message+0x660>)
 8016f9a:	f00f fdef 	bl	8026b7c <puts>
							ControlData_Negative[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 8016f9e:	487e      	ldr	r0, [pc, #504]	; (8017198 <Get_Kyosan_EI_Message+0x664>)
 8016fa0:	f007 f9f8 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8016fa4:	4602      	mov	r2, r0
 8016fa6:	4b7d      	ldr	r3, [pc, #500]	; (801719c <Get_Kyosan_EI_Message+0x668>)
 8016fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8016fac:	09dc      	lsrs	r4, r3, #7
 8016fae:	4623      	mov	r3, r4
 8016fb0:	021b      	lsls	r3, r3, #8
 8016fb2:	1b1b      	subs	r3, r3, r4
 8016fb4:	1ad4      	subs	r4, r2, r3
 8016fb6:	4878      	ldr	r0, [pc, #480]	; (8017198 <Get_Kyosan_EI_Message+0x664>)
 8016fb8:	f007 f9ec 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8016fbc:	4601      	mov	r1, r0
 8016fbe:	4b78      	ldr	r3, [pc, #480]	; (80171a0 <Get_Kyosan_EI_Message+0x66c>)
 8016fc0:	fba3 2301 	umull	r2, r3, r3, r1
 8016fc4:	08da      	lsrs	r2, r3, #3
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	011b      	lsls	r3, r3, #4
 8016fca:	1a9b      	subs	r3, r3, r2
 8016fcc:	1aca      	subs	r2, r1, r3
 8016fce:	1c53      	adds	r3, r2, #1
 8016fd0:	b2e1      	uxtb	r1, r4
 8016fd2:	4a6e      	ldr	r2, [pc, #440]	; (801718c <Get_Kyosan_EI_Message+0x658>)
 8016fd4:	54d1      	strb	r1, [r2, r3]
						}


						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	82fb      	strh	r3, [r7, #22]
 8016fda:	e011      	b.n	8017000 <Get_Kyosan_EI_Message+0x4cc>
						{
							if(ControlData_Positive[i] != (uint8_t)(~ControlData_Negative[i]))
 8016fdc:	8afb      	ldrh	r3, [r7, #22]
 8016fde:	4a71      	ldr	r2, [pc, #452]	; (80171a4 <Get_Kyosan_EI_Message+0x670>)
 8016fe0:	5cd2      	ldrb	r2, [r2, r3]
 8016fe2:	8afb      	ldrh	r3, [r7, #22]
 8016fe4:	4969      	ldr	r1, [pc, #420]	; (801718c <Get_Kyosan_EI_Message+0x658>)
 8016fe6:	5ccb      	ldrb	r3, [r1, r3]
 8016fe8:	43db      	mvns	r3, r3
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	429a      	cmp	r2, r3
 8016fee:	d004      	beq.n	8016ffa <Get_Kyosan_EI_Message+0x4c6>
							{
								Pos_NegDataMisMatch = SET;
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = NEG_DATA_MISMATCH;
 8016ff4:	2302      	movs	r3, #2
 8016ff6:	773b      	strb	r3, [r7, #28]
								//								printf("Negative & Positive data not Matching\n");
								//								printf("N:%02X-P:%02X -> %X\n",ControlData_Negative[i],ControlData_Positive[i],(uint8_t)(~ControlData_Negative[i]));
								break;
 8016ff8:	e008      	b.n	801700c <Get_Kyosan_EI_Message+0x4d8>
						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016ffa:	8afb      	ldrh	r3, [r7, #22]
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	82fb      	strh	r3, [r7, #22]
 8017000:	8afa      	ldrh	r2, [r7, #22]
 8017002:	4b60      	ldr	r3, [pc, #384]	; (8017184 <Get_Kyosan_EI_Message+0x650>)
 8017004:	881b      	ldrh	r3, [r3, #0]
 8017006:	3b02      	subs	r3, #2
 8017008:	429a      	cmp	r2, r3
 801700a:	dbe7      	blt.n	8016fdc <Get_Kyosan_EI_Message+0x4a8>
							//							}
							//							printf("\n");
						}
					}

					if(Pos_NegDataMisMatch == RESET)
 801700c:	7f7b      	ldrb	r3, [r7, #29]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d11b      	bne.n	801704a <Get_Kyosan_EI_Message+0x516>
					{
						//						printf("+ & -:DATA:OK\n");
						if(CHECKFLAG(7,Buffer[0]) == RESET)
 8017012:	4b5d      	ldr	r3, [pc, #372]	; (8017188 <Get_Kyosan_EI_Message+0x654>)
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	b25b      	sxtb	r3, r3
 8017018:	11db      	asrs	r3, r3, #7
 801701a:	b25b      	sxtb	r3, r3
 801701c:	f003 0301 	and.w	r3, r3, #1
 8017020:	2b00      	cmp	r3, #0
 8017022:	d105      	bne.n	8017030 <Get_Kyosan_EI_Message+0x4fc>
						{
							KyosanClocks.ControlDataPosRecvCLK = HAL_GetTick();
 8017024:	f002 fd04 	bl	8019a30 <HAL_GetTick>
 8017028:	4603      	mov	r3, r0
 801702a:	4a5f      	ldr	r2, [pc, #380]	; (80171a8 <Get_Kyosan_EI_Message+0x674>)
 801702c:	6053      	str	r3, [r2, #4]
 801702e:	e004      	b.n	801703a <Get_Kyosan_EI_Message+0x506>
						}
						else
						{
							KyosanClocks.ControlDataNegRecvCLK = HAL_GetTick();
 8017030:	f002 fcfe 	bl	8019a30 <HAL_GetTick>
 8017034:	4603      	mov	r3, r0
 8017036:	4a5c      	ldr	r2, [pc, #368]	; (80171a8 <Get_Kyosan_EI_Message+0x674>)
 8017038:	6093      	str	r3, [r2, #8]
						}
						Pos_NegDataMisMatch_Count = RESET;
 801703a:	4b5c      	ldr	r3, [pc, #368]	; (80171ac <Get_Kyosan_EI_Message+0x678>)
 801703c:	2200      	movs	r2, #0
 801703e:	701a      	strb	r2, [r3, #0]
						TypeofDataMisMatch = RESET;
 8017040:	2300      	movs	r3, #0
 8017042:	773b      	strb	r3, [r7, #28]
						Pos_NegDataMisMatch = RESET;
 8017044:	2300      	movs	r3, #0
 8017046:	777b      	strb	r3, [r7, #29]
 8017048:	e092      	b.n	8017170 <Get_Kyosan_EI_Message+0x63c>
					}
					else
					{
						++Pos_NegDataMisMatch_Count;
 801704a:	4b58      	ldr	r3, [pc, #352]	; (80171ac <Get_Kyosan_EI_Message+0x678>)
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	3301      	adds	r3, #1
 8017050:	b2da      	uxtb	r2, r3
 8017052:	4b56      	ldr	r3, [pc, #344]	; (80171ac <Get_Kyosan_EI_Message+0x678>)
 8017054:	701a      	strb	r2, [r3, #0]

						if(Pos_NegDataMisMatch_Count == 2)
 8017056:	4b55      	ldr	r3, [pc, #340]	; (80171ac <Get_Kyosan_EI_Message+0x678>)
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	2b02      	cmp	r3, #2
 801705c:	d161      	bne.n	8017122 <Get_Kyosan_EI_Message+0x5ee>
						{
							switch(TypeofDataMisMatch)
 801705e:	7f3b      	ldrb	r3, [r7, #28]
 8017060:	2b01      	cmp	r3, #1
 8017062:	d002      	beq.n	801706a <Get_Kyosan_EI_Message+0x536>
 8017064:	2b02      	cmp	r3, #2
 8017066:	d02e      	beq.n	80170c6 <Get_Kyosan_EI_Message+0x592>
 8017068:	e05c      	b.n	8017124 <Get_Kyosan_EI_Message+0x5f0>
							{
							case POS_DATA_MISMATCH:
								printf("P:");
 801706a:	4851      	ldr	r0, [pc, #324]	; (80171b0 <Get_Kyosan_EI_Message+0x67c>)
 801706c:	f00f fcea 	bl	8026a44 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8017070:	2300      	movs	r3, #0
 8017072:	82bb      	strh	r3, [r7, #20]
 8017074:	e009      	b.n	801708a <Get_Kyosan_EI_Message+0x556>
								{
									printf("%02X ",ControlData_Positive[i]);
 8017076:	8abb      	ldrh	r3, [r7, #20]
 8017078:	4a4a      	ldr	r2, [pc, #296]	; (80171a4 <Get_Kyosan_EI_Message+0x670>)
 801707a:	5cd3      	ldrb	r3, [r2, r3]
 801707c:	4619      	mov	r1, r3
 801707e:	484d      	ldr	r0, [pc, #308]	; (80171b4 <Get_Kyosan_EI_Message+0x680>)
 8017080:	f00f fce0 	bl	8026a44 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8017084:	8abb      	ldrh	r3, [r7, #20]
 8017086:	3301      	adds	r3, #1
 8017088:	82bb      	strh	r3, [r7, #20]
 801708a:	4b3e      	ldr	r3, [pc, #248]	; (8017184 <Get_Kyosan_EI_Message+0x650>)
 801708c:	881b      	ldrh	r3, [r3, #0]
 801708e:	8aba      	ldrh	r2, [r7, #20]
 8017090:	429a      	cmp	r2, r3
 8017092:	d3f0      	bcc.n	8017076 <Get_Kyosan_EI_Message+0x542>
								}
								printf("\nN:");
 8017094:	4848      	ldr	r0, [pc, #288]	; (80171b8 <Get_Kyosan_EI_Message+0x684>)
 8017096:	f00f fcd5 	bl	8026a44 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 801709a:	2300      	movs	r3, #0
 801709c:	827b      	strh	r3, [r7, #18]
 801709e:	e009      	b.n	80170b4 <Get_Kyosan_EI_Message+0x580>
								{
									printf("%02X ",ControlData_Negative[i]);
 80170a0:	8a7b      	ldrh	r3, [r7, #18]
 80170a2:	4a3a      	ldr	r2, [pc, #232]	; (801718c <Get_Kyosan_EI_Message+0x658>)
 80170a4:	5cd3      	ldrb	r3, [r2, r3]
 80170a6:	4619      	mov	r1, r3
 80170a8:	4842      	ldr	r0, [pc, #264]	; (80171b4 <Get_Kyosan_EI_Message+0x680>)
 80170aa:	f00f fccb 	bl	8026a44 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80170ae:	8a7b      	ldrh	r3, [r7, #18]
 80170b0:	3301      	adds	r3, #1
 80170b2:	827b      	strh	r3, [r7, #18]
 80170b4:	4b33      	ldr	r3, [pc, #204]	; (8017184 <Get_Kyosan_EI_Message+0x650>)
 80170b6:	881b      	ldrh	r3, [r3, #0]
 80170b8:	8a7a      	ldrh	r2, [r7, #18]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d3f0      	bcc.n	80170a0 <Get_Kyosan_EI_Message+0x56c>
								}
								printf("\n");
 80170be:	200a      	movs	r0, #10
 80170c0:	f00f fcd8 	bl	8026a74 <putchar>
								break;
 80170c4:	e02e      	b.n	8017124 <Get_Kyosan_EI_Message+0x5f0>
							case NEG_DATA_MISMATCH:
								printf("N:");
 80170c6:	483d      	ldr	r0, [pc, #244]	; (80171bc <Get_Kyosan_EI_Message+0x688>)
 80170c8:	f00f fcbc 	bl	8026a44 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80170cc:	2300      	movs	r3, #0
 80170ce:	823b      	strh	r3, [r7, #16]
 80170d0:	e009      	b.n	80170e6 <Get_Kyosan_EI_Message+0x5b2>
								{
									printf("%02X ",ControlData_Negative[i]);
 80170d2:	8a3b      	ldrh	r3, [r7, #16]
 80170d4:	4a2d      	ldr	r2, [pc, #180]	; (801718c <Get_Kyosan_EI_Message+0x658>)
 80170d6:	5cd3      	ldrb	r3, [r2, r3]
 80170d8:	4619      	mov	r1, r3
 80170da:	4836      	ldr	r0, [pc, #216]	; (80171b4 <Get_Kyosan_EI_Message+0x680>)
 80170dc:	f00f fcb2 	bl	8026a44 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80170e0:	8a3b      	ldrh	r3, [r7, #16]
 80170e2:	3301      	adds	r3, #1
 80170e4:	823b      	strh	r3, [r7, #16]
 80170e6:	4b27      	ldr	r3, [pc, #156]	; (8017184 <Get_Kyosan_EI_Message+0x650>)
 80170e8:	881b      	ldrh	r3, [r3, #0]
 80170ea:	8a3a      	ldrh	r2, [r7, #16]
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d3f0      	bcc.n	80170d2 <Get_Kyosan_EI_Message+0x59e>
								}
								printf("\nP:");
 80170f0:	4833      	ldr	r0, [pc, #204]	; (80171c0 <Get_Kyosan_EI_Message+0x68c>)
 80170f2:	f00f fca7 	bl	8026a44 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80170f6:	2300      	movs	r3, #0
 80170f8:	81fb      	strh	r3, [r7, #14]
 80170fa:	e009      	b.n	8017110 <Get_Kyosan_EI_Message+0x5dc>
								{
									printf("%02X ",ControlData_Positive[i]);
 80170fc:	89fb      	ldrh	r3, [r7, #14]
 80170fe:	4a29      	ldr	r2, [pc, #164]	; (80171a4 <Get_Kyosan_EI_Message+0x670>)
 8017100:	5cd3      	ldrb	r3, [r2, r3]
 8017102:	4619      	mov	r1, r3
 8017104:	482b      	ldr	r0, [pc, #172]	; (80171b4 <Get_Kyosan_EI_Message+0x680>)
 8017106:	f00f fc9d 	bl	8026a44 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 801710a:	89fb      	ldrh	r3, [r7, #14]
 801710c:	3301      	adds	r3, #1
 801710e:	81fb      	strh	r3, [r7, #14]
 8017110:	4b1c      	ldr	r3, [pc, #112]	; (8017184 <Get_Kyosan_EI_Message+0x650>)
 8017112:	881b      	ldrh	r3, [r3, #0]
 8017114:	89fa      	ldrh	r2, [r7, #14]
 8017116:	429a      	cmp	r2, r3
 8017118:	d3f0      	bcc.n	80170fc <Get_Kyosan_EI_Message+0x5c8>
								}
								printf("\n");
 801711a:	200a      	movs	r0, #10
 801711c:	f00f fcaa 	bl	8026a74 <putchar>
								break;
 8017120:	e000      	b.n	8017124 <Get_Kyosan_EI_Message+0x5f0>
							default:
 8017122:	bf00      	nop
								;

							}
						}

						if(Pos_NegDataMisMatch_Count >= EI_data.Kyosan_st.MaxMisMatchCnt)
 8017124:	4b21      	ldr	r3, [pc, #132]	; (80171ac <Get_Kyosan_EI_Message+0x678>)
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	b29a      	uxth	r2, r3
 801712a:	4b26      	ldr	r3, [pc, #152]	; (80171c4 <Get_Kyosan_EI_Message+0x690>)
 801712c:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8017130:	429a      	cmp	r2, r3
 8017132:	d31d      	bcc.n	8017170 <Get_Kyosan_EI_Message+0x63c>
						{
							printf("\n+ & - Data Mismatch count Reached:%u\n",Pos_NegDataMisMatch_Count);
 8017134:	4b1d      	ldr	r3, [pc, #116]	; (80171ac <Get_Kyosan_EI_Message+0x678>)
 8017136:	781b      	ldrb	r3, [r3, #0]
 8017138:	4619      	mov	r1, r3
 801713a:	4823      	ldr	r0, [pc, #140]	; (80171c8 <Get_Kyosan_EI_Message+0x694>)
 801713c:	f00f fc82 	bl	8026a44 <iprintf>
							Pos_NegDataMisMatch_Count = EI_data.Kyosan_st.MaxMisMatchCnt; /* To avoid Overflow */
 8017140:	4b20      	ldr	r3, [pc, #128]	; (80171c4 <Get_Kyosan_EI_Message+0x690>)
 8017142:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8017146:	b2da      	uxtb	r2, r3
 8017148:	4b18      	ldr	r3, [pc, #96]	; (80171ac <Get_Kyosan_EI_Message+0x678>)
 801714a:	701a      	strb	r2, [r3, #0]
 801714c:	e010      	b.n	8017170 <Get_Kyosan_EI_Message+0x63c>
						}
					}
				}
				else
				{
					printf("\n%c Control Data Packet CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 801714e:	4b0e      	ldr	r3, [pc, #56]	; (8017188 <Get_Kyosan_EI_Message+0x654>)
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	b25b      	sxtb	r3, r3
 8017154:	11db      	asrs	r3, r3, #7
 8017156:	b25b      	sxtb	r3, r3
 8017158:	f003 0301 	and.w	r3, r3, #1
 801715c:	2b00      	cmp	r3, #0
 801715e:	d101      	bne.n	8017164 <Get_Kyosan_EI_Message+0x630>
 8017160:	212b      	movs	r1, #43	; 0x2b
 8017162:	e000      	b.n	8017166 <Get_Kyosan_EI_Message+0x632>
 8017164:	212d      	movs	r1, #45	; 0x2d
 8017166:	897a      	ldrh	r2, [r7, #10]
 8017168:	8bfb      	ldrh	r3, [r7, #30]
 801716a:	4818      	ldr	r0, [pc, #96]	; (80171cc <Get_Kyosan_EI_Message+0x698>)
 801716c:	f00f fc6a 	bl	8026a44 <iprintf>

				}
				Cur_Receive_Length = RESET;
 8017170:	4b04      	ldr	r3, [pc, #16]	; (8017184 <Get_Kyosan_EI_Message+0x650>)
 8017172:	2200      	movs	r2, #0
 8017174:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 8017176:	4b16      	ldr	r3, [pc, #88]	; (80171d0 <Get_Kyosan_EI_Message+0x69c>)
 8017178:	2200      	movs	r2, #0
 801717a:	801a      	strh	r2, [r3, #0]
			}
			break;
 801717c:	e0fe      	b.n	801737c <Get_Kyosan_EI_Message+0x848>
 801717e:	bf00      	nop
 8017180:	0802b950 	.word	0x0802b950
 8017184:	2000b9de 	.word	0x2000b9de
 8017188:	2000b9e4 	.word	0x2000b9e4
 801718c:	2000bbe8 	.word	0x2000bbe8
 8017190:	2000b47c 	.word	0x2000b47c
 8017194:	0802b90c 	.word	0x0802b90c
 8017198:	2000bcec 	.word	0x2000bcec
 801719c:	80808081 	.word	0x80808081
 80171a0:	88888889 	.word	0x88888889
 80171a4:	2000bae8 	.word	0x2000bae8
 80171a8:	2000b484 	.word	0x2000b484
 80171ac:	2000bcea 	.word	0x2000bcea
 80171b0:	0802b960 	.word	0x0802b960
 80171b4:	0802b894 	.word	0x0802b894
 80171b8:	0802b964 	.word	0x0802b964
 80171bc:	0802b968 	.word	0x0802b968
 80171c0:	0802b96c 	.word	0x0802b96c
 80171c4:	20000504 	.word	0x20000504
 80171c8:	0802b970 	.word	0x0802b970
 80171cc:	0802b998 	.word	0x0802b998
 80171d0:	2000b9e0 	.word	0x2000b9e0
		case POLLING_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 80171d4:	4b70      	ldr	r3, [pc, #448]	; (8017398 <Get_Kyosan_EI_Message+0x864>)
 80171d6:	881b      	ldrh	r3, [r3, #0]
 80171d8:	1c5a      	adds	r2, r3, #1
 80171da:	b291      	uxth	r1, r2
 80171dc:	4a6e      	ldr	r2, [pc, #440]	; (8017398 <Get_Kyosan_EI_Message+0x864>)
 80171de:	8011      	strh	r1, [r2, #0]
 80171e0:	4619      	mov	r1, r3
 80171e2:	4a6e      	ldr	r2, [pc, #440]	; (801739c <Get_Kyosan_EI_Message+0x868>)
 80171e4:	7b7b      	ldrb	r3, [r7, #13]
 80171e6:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 80171e8:	4b6b      	ldr	r3, [pc, #428]	; (8017398 <Get_Kyosan_EI_Message+0x864>)
 80171ea:	881a      	ldrh	r2, [r3, #0]
 80171ec:	4b6c      	ldr	r3, [pc, #432]	; (80173a0 <Get_Kyosan_EI_Message+0x86c>)
 80171ee:	881b      	ldrh	r3, [r3, #0]
 80171f0:	429a      	cmp	r2, r3
 80171f2:	f040 80c3 	bne.w	801737c <Get_Kyosan_EI_Message+0x848>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 80171f6:	4b68      	ldr	r3, [pc, #416]	; (8017398 <Get_Kyosan_EI_Message+0x864>)
 80171f8:	881b      	ldrh	r3, [r3, #0]
 80171fa:	3b02      	subs	r3, #2
 80171fc:	4619      	mov	r1, r3
 80171fe:	4867      	ldr	r0, [pc, #412]	; (801739c <Get_Kyosan_EI_Message+0x868>)
 8017200:	f000 f8e4 	bl	80173cc <Calc_Kysoan_CRC>
 8017204:	4603      	mov	r3, r0
 8017206:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 8017208:	4b63      	ldr	r3, [pc, #396]	; (8017398 <Get_Kyosan_EI_Message+0x864>)
 801720a:	881b      	ldrh	r3, [r3, #0]
 801720c:	3b02      	subs	r3, #2
 801720e:	4a63      	ldr	r2, [pc, #396]	; (801739c <Get_Kyosan_EI_Message+0x868>)
 8017210:	4413      	add	r3, r2
 8017212:	461a      	mov	r2, r3
 8017214:	2110      	movs	r1, #16
 8017216:	2000      	movs	r0, #0
 8017218:	f7e9 f9fc 	bl	8000614 <ExtractBits>
 801721c:	4603      	mov	r3, r0
 801721e:	83fb      	strh	r3, [r7, #30]

				if( (  (CHECKFLAG(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8017220:	4b60      	ldr	r3, [pc, #384]	; (80173a4 <Get_Kyosan_EI_Message+0x870>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	089b      	lsrs	r3, r3, #2
 8017226:	f003 0301 	and.w	r3, r3, #1
 801722a:	2b00      	cmp	r3, #0
 801722c:	d02d      	beq.n	801728a <Get_Kyosan_EI_Message+0x756>
 801722e:	4b5b      	ldr	r3, [pc, #364]	; (801739c <Get_Kyosan_EI_Message+0x868>)
 8017230:	781b      	ldrb	r3, [r3, #0]
 8017232:	b25b      	sxtb	r3, r3
 8017234:	11db      	asrs	r3, r3, #7
 8017236:	b25b      	sxtb	r3, r3
 8017238:	f003 0301 	and.w	r3, r3, #1
 801723c:	2b00      	cmp	r3, #0
 801723e:	d124      	bne.n	801728a <Get_Kyosan_EI_Message+0x756>
				{
					printf("\nInjecting Positive Polling Data CRC Failure\n");
 8017240:	4859      	ldr	r0, [pc, #356]	; (80173a8 <Get_Kyosan_EI_Message+0x874>)
 8017242:	f00f fc9b 	bl	8026b7c <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8017246:	4859      	ldr	r0, [pc, #356]	; (80173ac <Get_Kyosan_EI_Message+0x878>)
 8017248:	f007 f8a4 	bl	801e394 <HAL_RNG_GetRandomNumber>
 801724c:	4601      	mov	r1, r0
 801724e:	4b58      	ldr	r3, [pc, #352]	; (80173b0 <Get_Kyosan_EI_Message+0x87c>)
 8017250:	fba3 2301 	umull	r2, r3, r3, r1
 8017254:	0bda      	lsrs	r2, r3, #15
 8017256:	4613      	mov	r3, r2
 8017258:	041b      	lsls	r3, r3, #16
 801725a:	1a9b      	subs	r3, r3, r2
 801725c:	1aca      	subs	r2, r1, r3
 801725e:	4613      	mov	r3, r2
 8017260:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8017262:	8bfa      	ldrh	r2, [r7, #30]
 8017264:	897b      	ldrh	r3, [r7, #10]
 8017266:	429a      	cmp	r2, r3
 8017268:	d10f      	bne.n	801728a <Get_Kyosan_EI_Message+0x756>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 801726a:	4850      	ldr	r0, [pc, #320]	; (80173ac <Get_Kyosan_EI_Message+0x878>)
 801726c:	f007 f892 	bl	801e394 <HAL_RNG_GetRandomNumber>
 8017270:	4601      	mov	r1, r0
 8017272:	4b50      	ldr	r3, [pc, #320]	; (80173b4 <Get_Kyosan_EI_Message+0x880>)
 8017274:	fba3 2301 	umull	r2, r3, r3, r1
 8017278:	09da      	lsrs	r2, r3, #7
 801727a:	4613      	mov	r3, r2
 801727c:	021b      	lsls	r3, r3, #8
 801727e:	1a9b      	subs	r3, r3, r2
 8017280:	1aca      	subs	r2, r1, r3
 8017282:	b293      	uxth	r3, r2
 8017284:	8bfa      	ldrh	r2, [r7, #30]
 8017286:	1ad3      	subs	r3, r2, r3
 8017288:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 801728a:	4b46      	ldr	r3, [pc, #280]	; (80173a4 <Get_Kyosan_EI_Message+0x870>)
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	08db      	lsrs	r3, r3, #3
 8017290:	f003 0301 	and.w	r3, r3, #1
 8017294:	2b00      	cmp	r3, #0
 8017296:	d02d      	beq.n	80172f4 <Get_Kyosan_EI_Message+0x7c0>
 8017298:	4b40      	ldr	r3, [pc, #256]	; (801739c <Get_Kyosan_EI_Message+0x868>)
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	b25b      	sxtb	r3, r3
 801729e:	11db      	asrs	r3, r3, #7
 80172a0:	b25b      	sxtb	r3, r3
 80172a2:	f003 0301 	and.w	r3, r3, #1
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d024      	beq.n	80172f4 <Get_Kyosan_EI_Message+0x7c0>
				{
					printf("\nInjecting Negative Polling Data CRC Failure\n");
 80172aa:	4843      	ldr	r0, [pc, #268]	; (80173b8 <Get_Kyosan_EI_Message+0x884>)
 80172ac:	f00f fc66 	bl	8026b7c <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 80172b0:	483e      	ldr	r0, [pc, #248]	; (80173ac <Get_Kyosan_EI_Message+0x878>)
 80172b2:	f007 f86f 	bl	801e394 <HAL_RNG_GetRandomNumber>
 80172b6:	4601      	mov	r1, r0
 80172b8:	4b3d      	ldr	r3, [pc, #244]	; (80173b0 <Get_Kyosan_EI_Message+0x87c>)
 80172ba:	fba3 2301 	umull	r2, r3, r3, r1
 80172be:	0bda      	lsrs	r2, r3, #15
 80172c0:	4613      	mov	r3, r2
 80172c2:	041b      	lsls	r3, r3, #16
 80172c4:	1a9b      	subs	r3, r3, r2
 80172c6:	1aca      	subs	r2, r1, r3
 80172c8:	4613      	mov	r3, r2
 80172ca:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 80172cc:	8bfa      	ldrh	r2, [r7, #30]
 80172ce:	897b      	ldrh	r3, [r7, #10]
 80172d0:	429a      	cmp	r2, r3
 80172d2:	d10f      	bne.n	80172f4 <Get_Kyosan_EI_Message+0x7c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 80172d4:	4835      	ldr	r0, [pc, #212]	; (80173ac <Get_Kyosan_EI_Message+0x878>)
 80172d6:	f007 f85d 	bl	801e394 <HAL_RNG_GetRandomNumber>
 80172da:	4601      	mov	r1, r0
 80172dc:	4b35      	ldr	r3, [pc, #212]	; (80173b4 <Get_Kyosan_EI_Message+0x880>)
 80172de:	fba3 2301 	umull	r2, r3, r3, r1
 80172e2:	09da      	lsrs	r2, r3, #7
 80172e4:	4613      	mov	r3, r2
 80172e6:	021b      	lsls	r3, r3, #8
 80172e8:	1a9b      	subs	r3, r3, r2
 80172ea:	1aca      	subs	r2, r1, r3
 80172ec:	b293      	uxth	r3, r2
 80172ee:	8bfa      	ldrh	r2, [r7, #30]
 80172f0:	1ad3      	subs	r3, r2, r3
 80172f2:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(C_CRC == R_CRC)
 80172f4:	897a      	ldrh	r2, [r7, #10]
 80172f6:	8bfb      	ldrh	r3, [r7, #30]
 80172f8:	429a      	cmp	r2, r3
 80172fa:	d11e      	bne.n	801733a <Get_Kyosan_EI_Message+0x806>
				{
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 80172fc:	f002 fb98 	bl	8019a30 <HAL_GetTick>
 8017300:	4603      	mov	r3, r0
 8017302:	4a2e      	ldr	r2, [pc, #184]	; (80173bc <Get_Kyosan_EI_Message+0x888>)
 8017304:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8017306:	f44f 7180 	mov.w	r1, #256	; 0x100
 801730a:	482d      	ldr	r0, [pc, #180]	; (80173c0 <Get_Kyosan_EI_Message+0x88c>)
 801730c:	f005 f879 	bl	801c402 <HAL_GPIO_TogglePin>

					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8017310:	4b22      	ldr	r3, [pc, #136]	; (801739c <Get_Kyosan_EI_Message+0x868>)
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	b25b      	sxtb	r3, r3
 8017316:	11db      	asrs	r3, r3, #7
 8017318:	b25b      	sxtb	r3, r3
 801731a:	f003 0301 	and.w	r3, r3, #1
 801731e:	2b00      	cmp	r3, #0
 8017320:	d105      	bne.n	801732e <Get_Kyosan_EI_Message+0x7fa>
					{
						KyosanClocks.PollingDataPosRecvCLK = HAL_GetTick();
 8017322:	f002 fb85 	bl	8019a30 <HAL_GetTick>
 8017326:	4603      	mov	r3, r0
 8017328:	4a24      	ldr	r2, [pc, #144]	; (80173bc <Get_Kyosan_EI_Message+0x888>)
 801732a:	60d3      	str	r3, [r2, #12]
 801732c:	e01c      	b.n	8017368 <Get_Kyosan_EI_Message+0x834>
					}
					else
					{
						KyosanClocks.PollingDataNegRecvCLK = HAL_GetTick();
 801732e:	f002 fb7f 	bl	8019a30 <HAL_GetTick>
 8017332:	4603      	mov	r3, r0
 8017334:	4a21      	ldr	r2, [pc, #132]	; (80173bc <Get_Kyosan_EI_Message+0x888>)
 8017336:	6113      	str	r3, [r2, #16]
 8017338:	e016      	b.n	8017368 <Get_Kyosan_EI_Message+0x834>
					}
					//CRC_FailCnt = RESET;
				}
				else
				{
					printf("Polling Data CRC Failed\nC:%04x-R:%04x\n",C_CRC,R_CRC);
 801733a:	897b      	ldrh	r3, [r7, #10]
 801733c:	8bfa      	ldrh	r2, [r7, #30]
 801733e:	4619      	mov	r1, r3
 8017340:	4820      	ldr	r0, [pc, #128]	; (80173c4 <Get_Kyosan_EI_Message+0x890>)
 8017342:	f00f fb7f 	bl	8026a44 <iprintf>
					printf("\n%c Polling Data CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 8017346:	4b15      	ldr	r3, [pc, #84]	; (801739c <Get_Kyosan_EI_Message+0x868>)
 8017348:	781b      	ldrb	r3, [r3, #0]
 801734a:	b25b      	sxtb	r3, r3
 801734c:	11db      	asrs	r3, r3, #7
 801734e:	b25b      	sxtb	r3, r3
 8017350:	f003 0301 	and.w	r3, r3, #1
 8017354:	2b00      	cmp	r3, #0
 8017356:	d101      	bne.n	801735c <Get_Kyosan_EI_Message+0x828>
 8017358:	212b      	movs	r1, #43	; 0x2b
 801735a:	e000      	b.n	801735e <Get_Kyosan_EI_Message+0x82a>
 801735c:	212d      	movs	r1, #45	; 0x2d
 801735e:	897a      	ldrh	r2, [r7, #10]
 8017360:	8bfb      	ldrh	r3, [r7, #30]
 8017362:	4819      	ldr	r0, [pc, #100]	; (80173c8 <Get_Kyosan_EI_Message+0x894>)
 8017364:	f00f fb6e 	bl	8026a44 <iprintf>

				}
				Cur_Receive_Length = RESET;
 8017368:	4b0b      	ldr	r3, [pc, #44]	; (8017398 <Get_Kyosan_EI_Message+0x864>)
 801736a:	2200      	movs	r2, #0
 801736c:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 801736e:	4b0c      	ldr	r3, [pc, #48]	; (80173a0 <Get_Kyosan_EI_Message+0x86c>)
 8017370:	2200      	movs	r2, #0
 8017372:	801a      	strh	r2, [r3, #0]
			}
			break;
 8017374:	e002      	b.n	801737c <Get_Kyosan_EI_Message+0x848>
		default:
			Cur_Receive_Length = RESET;
 8017376:	4b08      	ldr	r3, [pc, #32]	; (8017398 <Get_Kyosan_EI_Message+0x864>)
 8017378:	2200      	movs	r2, #0
 801737a:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(ComPort))
 801737c:	79fb      	ldrb	r3, [r7, #7]
 801737e:	4618      	mov	r0, r3
 8017380:	f001 ffee 	bl	8019360 <Com_DataReady>
 8017384:	4603      	mov	r3, r0
 8017386:	2b00      	cmp	r3, #0
 8017388:	f47f abfa 	bne.w	8016b80 <Get_Kyosan_EI_Message+0x4c>

		}
	}
	UNUSED(ControlID);
}
 801738c:	bf00      	nop
 801738e:	bf00      	nop
 8017390:	3724      	adds	r7, #36	; 0x24
 8017392:	46bd      	mov	sp, r7
 8017394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017396:	bf00      	nop
 8017398:	2000b9de 	.word	0x2000b9de
 801739c:	2000b9e4 	.word	0x2000b9e4
 80173a0:	2000b9e0 	.word	0x2000b9e0
 80173a4:	2000b47c 	.word	0x2000b47c
 80173a8:	0802b9cc 	.word	0x0802b9cc
 80173ac:	2000bcec 	.word	0x2000bcec
 80173b0:	80008001 	.word	0x80008001
 80173b4:	80808081 	.word	0x80808081
 80173b8:	0802b9fc 	.word	0x0802b9fc
 80173bc:	2000b484 	.word	0x2000b484
 80173c0:	40021c00 	.word	0x40021c00
 80173c4:	0802ba2c 	.word	0x0802ba2c
 80173c8:	0802ba54 	.word	0x0802ba54

080173cc <Calc_Kysoan_CRC>:


uint16_t Calc_Kysoan_CRC(uint8_t *data, size_t length)
{
 80173cc:	b480      	push	{r7}
 80173ce:	b087      	sub	sp, #28
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	6039      	str	r1, [r7, #0]
	uint16_t crc = KYOSAN_CRC_INIT_VAL;
 80173d6:	2300      	movs	r3, #0
 80173d8:	82fb      	strh	r3, [r7, #22]

	for (size_t i = 0; i < length; i++)
 80173da:	2300      	movs	r3, #0
 80173dc:	613b      	str	r3, [r7, #16]
 80173de:	e026      	b.n	801742e <Calc_Kysoan_CRC+0x62>
	{
		crc ^= (uint16_t)data[i] << 8; // XOR with next byte shifted to left
 80173e0:	687a      	ldr	r2, [r7, #4]
 80173e2:	693b      	ldr	r3, [r7, #16]
 80173e4:	4413      	add	r3, r2
 80173e6:	781b      	ldrb	r3, [r3, #0]
 80173e8:	021b      	lsls	r3, r3, #8
 80173ea:	b21a      	sxth	r2, r3
 80173ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80173f0:	4053      	eors	r3, r2
 80173f2:	b21b      	sxth	r3, r3
 80173f4:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 80173f6:	2300      	movs	r3, #0
 80173f8:	60fb      	str	r3, [r7, #12]
 80173fa:	e012      	b.n	8017422 <Calc_Kysoan_CRC+0x56>
		{
			if (crc & 0x8000)
 80173fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017400:	2b00      	cmp	r3, #0
 8017402:	da08      	bge.n	8017416 <Calc_Kysoan_CRC+0x4a>
			{
				crc = (crc << 1) ^ KYOSAN_CRC_POLYNOMIAL;
 8017404:	8afb      	ldrh	r3, [r7, #22]
 8017406:	005b      	lsls	r3, r3, #1
 8017408:	b21a      	sxth	r2, r3
 801740a:	f241 0321 	movw	r3, #4129	; 0x1021
 801740e:	4053      	eors	r3, r2
 8017410:	b21b      	sxth	r3, r3
 8017412:	82fb      	strh	r3, [r7, #22]
 8017414:	e002      	b.n	801741c <Calc_Kysoan_CRC+0x50>
			}
			else
			{
				crc <<= 1;
 8017416:	8afb      	ldrh	r3, [r7, #22]
 8017418:	005b      	lsls	r3, r3, #1
 801741a:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	3301      	adds	r3, #1
 8017420:	60fb      	str	r3, [r7, #12]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	2b07      	cmp	r3, #7
 8017426:	dde9      	ble.n	80173fc <Calc_Kysoan_CRC+0x30>
	for (size_t i = 0; i < length; i++)
 8017428:	693b      	ldr	r3, [r7, #16]
 801742a:	3301      	adds	r3, #1
 801742c:	613b      	str	r3, [r7, #16]
 801742e:	693a      	ldr	r2, [r7, #16]
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	429a      	cmp	r2, r3
 8017434:	d3d4      	bcc.n	80173e0 <Calc_Kysoan_CRC+0x14>
			}
		}
	}
	return crc;
 8017436:	8afb      	ldrh	r3, [r7, #22]
}
 8017438:	4618      	mov	r0, r3
 801743a:	371c      	adds	r7, #28
 801743c:	46bd      	mov	sp, r7
 801743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017442:	4770      	bx	lr

08017444 <Check_forKyosanCMD>:
	}
}


void Check_forKyosanCMD(void)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b09a      	sub	sp, #104	; 0x68
 8017448:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 801744a:	2300      	movs	r3, #0
 801744c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8017450:	2300      	movs	r3, #0
 8017452:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8017456:	2300      	movs	r3, #0
 8017458:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t Buffer[100] = {0,};
 801745c:	2300      	movs	r3, #0
 801745e:	603b      	str	r3, [r7, #0]
 8017460:	1d3b      	adds	r3, r7, #4
 8017462:	2260      	movs	r2, #96	; 0x60
 8017464:	2100      	movs	r1, #0
 8017466:	4618      	mov	r0, r3
 8017468:	f00f fa04 	bl	8026874 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 801746c:	4b90      	ldr	r3, [pc, #576]	; (80176b0 <Check_forKyosanCMD+0x26c>)
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	4618      	mov	r0, r3
 8017472:	f7f8 ffc1 	bl	80103f8 <HAL_Elaps_Ticks>
 8017476:	4603      	mov	r3, r0
 8017478:	2b09      	cmp	r3, #9
 801747a:	f240 8114 	bls.w	80176a6 <Check_forKyosanCMD+0x262>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 801747e:	e010      	b.n	80174a2 <Check_forKyosanCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8017480:	2000      	movs	r0, #0
 8017482:	f001 ffad 	bl	80193e0 <Com_Get_Byte>
 8017486:	4603      	mov	r3, r0
 8017488:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			Buffer[Index++] = Byte;
 801748c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8017490:	1c5a      	adds	r2, r3, #1
 8017492:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8017496:	3368      	adds	r3, #104	; 0x68
 8017498:	443b      	add	r3, r7
 801749a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801749e:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 80174a2:	2000      	movs	r0, #0
 80174a4:	f001 ff5c 	bl	8019360 <Com_DataReady>
 80174a8:	4603      	mov	r3, r0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d1e8      	bne.n	8017480 <Check_forKyosanCMD+0x3c>
		}
		if(Index>0)
 80174ae:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f000 80ee 	beq.w	8017694 <Check_forKyosanCMD+0x250>
		{
			Buffer[Index] = 0;
 80174b8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80174bc:	3368      	adds	r3, #104	; 0x68
 80174be:	443b      	add	r3, r7
 80174c0:	2200      	movs	r2, #0
 80174c2:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 80174c6:	463b      	mov	r3, r7
 80174c8:	4619      	mov	r1, r3
 80174ca:	487a      	ldr	r0, [pc, #488]	; (80176b4 <Check_forKyosanCMD+0x270>)
 80174cc:	f00f faba 	bl	8026a44 <iprintf>
			switch(Is_KyosanCommand_Valid(Buffer,Index))
 80174d0:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80174d4:	463b      	mov	r3, r7
 80174d6:	4611      	mov	r1, r2
 80174d8:	4618      	mov	r0, r3
 80174da:	f000 fa25 	bl	8017928 <Is_KyosanCommand_Valid>
 80174de:	4603      	mov	r3, r0
 80174e0:	2b07      	cmp	r3, #7
 80174e2:	f200 80bb 	bhi.w	801765c <Check_forKyosanCMD+0x218>
 80174e6:	a201      	add	r2, pc, #4	; (adr r2, 80174ec <Check_forKyosanCMD+0xa8>)
 80174e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174ec:	0801750d 	.word	0x0801750d
 80174f0:	0801751b 	.word	0x0801751b
 80174f4:	0801757f 	.word	0x0801757f
 80174f8:	080175a1 	.word	0x080175a1
 80174fc:	080175c9 	.word	0x080175c9
 8017500:	080175f1 	.word	0x080175f1
 8017504:	08017619 	.word	0x08017619
 8017508:	08017641 	.word	0x08017641
			{
			case ZERO:
				Dats_Request_Flag = 1;
 801750c:	4b6a      	ldr	r3, [pc, #424]	; (80176b8 <Check_forKyosanCMD+0x274>)
 801750e:	2201      	movs	r2, #1
 8017510:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8017512:	486a      	ldr	r0, [pc, #424]	; (80176bc <Check_forKyosanCMD+0x278>)
 8017514:	f00f fb32 	bl	8026b7c <puts>
				break;
 8017518:	e0bc      	b.n	8017694 <Check_forKyosanCMD+0x250>
			case ONE:
				printf("Received \"%s\":%u\n",KyosanCommands_List[ONE],(Buffer[Index-1])-'0');
 801751a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801751e:	3b01      	subs	r3, #1
 8017520:	3368      	adds	r3, #104	; 0x68
 8017522:	443b      	add	r3, r7
 8017524:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8017528:	3b30      	subs	r3, #48	; 0x30
 801752a:	461a      	mov	r2, r3
 801752c:	4964      	ldr	r1, [pc, #400]	; (80176c0 <Check_forKyosanCMD+0x27c>)
 801752e:	4865      	ldr	r0, [pc, #404]	; (80176c4 <Check_forKyosanCMD+0x280>)
 8017530:	f00f fa88 	bl	8026a44 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8017534:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8017538:	3b01      	subs	r3, #1
 801753a:	3368      	adds	r3, #104	; 0x68
 801753c:	443b      	add	r3, r7
 801753e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8017542:	2b2f      	cmp	r3, #47	; 0x2f
 8017544:	d914      	bls.n	8017570 <Check_forKyosanCMD+0x12c>
 8017546:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801754a:	3b01      	subs	r3, #1
 801754c:	3368      	adds	r3, #104	; 0x68
 801754e:	443b      	add	r3, r7
 8017550:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8017554:	2b31      	cmp	r3, #49	; 0x31
 8017556:	d80b      	bhi.n	8017570 <Check_forKyosanCMD+0x12c>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8017558:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801755c:	3b01      	subs	r3, #1
 801755e:	3368      	adds	r3, #104	; 0x68
 8017560:	443b      	add	r3, r7
 8017562:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8017566:	3b30      	subs	r3, #48	; 0x30
 8017568:	b2da      	uxtb	r2, r3
 801756a:	4b57      	ldr	r3, [pc, #348]	; (80176c8 <Check_forKyosanCMD+0x284>)
 801756c:	701a      	strb	r2, [r3, #0]
 801756e:	e002      	b.n	8017576 <Check_forKyosanCMD+0x132>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8017570:	4856      	ldr	r0, [pc, #344]	; (80176cc <Check_forKyosanCMD+0x288>)
 8017572:	f00f fb03 	bl	8026b7c <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8017576:	2301      	movs	r3, #1
 8017578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801757c:	e08a      	b.n	8017694 <Check_forKyosanCMD+0x250>

			case TWO:
				printf("Received %s\n",KyosanCommands_List[TWO]);
 801757e:	4954      	ldr	r1, [pc, #336]	; (80176d0 <Check_forKyosanCMD+0x28c>)
 8017580:	4854      	ldr	r0, [pc, #336]	; (80176d4 <Check_forKyosanCMD+0x290>)
 8017582:	f00f fa5f 	bl	8026a44 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_POS\n");
 8017586:	4854      	ldr	r0, [pc, #336]	; (80176d8 <Check_forKyosanCMD+0x294>)
 8017588:	f00f faf8 	bl	8026b7c <puts>
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 801758c:	4b53      	ldr	r3, [pc, #332]	; (80176dc <Check_forKyosanCMD+0x298>)
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	f043 0301 	orr.w	r3, r3, #1
 8017594:	4a51      	ldr	r2, [pc, #324]	; (80176dc <Check_forKyosanCMD+0x298>)
 8017596:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8017598:	2301      	movs	r3, #1
 801759a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801759e:	e079      	b.n	8017694 <Check_forKyosanCMD+0x250>

			case THREE:
				printf("Received %s\n",KyosanCommands_List[THREE]);
 80175a0:	494f      	ldr	r1, [pc, #316]	; (80176e0 <Check_forKyosanCMD+0x29c>)
 80175a2:	484c      	ldr	r0, [pc, #304]	; (80176d4 <Check_forKyosanCMD+0x290>)
 80175a4:	f00f fa4e 	bl	8026a44 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_NEG\n");
 80175a8:	484e      	ldr	r0, [pc, #312]	; (80176e4 <Check_forKyosanCMD+0x2a0>)
 80175aa:	f00f fae7 	bl	8026b7c <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80175ae:	4b4b      	ldr	r3, [pc, #300]	; (80176dc <Check_forKyosanCMD+0x298>)
 80175b0:	2200      	movs	r2, #0
 80175b2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 80175b4:	4b49      	ldr	r3, [pc, #292]	; (80176dc <Check_forKyosanCMD+0x298>)
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	f043 0302 	orr.w	r3, r3, #2
 80175bc:	4a47      	ldr	r2, [pc, #284]	; (80176dc <Check_forKyosanCMD+0x298>)
 80175be:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 80175c0:	2301      	movs	r3, #1
 80175c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80175c6:	e065      	b.n	8017694 <Check_forKyosanCMD+0x250>

			case FOUR:
				printf("Received %s\n",KyosanCommands_List[FOUR]);
 80175c8:	4947      	ldr	r1, [pc, #284]	; (80176e8 <Check_forKyosanCMD+0x2a4>)
 80175ca:	4842      	ldr	r0, [pc, #264]	; (80176d4 <Check_forKyosanCMD+0x290>)
 80175cc:	f00f fa3a 	bl	8026a44 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_POS\n");
 80175d0:	4846      	ldr	r0, [pc, #280]	; (80176ec <Check_forKyosanCMD+0x2a8>)
 80175d2:	f00f fad3 	bl	8026b7c <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80175d6:	4b41      	ldr	r3, [pc, #260]	; (80176dc <Check_forKyosanCMD+0x298>)
 80175d8:	2200      	movs	r2, #0
 80175da:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 80175dc:	4b3f      	ldr	r3, [pc, #252]	; (80176dc <Check_forKyosanCMD+0x298>)
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	f043 0304 	orr.w	r3, r3, #4
 80175e4:	4a3d      	ldr	r2, [pc, #244]	; (80176dc <Check_forKyosanCMD+0x298>)
 80175e6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 80175e8:	2301      	movs	r3, #1
 80175ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80175ee:	e051      	b.n	8017694 <Check_forKyosanCMD+0x250>

			case FIVE:
				printf("Received %s\n",KyosanCommands_List[FIVE]);
 80175f0:	493f      	ldr	r1, [pc, #252]	; (80176f0 <Check_forKyosanCMD+0x2ac>)
 80175f2:	4838      	ldr	r0, [pc, #224]	; (80176d4 <Check_forKyosanCMD+0x290>)
 80175f4:	f00f fa26 	bl	8026a44 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_NEG\n");
 80175f8:	483e      	ldr	r0, [pc, #248]	; (80176f4 <Check_forKyosanCMD+0x2b0>)
 80175fa:	f00f fabf 	bl	8026b7c <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80175fe:	4b37      	ldr	r3, [pc, #220]	; (80176dc <Check_forKyosanCMD+0x298>)
 8017600:	2200      	movs	r2, #0
 8017602:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8017604:	4b35      	ldr	r3, [pc, #212]	; (80176dc <Check_forKyosanCMD+0x298>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	f043 0308 	orr.w	r3, r3, #8
 801760c:	4a33      	ldr	r2, [pc, #204]	; (80176dc <Check_forKyosanCMD+0x298>)
 801760e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8017610:	2301      	movs	r3, #1
 8017612:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8017616:	e03d      	b.n	8017694 <Check_forKyosanCMD+0x250>

			case SIX:
				printf("Received %s\n",KyosanCommands_List[SIX]);
 8017618:	4937      	ldr	r1, [pc, #220]	; (80176f8 <Check_forKyosanCMD+0x2b4>)
 801761a:	482e      	ldr	r0, [pc, #184]	; (80176d4 <Check_forKyosanCMD+0x290>)
 801761c:	f00f fa12 	bl	8026a44 <iprintf>
				printf("COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA\n");
 8017620:	4836      	ldr	r0, [pc, #216]	; (80176fc <Check_forKyosanCMD+0x2b8>)
 8017622:	f00f faab 	bl	8026b7c <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8017626:	4b2d      	ldr	r3, [pc, #180]	; (80176dc <Check_forKyosanCMD+0x298>)
 8017628:	2200      	movs	r2, #0
 801762a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 801762c:	4b2b      	ldr	r3, [pc, #172]	; (80176dc <Check_forKyosanCMD+0x298>)
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	f043 0310 	orr.w	r3, r3, #16
 8017634:	4a29      	ldr	r2, [pc, #164]	; (80176dc <Check_forKyosanCMD+0x298>)
 8017636:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8017638:	2301      	movs	r3, #1
 801763a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801763e:	e029      	b.n	8017694 <Check_forKyosanCMD+0x250>
			case SEVEN:
				printf("Received %s\n",KyosanCommands_List[SEVEN]);
 8017640:	492f      	ldr	r1, [pc, #188]	; (8017700 <Check_forKyosanCMD+0x2bc>)
 8017642:	4824      	ldr	r0, [pc, #144]	; (80176d4 <Check_forKyosanCMD+0x290>)
 8017644:	f00f f9fe 	bl	8026a44 <iprintf>
				printf("CLEAR ALL\n");
 8017648:	482e      	ldr	r0, [pc, #184]	; (8017704 <Check_forKyosanCMD+0x2c0>)
 801764a:	f00f fa97 	bl	8026b7c <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 801764e:	4b23      	ldr	r3, [pc, #140]	; (80176dc <Check_forKyosanCMD+0x298>)
 8017650:	2200      	movs	r2, #0
 8017652:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 8017654:	2301      	movs	r3, #1
 8017656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801765a:	e01b      	b.n	8017694 <Check_forKyosanCMD+0x250>
			default:
				printf("Please Send Valid Command\n");
 801765c:	481b      	ldr	r0, [pc, #108]	; (80176cc <Check_forKyosanCMD+0x288>)
 801765e:	f00f fa8d 	bl	8026b7c <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 8017662:	2300      	movs	r3, #0
 8017664:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8017668:	e00e      	b.n	8017688 <Check_forKyosanCMD+0x244>
				{
					printf("%s\n",KyosanCommands_List[i]);
 801766a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801766e:	2232      	movs	r2, #50	; 0x32
 8017670:	fb02 f303 	mul.w	r3, r2, r3
 8017674:	4a24      	ldr	r2, [pc, #144]	; (8017708 <Check_forKyosanCMD+0x2c4>)
 8017676:	4413      	add	r3, r2
 8017678:	4618      	mov	r0, r3
 801767a:	f00f fa7f 	bl	8026b7c <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 801767e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8017682:	3301      	adds	r3, #1
 8017684:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8017688:	4b20      	ldr	r3, [pc, #128]	; (801770c <Check_forKyosanCMD+0x2c8>)
 801768a:	781b      	ldrb	r3, [r3, #0]
 801768c:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8017690:	429a      	cmp	r2, r3
 8017692:	d3ea      	bcc.n	801766a <Check_forKyosanCMD+0x226>
				}
			}
		}

		if(IS_COMMAND_RECEIVED == YES)
 8017694:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017698:	2b01      	cmp	r3, #1
 801769a:	d105      	bne.n	80176a8 <Check_forKyosanCMD+0x264>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 801769c:	f240 2005 	movw	r0, #517	; 0x205
 80176a0:	f7f9 fc5e 	bl	8010f60 <TransmitCanPkt>
 80176a4:	e000      	b.n	80176a8 <Check_forKyosanCMD+0x264>
		return;
 80176a6:	bf00      	nop
		}
	}
}
 80176a8:	3768      	adds	r7, #104	; 0x68
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}
 80176ae:	bf00      	nop
 80176b0:	2000c074 	.word	0x2000c074
 80176b4:	0802bcec 	.word	0x0802bcec
 80176b8:	20000bba 	.word	0x20000bba
 80176bc:	0802bd04 	.word	0x0802bd04
 80176c0:	2000b616 	.word	0x2000b616
 80176c4:	0802bd44 	.word	0x0802bd44
 80176c8:	20000bbb 	.word	0x20000bbb
 80176cc:	0802bd58 	.word	0x0802bd58
 80176d0:	2000b648 	.word	0x2000b648
 80176d4:	0802bd74 	.word	0x0802bd74
 80176d8:	0802bd84 	.word	0x0802bd84
 80176dc:	2000b47c 	.word	0x2000b47c
 80176e0:	2000b67a 	.word	0x2000b67a
 80176e4:	0802bda0 	.word	0x0802bda0
 80176e8:	2000b6ac 	.word	0x2000b6ac
 80176ec:	0802bdbc 	.word	0x0802bdbc
 80176f0:	2000b6de 	.word	0x2000b6de
 80176f4:	0802bdd8 	.word	0x0802bdd8
 80176f8:	2000b710 	.word	0x2000b710
 80176fc:	0802bdf4 	.word	0x0802bdf4
 8017700:	2000b742 	.word	0x2000b742
 8017704:	0802be20 	.word	0x0802be20
 8017708:	2000b5e4 	.word	0x2000b5e4
 801770c:	2000b9cc 	.word	0x2000b9cc

08017710 <Update_KyosanCommands>:


void Update_KyosanCommands(void)
{
 8017710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017712:	b083      	sub	sp, #12
 8017714:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 8017716:	2300      	movs	r3, #0
 8017718:	71fb      	strb	r3, [r7, #7]

	KyosanCommands_List[CmdCnt][0] = 0X24;
 801771a:	79fb      	ldrb	r3, [r7, #7]
 801771c:	4a78      	ldr	r2, [pc, #480]	; (8017900 <Update_KyosanCommands+0x1f0>)
 801771e:	2132      	movs	r1, #50	; 0x32
 8017720:	fb01 f303 	mul.w	r3, r1, r3
 8017724:	4413      	add	r3, r2
 8017726:	2224      	movs	r2, #36	; 0x24
 8017728:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][1] = 0X01;
 801772a:	79fb      	ldrb	r3, [r7, #7]
 801772c:	4a74      	ldr	r2, [pc, #464]	; (8017900 <Update_KyosanCommands+0x1f0>)
 801772e:	2132      	movs	r1, #50	; 0x32
 8017730:	fb01 f303 	mul.w	r3, r1, r3
 8017734:	4413      	add	r3, r2
 8017736:	3301      	adds	r3, #1
 8017738:	2201      	movs	r2, #1
 801773a:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][2] = 0X30;
 801773c:	79fb      	ldrb	r3, [r7, #7]
 801773e:	4a70      	ldr	r2, [pc, #448]	; (8017900 <Update_KyosanCommands+0x1f0>)
 8017740:	2132      	movs	r1, #50	; 0x32
 8017742:	fb01 f303 	mul.w	r3, r1, r3
 8017746:	4413      	add	r3, r2
 8017748:	3302      	adds	r3, #2
 801774a:	2230      	movs	r2, #48	; 0x30
 801774c:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][3] = 0X40;
 801774e:	79fb      	ldrb	r3, [r7, #7]
 8017750:	4a6b      	ldr	r2, [pc, #428]	; (8017900 <Update_KyosanCommands+0x1f0>)
 8017752:	2132      	movs	r1, #50	; 0x32
 8017754:	fb01 f303 	mul.w	r3, r1, r3
 8017758:	4413      	add	r3, r2
 801775a:	3303      	adds	r3, #3
 801775c:	2240      	movs	r2, #64	; 0x40
 801775e:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][4] = 0XC0;
 8017760:	79fb      	ldrb	r3, [r7, #7]
 8017762:	4a67      	ldr	r2, [pc, #412]	; (8017900 <Update_KyosanCommands+0x1f0>)
 8017764:	2132      	movs	r1, #50	; 0x32
 8017766:	fb01 f303 	mul.w	r3, r1, r3
 801776a:	4413      	add	r3, r2
 801776c:	3304      	adds	r3, #4
 801776e:	22c0      	movs	r2, #192	; 0xc0
 8017770:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][5] = 0X4E;
 8017772:	79fb      	ldrb	r3, [r7, #7]
 8017774:	4a62      	ldr	r2, [pc, #392]	; (8017900 <Update_KyosanCommands+0x1f0>)
 8017776:	2132      	movs	r1, #50	; 0x32
 8017778:	fb01 f303 	mul.w	r3, r1, r3
 801777c:	4413      	add	r3, r2
 801777e:	3305      	adds	r3, #5
 8017780:	224e      	movs	r2, #78	; 0x4e
 8017782:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][6] = 0X26;
 8017784:	79fb      	ldrb	r3, [r7, #7]
 8017786:	4a5e      	ldr	r2, [pc, #376]	; (8017900 <Update_KyosanCommands+0x1f0>)
 8017788:	2132      	movs	r1, #50	; 0x32
 801778a:	fb01 f303 	mul.w	r3, r1, r3
 801778e:	4413      	add	r3, r2
 8017790:	3306      	adds	r3, #6
 8017792:	2226      	movs	r2, #38	; 0x26
 8017794:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 8017796:	79fb      	ldrb	r3, [r7, #7]
 8017798:	3301      	adds	r3, #1
 801779a:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 801779c:	79fb      	ldrb	r3, [r7, #7]
 801779e:	1c5a      	adds	r2, r3, #1
 80177a0:	71fa      	strb	r2, [r7, #7]
 80177a2:	461a      	mov	r2, r3
 80177a4:	2332      	movs	r3, #50	; 0x32
 80177a6:	fb02 f303 	mul.w	r3, r2, r3
 80177aa:	4a55      	ldr	r2, [pc, #340]	; (8017900 <Update_KyosanCommands+0x1f0>)
 80177ac:	4413      	add	r3, r2
 80177ae:	4955      	ldr	r1, [pc, #340]	; (8017904 <Update_KyosanCommands+0x1f4>)
 80177b0:	461a      	mov	r2, r3
 80177b2:	460b      	mov	r3, r1
 80177b4:	cb03      	ldmia	r3!, {r0, r1}
 80177b6:	6010      	str	r0, [r2, #0]
 80177b8:	6051      	str	r1, [r2, #4]
 80177ba:	8819      	ldrh	r1, [r3, #0]
 80177bc:	789b      	ldrb	r3, [r3, #2]
 80177be:	8111      	strh	r1, [r2, #8]
 80177c0:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_POS");
 80177c2:	79fb      	ldrb	r3, [r7, #7]
 80177c4:	1c5a      	adds	r2, r3, #1
 80177c6:	71fa      	strb	r2, [r7, #7]
 80177c8:	461a      	mov	r2, r3
 80177ca:	2332      	movs	r3, #50	; 0x32
 80177cc:	fb02 f303 	mul.w	r3, r2, r3
 80177d0:	4a4b      	ldr	r2, [pc, #300]	; (8017900 <Update_KyosanCommands+0x1f0>)
 80177d2:	4413      	add	r3, r2
 80177d4:	4a4c      	ldr	r2, [pc, #304]	; (8017908 <Update_KyosanCommands+0x1f8>)
 80177d6:	461d      	mov	r5, r3
 80177d8:	4614      	mov	r4, r2
 80177da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177dc:	6028      	str	r0, [r5, #0]
 80177de:	6069      	str	r1, [r5, #4]
 80177e0:	60aa      	str	r2, [r5, #8]
 80177e2:	60eb      	str	r3, [r5, #12]
 80177e4:	cc03      	ldmia	r4!, {r0, r1}
 80177e6:	6128      	str	r0, [r5, #16]
 80177e8:	6169      	str	r1, [r5, #20]
 80177ea:	8823      	ldrh	r3, [r4, #0]
 80177ec:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_NEG");
 80177ee:	79fb      	ldrb	r3, [r7, #7]
 80177f0:	1c5a      	adds	r2, r3, #1
 80177f2:	71fa      	strb	r2, [r7, #7]
 80177f4:	461a      	mov	r2, r3
 80177f6:	2332      	movs	r3, #50	; 0x32
 80177f8:	fb02 f303 	mul.w	r3, r2, r3
 80177fc:	4a40      	ldr	r2, [pc, #256]	; (8017900 <Update_KyosanCommands+0x1f0>)
 80177fe:	4413      	add	r3, r2
 8017800:	4a42      	ldr	r2, [pc, #264]	; (801790c <Update_KyosanCommands+0x1fc>)
 8017802:	461d      	mov	r5, r3
 8017804:	4614      	mov	r4, r2
 8017806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017808:	6028      	str	r0, [r5, #0]
 801780a:	6069      	str	r1, [r5, #4]
 801780c:	60aa      	str	r2, [r5, #8]
 801780e:	60eb      	str	r3, [r5, #12]
 8017810:	cc03      	ldmia	r4!, {r0, r1}
 8017812:	6128      	str	r0, [r5, #16]
 8017814:	6169      	str	r1, [r5, #20]
 8017816:	8823      	ldrh	r3, [r4, #0]
 8017818:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_POS");
 801781a:	79fb      	ldrb	r3, [r7, #7]
 801781c:	1c5a      	adds	r2, r3, #1
 801781e:	71fa      	strb	r2, [r7, #7]
 8017820:	461a      	mov	r2, r3
 8017822:	2332      	movs	r3, #50	; 0x32
 8017824:	fb02 f303 	mul.w	r3, r2, r3
 8017828:	4a35      	ldr	r2, [pc, #212]	; (8017900 <Update_KyosanCommands+0x1f0>)
 801782a:	4413      	add	r3, r2
 801782c:	4a38      	ldr	r2, [pc, #224]	; (8017910 <Update_KyosanCommands+0x200>)
 801782e:	461d      	mov	r5, r3
 8017830:	4614      	mov	r4, r2
 8017832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017834:	6028      	str	r0, [r5, #0]
 8017836:	6069      	str	r1, [r5, #4]
 8017838:	60aa      	str	r2, [r5, #8]
 801783a:	60eb      	str	r3, [r5, #12]
 801783c:	cc03      	ldmia	r4!, {r0, r1}
 801783e:	6128      	str	r0, [r5, #16]
 8017840:	6169      	str	r1, [r5, #20]
 8017842:	8823      	ldrh	r3, [r4, #0]
 8017844:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_NEG");
 8017846:	79fb      	ldrb	r3, [r7, #7]
 8017848:	1c5a      	adds	r2, r3, #1
 801784a:	71fa      	strb	r2, [r7, #7]
 801784c:	461a      	mov	r2, r3
 801784e:	2332      	movs	r3, #50	; 0x32
 8017850:	fb02 f303 	mul.w	r3, r2, r3
 8017854:	4a2a      	ldr	r2, [pc, #168]	; (8017900 <Update_KyosanCommands+0x1f0>)
 8017856:	4413      	add	r3, r2
 8017858:	4a2e      	ldr	r2, [pc, #184]	; (8017914 <Update_KyosanCommands+0x204>)
 801785a:	461d      	mov	r5, r3
 801785c:	4614      	mov	r4, r2
 801785e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017860:	6028      	str	r0, [r5, #0]
 8017862:	6069      	str	r1, [r5, #4]
 8017864:	60aa      	str	r2, [r5, #8]
 8017866:	60eb      	str	r3, [r5, #12]
 8017868:	cc03      	ldmia	r4!, {r0, r1}
 801786a:	6128      	str	r0, [r5, #16]
 801786c:	6169      	str	r1, [r5, #20]
 801786e:	8823      	ldrh	r3, [r4, #0]
 8017870:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA");
 8017872:	79fb      	ldrb	r3, [r7, #7]
 8017874:	1c5a      	adds	r2, r3, #1
 8017876:	71fa      	strb	r2, [r7, #7]
 8017878:	461a      	mov	r2, r3
 801787a:	2332      	movs	r3, #50	; 0x32
 801787c:	fb02 f303 	mul.w	r3, r2, r3
 8017880:	4a1f      	ldr	r2, [pc, #124]	; (8017900 <Update_KyosanCommands+0x1f0>)
 8017882:	4413      	add	r3, r2
 8017884:	4a24      	ldr	r2, [pc, #144]	; (8017918 <Update_KyosanCommands+0x208>)
 8017886:	4614      	mov	r4, r2
 8017888:	469c      	mov	ip, r3
 801788a:	f104 0e20 	add.w	lr, r4, #32
 801788e:	4665      	mov	r5, ip
 8017890:	4626      	mov	r6, r4
 8017892:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017894:	6028      	str	r0, [r5, #0]
 8017896:	6069      	str	r1, [r5, #4]
 8017898:	60aa      	str	r2, [r5, #8]
 801789a:	60eb      	str	r3, [r5, #12]
 801789c:	3410      	adds	r4, #16
 801789e:	f10c 0c10 	add.w	ip, ip, #16
 80178a2:	4574      	cmp	r4, lr
 80178a4:	d1f3      	bne.n	801788e <Update_KyosanCommands+0x17e>
 80178a6:	4662      	mov	r2, ip
 80178a8:	4623      	mov	r3, r4
 80178aa:	cb03      	ldmia	r3!, {r0, r1}
 80178ac:	6010      	str	r0, [r2, #0]
 80178ae:	6051      	str	r1, [r2, #4]
 80178b0:	881b      	ldrh	r3, [r3, #0]
 80178b2:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 80178b4:	79fb      	ldrb	r3, [r7, #7]
 80178b6:	1c5a      	adds	r2, r3, #1
 80178b8:	71fa      	strb	r2, [r7, #7]
 80178ba:	461a      	mov	r2, r3
 80178bc:	2332      	movs	r3, #50	; 0x32
 80178be:	fb02 f303 	mul.w	r3, r2, r3
 80178c2:	4a0f      	ldr	r2, [pc, #60]	; (8017900 <Update_KyosanCommands+0x1f0>)
 80178c4:	4413      	add	r3, r2
 80178c6:	4915      	ldr	r1, [pc, #84]	; (801791c <Update_KyosanCommands+0x20c>)
 80178c8:	461a      	mov	r2, r3
 80178ca:	460b      	mov	r3, r1
 80178cc:	cb03      	ldmia	r3!, {r0, r1}
 80178ce:	6010      	str	r0, [r2, #0]
 80178d0:	6051      	str	r1, [r2, #4]
 80178d2:	881b      	ldrh	r3, [r3, #0]
 80178d4:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"HELP");
 80178d6:	79fb      	ldrb	r3, [r7, #7]
 80178d8:	1c5a      	adds	r2, r3, #1
 80178da:	71fa      	strb	r2, [r7, #7]
 80178dc:	461a      	mov	r2, r3
 80178de:	2332      	movs	r3, #50	; 0x32
 80178e0:	fb02 f303 	mul.w	r3, r2, r3
 80178e4:	4a06      	ldr	r2, [pc, #24]	; (8017900 <Update_KyosanCommands+0x1f0>)
 80178e6:	4413      	add	r3, r2
 80178e8:	4a0d      	ldr	r2, [pc, #52]	; (8017920 <Update_KyosanCommands+0x210>)
 80178ea:	6810      	ldr	r0, [r2, #0]
 80178ec:	6018      	str	r0, [r3, #0]
 80178ee:	7912      	ldrb	r2, [r2, #4]
 80178f0:	711a      	strb	r2, [r3, #4]
	KyosanCommands_Count =  CmdCnt;
 80178f2:	4a0c      	ldr	r2, [pc, #48]	; (8017924 <Update_KyosanCommands+0x214>)
 80178f4:	79fb      	ldrb	r3, [r7, #7]
 80178f6:	7013      	strb	r3, [r2, #0]
}
 80178f8:	bf00      	nop
 80178fa:	370c      	adds	r7, #12
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017900:	2000b5e4 	.word	0x2000b5e4
 8017904:	0802be2c 	.word	0x0802be2c
 8017908:	0802bd84 	.word	0x0802bd84
 801790c:	0802bda0 	.word	0x0802bda0
 8017910:	0802bdbc 	.word	0x0802bdbc
 8017914:	0802bdd8 	.word	0x0802bdd8
 8017918:	0802bdf4 	.word	0x0802bdf4
 801791c:	0802be38 	.word	0x0802be38
 8017920:	0802be44 	.word	0x0802be44
 8017924:	2000b9cc 	.word	0x2000b9cc

08017928 <Is_KyosanCommand_Valid>:

uint8_t Is_KyosanCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 8017928:	b590      	push	{r4, r7, lr}
 801792a:	b085      	sub	sp, #20
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	460b      	mov	r3, r1
 8017932:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 8017934:	2300      	movs	r3, #0
 8017936:	73fb      	strb	r3, [r7, #15]
 8017938:	e01c      	b.n	8017974 <Is_KyosanCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)KyosanCommands_List[Traverser]) != NULL)
		if(memcmp(Buffer,KyosanCommands_List[Traverser],strlen((char *)KyosanCommands_List[Traverser])) == 0)
 801793a:	7bfb      	ldrb	r3, [r7, #15]
 801793c:	2232      	movs	r2, #50	; 0x32
 801793e:	fb02 f303 	mul.w	r3, r2, r3
 8017942:	4a11      	ldr	r2, [pc, #68]	; (8017988 <Is_KyosanCommand_Valid+0x60>)
 8017944:	189c      	adds	r4, r3, r2
 8017946:	7bfb      	ldrb	r3, [r7, #15]
 8017948:	2232      	movs	r2, #50	; 0x32
 801794a:	fb02 f303 	mul.w	r3, r2, r3
 801794e:	4a0e      	ldr	r2, [pc, #56]	; (8017988 <Is_KyosanCommand_Valid+0x60>)
 8017950:	4413      	add	r3, r2
 8017952:	4618      	mov	r0, r3
 8017954:	f7e8 fc7e 	bl	8000254 <strlen>
 8017958:	4603      	mov	r3, r0
 801795a:	461a      	mov	r2, r3
 801795c:	4621      	mov	r1, r4
 801795e:	6878      	ldr	r0, [r7, #4]
 8017960:	f00e ff50 	bl	8026804 <memcmp>
 8017964:	4603      	mov	r3, r0
 8017966:	2b00      	cmp	r3, #0
 8017968:	d101      	bne.n	801796e <Is_KyosanCommand_Valid+0x46>
		{
			return Traverser;
 801796a:	7bfb      	ldrb	r3, [r7, #15]
 801796c:	e008      	b.n	8017980 <Is_KyosanCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 801796e:	7bfb      	ldrb	r3, [r7, #15]
 8017970:	3301      	adds	r3, #1
 8017972:	73fb      	strb	r3, [r7, #15]
 8017974:	4b05      	ldr	r3, [pc, #20]	; (801798c <Is_KyosanCommand_Valid+0x64>)
 8017976:	781b      	ldrb	r3, [r3, #0]
 8017978:	7bfa      	ldrb	r2, [r7, #15]
 801797a:	429a      	cmp	r2, r3
 801797c:	d3dd      	bcc.n	801793a <Is_KyosanCommand_Valid+0x12>
		}
	}
	return 255;
 801797e:	23ff      	movs	r3, #255	; 0xff
}
 8017980:	4618      	mov	r0, r3
 8017982:	3714      	adds	r7, #20
 8017984:	46bd      	mov	sp, r7
 8017986:	bd90      	pop	{r4, r7, pc}
 8017988:	2000b5e4 	.word	0x2000b5e4
 801798c:	2000b9cc 	.word	0x2000b9cc

08017990 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8017990:	b480      	push	{r7}
 8017992:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8017994:	f3bf 8f4f 	dsb	sy
}
 8017998:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801799a:	f3bf 8f6f 	isb	sy
}
 801799e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80179a0:	4b0d      	ldr	r3, [pc, #52]	; (80179d8 <SCB_EnableICache+0x48>)
 80179a2:	2200      	movs	r2, #0
 80179a4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80179a8:	f3bf 8f4f 	dsb	sy
}
 80179ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80179ae:	f3bf 8f6f 	isb	sy
}
 80179b2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80179b4:	4b08      	ldr	r3, [pc, #32]	; (80179d8 <SCB_EnableICache+0x48>)
 80179b6:	695b      	ldr	r3, [r3, #20]
 80179b8:	4a07      	ldr	r2, [pc, #28]	; (80179d8 <SCB_EnableICache+0x48>)
 80179ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80179be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80179c0:	f3bf 8f4f 	dsb	sy
}
 80179c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80179c6:	f3bf 8f6f 	isb	sy
}
 80179ca:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80179cc:	bf00      	nop
 80179ce:	46bd      	mov	sp, r7
 80179d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d4:	4770      	bx	lr
 80179d6:	bf00      	nop
 80179d8:	e000ed00 	.word	0xe000ed00

080179dc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80179dc:	b480      	push	{r7}
 80179de:	b085      	sub	sp, #20
 80179e0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80179e2:	4b1f      	ldr	r3, [pc, #124]	; (8017a60 <SCB_EnableDCache+0x84>)
 80179e4:	2200      	movs	r2, #0
 80179e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80179ea:	f3bf 8f4f 	dsb	sy
}
 80179ee:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80179f0:	4b1b      	ldr	r3, [pc, #108]	; (8017a60 <SCB_EnableDCache+0x84>)
 80179f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80179f6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	0b5b      	lsrs	r3, r3, #13
 80179fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017a00:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	08db      	lsrs	r3, r3, #3
 8017a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017a0a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	015a      	lsls	r2, r3, #5
 8017a10:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8017a14:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8017a16:	68ba      	ldr	r2, [r7, #8]
 8017a18:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8017a1a:	4911      	ldr	r1, [pc, #68]	; (8017a60 <SCB_EnableDCache+0x84>)
 8017a1c:	4313      	orrs	r3, r2
 8017a1e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8017a22:	68bb      	ldr	r3, [r7, #8]
 8017a24:	1e5a      	subs	r2, r3, #1
 8017a26:	60ba      	str	r2, [r7, #8]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d1ef      	bne.n	8017a0c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	1e5a      	subs	r2, r3, #1
 8017a30:	60fa      	str	r2, [r7, #12]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d1e5      	bne.n	8017a02 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8017a36:	f3bf 8f4f 	dsb	sy
}
 8017a3a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8017a3c:	4b08      	ldr	r3, [pc, #32]	; (8017a60 <SCB_EnableDCache+0x84>)
 8017a3e:	695b      	ldr	r3, [r3, #20]
 8017a40:	4a07      	ldr	r2, [pc, #28]	; (8017a60 <SCB_EnableDCache+0x84>)
 8017a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017a46:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8017a48:	f3bf 8f4f 	dsb	sy
}
 8017a4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017a4e:	f3bf 8f6f 	isb	sy
}
 8017a52:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8017a54:	bf00      	nop
 8017a56:	3714      	adds	r7, #20
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5e:	4770      	bx	lr
 8017a60:	e000ed00 	.word	0xe000ed00

08017a64 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b082      	sub	sp, #8
 8017a68:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8017a6e:	f000 f9b9 	bl	8017de4 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8017a72:	f7ff ff8d 	bl	8017990 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8017a76:	f7ff ffb1 	bl	80179dc <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8017a7a:	f001 ff79 	bl	8019970 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8017a7e:	f000 f8eb 	bl	8017c58 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 8017a82:	f7f2 fe93 	bl	800a7ac <reset_cause_get>
 8017a86:	4603      	mov	r3, r0
 8017a88:	4618      	mov	r0, r3
 8017a8a:	f7f2 fee1 	bl	800a850 <reset_cause_get_name>
 8017a8e:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 8017a90:	f7fe fadc 	bl	801604c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8017a94:	f001 f980 	bl	8018d98 <MX_USART1_UART_Init>
	Get_Slot();
 8017a98:	f7e9 f818 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8017a9c:	f7f9 f8d6 	bl	8010c4c <MX_CAN2_Init>
	MX_CAN3_Init();
 8017aa0:	f7f9 f94c 	bl	8010d3c <MX_CAN3_Init>
	MX_I2C1_Init();
 8017aa4:	f7fe fd02 	bl	80164ac <MX_I2C1_Init>
	MX_I2C2_Init();
 8017aa8:	f7fe fd40 	bl	801652c <MX_I2C2_Init>
	MX_SPI1_Init();
 8017aac:	f000 fa2a 	bl	8017f04 <MX_SPI1_Init>
	printf("\r\r\r\r");
 8017ab0:	485b      	ldr	r0, [pc, #364]	; (8017c20 <main+0x1bc>)
 8017ab2:	f00e ffc7 	bl	8026a44 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 8017ab6:	485b      	ldr	r0, [pc, #364]	; (8017c24 <main+0x1c0>)
 8017ab8:	f00f f860 	bl	8026b7c <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8017abc:	6879      	ldr	r1, [r7, #4]
 8017abe:	485a      	ldr	r0, [pc, #360]	; (8017c28 <main+0x1c4>)
 8017ac0:	f00e ffc0 	bl	8026a44 <iprintf>
	Get_Build_Details();
 8017ac4:	f000 f932 	bl	8017d2c <Get_Build_Details>
	Get_Config();
 8017ac8:	f000 fd88 	bl	80185dc <Get_Config>
	MX_RNG_Init();
 8017acc:	f000 f9bc 	bl	8017e48 <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8017ad0:	2208      	movs	r2, #8
 8017ad2:	2100      	movs	r1, #0
 8017ad4:	4855      	ldr	r0, [pc, #340]	; (8017c2c <main+0x1c8>)
 8017ad6:	f00e fecd 	bl	8026874 <memset>
	HAL_Delay(250);
 8017ada:	20fa      	movs	r0, #250	; 0xfa
 8017adc:	f001 ffb4 	bl	8019a48 <HAL_Delay>


	switch(EI_data.ProtocolType)
 8017ae0:	4b53      	ldr	r3, [pc, #332]	; (8017c30 <main+0x1cc>)
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	3b01      	subs	r3, #1
 8017ae6:	2b03      	cmp	r3, #3
 8017ae8:	d86d      	bhi.n	8017bc6 <main+0x162>
 8017aea:	a201      	add	r2, pc, #4	; (adr r2, 8017af0 <main+0x8c>)
 8017aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017af0:	08017b01 	.word	0x08017b01
 8017af4:	08017b5b 	.word	0x08017b5b
 8017af8:	08017b83 	.word	0x08017b83
 8017afc:	08017bb3 	.word	0x08017bb3
	{
	case HITACHI:
		print_self_Details_Hitachi();
 8017b00:	f7f1 fc74 	bl	80093ec <print_self_Details_Hitachi>
		ReAssignData();
 8017b04:	f7f2 f9fc 	bl	8009f00 <ReAssignData>
		Update_HitachiCommands();
 8017b08:	f7e8 fecc 	bl	80008a4 <Update_HitachiCommands>
		printf("Protocol Selected is HITACHI\n");
 8017b0c:	4849      	ldr	r0, [pc, #292]	; (8017c34 <main+0x1d0>)
 8017b0e:	f00f f835 	bl	8026b7c <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8017b12:	4849      	ldr	r0, [pc, #292]	; (8017c38 <main+0x1d4>)
 8017b14:	f00f f832 	bl	8026b7c <puts>
		MX_LWIP_Init();
 8017b18:	f009 f8b4 	bl	8020c84 <MX_LWIP_Init>
		udpServer_init();
 8017b1c:	f7f8 fc7c 	bl	8010418 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8017b20:	4846      	ldr	r0, [pc, #280]	; (8017c3c <main+0x1d8>)
 8017b22:	f00f f82b 	bl	8026b7c <puts>
		if((EI_data.Hitachi_st.EnableSerialPort > 0) && (EI_data.Hitachi_st.BaudRate > 0) )
 8017b26:	4b42      	ldr	r3, [pc, #264]	; (8017c30 <main+0x1cc>)
 8017b28:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d04e      	beq.n	8017bce <main+0x16a>
 8017b30:	4b3f      	ldr	r3, [pc, #252]	; (8017c30 <main+0x1cc>)
 8017b32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d049      	beq.n	8017bce <main+0x16a>
		{
			MX_UART7_Init();
 8017b3a:	f001 f8f7 	bl	8018d2c <MX_UART7_Init>
			printf("Initializing UART with BaudRate:%lu\n",EI_data.Hitachi_st.BaudRate);
 8017b3e:	4b3c      	ldr	r3, [pc, #240]	; (8017c30 <main+0x1cc>)
 8017b40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017b44:	4619      	mov	r1, r3
 8017b46:	483e      	ldr	r0, [pc, #248]	; (8017c40 <main+0x1dc>)
 8017b48:	f00e ff7c 	bl	8026a44 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 8017b4c:	4b38      	ldr	r3, [pc, #224]	; (8017c30 <main+0x1cc>)
 8017b4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017b52:	4618      	mov	r0, r3
 8017b54:	f001 face 	bl	80190f4 <UART4_Init>
		}

#if ENABLE_SIGNAL_PRINT
		UpdateSIGNALSNamesHitachi();
#endif
		break;
 8017b58:	e039      	b.n	8017bce <main+0x16a>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8017b5a:	483a      	ldr	r0, [pc, #232]	; (8017c44 <main+0x1e0>)
 8017b5c:	f00f f80e 	bl	8026b7c <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8017b60:	4835      	ldr	r0, [pc, #212]	; (8017c38 <main+0x1d4>)
 8017b62:	f00f f80b 	bl	8026b7c <puts>
		MX_LWIP_Init();
 8017b66:	f009 f88d 	bl	8020c84 <MX_LWIP_Init>
		udpServer_init();
 8017b6a:	f7f8 fc55 	bl	8010418 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8017b6e:	4833      	ldr	r0, [pc, #204]	; (8017c3c <main+0x1d8>)
 8017b70:	f00f f804 	bl	8026b7c <puts>
		print_self_DetailsSiemens();
 8017b74:	f7f8 fb2c 	bl	80101d0 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 8017b78:	f7f7 f836 	bl	800ebe8 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 8017b7c:	f7f7 fe4a 	bl	800f814 <UpdateSIGNALSNames>
		break;
 8017b80:	e026      	b.n	8017bd0 <main+0x16c>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 8017b82:	4831      	ldr	r0, [pc, #196]	; (8017c48 <main+0x1e4>)
 8017b84:	f00e fffa 	bl	8026b7c <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 8017b88:	4b29      	ldr	r3, [pc, #164]	; (8017c30 <main+0x1cc>)
 8017b8a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d006      	beq.n	8017ba0 <main+0x13c>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 8017b92:	4b27      	ldr	r3, [pc, #156]	; (8017c30 <main+0x1cc>)
 8017b94:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8017b98:	4618      	mov	r0, r3
 8017b9a:	f001 faab 	bl	80190f4 <UART4_Init>
 8017b9e:	e003      	b.n	8017ba8 <main+0x144>
		}
		else
		{
			UART4_Init(115200);
 8017ba0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8017ba4:	f001 faa6 	bl	80190f4 <UART4_Init>
		}
		Update_MedhaCommands();
 8017ba8:	f7f4 faf4 	bl	800c194 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8017bac:	f7f4 f8b2 	bl	800bd14 <Print_Medha_Self_Details>
		break;
 8017bb0:	e00e      	b.n	8017bd0 <main+0x16c>

	case KYOSAN:
		printf("Protocol Selected is KYOSAN\n");
 8017bb2:	4826      	ldr	r0, [pc, #152]	; (8017c4c <main+0x1e8>)
 8017bb4:	f00e ffe2 	bl	8026b7c <puts>
		UART4_Init(31200);
 8017bb8:	f647 10e0 	movw	r0, #31200	; 0x79e0
 8017bbc:	f001 fa9a 	bl	80190f4 <UART4_Init>
//		Update_KyosanStructure();
//		UpdateSIGNALSNamesKyosan();
		Update_KyosanCommands();
 8017bc0:	f7ff fda6 	bl	8017710 <Update_KyosanCommands>
		break;
 8017bc4:	e004      	b.n	8017bd0 <main+0x16c>

	default:
		printf("Please Select Protocol Type\n");
 8017bc6:	4822      	ldr	r0, [pc, #136]	; (8017c50 <main+0x1ec>)
 8017bc8:	f00e ffd8 	bl	8026b7c <puts>
		while(1);
 8017bcc:	e7fe      	b.n	8017bcc <main+0x168>
		break;
 8017bce:	bf00      	nop
	}


	printf("Initialization Success\n");
 8017bd0:	4820      	ldr	r0, [pc, #128]	; (8017c54 <main+0x1f0>)
 8017bd2:	f00e ffd3 	bl	8026b7c <puts>
	MX_IWDG_Init();
 8017bd6:	f7fe fd91 	bl	80166fc <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 8017bda:	4b15      	ldr	r3, [pc, #84]	; (8017c30 <main+0x1cc>)
 8017bdc:	781b      	ldrb	r3, [r3, #0]
 8017bde:	3b01      	subs	r3, #1
 8017be0:	2b03      	cmp	r3, #3
 8017be2:	d817      	bhi.n	8017c14 <main+0x1b0>
 8017be4:	a201      	add	r2, pc, #4	; (adr r2, 8017bec <main+0x188>)
 8017be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bea:	bf00      	nop
 8017bec:	08017bfd 	.word	0x08017bfd
 8017bf0:	08017c03 	.word	0x08017c03
 8017bf4:	08017c09 	.word	0x08017c09
 8017bf8:	08017c0f 	.word	0x08017c0f
		{
		case HITACHI:
			Process_HitachiEI();
 8017bfc:	f7f2 f93a 	bl	8009e74 <Process_HitachiEI>
			break;
 8017c00:	e00c      	b.n	8017c1c <main+0x1b8>

		case SIEMENS:
			Process_SiemensEI();
 8017c02:	f7f4 ffed 	bl	800cbe0 <Process_SiemensEI>
			break;
 8017c06:	e009      	b.n	8017c1c <main+0x1b8>

		case MEDHA:
			Process_Medha_EI();
 8017c08:	f7f2 fe72 	bl	800a8f0 <Process_Medha_EI>
			break;
 8017c0c:	e006      	b.n	8017c1c <main+0x1b8>

		case KYOSAN:
			Process_Kyosan_EI();
 8017c0e:	f7fe fd93 	bl	8016738 <Process_Kyosan_EI>
			break;
 8017c12:	e003      	b.n	8017c1c <main+0x1b8>

		default:
			printf("Please Select Protocol Type\n");
 8017c14:	480e      	ldr	r0, [pc, #56]	; (8017c50 <main+0x1ec>)
 8017c16:	f00e ffb1 	bl	8026b7c <puts>
			while(1);
 8017c1a:	e7fe      	b.n	8017c1a <main+0x1b6>
		switch(EI_data.ProtocolType)
 8017c1c:	e7dd      	b.n	8017bda <main+0x176>
 8017c1e:	bf00      	nop
 8017c20:	0802be4c 	.word	0x0802be4c
 8017c24:	0802be54 	.word	0x0802be54
 8017c28:	0802bea4 	.word	0x0802bea4
 8017c2c:	2000308c 	.word	0x2000308c
 8017c30:	20000504 	.word	0x20000504
 8017c34:	0802bec0 	.word	0x0802bec0
 8017c38:	0802bee0 	.word	0x0802bee0
 8017c3c:	0802bf08 	.word	0x0802bf08
 8017c40:	0802bf24 	.word	0x0802bf24
 8017c44:	0802bf4c 	.word	0x0802bf4c
 8017c48:	0802bf6c 	.word	0x0802bf6c
 8017c4c:	0802bf88 	.word	0x0802bf88
 8017c50:	0802bfa4 	.word	0x0802bfa4
 8017c54:	0802bfc0 	.word	0x0802bfc0

08017c58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b094      	sub	sp, #80	; 0x50
 8017c5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017c5e:	f107 031c 	add.w	r3, r7, #28
 8017c62:	2234      	movs	r2, #52	; 0x34
 8017c64:	2100      	movs	r1, #0
 8017c66:	4618      	mov	r0, r3
 8017c68:	f00e fe04 	bl	8026874 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017c6c:	f107 0308 	add.w	r3, r7, #8
 8017c70:	2200      	movs	r2, #0
 8017c72:	601a      	str	r2, [r3, #0]
 8017c74:	605a      	str	r2, [r3, #4]
 8017c76:	609a      	str	r2, [r3, #8]
 8017c78:	60da      	str	r2, [r3, #12]
 8017c7a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8017c7c:	4b29      	ldr	r3, [pc, #164]	; (8017d24 <SystemClock_Config+0xcc>)
 8017c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c80:	4a28      	ldr	r2, [pc, #160]	; (8017d24 <SystemClock_Config+0xcc>)
 8017c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017c86:	6413      	str	r3, [r2, #64]	; 0x40
 8017c88:	4b26      	ldr	r3, [pc, #152]	; (8017d24 <SystemClock_Config+0xcc>)
 8017c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c90:	607b      	str	r3, [r7, #4]
 8017c92:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8017c94:	4b24      	ldr	r3, [pc, #144]	; (8017d28 <SystemClock_Config+0xd0>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	4a23      	ldr	r2, [pc, #140]	; (8017d28 <SystemClock_Config+0xd0>)
 8017c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017c9e:	6013      	str	r3, [r2, #0]
 8017ca0:	4b21      	ldr	r3, [pc, #132]	; (8017d28 <SystemClock_Config+0xd0>)
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017ca8:	603b      	str	r3, [r7, #0]
 8017caa:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8017cac:	2309      	movs	r3, #9
 8017cae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017cb4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8017cba:	2302      	movs	r3, #2
 8017cbc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017cbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017cc2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8017cc4:	2306      	movs	r3, #6
 8017cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8017cc8:	23b4      	movs	r3, #180	; 0xb4
 8017cca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017ccc:	2302      	movs	r3, #2
 8017cce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8017cd0:	2308      	movs	r3, #8
 8017cd2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8017cd4:	2302      	movs	r3, #2
 8017cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8017cd8:	f107 031c 	add.w	r3, r7, #28
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f005 fa1d 	bl	801d11c <HAL_RCC_OscConfig>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d001      	beq.n	8017cec <SystemClock_Config+0x94>
	{
		Error_Handler();
 8017ce8:	f000 f8a8 	bl	8017e3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017cec:	230f      	movs	r3, #15
 8017cee:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017cf0:	2302      	movs	r3, #2
 8017cf2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8017cf8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017cfc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017d02:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8017d04:	f107 0308 	add.w	r3, r7, #8
 8017d08:	2105      	movs	r1, #5
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	f005 fcb4 	bl	801d678 <HAL_RCC_ClockConfig>
 8017d10:	4603      	mov	r3, r0
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d001      	beq.n	8017d1a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8017d16:	f000 f891 	bl	8017e3c <Error_Handler>
	}
}
 8017d1a:	bf00      	nop
 8017d1c:	3750      	adds	r7, #80	; 0x50
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd80      	pop	{r7, pc}
 8017d22:	bf00      	nop
 8017d24:	40023800 	.word	0x40023800
 8017d28:	40007000 	.word	0x40007000

08017d2c <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b08e      	sub	sp, #56	; 0x38
 8017d30:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8017d32:	2300      	movs	r3, #0
 8017d34:	607b      	str	r3, [r7, #4]
 8017d36:	f107 0308 	add.w	r3, r7, #8
 8017d3a:	222e      	movs	r2, #46	; 0x2e
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f00e fd98 	bl	8026874 <memset>
	printf("\n_____________________________________________\n");
 8017d44:	481d      	ldr	r0, [pc, #116]	; (8017dbc <Get_Build_Details+0x90>)
 8017d46:	f00e ff19 	bl	8026b7c <puts>
	printf("Build Date:%s\n",__DATE__);
 8017d4a:	491d      	ldr	r1, [pc, #116]	; (8017dc0 <Get_Build_Details+0x94>)
 8017d4c:	481d      	ldr	r0, [pc, #116]	; (8017dc4 <Get_Build_Details+0x98>)
 8017d4e:	f00e fe79 	bl	8026a44 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 8017d52:	491d      	ldr	r1, [pc, #116]	; (8017dc8 <Get_Build_Details+0x9c>)
 8017d54:	481d      	ldr	r0, [pc, #116]	; (8017dcc <Get_Build_Details+0xa0>)
 8017d56:	f00e fe75 	bl	8026a44 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8017d5a:	1d3b      	adds	r3, r7, #4
 8017d5c:	4a18      	ldr	r2, [pc, #96]	; (8017dc0 <Get_Build_Details+0x94>)
 8017d5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017d60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 8017d64:	1d3b      	adds	r3, r7, #4
 8017d66:	4618      	mov	r0, r3
 8017d68:	f7e8 fa74 	bl	8000254 <strlen>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	461a      	mov	r2, r3
 8017d70:	1d3b      	adds	r3, r7, #4
 8017d72:	4413      	add	r3, r2
 8017d74:	4914      	ldr	r1, [pc, #80]	; (8017dc8 <Get_Build_Details+0x9c>)
 8017d76:	461a      	mov	r2, r3
 8017d78:	460b      	mov	r3, r1
 8017d7a:	cb03      	ldmia	r3!, {r0, r1}
 8017d7c:	6010      	str	r0, [r2, #0]
 8017d7e:	6051      	str	r1, [r2, #4]
 8017d80:	781b      	ldrb	r3, [r3, #0]
 8017d82:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8017d84:	1d3b      	adds	r3, r7, #4
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7e8 fa64 	bl	8000254 <strlen>
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	b21a      	sxth	r2, r3
 8017d90:	1d3b      	adds	r3, r7, #4
 8017d92:	4619      	mov	r1, r3
 8017d94:	2000      	movs	r0, #0
 8017d96:	f7fe f805 	bl	8015da4 <GetCRC16>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	4b0c      	ldr	r3, [pc, #48]	; (8017dd0 <Get_Build_Details+0xa4>)
 8017da0:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8017da2:	4a0c      	ldr	r2, [pc, #48]	; (8017dd4 <Get_Build_Details+0xa8>)
 8017da4:	490c      	ldr	r1, [pc, #48]	; (8017dd8 <Get_Build_Details+0xac>)
 8017da6:	480d      	ldr	r0, [pc, #52]	; (8017ddc <Get_Build_Details+0xb0>)
 8017da8:	f00e fe4c 	bl	8026a44 <iprintf>
	printf("_____________________________________________\n");
 8017dac:	480c      	ldr	r0, [pc, #48]	; (8017de0 <Get_Build_Details+0xb4>)
 8017dae:	f00e fee5 	bl	8026b7c <puts>

}
 8017db2:	bf00      	nop
 8017db4:	3738      	adds	r7, #56	; 0x38
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}
 8017dba:	bf00      	nop
 8017dbc:	0802bfd8 	.word	0x0802bfd8
 8017dc0:	0802c008 	.word	0x0802c008
 8017dc4:	0802c014 	.word	0x0802c014
 8017dc8:	0802c024 	.word	0x0802c024
 8017dcc:	0802c030 	.word	0x0802c030
 8017dd0:	2000bd10 	.word	0x2000bd10
 8017dd4:	0802c040 	.word	0x0802c040
 8017dd8:	0802c044 	.word	0x0802c044
 8017ddc:	0802c05c 	.word	0x0802c05c
 8017de0:	0802c078 	.word	0x0802c078

08017de4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b084      	sub	sp, #16
 8017de8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8017dea:	463b      	mov	r3, r7
 8017dec:	2200      	movs	r2, #0
 8017dee:	601a      	str	r2, [r3, #0]
 8017df0:	605a      	str	r2, [r3, #4]
 8017df2:	609a      	str	r2, [r3, #8]
 8017df4:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8017df6:	f002 fe33 	bl	801aa60 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8017dfe:	2300      	movs	r3, #0
 8017e00:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8017e02:	2300      	movs	r3, #0
 8017e04:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8017e06:	231f      	movs	r3, #31
 8017e08:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8017e0a:	2387      	movs	r3, #135	; 0x87
 8017e0c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8017e12:	2300      	movs	r3, #0
 8017e14:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8017e16:	2301      	movs	r3, #1
 8017e18:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8017e22:	2300      	movs	r3, #0
 8017e24:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8017e26:	463b      	mov	r3, r7
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f002 fe51 	bl	801aad0 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8017e2e:	2004      	movs	r0, #4
 8017e30:	f002 fe2e 	bl	801aa90 <HAL_MPU_Enable>

}
 8017e34:	bf00      	nop
 8017e36:	3710      	adds	r7, #16
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	bd80      	pop	{r7, pc}

08017e3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8017e3c:	b480      	push	{r7}
 8017e3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8017e40:	b672      	cpsid	i
}
 8017e42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8017e44:	e7fe      	b.n	8017e44 <Error_Handler+0x8>
	...

08017e48 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8017e4c:	4b06      	ldr	r3, [pc, #24]	; (8017e68 <MX_RNG_Init+0x20>)
 8017e4e:	4a07      	ldr	r2, [pc, #28]	; (8017e6c <MX_RNG_Init+0x24>)
 8017e50:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8017e52:	4805      	ldr	r0, [pc, #20]	; (8017e68 <MX_RNG_Init+0x20>)
 8017e54:	f006 fa1e 	bl	801e294 <HAL_RNG_Init>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d001      	beq.n	8017e62 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8017e5e:	f7ff ffed 	bl	8017e3c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8017e62:	bf00      	nop
 8017e64:	bd80      	pop	{r7, pc}
 8017e66:	bf00      	nop
 8017e68:	2000bcec 	.word	0x2000bcec
 8017e6c:	50060800 	.word	0x50060800

08017e70 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b0a8      	sub	sp, #160	; 0xa0
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017e78:	f107 0310 	add.w	r3, r7, #16
 8017e7c:	2290      	movs	r2, #144	; 0x90
 8017e7e:	2100      	movs	r1, #0
 8017e80:	4618      	mov	r0, r3
 8017e82:	f00e fcf7 	bl	8026874 <memset>
  if(rngHandle->Instance==RNG)
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	4a11      	ldr	r2, [pc, #68]	; (8017ed0 <HAL_RNG_MspInit+0x60>)
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	d11b      	bne.n	8017ec8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8017e90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017e94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8017e96:	2300      	movs	r3, #0
 8017e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017e9c:	f107 0310 	add.w	r3, r7, #16
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f005 fdcf 	bl	801da44 <HAL_RCCEx_PeriphCLKConfig>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d001      	beq.n	8017eb0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8017eac:	f7ff ffc6 	bl	8017e3c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8017eb0:	4b08      	ldr	r3, [pc, #32]	; (8017ed4 <HAL_RNG_MspInit+0x64>)
 8017eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017eb4:	4a07      	ldr	r2, [pc, #28]	; (8017ed4 <HAL_RNG_MspInit+0x64>)
 8017eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017eba:	6353      	str	r3, [r2, #52]	; 0x34
 8017ebc:	4b05      	ldr	r3, [pc, #20]	; (8017ed4 <HAL_RNG_MspInit+0x64>)
 8017ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ec4:	60fb      	str	r3, [r7, #12]
 8017ec6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8017ec8:	bf00      	nop
 8017eca:	37a0      	adds	r7, #160	; 0xa0
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}
 8017ed0:	50060800 	.word	0x50060800
 8017ed4:	40023800 	.word	0x40023800

08017ed8 <__NVIC_SystemReset>:
{
 8017ed8:	b480      	push	{r7}
 8017eda:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8017edc:	f3bf 8f4f 	dsb	sy
}
 8017ee0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017ee2:	4b06      	ldr	r3, [pc, #24]	; (8017efc <__NVIC_SystemReset+0x24>)
 8017ee4:	68db      	ldr	r3, [r3, #12]
 8017ee6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8017eea:	4904      	ldr	r1, [pc, #16]	; (8017efc <__NVIC_SystemReset+0x24>)
 8017eec:	4b04      	ldr	r3, [pc, #16]	; (8017f00 <__NVIC_SystemReset+0x28>)
 8017eee:	4313      	orrs	r3, r2
 8017ef0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8017ef2:	f3bf 8f4f 	dsb	sy
}
 8017ef6:	bf00      	nop
    __NOP();
 8017ef8:	bf00      	nop
 8017efa:	e7fd      	b.n	8017ef8 <__NVIC_SystemReset+0x20>
 8017efc:	e000ed00 	.word	0xe000ed00
 8017f00:	05fa0004 	.word	0x05fa0004

08017f04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8017f08:	4b1b      	ldr	r3, [pc, #108]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f0a:	4a1c      	ldr	r2, [pc, #112]	; (8017f7c <MX_SPI1_Init+0x78>)
 8017f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8017f0e:	4b1a      	ldr	r3, [pc, #104]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8017f16:	4b18      	ldr	r3, [pc, #96]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f18:	2200      	movs	r2, #0
 8017f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017f1c:	4b16      	ldr	r3, [pc, #88]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017f22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017f24:	4b14      	ldr	r3, [pc, #80]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f26:	2200      	movs	r2, #0
 8017f28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017f2a:	4b13      	ldr	r3, [pc, #76]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017f30:	4b11      	ldr	r3, [pc, #68]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017f36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8017f38:	4b0f      	ldr	r3, [pc, #60]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f3a:	2208      	movs	r2, #8
 8017f3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017f3e:	4b0e      	ldr	r3, [pc, #56]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f40:	2200      	movs	r2, #0
 8017f42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8017f44:	4b0c      	ldr	r3, [pc, #48]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f46:	2200      	movs	r2, #0
 8017f48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017f4a:	4b0b      	ldr	r3, [pc, #44]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8017f50:	4b09      	ldr	r3, [pc, #36]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f52:	2207      	movs	r2, #7
 8017f54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017f56:	4b08      	ldr	r3, [pc, #32]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f58:	2200      	movs	r2, #0
 8017f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017f5c:	4b06      	ldr	r3, [pc, #24]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f5e:	2208      	movs	r2, #8
 8017f60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8017f62:	4805      	ldr	r0, [pc, #20]	; (8017f78 <MX_SPI1_Init+0x74>)
 8017f64:	f006 fa2b 	bl	801e3be <HAL_SPI_Init>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d001      	beq.n	8017f72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8017f6e:	f7ff ff65 	bl	8017e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8017f72:	bf00      	nop
 8017f74:	bd80      	pop	{r7, pc}
 8017f76:	bf00      	nop
 8017f78:	2000bd14 	.word	0x2000bd14
 8017f7c:	40013000 	.word	0x40013000

08017f80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b08c      	sub	sp, #48	; 0x30
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017f88:	f107 031c 	add.w	r3, r7, #28
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	601a      	str	r2, [r3, #0]
 8017f90:	605a      	str	r2, [r3, #4]
 8017f92:	609a      	str	r2, [r3, #8]
 8017f94:	60da      	str	r2, [r3, #12]
 8017f96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	4a33      	ldr	r2, [pc, #204]	; (801806c <HAL_SPI_MspInit+0xec>)
 8017f9e:	4293      	cmp	r3, r2
 8017fa0:	d160      	bne.n	8018064 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8017fa2:	4b33      	ldr	r3, [pc, #204]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fa6:	4a32      	ldr	r2, [pc, #200]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017fac:	6453      	str	r3, [r2, #68]	; 0x44
 8017fae:	4b30      	ldr	r3, [pc, #192]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017fb6:	61bb      	str	r3, [r7, #24]
 8017fb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017fba:	4b2d      	ldr	r3, [pc, #180]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fbe:	4a2c      	ldr	r2, [pc, #176]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fc0:	f043 0301 	orr.w	r3, r3, #1
 8017fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8017fc6:	4b2a      	ldr	r3, [pc, #168]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fca:	f003 0301 	and.w	r3, r3, #1
 8017fce:	617b      	str	r3, [r7, #20]
 8017fd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017fd2:	4b27      	ldr	r3, [pc, #156]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fd6:	4a26      	ldr	r2, [pc, #152]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fd8:	f043 0308 	orr.w	r3, r3, #8
 8017fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8017fde:	4b24      	ldr	r3, [pc, #144]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fe2:	f003 0308 	and.w	r3, r3, #8
 8017fe6:	613b      	str	r3, [r7, #16]
 8017fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017fea:	4b21      	ldr	r3, [pc, #132]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fee:	4a20      	ldr	r2, [pc, #128]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8017ff6:	4b1e      	ldr	r3, [pc, #120]	; (8018070 <HAL_SPI_MspInit+0xf0>)
 8017ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ffe:	60fb      	str	r3, [r7, #12]
 8018000:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8018002:	2320      	movs	r3, #32
 8018004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018006:	2302      	movs	r3, #2
 8018008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801800a:	2300      	movs	r3, #0
 801800c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801800e:	2303      	movs	r3, #3
 8018010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8018012:	2305      	movs	r3, #5
 8018014:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8018016:	f107 031c 	add.w	r3, r7, #28
 801801a:	4619      	mov	r1, r3
 801801c:	4815      	ldr	r0, [pc, #84]	; (8018074 <HAL_SPI_MspInit+0xf4>)
 801801e:	f004 f813 	bl	801c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8018022:	2380      	movs	r3, #128	; 0x80
 8018024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018026:	2302      	movs	r3, #2
 8018028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801802a:	2300      	movs	r3, #0
 801802c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801802e:	2303      	movs	r3, #3
 8018030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8018032:	2305      	movs	r3, #5
 8018034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8018036:	f107 031c 	add.w	r3, r7, #28
 801803a:	4619      	mov	r1, r3
 801803c:	480e      	ldr	r0, [pc, #56]	; (8018078 <HAL_SPI_MspInit+0xf8>)
 801803e:	f004 f803 	bl	801c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8018042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018048:	2302      	movs	r3, #2
 801804a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801804c:	2300      	movs	r3, #0
 801804e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018050:	2303      	movs	r3, #3
 8018052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8018054:	2305      	movs	r3, #5
 8018056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8018058:	f107 031c 	add.w	r3, r7, #28
 801805c:	4619      	mov	r1, r3
 801805e:	4807      	ldr	r0, [pc, #28]	; (801807c <HAL_SPI_MspInit+0xfc>)
 8018060:	f003 fff2 	bl	801c048 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8018064:	bf00      	nop
 8018066:	3730      	adds	r7, #48	; 0x30
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}
 801806c:	40013000 	.word	0x40013000
 8018070:	40023800 	.word	0x40023800
 8018074:	40020000 	.word	0x40020000
 8018078:	40020c00 	.word	0x40020c00
 801807c:	40021800 	.word	0x40021800

08018080 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8018080:	b580      	push	{r7, lr}
 8018082:	b086      	sub	sp, #24
 8018084:	af00      	add	r7, sp, #0
 8018086:	60b9      	str	r1, [r7, #8]
 8018088:	607b      	str	r3, [r7, #4]
 801808a:	4603      	mov	r3, r0
 801808c:	73fb      	strb	r3, [r7, #15]
 801808e:	4613      	mov	r3, r2
 8018090:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8018092:	2300      	movs	r3, #0
 8018094:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 8018096:	7bfb      	ldrb	r3, [r7, #15]
 8018098:	3b01      	subs	r3, #1
 801809a:	2b03      	cmp	r3, #3
 801809c:	d828      	bhi.n	80180f0 <SPI_WriteInFlash+0x70>
 801809e:	a201      	add	r2, pc, #4	; (adr r2, 80180a4 <SPI_WriteInFlash+0x24>)
 80180a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180a4:	080180b5 	.word	0x080180b5
 80180a8:	080180c5 	.word	0x080180c5
 80180ac:	080180d3 	.word	0x080180d3
 80180b0:	080180e1 	.word	0x080180e1
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 80180b4:	4b75      	ldr	r3, [pc, #468]	; (801828c <SPI_WriteInFlash+0x20c>)
 80180b6:	4a76      	ldr	r2, [pc, #472]	; (8018290 <SPI_WriteInFlash+0x210>)
 80180b8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80180ba:	4b76      	ldr	r3, [pc, #472]	; (8018294 <SPI_WriteInFlash+0x214>)
 80180bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80180c0:	601a      	str	r2, [r3, #0]
		break;
 80180c2:	e018      	b.n	80180f6 <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 80180c4:	4b71      	ldr	r3, [pc, #452]	; (801828c <SPI_WriteInFlash+0x20c>)
 80180c6:	4a74      	ldr	r2, [pc, #464]	; (8018298 <SPI_WriteInFlash+0x218>)
 80180c8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80180ca:	4b72      	ldr	r3, [pc, #456]	; (8018294 <SPI_WriteInFlash+0x214>)
 80180cc:	2220      	movs	r2, #32
 80180ce:	601a      	str	r2, [r3, #0]
		break;
 80180d0:	e011      	b.n	80180f6 <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 80180d2:	4b6e      	ldr	r3, [pc, #440]	; (801828c <SPI_WriteInFlash+0x20c>)
 80180d4:	4a70      	ldr	r2, [pc, #448]	; (8018298 <SPI_WriteInFlash+0x218>)
 80180d6:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80180d8:	4b6e      	ldr	r3, [pc, #440]	; (8018294 <SPI_WriteInFlash+0x214>)
 80180da:	2240      	movs	r2, #64	; 0x40
 80180dc:	601a      	str	r2, [r3, #0]
		break;
 80180de:	e00a      	b.n	80180f6 <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 80180e0:	4b6a      	ldr	r3, [pc, #424]	; (801828c <SPI_WriteInFlash+0x20c>)
 80180e2:	4a6e      	ldr	r2, [pc, #440]	; (801829c <SPI_WriteInFlash+0x21c>)
 80180e4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 80180e6:	4b6b      	ldr	r3, [pc, #428]	; (8018294 <SPI_WriteInFlash+0x214>)
 80180e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80180ec:	601a      	str	r2, [r3, #0]
		break;
 80180ee:	e002      	b.n	80180f6 <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 80180f0:	486b      	ldr	r0, [pc, #428]	; (80182a0 <SPI_WriteInFlash+0x220>)
 80180f2:	f00e fd43 	bl	8026b7c <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80180f6:	4b65      	ldr	r3, [pc, #404]	; (801828c <SPI_WriteInFlash+0x20c>)
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	4a66      	ldr	r2, [pc, #408]	; (8018294 <SPI_WriteInFlash+0x214>)
 80180fc:	6812      	ldr	r2, [r2, #0]
 80180fe:	b291      	uxth	r1, r2
 8018100:	2201      	movs	r2, #1
 8018102:	4618      	mov	r0, r3
 8018104:	f004 f964 	bl	801c3d0 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018108:	4b60      	ldr	r3, [pc, #384]	; (801828c <SPI_WriteInFlash+0x20c>)
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	4a61      	ldr	r2, [pc, #388]	; (8018294 <SPI_WriteInFlash+0x214>)
 801810e:	6812      	ldr	r2, [r2, #0]
 8018110:	b291      	uxth	r1, r2
 8018112:	2200      	movs	r2, #0
 8018114:	4618      	mov	r0, r3
 8018116:	f004 f95b 	bl	801c3d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 801811a:	2364      	movs	r3, #100	; 0x64
 801811c:	2201      	movs	r2, #1
 801811e:	4961      	ldr	r1, [pc, #388]	; (80182a4 <SPI_WriteInFlash+0x224>)
 8018120:	4861      	ldr	r0, [pc, #388]	; (80182a8 <SPI_WriteInFlash+0x228>)
 8018122:	f006 f9f7 	bl	801e514 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018126:	4b59      	ldr	r3, [pc, #356]	; (801828c <SPI_WriteInFlash+0x20c>)
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	4a5a      	ldr	r2, [pc, #360]	; (8018294 <SPI_WriteInFlash+0x214>)
 801812c:	6812      	ldr	r2, [r2, #0]
 801812e:	b291      	uxth	r1, r2
 8018130:	2201      	movs	r2, #1
 8018132:	4618      	mov	r0, r3
 8018134:	f004 f94c 	bl	801c3d0 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018138:	4b54      	ldr	r3, [pc, #336]	; (801828c <SPI_WriteInFlash+0x20c>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	4a55      	ldr	r2, [pc, #340]	; (8018294 <SPI_WriteInFlash+0x214>)
 801813e:	6812      	ldr	r2, [r2, #0]
 8018140:	b291      	uxth	r1, r2
 8018142:	2200      	movs	r2, #0
 8018144:	4618      	mov	r0, r3
 8018146:	f004 f943 	bl	801c3d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 801814a:	2364      	movs	r3, #100	; 0x64
 801814c:	2201      	movs	r2, #1
 801814e:	4957      	ldr	r1, [pc, #348]	; (80182ac <SPI_WriteInFlash+0x22c>)
 8018150:	4855      	ldr	r0, [pc, #340]	; (80182a8 <SPI_WriteInFlash+0x228>)
 8018152:	f006 f9df 	bl	801e514 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8018156:	2364      	movs	r3, #100	; 0x64
 8018158:	2201      	movs	r2, #1
 801815a:	4955      	ldr	r1, [pc, #340]	; (80182b0 <SPI_WriteInFlash+0x230>)
 801815c:	4852      	ldr	r0, [pc, #328]	; (80182a8 <SPI_WriteInFlash+0x228>)
 801815e:	f006 fb47 	bl	801e7f0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018162:	4b4a      	ldr	r3, [pc, #296]	; (801828c <SPI_WriteInFlash+0x20c>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	4a4b      	ldr	r2, [pc, #300]	; (8018294 <SPI_WriteInFlash+0x214>)
 8018168:	6812      	ldr	r2, [r2, #0]
 801816a:	b291      	uxth	r1, r2
 801816c:	2201      	movs	r2, #1
 801816e:	4618      	mov	r0, r3
 8018170:	f004 f92e 	bl	801c3d0 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8018174:	4b4e      	ldr	r3, [pc, #312]	; (80182b0 <SPI_WriteInFlash+0x230>)
 8018176:	781b      	ldrb	r3, [r3, #0]
 8018178:	f003 0302 	and.w	r3, r3, #2
 801817c:	2b00      	cmp	r3, #0
 801817e:	d103      	bne.n	8018188 <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8018180:	484c      	ldr	r0, [pc, #304]	; (80182b4 <SPI_WriteInFlash+0x234>)
 8018182:	f00e fc5f 	bl	8026a44 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018186:	e7d7      	b.n	8018138 <SPI_WriteInFlash+0xb8>
			break;
 8018188:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801818a:	4b40      	ldr	r3, [pc, #256]	; (801828c <SPI_WriteInFlash+0x20c>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	4a41      	ldr	r2, [pc, #260]	; (8018294 <SPI_WriteInFlash+0x214>)
 8018190:	6812      	ldr	r2, [r2, #0]
 8018192:	b291      	uxth	r1, r2
 8018194:	2200      	movs	r2, #0
 8018196:	4618      	mov	r0, r3
 8018198:	f004 f91a 	bl	801c3d0 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 801819c:	2202      	movs	r2, #2
 801819e:	4b46      	ldr	r3, [pc, #280]	; (80182b8 <SPI_WriteInFlash+0x238>)
 80181a0:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 80181a2:	68bb      	ldr	r3, [r7, #8]
 80181a4:	0c1b      	lsrs	r3, r3, #16
 80181a6:	b2da      	uxtb	r2, r3
 80181a8:	4b43      	ldr	r3, [pc, #268]	; (80182b8 <SPI_WriteInFlash+0x238>)
 80181aa:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 80181ac:	68bb      	ldr	r3, [r7, #8]
 80181ae:	0a1b      	lsrs	r3, r3, #8
 80181b0:	b2da      	uxtb	r2, r3
 80181b2:	4b41      	ldr	r3, [pc, #260]	; (80182b8 <SPI_WriteInFlash+0x238>)
 80181b4:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 80181b6:	68bb      	ldr	r3, [r7, #8]
 80181b8:	b2da      	uxtb	r2, r3
 80181ba:	4b3f      	ldr	r3, [pc, #252]	; (80182b8 <SPI_WriteInFlash+0x238>)
 80181bc:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 80181be:	2364      	movs	r3, #100	; 0x64
 80181c0:	2204      	movs	r2, #4
 80181c2:	493d      	ldr	r1, [pc, #244]	; (80182b8 <SPI_WriteInFlash+0x238>)
 80181c4:	4838      	ldr	r0, [pc, #224]	; (80182a8 <SPI_WriteInFlash+0x228>)
 80181c6:	f006 f9a5 	bl	801e514 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 80181ca:	89ba      	ldrh	r2, [r7, #12]
 80181cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80181d0:	6879      	ldr	r1, [r7, #4]
 80181d2:	4835      	ldr	r0, [pc, #212]	; (80182a8 <SPI_WriteInFlash+0x228>)
 80181d4:	f006 f99e 	bl	801e514 <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80181d8:	4b2c      	ldr	r3, [pc, #176]	; (801828c <SPI_WriteInFlash+0x20c>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	4a2d      	ldr	r2, [pc, #180]	; (8018294 <SPI_WriteInFlash+0x214>)
 80181de:	6812      	ldr	r2, [r2, #0]
 80181e0:	b291      	uxth	r1, r2
 80181e2:	2201      	movs	r2, #1
 80181e4:	4618      	mov	r0, r3
 80181e6:	f004 f8f3 	bl	801c3d0 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80181ea:	4b28      	ldr	r3, [pc, #160]	; (801828c <SPI_WriteInFlash+0x20c>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	4a29      	ldr	r2, [pc, #164]	; (8018294 <SPI_WriteInFlash+0x214>)
 80181f0:	6812      	ldr	r2, [r2, #0]
 80181f2:	b291      	uxth	r1, r2
 80181f4:	2200      	movs	r2, #0
 80181f6:	4618      	mov	r0, r3
 80181f8:	f004 f8ea 	bl	801c3d0 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 80181fc:	2205      	movs	r2, #5
 80181fe:	4b2e      	ldr	r3, [pc, #184]	; (80182b8 <SPI_WriteInFlash+0x238>)
 8018200:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8018202:	2364      	movs	r3, #100	; 0x64
 8018204:	2201      	movs	r2, #1
 8018206:	492c      	ldr	r1, [pc, #176]	; (80182b8 <SPI_WriteInFlash+0x238>)
 8018208:	4827      	ldr	r0, [pc, #156]	; (80182a8 <SPI_WriteInFlash+0x228>)
 801820a:	f006 f983 	bl	801e514 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801820e:	2364      	movs	r3, #100	; 0x64
 8018210:	2201      	movs	r2, #1
 8018212:	4927      	ldr	r1, [pc, #156]	; (80182b0 <SPI_WriteInFlash+0x230>)
 8018214:	4824      	ldr	r0, [pc, #144]	; (80182a8 <SPI_WriteInFlash+0x228>)
 8018216:	f006 faeb 	bl	801e7f0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801821a:	4b1c      	ldr	r3, [pc, #112]	; (801828c <SPI_WriteInFlash+0x20c>)
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	4a1d      	ldr	r2, [pc, #116]	; (8018294 <SPI_WriteInFlash+0x214>)
 8018220:	6812      	ldr	r2, [r2, #0]
 8018222:	b291      	uxth	r1, r2
 8018224:	2201      	movs	r2, #1
 8018226:	4618      	mov	r0, r3
 8018228:	f004 f8d2 	bl	801c3d0 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 801822c:	4b20      	ldr	r3, [pc, #128]	; (80182b0 <SPI_WriteInFlash+0x230>)
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	f003 0301 	and.w	r3, r3, #1
 8018234:	2b00      	cmp	r3, #0
 8018236:	d1d8      	bne.n	80181ea <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8018238:	2301      	movs	r3, #1
 801823a:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 801823c:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801823e:	4b13      	ldr	r3, [pc, #76]	; (801828c <SPI_WriteInFlash+0x20c>)
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	4a14      	ldr	r2, [pc, #80]	; (8018294 <SPI_WriteInFlash+0x214>)
 8018244:	6812      	ldr	r2, [r2, #0]
 8018246:	b291      	uxth	r1, r2
 8018248:	2200      	movs	r2, #0
 801824a:	4618      	mov	r0, r3
 801824c:	f004 f8c0 	bl	801c3d0 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8018250:	2204      	movs	r2, #4
 8018252:	4b19      	ldr	r3, [pc, #100]	; (80182b8 <SPI_WriteInFlash+0x238>)
 8018254:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8018256:	2364      	movs	r3, #100	; 0x64
 8018258:	2201      	movs	r2, #1
 801825a:	4917      	ldr	r1, [pc, #92]	; (80182b8 <SPI_WriteInFlash+0x238>)
 801825c:	4812      	ldr	r0, [pc, #72]	; (80182a8 <SPI_WriteInFlash+0x228>)
 801825e:	f006 f959 	bl	801e514 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8018262:	2364      	movs	r3, #100	; 0x64
 8018264:	2201      	movs	r2, #1
 8018266:	4912      	ldr	r1, [pc, #72]	; (80182b0 <SPI_WriteInFlash+0x230>)
 8018268:	480f      	ldr	r0, [pc, #60]	; (80182a8 <SPI_WriteInFlash+0x228>)
 801826a:	f006 fac1 	bl	801e7f0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801826e:	4b07      	ldr	r3, [pc, #28]	; (801828c <SPI_WriteInFlash+0x20c>)
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	4a08      	ldr	r2, [pc, #32]	; (8018294 <SPI_WriteInFlash+0x214>)
 8018274:	6812      	ldr	r2, [r2, #0]
 8018276:	b291      	uxth	r1, r2
 8018278:	2201      	movs	r2, #1
 801827a:	4618      	mov	r0, r3
 801827c:	f004 f8a8 	bl	801c3d0 <HAL_GPIO_WritePin>

	return Return_Value;
 8018280:	7dfb      	ldrb	r3, [r7, #23]
}
 8018282:	4618      	mov	r0, r3
 8018284:	3718      	adds	r7, #24
 8018286:	46bd      	mov	sp, r7
 8018288:	bd80      	pop	{r7, pc}
 801828a:	bf00      	nop
 801828c:	2000bd08 	.word	0x2000bd08
 8018290:	40021800 	.word	0x40021800
 8018294:	2000bd0c 	.word	0x2000bd0c
 8018298:	40020c00 	.word	0x40020c00
 801829c:	40021000 	.word	0x40021000
 80182a0:	0802c0a8 	.word	0x0802c0a8
 80182a4:	0802dd50 	.word	0x0802dd50
 80182a8:	2000bd14 	.word	0x2000bd14
 80182ac:	0802dd51 	.word	0x0802dd51
 80182b0:	2000bd04 	.word	0x2000bd04
 80182b4:	0802c0c0 	.word	0x0802c0c0
 80182b8:	2000bd00 	.word	0x2000bd00

080182bc <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 80182bc:	b580      	push	{r7, lr}
 80182be:	b084      	sub	sp, #16
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	4603      	mov	r3, r0
 80182c4:	6039      	str	r1, [r7, #0]
 80182c6:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 80182c8:	2300      	movs	r3, #0
 80182ca:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 80182cc:	79fb      	ldrb	r3, [r7, #7]
 80182ce:	3b01      	subs	r3, #1
 80182d0:	2b03      	cmp	r3, #3
 80182d2:	d829      	bhi.n	8018328 <SPI_MemoryEraseBySector+0x6c>
 80182d4:	a201      	add	r2, pc, #4	; (adr r2, 80182dc <SPI_MemoryEraseBySector+0x20>)
 80182d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182da:	bf00      	nop
 80182dc:	080182ed 	.word	0x080182ed
 80182e0:	080182fd 	.word	0x080182fd
 80182e4:	0801830b 	.word	0x0801830b
 80182e8:	08018319 	.word	0x08018319
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 80182ec:	4b6d      	ldr	r3, [pc, #436]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 80182ee:	4a6e      	ldr	r2, [pc, #440]	; (80184a8 <SPI_MemoryEraseBySector+0x1ec>)
 80182f0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80182f2:	4b6e      	ldr	r3, [pc, #440]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 80182f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80182f8:	601a      	str	r2, [r3, #0]
		break;
 80182fa:	e018      	b.n	801832e <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 80182fc:	4b69      	ldr	r3, [pc, #420]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 80182fe:	4a6c      	ldr	r2, [pc, #432]	; (80184b0 <SPI_MemoryEraseBySector+0x1f4>)
 8018300:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8018302:	4b6a      	ldr	r3, [pc, #424]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 8018304:	2220      	movs	r2, #32
 8018306:	601a      	str	r2, [r3, #0]
		break;
 8018308:	e011      	b.n	801832e <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 801830a:	4b66      	ldr	r3, [pc, #408]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 801830c:	4a68      	ldr	r2, [pc, #416]	; (80184b0 <SPI_MemoryEraseBySector+0x1f4>)
 801830e:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8018310:	4b66      	ldr	r3, [pc, #408]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 8018312:	2240      	movs	r2, #64	; 0x40
 8018314:	601a      	str	r2, [r3, #0]
		break;
 8018316:	e00a      	b.n	801832e <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8018318:	4b62      	ldr	r3, [pc, #392]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 801831a:	4a66      	ldr	r2, [pc, #408]	; (80184b4 <SPI_MemoryEraseBySector+0x1f8>)
 801831c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 801831e:	4b63      	ldr	r3, [pc, #396]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 8018320:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8018324:	601a      	str	r2, [r3, #0]
		break;
 8018326:	e002      	b.n	801832e <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8018328:	4863      	ldr	r0, [pc, #396]	; (80184b8 <SPI_MemoryEraseBySector+0x1fc>)
 801832a:	f00e fc27 	bl	8026b7c <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801832e:	4b5d      	ldr	r3, [pc, #372]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	4a5e      	ldr	r2, [pc, #376]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 8018334:	6812      	ldr	r2, [r2, #0]
 8018336:	b291      	uxth	r1, r2
 8018338:	2200      	movs	r2, #0
 801833a:	4618      	mov	r0, r3
 801833c:	f004 f848 	bl	801c3d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8018340:	2364      	movs	r3, #100	; 0x64
 8018342:	2201      	movs	r2, #1
 8018344:	495d      	ldr	r1, [pc, #372]	; (80184bc <SPI_MemoryEraseBySector+0x200>)
 8018346:	485e      	ldr	r0, [pc, #376]	; (80184c0 <SPI_MemoryEraseBySector+0x204>)
 8018348:	f006 f8e4 	bl	801e514 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801834c:	4b55      	ldr	r3, [pc, #340]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4a56      	ldr	r2, [pc, #344]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 8018352:	6812      	ldr	r2, [r2, #0]
 8018354:	b291      	uxth	r1, r2
 8018356:	2201      	movs	r2, #1
 8018358:	4618      	mov	r0, r3
 801835a:	f004 f839 	bl	801c3d0 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801835e:	4b51      	ldr	r3, [pc, #324]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	4a52      	ldr	r2, [pc, #328]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 8018364:	6812      	ldr	r2, [r2, #0]
 8018366:	b291      	uxth	r1, r2
 8018368:	2200      	movs	r2, #0
 801836a:	4618      	mov	r0, r3
 801836c:	f004 f830 	bl	801c3d0 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8018370:	2364      	movs	r3, #100	; 0x64
 8018372:	2201      	movs	r2, #1
 8018374:	4953      	ldr	r1, [pc, #332]	; (80184c4 <SPI_MemoryEraseBySector+0x208>)
 8018376:	4852      	ldr	r0, [pc, #328]	; (80184c0 <SPI_MemoryEraseBySector+0x204>)
 8018378:	f006 f8cc 	bl	801e514 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801837c:	2364      	movs	r3, #100	; 0x64
 801837e:	2201      	movs	r2, #1
 8018380:	4951      	ldr	r1, [pc, #324]	; (80184c8 <SPI_MemoryEraseBySector+0x20c>)
 8018382:	484f      	ldr	r0, [pc, #316]	; (80184c0 <SPI_MemoryEraseBySector+0x204>)
 8018384:	f006 fa34 	bl	801e7f0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018388:	4b46      	ldr	r3, [pc, #280]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	4a47      	ldr	r2, [pc, #284]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 801838e:	6812      	ldr	r2, [r2, #0]
 8018390:	b291      	uxth	r1, r2
 8018392:	2201      	movs	r2, #1
 8018394:	4618      	mov	r0, r3
 8018396:	f004 f81b 	bl	801c3d0 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 801839a:	4b4b      	ldr	r3, [pc, #300]	; (80184c8 <SPI_MemoryEraseBySector+0x20c>)
 801839c:	781b      	ldrb	r3, [r3, #0]
 801839e:	f003 0302 	and.w	r3, r3, #2
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d103      	bne.n	80183ae <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 80183a6:	4849      	ldr	r0, [pc, #292]	; (80184cc <SPI_MemoryEraseBySector+0x210>)
 80183a8:	f00e fb4c 	bl	8026a44 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80183ac:	e7d7      	b.n	801835e <SPI_MemoryEraseBySector+0xa2>
			break;
 80183ae:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80183b0:	4b3c      	ldr	r3, [pc, #240]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	4a3d      	ldr	r2, [pc, #244]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 80183b6:	6812      	ldr	r2, [r2, #0]
 80183b8:	b291      	uxth	r1, r2
 80183ba:	2200      	movs	r2, #0
 80183bc:	4618      	mov	r0, r3
 80183be:	f004 f807 	bl	801c3d0 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 80183c2:	4b43      	ldr	r3, [pc, #268]	; (80184d0 <SPI_MemoryEraseBySector+0x214>)
 80183c4:	2220      	movs	r2, #32
 80183c6:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	0c1b      	lsrs	r3, r3, #16
 80183cc:	b2da      	uxtb	r2, r3
 80183ce:	4b40      	ldr	r3, [pc, #256]	; (80184d0 <SPI_MemoryEraseBySector+0x214>)
 80183d0:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	0a1b      	lsrs	r3, r3, #8
 80183d6:	b2da      	uxtb	r2, r3
 80183d8:	4b3d      	ldr	r3, [pc, #244]	; (80184d0 <SPI_MemoryEraseBySector+0x214>)
 80183da:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 80183dc:	683b      	ldr	r3, [r7, #0]
 80183de:	b2da      	uxtb	r2, r3
 80183e0:	4b3b      	ldr	r3, [pc, #236]	; (80184d0 <SPI_MemoryEraseBySector+0x214>)
 80183e2:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 80183e4:	2364      	movs	r3, #100	; 0x64
 80183e6:	2204      	movs	r2, #4
 80183e8:	4939      	ldr	r1, [pc, #228]	; (80184d0 <SPI_MemoryEraseBySector+0x214>)
 80183ea:	4835      	ldr	r0, [pc, #212]	; (80184c0 <SPI_MemoryEraseBySector+0x204>)
 80183ec:	f006 f892 	bl	801e514 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80183f0:	4b2c      	ldr	r3, [pc, #176]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	4a2d      	ldr	r2, [pc, #180]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 80183f6:	6812      	ldr	r2, [r2, #0]
 80183f8:	b291      	uxth	r1, r2
 80183fa:	2201      	movs	r2, #1
 80183fc:	4618      	mov	r0, r3
 80183fe:	f003 ffe7 	bl	801c3d0 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018402:	4b28      	ldr	r3, [pc, #160]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	4a29      	ldr	r2, [pc, #164]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 8018408:	6812      	ldr	r2, [r2, #0]
 801840a:	b291      	uxth	r1, r2
 801840c:	2200      	movs	r2, #0
 801840e:	4618      	mov	r0, r3
 8018410:	f003 ffde 	bl	801c3d0 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8018414:	2205      	movs	r2, #5
 8018416:	4b2e      	ldr	r3, [pc, #184]	; (80184d0 <SPI_MemoryEraseBySector+0x214>)
 8018418:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 801841a:	2364      	movs	r3, #100	; 0x64
 801841c:	2201      	movs	r2, #1
 801841e:	492c      	ldr	r1, [pc, #176]	; (80184d0 <SPI_MemoryEraseBySector+0x214>)
 8018420:	4827      	ldr	r0, [pc, #156]	; (80184c0 <SPI_MemoryEraseBySector+0x204>)
 8018422:	f006 f877 	bl	801e514 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8018426:	2364      	movs	r3, #100	; 0x64
 8018428:	2201      	movs	r2, #1
 801842a:	4927      	ldr	r1, [pc, #156]	; (80184c8 <SPI_MemoryEraseBySector+0x20c>)
 801842c:	4824      	ldr	r0, [pc, #144]	; (80184c0 <SPI_MemoryEraseBySector+0x204>)
 801842e:	f006 f9df 	bl	801e7f0 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018432:	4b1c      	ldr	r3, [pc, #112]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	4a1d      	ldr	r2, [pc, #116]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 8018438:	6812      	ldr	r2, [r2, #0]
 801843a:	b291      	uxth	r1, r2
 801843c:	2201      	movs	r2, #1
 801843e:	4618      	mov	r0, r3
 8018440:	f003 ffc6 	bl	801c3d0 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8018444:	4b20      	ldr	r3, [pc, #128]	; (80184c8 <SPI_MemoryEraseBySector+0x20c>)
 8018446:	781b      	ldrb	r3, [r3, #0]
 8018448:	f003 0301 	and.w	r3, r3, #1
 801844c:	2b00      	cmp	r3, #0
 801844e:	d1d8      	bne.n	8018402 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8018450:	2301      	movs	r3, #1
 8018452:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8018454:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018456:	4b13      	ldr	r3, [pc, #76]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	4a14      	ldr	r2, [pc, #80]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 801845c:	6812      	ldr	r2, [r2, #0]
 801845e:	b291      	uxth	r1, r2
 8018460:	2200      	movs	r2, #0
 8018462:	4618      	mov	r0, r3
 8018464:	f003 ffb4 	bl	801c3d0 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8018468:	2204      	movs	r2, #4
 801846a:	4b19      	ldr	r3, [pc, #100]	; (80184d0 <SPI_MemoryEraseBySector+0x214>)
 801846c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 801846e:	2364      	movs	r3, #100	; 0x64
 8018470:	2201      	movs	r2, #1
 8018472:	4917      	ldr	r1, [pc, #92]	; (80184d0 <SPI_MemoryEraseBySector+0x214>)
 8018474:	4812      	ldr	r0, [pc, #72]	; (80184c0 <SPI_MemoryEraseBySector+0x204>)
 8018476:	f006 f84d 	bl	801e514 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801847a:	2364      	movs	r3, #100	; 0x64
 801847c:	2201      	movs	r2, #1
 801847e:	4912      	ldr	r1, [pc, #72]	; (80184c8 <SPI_MemoryEraseBySector+0x20c>)
 8018480:	480f      	ldr	r0, [pc, #60]	; (80184c0 <SPI_MemoryEraseBySector+0x204>)
 8018482:	f006 f9b5 	bl	801e7f0 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8018486:	4b07      	ldr	r3, [pc, #28]	; (80184a4 <SPI_MemoryEraseBySector+0x1e8>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	4a08      	ldr	r2, [pc, #32]	; (80184ac <SPI_MemoryEraseBySector+0x1f0>)
 801848c:	6812      	ldr	r2, [r2, #0]
 801848e:	b291      	uxth	r1, r2
 8018490:	2201      	movs	r2, #1
 8018492:	4618      	mov	r0, r3
 8018494:	f003 ff9c 	bl	801c3d0 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8018498:	68fb      	ldr	r3, [r7, #12]

}
 801849a:	4618      	mov	r0, r3
 801849c:	3710      	adds	r7, #16
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}
 80184a2:	bf00      	nop
 80184a4:	2000bd08 	.word	0x2000bd08
 80184a8:	40021800 	.word	0x40021800
 80184ac:	2000bd0c 	.word	0x2000bd0c
 80184b0:	40020c00 	.word	0x40020c00
 80184b4:	40021000 	.word	0x40021000
 80184b8:	0802c0a8 	.word	0x0802c0a8
 80184bc:	0802dd50 	.word	0x0802dd50
 80184c0:	2000bd14 	.word	0x2000bd14
 80184c4:	0802dd51 	.word	0x0802dd51
 80184c8:	2000bd04 	.word	0x2000bd04
 80184cc:	0802c0e4 	.word	0x0802c0e4
 80184d0:	2000bd00 	.word	0x2000bd00

080184d4 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b084      	sub	sp, #16
 80184d8:	af00      	add	r7, sp, #0
 80184da:	60b9      	str	r1, [r7, #8]
 80184dc:	607b      	str	r3, [r7, #4]
 80184de:	4603      	mov	r3, r0
 80184e0:	73fb      	strb	r3, [r7, #15]
 80184e2:	4613      	mov	r3, r2
 80184e4:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 80184e6:	7bfb      	ldrb	r3, [r7, #15]
 80184e8:	3b01      	subs	r3, #1
 80184ea:	2b03      	cmp	r3, #3
 80184ec:	d828      	bhi.n	8018540 <SPI_ReadFromFlash+0x6c>
 80184ee:	a201      	add	r2, pc, #4	; (adr r2, 80184f4 <SPI_ReadFromFlash+0x20>)
 80184f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184f4:	08018505 	.word	0x08018505
 80184f8:	08018515 	.word	0x08018515
 80184fc:	08018523 	.word	0x08018523
 8018500:	08018531 	.word	0x08018531
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8018504:	4b2d      	ldr	r3, [pc, #180]	; (80185bc <SPI_ReadFromFlash+0xe8>)
 8018506:	4a2e      	ldr	r2, [pc, #184]	; (80185c0 <SPI_ReadFromFlash+0xec>)
 8018508:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 801850a:	4b2e      	ldr	r3, [pc, #184]	; (80185c4 <SPI_ReadFromFlash+0xf0>)
 801850c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018510:	601a      	str	r2, [r3, #0]
		break;
 8018512:	e018      	b.n	8018546 <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8018514:	4b29      	ldr	r3, [pc, #164]	; (80185bc <SPI_ReadFromFlash+0xe8>)
 8018516:	4a2c      	ldr	r2, [pc, #176]	; (80185c8 <SPI_ReadFromFlash+0xf4>)
 8018518:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 801851a:	4b2a      	ldr	r3, [pc, #168]	; (80185c4 <SPI_ReadFromFlash+0xf0>)
 801851c:	2220      	movs	r2, #32
 801851e:	601a      	str	r2, [r3, #0]
		break;
 8018520:	e011      	b.n	8018546 <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8018522:	4b26      	ldr	r3, [pc, #152]	; (80185bc <SPI_ReadFromFlash+0xe8>)
 8018524:	4a28      	ldr	r2, [pc, #160]	; (80185c8 <SPI_ReadFromFlash+0xf4>)
 8018526:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8018528:	4b26      	ldr	r3, [pc, #152]	; (80185c4 <SPI_ReadFromFlash+0xf0>)
 801852a:	2240      	movs	r2, #64	; 0x40
 801852c:	601a      	str	r2, [r3, #0]
		break;
 801852e:	e00a      	b.n	8018546 <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8018530:	4b22      	ldr	r3, [pc, #136]	; (80185bc <SPI_ReadFromFlash+0xe8>)
 8018532:	4a26      	ldr	r2, [pc, #152]	; (80185cc <SPI_ReadFromFlash+0xf8>)
 8018534:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8018536:	4b23      	ldr	r3, [pc, #140]	; (80185c4 <SPI_ReadFromFlash+0xf0>)
 8018538:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801853c:	601a      	str	r2, [r3, #0]
		break;
 801853e:	e002      	b.n	8018546 <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 8018540:	4823      	ldr	r0, [pc, #140]	; (80185d0 <SPI_ReadFromFlash+0xfc>)
 8018542:	f00e fb1b 	bl	8026b7c <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8018546:	89bb      	ldrh	r3, [r7, #12]
 8018548:	461a      	mov	r2, r3
 801854a:	2100      	movs	r1, #0
 801854c:	6878      	ldr	r0, [r7, #4]
 801854e:	f00e f991 	bl	8026874 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8018552:	4b1a      	ldr	r3, [pc, #104]	; (80185bc <SPI_ReadFromFlash+0xe8>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	4a1b      	ldr	r2, [pc, #108]	; (80185c4 <SPI_ReadFromFlash+0xf0>)
 8018558:	6812      	ldr	r2, [r2, #0]
 801855a:	b291      	uxth	r1, r2
 801855c:	2200      	movs	r2, #0
 801855e:	4618      	mov	r0, r3
 8018560:	f003 ff36 	bl	801c3d0 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8018564:	2203      	movs	r2, #3
 8018566:	4b1b      	ldr	r3, [pc, #108]	; (80185d4 <SPI_ReadFromFlash+0x100>)
 8018568:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 801856a:	68bb      	ldr	r3, [r7, #8]
 801856c:	0c1b      	lsrs	r3, r3, #16
 801856e:	b2da      	uxtb	r2, r3
 8018570:	4b18      	ldr	r3, [pc, #96]	; (80185d4 <SPI_ReadFromFlash+0x100>)
 8018572:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8018574:	68bb      	ldr	r3, [r7, #8]
 8018576:	0a1b      	lsrs	r3, r3, #8
 8018578:	b2da      	uxtb	r2, r3
 801857a:	4b16      	ldr	r3, [pc, #88]	; (80185d4 <SPI_ReadFromFlash+0x100>)
 801857c:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801857e:	68bb      	ldr	r3, [r7, #8]
 8018580:	b2da      	uxtb	r2, r3
 8018582:	4b14      	ldr	r3, [pc, #80]	; (80185d4 <SPI_ReadFromFlash+0x100>)
 8018584:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8018586:	2364      	movs	r3, #100	; 0x64
 8018588:	2204      	movs	r2, #4
 801858a:	4912      	ldr	r1, [pc, #72]	; (80185d4 <SPI_ReadFromFlash+0x100>)
 801858c:	4812      	ldr	r0, [pc, #72]	; (80185d8 <SPI_ReadFromFlash+0x104>)
 801858e:	f005 ffc1 	bl	801e514 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 8018592:	89ba      	ldrh	r2, [r7, #12]
 8018594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018598:	6879      	ldr	r1, [r7, #4]
 801859a:	480f      	ldr	r0, [pc, #60]	; (80185d8 <SPI_ReadFromFlash+0x104>)
 801859c:	f006 f928 	bl	801e7f0 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80185a0:	4b06      	ldr	r3, [pc, #24]	; (80185bc <SPI_ReadFromFlash+0xe8>)
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	4a07      	ldr	r2, [pc, #28]	; (80185c4 <SPI_ReadFromFlash+0xf0>)
 80185a6:	6812      	ldr	r2, [r2, #0]
 80185a8:	b291      	uxth	r1, r2
 80185aa:	2201      	movs	r2, #1
 80185ac:	4618      	mov	r0, r3
 80185ae:	f003 ff0f 	bl	801c3d0 <HAL_GPIO_WritePin>

}
 80185b2:	bf00      	nop
 80185b4:	3710      	adds	r7, #16
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd80      	pop	{r7, pc}
 80185ba:	bf00      	nop
 80185bc:	2000bd08 	.word	0x2000bd08
 80185c0:	40021800 	.word	0x40021800
 80185c4:	2000bd0c 	.word	0x2000bd0c
 80185c8:	40020c00 	.word	0x40020c00
 80185cc:	40021000 	.word	0x40021000
 80185d0:	0802c0a8 	.word	0x0802c0a8
 80185d4:	2000bd00 	.word	0x2000bd00
 80185d8:	2000bd14 	.word	0x2000bd14

080185dc <Get_Config>:




void Get_Config(void)
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b084      	sub	sp, #16
 80185e0:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 80185e2:	2300      	movs	r3, #0
 80185e4:	60fb      	str	r3, [r7, #12]

	size_t SIZE = (sizeof(EI_t))+6;
 80185e6:	f240 335e 	movw	r3, #862	; 0x35e
 80185ea:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	60bb      	str	r3, [r7, #8]

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80185f0:	2300      	movs	r3, #0
 80185f2:	60fb      	str	r3, [r7, #12]
 80185f4:	e01d      	b.n	8018632 <Get_Config+0x56>
	{
		HAL_Delay(20);
 80185f6:	2014      	movs	r0, #20
 80185f8:	f001 fa26 	bl	8019a48 <HAL_Delay>
		if(SIZE_VAR <32)
 80185fc:	68bb      	ldr	r3, [r7, #8]
 80185fe:	2b1f      	cmp	r3, #31
 8018600:	d809      	bhi.n	8018616 <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 8018602:	68bb      	ldr	r3, [r7, #8]
 8018604:	b29a      	uxth	r2, r3
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	4938      	ldr	r1, [pc, #224]	; (80186ec <Get_Config+0x110>)
 801860a:	440b      	add	r3, r1
 801860c:	68f9      	ldr	r1, [r7, #12]
 801860e:	2001      	movs	r0, #1
 8018610:	f7ff ff60 	bl	80184d4 <SPI_ReadFromFlash>
 8018614:	e00a      	b.n	801862c <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	4a34      	ldr	r2, [pc, #208]	; (80186ec <Get_Config+0x110>)
 801861a:	4413      	add	r3, r2
 801861c:	2220      	movs	r2, #32
 801861e:	68f9      	ldr	r1, [r7, #12]
 8018620:	2001      	movs	r0, #1
 8018622:	f7ff ff57 	bl	80184d4 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8018626:	68bb      	ldr	r3, [r7, #8]
 8018628:	3b20      	subs	r3, #32
 801862a:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	3320      	adds	r3, #32
 8018630:	60fb      	str	r3, [r7, #12]
 8018632:	68fa      	ldr	r2, [r7, #12]
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	429a      	cmp	r2, r3
 8018638:	d3dd      	bcc.n	80185f6 <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 801863a:	f44f 7157 	mov.w	r1, #860	; 0x35c
 801863e:	482b      	ldr	r0, [pc, #172]	; (80186ec <Get_Config+0x110>)
 8018640:	f7fd fb5c 	bl	8015cfc <CheckCRC>
 8018644:	4603      	mov	r3, r0
 8018646:	2b00      	cmp	r3, #0
 8018648:	d02a      	beq.n	80186a0 <Get_Config+0xc4>
	{
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 801864a:	f44f 7256 	mov.w	r2, #856	; 0x358
 801864e:	4928      	ldr	r1, [pc, #160]	; (80186f0 <Get_Config+0x114>)
 8018650:	4828      	ldr	r0, [pc, #160]	; (80186f4 <Get_Config+0x118>)
 8018652:	f00e f8e7 	bl	8026824 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8018656:	4a28      	ldr	r2, [pc, #160]	; (80186f8 <Get_Config+0x11c>)
 8018658:	2110      	movs	r1, #16
 801865a:	2000      	movs	r0, #0
 801865c:	f7e7 ffda 	bl	8000614 <ExtractBits>
 8018660:	4603      	mov	r3, r0
 8018662:	b29a      	uxth	r2, r3
 8018664:	4b25      	ldr	r3, [pc, #148]	; (80186fc <Get_Config+0x120>)
 8018666:	801a      	strh	r2, [r3, #0]
		DatCrcXchangeSelf_st.App_CRC = EI_Dat_CRC;
 8018668:	4b24      	ldr	r3, [pc, #144]	; (80186fc <Get_Config+0x120>)
 801866a:	881a      	ldrh	r2, [r3, #0]
 801866c:	4b24      	ldr	r3, [pc, #144]	; (8018700 <Get_Config+0x124>)
 801866e:	801a      	strh	r2, [r3, #0]

		printf("\n___________________BUILD DETAILS___________________\n");
 8018670:	4824      	ldr	r0, [pc, #144]	; (8018704 <Get_Config+0x128>)
 8018672:	f00e fa83 	bl	8026b7c <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8018676:	4924      	ldr	r1, [pc, #144]	; (8018708 <Get_Config+0x12c>)
 8018678:	4824      	ldr	r0, [pc, #144]	; (801870c <Get_Config+0x130>)
 801867a:	f00e f9e3 	bl	8026a44 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 801867e:	4b1f      	ldr	r3, [pc, #124]	; (80186fc <Get_Config+0x120>)
 8018680:	881b      	ldrh	r3, [r3, #0]
 8018682:	4619      	mov	r1, r3
 8018684:	4822      	ldr	r0, [pc, #136]	; (8018710 <Get_Config+0x134>)
 8018686:	f00e f9dd 	bl	8026a44 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 801868a:	4b22      	ldr	r3, [pc, #136]	; (8018714 <Get_Config+0x138>)
 801868c:	881b      	ldrh	r3, [r3, #0]
 801868e:	4619      	mov	r1, r3
 8018690:	4821      	ldr	r0, [pc, #132]	; (8018718 <Get_Config+0x13c>)
 8018692:	f00e f9d7 	bl	8026a44 <iprintf>
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8018696:	4b21      	ldr	r3, [pc, #132]	; (801871c <Get_Config+0x140>)
 8018698:	781b      	ldrb	r3, [r3, #0]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d121      	bne.n	80186e2 <Get_Config+0x106>
 801869e:	e01e      	b.n	80186de <Get_Config+0x102>
		printf("\n EI Configuration Structure Size:%u\n",(sizeof(EI_t)));
 80186a0:	f44f 7156 	mov.w	r1, #856	; 0x358
 80186a4:	481e      	ldr	r0, [pc, #120]	; (8018720 <Get_Config+0x144>)
 80186a6:	f00e f9cd 	bl	8026a44 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 80186aa:	4b1e      	ldr	r3, [pc, #120]	; (8018724 <Get_Config+0x148>)
 80186ac:	4a10      	ldr	r2, [pc, #64]	; (80186f0 <Get_Config+0x114>)
 80186ae:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 80186b0:	4b0e      	ldr	r3, [pc, #56]	; (80186ec <Get_Config+0x110>)
 80186b2:	f893 335b 	ldrb.w	r3, [r3, #859]	; 0x35b
 80186b6:	4619      	mov	r1, r3
 80186b8:	4b0c      	ldr	r3, [pc, #48]	; (80186ec <Get_Config+0x110>)
 80186ba:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 80186be:	461a      	mov	r2, r3
 80186c0:	4819      	ldr	r0, [pc, #100]	; (8018728 <Get_Config+0x14c>)
 80186c2:	f00e f9bf 	bl	8026a44 <iprintf>
		printf("\nCheck for CRC:");
 80186c6:	4819      	ldr	r0, [pc, #100]	; (801872c <Get_Config+0x150>)
 80186c8:	f00e f9bc 	bl	8026a44 <iprintf>
		gucFlagUpdate =3;
 80186cc:	4b18      	ldr	r3, [pc, #96]	; (8018730 <Get_Config+0x154>)
 80186ce:	2203      	movs	r2, #3
 80186d0:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 80186d2:	4818      	ldr	r0, [pc, #96]	; (8018734 <Get_Config+0x158>)
 80186d4:	f00e fa52 	bl	8026b7c <puts>
			Data_Processing();
 80186d8:	f000 f82e 	bl	8018738 <Data_Processing>
 80186dc:	e7fc      	b.n	80186d8 <Get_Config+0xfc>
	{
		readCanToStructs();
 80186de:	f7f9 fa17 	bl	8011b10 <readCanToStructs>
	}
}
 80186e2:	bf00      	nop
 80186e4:	3710      	adds	r7, #16
 80186e6:	46bd      	mov	sp, r7
 80186e8:	bd80      	pop	{r7, pc}
 80186ea:	bf00      	nop
 80186ec:	20000bbc 	.word	0x20000bbc
 80186f0:	20000bc0 	.word	0x20000bc0
 80186f4:	20000504 	.word	0x20000504
 80186f8:	20000f18 	.word	0x20000f18
 80186fc:	2000bd12 	.word	0x2000bd12
 8018700:	20000bb4 	.word	0x20000bb4
 8018704:	0802c114 	.word	0x0802c114
 8018708:	20000505 	.word	0x20000505
 801870c:	0802c14c 	.word	0x0802c14c
 8018710:	0802c160 	.word	0x0802c160
 8018714:	2000bd10 	.word	0x2000bd10
 8018718:	0802c170 	.word	0x0802c170
 801871c:	20000fbf 	.word	0x20000fbf
 8018720:	0802c184 	.word	0x0802c184
 8018724:	20000500 	.word	0x20000500
 8018728:	0802c1ac 	.word	0x0802c1ac
 801872c:	0802c1c0 	.word	0x0802c1c0
 8018730:	20000fbd 	.word	0x20000fbd
 8018734:	0802c1d0 	.word	0x0802c1d0

08018738 <Data_Processing>:


void Data_Processing(void)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 801873c:	4b0b      	ldr	r3, [pc, #44]	; (801876c <Data_Processing+0x34>)
 801873e:	781b      	ldrb	r3, [r3, #0]
 8018740:	2b03      	cmp	r3, #3
 8018742:	d10e      	bne.n	8018762 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 8018744:	2000      	movs	r0, #0
 8018746:	f7f3 fe49 	bl	800c3dc <CheckForRqst>
 801874a:	4603      	mov	r3, r0
 801874c:	461a      	mov	r2, r3
 801874e:	4b08      	ldr	r3, [pc, #32]	; (8018770 <Data_Processing+0x38>)
 8018750:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 8018752:	4b07      	ldr	r3, [pc, #28]	; (8018770 <Data_Processing+0x38>)
 8018754:	781b      	ldrb	r3, [r3, #0]
 8018756:	2b01      	cmp	r3, #1
 8018758:	d105      	bne.n	8018766 <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 801875a:	2000      	movs	r0, #0
 801875c:	f000 f80a 	bl	8018774 <AutoLoadDat>
		}
		break;
 8018760:	e001      	b.n	8018766 <Data_Processing+0x2e>
	default:
		break;
 8018762:	bf00      	nop
 8018764:	e000      	b.n	8018768 <Data_Processing+0x30>
		break;
 8018766:	bf00      	nop
	}
}
 8018768:	bf00      	nop
 801876a:	bd80      	pop	{r7, pc}
 801876c:	20000fbd 	.word	0x20000fbd
 8018770:	20000fbe 	.word	0x20000fbe

08018774 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b084      	sub	sp, #16
 8018778:	af00      	add	r7, sp, #0
 801877a:	4603      	mov	r3, r0
 801877c:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 801877e:	2300      	movs	r3, #0
 8018780:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8018782:	79fb      	ldrb	r3, [r7, #7]
 8018784:	b29b      	uxth	r3, r3
 8018786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801878a:	4934      	ldr	r1, [pc, #208]	; (801885c <AutoLoadDat+0xe8>)
 801878c:	4618      	mov	r0, r3
 801878e:	f7f3 ffcd 	bl	800c72c <ReadAndFormConfig>
 8018792:	4603      	mov	r3, r0
 8018794:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 8018796:	4832      	ldr	r0, [pc, #200]	; (8018860 <AutoLoadDat+0xec>)
 8018798:	f004 fcb0 	bl	801d0fc <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 801879c:	7bbb      	ldrb	r3, [r7, #14]
 801879e:	2b01      	cmp	r3, #1
 80187a0:	d921      	bls.n	80187e6 <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 80187a2:	4b30      	ldr	r3, [pc, #192]	; (8018864 <AutoLoadDat+0xf0>)
 80187a4:	2200      	movs	r2, #0
 80187a6:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 80187a8:	4b2c      	ldr	r3, [pc, #176]	; (801885c <AutoLoadDat+0xe8>)
 80187aa:	785b      	ldrb	r3, [r3, #1]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d107      	bne.n	80187c0 <AutoLoadDat+0x4c>
 80187b0:	4b2a      	ldr	r3, [pc, #168]	; (801885c <AutoLoadDat+0xe8>)
 80187b2:	789b      	ldrb	r3, [r3, #2]
 80187b4:	2b01      	cmp	r3, #1
 80187b6:	d103      	bne.n	80187c0 <AutoLoadDat+0x4c>
 80187b8:	4b28      	ldr	r3, [pc, #160]	; (801885c <AutoLoadDat+0xe8>)
 80187ba:	78db      	ldrb	r3, [r3, #3]
 80187bc:	2b04      	cmp	r3, #4
 80187be:	d003      	beq.n	80187c8 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 80187c0:	4829      	ldr	r0, [pc, #164]	; (8018868 <AutoLoadDat+0xf4>)
 80187c2:	f00e f9db 	bl	8026b7c <puts>
				return;
 80187c6:	e046      	b.n	8018856 <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 80187c8:	4b28      	ldr	r3, [pc, #160]	; (801886c <AutoLoadDat+0xf8>)
 80187ca:	4a29      	ldr	r2, [pc, #164]	; (8018870 <AutoLoadDat+0xfc>)
 80187cc:	601a      	str	r2, [r3, #0]
			saveConfig();
 80187ce:	f000 f85b 	bl	8018888 <saveConfig>
			gucFlagCheck =1;
 80187d2:	4b28      	ldr	r3, [pc, #160]	; (8018874 <AutoLoadDat+0x100>)
 80187d4:	2201      	movs	r2, #1
 80187d6:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 80187d8:	4b27      	ldr	r3, [pc, #156]	; (8018878 <AutoLoadDat+0x104>)
 80187da:	2201      	movs	r2, #1
 80187dc:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 80187de:	4827      	ldr	r0, [pc, #156]	; (801887c <AutoLoadDat+0x108>)
 80187e0:	f00e f9cc 	bl	8026b7c <puts>
			break;
 80187e4:	e037      	b.n	8018856 <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 80187e6:	7bbb      	ldrb	r3, [r7, #14]
 80187e8:	2b01      	cmp	r3, #1
 80187ea:	d11b      	bne.n	8018824 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 80187ec:	7bfb      	ldrb	r3, [r7, #15]
 80187ee:	2b03      	cmp	r3, #3
 80187f0:	d109      	bne.n	8018806 <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 80187f2:	4b1c      	ldr	r3, [pc, #112]	; (8018864 <AutoLoadDat+0xf0>)
 80187f4:	2200      	movs	r2, #0
 80187f6:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 80187f8:	79fb      	ldrb	r3, [r7, #7]
 80187fa:	2203      	movs	r2, #3
 80187fc:	2101      	movs	r1, #1
 80187fe:	4618      	mov	r0, r3
 8018800:	f7f3 ff48 	bl	800c694 <SendAck>
				break;
 8018804:	e027      	b.n	8018856 <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 8018806:	79fb      	ldrb	r3, [r7, #7]
 8018808:	2202      	movs	r2, #2
 801880a:	2101      	movs	r1, #1
 801880c:	4618      	mov	r0, r3
 801880e:	f7f3 ff41 	bl	800c694 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 8018812:	f001 f90d 	bl	8019a30 <HAL_GetTick>
 8018816:	4603      	mov	r3, r0
 8018818:	4a19      	ldr	r2, [pc, #100]	; (8018880 <AutoLoadDat+0x10c>)
 801881a:	6013      	str	r3, [r2, #0]
			AckCount++;
 801881c:	7bfb      	ldrb	r3, [r7, #15]
 801881e:	3301      	adds	r3, #1
 8018820:	73fb      	strb	r3, [r7, #15]
 8018822:	e7ae      	b.n	8018782 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 8018824:	f001 f904 	bl	8019a30 <HAL_GetTick>
 8018828:	4602      	mov	r2, r0
 801882a:	4b15      	ldr	r3, [pc, #84]	; (8018880 <AutoLoadDat+0x10c>)
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	1ad3      	subs	r3, r2, r3
 8018830:	2b00      	cmp	r3, #0
 8018832:	bfb8      	it	lt
 8018834:	425b      	neglt	r3, r3
 8018836:	f247 5230 	movw	r2, #30000	; 0x7530
 801883a:	4293      	cmp	r3, r2
 801883c:	dda1      	ble.n	8018782 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 801883e:	4b09      	ldr	r3, [pc, #36]	; (8018864 <AutoLoadDat+0xf0>)
 8018840:	2200      	movs	r2, #0
 8018842:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 8018844:	480f      	ldr	r0, [pc, #60]	; (8018884 <AutoLoadDat+0x110>)
 8018846:	f00e f999 	bl	8026b7c <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 801884a:	79fb      	ldrb	r3, [r7, #7]
 801884c:	2205      	movs	r2, #5
 801884e:	2101      	movs	r1, #1
 8018850:	4618      	mov	r0, r3
 8018852:	f7f3 ff1f 	bl	800c694 <SendAck>
				break;
			}
		}
	}
}
 8018856:	3710      	adds	r7, #16
 8018858:	46bd      	mov	sp, r7
 801885a:	bd80      	pop	{r7, pc}
 801885c:	20000bbc 	.word	0x20000bbc
 8018860:	2000b46c 	.word	0x2000b46c
 8018864:	20000fbe 	.word	0x20000fbe
 8018868:	0802c210 	.word	0x0802c210
 801886c:	20000500 	.word	0x20000500
 8018870:	20000bc0 	.word	0x20000bc0
 8018874:	2000bcfc 	.word	0x2000bcfc
 8018878:	2000bcfd 	.word	0x2000bcfd
 801887c:	0802c228 	.word	0x0802c228
 8018880:	20000fc0 	.word	0x20000fc0
 8018884:	0802c238 	.word	0x0802c238

08018888 <saveConfig>:

unsigned char saveConfig(void)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b084      	sub	sp, #16
 801888c:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 801888e:	2300      	movs	r3, #0
 8018890:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8018892:	4825      	ldr	r0, [pc, #148]	; (8018928 <saveConfig+0xa0>)
 8018894:	f00e f972 	bl	8026b7c <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8018898:	2300      	movs	r3, #0
 801889a:	60fb      	str	r3, [r7, #12]
 801889c:	e011      	b.n	80188c2 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	031b      	lsls	r3, r3, #12
 80188a2:	4619      	mov	r1, r3
 80188a4:	2001      	movs	r0, #1
 80188a6:	f7ff fd09 	bl	80182bc <SPI_MemoryEraseBySector>
 80188aa:	4603      	mov	r3, r0
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d005      	beq.n	80188bc <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 80188b0:	481e      	ldr	r0, [pc, #120]	; (801892c <saveConfig+0xa4>)
 80188b2:	f004 fc23 	bl	801d0fc <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 80188b6:	481e      	ldr	r0, [pc, #120]	; (8018930 <saveConfig+0xa8>)
 80188b8:	f00e f960 	bl	8026b7c <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	3301      	adds	r3, #1
 80188c0:	60fb      	str	r3, [r7, #12]
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	2b05      	cmp	r3, #5
 80188c6:	d9ea      	bls.n	801889e <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 80188c8:	f240 335f 	movw	r3, #863	; 0x35f
 80188cc:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 80188d2:	2300      	movs	r3, #0
 80188d4:	60fb      	str	r3, [r7, #12]
 80188d6:	e01d      	b.n	8018914 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 80188d8:	4814      	ldr	r0, [pc, #80]	; (801892c <saveConfig+0xa4>)
 80188da:	f004 fc0f 	bl	801d0fc <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 80188de:	68bb      	ldr	r3, [r7, #8]
 80188e0:	2b1f      	cmp	r3, #31
 80188e2:	d809      	bhi.n	80188f8 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	b29a      	uxth	r2, r3
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	4912      	ldr	r1, [pc, #72]	; (8018934 <saveConfig+0xac>)
 80188ec:	440b      	add	r3, r1
 80188ee:	68f9      	ldr	r1, [r7, #12]
 80188f0:	2001      	movs	r0, #1
 80188f2:	f7ff fbc5 	bl	8018080 <SPI_WriteInFlash>
 80188f6:	e00a      	b.n	801890e <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	4a0e      	ldr	r2, [pc, #56]	; (8018934 <saveConfig+0xac>)
 80188fc:	4413      	add	r3, r2
 80188fe:	2220      	movs	r2, #32
 8018900:	68f9      	ldr	r1, [r7, #12]
 8018902:	2001      	movs	r0, #1
 8018904:	f7ff fbbc 	bl	8018080 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 8018908:	68bb      	ldr	r3, [r7, #8]
 801890a:	3b20      	subs	r3, #32
 801890c:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	3320      	adds	r3, #32
 8018912:	60fb      	str	r3, [r7, #12]
 8018914:	68fa      	ldr	r2, [r7, #12]
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	429a      	cmp	r2, r3
 801891a:	d3dd      	bcc.n	80188d8 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 801891c:	4806      	ldr	r0, [pc, #24]	; (8018938 <saveConfig+0xb0>)
 801891e:	f00e f891 	bl	8026a44 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 8018922:	f7ff fad9 	bl	8017ed8 <__NVIC_SystemReset>
 8018926:	bf00      	nop
 8018928:	0802c254 	.word	0x0802c254
 801892c:	2000b46c 	.word	0x2000b46c
 8018930:	0802c260 	.word	0x0802c260
 8018934:	20000bbc 	.word	0x20000bbc
 8018938:	0802c274 	.word	0x0802c274

0801893c <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 8018940:	4b14      	ldr	r3, [pc, #80]	; (8018994 <Print_BuildDat_Details+0x58>)
 8018942:	781b      	ldrb	r3, [r3, #0]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d022      	beq.n	801898e <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 8018948:	4b13      	ldr	r3, [pc, #76]	; (8018998 <Print_BuildDat_Details+0x5c>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4618      	mov	r0, r3
 801894e:	f7f7 fd53 	bl	80103f8 <HAL_Elaps_Ticks>
 8018952:	4603      	mov	r3, r0
 8018954:	f242 720f 	movw	r2, #9999	; 0x270f
 8018958:	4293      	cmp	r3, r2
 801895a:	d919      	bls.n	8018990 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 801895c:	480f      	ldr	r0, [pc, #60]	; (801899c <Print_BuildDat_Details+0x60>)
 801895e:	f00e f90d 	bl	8026b7c <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8018962:	490f      	ldr	r1, [pc, #60]	; (80189a0 <Print_BuildDat_Details+0x64>)
 8018964:	480f      	ldr	r0, [pc, #60]	; (80189a4 <Print_BuildDat_Details+0x68>)
 8018966:	f00e f86d 	bl	8026a44 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 801896a:	4b0f      	ldr	r3, [pc, #60]	; (80189a8 <Print_BuildDat_Details+0x6c>)
 801896c:	881b      	ldrh	r3, [r3, #0]
 801896e:	4619      	mov	r1, r3
 8018970:	480e      	ldr	r0, [pc, #56]	; (80189ac <Print_BuildDat_Details+0x70>)
 8018972:	f00e f867 	bl	8026a44 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 8018976:	4b0e      	ldr	r3, [pc, #56]	; (80189b0 <Print_BuildDat_Details+0x74>)
 8018978:	881b      	ldrh	r3, [r3, #0]
 801897a:	4619      	mov	r1, r3
 801897c:	480d      	ldr	r0, [pc, #52]	; (80189b4 <Print_BuildDat_Details+0x78>)
 801897e:	f00e f861 	bl	8026a44 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8018982:	f001 f855 	bl	8019a30 <HAL_GetTick>
 8018986:	4603      	mov	r3, r0
 8018988:	4a03      	ldr	r2, [pc, #12]	; (8018998 <Print_BuildDat_Details+0x5c>)
 801898a:	6013      	str	r3, [r2, #0]
 801898c:	e000      	b.n	8018990 <Print_BuildDat_Details+0x54>
		return;
 801898e:	bf00      	nop
	}
}
 8018990:	bd80      	pop	{r7, pc}
 8018992:	bf00      	nop
 8018994:	20000bbb 	.word	0x20000bbb
 8018998:	2000bd78 	.word	0x2000bd78
 801899c:	0802c290 	.word	0x0802c290
 80189a0:	20000505 	.word	0x20000505
 80189a4:	0802c14c 	.word	0x0802c14c
 80189a8:	2000bd12 	.word	0x2000bd12
 80189ac:	0802c160 	.word	0x0802c160
 80189b0:	2000bd10 	.word	0x2000bd10
 80189b4:	0802c170 	.word	0x0802c170

080189b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b082      	sub	sp, #8
 80189bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80189be:	4b0f      	ldr	r3, [pc, #60]	; (80189fc <HAL_MspInit+0x44>)
 80189c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80189c2:	4a0e      	ldr	r2, [pc, #56]	; (80189fc <HAL_MspInit+0x44>)
 80189c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80189c8:	6413      	str	r3, [r2, #64]	; 0x40
 80189ca:	4b0c      	ldr	r3, [pc, #48]	; (80189fc <HAL_MspInit+0x44>)
 80189cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80189ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80189d2:	607b      	str	r3, [r7, #4]
 80189d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80189d6:	4b09      	ldr	r3, [pc, #36]	; (80189fc <HAL_MspInit+0x44>)
 80189d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189da:	4a08      	ldr	r2, [pc, #32]	; (80189fc <HAL_MspInit+0x44>)
 80189dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80189e0:	6453      	str	r3, [r2, #68]	; 0x44
 80189e2:	4b06      	ldr	r3, [pc, #24]	; (80189fc <HAL_MspInit+0x44>)
 80189e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80189ea:	603b      	str	r3, [r7, #0]
 80189ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80189ee:	2004      	movs	r0, #4
 80189f0:	f001 fff4 	bl	801a9dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80189f4:	bf00      	nop
 80189f6:	3708      	adds	r7, #8
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}
 80189fc:	40023800 	.word	0x40023800

08018a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018a00:	b480      	push	{r7}
 8018a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8018a04:	e7fe      	b.n	8018a04 <NMI_Handler+0x4>

08018a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8018a06:	b480      	push	{r7}
 8018a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8018a0a:	e7fe      	b.n	8018a0a <HardFault_Handler+0x4>

08018a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018a0c:	b480      	push	{r7}
 8018a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018a10:	e7fe      	b.n	8018a10 <MemManage_Handler+0x4>

08018a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018a12:	b480      	push	{r7}
 8018a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8018a16:	e7fe      	b.n	8018a16 <BusFault_Handler+0x4>

08018a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8018a18:	b480      	push	{r7}
 8018a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018a1c:	e7fe      	b.n	8018a1c <UsageFault_Handler+0x4>

08018a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8018a1e:	b480      	push	{r7}
 8018a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8018a22:	bf00      	nop
 8018a24:	46bd      	mov	sp, r7
 8018a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2a:	4770      	bx	lr

08018a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018a2c:	b480      	push	{r7}
 8018a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018a30:	bf00      	nop
 8018a32:	46bd      	mov	sp, r7
 8018a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a38:	4770      	bx	lr

08018a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8018a3a:	b480      	push	{r7}
 8018a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8018a3e:	bf00      	nop
 8018a40:	46bd      	mov	sp, r7
 8018a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a46:	4770      	bx	lr

08018a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8018a48:	b580      	push	{r7, lr}
 8018a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8018a4c:	f000 ffdc 	bl	8019a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8018a50:	bf00      	nop
 8018a52:	bd80      	pop	{r7, pc}

08018a54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 8018a58:	2001      	movs	r0, #1
 8018a5a:	f003 fced 	bl	801c438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8018a5e:	bf00      	nop
 8018a60:	bd80      	pop	{r7, pc}

08018a62 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8018a62:	b580      	push	{r7, lr}
 8018a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 8018a66:	2002      	movs	r0, #2
 8018a68:	f003 fce6 	bl	801c438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8018a6c:	bf00      	nop
 8018a6e:	bd80      	pop	{r7, pc}

08018a70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8018a70:	b580      	push	{r7, lr}
 8018a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8018a74:	4802      	ldr	r0, [pc, #8]	; (8018a80 <TIM4_IRQHandler+0x10>)
 8018a76:	f006 fc03 	bl	801f280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8018a7a:	bf00      	nop
 8018a7c:	bd80      	pop	{r7, pc}
 8018a7e:	bf00      	nop
 8018a80:	2000bd80 	.word	0x2000bd80

08018a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8018a84:	b580      	push	{r7, lr}
 8018a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8018a88:	4802      	ldr	r0, [pc, #8]	; (8018a94 <USART1_IRQHandler+0x10>)
 8018a8a:	f006 fe1d 	bl	801f6c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8018a8e:	bf00      	nop
 8018a90:	bd80      	pop	{r7, pc}
 8018a92:	bf00      	nop
 8018a94:	2000dcb8 	.word	0x2000dcb8

08018a98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8018a9c:	4802      	ldr	r0, [pc, #8]	; (8018aa8 <TIM5_IRQHandler+0x10>)
 8018a9e:	f006 fbef 	bl	801f280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8018aa2:	bf00      	nop
 8018aa4:	bd80      	pop	{r7, pc}
 8018aa6:	bf00      	nop
 8018aa8:	2000be3c 	.word	0x2000be3c

08018aac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8018ab0:	4802      	ldr	r0, [pc, #8]	; (8018abc <UART4_IRQHandler+0x10>)
 8018ab2:	f006 fe09 	bl	801f6c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8018ab6:	bf00      	nop
 8018ab8:	bd80      	pop	{r7, pc}
 8018aba:	bf00      	nop
 8018abc:	2000da90 	.word	0x2000da90

08018ac0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8018ac4:	4802      	ldr	r0, [pc, #8]	; (8018ad0 <UART5_IRQHandler+0x10>)
 8018ac6:	f006 fdff 	bl	801f6c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8018aca:	bf00      	nop
 8018acc:	bd80      	pop	{r7, pc}
 8018ace:	bf00      	nop
 8018ad0:	2000db48 	.word	0x2000db48

08018ad4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8018ad8:	4802      	ldr	r0, [pc, #8]	; (8018ae4 <TIM6_DAC_IRQHandler+0x10>)
 8018ada:	f006 fbd1 	bl	801f280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8018ade:	bf00      	nop
 8018ae0:	bd80      	pop	{r7, pc}
 8018ae2:	bf00      	nop
 8018ae4:	2000bef8 	.word	0x2000bef8

08018ae8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8018aec:	4802      	ldr	r0, [pc, #8]	; (8018af8 <TIM7_IRQHandler+0x10>)
 8018aee:	f006 fbc7 	bl	801f280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8018af2:	bf00      	nop
 8018af4:	bd80      	pop	{r7, pc}
 8018af6:	bf00      	nop
 8018af8:	2000bfb4 	.word	0x2000bfb4

08018afc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8018b00:	4802      	ldr	r0, [pc, #8]	; (8018b0c <ETH_IRQHandler+0x10>)
 8018b02:	f002 fbbb 	bl	801b27c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8018b06:	bf00      	nop
 8018b08:	bd80      	pop	{r7, pc}
 8018b0a:	bf00      	nop
 8018b0c:	200126cc 	.word	0x200126cc

08018b10 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8018b14:	4802      	ldr	r0, [pc, #8]	; (8018b20 <CAN2_RX0_IRQHandler+0x10>)
 8018b16:	f001 fc5d 	bl	801a3d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8018b1a:	bf00      	nop
 8018b1c:	bd80      	pop	{r7, pc}
 8018b1e:	bf00      	nop
 8018b20:	2000b2e8 	.word	0x2000b2e8

08018b24 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8018b28:	4802      	ldr	r0, [pc, #8]	; (8018b34 <CAN2_RX1_IRQHandler+0x10>)
 8018b2a:	f001 fc53 	bl	801a3d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8018b2e:	bf00      	nop
 8018b30:	bd80      	pop	{r7, pc}
 8018b32:	bf00      	nop
 8018b34:	2000b2e8 	.word	0x2000b2e8

08018b38 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8018b3c:	4802      	ldr	r0, [pc, #8]	; (8018b48 <UART7_IRQHandler+0x10>)
 8018b3e:	f006 fdc3 	bl	801f6c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8018b42:	bf00      	nop
 8018b44:	bd80      	pop	{r7, pc}
 8018b46:	bf00      	nop
 8018b48:	2000dc00 	.word	0x2000dc00

08018b4c <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8018b50:	4802      	ldr	r0, [pc, #8]	; (8018b5c <CAN3_RX0_IRQHandler+0x10>)
 8018b52:	f001 fc3f 	bl	801a3d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8018b56:	bf00      	nop
 8018b58:	bd80      	pop	{r7, pc}
 8018b5a:	bf00      	nop
 8018b5c:	2000b34c 	.word	0x2000b34c

08018b60 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8018b64:	4802      	ldr	r0, [pc, #8]	; (8018b70 <CAN3_RX1_IRQHandler+0x10>)
 8018b66:	f001 fc35 	bl	801a3d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 8018b6a:	bf00      	nop
 8018b6c:	bd80      	pop	{r7, pc}
 8018b6e:	bf00      	nop
 8018b70:	2000b34c 	.word	0x2000b34c

08018b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8018b74:	b480      	push	{r7}
 8018b76:	af00      	add	r7, sp, #0
	return 1;
 8018b78:	2301      	movs	r3, #1
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b82:	4770      	bx	lr

08018b84 <_kill>:

int _kill(int pid, int sig)
{
 8018b84:	b480      	push	{r7}
 8018b86:	b083      	sub	sp, #12
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8018b8e:	4b05      	ldr	r3, [pc, #20]	; (8018ba4 <_kill+0x20>)
 8018b90:	2216      	movs	r2, #22
 8018b92:	601a      	str	r2, [r3, #0]
	return -1;
 8018b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018b98:	4618      	mov	r0, r3
 8018b9a:	370c      	adds	r7, #12
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba2:	4770      	bx	lr
 8018ba4:	20016310 	.word	0x20016310

08018ba8 <_exit>:

void _exit (int status)
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b082      	sub	sp, #8
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8018bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8018bb4:	6878      	ldr	r0, [r7, #4]
 8018bb6:	f7ff ffe5 	bl	8018b84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8018bba:	e7fe      	b.n	8018bba <_exit+0x12>

08018bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b086      	sub	sp, #24
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	60f8      	str	r0, [r7, #12]
 8018bc4:	60b9      	str	r1, [r7, #8]
 8018bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018bc8:	2300      	movs	r3, #0
 8018bca:	617b      	str	r3, [r7, #20]
 8018bcc:	e00a      	b.n	8018be4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8018bce:	f3af 8000 	nop.w
 8018bd2:	4601      	mov	r1, r0
 8018bd4:	68bb      	ldr	r3, [r7, #8]
 8018bd6:	1c5a      	adds	r2, r3, #1
 8018bd8:	60ba      	str	r2, [r7, #8]
 8018bda:	b2ca      	uxtb	r2, r1
 8018bdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018bde:	697b      	ldr	r3, [r7, #20]
 8018be0:	3301      	adds	r3, #1
 8018be2:	617b      	str	r3, [r7, #20]
 8018be4:	697a      	ldr	r2, [r7, #20]
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	dbf0      	blt.n	8018bce <_read+0x12>
	}

return len;
 8018bec:	687b      	ldr	r3, [r7, #4]
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	3718      	adds	r7, #24
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}

08018bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8018bf6:	b580      	push	{r7, lr}
 8018bf8:	b086      	sub	sp, #24
 8018bfa:	af00      	add	r7, sp, #0
 8018bfc:	60f8      	str	r0, [r7, #12]
 8018bfe:	60b9      	str	r1, [r7, #8]
 8018c00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018c02:	2300      	movs	r3, #0
 8018c04:	617b      	str	r3, [r7, #20]
 8018c06:	e009      	b.n	8018c1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8018c08:	68bb      	ldr	r3, [r7, #8]
 8018c0a:	1c5a      	adds	r2, r3, #1
 8018c0c:	60ba      	str	r2, [r7, #8]
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7e7 ff3f 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018c16:	697b      	ldr	r3, [r7, #20]
 8018c18:	3301      	adds	r3, #1
 8018c1a:	617b      	str	r3, [r7, #20]
 8018c1c:	697a      	ldr	r2, [r7, #20]
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	429a      	cmp	r2, r3
 8018c22:	dbf1      	blt.n	8018c08 <_write+0x12>
	}
	return len;
 8018c24:	687b      	ldr	r3, [r7, #4]
}
 8018c26:	4618      	mov	r0, r3
 8018c28:	3718      	adds	r7, #24
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bd80      	pop	{r7, pc}

08018c2e <_close>:

int _close(int file)
{
 8018c2e:	b480      	push	{r7}
 8018c30:	b083      	sub	sp, #12
 8018c32:	af00      	add	r7, sp, #0
 8018c34:	6078      	str	r0, [r7, #4]
	return -1;
 8018c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	370c      	adds	r7, #12
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c44:	4770      	bx	lr

08018c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8018c46:	b480      	push	{r7}
 8018c48:	b083      	sub	sp, #12
 8018c4a:	af00      	add	r7, sp, #0
 8018c4c:	6078      	str	r0, [r7, #4]
 8018c4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8018c50:	683b      	ldr	r3, [r7, #0]
 8018c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8018c56:	605a      	str	r2, [r3, #4]
	return 0;
 8018c58:	2300      	movs	r3, #0
}
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	370c      	adds	r7, #12
 8018c5e:	46bd      	mov	sp, r7
 8018c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c64:	4770      	bx	lr

08018c66 <_isatty>:

int _isatty(int file)
{
 8018c66:	b480      	push	{r7}
 8018c68:	b083      	sub	sp, #12
 8018c6a:	af00      	add	r7, sp, #0
 8018c6c:	6078      	str	r0, [r7, #4]
	return 1;
 8018c6e:	2301      	movs	r3, #1
}
 8018c70:	4618      	mov	r0, r3
 8018c72:	370c      	adds	r7, #12
 8018c74:	46bd      	mov	sp, r7
 8018c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7a:	4770      	bx	lr

08018c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8018c7c:	b480      	push	{r7}
 8018c7e:	b085      	sub	sp, #20
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	60f8      	str	r0, [r7, #12]
 8018c84:	60b9      	str	r1, [r7, #8]
 8018c86:	607a      	str	r2, [r7, #4]
	return 0;
 8018c88:	2300      	movs	r3, #0
}
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	3714      	adds	r7, #20
 8018c8e:	46bd      	mov	sp, r7
 8018c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c94:	4770      	bx	lr
	...

08018c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8018c98:	b480      	push	{r7}
 8018c9a:	b087      	sub	sp, #28
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8018ca0:	4a14      	ldr	r2, [pc, #80]	; (8018cf4 <_sbrk+0x5c>)
 8018ca2:	4b15      	ldr	r3, [pc, #84]	; (8018cf8 <_sbrk+0x60>)
 8018ca4:	1ad3      	subs	r3, r2, r3
 8018ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8018cac:	4b13      	ldr	r3, [pc, #76]	; (8018cfc <_sbrk+0x64>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d102      	bne.n	8018cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018cb4:	4b11      	ldr	r3, [pc, #68]	; (8018cfc <_sbrk+0x64>)
 8018cb6:	4a12      	ldr	r2, [pc, #72]	; (8018d00 <_sbrk+0x68>)
 8018cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8018cba:	4b10      	ldr	r3, [pc, #64]	; (8018cfc <_sbrk+0x64>)
 8018cbc:	681a      	ldr	r2, [r3, #0]
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	4413      	add	r3, r2
 8018cc2:	693a      	ldr	r2, [r7, #16]
 8018cc4:	429a      	cmp	r2, r3
 8018cc6:	d205      	bcs.n	8018cd4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8018cc8:	4b0e      	ldr	r3, [pc, #56]	; (8018d04 <_sbrk+0x6c>)
 8018cca:	220c      	movs	r2, #12
 8018ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8018cce:	f04f 33ff 	mov.w	r3, #4294967295
 8018cd2:	e009      	b.n	8018ce8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8018cd4:	4b09      	ldr	r3, [pc, #36]	; (8018cfc <_sbrk+0x64>)
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8018cda:	4b08      	ldr	r3, [pc, #32]	; (8018cfc <_sbrk+0x64>)
 8018cdc:	681a      	ldr	r2, [r3, #0]
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	4413      	add	r3, r2
 8018ce2:	4a06      	ldr	r2, [pc, #24]	; (8018cfc <_sbrk+0x64>)
 8018ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8018ce6:	68fb      	ldr	r3, [r7, #12]
}
 8018ce8:	4618      	mov	r0, r3
 8018cea:	371c      	adds	r7, #28
 8018cec:	46bd      	mov	sp, r7
 8018cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf2:	4770      	bx	lr
 8018cf4:	20080000 	.word	0x20080000
 8018cf8:	00000400 	.word	0x00000400
 8018cfc:	2000bd7c 	.word	0x2000bd7c
 8018d00:	20016318 	.word	0x20016318
 8018d04:	20016310 	.word	0x20016310

08018d08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8018d08:	b480      	push	{r7}
 8018d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018d0c:	4b06      	ldr	r3, [pc, #24]	; (8018d28 <SystemInit+0x20>)
 8018d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018d12:	4a05      	ldr	r2, [pc, #20]	; (8018d28 <SystemInit+0x20>)
 8018d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018d1c:	bf00      	nop
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d24:	4770      	bx	lr
 8018d26:	bf00      	nop
 8018d28:	e000ed00 	.word	0xe000ed00

08018d2c <MX_UART7_Init>:
  /* USER CODE END UART5_Init 2 */

}
/* UART7 init function */
void MX_UART7_Init(void)
{
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8018d30:	4b16      	ldr	r3, [pc, #88]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d32:	4a17      	ldr	r2, [pc, #92]	; (8018d90 <MX_UART7_Init+0x64>)
 8018d34:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8018d36:	4b15      	ldr	r3, [pc, #84]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8018d3c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8018d3e:	4b13      	ldr	r3, [pc, #76]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d40:	2200      	movs	r2, #0
 8018d42:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8018d44:	4b11      	ldr	r3, [pc, #68]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d46:	2200      	movs	r2, #0
 8018d48:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8018d4a:	4b10      	ldr	r3, [pc, #64]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d4c:	2200      	movs	r2, #0
 8018d4e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8018d50:	4b0e      	ldr	r3, [pc, #56]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d52:	220c      	movs	r2, #12
 8018d54:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018d56:	4b0d      	ldr	r3, [pc, #52]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d58:	2200      	movs	r2, #0
 8018d5a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8018d5c:	4b0b      	ldr	r3, [pc, #44]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d5e:	2200      	movs	r2, #0
 8018d60:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018d62:	4b0a      	ldr	r3, [pc, #40]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d64:	2200      	movs	r2, #0
 8018d66:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018d68:	4b08      	ldr	r3, [pc, #32]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8018d6e:	4807      	ldr	r0, [pc, #28]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d70:	f006 fbc8 	bl	801f504 <HAL_UART_Init>
 8018d74:	4603      	mov	r3, r0
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d001      	beq.n	8018d7e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8018d7a:	f7ff f85f 	bl	8017e3c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018d7e:	2280      	movs	r2, #128	; 0x80
 8018d80:	4904      	ldr	r1, [pc, #16]	; (8018d94 <MX_UART7_Init+0x68>)
 8018d82:	4802      	ldr	r0, [pc, #8]	; (8018d8c <MX_UART7_Init+0x60>)
 8018d84:	f007 ff2a 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END UART7_Init 2 */

}
 8018d88:	bf00      	nop
 8018d8a:	bd80      	pop	{r7, pc}
 8018d8c:	2000dc00 	.word	0x2000dc00
 8018d90:	40007800 	.word	0x40007800
 8018d94:	2000d990 	.word	0x2000d990

08018d98 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8018d9c:	4b16      	ldr	r3, [pc, #88]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018d9e:	4a17      	ldr	r2, [pc, #92]	; (8018dfc <MX_USART1_UART_Init+0x64>)
 8018da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8018da2:	4b15      	ldr	r3, [pc, #84]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8018da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8018daa:	4b13      	ldr	r3, [pc, #76]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018dac:	2200      	movs	r2, #0
 8018dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018db0:	4b11      	ldr	r3, [pc, #68]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018db2:	2200      	movs	r2, #0
 8018db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8018db6:	4b10      	ldr	r3, [pc, #64]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018db8:	2200      	movs	r2, #0
 8018dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8018dbc:	4b0e      	ldr	r3, [pc, #56]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018dbe:	220c      	movs	r2, #12
 8018dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018dc2:	4b0d      	ldr	r3, [pc, #52]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8018dc8:	4b0b      	ldr	r3, [pc, #44]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018dca:	2200      	movs	r2, #0
 8018dcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018dce:	4b0a      	ldr	r3, [pc, #40]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018dd4:	4b08      	ldr	r3, [pc, #32]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8018dda:	4807      	ldr	r0, [pc, #28]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018ddc:	f006 fb92 	bl	801f504 <HAL_UART_Init>
 8018de0:	4603      	mov	r3, r0
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d001      	beq.n	8018dea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8018de6:	f7ff f829 	bl	8017e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018dea:	2280      	movs	r2, #128	; 0x80
 8018dec:	4904      	ldr	r1, [pc, #16]	; (8018e00 <MX_USART1_UART_Init+0x68>)
 8018dee:	4802      	ldr	r0, [pc, #8]	; (8018df8 <MX_USART1_UART_Init+0x60>)
 8018df0:	f007 fef4 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8018df4:	bf00      	nop
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	2000dcb8 	.word	0x2000dcb8
 8018dfc:	40011000 	.word	0x40011000
 8018e00:	2000d890 	.word	0x2000d890

08018e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b0b4      	sub	sp, #208	; 0xd0
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018e0c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018e10:	2200      	movs	r2, #0
 8018e12:	601a      	str	r2, [r3, #0]
 8018e14:	605a      	str	r2, [r3, #4]
 8018e16:	609a      	str	r2, [r3, #8]
 8018e18:	60da      	str	r2, [r3, #12]
 8018e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018e20:	2290      	movs	r2, #144	; 0x90
 8018e22:	2100      	movs	r1, #0
 8018e24:	4618      	mov	r0, r3
 8018e26:	f00d fd25 	bl	8026874 <memset>
  if(uartHandle->Instance==UART4)
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	4aa7      	ldr	r2, [pc, #668]	; (80190cc <HAL_UART_MspInit+0x2c8>)
 8018e30:	4293      	cmp	r3, r2
 8018e32:	d145      	bne.n	8018ec0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8018e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018e42:	4618      	mov	r0, r3
 8018e44:	f004 fdfe 	bl	801da44 <HAL_RCCEx_PeriphCLKConfig>
 8018e48:	4603      	mov	r3, r0
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d001      	beq.n	8018e52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8018e4e:	f7fe fff5 	bl	8017e3c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8018e52:	4b9f      	ldr	r3, [pc, #636]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e56:	4a9e      	ldr	r2, [pc, #632]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018e58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8018e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8018e5e:	4b9c      	ldr	r3, [pc, #624]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8018e68:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8018e6a:	4b99      	ldr	r3, [pc, #612]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e6e:	4a98      	ldr	r2, [pc, #608]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e74:	6313      	str	r3, [r2, #48]	; 0x30
 8018e76:	4b96      	ldr	r3, [pc, #600]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8018e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8018e82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8018e86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018e8a:	2302      	movs	r3, #2
 8018e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018e90:	2300      	movs	r3, #0
 8018e92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018e96:	2303      	movs	r3, #3
 8018e98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8018e9c:	2308      	movs	r3, #8
 8018e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018ea2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018ea6:	4619      	mov	r1, r3
 8018ea8:	488a      	ldr	r0, [pc, #552]	; (80190d4 <HAL_UART_MspInit+0x2d0>)
 8018eaa:	f003 f8cd 	bl	801c048 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8018eae:	2200      	movs	r2, #0
 8018eb0:	2105      	movs	r1, #5
 8018eb2:	2034      	movs	r0, #52	; 0x34
 8018eb4:	f001 fd9d 	bl	801a9f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8018eb8:	2034      	movs	r0, #52	; 0x34
 8018eba:	f001 fdb6 	bl	801aa2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018ebe:	e100      	b.n	80190c2 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	4a84      	ldr	r2, [pc, #528]	; (80190d8 <HAL_UART_MspInit+0x2d4>)
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	d167      	bne.n	8018f9a <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8018eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018eda:	4618      	mov	r0, r3
 8018edc:	f004 fdb2 	bl	801da44 <HAL_RCCEx_PeriphCLKConfig>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d001      	beq.n	8018eea <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8018ee6:	f7fe ffa9 	bl	8017e3c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8018eea:	4b79      	ldr	r3, [pc, #484]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018eee:	4a78      	ldr	r2, [pc, #480]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8018ef6:	4b76      	ldr	r3, [pc, #472]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018efe:	623b      	str	r3, [r7, #32]
 8018f00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018f02:	4b73      	ldr	r3, [pc, #460]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f06:	4a72      	ldr	r2, [pc, #456]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018f08:	f043 0308 	orr.w	r3, r3, #8
 8018f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8018f0e:	4b70      	ldr	r3, [pc, #448]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f12:	f003 0308 	and.w	r3, r3, #8
 8018f16:	61fb      	str	r3, [r7, #28]
 8018f18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018f1a:	4b6d      	ldr	r3, [pc, #436]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f1e:	4a6c      	ldr	r2, [pc, #432]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018f20:	f043 0302 	orr.w	r3, r3, #2
 8018f24:	6313      	str	r3, [r2, #48]	; 0x30
 8018f26:	4b6a      	ldr	r3, [pc, #424]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f2a:	f003 0302 	and.w	r3, r3, #2
 8018f2e:	61bb      	str	r3, [r7, #24]
 8018f30:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8018f32:	2304      	movs	r3, #4
 8018f34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f38:	2302      	movs	r3, #2
 8018f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f3e:	2300      	movs	r3, #0
 8018f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f44:	2303      	movs	r3, #3
 8018f46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8018f4a:	2308      	movs	r3, #8
 8018f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8018f50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018f54:	4619      	mov	r1, r3
 8018f56:	4861      	ldr	r0, [pc, #388]	; (80190dc <HAL_UART_MspInit+0x2d8>)
 8018f58:	f003 f876 	bl	801c048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8018f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f64:	2302      	movs	r3, #2
 8018f66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f70:	2303      	movs	r3, #3
 8018f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8018f76:	2307      	movs	r3, #7
 8018f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8018f7c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018f80:	4619      	mov	r1, r3
 8018f82:	4857      	ldr	r0, [pc, #348]	; (80190e0 <HAL_UART_MspInit+0x2dc>)
 8018f84:	f003 f860 	bl	801c048 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8018f88:	2200      	movs	r2, #0
 8018f8a:	2105      	movs	r1, #5
 8018f8c:	2035      	movs	r0, #53	; 0x35
 8018f8e:	f001 fd30 	bl	801a9f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8018f92:	2035      	movs	r0, #53	; 0x35
 8018f94:	f001 fd49 	bl	801aa2a <HAL_NVIC_EnableIRQ>
}
 8018f98:	e093      	b.n	80190c2 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	4a51      	ldr	r2, [pc, #324]	; (80190e4 <HAL_UART_MspInit+0x2e0>)
 8018fa0:	4293      	cmp	r3, r2
 8018fa2:	d145      	bne.n	8019030 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8018fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8018faa:	2300      	movs	r3, #0
 8018fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	f004 fd45 	bl	801da44 <HAL_RCCEx_PeriphCLKConfig>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d001      	beq.n	8018fc4 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8018fc0:	f7fe ff3c 	bl	8017e3c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8018fc4:	4b42      	ldr	r3, [pc, #264]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fc8:	4a41      	ldr	r2, [pc, #260]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8018fce:	6413      	str	r3, [r2, #64]	; 0x40
 8018fd0:	4b3f      	ldr	r3, [pc, #252]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8018fd8:	617b      	str	r3, [r7, #20]
 8018fda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8018fdc:	4b3c      	ldr	r3, [pc, #240]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fe0:	4a3b      	ldr	r2, [pc, #236]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018fe2:	f043 0320 	orr.w	r3, r3, #32
 8018fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8018fe8:	4b39      	ldr	r3, [pc, #228]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8018fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fec:	f003 0320 	and.w	r3, r3, #32
 8018ff0:	613b      	str	r3, [r7, #16]
 8018ff2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8018ff4:	23c0      	movs	r3, #192	; 0xc0
 8018ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ffa:	2302      	movs	r3, #2
 8018ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019000:	2300      	movs	r3, #0
 8019002:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019006:	2303      	movs	r3, #3
 8019008:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 801900c:	2308      	movs	r3, #8
 801900e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019012:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8019016:	4619      	mov	r1, r3
 8019018:	4833      	ldr	r0, [pc, #204]	; (80190e8 <HAL_UART_MspInit+0x2e4>)
 801901a:	f003 f815 	bl	801c048 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 801901e:	2200      	movs	r2, #0
 8019020:	2105      	movs	r1, #5
 8019022:	2052      	movs	r0, #82	; 0x52
 8019024:	f001 fce5 	bl	801a9f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8019028:	2052      	movs	r0, #82	; 0x52
 801902a:	f001 fcfe 	bl	801aa2a <HAL_NVIC_EnableIRQ>
}
 801902e:	e048      	b.n	80190c2 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	4a2d      	ldr	r2, [pc, #180]	; (80190ec <HAL_UART_MspInit+0x2e8>)
 8019036:	4293      	cmp	r3, r2
 8019038:	d143      	bne.n	80190c2 <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801903a:	2340      	movs	r3, #64	; 0x40
 801903c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801903e:	2300      	movs	r3, #0
 8019040:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8019042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019046:	4618      	mov	r0, r3
 8019048:	f004 fcfc 	bl	801da44 <HAL_RCCEx_PeriphCLKConfig>
 801904c:	4603      	mov	r3, r0
 801904e:	2b00      	cmp	r3, #0
 8019050:	d001      	beq.n	8019056 <HAL_UART_MspInit+0x252>
      Error_Handler();
 8019052:	f7fe fef3 	bl	8017e3c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8019056:	4b1e      	ldr	r3, [pc, #120]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8019058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801905a:	4a1d      	ldr	r2, [pc, #116]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 801905c:	f043 0310 	orr.w	r3, r3, #16
 8019060:	6453      	str	r3, [r2, #68]	; 0x44
 8019062:	4b1b      	ldr	r3, [pc, #108]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8019064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019066:	f003 0310 	and.w	r3, r3, #16
 801906a:	60fb      	str	r3, [r7, #12]
 801906c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801906e:	4b18      	ldr	r3, [pc, #96]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8019070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019072:	4a17      	ldr	r2, [pc, #92]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 8019074:	f043 0301 	orr.w	r3, r3, #1
 8019078:	6313      	str	r3, [r2, #48]	; 0x30
 801907a:	4b15      	ldr	r3, [pc, #84]	; (80190d0 <HAL_UART_MspInit+0x2cc>)
 801907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801907e:	f003 0301 	and.w	r3, r3, #1
 8019082:	60bb      	str	r3, [r7, #8]
 8019084:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8019086:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801908a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801908e:	2302      	movs	r3, #2
 8019090:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019094:	2300      	movs	r3, #0
 8019096:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801909a:	2303      	movs	r3, #3
 801909c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80190a0:	2307      	movs	r3, #7
 80190a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80190a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80190aa:	4619      	mov	r1, r3
 80190ac:	4810      	ldr	r0, [pc, #64]	; (80190f0 <HAL_UART_MspInit+0x2ec>)
 80190ae:	f002 ffcb 	bl	801c048 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80190b2:	2200      	movs	r2, #0
 80190b4:	2107      	movs	r1, #7
 80190b6:	2025      	movs	r0, #37	; 0x25
 80190b8:	f001 fc9b 	bl	801a9f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80190bc:	2025      	movs	r0, #37	; 0x25
 80190be:	f001 fcb4 	bl	801aa2a <HAL_NVIC_EnableIRQ>
}
 80190c2:	bf00      	nop
 80190c4:	37d0      	adds	r7, #208	; 0xd0
 80190c6:	46bd      	mov	sp, r7
 80190c8:	bd80      	pop	{r7, pc}
 80190ca:	bf00      	nop
 80190cc:	40004c00 	.word	0x40004c00
 80190d0:	40023800 	.word	0x40023800
 80190d4:	40021c00 	.word	0x40021c00
 80190d8:	40005000 	.word	0x40005000
 80190dc:	40020c00 	.word	0x40020c00
 80190e0:	40020400 	.word	0x40020400
 80190e4:	40007800 	.word	0x40007800
 80190e8:	40021400 	.word	0x40021400
 80190ec:	40011000 	.word	0x40011000
 80190f0:	40020000 	.word	0x40020000

080190f4 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 80190f4:	b580      	push	{r7, lr}
 80190f6:	b082      	sub	sp, #8
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80190fc:	4b17      	ldr	r3, [pc, #92]	; (801915c <UART4_Init+0x68>)
 80190fe:	4a18      	ldr	r2, [pc, #96]	; (8019160 <UART4_Init+0x6c>)
 8019100:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8019102:	4a16      	ldr	r2, [pc, #88]	; (801915c <UART4_Init+0x68>)
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8019108:	4b14      	ldr	r3, [pc, #80]	; (801915c <UART4_Init+0x68>)
 801910a:	2200      	movs	r2, #0
 801910c:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 801910e:	4b13      	ldr	r3, [pc, #76]	; (801915c <UART4_Init+0x68>)
 8019110:	2200      	movs	r2, #0
 8019112:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8019114:	4b11      	ldr	r3, [pc, #68]	; (801915c <UART4_Init+0x68>)
 8019116:	2200      	movs	r2, #0
 8019118:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 801911a:	4b10      	ldr	r3, [pc, #64]	; (801915c <UART4_Init+0x68>)
 801911c:	220c      	movs	r2, #12
 801911e:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8019120:	4b0e      	ldr	r3, [pc, #56]	; (801915c <UART4_Init+0x68>)
 8019122:	2200      	movs	r2, #0
 8019124:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8019126:	4b0d      	ldr	r3, [pc, #52]	; (801915c <UART4_Init+0x68>)
 8019128:	2200      	movs	r2, #0
 801912a:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801912c:	4b0b      	ldr	r3, [pc, #44]	; (801915c <UART4_Init+0x68>)
 801912e:	2200      	movs	r2, #0
 8019130:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8019132:	4b0a      	ldr	r3, [pc, #40]	; (801915c <UART4_Init+0x68>)
 8019134:	2200      	movs	r2, #0
 8019136:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8019138:	4808      	ldr	r0, [pc, #32]	; (801915c <UART4_Init+0x68>)
 801913a:	f006 f9e3 	bl	801f504 <HAL_UART_Init>
 801913e:	4603      	mov	r3, r0
 8019140:	2b00      	cmp	r3, #0
 8019142:	d001      	beq.n	8019148 <UART4_Init+0x54>
	{
		Error_Handler();
 8019144:	f7fe fe7a 	bl	8017e3c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019148:	2280      	movs	r2, #128	; 0x80
 801914a:	4906      	ldr	r1, [pc, #24]	; (8019164 <UART4_Init+0x70>)
 801914c:	4803      	ldr	r0, [pc, #12]	; (801915c <UART4_Init+0x68>)
 801914e:	f007 fd45 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 8019152:	bf00      	nop
 8019154:	3708      	adds	r7, #8
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
 801915a:	bf00      	nop
 801915c:	2000da90 	.word	0x2000da90
 8019160:	40004c00 	.word	0x40004c00
 8019164:	2000da10 	.word	0x2000da10

08019168 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b084      	sub	sp, #16
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
 8019170:	460b      	mov	r3, r1
 8019172:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	4a68      	ldr	r2, [pc, #416]	; (801931c <HAL_UARTEx_RxEventCallback+0x1b4>)
 801917a:	4293      	cmp	r3, r2
 801917c:	d129      	bne.n	80191d2 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801917e:	2280      	movs	r2, #128	; 0x80
 8019180:	4967      	ldr	r1, [pc, #412]	; (8019320 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8019182:	4868      	ldr	r0, [pc, #416]	; (8019324 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8019184:	f007 fd2a 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8019188:	2300      	movs	r3, #0
 801918a:	81fb      	strh	r3, [r7, #14]
 801918c:	e017      	b.n	80191be <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 801918e:	89fa      	ldrh	r2, [r7, #14]
 8019190:	4b65      	ldr	r3, [pc, #404]	; (8019328 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8019192:	881b      	ldrh	r3, [r3, #0]
 8019194:	1c59      	adds	r1, r3, #1
 8019196:	b288      	uxth	r0, r1
 8019198:	4963      	ldr	r1, [pc, #396]	; (8019328 <HAL_UARTEx_RxEventCallback+0x1c0>)
 801919a:	8008      	strh	r0, [r1, #0]
 801919c:	4619      	mov	r1, r3
 801919e:	4b60      	ldr	r3, [pc, #384]	; (8019320 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80191a0:	5c9a      	ldrb	r2, [r3, r2]
 80191a2:	4b61      	ldr	r3, [pc, #388]	; (8019328 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80191a4:	440b      	add	r3, r1
 80191a6:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 80191a8:	4b5f      	ldr	r3, [pc, #380]	; (8019328 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80191aa:	881b      	ldrh	r3, [r3, #0]
 80191ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80191b0:	d302      	bcc.n	80191b8 <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 80191b2:	4b5d      	ldr	r3, [pc, #372]	; (8019328 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80191b4:	2200      	movs	r2, #0
 80191b6:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 80191b8:	89fb      	ldrh	r3, [r7, #14]
 80191ba:	3301      	adds	r3, #1
 80191bc:	81fb      	strh	r3, [r7, #14]
 80191be:	89fa      	ldrh	r2, [r7, #14]
 80191c0:	887b      	ldrh	r3, [r7, #2]
 80191c2:	429a      	cmp	r2, r3
 80191c4:	d3e3      	bcc.n	801918e <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 80191c6:	f000 fc33 	bl	8019a30 <HAL_GetTick>
 80191ca:	4603      	mov	r3, r0
 80191cc:	4a57      	ldr	r2, [pc, #348]	; (801932c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80191ce:	6013      	str	r3, [r2, #0]
		{
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 80191d0:	e0a0      	b.n	8019314 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART5)
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	4a56      	ldr	r2, [pc, #344]	; (8019330 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80191d8:	4293      	cmp	r3, r2
 80191da:	d129      	bne.n	8019230 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80191dc:	2280      	movs	r2, #128	; 0x80
 80191de:	4955      	ldr	r1, [pc, #340]	; (8019334 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80191e0:	4855      	ldr	r0, [pc, #340]	; (8019338 <HAL_UARTEx_RxEventCallback+0x1d0>)
 80191e2:	f007 fcfb 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80191e6:	2300      	movs	r3, #0
 80191e8:	81bb      	strh	r3, [r7, #12]
 80191ea:	e01c      	b.n	8019226 <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 80191ec:	89ba      	ldrh	r2, [r7, #12]
 80191ee:	4b53      	ldr	r3, [pc, #332]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80191f0:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80191f4:	1c59      	adds	r1, r3, #1
 80191f6:	b288      	uxth	r0, r1
 80191f8:	4950      	ldr	r1, [pc, #320]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80191fa:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 80191fe:	4619      	mov	r1, r3
 8019200:	4b4c      	ldr	r3, [pc, #304]	; (8019334 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8019202:	5c9a      	ldrb	r2, [r3, r2]
 8019204:	4b4d      	ldr	r3, [pc, #308]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019206:	440b      	add	r3, r1
 8019208:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 801920c:	4b4b      	ldr	r3, [pc, #300]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 801920e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8019212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019216:	d303      	bcc.n	8019220 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8019218:	4b48      	ldr	r3, [pc, #288]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 801921a:	2200      	movs	r2, #0
 801921c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8019220:	89bb      	ldrh	r3, [r7, #12]
 8019222:	3301      	adds	r3, #1
 8019224:	81bb      	strh	r3, [r7, #12]
 8019226:	89ba      	ldrh	r2, [r7, #12]
 8019228:	887b      	ldrh	r3, [r7, #2]
 801922a:	429a      	cmp	r2, r3
 801922c:	d3de      	bcc.n	80191ec <HAL_UARTEx_RxEventCallback+0x84>
}
 801922e:	e071      	b.n	8019314 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART7)
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	4a42      	ldr	r2, [pc, #264]	; (8019340 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8019236:	4293      	cmp	r3, r2
 8019238:	d129      	bne.n	801928e <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801923a:	2280      	movs	r2, #128	; 0x80
 801923c:	4941      	ldr	r1, [pc, #260]	; (8019344 <HAL_UARTEx_RxEventCallback+0x1dc>)
 801923e:	4842      	ldr	r0, [pc, #264]	; (8019348 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8019240:	f007 fccc 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8019244:	2300      	movs	r3, #0
 8019246:	817b      	strh	r3, [r7, #10]
 8019248:	e01c      	b.n	8019284 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 801924a:	897a      	ldrh	r2, [r7, #10]
 801924c:	4b3b      	ldr	r3, [pc, #236]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 801924e:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8019252:	1c59      	adds	r1, r3, #1
 8019254:	b288      	uxth	r0, r1
 8019256:	4939      	ldr	r1, [pc, #228]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019258:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 801925c:	4619      	mov	r1, r3
 801925e:	4b39      	ldr	r3, [pc, #228]	; (8019344 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8019260:	5c9a      	ldrb	r2, [r3, r2]
 8019262:	4b36      	ldr	r3, [pc, #216]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019264:	440b      	add	r3, r1
 8019266:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 801926a:	4b34      	ldr	r3, [pc, #208]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 801926c:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8019270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019274:	d303      	bcc.n	801927e <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8019276:	4b31      	ldr	r3, [pc, #196]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8019278:	2200      	movs	r2, #0
 801927a:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 801927e:	897b      	ldrh	r3, [r7, #10]
 8019280:	3301      	adds	r3, #1
 8019282:	817b      	strh	r3, [r7, #10]
 8019284:	897a      	ldrh	r2, [r7, #10]
 8019286:	887b      	ldrh	r3, [r7, #2]
 8019288:	429a      	cmp	r2, r3
 801928a:	d3de      	bcc.n	801924a <HAL_UARTEx_RxEventCallback+0xe2>
}
 801928c:	e042      	b.n	8019314 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART4)
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	4a2e      	ldr	r2, [pc, #184]	; (801934c <HAL_UARTEx_RxEventCallback+0x1e4>)
 8019294:	4293      	cmp	r3, r2
 8019296:	d13d      	bne.n	8019314 <HAL_UARTEx_RxEventCallback+0x1ac>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019298:	2280      	movs	r2, #128	; 0x80
 801929a:	492d      	ldr	r1, [pc, #180]	; (8019350 <HAL_UARTEx_RxEventCallback+0x1e8>)
 801929c:	482d      	ldr	r0, [pc, #180]	; (8019354 <HAL_UARTEx_RxEventCallback+0x1ec>)
 801929e:	f007 fc9d 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80192a2:	2300      	movs	r3, #0
 80192a4:	813b      	strh	r3, [r7, #8]
 80192a6:	e01c      	b.n	80192e2 <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 80192a8:	893a      	ldrh	r2, [r7, #8]
 80192aa:	4b24      	ldr	r3, [pc, #144]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80192ac:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 80192b0:	1c59      	adds	r1, r3, #1
 80192b2:	b288      	uxth	r0, r1
 80192b4:	4921      	ldr	r1, [pc, #132]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80192b6:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 80192ba:	4619      	mov	r1, r3
 80192bc:	4b24      	ldr	r3, [pc, #144]	; (8019350 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80192be:	5c9a      	ldrb	r2, [r3, r2]
 80192c0:	4b1e      	ldr	r3, [pc, #120]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80192c2:	440b      	add	r3, r1
 80192c4:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 80192c8:	4b1c      	ldr	r3, [pc, #112]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80192ca:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 80192ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80192d2:	d303      	bcc.n	80192dc <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 80192d4:	4b19      	ldr	r3, [pc, #100]	; (801933c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80192d6:	2200      	movs	r2, #0
 80192d8:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 80192dc:	893b      	ldrh	r3, [r7, #8]
 80192de:	3301      	adds	r3, #1
 80192e0:	813b      	strh	r3, [r7, #8]
 80192e2:	893a      	ldrh	r2, [r7, #8]
 80192e4:	887b      	ldrh	r3, [r7, #2]
 80192e6:	429a      	cmp	r2, r3
 80192e8:	d3de      	bcc.n	80192a8 <HAL_UARTEx_RxEventCallback+0x140>
		if(HAL_Elaps_Ticks(UART4_Intr_Clk) > 50)
 80192ea:	4b1b      	ldr	r3, [pc, #108]	; (8019358 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	4618      	mov	r0, r3
 80192f0:	f7f7 f882 	bl	80103f8 <HAL_Elaps_Ticks>
 80192f4:	4603      	mov	r3, r0
 80192f6:	2b32      	cmp	r3, #50	; 0x32
 80192f8:	d907      	bls.n	801930a <HAL_UARTEx_RxEventCallback+0x1a2>
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
 80192fa:	4b17      	ldr	r3, [pc, #92]	; (8019358 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	4618      	mov	r0, r3
 8019300:	f7f7 f87a 	bl	80103f8 <HAL_Elaps_Ticks>
 8019304:	4603      	mov	r3, r0
 8019306:	4a15      	ldr	r2, [pc, #84]	; (801935c <HAL_UARTEx_RxEventCallback+0x1f4>)
 8019308:	6013      	str	r3, [r2, #0]
		UART4_Intr_Clk = HAL_GetTick();
 801930a:	f000 fb91 	bl	8019a30 <HAL_GetTick>
 801930e:	4603      	mov	r3, r0
 8019310:	4a11      	ldr	r2, [pc, #68]	; (8019358 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8019312:	6013      	str	r3, [r2, #0]
}
 8019314:	bf00      	nop
 8019316:	3710      	adds	r7, #16
 8019318:	46bd      	mov	sp, r7
 801931a:	bd80      	pop	{r7, pc}
 801931c:	40011000 	.word	0x40011000
 8019320:	2000d890 	.word	0x2000d890
 8019324:	2000dcb8 	.word	0x2000dcb8
 8019328:	2000d08c 	.word	0x2000d08c
 801932c:	2000c074 	.word	0x2000c074
 8019330:	40005000 	.word	0x40005000
 8019334:	2000d910 	.word	0x2000d910
 8019338:	2000db48 	.word	0x2000db48
 801933c:	2000c07c 	.word	0x2000c07c
 8019340:	40007800 	.word	0x40007800
 8019344:	2000d990 	.word	0x2000d990
 8019348:	2000dc00 	.word	0x2000dc00
 801934c:	40004c00 	.word	0x40004c00
 8019350:	2000da10 	.word	0x2000da10
 8019354:	2000da90 	.word	0x2000da90
 8019358:	2000c070 	.word	0x2000c070
 801935c:	2000c078 	.word	0x2000c078

08019360 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8019360:	b480      	push	{r7}
 8019362:	b085      	sub	sp, #20
 8019364:	af00      	add	r7, sp, #0
 8019366:	4603      	mov	r3, r0
 8019368:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 801936a:	2300      	movs	r3, #0
 801936c:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 801936e:	79fb      	ldrb	r3, [r7, #7]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d115      	bne.n	80193a0 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8019374:	79fa      	ldrb	r2, [r7, #7]
 8019376:	4918      	ldr	r1, [pc, #96]	; (80193d8 <Com_DataReady+0x78>)
 8019378:	4613      	mov	r3, r2
 801937a:	025b      	lsls	r3, r3, #9
 801937c:	4413      	add	r3, r2
 801937e:	009b      	lsls	r3, r3, #2
 8019380:	440b      	add	r3, r1
 8019382:	8819      	ldrh	r1, [r3, #0]
 8019384:	79fa      	ldrb	r2, [r7, #7]
 8019386:	4814      	ldr	r0, [pc, #80]	; (80193d8 <Com_DataReady+0x78>)
 8019388:	4613      	mov	r3, r2
 801938a:	025b      	lsls	r3, r3, #9
 801938c:	4413      	add	r3, r2
 801938e:	009b      	lsls	r3, r3, #2
 8019390:	4403      	add	r3, r0
 8019392:	3302      	adds	r3, #2
 8019394:	881b      	ldrh	r3, [r3, #0]
 8019396:	4299      	cmp	r1, r3
 8019398:	d017      	beq.n	80193ca <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 801939a:	2301      	movs	r3, #1
 801939c:	73fb      	strb	r3, [r7, #15]
 801939e:	e014      	b.n	80193ca <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 80193a0:	79fa      	ldrb	r2, [r7, #7]
 80193a2:	490e      	ldr	r1, [pc, #56]	; (80193dc <Com_DataReady+0x7c>)
 80193a4:	4613      	mov	r3, r2
 80193a6:	021b      	lsls	r3, r3, #8
 80193a8:	4413      	add	r3, r2
 80193aa:	009b      	lsls	r3, r3, #2
 80193ac:	440b      	add	r3, r1
 80193ae:	8819      	ldrh	r1, [r3, #0]
 80193b0:	79fa      	ldrb	r2, [r7, #7]
 80193b2:	480a      	ldr	r0, [pc, #40]	; (80193dc <Com_DataReady+0x7c>)
 80193b4:	4613      	mov	r3, r2
 80193b6:	021b      	lsls	r3, r3, #8
 80193b8:	4413      	add	r3, r2
 80193ba:	009b      	lsls	r3, r3, #2
 80193bc:	4403      	add	r3, r0
 80193be:	3302      	adds	r3, #2
 80193c0:	881b      	ldrh	r3, [r3, #0]
 80193c2:	4299      	cmp	r1, r3
 80193c4:	d001      	beq.n	80193ca <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 80193c6:	2301      	movs	r3, #1
 80193c8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 80193ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80193cc:	4618      	mov	r0, r3
 80193ce:	3714      	adds	r7, #20
 80193d0:	46bd      	mov	sp, r7
 80193d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d6:	4770      	bx	lr
 80193d8:	2000d08c 	.word	0x2000d08c
 80193dc:	2000c07c 	.word	0x2000c07c

080193e0 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 80193e0:	b4b0      	push	{r4, r5, r7}
 80193e2:	b085      	sub	sp, #20
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	4603      	mov	r3, r0
 80193e8:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 80193ea:	2300      	movs	r3, #0
 80193ec:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 80193ee:	79fb      	ldrb	r3, [r7, #7]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d135      	bne.n	8019460 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 80193f4:	79f9      	ldrb	r1, [r7, #7]
 80193f6:	79fa      	ldrb	r2, [r7, #7]
 80193f8:	4837      	ldr	r0, [pc, #220]	; (80194d8 <Com_Get_Byte+0xf8>)
 80193fa:	4613      	mov	r3, r2
 80193fc:	025b      	lsls	r3, r3, #9
 80193fe:	4413      	add	r3, r2
 8019400:	009b      	lsls	r3, r3, #2
 8019402:	4403      	add	r3, r0
 8019404:	3302      	adds	r3, #2
 8019406:	8818      	ldrh	r0, [r3, #0]
 8019408:	1c43      	adds	r3, r0, #1
 801940a:	b29d      	uxth	r5, r3
 801940c:	4c32      	ldr	r4, [pc, #200]	; (80194d8 <Com_Get_Byte+0xf8>)
 801940e:	4613      	mov	r3, r2
 8019410:	025b      	lsls	r3, r3, #9
 8019412:	4413      	add	r3, r2
 8019414:	009b      	lsls	r3, r3, #2
 8019416:	4423      	add	r3, r4
 8019418:	3302      	adds	r3, #2
 801941a:	462a      	mov	r2, r5
 801941c:	801a      	strh	r2, [r3, #0]
 801941e:	4a2e      	ldr	r2, [pc, #184]	; (80194d8 <Com_Get_Byte+0xf8>)
 8019420:	460b      	mov	r3, r1
 8019422:	025b      	lsls	r3, r3, #9
 8019424:	440b      	add	r3, r1
 8019426:	009b      	lsls	r3, r3, #2
 8019428:	4413      	add	r3, r2
 801942a:	4403      	add	r3, r0
 801942c:	3304      	adds	r3, #4
 801942e:	781b      	ldrb	r3, [r3, #0]
 8019430:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8019432:	79fa      	ldrb	r2, [r7, #7]
 8019434:	4928      	ldr	r1, [pc, #160]	; (80194d8 <Com_Get_Byte+0xf8>)
 8019436:	4613      	mov	r3, r2
 8019438:	025b      	lsls	r3, r3, #9
 801943a:	4413      	add	r3, r2
 801943c:	009b      	lsls	r3, r3, #2
 801943e:	440b      	add	r3, r1
 8019440:	3302      	adds	r3, #2
 8019442:	881b      	ldrh	r3, [r3, #0]
 8019444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019448:	d33f      	bcc.n	80194ca <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 801944a:	79fa      	ldrb	r2, [r7, #7]
 801944c:	4922      	ldr	r1, [pc, #136]	; (80194d8 <Com_Get_Byte+0xf8>)
 801944e:	4613      	mov	r3, r2
 8019450:	025b      	lsls	r3, r3, #9
 8019452:	4413      	add	r3, r2
 8019454:	009b      	lsls	r3, r3, #2
 8019456:	440b      	add	r3, r1
 8019458:	3302      	adds	r3, #2
 801945a:	2200      	movs	r2, #0
 801945c:	801a      	strh	r2, [r3, #0]
 801945e:	e034      	b.n	80194ca <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8019460:	79f9      	ldrb	r1, [r7, #7]
 8019462:	79fa      	ldrb	r2, [r7, #7]
 8019464:	481d      	ldr	r0, [pc, #116]	; (80194dc <Com_Get_Byte+0xfc>)
 8019466:	4613      	mov	r3, r2
 8019468:	021b      	lsls	r3, r3, #8
 801946a:	4413      	add	r3, r2
 801946c:	009b      	lsls	r3, r3, #2
 801946e:	4403      	add	r3, r0
 8019470:	3302      	adds	r3, #2
 8019472:	8818      	ldrh	r0, [r3, #0]
 8019474:	1c43      	adds	r3, r0, #1
 8019476:	b29d      	uxth	r5, r3
 8019478:	4c18      	ldr	r4, [pc, #96]	; (80194dc <Com_Get_Byte+0xfc>)
 801947a:	4613      	mov	r3, r2
 801947c:	021b      	lsls	r3, r3, #8
 801947e:	4413      	add	r3, r2
 8019480:	009b      	lsls	r3, r3, #2
 8019482:	4423      	add	r3, r4
 8019484:	3302      	adds	r3, #2
 8019486:	462a      	mov	r2, r5
 8019488:	801a      	strh	r2, [r3, #0]
 801948a:	4a14      	ldr	r2, [pc, #80]	; (80194dc <Com_Get_Byte+0xfc>)
 801948c:	460b      	mov	r3, r1
 801948e:	021b      	lsls	r3, r3, #8
 8019490:	440b      	add	r3, r1
 8019492:	009b      	lsls	r3, r3, #2
 8019494:	4413      	add	r3, r2
 8019496:	4403      	add	r3, r0
 8019498:	3304      	adds	r3, #4
 801949a:	781b      	ldrb	r3, [r3, #0]
 801949c:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 801949e:	79fa      	ldrb	r2, [r7, #7]
 80194a0:	490e      	ldr	r1, [pc, #56]	; (80194dc <Com_Get_Byte+0xfc>)
 80194a2:	4613      	mov	r3, r2
 80194a4:	021b      	lsls	r3, r3, #8
 80194a6:	4413      	add	r3, r2
 80194a8:	009b      	lsls	r3, r3, #2
 80194aa:	440b      	add	r3, r1
 80194ac:	3302      	adds	r3, #2
 80194ae:	881b      	ldrh	r3, [r3, #0]
 80194b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80194b4:	d309      	bcc.n	80194ca <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 80194b6:	79fa      	ldrb	r2, [r7, #7]
 80194b8:	4908      	ldr	r1, [pc, #32]	; (80194dc <Com_Get_Byte+0xfc>)
 80194ba:	4613      	mov	r3, r2
 80194bc:	021b      	lsls	r3, r3, #8
 80194be:	4413      	add	r3, r2
 80194c0:	009b      	lsls	r3, r3, #2
 80194c2:	440b      	add	r3, r1
 80194c4:	3302      	adds	r3, #2
 80194c6:	2200      	movs	r2, #0
 80194c8:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 80194ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80194cc:	4618      	mov	r0, r3
 80194ce:	3714      	adds	r7, #20
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bcb0      	pop	{r4, r5, r7}
 80194d4:	4770      	bx	lr
 80194d6:	bf00      	nop
 80194d8:	2000d08c 	.word	0x2000d08c
 80194dc:	2000c07c 	.word	0x2000c07c

080194e0 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	b084      	sub	sp, #16
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	4603      	mov	r3, r0
 80194e8:	6039      	str	r1, [r7, #0]
 80194ea:	71fb      	strb	r3, [r7, #7]
 80194ec:	4613      	mov	r3, r2
 80194ee:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 80194f0:	2300      	movs	r3, #0
 80194f2:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 80194f4:	2300      	movs	r3, #0
 80194f6:	81fb      	strh	r3, [r7, #14]
 80194f8:	e03a      	b.n	8019570 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 80194fa:	89fb      	ldrh	r3, [r7, #14]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d00a      	beq.n	8019516 <CommTransmitMessage+0x36>
 8019500:	89fb      	ldrh	r3, [r7, #14]
 8019502:	683a      	ldr	r2, [r7, #0]
 8019504:	4413      	add	r3, r2
 8019506:	781b      	ldrb	r3, [r3, #0]
 8019508:	2b24      	cmp	r3, #36	; 0x24
 801950a:	d104      	bne.n	8019516 <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 801950c:	79fb      	ldrb	r3, [r7, #7]
 801950e:	2105      	movs	r1, #5
 8019510:	4618      	mov	r0, r3
 8019512:	f000 f835 	bl	8019580 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8019516:	89fb      	ldrh	r3, [r7, #14]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d00e      	beq.n	801953a <CommTransmitMessage+0x5a>
 801951c:	89fa      	ldrh	r2, [r7, #14]
 801951e:	88bb      	ldrh	r3, [r7, #4]
 8019520:	429a      	cmp	r2, r3
 8019522:	d20a      	bcs.n	801953a <CommTransmitMessage+0x5a>
 8019524:	89fb      	ldrh	r3, [r7, #14]
 8019526:	683a      	ldr	r2, [r7, #0]
 8019528:	4413      	add	r3, r2
 801952a:	781b      	ldrb	r3, [r3, #0]
 801952c:	2b05      	cmp	r3, #5
 801952e:	d104      	bne.n	801953a <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8019530:	79fb      	ldrb	r3, [r7, #7]
 8019532:	2105      	movs	r1, #5
 8019534:	4618      	mov	r0, r3
 8019536:	f000 f823 	bl	8019580 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 801953a:	89fb      	ldrh	r3, [r7, #14]
 801953c:	683a      	ldr	r2, [r7, #0]
 801953e:	4413      	add	r3, r2
 8019540:	781b      	ldrb	r3, [r3, #0]
 8019542:	2b26      	cmp	r3, #38	; 0x26
 8019544:	d108      	bne.n	8019558 <CommTransmitMessage+0x78>
 8019546:	89fa      	ldrh	r2, [r7, #14]
 8019548:	88bb      	ldrh	r3, [r7, #4]
 801954a:	429a      	cmp	r2, r3
 801954c:	d004      	beq.n	8019558 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 801954e:	79fb      	ldrb	r3, [r7, #7]
 8019550:	2105      	movs	r1, #5
 8019552:	4618      	mov	r0, r3
 8019554:	f000 f814 	bl	8019580 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8019558:	89fb      	ldrh	r3, [r7, #14]
 801955a:	683a      	ldr	r2, [r7, #0]
 801955c:	4413      	add	r3, r2
 801955e:	781a      	ldrb	r2, [r3, #0]
 8019560:	79fb      	ldrb	r3, [r7, #7]
 8019562:	4611      	mov	r1, r2
 8019564:	4618      	mov	r0, r3
 8019566:	f000 f80b 	bl	8019580 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 801956a:	89fb      	ldrh	r3, [r7, #14]
 801956c:	3301      	adds	r3, #1
 801956e:	81fb      	strh	r3, [r7, #14]
 8019570:	89fa      	ldrh	r2, [r7, #14]
 8019572:	88bb      	ldrh	r3, [r7, #4]
 8019574:	429a      	cmp	r2, r3
 8019576:	d9c0      	bls.n	80194fa <CommTransmitMessage+0x1a>
	}

	return;
 8019578:	bf00      	nop
}
 801957a:	3710      	adds	r7, #16
 801957c:	46bd      	mov	sp, r7
 801957e:	bd80      	pop	{r7, pc}

08019580 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b084      	sub	sp, #16
 8019584:	af00      	add	r7, sp, #0
 8019586:	4603      	mov	r3, r0
 8019588:	460a      	mov	r2, r1
 801958a:	71fb      	strb	r3, [r7, #7]
 801958c:	4613      	mov	r3, r2
 801958e:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8019590:	1dbb      	adds	r3, r7, #6
 8019592:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 8019594:	79fb      	ldrb	r3, [r7, #7]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d107      	bne.n	80195aa <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 801959a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801959e:	2201      	movs	r2, #1
 80195a0:	68f9      	ldr	r1, [r7, #12]
 80195a2:	4816      	ldr	r0, [pc, #88]	; (80195fc <Com_SendByte+0x7c>)
 80195a4:	f006 f80c 	bl	801f5c0 <HAL_UART_Transmit>
 80195a8:	e01f      	b.n	80195ea <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 80195aa:	79fb      	ldrb	r3, [r7, #7]
 80195ac:	2b01      	cmp	r3, #1
 80195ae:	d107      	bne.n	80195c0 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 80195b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195b4:	2201      	movs	r2, #1
 80195b6:	68f9      	ldr	r1, [r7, #12]
 80195b8:	4811      	ldr	r0, [pc, #68]	; (8019600 <Com_SendByte+0x80>)
 80195ba:	f006 f801 	bl	801f5c0 <HAL_UART_Transmit>
 80195be:	e014      	b.n	80195ea <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 80195c0:	79fb      	ldrb	r3, [r7, #7]
 80195c2:	2b02      	cmp	r3, #2
 80195c4:	d107      	bne.n	80195d6 <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 80195c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195ca:	2201      	movs	r2, #1
 80195cc:	68f9      	ldr	r1, [r7, #12]
 80195ce:	480d      	ldr	r0, [pc, #52]	; (8019604 <Com_SendByte+0x84>)
 80195d0:	f005 fff6 	bl	801f5c0 <HAL_UART_Transmit>
 80195d4:	e009      	b.n	80195ea <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 80195d6:	79fb      	ldrb	r3, [r7, #7]
 80195d8:	2b03      	cmp	r3, #3
 80195da:	d106      	bne.n	80195ea <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 80195dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195e0:	2201      	movs	r2, #1
 80195e2:	68f9      	ldr	r1, [r7, #12]
 80195e4:	4808      	ldr	r0, [pc, #32]	; (8019608 <Com_SendByte+0x88>)
 80195e6:	f005 ffeb 	bl	801f5c0 <HAL_UART_Transmit>
	}

	ptr=NULL;
 80195ea:	2300      	movs	r3, #0
 80195ec:	60fb      	str	r3, [r7, #12]
	free(ptr);
 80195ee:	68f8      	ldr	r0, [r7, #12]
 80195f0:	f00d f900 	bl	80267f4 <free>
}
 80195f4:	bf00      	nop
 80195f6:	3710      	adds	r7, #16
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}
 80195fc:	2000dcb8 	.word	0x2000dcb8
 8019600:	2000db48 	.word	0x2000db48
 8019604:	2000dc00 	.word	0x2000dc00
 8019608:	2000da90 	.word	0x2000da90

0801960c <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 801960c:	b580      	push	{r7, lr}
 801960e:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019610:	2280      	movs	r2, #128	; 0x80
 8019612:	490a      	ldr	r1, [pc, #40]	; (801963c <Enable_UART_Interrupts+0x30>)
 8019614:	480a      	ldr	r0, [pc, #40]	; (8019640 <Enable_UART_Interrupts+0x34>)
 8019616:	f007 fae1 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801961a:	2280      	movs	r2, #128	; 0x80
 801961c:	4909      	ldr	r1, [pc, #36]	; (8019644 <Enable_UART_Interrupts+0x38>)
 801961e:	480a      	ldr	r0, [pc, #40]	; (8019648 <Enable_UART_Interrupts+0x3c>)
 8019620:	f007 fadc 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8019624:	2280      	movs	r2, #128	; 0x80
 8019626:	4909      	ldr	r1, [pc, #36]	; (801964c <Enable_UART_Interrupts+0x40>)
 8019628:	4809      	ldr	r0, [pc, #36]	; (8019650 <Enable_UART_Interrupts+0x44>)
 801962a:	f007 fad7 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801962e:	2280      	movs	r2, #128	; 0x80
 8019630:	4908      	ldr	r1, [pc, #32]	; (8019654 <Enable_UART_Interrupts+0x48>)
 8019632:	4809      	ldr	r0, [pc, #36]	; (8019658 <Enable_UART_Interrupts+0x4c>)
 8019634:	f007 fad2 	bl	8020bdc <HAL_UARTEx_ReceiveToIdle_IT>
}
 8019638:	bf00      	nop
 801963a:	bd80      	pop	{r7, pc}
 801963c:	2000d890 	.word	0x2000d890
 8019640:	2000dcb8 	.word	0x2000dcb8
 8019644:	2000d910 	.word	0x2000d910
 8019648:	2000db48 	.word	0x2000db48
 801964c:	2000d990 	.word	0x2000d990
 8019650:	2000dc00 	.word	0x2000dc00
 8019654:	2000da10 	.word	0x2000da10
 8019658:	2000da90 	.word	0x2000da90

0801965c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801965c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019694 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8019660:	480d      	ldr	r0, [pc, #52]	; (8019698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8019662:	490e      	ldr	r1, [pc, #56]	; (801969c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019664:	4a0e      	ldr	r2, [pc, #56]	; (80196a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019668:	e002      	b.n	8019670 <LoopCopyDataInit>

0801966a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801966a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801966c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801966e:	3304      	adds	r3, #4

08019670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8019672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019674:	d3f9      	bcc.n	801966a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019676:	4a0b      	ldr	r2, [pc, #44]	; (80196a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019678:	4c0b      	ldr	r4, [pc, #44]	; (80196a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 801967a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801967c:	e001      	b.n	8019682 <LoopFillZerobss>

0801967e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801967e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019680:	3204      	adds	r2, #4

08019682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8019682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019684:	d3fb      	bcc.n	801967e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019686:	f7ff fb3f 	bl	8018d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801968a:	f00d f887 	bl	802679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801968e:	f7fe f9e9 	bl	8017a64 <main>
  bx  lr    
 8019692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8019694:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8019698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801969c:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 80196a0:	0802df54 	.word	0x0802df54
  ldr r2, =_sbss
 80196a4:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 80196a8:	20016318 	.word	0x20016318

080196ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80196ac:	e7fe      	b.n	80196ac <ADC_IRQHandler>

080196ae <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80196ae:	b480      	push	{r7}
 80196b0:	b083      	sub	sp, #12
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	6078      	str	r0, [r7, #4]
 80196b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d00b      	beq.n	80196d6 <DP83848_RegisterBusIO+0x28>
 80196be:	683b      	ldr	r3, [r7, #0]
 80196c0:	68db      	ldr	r3, [r3, #12]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d007      	beq.n	80196d6 <DP83848_RegisterBusIO+0x28>
 80196c6:	683b      	ldr	r3, [r7, #0]
 80196c8:	689b      	ldr	r3, [r3, #8]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d003      	beq.n	80196d6 <DP83848_RegisterBusIO+0x28>
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	691b      	ldr	r3, [r3, #16]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d102      	bne.n	80196dc <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80196d6:	f04f 33ff 	mov.w	r3, #4294967295
 80196da:	e014      	b.n	8019706 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80196dc:	683b      	ldr	r3, [r7, #0]
 80196de:	681a      	ldr	r2, [r3, #0]
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80196e4:	683b      	ldr	r3, [r7, #0]
 80196e6:	685a      	ldr	r2, [r3, #4]
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80196ec:	683b      	ldr	r3, [r7, #0]
 80196ee:	68da      	ldr	r2, [r3, #12]
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80196f4:	683b      	ldr	r3, [r7, #0]
 80196f6:	689a      	ldr	r2, [r3, #8]
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80196fc:	683b      	ldr	r3, [r7, #0]
 80196fe:	691a      	ldr	r2, [r3, #16]
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8019704:	2300      	movs	r3, #0
}
 8019706:	4618      	mov	r0, r3
 8019708:	370c      	adds	r7, #12
 801970a:	46bd      	mov	sp, r7
 801970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019710:	4770      	bx	lr

08019712 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8019712:	b580      	push	{r7, lr}
 8019714:	b086      	sub	sp, #24
 8019716:	af00      	add	r7, sp, #0
 8019718:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 801971a:	2300      	movs	r3, #0
 801971c:	60fb      	str	r3, [r7, #12]
 801971e:	2300      	movs	r3, #0
 8019720:	60bb      	str	r3, [r7, #8]
 8019722:	2300      	movs	r3, #0
 8019724:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8019726:	2300      	movs	r3, #0
 8019728:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	685b      	ldr	r3, [r3, #4]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d17c      	bne.n	801982c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	689b      	ldr	r3, [r3, #8]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d002      	beq.n	8019740 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	689b      	ldr	r3, [r3, #8]
 801973e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	2220      	movs	r2, #32
 8019744:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8019746:	2300      	movs	r3, #0
 8019748:	617b      	str	r3, [r7, #20]
 801974a:	e01c      	b.n	8019786 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	695b      	ldr	r3, [r3, #20]
 8019750:	f107 0208 	add.w	r2, r7, #8
 8019754:	2119      	movs	r1, #25
 8019756:	6978      	ldr	r0, [r7, #20]
 8019758:	4798      	blx	r3
 801975a:	4603      	mov	r3, r0
 801975c:	2b00      	cmp	r3, #0
 801975e:	da03      	bge.n	8019768 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8019760:	f06f 0304 	mvn.w	r3, #4
 8019764:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8019766:	e00b      	b.n	8019780 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8019768:	68bb      	ldr	r3, [r7, #8]
 801976a:	f003 031f 	and.w	r3, r3, #31
 801976e:	697a      	ldr	r2, [r7, #20]
 8019770:	429a      	cmp	r2, r3
 8019772:	d105      	bne.n	8019780 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	697a      	ldr	r2, [r7, #20]
 8019778:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 801977a:	2300      	movs	r3, #0
 801977c:	613b      	str	r3, [r7, #16]
         break;
 801977e:	e005      	b.n	801978c <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8019780:	697b      	ldr	r3, [r7, #20]
 8019782:	3301      	adds	r3, #1
 8019784:	617b      	str	r3, [r7, #20]
 8019786:	697b      	ldr	r3, [r7, #20]
 8019788:	2b1f      	cmp	r3, #31
 801978a:	d9df      	bls.n	801974c <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	2b1f      	cmp	r3, #31
 8019792:	d902      	bls.n	801979a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8019794:	f06f 0302 	mvn.w	r3, #2
 8019798:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 801979a:	693b      	ldr	r3, [r7, #16]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d145      	bne.n	801982c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	691b      	ldr	r3, [r3, #16]
 80197a4:	687a      	ldr	r2, [r7, #4]
 80197a6:	6810      	ldr	r0, [r2, #0]
 80197a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80197ac:	2100      	movs	r1, #0
 80197ae:	4798      	blx	r3
 80197b0:	4603      	mov	r3, r0
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	db37      	blt.n	8019826 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	695b      	ldr	r3, [r3, #20]
 80197ba:	687a      	ldr	r2, [r7, #4]
 80197bc:	6810      	ldr	r0, [r2, #0]
 80197be:	f107 0208 	add.w	r2, r7, #8
 80197c2:	2100      	movs	r1, #0
 80197c4:	4798      	blx	r3
 80197c6:	4603      	mov	r3, r0
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	db28      	blt.n	801981e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	699b      	ldr	r3, [r3, #24]
 80197d0:	4798      	blx	r3
 80197d2:	4603      	mov	r3, r0
 80197d4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80197d6:	e01c      	b.n	8019812 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	699b      	ldr	r3, [r3, #24]
 80197dc:	4798      	blx	r3
 80197de:	4603      	mov	r3, r0
 80197e0:	461a      	mov	r2, r3
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	1ad3      	subs	r3, r2, r3
 80197e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80197ea:	d80e      	bhi.n	801980a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	695b      	ldr	r3, [r3, #20]
 80197f0:	687a      	ldr	r2, [r7, #4]
 80197f2:	6810      	ldr	r0, [r2, #0]
 80197f4:	f107 0208 	add.w	r2, r7, #8
 80197f8:	2100      	movs	r1, #0
 80197fa:	4798      	blx	r3
 80197fc:	4603      	mov	r3, r0
 80197fe:	2b00      	cmp	r3, #0
 8019800:	da07      	bge.n	8019812 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8019802:	f06f 0304 	mvn.w	r3, #4
 8019806:	613b      	str	r3, [r7, #16]
                 break;
 8019808:	e010      	b.n	801982c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 801980a:	f06f 0301 	mvn.w	r3, #1
 801980e:	613b      	str	r3, [r7, #16]
               break;
 8019810:	e00c      	b.n	801982c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8019812:	68bb      	ldr	r3, [r7, #8]
 8019814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019818:	2b00      	cmp	r3, #0
 801981a:	d1dd      	bne.n	80197d8 <DP83848_Init+0xc6>
 801981c:	e006      	b.n	801982c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 801981e:	f06f 0304 	mvn.w	r3, #4
 8019822:	613b      	str	r3, [r7, #16]
 8019824:	e002      	b.n	801982c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8019826:	f06f 0303 	mvn.w	r3, #3
 801982a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 801982c:	693b      	ldr	r3, [r7, #16]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d112      	bne.n	8019858 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	699b      	ldr	r3, [r3, #24]
 8019836:	4798      	blx	r3
 8019838:	4603      	mov	r3, r0
 801983a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 801983c:	bf00      	nop
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	699b      	ldr	r3, [r3, #24]
 8019842:	4798      	blx	r3
 8019844:	4603      	mov	r3, r0
 8019846:	461a      	mov	r2, r3
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	1ad3      	subs	r3, r2, r3
 801984c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8019850:	d9f5      	bls.n	801983e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	2201      	movs	r2, #1
 8019856:	605a      	str	r2, [r3, #4]
   }

   return status;
 8019858:	693b      	ldr	r3, [r7, #16]
 }
 801985a:	4618      	mov	r0, r3
 801985c:	3718      	adds	r7, #24
 801985e:	46bd      	mov	sp, r7
 8019860:	bd80      	pop	{r7, pc}

08019862 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8019862:	b580      	push	{r7, lr}
 8019864:	b084      	sub	sp, #16
 8019866:	af00      	add	r7, sp, #0
 8019868:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 801986a:	2300      	movs	r3, #0
 801986c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	695b      	ldr	r3, [r3, #20]
 8019872:	687a      	ldr	r2, [r7, #4]
 8019874:	6810      	ldr	r0, [r2, #0]
 8019876:	f107 020c 	add.w	r2, r7, #12
 801987a:	2101      	movs	r1, #1
 801987c:	4798      	blx	r3
 801987e:	4603      	mov	r3, r0
 8019880:	2b00      	cmp	r3, #0
 8019882:	da02      	bge.n	801988a <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8019884:	f06f 0304 	mvn.w	r3, #4
 8019888:	e06e      	b.n	8019968 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	695b      	ldr	r3, [r3, #20]
 801988e:	687a      	ldr	r2, [r7, #4]
 8019890:	6810      	ldr	r0, [r2, #0]
 8019892:	f107 020c 	add.w	r2, r7, #12
 8019896:	2101      	movs	r1, #1
 8019898:	4798      	blx	r3
 801989a:	4603      	mov	r3, r0
 801989c:	2b00      	cmp	r3, #0
 801989e:	da02      	bge.n	80198a6 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80198a0:	f06f 0304 	mvn.w	r3, #4
 80198a4:	e060      	b.n	8019968 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	f003 0304 	and.w	r3, r3, #4
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d101      	bne.n	80198b4 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80198b0:	2301      	movs	r3, #1
 80198b2:	e059      	b.n	8019968 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	695b      	ldr	r3, [r3, #20]
 80198b8:	687a      	ldr	r2, [r7, #4]
 80198ba:	6810      	ldr	r0, [r2, #0]
 80198bc:	f107 020c 	add.w	r2, r7, #12
 80198c0:	2100      	movs	r1, #0
 80198c2:	4798      	blx	r3
 80198c4:	4603      	mov	r3, r0
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	da02      	bge.n	80198d0 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80198ca:	f06f 0304 	mvn.w	r3, #4
 80198ce:	e04b      	b.n	8019968 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d11b      	bne.n	8019912 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d006      	beq.n	80198f2 <DP83848_GetLinkState+0x90>
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d001      	beq.n	80198f2 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80198ee:	2302      	movs	r3, #2
 80198f0:	e03a      	b.n	8019968 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d001      	beq.n	8019900 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80198fc:	2303      	movs	r3, #3
 80198fe:	e033      	b.n	8019968 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019906:	2b00      	cmp	r3, #0
 8019908:	d001      	beq.n	801990e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801990a:	2304      	movs	r3, #4
 801990c:	e02c      	b.n	8019968 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 801990e:	2305      	movs	r3, #5
 8019910:	e02a      	b.n	8019968 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	695b      	ldr	r3, [r3, #20]
 8019916:	687a      	ldr	r2, [r7, #4]
 8019918:	6810      	ldr	r0, [r2, #0]
 801991a:	f107 020c 	add.w	r2, r7, #12
 801991e:	2110      	movs	r1, #16
 8019920:	4798      	blx	r3
 8019922:	4603      	mov	r3, r0
 8019924:	2b00      	cmp	r3, #0
 8019926:	da02      	bge.n	801992e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8019928:	f06f 0304 	mvn.w	r3, #4
 801992c:	e01c      	b.n	8019968 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019934:	2b00      	cmp	r3, #0
 8019936:	d101      	bne.n	801993c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8019938:	2306      	movs	r3, #6
 801993a:	e015      	b.n	8019968 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	f003 0306 	and.w	r3, r3, #6
 8019942:	2b04      	cmp	r3, #4
 8019944:	d101      	bne.n	801994a <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8019946:	2302      	movs	r3, #2
 8019948:	e00e      	b.n	8019968 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	f003 0306 	and.w	r3, r3, #6
 8019950:	2b00      	cmp	r3, #0
 8019952:	d101      	bne.n	8019958 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8019954:	2303      	movs	r3, #3
 8019956:	e007      	b.n	8019968 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	f003 0306 	and.w	r3, r3, #6
 801995e:	2b06      	cmp	r3, #6
 8019960:	d101      	bne.n	8019966 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8019962:	2304      	movs	r3, #4
 8019964:	e000      	b.n	8019968 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8019966:	2305      	movs	r3, #5
    }
  }
}
 8019968:	4618      	mov	r0, r3
 801996a:	3710      	adds	r7, #16
 801996c:	46bd      	mov	sp, r7
 801996e:	bd80      	pop	{r7, pc}

08019970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019970:	b580      	push	{r7, lr}
 8019972:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8019974:	4b0b      	ldr	r3, [pc, #44]	; (80199a4 <HAL_Init+0x34>)
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	4a0a      	ldr	r2, [pc, #40]	; (80199a4 <HAL_Init+0x34>)
 801997a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801997e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8019980:	4b08      	ldr	r3, [pc, #32]	; (80199a4 <HAL_Init+0x34>)
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	4a07      	ldr	r2, [pc, #28]	; (80199a4 <HAL_Init+0x34>)
 8019986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801998a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801998c:	2003      	movs	r0, #3
 801998e:	f001 f825 	bl	801a9dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8019992:	2007      	movs	r0, #7
 8019994:	f000 f808 	bl	80199a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8019998:	f7ff f80e 	bl	80189b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801999c:	2300      	movs	r3, #0
}
 801999e:	4618      	mov	r0, r3
 80199a0:	bd80      	pop	{r7, pc}
 80199a2:	bf00      	nop
 80199a4:	40023c00 	.word	0x40023c00

080199a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b082      	sub	sp, #8
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80199b0:	4b12      	ldr	r3, [pc, #72]	; (80199fc <HAL_InitTick+0x54>)
 80199b2:	681a      	ldr	r2, [r3, #0]
 80199b4:	4b12      	ldr	r3, [pc, #72]	; (8019a00 <HAL_InitTick+0x58>)
 80199b6:	781b      	ldrb	r3, [r3, #0]
 80199b8:	4619      	mov	r1, r3
 80199ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80199be:	fbb3 f3f1 	udiv	r3, r3, r1
 80199c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80199c6:	4618      	mov	r0, r3
 80199c8:	f001 f83d 	bl	801aa46 <HAL_SYSTICK_Config>
 80199cc:	4603      	mov	r3, r0
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d001      	beq.n	80199d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80199d2:	2301      	movs	r3, #1
 80199d4:	e00e      	b.n	80199f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	2b0f      	cmp	r3, #15
 80199da:	d80a      	bhi.n	80199f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80199dc:	2200      	movs	r2, #0
 80199de:	6879      	ldr	r1, [r7, #4]
 80199e0:	f04f 30ff 	mov.w	r0, #4294967295
 80199e4:	f001 f805 	bl	801a9f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80199e8:	4a06      	ldr	r2, [pc, #24]	; (8019a04 <HAL_InitTick+0x5c>)
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80199ee:	2300      	movs	r3, #0
 80199f0:	e000      	b.n	80199f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80199f2:	2301      	movs	r3, #1
}
 80199f4:	4618      	mov	r0, r3
 80199f6:	3708      	adds	r7, #8
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}
 80199fc:	2000031c 	.word	0x2000031c
 8019a00:	20000324 	.word	0x20000324
 8019a04:	20000320 	.word	0x20000320

08019a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019a08:	b480      	push	{r7}
 8019a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8019a0c:	4b06      	ldr	r3, [pc, #24]	; (8019a28 <HAL_IncTick+0x20>)
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	461a      	mov	r2, r3
 8019a12:	4b06      	ldr	r3, [pc, #24]	; (8019a2c <HAL_IncTick+0x24>)
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	4413      	add	r3, r2
 8019a18:	4a04      	ldr	r2, [pc, #16]	; (8019a2c <HAL_IncTick+0x24>)
 8019a1a:	6013      	str	r3, [r2, #0]
}
 8019a1c:	bf00      	nop
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a24:	4770      	bx	lr
 8019a26:	bf00      	nop
 8019a28:	20000324 	.word	0x20000324
 8019a2c:	2000dd70 	.word	0x2000dd70

08019a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019a30:	b480      	push	{r7}
 8019a32:	af00      	add	r7, sp, #0
  return uwTick;
 8019a34:	4b03      	ldr	r3, [pc, #12]	; (8019a44 <HAL_GetTick+0x14>)
 8019a36:	681b      	ldr	r3, [r3, #0]
}
 8019a38:	4618      	mov	r0, r3
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a40:	4770      	bx	lr
 8019a42:	bf00      	nop
 8019a44:	2000dd70 	.word	0x2000dd70

08019a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b084      	sub	sp, #16
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019a50:	f7ff ffee 	bl	8019a30 <HAL_GetTick>
 8019a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a60:	d005      	beq.n	8019a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8019a62:	4b0a      	ldr	r3, [pc, #40]	; (8019a8c <HAL_Delay+0x44>)
 8019a64:	781b      	ldrb	r3, [r3, #0]
 8019a66:	461a      	mov	r2, r3
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	4413      	add	r3, r2
 8019a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019a6e:	bf00      	nop
 8019a70:	f7ff ffde 	bl	8019a30 <HAL_GetTick>
 8019a74:	4602      	mov	r2, r0
 8019a76:	68bb      	ldr	r3, [r7, #8]
 8019a78:	1ad3      	subs	r3, r2, r3
 8019a7a:	68fa      	ldr	r2, [r7, #12]
 8019a7c:	429a      	cmp	r2, r3
 8019a7e:	d8f7      	bhi.n	8019a70 <HAL_Delay+0x28>
  {
  }
}
 8019a80:	bf00      	nop
 8019a82:	bf00      	nop
 8019a84:	3710      	adds	r7, #16
 8019a86:	46bd      	mov	sp, r7
 8019a88:	bd80      	pop	{r7, pc}
 8019a8a:	bf00      	nop
 8019a8c:	20000324 	.word	0x20000324

08019a90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b084      	sub	sp, #16
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d101      	bne.n	8019aa2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8019a9e:	2301      	movs	r3, #1
 8019aa0:	e11c      	b.n	8019cdc <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019aa8:	b2db      	uxtb	r3, r3
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d131      	bne.n	8019b12 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	4a8c      	ldr	r2, [pc, #560]	; (8019ce4 <HAL_CAN_Init+0x254>)
 8019ab2:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	4a8c      	ldr	r2, [pc, #560]	; (8019ce8 <HAL_CAN_Init+0x258>)
 8019ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	4a8b      	ldr	r2, [pc, #556]	; (8019cec <HAL_CAN_Init+0x25c>)
 8019abe:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	4a8b      	ldr	r2, [pc, #556]	; (8019cf0 <HAL_CAN_Init+0x260>)
 8019ac4:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	4a8a      	ldr	r2, [pc, #552]	; (8019cf4 <HAL_CAN_Init+0x264>)
 8019aca:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	4a8a      	ldr	r2, [pc, #552]	; (8019cf8 <HAL_CAN_Init+0x268>)
 8019ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	4a89      	ldr	r2, [pc, #548]	; (8019cfc <HAL_CAN_Init+0x26c>)
 8019ad6:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	4a89      	ldr	r2, [pc, #548]	; (8019d00 <HAL_CAN_Init+0x270>)
 8019adc:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	4a88      	ldr	r2, [pc, #544]	; (8019d04 <HAL_CAN_Init+0x274>)
 8019ae2:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	4a88      	ldr	r2, [pc, #544]	; (8019d08 <HAL_CAN_Init+0x278>)
 8019ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	4a87      	ldr	r2, [pc, #540]	; (8019d0c <HAL_CAN_Init+0x27c>)
 8019aee:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	4a87      	ldr	r2, [pc, #540]	; (8019d10 <HAL_CAN_Init+0x280>)
 8019af4:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	4a86      	ldr	r2, [pc, #536]	; (8019d14 <HAL_CAN_Init+0x284>)
 8019afa:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d102      	bne.n	8019b0a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	4a84      	ldr	r2, [pc, #528]	; (8019d18 <HAL_CAN_Init+0x288>)
 8019b08:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b0e:	6878      	ldr	r0, [r7, #4]
 8019b10:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	681a      	ldr	r2, [r3, #0]
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	f042 0201 	orr.w	r2, r2, #1
 8019b20:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019b22:	f7ff ff85 	bl	8019a30 <HAL_GetTick>
 8019b26:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8019b28:	e012      	b.n	8019b50 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8019b2a:	f7ff ff81 	bl	8019a30 <HAL_GetTick>
 8019b2e:	4602      	mov	r2, r0
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	1ad3      	subs	r3, r2, r3
 8019b34:	2b0a      	cmp	r3, #10
 8019b36:	d90b      	bls.n	8019b50 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	2205      	movs	r2, #5
 8019b48:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8019b4c:	2301      	movs	r3, #1
 8019b4e:	e0c5      	b.n	8019cdc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	685b      	ldr	r3, [r3, #4]
 8019b56:	f003 0301 	and.w	r3, r3, #1
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d0e5      	beq.n	8019b2a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	681a      	ldr	r2, [r3, #0]
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	f022 0202 	bic.w	r2, r2, #2
 8019b6c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019b6e:	f7ff ff5f 	bl	8019a30 <HAL_GetTick>
 8019b72:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8019b74:	e012      	b.n	8019b9c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8019b76:	f7ff ff5b 	bl	8019a30 <HAL_GetTick>
 8019b7a:	4602      	mov	r2, r0
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	1ad3      	subs	r3, r2, r3
 8019b80:	2b0a      	cmp	r3, #10
 8019b82:	d90b      	bls.n	8019b9c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b88:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	2205      	movs	r2, #5
 8019b94:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8019b98:	2301      	movs	r3, #1
 8019b9a:	e09f      	b.n	8019cdc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	685b      	ldr	r3, [r3, #4]
 8019ba2:	f003 0302 	and.w	r3, r3, #2
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d1e5      	bne.n	8019b76 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	7e1b      	ldrb	r3, [r3, #24]
 8019bae:	2b01      	cmp	r3, #1
 8019bb0:	d108      	bne.n	8019bc4 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	681a      	ldr	r2, [r3, #0]
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019bc0:	601a      	str	r2, [r3, #0]
 8019bc2:	e007      	b.n	8019bd4 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	681a      	ldr	r2, [r3, #0]
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	7e5b      	ldrb	r3, [r3, #25]
 8019bd8:	2b01      	cmp	r3, #1
 8019bda:	d108      	bne.n	8019bee <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	681a      	ldr	r2, [r3, #0]
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019bea:	601a      	str	r2, [r3, #0]
 8019bec:	e007      	b.n	8019bfe <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	681a      	ldr	r2, [r3, #0]
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	7e9b      	ldrb	r3, [r3, #26]
 8019c02:	2b01      	cmp	r3, #1
 8019c04:	d108      	bne.n	8019c18 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	681a      	ldr	r2, [r3, #0]
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	f042 0220 	orr.w	r2, r2, #32
 8019c14:	601a      	str	r2, [r3, #0]
 8019c16:	e007      	b.n	8019c28 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	681a      	ldr	r2, [r3, #0]
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	f022 0220 	bic.w	r2, r2, #32
 8019c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	7edb      	ldrb	r3, [r3, #27]
 8019c2c:	2b01      	cmp	r3, #1
 8019c2e:	d108      	bne.n	8019c42 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	681a      	ldr	r2, [r3, #0]
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	f022 0210 	bic.w	r2, r2, #16
 8019c3e:	601a      	str	r2, [r3, #0]
 8019c40:	e007      	b.n	8019c52 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	681a      	ldr	r2, [r3, #0]
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	f042 0210 	orr.w	r2, r2, #16
 8019c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	7f1b      	ldrb	r3, [r3, #28]
 8019c56:	2b01      	cmp	r3, #1
 8019c58:	d108      	bne.n	8019c6c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	681a      	ldr	r2, [r3, #0]
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	f042 0208 	orr.w	r2, r2, #8
 8019c68:	601a      	str	r2, [r3, #0]
 8019c6a:	e007      	b.n	8019c7c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	681a      	ldr	r2, [r3, #0]
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	f022 0208 	bic.w	r2, r2, #8
 8019c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	7f5b      	ldrb	r3, [r3, #29]
 8019c80:	2b01      	cmp	r3, #1
 8019c82:	d108      	bne.n	8019c96 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	681a      	ldr	r2, [r3, #0]
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	f042 0204 	orr.w	r2, r2, #4
 8019c92:	601a      	str	r2, [r3, #0]
 8019c94:	e007      	b.n	8019ca6 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	681a      	ldr	r2, [r3, #0]
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	f022 0204 	bic.w	r2, r2, #4
 8019ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	689a      	ldr	r2, [r3, #8]
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	68db      	ldr	r3, [r3, #12]
 8019cae:	431a      	orrs	r2, r3
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	691b      	ldr	r3, [r3, #16]
 8019cb4:	431a      	orrs	r2, r3
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	695b      	ldr	r3, [r3, #20]
 8019cba:	ea42 0103 	orr.w	r1, r2, r3
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	1e5a      	subs	r2, r3, #1
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	430a      	orrs	r2, r1
 8019cca:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2200      	movs	r2, #0
 8019cd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	2201      	movs	r2, #1
 8019cd6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8019cda:	2300      	movs	r3, #0
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3710      	adds	r7, #16
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}
 8019ce4:	0801181d 	.word	0x0801181d
 8019ce8:	0801a7d7 	.word	0x0801a7d7
 8019cec:	08011939 	.word	0x08011939
 8019cf0:	0801a7eb 	.word	0x0801a7eb
 8019cf4:	0801a75f 	.word	0x0801a75f
 8019cf8:	0801a773 	.word	0x0801a773
 8019cfc:	0801a787 	.word	0x0801a787
 8019d00:	0801a79b 	.word	0x0801a79b
 8019d04:	0801a7af 	.word	0x0801a7af
 8019d08:	0801a7c3 	.word	0x0801a7c3
 8019d0c:	0801a7ff 	.word	0x0801a7ff
 8019d10:	0801a813 	.word	0x0801a813
 8019d14:	0801a827 	.word	0x0801a827
 8019d18:	08010e1d 	.word	0x08010e1d

08019d1c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8019d1c:	b480      	push	{r7}
 8019d1e:	b087      	sub	sp, #28
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019d32:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8019d34:	7cfb      	ldrb	r3, [r7, #19]
 8019d36:	2b01      	cmp	r3, #1
 8019d38:	d003      	beq.n	8019d42 <HAL_CAN_ConfigFilter+0x26>
 8019d3a:	7cfb      	ldrb	r3, [r7, #19]
 8019d3c:	2b02      	cmp	r3, #2
 8019d3e:	f040 80c7 	bne.w	8019ed0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	4a69      	ldr	r2, [pc, #420]	; (8019eec <HAL_CAN_ConfigFilter+0x1d0>)
 8019d48:	4293      	cmp	r3, r2
 8019d4a:	d001      	beq.n	8019d50 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8019d4c:	4b68      	ldr	r3, [pc, #416]	; (8019ef0 <HAL_CAN_ConfigFilter+0x1d4>)
 8019d4e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8019d50:	697b      	ldr	r3, [r7, #20]
 8019d52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8019d56:	f043 0201 	orr.w	r2, r3, #1
 8019d5a:	697b      	ldr	r3, [r7, #20]
 8019d5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8019d60:	697b      	ldr	r3, [r7, #20]
 8019d62:	4a63      	ldr	r2, [pc, #396]	; (8019ef0 <HAL_CAN_ConfigFilter+0x1d4>)
 8019d64:	4293      	cmp	r3, r2
 8019d66:	d111      	bne.n	8019d8c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8019d68:	697b      	ldr	r3, [r7, #20]
 8019d6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8019d6e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8019d72:	697b      	ldr	r3, [r7, #20]
 8019d74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8019d78:	697b      	ldr	r3, [r7, #20]
 8019d7a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d82:	021b      	lsls	r3, r3, #8
 8019d84:	431a      	orrs	r2, r3
 8019d86:	697b      	ldr	r3, [r7, #20]
 8019d88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	695b      	ldr	r3, [r3, #20]
 8019d90:	f003 031f 	and.w	r3, r3, #31
 8019d94:	2201      	movs	r2, #1
 8019d96:	fa02 f303 	lsl.w	r3, r2, r3
 8019d9a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	43db      	mvns	r3, r3
 8019da6:	401a      	ands	r2, r3
 8019da8:	697b      	ldr	r3, [r7, #20]
 8019daa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	69db      	ldr	r3, [r3, #28]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d123      	bne.n	8019dfe <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8019db6:	697b      	ldr	r3, [r7, #20]
 8019db8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	43db      	mvns	r3, r3
 8019dc0:	401a      	ands	r2, r3
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	68db      	ldr	r3, [r3, #12]
 8019dcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8019dce:	683b      	ldr	r3, [r7, #0]
 8019dd0:	685b      	ldr	r3, [r3, #4]
 8019dd2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019dd4:	683a      	ldr	r2, [r7, #0]
 8019dd6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8019dd8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019dda:	697b      	ldr	r3, [r7, #20]
 8019ddc:	3248      	adds	r2, #72	; 0x48
 8019dde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019de2:	683b      	ldr	r3, [r7, #0]
 8019de4:	689b      	ldr	r3, [r3, #8]
 8019de6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019dee:	683b      	ldr	r3, [r7, #0]
 8019df0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019df2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019df4:	6979      	ldr	r1, [r7, #20]
 8019df6:	3348      	adds	r3, #72	; 0x48
 8019df8:	00db      	lsls	r3, r3, #3
 8019dfa:	440b      	add	r3, r1
 8019dfc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	69db      	ldr	r3, [r3, #28]
 8019e02:	2b01      	cmp	r3, #1
 8019e04:	d122      	bne.n	8019e4c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8019e06:	697b      	ldr	r3, [r7, #20]
 8019e08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	431a      	orrs	r2, r3
 8019e10:	697b      	ldr	r3, [r7, #20]
 8019e12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8019e16:	683b      	ldr	r3, [r7, #0]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8019e1c:	683b      	ldr	r3, [r7, #0]
 8019e1e:	685b      	ldr	r3, [r3, #4]
 8019e20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019e22:	683a      	ldr	r2, [r7, #0]
 8019e24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8019e26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019e28:	697b      	ldr	r3, [r7, #20]
 8019e2a:	3248      	adds	r2, #72	; 0x48
 8019e2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019e30:	683b      	ldr	r3, [r7, #0]
 8019e32:	689b      	ldr	r3, [r3, #8]
 8019e34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8019e36:	683b      	ldr	r3, [r7, #0]
 8019e38:	68db      	ldr	r3, [r3, #12]
 8019e3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019e3c:	683b      	ldr	r3, [r7, #0]
 8019e3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019e40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019e42:	6979      	ldr	r1, [r7, #20]
 8019e44:	3348      	adds	r3, #72	; 0x48
 8019e46:	00db      	lsls	r3, r3, #3
 8019e48:	440b      	add	r3, r1
 8019e4a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	699b      	ldr	r3, [r3, #24]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d109      	bne.n	8019e68 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8019e54:	697b      	ldr	r3, [r7, #20]
 8019e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	43db      	mvns	r3, r3
 8019e5e:	401a      	ands	r2, r3
 8019e60:	697b      	ldr	r3, [r7, #20]
 8019e62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8019e66:	e007      	b.n	8019e78 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8019e68:	697b      	ldr	r3, [r7, #20]
 8019e6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	431a      	orrs	r2, r3
 8019e72:	697b      	ldr	r3, [r7, #20]
 8019e74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8019e78:	683b      	ldr	r3, [r7, #0]
 8019e7a:	691b      	ldr	r3, [r3, #16]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d109      	bne.n	8019e94 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8019e80:	697b      	ldr	r3, [r7, #20]
 8019e82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	43db      	mvns	r3, r3
 8019e8a:	401a      	ands	r2, r3
 8019e8c:	697b      	ldr	r3, [r7, #20]
 8019e8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8019e92:	e007      	b.n	8019ea4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8019e94:	697b      	ldr	r3, [r7, #20]
 8019e96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	431a      	orrs	r2, r3
 8019e9e:	697b      	ldr	r3, [r7, #20]
 8019ea0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8019ea4:	683b      	ldr	r3, [r7, #0]
 8019ea6:	6a1b      	ldr	r3, [r3, #32]
 8019ea8:	2b01      	cmp	r3, #1
 8019eaa:	d107      	bne.n	8019ebc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8019eac:	697b      	ldr	r3, [r7, #20]
 8019eae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	431a      	orrs	r2, r3
 8019eb6:	697b      	ldr	r3, [r7, #20]
 8019eb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8019ebc:	697b      	ldr	r3, [r7, #20]
 8019ebe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8019ec2:	f023 0201 	bic.w	r2, r3, #1
 8019ec6:	697b      	ldr	r3, [r7, #20]
 8019ec8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8019ecc:	2300      	movs	r3, #0
 8019ece:	e006      	b.n	8019ede <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ed4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019edc:	2301      	movs	r3, #1
  }
}
 8019ede:	4618      	mov	r0, r3
 8019ee0:	371c      	adds	r7, #28
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ee8:	4770      	bx	lr
 8019eea:	bf00      	nop
 8019eec:	40003400 	.word	0x40003400
 8019ef0:	40006400 	.word	0x40006400

08019ef4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b084      	sub	sp, #16
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019f02:	b2db      	uxtb	r3, r3
 8019f04:	2b01      	cmp	r3, #1
 8019f06:	d12e      	bne.n	8019f66 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	2202      	movs	r2, #2
 8019f0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	681a      	ldr	r2, [r3, #0]
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	f022 0201 	bic.w	r2, r2, #1
 8019f1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019f20:	f7ff fd86 	bl	8019a30 <HAL_GetTick>
 8019f24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8019f26:	e012      	b.n	8019f4e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8019f28:	f7ff fd82 	bl	8019a30 <HAL_GetTick>
 8019f2c:	4602      	mov	r2, r0
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	1ad3      	subs	r3, r2, r3
 8019f32:	2b0a      	cmp	r3, #10
 8019f34:	d90b      	bls.n	8019f4e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	2205      	movs	r2, #5
 8019f46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	e012      	b.n	8019f74 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	f003 0301 	and.w	r3, r3, #1
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d1e5      	bne.n	8019f28 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	2200      	movs	r2, #0
 8019f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8019f62:	2300      	movs	r3, #0
 8019f64:	e006      	b.n	8019f74 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019f72:	2301      	movs	r3, #1
  }
}
 8019f74:	4618      	mov	r0, r3
 8019f76:	3710      	adds	r7, #16
 8019f78:	46bd      	mov	sp, r7
 8019f7a:	bd80      	pop	{r7, pc}

08019f7c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8019f7c:	b480      	push	{r7}
 8019f7e:	b089      	sub	sp, #36	; 0x24
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	60f8      	str	r0, [r7, #12]
 8019f84:	60b9      	str	r1, [r7, #8]
 8019f86:	607a      	str	r2, [r7, #4]
 8019f88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019f90:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	689b      	ldr	r3, [r3, #8]
 8019f98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8019f9a:	7ffb      	ldrb	r3, [r7, #31]
 8019f9c:	2b01      	cmp	r3, #1
 8019f9e:	d003      	beq.n	8019fa8 <HAL_CAN_AddTxMessage+0x2c>
 8019fa0:	7ffb      	ldrb	r3, [r7, #31]
 8019fa2:	2b02      	cmp	r3, #2
 8019fa4:	f040 80ad 	bne.w	801a102 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8019fa8:	69bb      	ldr	r3, [r7, #24]
 8019faa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d10a      	bne.n	8019fc8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8019fb2:	69bb      	ldr	r3, [r7, #24]
 8019fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d105      	bne.n	8019fc8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8019fbc:	69bb      	ldr	r3, [r7, #24]
 8019fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	f000 8095 	beq.w	801a0f2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8019fc8:	69bb      	ldr	r3, [r7, #24]
 8019fca:	0e1b      	lsrs	r3, r3, #24
 8019fcc:	f003 0303 	and.w	r3, r3, #3
 8019fd0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8019fd2:	2201      	movs	r2, #1
 8019fd4:	697b      	ldr	r3, [r7, #20]
 8019fd6:	409a      	lsls	r2, r3
 8019fd8:	683b      	ldr	r3, [r7, #0]
 8019fda:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	689b      	ldr	r3, [r3, #8]
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d10d      	bne.n	801a000 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8019fea:	68bb      	ldr	r3, [r7, #8]
 8019fec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8019fee:	68f9      	ldr	r1, [r7, #12]
 8019ff0:	6809      	ldr	r1, [r1, #0]
 8019ff2:	431a      	orrs	r2, r3
 8019ff4:	697b      	ldr	r3, [r7, #20]
 8019ff6:	3318      	adds	r3, #24
 8019ff8:	011b      	lsls	r3, r3, #4
 8019ffa:	440b      	add	r3, r1
 8019ffc:	601a      	str	r2, [r3, #0]
 8019ffe:	e00f      	b.n	801a020 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801a000:	68bb      	ldr	r3, [r7, #8]
 801a002:	685b      	ldr	r3, [r3, #4]
 801a004:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 801a006:	68bb      	ldr	r3, [r7, #8]
 801a008:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801a00a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 801a00c:	68bb      	ldr	r3, [r7, #8]
 801a00e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801a010:	68f9      	ldr	r1, [r7, #12]
 801a012:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 801a014:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801a016:	697b      	ldr	r3, [r7, #20]
 801a018:	3318      	adds	r3, #24
 801a01a:	011b      	lsls	r3, r3, #4
 801a01c:	440b      	add	r3, r1
 801a01e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	6819      	ldr	r1, [r3, #0]
 801a024:	68bb      	ldr	r3, [r7, #8]
 801a026:	691a      	ldr	r2, [r3, #16]
 801a028:	697b      	ldr	r3, [r7, #20]
 801a02a:	3318      	adds	r3, #24
 801a02c:	011b      	lsls	r3, r3, #4
 801a02e:	440b      	add	r3, r1
 801a030:	3304      	adds	r3, #4
 801a032:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	7d1b      	ldrb	r3, [r3, #20]
 801a038:	2b01      	cmp	r3, #1
 801a03a:	d111      	bne.n	801a060 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	681a      	ldr	r2, [r3, #0]
 801a040:	697b      	ldr	r3, [r7, #20]
 801a042:	3318      	adds	r3, #24
 801a044:	011b      	lsls	r3, r3, #4
 801a046:	4413      	add	r3, r2
 801a048:	3304      	adds	r3, #4
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	68fa      	ldr	r2, [r7, #12]
 801a04e:	6811      	ldr	r1, [r2, #0]
 801a050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a054:	697b      	ldr	r3, [r7, #20]
 801a056:	3318      	adds	r3, #24
 801a058:	011b      	lsls	r3, r3, #4
 801a05a:	440b      	add	r3, r1
 801a05c:	3304      	adds	r3, #4
 801a05e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	3307      	adds	r3, #7
 801a064:	781b      	ldrb	r3, [r3, #0]
 801a066:	061a      	lsls	r2, r3, #24
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	3306      	adds	r3, #6
 801a06c:	781b      	ldrb	r3, [r3, #0]
 801a06e:	041b      	lsls	r3, r3, #16
 801a070:	431a      	orrs	r2, r3
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	3305      	adds	r3, #5
 801a076:	781b      	ldrb	r3, [r3, #0]
 801a078:	021b      	lsls	r3, r3, #8
 801a07a:	4313      	orrs	r3, r2
 801a07c:	687a      	ldr	r2, [r7, #4]
 801a07e:	3204      	adds	r2, #4
 801a080:	7812      	ldrb	r2, [r2, #0]
 801a082:	4610      	mov	r0, r2
 801a084:	68fa      	ldr	r2, [r7, #12]
 801a086:	6811      	ldr	r1, [r2, #0]
 801a088:	ea43 0200 	orr.w	r2, r3, r0
 801a08c:	697b      	ldr	r3, [r7, #20]
 801a08e:	011b      	lsls	r3, r3, #4
 801a090:	440b      	add	r3, r1
 801a092:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801a096:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	3303      	adds	r3, #3
 801a09c:	781b      	ldrb	r3, [r3, #0]
 801a09e:	061a      	lsls	r2, r3, #24
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	3302      	adds	r3, #2
 801a0a4:	781b      	ldrb	r3, [r3, #0]
 801a0a6:	041b      	lsls	r3, r3, #16
 801a0a8:	431a      	orrs	r2, r3
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	3301      	adds	r3, #1
 801a0ae:	781b      	ldrb	r3, [r3, #0]
 801a0b0:	021b      	lsls	r3, r3, #8
 801a0b2:	4313      	orrs	r3, r2
 801a0b4:	687a      	ldr	r2, [r7, #4]
 801a0b6:	7812      	ldrb	r2, [r2, #0]
 801a0b8:	4610      	mov	r0, r2
 801a0ba:	68fa      	ldr	r2, [r7, #12]
 801a0bc:	6811      	ldr	r1, [r2, #0]
 801a0be:	ea43 0200 	orr.w	r2, r3, r0
 801a0c2:	697b      	ldr	r3, [r7, #20]
 801a0c4:	011b      	lsls	r3, r3, #4
 801a0c6:	440b      	add	r3, r1
 801a0c8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801a0cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	681a      	ldr	r2, [r3, #0]
 801a0d2:	697b      	ldr	r3, [r7, #20]
 801a0d4:	3318      	adds	r3, #24
 801a0d6:	011b      	lsls	r3, r3, #4
 801a0d8:	4413      	add	r3, r2
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	68fa      	ldr	r2, [r7, #12]
 801a0de:	6811      	ldr	r1, [r2, #0]
 801a0e0:	f043 0201 	orr.w	r2, r3, #1
 801a0e4:	697b      	ldr	r3, [r7, #20]
 801a0e6:	3318      	adds	r3, #24
 801a0e8:	011b      	lsls	r3, r3, #4
 801a0ea:	440b      	add	r3, r1
 801a0ec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	e00e      	b.n	801a110 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 801a0fe:	2301      	movs	r3, #1
 801a100:	e006      	b.n	801a110 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a106:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801a10e:	2301      	movs	r3, #1
  }
}
 801a110:	4618      	mov	r0, r3
 801a112:	3724      	adds	r7, #36	; 0x24
 801a114:	46bd      	mov	sp, r7
 801a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a11a:	4770      	bx	lr

0801a11c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 801a11c:	b480      	push	{r7}
 801a11e:	b085      	sub	sp, #20
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
 801a124:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 801a126:	2300      	movs	r3, #0
 801a128:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a130:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 801a132:	7afb      	ldrb	r3, [r7, #11]
 801a134:	2b01      	cmp	r3, #1
 801a136:	d002      	beq.n	801a13e <HAL_CAN_IsTxMessagePending+0x22>
 801a138:	7afb      	ldrb	r3, [r7, #11]
 801a13a:	2b02      	cmp	r3, #2
 801a13c:	d10b      	bne.n	801a156 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	689a      	ldr	r2, [r3, #8]
 801a144:	683b      	ldr	r3, [r7, #0]
 801a146:	069b      	lsls	r3, r3, #26
 801a148:	401a      	ands	r2, r3
 801a14a:	683b      	ldr	r3, [r7, #0]
 801a14c:	069b      	lsls	r3, r3, #26
 801a14e:	429a      	cmp	r2, r3
 801a150:	d001      	beq.n	801a156 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 801a152:	2301      	movs	r3, #1
 801a154:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 801a156:	68fb      	ldr	r3, [r7, #12]
}
 801a158:	4618      	mov	r0, r3
 801a15a:	3714      	adds	r7, #20
 801a15c:	46bd      	mov	sp, r7
 801a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a162:	4770      	bx	lr

0801a164 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801a164:	b480      	push	{r7}
 801a166:	b087      	sub	sp, #28
 801a168:	af00      	add	r7, sp, #0
 801a16a:	60f8      	str	r0, [r7, #12]
 801a16c:	60b9      	str	r1, [r7, #8]
 801a16e:	607a      	str	r2, [r7, #4]
 801a170:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a178:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 801a17a:	7dfb      	ldrb	r3, [r7, #23]
 801a17c:	2b01      	cmp	r3, #1
 801a17e:	d003      	beq.n	801a188 <HAL_CAN_GetRxMessage+0x24>
 801a180:	7dfb      	ldrb	r3, [r7, #23]
 801a182:	2b02      	cmp	r3, #2
 801a184:	f040 80f3 	bne.w	801a36e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801a188:	68bb      	ldr	r3, [r7, #8]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d10e      	bne.n	801a1ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	68db      	ldr	r3, [r3, #12]
 801a194:	f003 0303 	and.w	r3, r3, #3
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d116      	bne.n	801a1ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801a1a8:	2301      	movs	r3, #1
 801a1aa:	e0e7      	b.n	801a37c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	691b      	ldr	r3, [r3, #16]
 801a1b2:	f003 0303 	and.w	r3, r3, #3
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d107      	bne.n	801a1ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801a1c6:	2301      	movs	r3, #1
 801a1c8:	e0d8      	b.n	801a37c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	681a      	ldr	r2, [r3, #0]
 801a1ce:	68bb      	ldr	r3, [r7, #8]
 801a1d0:	331b      	adds	r3, #27
 801a1d2:	011b      	lsls	r3, r3, #4
 801a1d4:	4413      	add	r3, r2
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	f003 0204 	and.w	r2, r3, #4
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	689b      	ldr	r3, [r3, #8]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d10c      	bne.n	801a202 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	681a      	ldr	r2, [r3, #0]
 801a1ec:	68bb      	ldr	r3, [r7, #8]
 801a1ee:	331b      	adds	r3, #27
 801a1f0:	011b      	lsls	r3, r3, #4
 801a1f2:	4413      	add	r3, r2
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	0d5b      	lsrs	r3, r3, #21
 801a1f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	601a      	str	r2, [r3, #0]
 801a200:	e00b      	b.n	801a21a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	681a      	ldr	r2, [r3, #0]
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	331b      	adds	r3, #27
 801a20a:	011b      	lsls	r3, r3, #4
 801a20c:	4413      	add	r3, r2
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	08db      	lsrs	r3, r3, #3
 801a212:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	681a      	ldr	r2, [r3, #0]
 801a21e:	68bb      	ldr	r3, [r7, #8]
 801a220:	331b      	adds	r3, #27
 801a222:	011b      	lsls	r3, r3, #4
 801a224:	4413      	add	r3, r2
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	f003 0202 	and.w	r2, r3, #2
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	681a      	ldr	r2, [r3, #0]
 801a234:	68bb      	ldr	r3, [r7, #8]
 801a236:	331b      	adds	r3, #27
 801a238:	011b      	lsls	r3, r3, #4
 801a23a:	4413      	add	r3, r2
 801a23c:	3304      	adds	r3, #4
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	f003 020f 	and.w	r2, r3, #15
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	681a      	ldr	r2, [r3, #0]
 801a24c:	68bb      	ldr	r3, [r7, #8]
 801a24e:	331b      	adds	r3, #27
 801a250:	011b      	lsls	r3, r3, #4
 801a252:	4413      	add	r3, r2
 801a254:	3304      	adds	r3, #4
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	0a1b      	lsrs	r3, r3, #8
 801a25a:	b2da      	uxtb	r2, r3
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	681a      	ldr	r2, [r3, #0]
 801a264:	68bb      	ldr	r3, [r7, #8]
 801a266:	331b      	adds	r3, #27
 801a268:	011b      	lsls	r3, r3, #4
 801a26a:	4413      	add	r3, r2
 801a26c:	3304      	adds	r3, #4
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	0c1b      	lsrs	r3, r3, #16
 801a272:	b29a      	uxth	r2, r3
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	681a      	ldr	r2, [r3, #0]
 801a27c:	68bb      	ldr	r3, [r7, #8]
 801a27e:	011b      	lsls	r3, r3, #4
 801a280:	4413      	add	r3, r2
 801a282:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	b2da      	uxtb	r2, r3
 801a28a:	683b      	ldr	r3, [r7, #0]
 801a28c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	681a      	ldr	r2, [r3, #0]
 801a292:	68bb      	ldr	r3, [r7, #8]
 801a294:	011b      	lsls	r3, r3, #4
 801a296:	4413      	add	r3, r2
 801a298:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	0a1a      	lsrs	r2, r3, #8
 801a2a0:	683b      	ldr	r3, [r7, #0]
 801a2a2:	3301      	adds	r3, #1
 801a2a4:	b2d2      	uxtb	r2, r2
 801a2a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	681a      	ldr	r2, [r3, #0]
 801a2ac:	68bb      	ldr	r3, [r7, #8]
 801a2ae:	011b      	lsls	r3, r3, #4
 801a2b0:	4413      	add	r3, r2
 801a2b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	0c1a      	lsrs	r2, r3, #16
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	3302      	adds	r3, #2
 801a2be:	b2d2      	uxtb	r2, r2
 801a2c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	681a      	ldr	r2, [r3, #0]
 801a2c6:	68bb      	ldr	r3, [r7, #8]
 801a2c8:	011b      	lsls	r3, r3, #4
 801a2ca:	4413      	add	r3, r2
 801a2cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	0e1a      	lsrs	r2, r3, #24
 801a2d4:	683b      	ldr	r3, [r7, #0]
 801a2d6:	3303      	adds	r3, #3
 801a2d8:	b2d2      	uxtb	r2, r2
 801a2da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	681a      	ldr	r2, [r3, #0]
 801a2e0:	68bb      	ldr	r3, [r7, #8]
 801a2e2:	011b      	lsls	r3, r3, #4
 801a2e4:	4413      	add	r3, r2
 801a2e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801a2ea:	681a      	ldr	r2, [r3, #0]
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	3304      	adds	r3, #4
 801a2f0:	b2d2      	uxtb	r2, r2
 801a2f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	681a      	ldr	r2, [r3, #0]
 801a2f8:	68bb      	ldr	r3, [r7, #8]
 801a2fa:	011b      	lsls	r3, r3, #4
 801a2fc:	4413      	add	r3, r2
 801a2fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	0a1a      	lsrs	r2, r3, #8
 801a306:	683b      	ldr	r3, [r7, #0]
 801a308:	3305      	adds	r3, #5
 801a30a:	b2d2      	uxtb	r2, r2
 801a30c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	681a      	ldr	r2, [r3, #0]
 801a312:	68bb      	ldr	r3, [r7, #8]
 801a314:	011b      	lsls	r3, r3, #4
 801a316:	4413      	add	r3, r2
 801a318:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	0c1a      	lsrs	r2, r3, #16
 801a320:	683b      	ldr	r3, [r7, #0]
 801a322:	3306      	adds	r3, #6
 801a324:	b2d2      	uxtb	r2, r2
 801a326:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	681a      	ldr	r2, [r3, #0]
 801a32c:	68bb      	ldr	r3, [r7, #8]
 801a32e:	011b      	lsls	r3, r3, #4
 801a330:	4413      	add	r3, r2
 801a332:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	0e1a      	lsrs	r2, r3, #24
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	3307      	adds	r3, #7
 801a33e:	b2d2      	uxtb	r2, r2
 801a340:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801a342:	68bb      	ldr	r3, [r7, #8]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d108      	bne.n	801a35a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	68da      	ldr	r2, [r3, #12]
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	f042 0220 	orr.w	r2, r2, #32
 801a356:	60da      	str	r2, [r3, #12]
 801a358:	e007      	b.n	801a36a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	691a      	ldr	r2, [r3, #16]
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	f042 0220 	orr.w	r2, r2, #32
 801a368:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 801a36a:	2300      	movs	r3, #0
 801a36c:	e006      	b.n	801a37c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a372:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801a37a:	2301      	movs	r3, #1
  }
}
 801a37c:	4618      	mov	r0, r3
 801a37e:	371c      	adds	r7, #28
 801a380:	46bd      	mov	sp, r7
 801a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a386:	4770      	bx	lr

0801a388 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 801a388:	b480      	push	{r7}
 801a38a:	b085      	sub	sp, #20
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
 801a390:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a398:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 801a39a:	7bfb      	ldrb	r3, [r7, #15]
 801a39c:	2b01      	cmp	r3, #1
 801a39e:	d002      	beq.n	801a3a6 <HAL_CAN_ActivateNotification+0x1e>
 801a3a0:	7bfb      	ldrb	r3, [r7, #15]
 801a3a2:	2b02      	cmp	r3, #2
 801a3a4:	d109      	bne.n	801a3ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	6959      	ldr	r1, [r3, #20]
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	683a      	ldr	r2, [r7, #0]
 801a3b2:	430a      	orrs	r2, r1
 801a3b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	e006      	b.n	801a3c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801a3c6:	2301      	movs	r3, #1
  }
}
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	3714      	adds	r7, #20
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d2:	4770      	bx	lr

0801a3d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 801a3d4:	b580      	push	{r7, lr}
 801a3d6:	b08a      	sub	sp, #40	; 0x28
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 801a3dc:	2300      	movs	r3, #0
 801a3de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	695b      	ldr	r3, [r3, #20]
 801a3e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	685b      	ldr	r3, [r3, #4]
 801a3ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	689b      	ldr	r3, [r3, #8]
 801a3f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	68db      	ldr	r3, [r3, #12]
 801a3fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	691b      	ldr	r3, [r3, #16]
 801a406:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	699b      	ldr	r3, [r3, #24]
 801a40e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 801a410:	6a3b      	ldr	r3, [r7, #32]
 801a412:	f003 0301 	and.w	r3, r3, #1
 801a416:	2b00      	cmp	r3, #0
 801a418:	f000 8083 	beq.w	801a522 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 801a41c:	69bb      	ldr	r3, [r7, #24]
 801a41e:	f003 0301 	and.w	r3, r3, #1
 801a422:	2b00      	cmp	r3, #0
 801a424:	d025      	beq.n	801a472 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	2201      	movs	r2, #1
 801a42c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 801a42e:	69bb      	ldr	r3, [r7, #24]
 801a430:	f003 0302 	and.w	r3, r3, #2
 801a434:	2b00      	cmp	r3, #0
 801a436:	d004      	beq.n	801a442 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a43c:	6878      	ldr	r0, [r7, #4]
 801a43e:	4798      	blx	r3
 801a440:	e017      	b.n	801a472 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 801a442:	69bb      	ldr	r3, [r7, #24]
 801a444:	f003 0304 	and.w	r3, r3, #4
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d004      	beq.n	801a456 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 801a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a44e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a452:	627b      	str	r3, [r7, #36]	; 0x24
 801a454:	e00d      	b.n	801a472 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 801a456:	69bb      	ldr	r3, [r7, #24]
 801a458:	f003 0308 	and.w	r3, r3, #8
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d004      	beq.n	801a46a <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 801a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a462:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801a466:	627b      	str	r3, [r7, #36]	; 0x24
 801a468:	e003      	b.n	801a472 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a46e:	6878      	ldr	r0, [r7, #4]
 801a470:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 801a472:	69bb      	ldr	r3, [r7, #24]
 801a474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d026      	beq.n	801a4ca <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a484:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 801a486:	69bb      	ldr	r3, [r7, #24]
 801a488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d004      	beq.n	801a49a <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a494:	6878      	ldr	r0, [r7, #4]
 801a496:	4798      	blx	r3
 801a498:	e017      	b.n	801a4ca <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 801a49a:	69bb      	ldr	r3, [r7, #24]
 801a49c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d004      	beq.n	801a4ae <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 801a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a4aa:	627b      	str	r3, [r7, #36]	; 0x24
 801a4ac:	e00d      	b.n	801a4ca <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 801a4ae:	69bb      	ldr	r3, [r7, #24]
 801a4b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d004      	beq.n	801a4c2 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 801a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a4be:	627b      	str	r3, [r7, #36]	; 0x24
 801a4c0:	e003      	b.n	801a4ca <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4c6:	6878      	ldr	r0, [r7, #4]
 801a4c8:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801a4ca:	69bb      	ldr	r3, [r7, #24]
 801a4cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d026      	beq.n	801a522 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a4dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 801a4de:	69bb      	ldr	r3, [r7, #24]
 801a4e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d004      	beq.n	801a4f2 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4ec:	6878      	ldr	r0, [r7, #4]
 801a4ee:	4798      	blx	r3
 801a4f0:	e017      	b.n	801a522 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 801a4f2:	69bb      	ldr	r3, [r7, #24]
 801a4f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d004      	beq.n	801a506 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801a502:	627b      	str	r3, [r7, #36]	; 0x24
 801a504:	e00d      	b.n	801a522 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801a506:	69bb      	ldr	r3, [r7, #24]
 801a508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d004      	beq.n	801a51a <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 801a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a516:	627b      	str	r3, [r7, #36]	; 0x24
 801a518:	e003      	b.n	801a522 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a51e:	6878      	ldr	r0, [r7, #4]
 801a520:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 801a522:	6a3b      	ldr	r3, [r7, #32]
 801a524:	f003 0308 	and.w	r3, r3, #8
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d00c      	beq.n	801a546 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 801a52c:	697b      	ldr	r3, [r7, #20]
 801a52e:	f003 0310 	and.w	r3, r3, #16
 801a532:	2b00      	cmp	r3, #0
 801a534:	d007      	beq.n	801a546 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 801a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a53c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	2210      	movs	r2, #16
 801a544:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 801a546:	6a3b      	ldr	r3, [r7, #32]
 801a548:	f003 0304 	and.w	r3, r3, #4
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d00c      	beq.n	801a56a <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 801a550:	697b      	ldr	r3, [r7, #20]
 801a552:	f003 0308 	and.w	r3, r3, #8
 801a556:	2b00      	cmp	r3, #0
 801a558:	d007      	beq.n	801a56a <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	2208      	movs	r2, #8
 801a560:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a566:	6878      	ldr	r0, [r7, #4]
 801a568:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 801a56a:	6a3b      	ldr	r3, [r7, #32]
 801a56c:	f003 0302 	and.w	r3, r3, #2
 801a570:	2b00      	cmp	r3, #0
 801a572:	d00a      	beq.n	801a58a <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	68db      	ldr	r3, [r3, #12]
 801a57a:	f003 0303 	and.w	r3, r3, #3
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d003      	beq.n	801a58a <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a586:	6878      	ldr	r0, [r7, #4]
 801a588:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 801a58a:	6a3b      	ldr	r3, [r7, #32]
 801a58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a590:	2b00      	cmp	r3, #0
 801a592:	d00c      	beq.n	801a5ae <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 801a594:	693b      	ldr	r3, [r7, #16]
 801a596:	f003 0310 	and.w	r3, r3, #16
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d007      	beq.n	801a5ae <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 801a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a5a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	2210      	movs	r2, #16
 801a5ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 801a5ae:	6a3b      	ldr	r3, [r7, #32]
 801a5b0:	f003 0320 	and.w	r3, r3, #32
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d00c      	beq.n	801a5d2 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 801a5b8:	693b      	ldr	r3, [r7, #16]
 801a5ba:	f003 0308 	and.w	r3, r3, #8
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d007      	beq.n	801a5d2 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	2208      	movs	r2, #8
 801a5c8:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a5ce:	6878      	ldr	r0, [r7, #4]
 801a5d0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 801a5d2:	6a3b      	ldr	r3, [r7, #32]
 801a5d4:	f003 0310 	and.w	r3, r3, #16
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d00a      	beq.n	801a5f2 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	691b      	ldr	r3, [r3, #16]
 801a5e2:	f003 0303 	and.w	r3, r3, #3
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d003      	beq.n	801a5f2 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a5ee:	6878      	ldr	r0, [r7, #4]
 801a5f0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801a5f2:	6a3b      	ldr	r3, [r7, #32]
 801a5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d00c      	beq.n	801a616 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 801a5fc:	69fb      	ldr	r3, [r7, #28]
 801a5fe:	f003 0310 	and.w	r3, r3, #16
 801a602:	2b00      	cmp	r3, #0
 801a604:	d007      	beq.n	801a616 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	2210      	movs	r2, #16
 801a60c:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a612:	6878      	ldr	r0, [r7, #4]
 801a614:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801a616:	6a3b      	ldr	r3, [r7, #32]
 801a618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d00c      	beq.n	801a63a <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 801a620:	69fb      	ldr	r3, [r7, #28]
 801a622:	f003 0308 	and.w	r3, r3, #8
 801a626:	2b00      	cmp	r3, #0
 801a628:	d007      	beq.n	801a63a <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	2208      	movs	r2, #8
 801a630:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a636:	6878      	ldr	r0, [r7, #4]
 801a638:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801a63a:	6a3b      	ldr	r3, [r7, #32]
 801a63c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a640:	2b00      	cmp	r3, #0
 801a642:	d07b      	beq.n	801a73c <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 801a644:	69fb      	ldr	r3, [r7, #28]
 801a646:	f003 0304 	and.w	r3, r3, #4
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d072      	beq.n	801a734 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801a64e:	6a3b      	ldr	r3, [r7, #32]
 801a650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a654:	2b00      	cmp	r3, #0
 801a656:	d008      	beq.n	801a66a <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d003      	beq.n	801a66a <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 801a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a664:	f043 0301 	orr.w	r3, r3, #1
 801a668:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801a66a:	6a3b      	ldr	r3, [r7, #32]
 801a66c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a670:	2b00      	cmp	r3, #0
 801a672:	d008      	beq.n	801a686 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d003      	beq.n	801a686 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 801a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a680:	f043 0302 	orr.w	r3, r3, #2
 801a684:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801a686:	6a3b      	ldr	r3, [r7, #32]
 801a688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d008      	beq.n	801a6a2 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801a696:	2b00      	cmp	r3, #0
 801a698:	d003      	beq.n	801a6a2 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 801a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a69c:	f043 0304 	orr.w	r3, r3, #4
 801a6a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801a6a2:	6a3b      	ldr	r3, [r7, #32]
 801a6a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d043      	beq.n	801a734 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d03e      	beq.n	801a734 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801a6bc:	2b60      	cmp	r3, #96	; 0x60
 801a6be:	d02b      	beq.n	801a718 <HAL_CAN_IRQHandler+0x344>
 801a6c0:	2b60      	cmp	r3, #96	; 0x60
 801a6c2:	d82e      	bhi.n	801a722 <HAL_CAN_IRQHandler+0x34e>
 801a6c4:	2b50      	cmp	r3, #80	; 0x50
 801a6c6:	d022      	beq.n	801a70e <HAL_CAN_IRQHandler+0x33a>
 801a6c8:	2b50      	cmp	r3, #80	; 0x50
 801a6ca:	d82a      	bhi.n	801a722 <HAL_CAN_IRQHandler+0x34e>
 801a6cc:	2b40      	cmp	r3, #64	; 0x40
 801a6ce:	d019      	beq.n	801a704 <HAL_CAN_IRQHandler+0x330>
 801a6d0:	2b40      	cmp	r3, #64	; 0x40
 801a6d2:	d826      	bhi.n	801a722 <HAL_CAN_IRQHandler+0x34e>
 801a6d4:	2b30      	cmp	r3, #48	; 0x30
 801a6d6:	d010      	beq.n	801a6fa <HAL_CAN_IRQHandler+0x326>
 801a6d8:	2b30      	cmp	r3, #48	; 0x30
 801a6da:	d822      	bhi.n	801a722 <HAL_CAN_IRQHandler+0x34e>
 801a6dc:	2b10      	cmp	r3, #16
 801a6de:	d002      	beq.n	801a6e6 <HAL_CAN_IRQHandler+0x312>
 801a6e0:	2b20      	cmp	r3, #32
 801a6e2:	d005      	beq.n	801a6f0 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801a6e4:	e01d      	b.n	801a722 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 801a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6e8:	f043 0308 	orr.w	r3, r3, #8
 801a6ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a6ee:	e019      	b.n	801a724 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 801a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6f2:	f043 0310 	orr.w	r3, r3, #16
 801a6f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a6f8:	e014      	b.n	801a724 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 801a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6fc:	f043 0320 	orr.w	r3, r3, #32
 801a700:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a702:	e00f      	b.n	801a724 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 801a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a70a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a70c:	e00a      	b.n	801a724 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 801a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a714:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a716:	e005      	b.n	801a724 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 801a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a71a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a71e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801a720:	e000      	b.n	801a724 <HAL_CAN_IRQHandler+0x350>
            break;
 801a722:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	699a      	ldr	r2, [r3, #24]
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801a732:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	2204      	movs	r2, #4
 801a73a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 801a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d009      	beq.n	801a756 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a748:	431a      	orrs	r2, r3
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a752:	6878      	ldr	r0, [r7, #4]
 801a754:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801a756:	bf00      	nop
 801a758:	3728      	adds	r7, #40	; 0x28
 801a75a:	46bd      	mov	sp, r7
 801a75c:	bd80      	pop	{r7, pc}

0801a75e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801a75e:	b480      	push	{r7}
 801a760:	b083      	sub	sp, #12
 801a762:	af00      	add	r7, sp, #0
 801a764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 801a766:	bf00      	nop
 801a768:	370c      	adds	r7, #12
 801a76a:	46bd      	mov	sp, r7
 801a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a770:	4770      	bx	lr

0801a772 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801a772:	b480      	push	{r7}
 801a774:	b083      	sub	sp, #12
 801a776:	af00      	add	r7, sp, #0
 801a778:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801a77a:	bf00      	nop
 801a77c:	370c      	adds	r7, #12
 801a77e:	46bd      	mov	sp, r7
 801a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a784:	4770      	bx	lr

0801a786 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801a786:	b480      	push	{r7}
 801a788:	b083      	sub	sp, #12
 801a78a:	af00      	add	r7, sp, #0
 801a78c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 801a78e:	bf00      	nop
 801a790:	370c      	adds	r7, #12
 801a792:	46bd      	mov	sp, r7
 801a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a798:	4770      	bx	lr

0801a79a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801a79a:	b480      	push	{r7}
 801a79c:	b083      	sub	sp, #12
 801a79e:	af00      	add	r7, sp, #0
 801a7a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 801a7a2:	bf00      	nop
 801a7a4:	370c      	adds	r7, #12
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ac:	4770      	bx	lr

0801a7ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 801a7ae:	b480      	push	{r7}
 801a7b0:	b083      	sub	sp, #12
 801a7b2:	af00      	add	r7, sp, #0
 801a7b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 801a7b6:	bf00      	nop
 801a7b8:	370c      	adds	r7, #12
 801a7ba:	46bd      	mov	sp, r7
 801a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c0:	4770      	bx	lr

0801a7c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 801a7c2:	b480      	push	{r7}
 801a7c4:	b083      	sub	sp, #12
 801a7c6:	af00      	add	r7, sp, #0
 801a7c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801a7ca:	bf00      	nop
 801a7cc:	370c      	adds	r7, #12
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7d4:	4770      	bx	lr

0801a7d6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801a7d6:	b480      	push	{r7}
 801a7d8:	b083      	sub	sp, #12
 801a7da:	af00      	add	r7, sp, #0
 801a7dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 801a7de:	bf00      	nop
 801a7e0:	370c      	adds	r7, #12
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e8:	4770      	bx	lr

0801a7ea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801a7ea:	b480      	push	{r7}
 801a7ec:	b083      	sub	sp, #12
 801a7ee:	af00      	add	r7, sp, #0
 801a7f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801a7f2:	bf00      	nop
 801a7f4:	370c      	adds	r7, #12
 801a7f6:	46bd      	mov	sp, r7
 801a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7fc:	4770      	bx	lr

0801a7fe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 801a7fe:	b480      	push	{r7}
 801a800:	b083      	sub	sp, #12
 801a802:	af00      	add	r7, sp, #0
 801a804:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801a806:	bf00      	nop
 801a808:	370c      	adds	r7, #12
 801a80a:	46bd      	mov	sp, r7
 801a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a810:	4770      	bx	lr

0801a812 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801a812:	b480      	push	{r7}
 801a814:	b083      	sub	sp, #12
 801a816:	af00      	add	r7, sp, #0
 801a818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801a81a:	bf00      	nop
 801a81c:	370c      	adds	r7, #12
 801a81e:	46bd      	mov	sp, r7
 801a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a824:	4770      	bx	lr

0801a826 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801a826:	b480      	push	{r7}
 801a828:	b083      	sub	sp, #12
 801a82a:	af00      	add	r7, sp, #0
 801a82c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 801a82e:	bf00      	nop
 801a830:	370c      	adds	r7, #12
 801a832:	46bd      	mov	sp, r7
 801a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a838:	4770      	bx	lr
	...

0801a83c <__NVIC_SetPriorityGrouping>:
{
 801a83c:	b480      	push	{r7}
 801a83e:	b085      	sub	sp, #20
 801a840:	af00      	add	r7, sp, #0
 801a842:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	f003 0307 	and.w	r3, r3, #7
 801a84a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a84c:	4b0b      	ldr	r3, [pc, #44]	; (801a87c <__NVIC_SetPriorityGrouping+0x40>)
 801a84e:	68db      	ldr	r3, [r3, #12]
 801a850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a852:	68ba      	ldr	r2, [r7, #8]
 801a854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801a858:	4013      	ands	r3, r2
 801a85a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a860:	68bb      	ldr	r3, [r7, #8]
 801a862:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801a864:	4b06      	ldr	r3, [pc, #24]	; (801a880 <__NVIC_SetPriorityGrouping+0x44>)
 801a866:	4313      	orrs	r3, r2
 801a868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a86a:	4a04      	ldr	r2, [pc, #16]	; (801a87c <__NVIC_SetPriorityGrouping+0x40>)
 801a86c:	68bb      	ldr	r3, [r7, #8]
 801a86e:	60d3      	str	r3, [r2, #12]
}
 801a870:	bf00      	nop
 801a872:	3714      	adds	r7, #20
 801a874:	46bd      	mov	sp, r7
 801a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87a:	4770      	bx	lr
 801a87c:	e000ed00 	.word	0xe000ed00
 801a880:	05fa0000 	.word	0x05fa0000

0801a884 <__NVIC_GetPriorityGrouping>:
{
 801a884:	b480      	push	{r7}
 801a886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a888:	4b04      	ldr	r3, [pc, #16]	; (801a89c <__NVIC_GetPriorityGrouping+0x18>)
 801a88a:	68db      	ldr	r3, [r3, #12]
 801a88c:	0a1b      	lsrs	r3, r3, #8
 801a88e:	f003 0307 	and.w	r3, r3, #7
}
 801a892:	4618      	mov	r0, r3
 801a894:	46bd      	mov	sp, r7
 801a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a89a:	4770      	bx	lr
 801a89c:	e000ed00 	.word	0xe000ed00

0801a8a0 <__NVIC_EnableIRQ>:
{
 801a8a0:	b480      	push	{r7}
 801a8a2:	b083      	sub	sp, #12
 801a8a4:	af00      	add	r7, sp, #0
 801a8a6:	4603      	mov	r3, r0
 801a8a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a8aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	db0b      	blt.n	801a8ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a8b2:	79fb      	ldrb	r3, [r7, #7]
 801a8b4:	f003 021f 	and.w	r2, r3, #31
 801a8b8:	4907      	ldr	r1, [pc, #28]	; (801a8d8 <__NVIC_EnableIRQ+0x38>)
 801a8ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a8be:	095b      	lsrs	r3, r3, #5
 801a8c0:	2001      	movs	r0, #1
 801a8c2:	fa00 f202 	lsl.w	r2, r0, r2
 801a8c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a8ca:	bf00      	nop
 801a8cc:	370c      	adds	r7, #12
 801a8ce:	46bd      	mov	sp, r7
 801a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d4:	4770      	bx	lr
 801a8d6:	bf00      	nop
 801a8d8:	e000e100 	.word	0xe000e100

0801a8dc <__NVIC_SetPriority>:
{
 801a8dc:	b480      	push	{r7}
 801a8de:	b083      	sub	sp, #12
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	4603      	mov	r3, r0
 801a8e4:	6039      	str	r1, [r7, #0]
 801a8e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a8e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	db0a      	blt.n	801a906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a8f0:	683b      	ldr	r3, [r7, #0]
 801a8f2:	b2da      	uxtb	r2, r3
 801a8f4:	490c      	ldr	r1, [pc, #48]	; (801a928 <__NVIC_SetPriority+0x4c>)
 801a8f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a8fa:	0112      	lsls	r2, r2, #4
 801a8fc:	b2d2      	uxtb	r2, r2
 801a8fe:	440b      	add	r3, r1
 801a900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801a904:	e00a      	b.n	801a91c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	b2da      	uxtb	r2, r3
 801a90a:	4908      	ldr	r1, [pc, #32]	; (801a92c <__NVIC_SetPriority+0x50>)
 801a90c:	79fb      	ldrb	r3, [r7, #7]
 801a90e:	f003 030f 	and.w	r3, r3, #15
 801a912:	3b04      	subs	r3, #4
 801a914:	0112      	lsls	r2, r2, #4
 801a916:	b2d2      	uxtb	r2, r2
 801a918:	440b      	add	r3, r1
 801a91a:	761a      	strb	r2, [r3, #24]
}
 801a91c:	bf00      	nop
 801a91e:	370c      	adds	r7, #12
 801a920:	46bd      	mov	sp, r7
 801a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a926:	4770      	bx	lr
 801a928:	e000e100 	.word	0xe000e100
 801a92c:	e000ed00 	.word	0xe000ed00

0801a930 <NVIC_EncodePriority>:
{
 801a930:	b480      	push	{r7}
 801a932:	b089      	sub	sp, #36	; 0x24
 801a934:	af00      	add	r7, sp, #0
 801a936:	60f8      	str	r0, [r7, #12]
 801a938:	60b9      	str	r1, [r7, #8]
 801a93a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	f003 0307 	and.w	r3, r3, #7
 801a942:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a944:	69fb      	ldr	r3, [r7, #28]
 801a946:	f1c3 0307 	rsb	r3, r3, #7
 801a94a:	2b04      	cmp	r3, #4
 801a94c:	bf28      	it	cs
 801a94e:	2304      	movcs	r3, #4
 801a950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a952:	69fb      	ldr	r3, [r7, #28]
 801a954:	3304      	adds	r3, #4
 801a956:	2b06      	cmp	r3, #6
 801a958:	d902      	bls.n	801a960 <NVIC_EncodePriority+0x30>
 801a95a:	69fb      	ldr	r3, [r7, #28]
 801a95c:	3b03      	subs	r3, #3
 801a95e:	e000      	b.n	801a962 <NVIC_EncodePriority+0x32>
 801a960:	2300      	movs	r3, #0
 801a962:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a964:	f04f 32ff 	mov.w	r2, #4294967295
 801a968:	69bb      	ldr	r3, [r7, #24]
 801a96a:	fa02 f303 	lsl.w	r3, r2, r3
 801a96e:	43da      	mvns	r2, r3
 801a970:	68bb      	ldr	r3, [r7, #8]
 801a972:	401a      	ands	r2, r3
 801a974:	697b      	ldr	r3, [r7, #20]
 801a976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a978:	f04f 31ff 	mov.w	r1, #4294967295
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	fa01 f303 	lsl.w	r3, r1, r3
 801a982:	43d9      	mvns	r1, r3
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a988:	4313      	orrs	r3, r2
}
 801a98a:	4618      	mov	r0, r3
 801a98c:	3724      	adds	r7, #36	; 0x24
 801a98e:	46bd      	mov	sp, r7
 801a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a994:	4770      	bx	lr
	...

0801a998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b082      	sub	sp, #8
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	3b01      	subs	r3, #1
 801a9a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a9a8:	d301      	bcc.n	801a9ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a9aa:	2301      	movs	r3, #1
 801a9ac:	e00f      	b.n	801a9ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a9ae:	4a0a      	ldr	r2, [pc, #40]	; (801a9d8 <SysTick_Config+0x40>)
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	3b01      	subs	r3, #1
 801a9b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a9b6:	210f      	movs	r1, #15
 801a9b8:	f04f 30ff 	mov.w	r0, #4294967295
 801a9bc:	f7ff ff8e 	bl	801a8dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a9c0:	4b05      	ldr	r3, [pc, #20]	; (801a9d8 <SysTick_Config+0x40>)
 801a9c2:	2200      	movs	r2, #0
 801a9c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a9c6:	4b04      	ldr	r3, [pc, #16]	; (801a9d8 <SysTick_Config+0x40>)
 801a9c8:	2207      	movs	r2, #7
 801a9ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a9cc:	2300      	movs	r3, #0
}
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	3708      	adds	r7, #8
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	bd80      	pop	{r7, pc}
 801a9d6:	bf00      	nop
 801a9d8:	e000e010 	.word	0xe000e010

0801a9dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b082      	sub	sp, #8
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a9e4:	6878      	ldr	r0, [r7, #4]
 801a9e6:	f7ff ff29 	bl	801a83c <__NVIC_SetPriorityGrouping>
}
 801a9ea:	bf00      	nop
 801a9ec:	3708      	adds	r7, #8
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bd80      	pop	{r7, pc}

0801a9f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801a9f2:	b580      	push	{r7, lr}
 801a9f4:	b086      	sub	sp, #24
 801a9f6:	af00      	add	r7, sp, #0
 801a9f8:	4603      	mov	r3, r0
 801a9fa:	60b9      	str	r1, [r7, #8]
 801a9fc:	607a      	str	r2, [r7, #4]
 801a9fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801aa00:	2300      	movs	r3, #0
 801aa02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801aa04:	f7ff ff3e 	bl	801a884 <__NVIC_GetPriorityGrouping>
 801aa08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801aa0a:	687a      	ldr	r2, [r7, #4]
 801aa0c:	68b9      	ldr	r1, [r7, #8]
 801aa0e:	6978      	ldr	r0, [r7, #20]
 801aa10:	f7ff ff8e 	bl	801a930 <NVIC_EncodePriority>
 801aa14:	4602      	mov	r2, r0
 801aa16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa1a:	4611      	mov	r1, r2
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	f7ff ff5d 	bl	801a8dc <__NVIC_SetPriority>
}
 801aa22:	bf00      	nop
 801aa24:	3718      	adds	r7, #24
 801aa26:	46bd      	mov	sp, r7
 801aa28:	bd80      	pop	{r7, pc}

0801aa2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801aa2a:	b580      	push	{r7, lr}
 801aa2c:	b082      	sub	sp, #8
 801aa2e:	af00      	add	r7, sp, #0
 801aa30:	4603      	mov	r3, r0
 801aa32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801aa34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa38:	4618      	mov	r0, r3
 801aa3a:	f7ff ff31 	bl	801a8a0 <__NVIC_EnableIRQ>
}
 801aa3e:	bf00      	nop
 801aa40:	3708      	adds	r7, #8
 801aa42:	46bd      	mov	sp, r7
 801aa44:	bd80      	pop	{r7, pc}

0801aa46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801aa46:	b580      	push	{r7, lr}
 801aa48:	b082      	sub	sp, #8
 801aa4a:	af00      	add	r7, sp, #0
 801aa4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801aa4e:	6878      	ldr	r0, [r7, #4]
 801aa50:	f7ff ffa2 	bl	801a998 <SysTick_Config>
 801aa54:	4603      	mov	r3, r0
}
 801aa56:	4618      	mov	r0, r3
 801aa58:	3708      	adds	r7, #8
 801aa5a:	46bd      	mov	sp, r7
 801aa5c:	bd80      	pop	{r7, pc}
	...

0801aa60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801aa60:	b480      	push	{r7}
 801aa62:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801aa64:	f3bf 8f5f 	dmb	sy
}
 801aa68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801aa6a:	4b07      	ldr	r3, [pc, #28]	; (801aa88 <HAL_MPU_Disable+0x28>)
 801aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa6e:	4a06      	ldr	r2, [pc, #24]	; (801aa88 <HAL_MPU_Disable+0x28>)
 801aa70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801aa74:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801aa76:	4b05      	ldr	r3, [pc, #20]	; (801aa8c <HAL_MPU_Disable+0x2c>)
 801aa78:	2200      	movs	r2, #0
 801aa7a:	605a      	str	r2, [r3, #4]
}
 801aa7c:	bf00      	nop
 801aa7e:	46bd      	mov	sp, r7
 801aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa84:	4770      	bx	lr
 801aa86:	bf00      	nop
 801aa88:	e000ed00 	.word	0xe000ed00
 801aa8c:	e000ed90 	.word	0xe000ed90

0801aa90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801aa90:	b480      	push	{r7}
 801aa92:	b083      	sub	sp, #12
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801aa98:	4a0b      	ldr	r2, [pc, #44]	; (801aac8 <HAL_MPU_Enable+0x38>)
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	f043 0301 	orr.w	r3, r3, #1
 801aaa0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801aaa2:	4b0a      	ldr	r3, [pc, #40]	; (801aacc <HAL_MPU_Enable+0x3c>)
 801aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aaa6:	4a09      	ldr	r2, [pc, #36]	; (801aacc <HAL_MPU_Enable+0x3c>)
 801aaa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801aaac:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801aaae:	f3bf 8f4f 	dsb	sy
}
 801aab2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801aab4:	f3bf 8f6f 	isb	sy
}
 801aab8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801aaba:	bf00      	nop
 801aabc:	370c      	adds	r7, #12
 801aabe:	46bd      	mov	sp, r7
 801aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac4:	4770      	bx	lr
 801aac6:	bf00      	nop
 801aac8:	e000ed90 	.word	0xe000ed90
 801aacc:	e000ed00 	.word	0xe000ed00

0801aad0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801aad0:	b480      	push	{r7}
 801aad2:	b083      	sub	sp, #12
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	785a      	ldrb	r2, [r3, #1]
 801aadc:	4b1d      	ldr	r3, [pc, #116]	; (801ab54 <HAL_MPU_ConfigRegion+0x84>)
 801aade:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	781b      	ldrb	r3, [r3, #0]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d029      	beq.n	801ab3c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 801aae8:	4a1a      	ldr	r2, [pc, #104]	; (801ab54 <HAL_MPU_ConfigRegion+0x84>)
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	685b      	ldr	r3, [r3, #4]
 801aaee:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	7b1b      	ldrb	r3, [r3, #12]
 801aaf4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	7adb      	ldrb	r3, [r3, #11]
 801aafa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aafc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	7a9b      	ldrb	r3, [r3, #10]
 801ab02:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801ab04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	7b5b      	ldrb	r3, [r3, #13]
 801ab0a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801ab0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	7b9b      	ldrb	r3, [r3, #14]
 801ab12:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801ab14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	7bdb      	ldrb	r3, [r3, #15]
 801ab1a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801ab1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	7a5b      	ldrb	r3, [r3, #9]
 801ab22:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801ab24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	7a1b      	ldrb	r3, [r3, #8]
 801ab2a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801ab2c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801ab2e:	687a      	ldr	r2, [r7, #4]
 801ab30:	7812      	ldrb	r2, [r2, #0]
 801ab32:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ab34:	4a07      	ldr	r2, [pc, #28]	; (801ab54 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801ab36:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ab38:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801ab3a:	e005      	b.n	801ab48 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 801ab3c:	4b05      	ldr	r3, [pc, #20]	; (801ab54 <HAL_MPU_ConfigRegion+0x84>)
 801ab3e:	2200      	movs	r2, #0
 801ab40:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 801ab42:	4b04      	ldr	r3, [pc, #16]	; (801ab54 <HAL_MPU_ConfigRegion+0x84>)
 801ab44:	2200      	movs	r2, #0
 801ab46:	611a      	str	r2, [r3, #16]
}
 801ab48:	bf00      	nop
 801ab4a:	370c      	adds	r7, #12
 801ab4c:	46bd      	mov	sp, r7
 801ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab52:	4770      	bx	lr
 801ab54:	e000ed90 	.word	0xe000ed90

0801ab58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b084      	sub	sp, #16
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ab64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801ab66:	f7fe ff63 	bl	8019a30 <HAL_GetTick>
 801ab6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801ab72:	b2db      	uxtb	r3, r3
 801ab74:	2b02      	cmp	r3, #2
 801ab76:	d008      	beq.n	801ab8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	2280      	movs	r2, #128	; 0x80
 801ab7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	2200      	movs	r2, #0
 801ab82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801ab86:	2301      	movs	r3, #1
 801ab88:	e052      	b.n	801ac30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	681a      	ldr	r2, [r3, #0]
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	f022 0216 	bic.w	r2, r2, #22
 801ab98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	695a      	ldr	r2, [r3, #20]
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801aba8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d103      	bne.n	801abba <HAL_DMA_Abort+0x62>
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d007      	beq.n	801abca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	681a      	ldr	r2, [r3, #0]
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	f022 0208 	bic.w	r2, r2, #8
 801abc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	681a      	ldr	r2, [r3, #0]
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	f022 0201 	bic.w	r2, r2, #1
 801abd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801abda:	e013      	b.n	801ac04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801abdc:	f7fe ff28 	bl	8019a30 <HAL_GetTick>
 801abe0:	4602      	mov	r2, r0
 801abe2:	68bb      	ldr	r3, [r7, #8]
 801abe4:	1ad3      	subs	r3, r2, r3
 801abe6:	2b05      	cmp	r3, #5
 801abe8:	d90c      	bls.n	801ac04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	2220      	movs	r2, #32
 801abee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	2203      	movs	r2, #3
 801abf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2200      	movs	r2, #0
 801abfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 801ac00:	2303      	movs	r3, #3
 801ac02:	e015      	b.n	801ac30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	f003 0301 	and.w	r3, r3, #1
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d1e4      	bne.n	801abdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac16:	223f      	movs	r2, #63	; 0x3f
 801ac18:	409a      	lsls	r2, r3
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	2201      	movs	r2, #1
 801ac22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	2200      	movs	r2, #0
 801ac2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 801ac2e:	2300      	movs	r3, #0
}
 801ac30:	4618      	mov	r0, r3
 801ac32:	3710      	adds	r7, #16
 801ac34:	46bd      	mov	sp, r7
 801ac36:	bd80      	pop	{r7, pc}

0801ac38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801ac38:	b480      	push	{r7}
 801ac3a:	b083      	sub	sp, #12
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801ac46:	b2db      	uxtb	r3, r3
 801ac48:	2b02      	cmp	r3, #2
 801ac4a:	d004      	beq.n	801ac56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2280      	movs	r2, #128	; 0x80
 801ac50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801ac52:	2301      	movs	r3, #1
 801ac54:	e00c      	b.n	801ac70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	2205      	movs	r2, #5
 801ac5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	681a      	ldr	r2, [r3, #0]
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	f022 0201 	bic.w	r2, r2, #1
 801ac6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801ac6e:	2300      	movs	r3, #0
}
 801ac70:	4618      	mov	r0, r3
 801ac72:	370c      	adds	r7, #12
 801ac74:	46bd      	mov	sp, r7
 801ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac7a:	4770      	bx	lr

0801ac7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b084      	sub	sp, #16
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d101      	bne.n	801ac8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	e06a      	b.n	801ad64 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d106      	bne.n	801aca6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	2223      	movs	r2, #35	; 0x23
 801ac9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f006 fbaf 	bl	8021404 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801aca6:	4b31      	ldr	r3, [pc, #196]	; (801ad6c <HAL_ETH_Init+0xf0>)
 801aca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801acaa:	4a30      	ldr	r2, [pc, #192]	; (801ad6c <HAL_ETH_Init+0xf0>)
 801acac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801acb0:	6453      	str	r3, [r2, #68]	; 0x44
 801acb2:	4b2e      	ldr	r3, [pc, #184]	; (801ad6c <HAL_ETH_Init+0xf0>)
 801acb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801acb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801acba:	60bb      	str	r3, [r7, #8]
 801acbc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 801acbe:	4b2c      	ldr	r3, [pc, #176]	; (801ad70 <HAL_ETH_Init+0xf4>)
 801acc0:	685b      	ldr	r3, [r3, #4]
 801acc2:	4a2b      	ldr	r2, [pc, #172]	; (801ad70 <HAL_ETH_Init+0xf4>)
 801acc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801acc8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 801acca:	4b29      	ldr	r3, [pc, #164]	; (801ad70 <HAL_ETH_Init+0xf4>)
 801accc:	685a      	ldr	r2, [r3, #4]
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	689b      	ldr	r3, [r3, #8]
 801acd2:	4927      	ldr	r1, [pc, #156]	; (801ad70 <HAL_ETH_Init+0xf4>)
 801acd4:	4313      	orrs	r3, r2
 801acd6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 801acd8:	4b25      	ldr	r3, [pc, #148]	; (801ad70 <HAL_ETH_Init+0xf4>)
 801acda:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	687a      	ldr	r2, [r7, #4]
 801ace8:	6812      	ldr	r2, [r2, #0]
 801acea:	f043 0301 	orr.w	r3, r3, #1
 801acee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801acf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801acf4:	f7fe fe9c 	bl	8019a30 <HAL_GetTick>
 801acf8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801acfa:	e011      	b.n	801ad20 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801acfc:	f7fe fe98 	bl	8019a30 <HAL_GetTick>
 801ad00:	4602      	mov	r2, r0
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	1ad3      	subs	r3, r2, r3
 801ad06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801ad0a:	d909      	bls.n	801ad20 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	2204      	movs	r2, #4
 801ad10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	22e0      	movs	r2, #224	; 0xe0
 801ad18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 801ad1c:	2301      	movs	r3, #1
 801ad1e:	e021      	b.n	801ad64 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	f003 0301 	and.w	r3, r3, #1
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d1e4      	bne.n	801acfc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801ad32:	6878      	ldr	r0, [r7, #4]
 801ad34:	f000 fee4 	bl	801bb00 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 801ad38:	6878      	ldr	r0, [r7, #4]
 801ad3a:	f000 ff8b 	bl	801bc54 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801ad3e:	6878      	ldr	r0, [r7, #4]
 801ad40:	f000 ffe1 	bl	801bd06 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	685b      	ldr	r3, [r3, #4]
 801ad48:	461a      	mov	r2, r3
 801ad4a:	2100      	movs	r1, #0
 801ad4c:	6878      	ldr	r0, [r7, #4]
 801ad4e:	f000 ff49 	bl	801bbe4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	2200      	movs	r2, #0
 801ad56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	2210      	movs	r2, #16
 801ad5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801ad62:	2300      	movs	r3, #0
}
 801ad64:	4618      	mov	r0, r3
 801ad66:	3710      	adds	r7, #16
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bd80      	pop	{r7, pc}
 801ad6c:	40023800 	.word	0x40023800
 801ad70:	40013800 	.word	0x40013800

0801ad74 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	b084      	sub	sp, #16
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ad82:	2b10      	cmp	r3, #16
 801ad84:	d150      	bne.n	801ae28 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	2223      	movs	r2, #35	; 0x23
 801ad8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	2204      	movs	r2, #4
 801ad92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 801ad94:	6878      	ldr	r0, [r7, #4]
 801ad96:	f000 f9fd 	bl	801b194 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	681a      	ldr	r2, [r3, #0]
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	f042 0208 	orr.w	r2, r2, #8
 801ada8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801adb2:	2001      	movs	r0, #1
 801adb4:	f7fe fe48 	bl	8019a48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	68fa      	ldr	r2, [r7, #12]
 801adbe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	681a      	ldr	r2, [r3, #0]
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	f042 0204 	orr.w	r2, r2, #4
 801adce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801add8:	2001      	movs	r0, #1
 801adda:	f7fe fe35 	bl	8019a48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	68fa      	ldr	r2, [r7, #12]
 801ade4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801ade6:	6878      	ldr	r0, [r7, #4]
 801ade8:	f000 fd2a 	bl	801b840 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801adf4:	699b      	ldr	r3, [r3, #24]
 801adf6:	687a      	ldr	r2, [r7, #4]
 801adf8:	6812      	ldr	r2, [r2, #0]
 801adfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801adfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ae02:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae0c:	699b      	ldr	r3, [r3, #24]
 801ae0e:	687a      	ldr	r2, [r7, #4]
 801ae10:	6812      	ldr	r2, [r2, #0]
 801ae12:	f043 0302 	orr.w	r3, r3, #2
 801ae16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ae1a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	2223      	movs	r2, #35	; 0x23
 801ae20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801ae24:	2300      	movs	r3, #0
 801ae26:	e000      	b.n	801ae2a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 801ae28:	2301      	movs	r3, #1
  }
}
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	3710      	adds	r7, #16
 801ae2e:	46bd      	mov	sp, r7
 801ae30:	bd80      	pop	{r7, pc}

0801ae32 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 801ae32:	b580      	push	{r7, lr}
 801ae34:	b084      	sub	sp, #16
 801ae36:	af00      	add	r7, sp, #0
 801ae38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ae40:	2b23      	cmp	r3, #35	; 0x23
 801ae42:	d14a      	bne.n	801aeda <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	2223      	movs	r2, #35	; 0x23
 801ae48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae54:	699b      	ldr	r3, [r3, #24]
 801ae56:	687a      	ldr	r2, [r7, #4]
 801ae58:	6812      	ldr	r2, [r2, #0]
 801ae5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ae5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ae62:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ae6c:	699b      	ldr	r3, [r3, #24]
 801ae6e:	687a      	ldr	r2, [r7, #4]
 801ae70:	6812      	ldr	r2, [r2, #0]
 801ae72:	f023 0302 	bic.w	r3, r3, #2
 801ae76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801ae7a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	681a      	ldr	r2, [r3, #0]
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	f022 0204 	bic.w	r2, r2, #4
 801ae8a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801ae94:	2001      	movs	r0, #1
 801ae96:	f7fe fdd7 	bl	8019a48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	68fa      	ldr	r2, [r7, #12]
 801aea0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801aea2:	6878      	ldr	r0, [r7, #4]
 801aea4:	f000 fccc 	bl	801b840 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	681a      	ldr	r2, [r3, #0]
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	f022 0208 	bic.w	r2, r2, #8
 801aeb6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801aec0:	2001      	movs	r0, #1
 801aec2:	f7fe fdc1 	bl	8019a48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	68fa      	ldr	r2, [r7, #12]
 801aecc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	2210      	movs	r2, #16
 801aed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 801aed6:	2300      	movs	r3, #0
 801aed8:	e000      	b.n	801aedc <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 801aeda:	2301      	movs	r3, #1
  }
}
 801aedc:	4618      	mov	r0, r3
 801aede:	3710      	adds	r7, #16
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b086      	sub	sp, #24
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	60f8      	str	r0, [r7, #12]
 801aeec:	60b9      	str	r1, [r7, #8]
 801aeee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 801aef0:	68bb      	ldr	r3, [r7, #8]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d109      	bne.n	801af0a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aefc:	f043 0201 	orr.w	r2, r3, #1
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801af06:	2301      	movs	r3, #1
 801af08:	e07c      	b.n	801b004 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801af10:	2b23      	cmp	r3, #35	; 0x23
 801af12:	d176      	bne.n	801b002 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 801af14:	2200      	movs	r2, #0
 801af16:	68b9      	ldr	r1, [r7, #8]
 801af18:	68f8      	ldr	r0, [r7, #12]
 801af1a:	f000 ff61 	bl	801bde0 <ETH_Prepare_Tx_Descriptors>
 801af1e:	4603      	mov	r3, r0
 801af20:	2b00      	cmp	r3, #0
 801af22:	d009      	beq.n	801af38 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801af2a:	f043 0202 	orr.w	r2, r3, #2
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 801af34:	2301      	movs	r3, #1
 801af36:	e065      	b.n	801b004 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 801af38:	f3bf 8f4f 	dsb	sy
}
 801af3c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 801af3e:	68fb      	ldr	r3, [r7, #12]
 801af40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	3206      	adds	r2, #6
 801af46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af4a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 801af4c:	68fb      	ldr	r3, [r7, #12]
 801af4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af50:	1c5a      	adds	r2, r3, #1
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	629a      	str	r2, [r3, #40]	; 0x28
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af5a:	2b03      	cmp	r3, #3
 801af5c:	d904      	bls.n	801af68 <HAL_ETH_Transmit+0x84>
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af62:	1f1a      	subs	r2, r3, #4
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	681a      	ldr	r2, [r3, #0]
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	3106      	adds	r1, #6
 801af74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801af78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801af7c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 801af7e:	f7fe fd57 	bl	8019a30 <HAL_GetTick>
 801af82:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801af84:	e037      	b.n	801aff6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af8e:	695b      	ldr	r3, [r3, #20]
 801af90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801af94:	2b00      	cmp	r3, #0
 801af96:	d011      	beq.n	801afbc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801af9e:	f043 0208 	orr.w	r2, r3, #8
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801afb0:	695a      	ldr	r2, [r3, #20]
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 801afb8:	2301      	movs	r3, #1
 801afba:	e023      	b.n	801b004 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afc2:	d018      	beq.n	801aff6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801afc4:	f7fe fd34 	bl	8019a30 <HAL_GetTick>
 801afc8:	4602      	mov	r2, r0
 801afca:	693b      	ldr	r3, [r7, #16]
 801afcc:	1ad3      	subs	r3, r2, r3
 801afce:	687a      	ldr	r2, [r7, #4]
 801afd0:	429a      	cmp	r2, r3
 801afd2:	d302      	bcc.n	801afda <HAL_ETH_Transmit+0xf6>
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d10d      	bne.n	801aff6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801afe0:	f043 0204 	orr.w	r2, r3, #4
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 801afea:	697b      	ldr	r3, [r7, #20]
 801afec:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 801aff0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 801aff2:	2301      	movs	r3, #1
 801aff4:	e006      	b.n	801b004 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801aff6:	697b      	ldr	r3, [r7, #20]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	2b00      	cmp	r3, #0
 801affc:	dbc3      	blt.n	801af86 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 801affe:	2300      	movs	r3, #0
 801b000:	e000      	b.n	801b004 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 801b002:	2301      	movs	r3, #1
  }
}
 801b004:	4618      	mov	r0, r3
 801b006:	3718      	adds	r7, #24
 801b008:	46bd      	mov	sp, r7
 801b00a:	bd80      	pop	{r7, pc}

0801b00c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 801b00c:	b580      	push	{r7, lr}
 801b00e:	b088      	sub	sp, #32
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
 801b014:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 801b016:	2300      	movs	r3, #0
 801b018:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 801b01a:	2300      	movs	r3, #0
 801b01c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 801b01e:	683b      	ldr	r3, [r7, #0]
 801b020:	2b00      	cmp	r3, #0
 801b022:	d109      	bne.n	801b038 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b02a:	f043 0201 	orr.w	r2, r3, #1
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801b034:	2301      	movs	r3, #1
 801b036:	e0a8      	b.n	801b18a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b03e:	2b23      	cmp	r3, #35	; 0x23
 801b040:	d001      	beq.n	801b046 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 801b042:	2301      	movs	r3, #1
 801b044:	e0a1      	b.n	801b18a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b04a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	69fa      	ldr	r2, [r7, #28]
 801b050:	3212      	adds	r2, #18
 801b052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b056:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b05c:	f1c3 0304 	rsb	r3, r3, #4
 801b060:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801b062:	e06a      	b.n	801b13a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 801b064:	69bb      	ldr	r3, [r7, #24]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d007      	beq.n	801b080 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 801b070:	69bb      	ldr	r3, [r7, #24]
 801b072:	699a      	ldr	r2, [r3, #24]
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 801b078:	69bb      	ldr	r3, [r7, #24]
 801b07a:	69da      	ldr	r2, [r3, #28]
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 801b080:	69bb      	ldr	r3, [r7, #24]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d103      	bne.n	801b094 <HAL_ETH_ReadData+0x88>
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b090:	2b00      	cmp	r3, #0
 801b092:	d040      	beq.n	801b116 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 801b094:	69bb      	ldr	r3, [r7, #24]
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d005      	beq.n	801b0ac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	2200      	movs	r2, #0
 801b0a4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	2200      	movs	r2, #0
 801b0aa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	695b      	ldr	r3, [r3, #20]
 801b0b0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 801b0b2:	69bb      	ldr	r3, [r7, #24]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d00c      	beq.n	801b0d8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 801b0be:	69bb      	ldr	r3, [r7, #24]
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	0c1b      	lsrs	r3, r3, #16
 801b0c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b0c8:	3b04      	subs	r3, #4
 801b0ca:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 801b0cc:	69bb      	ldr	r3, [r7, #24]
 801b0ce:	681a      	ldr	r2, [r3, #0]
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 801b0d4:	2301      	movs	r3, #1
 801b0d6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 801b0d8:	69bb      	ldr	r3, [r7, #24]
 801b0da:	689a      	ldr	r2, [r3, #8]
 801b0dc:	69bb      	ldr	r3, [r7, #24]
 801b0de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 801b0ec:	69bb      	ldr	r3, [r7, #24]
 801b0ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801b0f0:	461a      	mov	r2, r3
 801b0f2:	693b      	ldr	r3, [r7, #16]
 801b0f4:	b29b      	uxth	r3, r3
 801b0f6:	f006 fb4f 	bl	8021798 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b0fe:	1c5a      	adds	r2, r3, #1
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801b108:	693b      	ldr	r3, [r7, #16]
 801b10a:	441a      	add	r2, r3
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 801b110:	69bb      	ldr	r3, [r7, #24]
 801b112:	2200      	movs	r2, #0
 801b114:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 801b116:	69fb      	ldr	r3, [r7, #28]
 801b118:	3301      	adds	r3, #1
 801b11a:	61fb      	str	r3, [r7, #28]
 801b11c:	69fb      	ldr	r3, [r7, #28]
 801b11e:	2b03      	cmp	r3, #3
 801b120:	d902      	bls.n	801b128 <HAL_ETH_ReadData+0x11c>
 801b122:	69fb      	ldr	r3, [r7, #28]
 801b124:	3b04      	subs	r3, #4
 801b126:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	69fa      	ldr	r2, [r7, #28]
 801b12c:	3212      	adds	r2, #18
 801b12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b132:	61bb      	str	r3, [r7, #24]
    desccnt++;
 801b134:	697b      	ldr	r3, [r7, #20]
 801b136:	3301      	adds	r3, #1
 801b138:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801b13a:	69bb      	ldr	r3, [r7, #24]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	db06      	blt.n	801b150 <HAL_ETH_ReadData+0x144>
 801b142:	697a      	ldr	r2, [r7, #20]
 801b144:	68bb      	ldr	r3, [r7, #8]
 801b146:	429a      	cmp	r2, r3
 801b148:	d202      	bcs.n	801b150 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 801b14a:	7bfb      	ldrb	r3, [r7, #15]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d089      	beq.n	801b064 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b154:	697b      	ldr	r3, [r7, #20]
 801b156:	441a      	add	r2, r3
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b160:	2b00      	cmp	r3, #0
 801b162:	d002      	beq.n	801b16a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 801b164:	6878      	ldr	r0, [r7, #4]
 801b166:	f000 f815 	bl	801b194 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	69fa      	ldr	r2, [r7, #28]
 801b16e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 801b170:	7bfb      	ldrb	r3, [r7, #15]
 801b172:	2b01      	cmp	r3, #1
 801b174:	d108      	bne.n	801b188 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801b17a:	683b      	ldr	r3, [r7, #0]
 801b17c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	2200      	movs	r2, #0
 801b182:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801b184:	2300      	movs	r3, #0
 801b186:	e000      	b.n	801b18a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 801b188:	2301      	movs	r3, #1
}
 801b18a:	4618      	mov	r0, r3
 801b18c:	3720      	adds	r7, #32
 801b18e:	46bd      	mov	sp, r7
 801b190:	bd80      	pop	{r7, pc}
	...

0801b194 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 801b194:	b580      	push	{r7, lr}
 801b196:	b088      	sub	sp, #32
 801b198:	af00      	add	r7, sp, #0
 801b19a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 801b19c:	2300      	movs	r3, #0
 801b19e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 801b1a0:	2301      	movs	r3, #1
 801b1a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b1a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	69fa      	ldr	r2, [r7, #28]
 801b1ae:	3212      	adds	r2, #18
 801b1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b1b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b1ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 801b1bc:	e040      	b.n	801b240 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 801b1be:	697b      	ldr	r3, [r7, #20]
 801b1c0:	6a1b      	ldr	r3, [r3, #32]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d112      	bne.n	801b1ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 801b1c6:	f107 030c 	add.w	r3, r7, #12
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	f006 fab4 	bl	8021738 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d102      	bne.n	801b1dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	74fb      	strb	r3, [r7, #19]
 801b1da:	e007      	b.n	801b1ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	461a      	mov	r2, r3
 801b1e0:	697b      	ldr	r3, [r7, #20]
 801b1e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	461a      	mov	r2, r3
 801b1e8:	697b      	ldr	r3, [r7, #20]
 801b1ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 801b1ec:	7cfb      	ldrb	r3, [r7, #19]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d026      	beq.n	801b240 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d103      	bne.n	801b202 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801b1fa:	697b      	ldr	r3, [r7, #20]
 801b1fc:	4a1e      	ldr	r2, [pc, #120]	; (801b278 <ETH_UpdateDescriptor+0xe4>)
 801b1fe:	605a      	str	r2, [r3, #4]
 801b200:	e003      	b.n	801b20a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801b202:	697b      	ldr	r3, [r7, #20]
 801b204:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801b208:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 801b20a:	f3bf 8f5f 	dmb	sy
}
 801b20e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 801b210:	697b      	ldr	r3, [r7, #20]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 801b21c:	69fb      	ldr	r3, [r7, #28]
 801b21e:	3301      	adds	r3, #1
 801b220:	61fb      	str	r3, [r7, #28]
 801b222:	69fb      	ldr	r3, [r7, #28]
 801b224:	2b03      	cmp	r3, #3
 801b226:	d902      	bls.n	801b22e <ETH_UpdateDescriptor+0x9a>
 801b228:	69fb      	ldr	r3, [r7, #28]
 801b22a:	3b04      	subs	r3, #4
 801b22c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	69fa      	ldr	r2, [r7, #28]
 801b232:	3212      	adds	r2, #18
 801b234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b238:	617b      	str	r3, [r7, #20]
      desccount--;
 801b23a:	69bb      	ldr	r3, [r7, #24]
 801b23c:	3b01      	subs	r3, #1
 801b23e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 801b240:	69bb      	ldr	r3, [r7, #24]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d002      	beq.n	801b24c <ETH_UpdateDescriptor+0xb8>
 801b246:	7cfb      	ldrb	r3, [r7, #19]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d1b8      	bne.n	801b1be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b250:	69ba      	ldr	r2, [r7, #24]
 801b252:	429a      	cmp	r2, r3
 801b254:	d00c      	beq.n	801b270 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b25e:	461a      	mov	r2, r3
 801b260:	2300      	movs	r3, #0
 801b262:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	69fa      	ldr	r2, [r7, #28]
 801b268:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	69ba      	ldr	r2, [r7, #24]
 801b26e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 801b270:	bf00      	nop
 801b272:	3720      	adds	r7, #32
 801b274:	46bd      	mov	sp, r7
 801b276:	bd80      	pop	{r7, pc}
 801b278:	800045f8 	.word	0x800045f8

0801b27c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b082      	sub	sp, #8
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b28c:	695b      	ldr	r3, [r3, #20]
 801b28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b292:	2b40      	cmp	r3, #64	; 0x40
 801b294:	d112      	bne.n	801b2bc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b29e:	69db      	ldr	r3, [r3, #28]
 801b2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b2a4:	2b40      	cmp	r3, #64	; 0x40
 801b2a6:	d109      	bne.n	801b2bc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2b0:	461a      	mov	r2, r3
 801b2b2:	4b50      	ldr	r3, [pc, #320]	; (801b3f4 <HAL_ETH_IRQHandler+0x178>)
 801b2b4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 801b2b6:	6878      	ldr	r0, [r7, #4]
 801b2b8:	f000 f8ac 	bl	801b414 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2c4:	695b      	ldr	r3, [r3, #20]
 801b2c6:	f003 0301 	and.w	r3, r3, #1
 801b2ca:	2b01      	cmp	r3, #1
 801b2cc:	d113      	bne.n	801b2f6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2d6:	69db      	ldr	r3, [r3, #28]
 801b2d8:	f003 0301 	and.w	r3, r3, #1
 801b2dc:	2b01      	cmp	r3, #1
 801b2de:	d10a      	bne.n	801b2f6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2e8:	461a      	mov	r2, r3
 801b2ea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 801b2ee:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 801b2f0:	6878      	ldr	r0, [r7, #4]
 801b2f2:	f000 f885 	bl	801b400 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b2fe:	695b      	ldr	r3, [r3, #20]
 801b300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b308:	d14c      	bne.n	801b3a4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b312:	69db      	ldr	r3, [r3, #28]
 801b314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b31c:	d142      	bne.n	801b3a4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b324:	f043 0208 	orr.w	r2, r3, #8
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b336:	695b      	ldr	r3, [r3, #20]
 801b338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b33c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b340:	d11a      	bne.n	801b378 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b34a:	695a      	ldr	r2, [r3, #20]
 801b34c:	4b2a      	ldr	r3, [pc, #168]	; (801b3f8 <HAL_ETH_IRQHandler+0x17c>)
 801b34e:	4013      	ands	r3, r2
 801b350:	687a      	ldr	r2, [r7, #4]
 801b352:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b35e:	69db      	ldr	r3, [r3, #28]
 801b360:	687a      	ldr	r2, [r7, #4]
 801b362:	6812      	ldr	r2, [r2, #0]
 801b364:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 801b368:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b36c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	22e0      	movs	r2, #224	; 0xe0
 801b372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801b376:	e012      	b.n	801b39e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b380:	695a      	ldr	r2, [r3, #20]
 801b382:	f248 6380 	movw	r3, #34432	; 0x8680
 801b386:	4013      	ands	r3, r2
 801b388:	687a      	ldr	r2, [r7, #4]
 801b38a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b396:	461a      	mov	r2, r3
 801b398:	f248 6380 	movw	r3, #34432	; 0x8680
 801b39c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 801b39e:	6878      	ldr	r0, [r7, #4]
 801b3a0:	f000 f842 	bl	801b428 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3aa:	f003 0308 	and.w	r3, r3, #8
 801b3ae:	2b08      	cmp	r3, #8
 801b3b0:	d10e      	bne.n	801b3d0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	681b      	ldr	r3, [r3, #0]
 801b3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3b8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 801b3c2:	6878      	ldr	r0, [r7, #4]
 801b3c4:	f000 f83a 	bl	801b43c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 801b3d0:	4b0a      	ldr	r3, [pc, #40]	; (801b3fc <HAL_ETH_IRQHandler+0x180>)
 801b3d2:	695b      	ldr	r3, [r3, #20]
 801b3d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d006      	beq.n	801b3ea <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 801b3dc:	4b07      	ldr	r3, [pc, #28]	; (801b3fc <HAL_ETH_IRQHandler+0x180>)
 801b3de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801b3e2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 801b3e4:	6878      	ldr	r0, [r7, #4]
 801b3e6:	f000 f833 	bl	801b450 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 801b3ea:	bf00      	nop
 801b3ec:	3708      	adds	r7, #8
 801b3ee:	46bd      	mov	sp, r7
 801b3f0:	bd80      	pop	{r7, pc}
 801b3f2:	bf00      	nop
 801b3f4:	00010040 	.word	0x00010040
 801b3f8:	007e2000 	.word	0x007e2000
 801b3fc:	40013c00 	.word	0x40013c00

0801b400 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 801b400:	b480      	push	{r7}
 801b402:	b083      	sub	sp, #12
 801b404:	af00      	add	r7, sp, #0
 801b406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 801b408:	bf00      	nop
 801b40a:	370c      	adds	r7, #12
 801b40c:	46bd      	mov	sp, r7
 801b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b412:	4770      	bx	lr

0801b414 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 801b414:	b480      	push	{r7}
 801b416:	b083      	sub	sp, #12
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 801b41c:	bf00      	nop
 801b41e:	370c      	adds	r7, #12
 801b420:	46bd      	mov	sp, r7
 801b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b426:	4770      	bx	lr

0801b428 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 801b428:	b480      	push	{r7}
 801b42a:	b083      	sub	sp, #12
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 801b430:	bf00      	nop
 801b432:	370c      	adds	r7, #12
 801b434:	46bd      	mov	sp, r7
 801b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b43a:	4770      	bx	lr

0801b43c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 801b43c:	b480      	push	{r7}
 801b43e:	b083      	sub	sp, #12
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 801b444:	bf00      	nop
 801b446:	370c      	adds	r7, #12
 801b448:	46bd      	mov	sp, r7
 801b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b44e:	4770      	bx	lr

0801b450 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 801b450:	b480      	push	{r7}
 801b452:	b083      	sub	sp, #12
 801b454:	af00      	add	r7, sp, #0
 801b456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 801b458:	bf00      	nop
 801b45a:	370c      	adds	r7, #12
 801b45c:	46bd      	mov	sp, r7
 801b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b462:	4770      	bx	lr

0801b464 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 801b464:	b580      	push	{r7, lr}
 801b466:	b086      	sub	sp, #24
 801b468:	af00      	add	r7, sp, #0
 801b46a:	60f8      	str	r0, [r7, #12]
 801b46c:	60b9      	str	r1, [r7, #8]
 801b46e:	607a      	str	r2, [r7, #4]
 801b470:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801b472:	68fb      	ldr	r3, [r7, #12]
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	691b      	ldr	r3, [r3, #16]
 801b478:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801b47a:	697b      	ldr	r3, [r7, #20]
 801b47c:	f003 031c 	and.w	r3, r3, #28
 801b480:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 801b482:	68bb      	ldr	r3, [r7, #8]
 801b484:	02db      	lsls	r3, r3, #11
 801b486:	b29b      	uxth	r3, r3
 801b488:	697a      	ldr	r2, [r7, #20]
 801b48a:	4313      	orrs	r3, r2
 801b48c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	019b      	lsls	r3, r3, #6
 801b492:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801b496:	697a      	ldr	r2, [r7, #20]
 801b498:	4313      	orrs	r3, r2
 801b49a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 801b49c:	697b      	ldr	r3, [r7, #20]
 801b49e:	f023 0302 	bic.w	r3, r3, #2
 801b4a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 801b4a4:	697b      	ldr	r3, [r7, #20]
 801b4a6:	f043 0301 	orr.w	r3, r3, #1
 801b4aa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	697a      	ldr	r2, [r7, #20]
 801b4b2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 801b4b4:	f7fe fabc 	bl	8019a30 <HAL_GetTick>
 801b4b8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801b4ba:	e00d      	b.n	801b4d8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 801b4bc:	f7fe fab8 	bl	8019a30 <HAL_GetTick>
 801b4c0:	4602      	mov	r2, r0
 801b4c2:	693b      	ldr	r3, [r7, #16]
 801b4c4:	1ad3      	subs	r3, r2, r3
 801b4c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b4ca:	d301      	bcc.n	801b4d0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 801b4cc:	2301      	movs	r3, #1
 801b4ce:	e010      	b.n	801b4f2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	691b      	ldr	r3, [r3, #16]
 801b4d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801b4d8:	697b      	ldr	r3, [r7, #20]
 801b4da:	f003 0301 	and.w	r3, r3, #1
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d1ec      	bne.n	801b4bc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	695b      	ldr	r3, [r3, #20]
 801b4e8:	b29b      	uxth	r3, r3
 801b4ea:	461a      	mov	r2, r3
 801b4ec:	683b      	ldr	r3, [r7, #0]
 801b4ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801b4f0:	2300      	movs	r3, #0
}
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	3718      	adds	r7, #24
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}

0801b4fa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 801b4fa:	b580      	push	{r7, lr}
 801b4fc:	b086      	sub	sp, #24
 801b4fe:	af00      	add	r7, sp, #0
 801b500:	60f8      	str	r0, [r7, #12]
 801b502:	60b9      	str	r1, [r7, #8]
 801b504:	607a      	str	r2, [r7, #4]
 801b506:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801b508:	68fb      	ldr	r3, [r7, #12]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	691b      	ldr	r3, [r3, #16]
 801b50e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801b510:	697b      	ldr	r3, [r7, #20]
 801b512:	f003 031c 	and.w	r3, r3, #28
 801b516:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 801b518:	68bb      	ldr	r3, [r7, #8]
 801b51a:	02db      	lsls	r3, r3, #11
 801b51c:	b29b      	uxth	r3, r3
 801b51e:	697a      	ldr	r2, [r7, #20]
 801b520:	4313      	orrs	r3, r2
 801b522:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	019b      	lsls	r3, r3, #6
 801b528:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801b52c:	697a      	ldr	r2, [r7, #20]
 801b52e:	4313      	orrs	r3, r2
 801b530:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 801b532:	697b      	ldr	r3, [r7, #20]
 801b534:	f043 0302 	orr.w	r3, r3, #2
 801b538:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801b53a:	697b      	ldr	r3, [r7, #20]
 801b53c:	f043 0301 	orr.w	r3, r3, #1
 801b540:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801b542:	683b      	ldr	r3, [r7, #0]
 801b544:	b29a      	uxth	r2, r3
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	697a      	ldr	r2, [r7, #20]
 801b552:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b554:	f7fe fa6c 	bl	8019a30 <HAL_GetTick>
 801b558:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801b55a:	e00d      	b.n	801b578 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 801b55c:	f7fe fa68 	bl	8019a30 <HAL_GetTick>
 801b560:	4602      	mov	r2, r0
 801b562:	693b      	ldr	r3, [r7, #16]
 801b564:	1ad3      	subs	r3, r2, r3
 801b566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b56a:	d301      	bcc.n	801b570 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 801b56c:	2301      	movs	r3, #1
 801b56e:	e009      	b.n	801b584 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801b570:	68fb      	ldr	r3, [r7, #12]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	691b      	ldr	r3, [r3, #16]
 801b576:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801b578:	697b      	ldr	r3, [r7, #20]
 801b57a:	f003 0301 	and.w	r3, r3, #1
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d1ec      	bne.n	801b55c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 801b582:	2300      	movs	r3, #0
}
 801b584:	4618      	mov	r0, r3
 801b586:	3718      	adds	r7, #24
 801b588:	46bd      	mov	sp, r7
 801b58a:	bd80      	pop	{r7, pc}

0801b58c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 801b58c:	b480      	push	{r7}
 801b58e:	b083      	sub	sp, #12
 801b590:	af00      	add	r7, sp, #0
 801b592:	6078      	str	r0, [r7, #4]
 801b594:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801b596:	683b      	ldr	r3, [r7, #0]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d101      	bne.n	801b5a0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 801b59c:	2301      	movs	r3, #1
 801b59e:	e0d9      	b.n	801b754 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	f003 0310 	and.w	r3, r3, #16
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	bf14      	ite	ne
 801b5ae:	2301      	movne	r3, #1
 801b5b0:	2300      	moveq	r3, #0
 801b5b2:	b2db      	uxtb	r3, r3
 801b5b4:	461a      	mov	r2, r3
 801b5b6:	683b      	ldr	r3, [r7, #0]
 801b5b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801b5c6:	683b      	ldr	r3, [r7, #0]
 801b5c8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	bf0c      	ite	eq
 801b5d8:	2301      	moveq	r3, #1
 801b5da:	2300      	movne	r3, #0
 801b5dc:	b2db      	uxtb	r3, r3
 801b5de:	461a      	mov	r2, r3
 801b5e0:	683b      	ldr	r3, [r7, #0]
 801b5e2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	bf14      	ite	ne
 801b5f4:	2301      	movne	r3, #1
 801b5f6:	2300      	moveq	r3, #0
 801b5f8:	b2db      	uxtb	r3, r3
 801b5fa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801b5fc:	683b      	ldr	r3, [r7, #0]
 801b5fe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	bf0c      	ite	eq
 801b60e:	2301      	moveq	r3, #1
 801b610:	2300      	movne	r3, #0
 801b612:	b2db      	uxtb	r3, r3
 801b614:	461a      	mov	r2, r3
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b624:	2b00      	cmp	r3, #0
 801b626:	bf14      	ite	ne
 801b628:	2301      	movne	r3, #1
 801b62a:	2300      	moveq	r3, #0
 801b62c:	b2db      	uxtb	r3, r3
 801b62e:	461a      	mov	r2, r3
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 801b63e:	683b      	ldr	r3, [r7, #0]
 801b640:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 801b64c:	683b      	ldr	r3, [r7, #0]
 801b64e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	bf0c      	ite	eq
 801b65e:	2301      	moveq	r3, #1
 801b660:	2300      	movne	r3, #0
 801b662:	b2db      	uxtb	r3, r3
 801b664:	461a      	mov	r2, r3
 801b666:	683b      	ldr	r3, [r7, #0]
 801b668:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b674:	2b00      	cmp	r3, #0
 801b676:	bf0c      	ite	eq
 801b678:	2301      	moveq	r3, #1
 801b67a:	2300      	movne	r3, #0
 801b67c:	b2db      	uxtb	r3, r3
 801b67e:	461a      	mov	r2, r3
 801b680:	683b      	ldr	r3, [r7, #0]
 801b682:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b68e:	2b00      	cmp	r3, #0
 801b690:	bf14      	ite	ne
 801b692:	2301      	movne	r3, #1
 801b694:	2300      	moveq	r3, #0
 801b696:	b2db      	uxtb	r3, r3
 801b698:	461a      	mov	r2, r3
 801b69a:	683b      	ldr	r3, [r7, #0]
 801b69c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 801b6a8:	683b      	ldr	r3, [r7, #0]
 801b6aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	bf14      	ite	ne
 801b6ba:	2301      	movne	r3, #1
 801b6bc:	2300      	moveq	r3, #0
 801b6be:	b2db      	uxtb	r3, r3
 801b6c0:	461a      	mov	r2, r3
 801b6c2:	683b      	ldr	r3, [r7, #0]
 801b6c4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	699b      	ldr	r3, [r3, #24]
 801b6cc:	f003 0302 	and.w	r3, r3, #2
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	bf14      	ite	ne
 801b6d4:	2301      	movne	r3, #1
 801b6d6:	2300      	moveq	r3, #0
 801b6d8:	b2db      	uxtb	r3, r3
 801b6da:	461a      	mov	r2, r3
 801b6dc:	683b      	ldr	r3, [r7, #0]
 801b6de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	699b      	ldr	r3, [r3, #24]
 801b6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	bf0c      	ite	eq
 801b6f0:	2301      	moveq	r3, #1
 801b6f2:	2300      	movne	r3, #0
 801b6f4:	b2db      	uxtb	r3, r3
 801b6f6:	461a      	mov	r2, r3
 801b6f8:	683b      	ldr	r3, [r7, #0]
 801b6fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	699b      	ldr	r3, [r3, #24]
 801b704:	f003 0230 	and.w	r2, r3, #48	; 0x30
 801b708:	683b      	ldr	r3, [r7, #0]
 801b70a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	699b      	ldr	r3, [r3, #24]
 801b712:	0c1b      	lsrs	r3, r3, #16
 801b714:	b29a      	uxth	r2, r3
 801b716:	683b      	ldr	r3, [r7, #0]
 801b718:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	699b      	ldr	r3, [r3, #24]
 801b720:	f003 0304 	and.w	r3, r3, #4
 801b724:	2b00      	cmp	r3, #0
 801b726:	bf14      	ite	ne
 801b728:	2301      	movne	r3, #1
 801b72a:	2300      	moveq	r3, #0
 801b72c:	b2db      	uxtb	r3, r3
 801b72e:	461a      	mov	r2, r3
 801b730:	683b      	ldr	r3, [r7, #0]
 801b732:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	699b      	ldr	r3, [r3, #24]
 801b73c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 801b740:	2b00      	cmp	r3, #0
 801b742:	bf14      	ite	ne
 801b744:	2301      	movne	r3, #1
 801b746:	2300      	moveq	r3, #0
 801b748:	b2db      	uxtb	r3, r3
 801b74a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 801b752:	2300      	movs	r3, #0
}
 801b754:	4618      	mov	r0, r3
 801b756:	370c      	adds	r7, #12
 801b758:	46bd      	mov	sp, r7
 801b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b75e:	4770      	bx	lr

0801b760 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b082      	sub	sp, #8
 801b764:	af00      	add	r7, sp, #0
 801b766:	6078      	str	r0, [r7, #4]
 801b768:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d101      	bne.n	801b774 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 801b770:	2301      	movs	r3, #1
 801b772:	e00b      	b.n	801b78c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b77a:	2b10      	cmp	r3, #16
 801b77c:	d105      	bne.n	801b78a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 801b77e:	6839      	ldr	r1, [r7, #0]
 801b780:	6878      	ldr	r0, [r7, #4]
 801b782:	f000 f883 	bl	801b88c <ETH_SetMACConfig>

    return HAL_OK;
 801b786:	2300      	movs	r3, #0
 801b788:	e000      	b.n	801b78c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 801b78a:	2301      	movs	r3, #1
  }
}
 801b78c:	4618      	mov	r0, r3
 801b78e:	3708      	adds	r7, #8
 801b790:	46bd      	mov	sp, r7
 801b792:	bd80      	pop	{r7, pc}

0801b794 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801b794:	b580      	push	{r7, lr}
 801b796:	b084      	sub	sp, #16
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	691b      	ldr	r3, [r3, #16]
 801b7a2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	f023 031c 	bic.w	r3, r3, #28
 801b7aa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801b7ac:	f002 f916 	bl	801d9dc <HAL_RCC_GetHCLKFreq>
 801b7b0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 801b7b2:	68bb      	ldr	r3, [r7, #8]
 801b7b4:	4a1d      	ldr	r2, [pc, #116]	; (801b82c <HAL_ETH_SetMDIOClockRange+0x98>)
 801b7b6:	4293      	cmp	r3, r2
 801b7b8:	d908      	bls.n	801b7cc <HAL_ETH_SetMDIOClockRange+0x38>
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	4a1c      	ldr	r2, [pc, #112]	; (801b830 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801b7be:	4293      	cmp	r3, r2
 801b7c0:	d804      	bhi.n	801b7cc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	f043 0308 	orr.w	r3, r3, #8
 801b7c8:	60fb      	str	r3, [r7, #12]
 801b7ca:	e027      	b.n	801b81c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 801b7cc:	68bb      	ldr	r3, [r7, #8]
 801b7ce:	4a18      	ldr	r2, [pc, #96]	; (801b830 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801b7d0:	4293      	cmp	r3, r2
 801b7d2:	d908      	bls.n	801b7e6 <HAL_ETH_SetMDIOClockRange+0x52>
 801b7d4:	68bb      	ldr	r3, [r7, #8]
 801b7d6:	4a17      	ldr	r2, [pc, #92]	; (801b834 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801b7d8:	4293      	cmp	r3, r2
 801b7da:	d204      	bcs.n	801b7e6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	f043 030c 	orr.w	r3, r3, #12
 801b7e2:	60fb      	str	r3, [r7, #12]
 801b7e4:	e01a      	b.n	801b81c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 801b7e6:	68bb      	ldr	r3, [r7, #8]
 801b7e8:	4a12      	ldr	r2, [pc, #72]	; (801b834 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801b7ea:	4293      	cmp	r3, r2
 801b7ec:	d303      	bcc.n	801b7f6 <HAL_ETH_SetMDIOClockRange+0x62>
 801b7ee:	68bb      	ldr	r3, [r7, #8]
 801b7f0:	4a11      	ldr	r2, [pc, #68]	; (801b838 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801b7f2:	4293      	cmp	r3, r2
 801b7f4:	d911      	bls.n	801b81a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801b7f6:	68bb      	ldr	r3, [r7, #8]
 801b7f8:	4a0f      	ldr	r2, [pc, #60]	; (801b838 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801b7fa:	4293      	cmp	r3, r2
 801b7fc:	d908      	bls.n	801b810 <HAL_ETH_SetMDIOClockRange+0x7c>
 801b7fe:	68bb      	ldr	r3, [r7, #8]
 801b800:	4a0e      	ldr	r2, [pc, #56]	; (801b83c <HAL_ETH_SetMDIOClockRange+0xa8>)
 801b802:	4293      	cmp	r3, r2
 801b804:	d804      	bhi.n	801b810 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	f043 0304 	orr.w	r3, r3, #4
 801b80c:	60fb      	str	r3, [r7, #12]
 801b80e:	e005      	b.n	801b81c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	f043 0310 	orr.w	r3, r3, #16
 801b816:	60fb      	str	r3, [r7, #12]
 801b818:	e000      	b.n	801b81c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801b81a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	68fa      	ldr	r2, [r7, #12]
 801b822:	611a      	str	r2, [r3, #16]
}
 801b824:	bf00      	nop
 801b826:	3710      	adds	r7, #16
 801b828:	46bd      	mov	sp, r7
 801b82a:	bd80      	pop	{r7, pc}
 801b82c:	01312cff 	.word	0x01312cff
 801b830:	02160ebf 	.word	0x02160ebf
 801b834:	03938700 	.word	0x03938700
 801b838:	05f5e0ff 	.word	0x05f5e0ff
 801b83c:	08f0d17f 	.word	0x08f0d17f

0801b840 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 801b840:	b580      	push	{r7, lr}
 801b842:	b084      	sub	sp, #16
 801b844:	af00      	add	r7, sp, #0
 801b846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 801b848:	2300      	movs	r3, #0
 801b84a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b854:	699b      	ldr	r3, [r3, #24]
 801b856:	687a      	ldr	r2, [r7, #4]
 801b858:	6812      	ldr	r2, [r2, #0]
 801b85a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b85e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b862:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b86c:	699b      	ldr	r3, [r3, #24]
 801b86e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b870:	2001      	movs	r0, #1
 801b872:	f7fe f8e9 	bl	8019a48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	681a      	ldr	r2, [r3, #0]
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b880:	6193      	str	r3, [r2, #24]
}
 801b882:	bf00      	nop
 801b884:	3710      	adds	r7, #16
 801b886:	46bd      	mov	sp, r7
 801b888:	bd80      	pop	{r7, pc}
	...

0801b88c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b084      	sub	sp, #16
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
 801b894:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 801b89e:	68fa      	ldr	r2, [r7, #12]
 801b8a0:	4b51      	ldr	r3, [pc, #324]	; (801b9e8 <ETH_SetMACConfig+0x15c>)
 801b8a2:	4013      	ands	r3, r2
 801b8a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801b8a6:	683b      	ldr	r3, [r7, #0]
 801b8a8:	7c1b      	ldrb	r3, [r3, #16]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d102      	bne.n	801b8b4 <ETH_SetMACConfig+0x28>
 801b8ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801b8b2:	e000      	b.n	801b8b6 <ETH_SetMACConfig+0x2a>
 801b8b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801b8b6:	683b      	ldr	r3, [r7, #0]
 801b8b8:	7c5b      	ldrb	r3, [r3, #17]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d102      	bne.n	801b8c4 <ETH_SetMACConfig+0x38>
 801b8be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b8c2:	e000      	b.n	801b8c6 <ETH_SetMACConfig+0x3a>
 801b8c4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801b8c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 801b8c8:	683b      	ldr	r3, [r7, #0]
 801b8ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801b8cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801b8ce:	683b      	ldr	r3, [r7, #0]
 801b8d0:	7fdb      	ldrb	r3, [r3, #31]
 801b8d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 801b8d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 801b8d6:	683b      	ldr	r3, [r7, #0]
 801b8d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801b8da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801b8dc:	683a      	ldr	r2, [r7, #0]
 801b8de:	7f92      	ldrb	r2, [r2, #30]
 801b8e0:	2a00      	cmp	r2, #0
 801b8e2:	d102      	bne.n	801b8ea <ETH_SetMACConfig+0x5e>
 801b8e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801b8e8:	e000      	b.n	801b8ec <ETH_SetMACConfig+0x60>
 801b8ea:	2200      	movs	r2, #0
                        macconf->Speed |
 801b8ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801b8ee:	683b      	ldr	r3, [r7, #0]
 801b8f0:	7f1b      	ldrb	r3, [r3, #28]
 801b8f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801b8f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801b8f6:	683b      	ldr	r3, [r7, #0]
 801b8f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801b8fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801b8fc:	683b      	ldr	r3, [r7, #0]
 801b8fe:	791b      	ldrb	r3, [r3, #4]
 801b900:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 801b902:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801b904:	683a      	ldr	r2, [r7, #0]
 801b906:	f892 2020 	ldrb.w	r2, [r2, #32]
 801b90a:	2a00      	cmp	r2, #0
 801b90c:	d102      	bne.n	801b914 <ETH_SetMACConfig+0x88>
 801b90e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b912:	e000      	b.n	801b916 <ETH_SetMACConfig+0x8a>
 801b914:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801b916:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801b918:	683b      	ldr	r3, [r7, #0]
 801b91a:	7bdb      	ldrb	r3, [r3, #15]
 801b91c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801b91e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 801b920:	683b      	ldr	r3, [r7, #0]
 801b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801b924:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801b926:	683b      	ldr	r3, [r7, #0]
 801b928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b92c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801b92e:	4313      	orrs	r3, r2
 801b930:	68fa      	ldr	r2, [r7, #12]
 801b932:	4313      	orrs	r3, r2
 801b934:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	68fa      	ldr	r2, [r7, #12]
 801b93c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b946:	2001      	movs	r0, #1
 801b948:	f7fe f87e 	bl	8019a48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	68fa      	ldr	r2, [r7, #12]
 801b952:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	699b      	ldr	r3, [r3, #24]
 801b95a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 801b95c:	68fa      	ldr	r2, [r7, #12]
 801b95e:	f64f 7341 	movw	r3, #65345	; 0xff41
 801b962:	4013      	ands	r3, r2
 801b964:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801b966:	683b      	ldr	r3, [r7, #0]
 801b968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b96a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801b96c:	683a      	ldr	r2, [r7, #0]
 801b96e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 801b972:	2a00      	cmp	r2, #0
 801b974:	d101      	bne.n	801b97a <ETH_SetMACConfig+0xee>
 801b976:	2280      	movs	r2, #128	; 0x80
 801b978:	e000      	b.n	801b97c <ETH_SetMACConfig+0xf0>
 801b97a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801b97c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 801b97e:	683b      	ldr	r3, [r7, #0]
 801b980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801b982:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801b984:	683a      	ldr	r2, [r7, #0]
 801b986:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 801b98a:	2a01      	cmp	r2, #1
 801b98c:	d101      	bne.n	801b992 <ETH_SetMACConfig+0x106>
 801b98e:	2208      	movs	r2, #8
 801b990:	e000      	b.n	801b994 <ETH_SetMACConfig+0x108>
 801b992:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 801b994:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 801b996:	683a      	ldr	r2, [r7, #0]
 801b998:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801b99c:	2a01      	cmp	r2, #1
 801b99e:	d101      	bne.n	801b9a4 <ETH_SetMACConfig+0x118>
 801b9a0:	2204      	movs	r2, #4
 801b9a2:	e000      	b.n	801b9a6 <ETH_SetMACConfig+0x11a>
 801b9a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801b9a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 801b9a8:	683a      	ldr	r2, [r7, #0]
 801b9aa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 801b9ae:	2a01      	cmp	r2, #1
 801b9b0:	d101      	bne.n	801b9b6 <ETH_SetMACConfig+0x12a>
 801b9b2:	2202      	movs	r2, #2
 801b9b4:	e000      	b.n	801b9b8 <ETH_SetMACConfig+0x12c>
 801b9b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801b9b8:	4313      	orrs	r3, r2
 801b9ba:	68fa      	ldr	r2, [r7, #12]
 801b9bc:	4313      	orrs	r3, r2
 801b9be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	68fa      	ldr	r2, [r7, #12]
 801b9c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	699b      	ldr	r3, [r3, #24]
 801b9ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b9d0:	2001      	movs	r0, #1
 801b9d2:	f7fe f839 	bl	8019a48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	68fa      	ldr	r2, [r7, #12]
 801b9dc:	619a      	str	r2, [r3, #24]
}
 801b9de:	bf00      	nop
 801b9e0:	3710      	adds	r7, #16
 801b9e2:	46bd      	mov	sp, r7
 801b9e4:	bd80      	pop	{r7, pc}
 801b9e6:	bf00      	nop
 801b9e8:	ff20810f 	.word	0xff20810f

0801b9ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 801b9ec:	b580      	push	{r7, lr}
 801b9ee:	b084      	sub	sp, #16
 801b9f0:	af00      	add	r7, sp, #0
 801b9f2:	6078      	str	r0, [r7, #4]
 801b9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b9fe:	699b      	ldr	r3, [r3, #24]
 801ba00:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 801ba02:	68fa      	ldr	r2, [r7, #12]
 801ba04:	4b3d      	ldr	r3, [pc, #244]	; (801bafc <ETH_SetDMAConfig+0x110>)
 801ba06:	4013      	ands	r3, r2
 801ba08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801ba0a:	683b      	ldr	r3, [r7, #0]
 801ba0c:	7b1b      	ldrb	r3, [r3, #12]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d102      	bne.n	801ba18 <ETH_SetDMAConfig+0x2c>
 801ba12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801ba16:	e000      	b.n	801ba1a <ETH_SetDMAConfig+0x2e>
 801ba18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801ba1a:	683b      	ldr	r3, [r7, #0]
 801ba1c:	7b5b      	ldrb	r3, [r3, #13]
 801ba1e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801ba20:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801ba22:	683a      	ldr	r2, [r7, #0]
 801ba24:	7f52      	ldrb	r2, [r2, #29]
 801ba26:	2a00      	cmp	r2, #0
 801ba28:	d102      	bne.n	801ba30 <ETH_SetDMAConfig+0x44>
 801ba2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801ba2e:	e000      	b.n	801ba32 <ETH_SetDMAConfig+0x46>
 801ba30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801ba32:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801ba34:	683b      	ldr	r3, [r7, #0]
 801ba36:	7b9b      	ldrb	r3, [r3, #14]
 801ba38:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801ba3a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 801ba3c:	683b      	ldr	r3, [r7, #0]
 801ba3e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801ba40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801ba42:	683b      	ldr	r3, [r7, #0]
 801ba44:	7f1b      	ldrb	r3, [r3, #28]
 801ba46:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 801ba48:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801ba4a:	683b      	ldr	r3, [r7, #0]
 801ba4c:	7f9b      	ldrb	r3, [r3, #30]
 801ba4e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801ba50:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 801ba52:	683b      	ldr	r3, [r7, #0]
 801ba54:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801ba56:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 801ba58:	683b      	ldr	r3, [r7, #0]
 801ba5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ba5e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801ba60:	4313      	orrs	r3, r2
 801ba62:	68fa      	ldr	r2, [r7, #12]
 801ba64:	4313      	orrs	r3, r2
 801ba66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ba70:	461a      	mov	r2, r3
 801ba72:	68fb      	ldr	r3, [r7, #12]
 801ba74:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ba7e:	699b      	ldr	r3, [r3, #24]
 801ba80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801ba82:	2001      	movs	r0, #1
 801ba84:	f7fd ffe0 	bl	8019a48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ba90:	461a      	mov	r2, r3
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801ba96:	683b      	ldr	r3, [r7, #0]
 801ba98:	791b      	ldrb	r3, [r3, #4]
 801ba9a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 801ba9c:	683b      	ldr	r3, [r7, #0]
 801ba9e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801baa0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801baa2:	683b      	ldr	r3, [r7, #0]
 801baa4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 801baa6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 801baa8:	683b      	ldr	r3, [r7, #0]
 801baaa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801baac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801baae:	683b      	ldr	r3, [r7, #0]
 801bab0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801bab4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 801bab6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801bab8:	683b      	ldr	r3, [r7, #0]
 801baba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801babc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801babe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 801bac0:	683b      	ldr	r3, [r7, #0]
 801bac2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801bac4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801bac6:	687a      	ldr	r2, [r7, #4]
 801bac8:	6812      	ldr	r2, [r2, #0]
 801baca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801bace:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801bad2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801bae0:	2001      	movs	r0, #1
 801bae2:	f7fd ffb1 	bl	8019a48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801baee:	461a      	mov	r2, r3
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	6013      	str	r3, [r2, #0]
}
 801baf4:	bf00      	nop
 801baf6:	3710      	adds	r7, #16
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd80      	pop	{r7, pc}
 801bafc:	f8de3f23 	.word	0xf8de3f23

0801bb00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b0a6      	sub	sp, #152	; 0x98
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 801bb08:	2301      	movs	r3, #1
 801bb0a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 801bb0e:	2301      	movs	r3, #1
 801bb10:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 801bb14:	2300      	movs	r3, #0
 801bb16:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801bb18:	2300      	movs	r3, #0
 801bb1a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 801bb1e:	2301      	movs	r3, #1
 801bb20:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 801bb24:	2300      	movs	r3, #0
 801bb26:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 801bb2a:	2301      	movs	r3, #1
 801bb2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 801bb30:	2300      	movs	r3, #0
 801bb32:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 801bb36:	2300      	movs	r3, #0
 801bb38:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801bb3c:	2300      	movs	r3, #0
 801bb3e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 801bb40:	2300      	movs	r3, #0
 801bb42:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 801bb46:	2300      	movs	r3, #0
 801bb48:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801bb50:	2300      	movs	r3, #0
 801bb52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801bb56:	2300      	movs	r3, #0
 801bb58:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 801bb62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801bb66:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801bb68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bb6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801bb6e:	2300      	movs	r3, #0
 801bb70:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801bb74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801bb78:	4619      	mov	r1, r3
 801bb7a:	6878      	ldr	r0, [r7, #4]
 801bb7c:	f7ff fe86 	bl	801b88c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 801bb80:	2301      	movs	r3, #1
 801bb82:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 801bb84:	2301      	movs	r3, #1
 801bb86:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 801bb88:	2301      	movs	r3, #1
 801bb8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 801bb8e:	2301      	movs	r3, #1
 801bb90:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 801bb92:	2300      	movs	r3, #0
 801bb94:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 801bb96:	2300      	movs	r3, #0
 801bb98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 801bb9c:	2300      	movs	r3, #0
 801bb9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 801bba2:	2300      	movs	r3, #0
 801bba4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 801bba6:	2301      	movs	r3, #1
 801bba8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801bbac:	2301      	movs	r3, #1
 801bbae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801bbb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801bbb4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801bbb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801bbba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801bbbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801bbc0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 801bbc2:	2301      	movs	r3, #1
 801bbc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 801bbc8:	2300      	movs	r3, #0
 801bbca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 801bbcc:	2300      	movs	r3, #0
 801bbce:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801bbd0:	f107 0308 	add.w	r3, r7, #8
 801bbd4:	4619      	mov	r1, r3
 801bbd6:	6878      	ldr	r0, [r7, #4]
 801bbd8:	f7ff ff08 	bl	801b9ec <ETH_SetDMAConfig>
}
 801bbdc:	bf00      	nop
 801bbde:	3798      	adds	r7, #152	; 0x98
 801bbe0:	46bd      	mov	sp, r7
 801bbe2:	bd80      	pop	{r7, pc}

0801bbe4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 801bbe4:	b480      	push	{r7}
 801bbe6:	b087      	sub	sp, #28
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	60f8      	str	r0, [r7, #12]
 801bbec:	60b9      	str	r1, [r7, #8]
 801bbee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	3305      	adds	r3, #5
 801bbf4:	781b      	ldrb	r3, [r3, #0]
 801bbf6:	021b      	lsls	r3, r3, #8
 801bbf8:	687a      	ldr	r2, [r7, #4]
 801bbfa:	3204      	adds	r2, #4
 801bbfc:	7812      	ldrb	r2, [r2, #0]
 801bbfe:	4313      	orrs	r3, r2
 801bc00:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 801bc02:	68ba      	ldr	r2, [r7, #8]
 801bc04:	4b11      	ldr	r3, [pc, #68]	; (801bc4c <ETH_MACAddressConfig+0x68>)
 801bc06:	4413      	add	r3, r2
 801bc08:	461a      	mov	r2, r3
 801bc0a:	697b      	ldr	r3, [r7, #20]
 801bc0c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	3303      	adds	r3, #3
 801bc12:	781b      	ldrb	r3, [r3, #0]
 801bc14:	061a      	lsls	r2, r3, #24
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	3302      	adds	r3, #2
 801bc1a:	781b      	ldrb	r3, [r3, #0]
 801bc1c:	041b      	lsls	r3, r3, #16
 801bc1e:	431a      	orrs	r2, r3
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	3301      	adds	r3, #1
 801bc24:	781b      	ldrb	r3, [r3, #0]
 801bc26:	021b      	lsls	r3, r3, #8
 801bc28:	4313      	orrs	r3, r2
 801bc2a:	687a      	ldr	r2, [r7, #4]
 801bc2c:	7812      	ldrb	r2, [r2, #0]
 801bc2e:	4313      	orrs	r3, r2
 801bc30:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 801bc32:	68ba      	ldr	r2, [r7, #8]
 801bc34:	4b06      	ldr	r3, [pc, #24]	; (801bc50 <ETH_MACAddressConfig+0x6c>)
 801bc36:	4413      	add	r3, r2
 801bc38:	461a      	mov	r2, r3
 801bc3a:	697b      	ldr	r3, [r7, #20]
 801bc3c:	6013      	str	r3, [r2, #0]
}
 801bc3e:	bf00      	nop
 801bc40:	371c      	adds	r7, #28
 801bc42:	46bd      	mov	sp, r7
 801bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc48:	4770      	bx	lr
 801bc4a:	bf00      	nop
 801bc4c:	40028040 	.word	0x40028040
 801bc50:	40028044 	.word	0x40028044

0801bc54 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801bc54:	b480      	push	{r7}
 801bc56:	b085      	sub	sp, #20
 801bc58:	af00      	add	r7, sp, #0
 801bc5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	60fb      	str	r3, [r7, #12]
 801bc60:	e03e      	b.n	801bce0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	68d9      	ldr	r1, [r3, #12]
 801bc66:	68fa      	ldr	r2, [r7, #12]
 801bc68:	4613      	mov	r3, r2
 801bc6a:	009b      	lsls	r3, r3, #2
 801bc6c:	4413      	add	r3, r2
 801bc6e:	00db      	lsls	r3, r3, #3
 801bc70:	440b      	add	r3, r1
 801bc72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 801bc74:	68bb      	ldr	r3, [r7, #8]
 801bc76:	2200      	movs	r2, #0
 801bc78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 801bc7a:	68bb      	ldr	r3, [r7, #8]
 801bc7c:	2200      	movs	r2, #0
 801bc7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 801bc80:	68bb      	ldr	r3, [r7, #8]
 801bc82:	2200      	movs	r2, #0
 801bc84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 801bc86:	68bb      	ldr	r3, [r7, #8]
 801bc88:	2200      	movs	r2, #0
 801bc8a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801bc8c:	68b9      	ldr	r1, [r7, #8]
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	68fa      	ldr	r2, [r7, #12]
 801bc92:	3206      	adds	r2, #6
 801bc94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 801bc98:	68bb      	ldr	r3, [r7, #8]
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801bca0:	68bb      	ldr	r3, [r7, #8]
 801bca2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	2b02      	cmp	r3, #2
 801bca8:	d80c      	bhi.n	801bcc4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	68d9      	ldr	r1, [r3, #12]
 801bcae:	68fb      	ldr	r3, [r7, #12]
 801bcb0:	1c5a      	adds	r2, r3, #1
 801bcb2:	4613      	mov	r3, r2
 801bcb4:	009b      	lsls	r3, r3, #2
 801bcb6:	4413      	add	r3, r2
 801bcb8:	00db      	lsls	r3, r3, #3
 801bcba:	440b      	add	r3, r1
 801bcbc:	461a      	mov	r2, r3
 801bcbe:	68bb      	ldr	r3, [r7, #8]
 801bcc0:	60da      	str	r2, [r3, #12]
 801bcc2:	e004      	b.n	801bcce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	68db      	ldr	r3, [r3, #12]
 801bcc8:	461a      	mov	r2, r3
 801bcca:	68bb      	ldr	r3, [r7, #8]
 801bccc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 801bcce:	68bb      	ldr	r3, [r7, #8]
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801bcda:	68fb      	ldr	r3, [r7, #12]
 801bcdc:	3301      	adds	r3, #1
 801bcde:	60fb      	str	r3, [r7, #12]
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	2b03      	cmp	r3, #3
 801bce4:	d9bd      	bls.n	801bc62 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	2200      	movs	r2, #0
 801bcea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	68da      	ldr	r2, [r3, #12]
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bcf8:	611a      	str	r2, [r3, #16]
}
 801bcfa:	bf00      	nop
 801bcfc:	3714      	adds	r7, #20
 801bcfe:	46bd      	mov	sp, r7
 801bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd04:	4770      	bx	lr

0801bd06 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801bd06:	b480      	push	{r7}
 801bd08:	b085      	sub	sp, #20
 801bd0a:	af00      	add	r7, sp, #0
 801bd0c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801bd0e:	2300      	movs	r3, #0
 801bd10:	60fb      	str	r3, [r7, #12]
 801bd12:	e046      	b.n	801bda2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	6919      	ldr	r1, [r3, #16]
 801bd18:	68fa      	ldr	r2, [r7, #12]
 801bd1a:	4613      	mov	r3, r2
 801bd1c:	009b      	lsls	r3, r3, #2
 801bd1e:	4413      	add	r3, r2
 801bd20:	00db      	lsls	r3, r3, #3
 801bd22:	440b      	add	r3, r1
 801bd24:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 801bd26:	68bb      	ldr	r3, [r7, #8]
 801bd28:	2200      	movs	r2, #0
 801bd2a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 801bd2c:	68bb      	ldr	r3, [r7, #8]
 801bd2e:	2200      	movs	r2, #0
 801bd30:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 801bd32:	68bb      	ldr	r3, [r7, #8]
 801bd34:	2200      	movs	r2, #0
 801bd36:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 801bd38:	68bb      	ldr	r3, [r7, #8]
 801bd3a:	2200      	movs	r2, #0
 801bd3c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 801bd3e:	68bb      	ldr	r3, [r7, #8]
 801bd40:	2200      	movs	r2, #0
 801bd42:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 801bd44:	68bb      	ldr	r3, [r7, #8]
 801bd46:	2200      	movs	r2, #0
 801bd48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 801bd4a:	68bb      	ldr	r3, [r7, #8]
 801bd4c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801bd50:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 801bd52:	68bb      	ldr	r3, [r7, #8]
 801bd54:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801bd58:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 801bd5a:	68bb      	ldr	r3, [r7, #8]
 801bd5c:	685b      	ldr	r3, [r3, #4]
 801bd5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801bd62:	68bb      	ldr	r3, [r7, #8]
 801bd64:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801bd66:	68b9      	ldr	r1, [r7, #8]
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	68fa      	ldr	r2, [r7, #12]
 801bd6c:	3212      	adds	r2, #18
 801bd6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 801bd72:	68fb      	ldr	r3, [r7, #12]
 801bd74:	2b02      	cmp	r3, #2
 801bd76:	d80c      	bhi.n	801bd92 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	6919      	ldr	r1, [r3, #16]
 801bd7c:	68fb      	ldr	r3, [r7, #12]
 801bd7e:	1c5a      	adds	r2, r3, #1
 801bd80:	4613      	mov	r3, r2
 801bd82:	009b      	lsls	r3, r3, #2
 801bd84:	4413      	add	r3, r2
 801bd86:	00db      	lsls	r3, r3, #3
 801bd88:	440b      	add	r3, r1
 801bd8a:	461a      	mov	r2, r3
 801bd8c:	68bb      	ldr	r3, [r7, #8]
 801bd8e:	60da      	str	r2, [r3, #12]
 801bd90:	e004      	b.n	801bd9c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	691b      	ldr	r3, [r3, #16]
 801bd96:	461a      	mov	r2, r3
 801bd98:	68bb      	ldr	r3, [r7, #8]
 801bd9a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	3301      	adds	r3, #1
 801bda0:	60fb      	str	r3, [r7, #12]
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	2b03      	cmp	r3, #3
 801bda6:	d9b5      	bls.n	801bd14 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	2200      	movs	r2, #0
 801bdac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	2200      	movs	r2, #0
 801bdc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	691a      	ldr	r2, [r3, #16]
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bdd2:	60da      	str	r2, [r3, #12]
}
 801bdd4:	bf00      	nop
 801bdd6:	3714      	adds	r7, #20
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdde:	4770      	bx	lr

0801bde0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 801bde0:	b480      	push	{r7}
 801bde2:	b08d      	sub	sp, #52	; 0x34
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	60f8      	str	r0, [r7, #12]
 801bde8:	60b9      	str	r1, [r7, #8]
 801bdea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 801bdec:	68fb      	ldr	r3, [r7, #12]
 801bdee:	3318      	adds	r3, #24
 801bdf0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 801bdf2:	697b      	ldr	r3, [r7, #20]
 801bdf4:	691b      	ldr	r3, [r3, #16]
 801bdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801bdf8:	697b      	ldr	r3, [r7, #20]
 801bdfa:	691b      	ldr	r3, [r3, #16]
 801bdfc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 801bdfe:	2300      	movs	r3, #0
 801be00:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801be02:	697b      	ldr	r3, [r7, #20]
 801be04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801be0a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 801be0c:	68bb      	ldr	r3, [r7, #8]
 801be0e:	689b      	ldr	r3, [r3, #8]
 801be10:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 801be12:	2300      	movs	r3, #0
 801be14:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801be16:	6a3b      	ldr	r3, [r7, #32]
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801be1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801be22:	d007      	beq.n	801be34 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801be24:	697a      	ldr	r2, [r7, #20]
 801be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be28:	3304      	adds	r3, #4
 801be2a:	009b      	lsls	r3, r3, #2
 801be2c:	4413      	add	r3, r2
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d001      	beq.n	801be38 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 801be34:	2302      	movs	r3, #2
 801be36:	e0ff      	b.n	801c038 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 801be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be3a:	3301      	adds	r3, #1
 801be3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801be3e:	69fb      	ldr	r3, [r7, #28]
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	461a      	mov	r2, r3
 801be44:	6a3b      	ldr	r3, [r7, #32]
 801be46:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801be48:	6a3b      	ldr	r3, [r7, #32]
 801be4a:	685a      	ldr	r2, [r3, #4]
 801be4c:	4b7d      	ldr	r3, [pc, #500]	; (801c044 <ETH_Prepare_Tx_Descriptors+0x264>)
 801be4e:	4013      	ands	r3, r2
 801be50:	69fa      	ldr	r2, [r7, #28]
 801be52:	6852      	ldr	r2, [r2, #4]
 801be54:	431a      	orrs	r2, r3
 801be56:	6a3b      	ldr	r3, [r7, #32]
 801be58:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 801be5a:	68bb      	ldr	r3, [r7, #8]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	f003 0301 	and.w	r3, r3, #1
 801be62:	2b00      	cmp	r3, #0
 801be64:	d008      	beq.n	801be78 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 801be66:	6a3b      	ldr	r3, [r7, #32]
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801be6e:	68bb      	ldr	r3, [r7, #8]
 801be70:	695b      	ldr	r3, [r3, #20]
 801be72:	431a      	orrs	r2, r3
 801be74:	6a3b      	ldr	r3, [r7, #32]
 801be76:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 801be78:	68bb      	ldr	r3, [r7, #8]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	f003 0320 	and.w	r3, r3, #32
 801be80:	2b00      	cmp	r3, #0
 801be82:	d008      	beq.n	801be96 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 801be84:	6a3b      	ldr	r3, [r7, #32]
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801be8c:	68bb      	ldr	r3, [r7, #8]
 801be8e:	691b      	ldr	r3, [r3, #16]
 801be90:	431a      	orrs	r2, r3
 801be92:	6a3b      	ldr	r3, [r7, #32]
 801be94:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 801be96:	68bb      	ldr	r3, [r7, #8]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	f003 0304 	and.w	r3, r3, #4
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d005      	beq.n	801beae <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 801bea2:	6a3b      	ldr	r3, [r7, #32]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801beaa:	6a3b      	ldr	r3, [r7, #32]
 801beac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801beae:	6a3b      	ldr	r3, [r7, #32]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801beb6:	6a3b      	ldr	r3, [r7, #32]
 801beb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801beba:	f3bf 8f5f 	dmb	sy
}
 801bebe:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801bec0:	6a3b      	ldr	r3, [r7, #32]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801bec8:	6a3b      	ldr	r3, [r7, #32]
 801beca:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 801becc:	e082      	b.n	801bfd4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801bece:	6a3b      	ldr	r3, [r7, #32]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801bed6:	6a3b      	ldr	r3, [r7, #32]
 801bed8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d006      	beq.n	801beee <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801bee0:	6a3b      	ldr	r3, [r7, #32]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801bee8:	6a3b      	ldr	r3, [r7, #32]
 801beea:	601a      	str	r2, [r3, #0]
 801beec:	e005      	b.n	801befa <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801beee:	6a3b      	ldr	r3, [r7, #32]
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801bef6:	6a3b      	ldr	r3, [r7, #32]
 801bef8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 801befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801befc:	3301      	adds	r3, #1
 801befe:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf02:	2b03      	cmp	r3, #3
 801bf04:	d902      	bls.n	801bf0c <ETH_Prepare_Tx_Descriptors+0x12c>
 801bf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf08:	3b04      	subs	r3, #4
 801bf0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801bf0c:	697b      	ldr	r3, [r7, #20]
 801bf0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf14:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801bf16:	6a3b      	ldr	r3, [r7, #32]
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801bf1e:	6a3b      	ldr	r3, [r7, #32]
 801bf20:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801bf22:	6a3b      	ldr	r3, [r7, #32]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801bf2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bf2e:	d007      	beq.n	801bf40 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801bf30:	697a      	ldr	r2, [r7, #20]
 801bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf34:	3304      	adds	r3, #4
 801bf36:	009b      	lsls	r3, r3, #2
 801bf38:	4413      	add	r3, r2
 801bf3a:	685b      	ldr	r3, [r3, #4]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d029      	beq.n	801bf94 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 801bf40:	693b      	ldr	r3, [r7, #16]
 801bf42:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801bf44:	697b      	ldr	r3, [r7, #20]
 801bf46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf4c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 801bf4e:	2300      	movs	r3, #0
 801bf50:	62bb      	str	r3, [r7, #40]	; 0x28
 801bf52:	e019      	b.n	801bf88 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 801bf54:	f3bf 8f5f 	dmb	sy
}
 801bf58:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801bf5a:	6a3b      	ldr	r3, [r7, #32]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801bf62:	6a3b      	ldr	r3, [r7, #32]
 801bf64:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 801bf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf68:	3301      	adds	r3, #1
 801bf6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf6e:	2b03      	cmp	r3, #3
 801bf70:	d902      	bls.n	801bf78 <ETH_Prepare_Tx_Descriptors+0x198>
 801bf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf74:	3b04      	subs	r3, #4
 801bf76:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801bf78:	697b      	ldr	r3, [r7, #20]
 801bf7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf80:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 801bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf84:	3301      	adds	r3, #1
 801bf86:	62bb      	str	r3, [r7, #40]	; 0x28
 801bf88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf8c:	429a      	cmp	r2, r3
 801bf8e:	d3e1      	bcc.n	801bf54 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 801bf90:	2302      	movs	r3, #2
 801bf92:	e051      	b.n	801c038 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 801bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf96:	3301      	adds	r3, #1
 801bf98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 801bf9a:	69fb      	ldr	r3, [r7, #28]
 801bf9c:	689b      	ldr	r3, [r3, #8]
 801bf9e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801bfa0:	69fb      	ldr	r3, [r7, #28]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	461a      	mov	r2, r3
 801bfa6:	6a3b      	ldr	r3, [r7, #32]
 801bfa8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801bfaa:	6a3b      	ldr	r3, [r7, #32]
 801bfac:	685a      	ldr	r2, [r3, #4]
 801bfae:	4b25      	ldr	r3, [pc, #148]	; (801c044 <ETH_Prepare_Tx_Descriptors+0x264>)
 801bfb0:	4013      	ands	r3, r2
 801bfb2:	69fa      	ldr	r2, [r7, #28]
 801bfb4:	6852      	ldr	r2, [r2, #4]
 801bfb6:	431a      	orrs	r2, r3
 801bfb8:	6a3b      	ldr	r3, [r7, #32]
 801bfba:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 801bfbc:	69bb      	ldr	r3, [r7, #24]
 801bfbe:	3301      	adds	r3, #1
 801bfc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 801bfc2:	f3bf 8f5f 	dmb	sy
}
 801bfc6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801bfc8:	6a3b      	ldr	r3, [r7, #32]
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801bfd0:	6a3b      	ldr	r3, [r7, #32]
 801bfd2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 801bfd4:	69fb      	ldr	r3, [r7, #28]
 801bfd6:	689b      	ldr	r3, [r3, #8]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	f47f af78 	bne.w	801bece <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d006      	beq.n	801bff2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801bfe4:	6a3b      	ldr	r3, [r7, #32]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801bfec:	6a3b      	ldr	r3, [r7, #32]
 801bfee:	601a      	str	r2, [r3, #0]
 801bff0:	e005      	b.n	801bffe <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801bff2:	6a3b      	ldr	r3, [r7, #32]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801bffa:	6a3b      	ldr	r3, [r7, #32]
 801bffc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801bffe:	6a3b      	ldr	r3, [r7, #32]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801c006:	6a3b      	ldr	r3, [r7, #32]
 801c008:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 801c00a:	697b      	ldr	r3, [r7, #20]
 801c00c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c00e:	6979      	ldr	r1, [r7, #20]
 801c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c012:	3304      	adds	r3, #4
 801c014:	009b      	lsls	r3, r3, #2
 801c016:	440b      	add	r3, r1
 801c018:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 801c01a:	697b      	ldr	r3, [r7, #20]
 801c01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c01e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c020:	b672      	cpsid	i
}
 801c022:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 801c024:	697b      	ldr	r3, [r7, #20]
 801c026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c028:	69bb      	ldr	r3, [r7, #24]
 801c02a:	4413      	add	r3, r2
 801c02c:	1c5a      	adds	r2, r3, #1
 801c02e:	697b      	ldr	r3, [r7, #20]
 801c030:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 801c032:	b662      	cpsie	i
}
 801c034:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 801c036:	2300      	movs	r3, #0
}
 801c038:	4618      	mov	r0, r3
 801c03a:	3734      	adds	r7, #52	; 0x34
 801c03c:	46bd      	mov	sp, r7
 801c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c042:	4770      	bx	lr
 801c044:	ffffe000 	.word	0xffffe000

0801c048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c048:	b480      	push	{r7}
 801c04a:	b089      	sub	sp, #36	; 0x24
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
 801c050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801c052:	2300      	movs	r3, #0
 801c054:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801c056:	2300      	movs	r3, #0
 801c058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 801c05a:	2300      	movs	r3, #0
 801c05c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 801c05e:	2300      	movs	r3, #0
 801c060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801c062:	2300      	movs	r3, #0
 801c064:	61fb      	str	r3, [r7, #28]
 801c066:	e175      	b.n	801c354 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 801c068:	2201      	movs	r2, #1
 801c06a:	69fb      	ldr	r3, [r7, #28]
 801c06c:	fa02 f303 	lsl.w	r3, r2, r3
 801c070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801c072:	683b      	ldr	r3, [r7, #0]
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	697a      	ldr	r2, [r7, #20]
 801c078:	4013      	ands	r3, r2
 801c07a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801c07c:	693a      	ldr	r2, [r7, #16]
 801c07e:	697b      	ldr	r3, [r7, #20]
 801c080:	429a      	cmp	r2, r3
 801c082:	f040 8164 	bne.w	801c34e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c086:	683b      	ldr	r3, [r7, #0]
 801c088:	685b      	ldr	r3, [r3, #4]
 801c08a:	f003 0303 	and.w	r3, r3, #3
 801c08e:	2b01      	cmp	r3, #1
 801c090:	d005      	beq.n	801c09e <HAL_GPIO_Init+0x56>
 801c092:	683b      	ldr	r3, [r7, #0]
 801c094:	685b      	ldr	r3, [r3, #4]
 801c096:	f003 0303 	and.w	r3, r3, #3
 801c09a:	2b02      	cmp	r3, #2
 801c09c:	d130      	bne.n	801c100 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	689b      	ldr	r3, [r3, #8]
 801c0a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801c0a4:	69fb      	ldr	r3, [r7, #28]
 801c0a6:	005b      	lsls	r3, r3, #1
 801c0a8:	2203      	movs	r2, #3
 801c0aa:	fa02 f303 	lsl.w	r3, r2, r3
 801c0ae:	43db      	mvns	r3, r3
 801c0b0:	69ba      	ldr	r2, [r7, #24]
 801c0b2:	4013      	ands	r3, r2
 801c0b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	68da      	ldr	r2, [r3, #12]
 801c0ba:	69fb      	ldr	r3, [r7, #28]
 801c0bc:	005b      	lsls	r3, r3, #1
 801c0be:	fa02 f303 	lsl.w	r3, r2, r3
 801c0c2:	69ba      	ldr	r2, [r7, #24]
 801c0c4:	4313      	orrs	r3, r2
 801c0c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	69ba      	ldr	r2, [r7, #24]
 801c0cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	685b      	ldr	r3, [r3, #4]
 801c0d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801c0d4:	2201      	movs	r2, #1
 801c0d6:	69fb      	ldr	r3, [r7, #28]
 801c0d8:	fa02 f303 	lsl.w	r3, r2, r3
 801c0dc:	43db      	mvns	r3, r3
 801c0de:	69ba      	ldr	r2, [r7, #24]
 801c0e0:	4013      	ands	r3, r2
 801c0e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c0e4:	683b      	ldr	r3, [r7, #0]
 801c0e6:	685b      	ldr	r3, [r3, #4]
 801c0e8:	091b      	lsrs	r3, r3, #4
 801c0ea:	f003 0201 	and.w	r2, r3, #1
 801c0ee:	69fb      	ldr	r3, [r7, #28]
 801c0f0:	fa02 f303 	lsl.w	r3, r2, r3
 801c0f4:	69ba      	ldr	r2, [r7, #24]
 801c0f6:	4313      	orrs	r3, r2
 801c0f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	69ba      	ldr	r2, [r7, #24]
 801c0fe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c100:	683b      	ldr	r3, [r7, #0]
 801c102:	685b      	ldr	r3, [r3, #4]
 801c104:	f003 0303 	and.w	r3, r3, #3
 801c108:	2b03      	cmp	r3, #3
 801c10a:	d017      	beq.n	801c13c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	68db      	ldr	r3, [r3, #12]
 801c110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801c112:	69fb      	ldr	r3, [r7, #28]
 801c114:	005b      	lsls	r3, r3, #1
 801c116:	2203      	movs	r2, #3
 801c118:	fa02 f303 	lsl.w	r3, r2, r3
 801c11c:	43db      	mvns	r3, r3
 801c11e:	69ba      	ldr	r2, [r7, #24]
 801c120:	4013      	ands	r3, r2
 801c122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 801c124:	683b      	ldr	r3, [r7, #0]
 801c126:	689a      	ldr	r2, [r3, #8]
 801c128:	69fb      	ldr	r3, [r7, #28]
 801c12a:	005b      	lsls	r3, r3, #1
 801c12c:	fa02 f303 	lsl.w	r3, r2, r3
 801c130:	69ba      	ldr	r2, [r7, #24]
 801c132:	4313      	orrs	r3, r2
 801c134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	69ba      	ldr	r2, [r7, #24]
 801c13a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c13c:	683b      	ldr	r3, [r7, #0]
 801c13e:	685b      	ldr	r3, [r3, #4]
 801c140:	f003 0303 	and.w	r3, r3, #3
 801c144:	2b02      	cmp	r3, #2
 801c146:	d123      	bne.n	801c190 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 801c148:	69fb      	ldr	r3, [r7, #28]
 801c14a:	08da      	lsrs	r2, r3, #3
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	3208      	adds	r2, #8
 801c150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801c156:	69fb      	ldr	r3, [r7, #28]
 801c158:	f003 0307 	and.w	r3, r3, #7
 801c15c:	009b      	lsls	r3, r3, #2
 801c15e:	220f      	movs	r2, #15
 801c160:	fa02 f303 	lsl.w	r3, r2, r3
 801c164:	43db      	mvns	r3, r3
 801c166:	69ba      	ldr	r2, [r7, #24]
 801c168:	4013      	ands	r3, r2
 801c16a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801c16c:	683b      	ldr	r3, [r7, #0]
 801c16e:	691a      	ldr	r2, [r3, #16]
 801c170:	69fb      	ldr	r3, [r7, #28]
 801c172:	f003 0307 	and.w	r3, r3, #7
 801c176:	009b      	lsls	r3, r3, #2
 801c178:	fa02 f303 	lsl.w	r3, r2, r3
 801c17c:	69ba      	ldr	r2, [r7, #24]
 801c17e:	4313      	orrs	r3, r2
 801c180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801c182:	69fb      	ldr	r3, [r7, #28]
 801c184:	08da      	lsrs	r2, r3, #3
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	3208      	adds	r2, #8
 801c18a:	69b9      	ldr	r1, [r7, #24]
 801c18c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801c196:	69fb      	ldr	r3, [r7, #28]
 801c198:	005b      	lsls	r3, r3, #1
 801c19a:	2203      	movs	r2, #3
 801c19c:	fa02 f303 	lsl.w	r3, r2, r3
 801c1a0:	43db      	mvns	r3, r3
 801c1a2:	69ba      	ldr	r2, [r7, #24]
 801c1a4:	4013      	ands	r3, r2
 801c1a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801c1a8:	683b      	ldr	r3, [r7, #0]
 801c1aa:	685b      	ldr	r3, [r3, #4]
 801c1ac:	f003 0203 	and.w	r2, r3, #3
 801c1b0:	69fb      	ldr	r3, [r7, #28]
 801c1b2:	005b      	lsls	r3, r3, #1
 801c1b4:	fa02 f303 	lsl.w	r3, r2, r3
 801c1b8:	69ba      	ldr	r2, [r7, #24]
 801c1ba:	4313      	orrs	r3, r2
 801c1bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	69ba      	ldr	r2, [r7, #24]
 801c1c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801c1c4:	683b      	ldr	r3, [r7, #0]
 801c1c6:	685b      	ldr	r3, [r3, #4]
 801c1c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	f000 80be 	beq.w	801c34e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c1d2:	4b66      	ldr	r3, [pc, #408]	; (801c36c <HAL_GPIO_Init+0x324>)
 801c1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c1d6:	4a65      	ldr	r2, [pc, #404]	; (801c36c <HAL_GPIO_Init+0x324>)
 801c1d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c1dc:	6453      	str	r3, [r2, #68]	; 0x44
 801c1de:	4b63      	ldr	r3, [pc, #396]	; (801c36c <HAL_GPIO_Init+0x324>)
 801c1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c1e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c1e6:	60fb      	str	r3, [r7, #12]
 801c1e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801c1ea:	4a61      	ldr	r2, [pc, #388]	; (801c370 <HAL_GPIO_Init+0x328>)
 801c1ec:	69fb      	ldr	r3, [r7, #28]
 801c1ee:	089b      	lsrs	r3, r3, #2
 801c1f0:	3302      	adds	r3, #2
 801c1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c1f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801c1f8:	69fb      	ldr	r3, [r7, #28]
 801c1fa:	f003 0303 	and.w	r3, r3, #3
 801c1fe:	009b      	lsls	r3, r3, #2
 801c200:	220f      	movs	r2, #15
 801c202:	fa02 f303 	lsl.w	r3, r2, r3
 801c206:	43db      	mvns	r3, r3
 801c208:	69ba      	ldr	r2, [r7, #24]
 801c20a:	4013      	ands	r3, r2
 801c20c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	4a58      	ldr	r2, [pc, #352]	; (801c374 <HAL_GPIO_Init+0x32c>)
 801c212:	4293      	cmp	r3, r2
 801c214:	d037      	beq.n	801c286 <HAL_GPIO_Init+0x23e>
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	4a57      	ldr	r2, [pc, #348]	; (801c378 <HAL_GPIO_Init+0x330>)
 801c21a:	4293      	cmp	r3, r2
 801c21c:	d031      	beq.n	801c282 <HAL_GPIO_Init+0x23a>
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	4a56      	ldr	r2, [pc, #344]	; (801c37c <HAL_GPIO_Init+0x334>)
 801c222:	4293      	cmp	r3, r2
 801c224:	d02b      	beq.n	801c27e <HAL_GPIO_Init+0x236>
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	4a55      	ldr	r2, [pc, #340]	; (801c380 <HAL_GPIO_Init+0x338>)
 801c22a:	4293      	cmp	r3, r2
 801c22c:	d025      	beq.n	801c27a <HAL_GPIO_Init+0x232>
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	4a54      	ldr	r2, [pc, #336]	; (801c384 <HAL_GPIO_Init+0x33c>)
 801c232:	4293      	cmp	r3, r2
 801c234:	d01f      	beq.n	801c276 <HAL_GPIO_Init+0x22e>
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	4a53      	ldr	r2, [pc, #332]	; (801c388 <HAL_GPIO_Init+0x340>)
 801c23a:	4293      	cmp	r3, r2
 801c23c:	d019      	beq.n	801c272 <HAL_GPIO_Init+0x22a>
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	4a52      	ldr	r2, [pc, #328]	; (801c38c <HAL_GPIO_Init+0x344>)
 801c242:	4293      	cmp	r3, r2
 801c244:	d013      	beq.n	801c26e <HAL_GPIO_Init+0x226>
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	4a51      	ldr	r2, [pc, #324]	; (801c390 <HAL_GPIO_Init+0x348>)
 801c24a:	4293      	cmp	r3, r2
 801c24c:	d00d      	beq.n	801c26a <HAL_GPIO_Init+0x222>
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	4a50      	ldr	r2, [pc, #320]	; (801c394 <HAL_GPIO_Init+0x34c>)
 801c252:	4293      	cmp	r3, r2
 801c254:	d007      	beq.n	801c266 <HAL_GPIO_Init+0x21e>
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	4a4f      	ldr	r2, [pc, #316]	; (801c398 <HAL_GPIO_Init+0x350>)
 801c25a:	4293      	cmp	r3, r2
 801c25c:	d101      	bne.n	801c262 <HAL_GPIO_Init+0x21a>
 801c25e:	2309      	movs	r3, #9
 801c260:	e012      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c262:	230a      	movs	r3, #10
 801c264:	e010      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c266:	2308      	movs	r3, #8
 801c268:	e00e      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c26a:	2307      	movs	r3, #7
 801c26c:	e00c      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c26e:	2306      	movs	r3, #6
 801c270:	e00a      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c272:	2305      	movs	r3, #5
 801c274:	e008      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c276:	2304      	movs	r3, #4
 801c278:	e006      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c27a:	2303      	movs	r3, #3
 801c27c:	e004      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c27e:	2302      	movs	r3, #2
 801c280:	e002      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c282:	2301      	movs	r3, #1
 801c284:	e000      	b.n	801c288 <HAL_GPIO_Init+0x240>
 801c286:	2300      	movs	r3, #0
 801c288:	69fa      	ldr	r2, [r7, #28]
 801c28a:	f002 0203 	and.w	r2, r2, #3
 801c28e:	0092      	lsls	r2, r2, #2
 801c290:	4093      	lsls	r3, r2
 801c292:	69ba      	ldr	r2, [r7, #24]
 801c294:	4313      	orrs	r3, r2
 801c296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 801c298:	4935      	ldr	r1, [pc, #212]	; (801c370 <HAL_GPIO_Init+0x328>)
 801c29a:	69fb      	ldr	r3, [r7, #28]
 801c29c:	089b      	lsrs	r3, r3, #2
 801c29e:	3302      	adds	r3, #2
 801c2a0:	69ba      	ldr	r2, [r7, #24]
 801c2a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801c2a6:	4b3d      	ldr	r3, [pc, #244]	; (801c39c <HAL_GPIO_Init+0x354>)
 801c2a8:	689b      	ldr	r3, [r3, #8]
 801c2aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c2ac:	693b      	ldr	r3, [r7, #16]
 801c2ae:	43db      	mvns	r3, r3
 801c2b0:	69ba      	ldr	r2, [r7, #24]
 801c2b2:	4013      	ands	r3, r2
 801c2b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801c2b6:	683b      	ldr	r3, [r7, #0]
 801c2b8:	685b      	ldr	r3, [r3, #4]
 801c2ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d003      	beq.n	801c2ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801c2c2:	69ba      	ldr	r2, [r7, #24]
 801c2c4:	693b      	ldr	r3, [r7, #16]
 801c2c6:	4313      	orrs	r3, r2
 801c2c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801c2ca:	4a34      	ldr	r2, [pc, #208]	; (801c39c <HAL_GPIO_Init+0x354>)
 801c2cc:	69bb      	ldr	r3, [r7, #24]
 801c2ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801c2d0:	4b32      	ldr	r3, [pc, #200]	; (801c39c <HAL_GPIO_Init+0x354>)
 801c2d2:	68db      	ldr	r3, [r3, #12]
 801c2d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c2d6:	693b      	ldr	r3, [r7, #16]
 801c2d8:	43db      	mvns	r3, r3
 801c2da:	69ba      	ldr	r2, [r7, #24]
 801c2dc:	4013      	ands	r3, r2
 801c2de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801c2e0:	683b      	ldr	r3, [r7, #0]
 801c2e2:	685b      	ldr	r3, [r3, #4]
 801c2e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d003      	beq.n	801c2f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801c2ec:	69ba      	ldr	r2, [r7, #24]
 801c2ee:	693b      	ldr	r3, [r7, #16]
 801c2f0:	4313      	orrs	r3, r2
 801c2f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801c2f4:	4a29      	ldr	r2, [pc, #164]	; (801c39c <HAL_GPIO_Init+0x354>)
 801c2f6:	69bb      	ldr	r3, [r7, #24]
 801c2f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801c2fa:	4b28      	ldr	r3, [pc, #160]	; (801c39c <HAL_GPIO_Init+0x354>)
 801c2fc:	685b      	ldr	r3, [r3, #4]
 801c2fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c300:	693b      	ldr	r3, [r7, #16]
 801c302:	43db      	mvns	r3, r3
 801c304:	69ba      	ldr	r2, [r7, #24]
 801c306:	4013      	ands	r3, r2
 801c308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801c30a:	683b      	ldr	r3, [r7, #0]
 801c30c:	685b      	ldr	r3, [r3, #4]
 801c30e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c312:	2b00      	cmp	r3, #0
 801c314:	d003      	beq.n	801c31e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801c316:	69ba      	ldr	r2, [r7, #24]
 801c318:	693b      	ldr	r3, [r7, #16]
 801c31a:	4313      	orrs	r3, r2
 801c31c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801c31e:	4a1f      	ldr	r2, [pc, #124]	; (801c39c <HAL_GPIO_Init+0x354>)
 801c320:	69bb      	ldr	r3, [r7, #24]
 801c322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801c324:	4b1d      	ldr	r3, [pc, #116]	; (801c39c <HAL_GPIO_Init+0x354>)
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801c32a:	693b      	ldr	r3, [r7, #16]
 801c32c:	43db      	mvns	r3, r3
 801c32e:	69ba      	ldr	r2, [r7, #24]
 801c330:	4013      	ands	r3, r2
 801c332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801c334:	683b      	ldr	r3, [r7, #0]
 801c336:	685b      	ldr	r3, [r3, #4]
 801c338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d003      	beq.n	801c348 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 801c340:	69ba      	ldr	r2, [r7, #24]
 801c342:	693b      	ldr	r3, [r7, #16]
 801c344:	4313      	orrs	r3, r2
 801c346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801c348:	4a14      	ldr	r2, [pc, #80]	; (801c39c <HAL_GPIO_Init+0x354>)
 801c34a:	69bb      	ldr	r3, [r7, #24]
 801c34c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 801c34e:	69fb      	ldr	r3, [r7, #28]
 801c350:	3301      	adds	r3, #1
 801c352:	61fb      	str	r3, [r7, #28]
 801c354:	69fb      	ldr	r3, [r7, #28]
 801c356:	2b0f      	cmp	r3, #15
 801c358:	f67f ae86 	bls.w	801c068 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 801c35c:	bf00      	nop
 801c35e:	bf00      	nop
 801c360:	3724      	adds	r7, #36	; 0x24
 801c362:	46bd      	mov	sp, r7
 801c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c368:	4770      	bx	lr
 801c36a:	bf00      	nop
 801c36c:	40023800 	.word	0x40023800
 801c370:	40013800 	.word	0x40013800
 801c374:	40020000 	.word	0x40020000
 801c378:	40020400 	.word	0x40020400
 801c37c:	40020800 	.word	0x40020800
 801c380:	40020c00 	.word	0x40020c00
 801c384:	40021000 	.word	0x40021000
 801c388:	40021400 	.word	0x40021400
 801c38c:	40021800 	.word	0x40021800
 801c390:	40021c00 	.word	0x40021c00
 801c394:	40022000 	.word	0x40022000
 801c398:	40022400 	.word	0x40022400
 801c39c:	40013c00 	.word	0x40013c00

0801c3a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801c3a0:	b480      	push	{r7}
 801c3a2:	b085      	sub	sp, #20
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
 801c3a8:	460b      	mov	r3, r1
 801c3aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	691a      	ldr	r2, [r3, #16]
 801c3b0:	887b      	ldrh	r3, [r7, #2]
 801c3b2:	4013      	ands	r3, r2
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d002      	beq.n	801c3be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801c3b8:	2301      	movs	r3, #1
 801c3ba:	73fb      	strb	r3, [r7, #15]
 801c3bc:	e001      	b.n	801c3c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801c3be:	2300      	movs	r3, #0
 801c3c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801c3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 801c3c4:	4618      	mov	r0, r3
 801c3c6:	3714      	adds	r7, #20
 801c3c8:	46bd      	mov	sp, r7
 801c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ce:	4770      	bx	lr

0801c3d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c3d0:	b480      	push	{r7}
 801c3d2:	b083      	sub	sp, #12
 801c3d4:	af00      	add	r7, sp, #0
 801c3d6:	6078      	str	r0, [r7, #4]
 801c3d8:	460b      	mov	r3, r1
 801c3da:	807b      	strh	r3, [r7, #2]
 801c3dc:	4613      	mov	r3, r2
 801c3de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801c3e0:	787b      	ldrb	r3, [r7, #1]
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d003      	beq.n	801c3ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c3e6:	887a      	ldrh	r2, [r7, #2]
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 801c3ec:	e003      	b.n	801c3f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 801c3ee:	887b      	ldrh	r3, [r7, #2]
 801c3f0:	041a      	lsls	r2, r3, #16
 801c3f2:	687b      	ldr	r3, [r7, #4]
 801c3f4:	619a      	str	r2, [r3, #24]
}
 801c3f6:	bf00      	nop
 801c3f8:	370c      	adds	r7, #12
 801c3fa:	46bd      	mov	sp, r7
 801c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c400:	4770      	bx	lr

0801c402 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801c402:	b480      	push	{r7}
 801c404:	b085      	sub	sp, #20
 801c406:	af00      	add	r7, sp, #0
 801c408:	6078      	str	r0, [r7, #4]
 801c40a:	460b      	mov	r3, r1
 801c40c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	695b      	ldr	r3, [r3, #20]
 801c412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801c414:	887a      	ldrh	r2, [r7, #2]
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	4013      	ands	r3, r2
 801c41a:	041a      	lsls	r2, r3, #16
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	43d9      	mvns	r1, r3
 801c420:	887b      	ldrh	r3, [r7, #2]
 801c422:	400b      	ands	r3, r1
 801c424:	431a      	orrs	r2, r3
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	619a      	str	r2, [r3, #24]
}
 801c42a:	bf00      	nop
 801c42c:	3714      	adds	r7, #20
 801c42e:	46bd      	mov	sp, r7
 801c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c434:	4770      	bx	lr
	...

0801c438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801c438:	b580      	push	{r7, lr}
 801c43a:	b082      	sub	sp, #8
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	4603      	mov	r3, r0
 801c440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801c442:	4b08      	ldr	r3, [pc, #32]	; (801c464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c444:	695a      	ldr	r2, [r3, #20]
 801c446:	88fb      	ldrh	r3, [r7, #6]
 801c448:	4013      	ands	r3, r2
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d006      	beq.n	801c45c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801c44e:	4a05      	ldr	r2, [pc, #20]	; (801c464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801c450:	88fb      	ldrh	r3, [r7, #6]
 801c452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801c454:	88fb      	ldrh	r3, [r7, #6]
 801c456:	4618      	mov	r0, r3
 801c458:	f000 f806 	bl	801c468 <HAL_GPIO_EXTI_Callback>
  }
}
 801c45c:	bf00      	nop
 801c45e:	3708      	adds	r7, #8
 801c460:	46bd      	mov	sp, r7
 801c462:	bd80      	pop	{r7, pc}
 801c464:	40013c00 	.word	0x40013c00

0801c468 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801c468:	b480      	push	{r7}
 801c46a:	b083      	sub	sp, #12
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	4603      	mov	r3, r0
 801c470:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801c472:	bf00      	nop
 801c474:	370c      	adds	r7, #12
 801c476:	46bd      	mov	sp, r7
 801c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c47c:	4770      	bx	lr
	...

0801c480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801c480:	b580      	push	{r7, lr}
 801c482:	b082      	sub	sp, #8
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d101      	bne.n	801c492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801c48e:	2301      	movs	r3, #1
 801c490:	e07f      	b.n	801c592 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c498:	b2db      	uxtb	r3, r3
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d106      	bne.n	801c4ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	2200      	movs	r2, #0
 801c4a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801c4a6:	6878      	ldr	r0, [r7, #4]
 801c4a8:	f7fa f880 	bl	80165ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	2224      	movs	r2, #36	; 0x24
 801c4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	681a      	ldr	r2, [r3, #0]
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	681b      	ldr	r3, [r3, #0]
 801c4be:	f022 0201 	bic.w	r2, r2, #1
 801c4c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	685a      	ldr	r2, [r3, #4]
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c4d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	689a      	ldr	r2, [r3, #8]
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c4e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	68db      	ldr	r3, [r3, #12]
 801c4e6:	2b01      	cmp	r3, #1
 801c4e8:	d107      	bne.n	801c4fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	689a      	ldr	r2, [r3, #8]
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801c4f6:	609a      	str	r2, [r3, #8]
 801c4f8:	e006      	b.n	801c508 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	689a      	ldr	r2, [r3, #8]
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801c506:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	68db      	ldr	r3, [r3, #12]
 801c50c:	2b02      	cmp	r3, #2
 801c50e:	d104      	bne.n	801c51a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c518:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	6859      	ldr	r1, [r3, #4]
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	681a      	ldr	r2, [r3, #0]
 801c524:	4b1d      	ldr	r3, [pc, #116]	; (801c59c <HAL_I2C_Init+0x11c>)
 801c526:	430b      	orrs	r3, r1
 801c528:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	68da      	ldr	r2, [r3, #12]
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801c538:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	691a      	ldr	r2, [r3, #16]
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	695b      	ldr	r3, [r3, #20]
 801c542:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	699b      	ldr	r3, [r3, #24]
 801c54a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	430a      	orrs	r2, r1
 801c552:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	69d9      	ldr	r1, [r3, #28]
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	6a1a      	ldr	r2, [r3, #32]
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	430a      	orrs	r2, r1
 801c562:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	681a      	ldr	r2, [r3, #0]
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	f042 0201 	orr.w	r2, r2, #1
 801c572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	2200      	movs	r2, #0
 801c578:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	2220      	movs	r2, #32
 801c57e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	2200      	movs	r2, #0
 801c586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	2200      	movs	r2, #0
 801c58c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801c590:	2300      	movs	r3, #0
}
 801c592:	4618      	mov	r0, r3
 801c594:	3708      	adds	r7, #8
 801c596:	46bd      	mov	sp, r7
 801c598:	bd80      	pop	{r7, pc}
 801c59a:	bf00      	nop
 801c59c:	02008000 	.word	0x02008000

0801c5a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	b088      	sub	sp, #32
 801c5a4:	af02      	add	r7, sp, #8
 801c5a6:	60f8      	str	r0, [r7, #12]
 801c5a8:	4608      	mov	r0, r1
 801c5aa:	4611      	mov	r1, r2
 801c5ac:	461a      	mov	r2, r3
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	817b      	strh	r3, [r7, #10]
 801c5b2:	460b      	mov	r3, r1
 801c5b4:	813b      	strh	r3, [r7, #8]
 801c5b6:	4613      	mov	r3, r2
 801c5b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c5c0:	b2db      	uxtb	r3, r3
 801c5c2:	2b20      	cmp	r3, #32
 801c5c4:	f040 80f9 	bne.w	801c7ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801c5c8:	6a3b      	ldr	r3, [r7, #32]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d002      	beq.n	801c5d4 <HAL_I2C_Mem_Write+0x34>
 801c5ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d105      	bne.n	801c5e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c5da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801c5dc:	2301      	movs	r3, #1
 801c5de:	e0ed      	b.n	801c7bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c5e6:	2b01      	cmp	r3, #1
 801c5e8:	d101      	bne.n	801c5ee <HAL_I2C_Mem_Write+0x4e>
 801c5ea:	2302      	movs	r3, #2
 801c5ec:	e0e6      	b.n	801c7bc <HAL_I2C_Mem_Write+0x21c>
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	2201      	movs	r2, #1
 801c5f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801c5f6:	f7fd fa1b 	bl	8019a30 <HAL_GetTick>
 801c5fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801c5fc:	697b      	ldr	r3, [r7, #20]
 801c5fe:	9300      	str	r3, [sp, #0]
 801c600:	2319      	movs	r3, #25
 801c602:	2201      	movs	r2, #1
 801c604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c608:	68f8      	ldr	r0, [r7, #12]
 801c60a:	f000 fac3 	bl	801cb94 <I2C_WaitOnFlagUntilTimeout>
 801c60e:	4603      	mov	r3, r0
 801c610:	2b00      	cmp	r3, #0
 801c612:	d001      	beq.n	801c618 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 801c614:	2301      	movs	r3, #1
 801c616:	e0d1      	b.n	801c7bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801c618:	68fb      	ldr	r3, [r7, #12]
 801c61a:	2221      	movs	r2, #33	; 0x21
 801c61c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	2240      	movs	r2, #64	; 0x40
 801c624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	2200      	movs	r2, #0
 801c62c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801c62e:	68fb      	ldr	r3, [r7, #12]
 801c630:	6a3a      	ldr	r2, [r7, #32]
 801c632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	2200      	movs	r2, #0
 801c63e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801c640:	88f8      	ldrh	r0, [r7, #6]
 801c642:	893a      	ldrh	r2, [r7, #8]
 801c644:	8979      	ldrh	r1, [r7, #10]
 801c646:	697b      	ldr	r3, [r7, #20]
 801c648:	9301      	str	r3, [sp, #4]
 801c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c64c:	9300      	str	r3, [sp, #0]
 801c64e:	4603      	mov	r3, r0
 801c650:	68f8      	ldr	r0, [r7, #12]
 801c652:	f000 f9d3 	bl	801c9fc <I2C_RequestMemoryWrite>
 801c656:	4603      	mov	r3, r0
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d005      	beq.n	801c668 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	2200      	movs	r2, #0
 801c660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801c664:	2301      	movs	r3, #1
 801c666:	e0a9      	b.n	801c7bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c66c:	b29b      	uxth	r3, r3
 801c66e:	2bff      	cmp	r3, #255	; 0xff
 801c670:	d90e      	bls.n	801c690 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	22ff      	movs	r2, #255	; 0xff
 801c676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c67c:	b2da      	uxtb	r2, r3
 801c67e:	8979      	ldrh	r1, [r7, #10]
 801c680:	2300      	movs	r3, #0
 801c682:	9300      	str	r3, [sp, #0]
 801c684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c688:	68f8      	ldr	r0, [r7, #12]
 801c68a:	f000 fc1f 	bl	801cecc <I2C_TransferConfig>
 801c68e:	e00f      	b.n	801c6b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c694:	b29a      	uxth	r2, r3
 801c696:	68fb      	ldr	r3, [r7, #12]
 801c698:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c69e:	b2da      	uxtb	r2, r3
 801c6a0:	8979      	ldrh	r1, [r7, #10]
 801c6a2:	2300      	movs	r3, #0
 801c6a4:	9300      	str	r3, [sp, #0]
 801c6a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c6aa:	68f8      	ldr	r0, [r7, #12]
 801c6ac:	f000 fc0e 	bl	801cecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c6b0:	697a      	ldr	r2, [r7, #20]
 801c6b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c6b4:	68f8      	ldr	r0, [r7, #12]
 801c6b6:	f000 faad 	bl	801cc14 <I2C_WaitOnTXISFlagUntilTimeout>
 801c6ba:	4603      	mov	r3, r0
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	d001      	beq.n	801c6c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 801c6c0:	2301      	movs	r3, #1
 801c6c2:	e07b      	b.n	801c7bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6c8:	781a      	ldrb	r2, [r3, #0]
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6d4:	1c5a      	adds	r2, r3, #1
 801c6d6:	68fb      	ldr	r3, [r7, #12]
 801c6d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c6de:	b29b      	uxth	r3, r3
 801c6e0:	3b01      	subs	r3, #1
 801c6e2:	b29a      	uxth	r2, r3
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c6ec:	3b01      	subs	r3, #1
 801c6ee:	b29a      	uxth	r2, r3
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c6f4:	68fb      	ldr	r3, [r7, #12]
 801c6f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c6f8:	b29b      	uxth	r3, r3
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d034      	beq.n	801c768 <HAL_I2C_Mem_Write+0x1c8>
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c702:	2b00      	cmp	r3, #0
 801c704:	d130      	bne.n	801c768 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801c706:	697b      	ldr	r3, [r7, #20]
 801c708:	9300      	str	r3, [sp, #0]
 801c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c70c:	2200      	movs	r2, #0
 801c70e:	2180      	movs	r1, #128	; 0x80
 801c710:	68f8      	ldr	r0, [r7, #12]
 801c712:	f000 fa3f 	bl	801cb94 <I2C_WaitOnFlagUntilTimeout>
 801c716:	4603      	mov	r3, r0
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d001      	beq.n	801c720 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801c71c:	2301      	movs	r3, #1
 801c71e:	e04d      	b.n	801c7bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c724:	b29b      	uxth	r3, r3
 801c726:	2bff      	cmp	r3, #255	; 0xff
 801c728:	d90e      	bls.n	801c748 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	22ff      	movs	r2, #255	; 0xff
 801c72e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c734:	b2da      	uxtb	r2, r3
 801c736:	8979      	ldrh	r1, [r7, #10]
 801c738:	2300      	movs	r3, #0
 801c73a:	9300      	str	r3, [sp, #0]
 801c73c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c740:	68f8      	ldr	r0, [r7, #12]
 801c742:	f000 fbc3 	bl	801cecc <I2C_TransferConfig>
 801c746:	e00f      	b.n	801c768 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c74c:	b29a      	uxth	r2, r3
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c756:	b2da      	uxtb	r2, r3
 801c758:	8979      	ldrh	r1, [r7, #10]
 801c75a:	2300      	movs	r3, #0
 801c75c:	9300      	str	r3, [sp, #0]
 801c75e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c762:	68f8      	ldr	r0, [r7, #12]
 801c764:	f000 fbb2 	bl	801cecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c76c:	b29b      	uxth	r3, r3
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d19e      	bne.n	801c6b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c772:	697a      	ldr	r2, [r7, #20]
 801c774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c776:	68f8      	ldr	r0, [r7, #12]
 801c778:	f000 fa8c 	bl	801cc94 <I2C_WaitOnSTOPFlagUntilTimeout>
 801c77c:	4603      	mov	r3, r0
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d001      	beq.n	801c786 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801c782:	2301      	movs	r3, #1
 801c784:	e01a      	b.n	801c7bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	2220      	movs	r2, #32
 801c78c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	6859      	ldr	r1, [r3, #4]
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	681a      	ldr	r2, [r3, #0]
 801c798:	4b0a      	ldr	r3, [pc, #40]	; (801c7c4 <HAL_I2C_Mem_Write+0x224>)
 801c79a:	400b      	ands	r3, r1
 801c79c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	2220      	movs	r2, #32
 801c7a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	2200      	movs	r2, #0
 801c7aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c7b6:	2300      	movs	r3, #0
 801c7b8:	e000      	b.n	801c7bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801c7ba:	2302      	movs	r3, #2
  }
}
 801c7bc:	4618      	mov	r0, r3
 801c7be:	3718      	adds	r7, #24
 801c7c0:	46bd      	mov	sp, r7
 801c7c2:	bd80      	pop	{r7, pc}
 801c7c4:	fe00e800 	.word	0xfe00e800

0801c7c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b088      	sub	sp, #32
 801c7cc:	af02      	add	r7, sp, #8
 801c7ce:	60f8      	str	r0, [r7, #12]
 801c7d0:	4608      	mov	r0, r1
 801c7d2:	4611      	mov	r1, r2
 801c7d4:	461a      	mov	r2, r3
 801c7d6:	4603      	mov	r3, r0
 801c7d8:	817b      	strh	r3, [r7, #10]
 801c7da:	460b      	mov	r3, r1
 801c7dc:	813b      	strh	r3, [r7, #8]
 801c7de:	4613      	mov	r3, r2
 801c7e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c7e8:	b2db      	uxtb	r3, r3
 801c7ea:	2b20      	cmp	r3, #32
 801c7ec:	f040 80fd 	bne.w	801c9ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801c7f0:	6a3b      	ldr	r3, [r7, #32]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d002      	beq.n	801c7fc <HAL_I2C_Mem_Read+0x34>
 801c7f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d105      	bne.n	801c808 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c802:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801c804:	2301      	movs	r3, #1
 801c806:	e0f1      	b.n	801c9ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c80e:	2b01      	cmp	r3, #1
 801c810:	d101      	bne.n	801c816 <HAL_I2C_Mem_Read+0x4e>
 801c812:	2302      	movs	r3, #2
 801c814:	e0ea      	b.n	801c9ec <HAL_I2C_Mem_Read+0x224>
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	2201      	movs	r2, #1
 801c81a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801c81e:	f7fd f907 	bl	8019a30 <HAL_GetTick>
 801c822:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801c824:	697b      	ldr	r3, [r7, #20]
 801c826:	9300      	str	r3, [sp, #0]
 801c828:	2319      	movs	r3, #25
 801c82a:	2201      	movs	r2, #1
 801c82c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801c830:	68f8      	ldr	r0, [r7, #12]
 801c832:	f000 f9af 	bl	801cb94 <I2C_WaitOnFlagUntilTimeout>
 801c836:	4603      	mov	r3, r0
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d001      	beq.n	801c840 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801c83c:	2301      	movs	r3, #1
 801c83e:	e0d5      	b.n	801c9ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	2222      	movs	r2, #34	; 0x22
 801c844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	2240      	movs	r2, #64	; 0x40
 801c84c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	2200      	movs	r2, #0
 801c854:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801c856:	68fb      	ldr	r3, [r7, #12]
 801c858:	6a3a      	ldr	r2, [r7, #32]
 801c85a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c860:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	2200      	movs	r2, #0
 801c866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801c868:	88f8      	ldrh	r0, [r7, #6]
 801c86a:	893a      	ldrh	r2, [r7, #8]
 801c86c:	8979      	ldrh	r1, [r7, #10]
 801c86e:	697b      	ldr	r3, [r7, #20]
 801c870:	9301      	str	r3, [sp, #4]
 801c872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c874:	9300      	str	r3, [sp, #0]
 801c876:	4603      	mov	r3, r0
 801c878:	68f8      	ldr	r0, [r7, #12]
 801c87a:	f000 f913 	bl	801caa4 <I2C_RequestMemoryRead>
 801c87e:	4603      	mov	r3, r0
 801c880:	2b00      	cmp	r3, #0
 801c882:	d005      	beq.n	801c890 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	2200      	movs	r2, #0
 801c888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801c88c:	2301      	movs	r3, #1
 801c88e:	e0ad      	b.n	801c9ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c894:	b29b      	uxth	r3, r3
 801c896:	2bff      	cmp	r3, #255	; 0xff
 801c898:	d90e      	bls.n	801c8b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	22ff      	movs	r2, #255	; 0xff
 801c89e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801c8a0:	68fb      	ldr	r3, [r7, #12]
 801c8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c8a4:	b2da      	uxtb	r2, r3
 801c8a6:	8979      	ldrh	r1, [r7, #10]
 801c8a8:	4b52      	ldr	r3, [pc, #328]	; (801c9f4 <HAL_I2C_Mem_Read+0x22c>)
 801c8aa:	9300      	str	r3, [sp, #0]
 801c8ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c8b0:	68f8      	ldr	r0, [r7, #12]
 801c8b2:	f000 fb0b 	bl	801cecc <I2C_TransferConfig>
 801c8b6:	e00f      	b.n	801c8d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c8bc:	b29a      	uxth	r2, r3
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c8c6:	b2da      	uxtb	r2, r3
 801c8c8:	8979      	ldrh	r1, [r7, #10]
 801c8ca:	4b4a      	ldr	r3, [pc, #296]	; (801c9f4 <HAL_I2C_Mem_Read+0x22c>)
 801c8cc:	9300      	str	r3, [sp, #0]
 801c8ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c8d2:	68f8      	ldr	r0, [r7, #12]
 801c8d4:	f000 fafa 	bl	801cecc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801c8d8:	697b      	ldr	r3, [r7, #20]
 801c8da:	9300      	str	r3, [sp, #0]
 801c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8de:	2200      	movs	r2, #0
 801c8e0:	2104      	movs	r1, #4
 801c8e2:	68f8      	ldr	r0, [r7, #12]
 801c8e4:	f000 f956 	bl	801cb94 <I2C_WaitOnFlagUntilTimeout>
 801c8e8:	4603      	mov	r3, r0
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d001      	beq.n	801c8f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801c8ee:	2301      	movs	r3, #1
 801c8f0:	e07c      	b.n	801c9ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c8fc:	b2d2      	uxtb	r2, r2
 801c8fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801c900:	68fb      	ldr	r3, [r7, #12]
 801c902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c904:	1c5a      	adds	r2, r3, #1
 801c906:	68fb      	ldr	r3, [r7, #12]
 801c908:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c90e:	3b01      	subs	r3, #1
 801c910:	b29a      	uxth	r2, r3
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c91a:	b29b      	uxth	r3, r3
 801c91c:	3b01      	subs	r3, #1
 801c91e:	b29a      	uxth	r2, r3
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c928:	b29b      	uxth	r3, r3
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d034      	beq.n	801c998 <HAL_I2C_Mem_Read+0x1d0>
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c932:	2b00      	cmp	r3, #0
 801c934:	d130      	bne.n	801c998 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801c936:	697b      	ldr	r3, [r7, #20]
 801c938:	9300      	str	r3, [sp, #0]
 801c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c93c:	2200      	movs	r2, #0
 801c93e:	2180      	movs	r1, #128	; 0x80
 801c940:	68f8      	ldr	r0, [r7, #12]
 801c942:	f000 f927 	bl	801cb94 <I2C_WaitOnFlagUntilTimeout>
 801c946:	4603      	mov	r3, r0
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d001      	beq.n	801c950 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801c94c:	2301      	movs	r3, #1
 801c94e:	e04d      	b.n	801c9ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801c950:	68fb      	ldr	r3, [r7, #12]
 801c952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c954:	b29b      	uxth	r3, r3
 801c956:	2bff      	cmp	r3, #255	; 0xff
 801c958:	d90e      	bls.n	801c978 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	22ff      	movs	r2, #255	; 0xff
 801c95e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c964:	b2da      	uxtb	r2, r3
 801c966:	8979      	ldrh	r1, [r7, #10]
 801c968:	2300      	movs	r3, #0
 801c96a:	9300      	str	r3, [sp, #0]
 801c96c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801c970:	68f8      	ldr	r0, [r7, #12]
 801c972:	f000 faab 	bl	801cecc <I2C_TransferConfig>
 801c976:	e00f      	b.n	801c998 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801c978:	68fb      	ldr	r3, [r7, #12]
 801c97a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c97c:	b29a      	uxth	r2, r3
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c986:	b2da      	uxtb	r2, r3
 801c988:	8979      	ldrh	r1, [r7, #10]
 801c98a:	2300      	movs	r3, #0
 801c98c:	9300      	str	r3, [sp, #0]
 801c98e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801c992:	68f8      	ldr	r0, [r7, #12]
 801c994:	f000 fa9a 	bl	801cecc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801c99c:	b29b      	uxth	r3, r3
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d19a      	bne.n	801c8d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801c9a2:	697a      	ldr	r2, [r7, #20]
 801c9a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c9a6:	68f8      	ldr	r0, [r7, #12]
 801c9a8:	f000 f974 	bl	801cc94 <I2C_WaitOnSTOPFlagUntilTimeout>
 801c9ac:	4603      	mov	r3, r0
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d001      	beq.n	801c9b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801c9b2:	2301      	movs	r3, #1
 801c9b4:	e01a      	b.n	801c9ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	2220      	movs	r2, #32
 801c9bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	6859      	ldr	r1, [r3, #4]
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	681a      	ldr	r2, [r3, #0]
 801c9c8:	4b0b      	ldr	r3, [pc, #44]	; (801c9f8 <HAL_I2C_Mem_Read+0x230>)
 801c9ca:	400b      	ands	r3, r1
 801c9cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	2220      	movs	r2, #32
 801c9d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	2200      	movs	r2, #0
 801c9da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	2200      	movs	r2, #0
 801c9e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	e000      	b.n	801c9ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801c9ea:	2302      	movs	r3, #2
  }
}
 801c9ec:	4618      	mov	r0, r3
 801c9ee:	3718      	adds	r7, #24
 801c9f0:	46bd      	mov	sp, r7
 801c9f2:	bd80      	pop	{r7, pc}
 801c9f4:	80002400 	.word	0x80002400
 801c9f8:	fe00e800 	.word	0xfe00e800

0801c9fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b086      	sub	sp, #24
 801ca00:	af02      	add	r7, sp, #8
 801ca02:	60f8      	str	r0, [r7, #12]
 801ca04:	4608      	mov	r0, r1
 801ca06:	4611      	mov	r1, r2
 801ca08:	461a      	mov	r2, r3
 801ca0a:	4603      	mov	r3, r0
 801ca0c:	817b      	strh	r3, [r7, #10]
 801ca0e:	460b      	mov	r3, r1
 801ca10:	813b      	strh	r3, [r7, #8]
 801ca12:	4613      	mov	r3, r2
 801ca14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801ca16:	88fb      	ldrh	r3, [r7, #6]
 801ca18:	b2da      	uxtb	r2, r3
 801ca1a:	8979      	ldrh	r1, [r7, #10]
 801ca1c:	4b20      	ldr	r3, [pc, #128]	; (801caa0 <I2C_RequestMemoryWrite+0xa4>)
 801ca1e:	9300      	str	r3, [sp, #0]
 801ca20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ca24:	68f8      	ldr	r0, [r7, #12]
 801ca26:	f000 fa51 	bl	801cecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801ca2a:	69fa      	ldr	r2, [r7, #28]
 801ca2c:	69b9      	ldr	r1, [r7, #24]
 801ca2e:	68f8      	ldr	r0, [r7, #12]
 801ca30:	f000 f8f0 	bl	801cc14 <I2C_WaitOnTXISFlagUntilTimeout>
 801ca34:	4603      	mov	r3, r0
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d001      	beq.n	801ca3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801ca3a:	2301      	movs	r3, #1
 801ca3c:	e02c      	b.n	801ca98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801ca3e:	88fb      	ldrh	r3, [r7, #6]
 801ca40:	2b01      	cmp	r3, #1
 801ca42:	d105      	bne.n	801ca50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801ca44:	893b      	ldrh	r3, [r7, #8]
 801ca46:	b2da      	uxtb	r2, r3
 801ca48:	68fb      	ldr	r3, [r7, #12]
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	629a      	str	r2, [r3, #40]	; 0x28
 801ca4e:	e015      	b.n	801ca7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801ca50:	893b      	ldrh	r3, [r7, #8]
 801ca52:	0a1b      	lsrs	r3, r3, #8
 801ca54:	b29b      	uxth	r3, r3
 801ca56:	b2da      	uxtb	r2, r3
 801ca58:	68fb      	ldr	r3, [r7, #12]
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801ca5e:	69fa      	ldr	r2, [r7, #28]
 801ca60:	69b9      	ldr	r1, [r7, #24]
 801ca62:	68f8      	ldr	r0, [r7, #12]
 801ca64:	f000 f8d6 	bl	801cc14 <I2C_WaitOnTXISFlagUntilTimeout>
 801ca68:	4603      	mov	r3, r0
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d001      	beq.n	801ca72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801ca6e:	2301      	movs	r3, #1
 801ca70:	e012      	b.n	801ca98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801ca72:	893b      	ldrh	r3, [r7, #8]
 801ca74:	b2da      	uxtb	r2, r3
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801ca7c:	69fb      	ldr	r3, [r7, #28]
 801ca7e:	9300      	str	r3, [sp, #0]
 801ca80:	69bb      	ldr	r3, [r7, #24]
 801ca82:	2200      	movs	r2, #0
 801ca84:	2180      	movs	r1, #128	; 0x80
 801ca86:	68f8      	ldr	r0, [r7, #12]
 801ca88:	f000 f884 	bl	801cb94 <I2C_WaitOnFlagUntilTimeout>
 801ca8c:	4603      	mov	r3, r0
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d001      	beq.n	801ca96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801ca92:	2301      	movs	r3, #1
 801ca94:	e000      	b.n	801ca98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801ca96:	2300      	movs	r3, #0
}
 801ca98:	4618      	mov	r0, r3
 801ca9a:	3710      	adds	r7, #16
 801ca9c:	46bd      	mov	sp, r7
 801ca9e:	bd80      	pop	{r7, pc}
 801caa0:	80002000 	.word	0x80002000

0801caa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801caa4:	b580      	push	{r7, lr}
 801caa6:	b086      	sub	sp, #24
 801caa8:	af02      	add	r7, sp, #8
 801caaa:	60f8      	str	r0, [r7, #12]
 801caac:	4608      	mov	r0, r1
 801caae:	4611      	mov	r1, r2
 801cab0:	461a      	mov	r2, r3
 801cab2:	4603      	mov	r3, r0
 801cab4:	817b      	strh	r3, [r7, #10]
 801cab6:	460b      	mov	r3, r1
 801cab8:	813b      	strh	r3, [r7, #8]
 801caba:	4613      	mov	r3, r2
 801cabc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801cabe:	88fb      	ldrh	r3, [r7, #6]
 801cac0:	b2da      	uxtb	r2, r3
 801cac2:	8979      	ldrh	r1, [r7, #10]
 801cac4:	4b20      	ldr	r3, [pc, #128]	; (801cb48 <I2C_RequestMemoryRead+0xa4>)
 801cac6:	9300      	str	r3, [sp, #0]
 801cac8:	2300      	movs	r3, #0
 801caca:	68f8      	ldr	r0, [r7, #12]
 801cacc:	f000 f9fe 	bl	801cecc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801cad0:	69fa      	ldr	r2, [r7, #28]
 801cad2:	69b9      	ldr	r1, [r7, #24]
 801cad4:	68f8      	ldr	r0, [r7, #12]
 801cad6:	f000 f89d 	bl	801cc14 <I2C_WaitOnTXISFlagUntilTimeout>
 801cada:	4603      	mov	r3, r0
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d001      	beq.n	801cae4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801cae0:	2301      	movs	r3, #1
 801cae2:	e02c      	b.n	801cb3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801cae4:	88fb      	ldrh	r3, [r7, #6]
 801cae6:	2b01      	cmp	r3, #1
 801cae8:	d105      	bne.n	801caf6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801caea:	893b      	ldrh	r3, [r7, #8]
 801caec:	b2da      	uxtb	r2, r3
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	629a      	str	r2, [r3, #40]	; 0x28
 801caf4:	e015      	b.n	801cb22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801caf6:	893b      	ldrh	r3, [r7, #8]
 801caf8:	0a1b      	lsrs	r3, r3, #8
 801cafa:	b29b      	uxth	r3, r3
 801cafc:	b2da      	uxtb	r2, r3
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801cb04:	69fa      	ldr	r2, [r7, #28]
 801cb06:	69b9      	ldr	r1, [r7, #24]
 801cb08:	68f8      	ldr	r0, [r7, #12]
 801cb0a:	f000 f883 	bl	801cc14 <I2C_WaitOnTXISFlagUntilTimeout>
 801cb0e:	4603      	mov	r3, r0
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d001      	beq.n	801cb18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801cb14:	2301      	movs	r3, #1
 801cb16:	e012      	b.n	801cb3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801cb18:	893b      	ldrh	r3, [r7, #8]
 801cb1a:	b2da      	uxtb	r2, r3
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	681b      	ldr	r3, [r3, #0]
 801cb20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801cb22:	69fb      	ldr	r3, [r7, #28]
 801cb24:	9300      	str	r3, [sp, #0]
 801cb26:	69bb      	ldr	r3, [r7, #24]
 801cb28:	2200      	movs	r2, #0
 801cb2a:	2140      	movs	r1, #64	; 0x40
 801cb2c:	68f8      	ldr	r0, [r7, #12]
 801cb2e:	f000 f831 	bl	801cb94 <I2C_WaitOnFlagUntilTimeout>
 801cb32:	4603      	mov	r3, r0
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d001      	beq.n	801cb3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801cb38:	2301      	movs	r3, #1
 801cb3a:	e000      	b.n	801cb3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801cb3c:	2300      	movs	r3, #0
}
 801cb3e:	4618      	mov	r0, r3
 801cb40:	3710      	adds	r7, #16
 801cb42:	46bd      	mov	sp, r7
 801cb44:	bd80      	pop	{r7, pc}
 801cb46:	bf00      	nop
 801cb48:	80002000 	.word	0x80002000

0801cb4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801cb4c:	b480      	push	{r7}
 801cb4e:	b083      	sub	sp, #12
 801cb50:	af00      	add	r7, sp, #0
 801cb52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	699b      	ldr	r3, [r3, #24]
 801cb5a:	f003 0302 	and.w	r3, r3, #2
 801cb5e:	2b02      	cmp	r3, #2
 801cb60:	d103      	bne.n	801cb6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	2200      	movs	r2, #0
 801cb68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	699b      	ldr	r3, [r3, #24]
 801cb70:	f003 0301 	and.w	r3, r3, #1
 801cb74:	2b01      	cmp	r3, #1
 801cb76:	d007      	beq.n	801cb88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	699a      	ldr	r2, [r3, #24]
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	f042 0201 	orr.w	r2, r2, #1
 801cb86:	619a      	str	r2, [r3, #24]
  }
}
 801cb88:	bf00      	nop
 801cb8a:	370c      	adds	r7, #12
 801cb8c:	46bd      	mov	sp, r7
 801cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb92:	4770      	bx	lr

0801cb94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801cb94:	b580      	push	{r7, lr}
 801cb96:	b084      	sub	sp, #16
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	60f8      	str	r0, [r7, #12]
 801cb9c:	60b9      	str	r1, [r7, #8]
 801cb9e:	603b      	str	r3, [r7, #0]
 801cba0:	4613      	mov	r3, r2
 801cba2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801cba4:	e022      	b.n	801cbec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801cba6:	683b      	ldr	r3, [r7, #0]
 801cba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbac:	d01e      	beq.n	801cbec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801cbae:	f7fc ff3f 	bl	8019a30 <HAL_GetTick>
 801cbb2:	4602      	mov	r2, r0
 801cbb4:	69bb      	ldr	r3, [r7, #24]
 801cbb6:	1ad3      	subs	r3, r2, r3
 801cbb8:	683a      	ldr	r2, [r7, #0]
 801cbba:	429a      	cmp	r2, r3
 801cbbc:	d302      	bcc.n	801cbc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 801cbbe:	683b      	ldr	r3, [r7, #0]
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d113      	bne.n	801cbec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801cbc4:	68fb      	ldr	r3, [r7, #12]
 801cbc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cbc8:	f043 0220 	orr.w	r2, r3, #32
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801cbd0:	68fb      	ldr	r3, [r7, #12]
 801cbd2:	2220      	movs	r2, #32
 801cbd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	2200      	movs	r2, #0
 801cbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cbe0:	68fb      	ldr	r3, [r7, #12]
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801cbe8:	2301      	movs	r3, #1
 801cbea:	e00f      	b.n	801cc0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	699a      	ldr	r2, [r3, #24]
 801cbf2:	68bb      	ldr	r3, [r7, #8]
 801cbf4:	4013      	ands	r3, r2
 801cbf6:	68ba      	ldr	r2, [r7, #8]
 801cbf8:	429a      	cmp	r2, r3
 801cbfa:	bf0c      	ite	eq
 801cbfc:	2301      	moveq	r3, #1
 801cbfe:	2300      	movne	r3, #0
 801cc00:	b2db      	uxtb	r3, r3
 801cc02:	461a      	mov	r2, r3
 801cc04:	79fb      	ldrb	r3, [r7, #7]
 801cc06:	429a      	cmp	r2, r3
 801cc08:	d0cd      	beq.n	801cba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801cc0a:	2300      	movs	r3, #0
}
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	3710      	adds	r7, #16
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}

0801cc14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b084      	sub	sp, #16
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	60f8      	str	r0, [r7, #12]
 801cc1c:	60b9      	str	r1, [r7, #8]
 801cc1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801cc20:	e02c      	b.n	801cc7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801cc22:	687a      	ldr	r2, [r7, #4]
 801cc24:	68b9      	ldr	r1, [r7, #8]
 801cc26:	68f8      	ldr	r0, [r7, #12]
 801cc28:	f000 f870 	bl	801cd0c <I2C_IsErrorOccurred>
 801cc2c:	4603      	mov	r3, r0
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d001      	beq.n	801cc36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801cc32:	2301      	movs	r3, #1
 801cc34:	e02a      	b.n	801cc8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801cc36:	68bb      	ldr	r3, [r7, #8]
 801cc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc3c:	d01e      	beq.n	801cc7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801cc3e:	f7fc fef7 	bl	8019a30 <HAL_GetTick>
 801cc42:	4602      	mov	r2, r0
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	1ad3      	subs	r3, r2, r3
 801cc48:	68ba      	ldr	r2, [r7, #8]
 801cc4a:	429a      	cmp	r2, r3
 801cc4c:	d302      	bcc.n	801cc54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801cc4e:	68bb      	ldr	r3, [r7, #8]
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d113      	bne.n	801cc7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cc58:	f043 0220 	orr.w	r2, r3, #32
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	2220      	movs	r2, #32
 801cc64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	2200      	movs	r2, #0
 801cc74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801cc78:	2301      	movs	r3, #1
 801cc7a:	e007      	b.n	801cc8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	699b      	ldr	r3, [r3, #24]
 801cc82:	f003 0302 	and.w	r3, r3, #2
 801cc86:	2b02      	cmp	r3, #2
 801cc88:	d1cb      	bne.n	801cc22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801cc8a:	2300      	movs	r3, #0
}
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	3710      	adds	r7, #16
 801cc90:	46bd      	mov	sp, r7
 801cc92:	bd80      	pop	{r7, pc}

0801cc94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b084      	sub	sp, #16
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	60f8      	str	r0, [r7, #12]
 801cc9c:	60b9      	str	r1, [r7, #8]
 801cc9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801cca0:	e028      	b.n	801ccf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801cca2:	687a      	ldr	r2, [r7, #4]
 801cca4:	68b9      	ldr	r1, [r7, #8]
 801cca6:	68f8      	ldr	r0, [r7, #12]
 801cca8:	f000 f830 	bl	801cd0c <I2C_IsErrorOccurred>
 801ccac:	4603      	mov	r3, r0
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d001      	beq.n	801ccb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801ccb2:	2301      	movs	r3, #1
 801ccb4:	e026      	b.n	801cd04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ccb6:	f7fc febb 	bl	8019a30 <HAL_GetTick>
 801ccba:	4602      	mov	r2, r0
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	1ad3      	subs	r3, r2, r3
 801ccc0:	68ba      	ldr	r2, [r7, #8]
 801ccc2:	429a      	cmp	r2, r3
 801ccc4:	d302      	bcc.n	801cccc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801ccc6:	68bb      	ldr	r3, [r7, #8]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d113      	bne.n	801ccf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801cccc:	68fb      	ldr	r3, [r7, #12]
 801ccce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ccd0:	f043 0220 	orr.w	r2, r3, #32
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	2220      	movs	r2, #32
 801ccdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801cce0:	68fb      	ldr	r3, [r7, #12]
 801cce2:	2200      	movs	r2, #0
 801cce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801cce8:	68fb      	ldr	r3, [r7, #12]
 801ccea:	2200      	movs	r2, #0
 801ccec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801ccf0:	2301      	movs	r3, #1
 801ccf2:	e007      	b.n	801cd04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ccf4:	68fb      	ldr	r3, [r7, #12]
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	699b      	ldr	r3, [r3, #24]
 801ccfa:	f003 0320 	and.w	r3, r3, #32
 801ccfe:	2b20      	cmp	r3, #32
 801cd00:	d1cf      	bne.n	801cca2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801cd02:	2300      	movs	r3, #0
}
 801cd04:	4618      	mov	r0, r3
 801cd06:	3710      	adds	r7, #16
 801cd08:	46bd      	mov	sp, r7
 801cd0a:	bd80      	pop	{r7, pc}

0801cd0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b08a      	sub	sp, #40	; 0x28
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	60f8      	str	r0, [r7, #12]
 801cd14:	60b9      	str	r1, [r7, #8]
 801cd16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801cd18:	2300      	movs	r3, #0
 801cd1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	699b      	ldr	r3, [r3, #24]
 801cd24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801cd26:	2300      	movs	r3, #0
 801cd28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801cd2e:	69bb      	ldr	r3, [r7, #24]
 801cd30:	f003 0310 	and.w	r3, r3, #16
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d068      	beq.n	801ce0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801cd38:	68fb      	ldr	r3, [r7, #12]
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	2210      	movs	r2, #16
 801cd3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801cd40:	e049      	b.n	801cdd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801cd42:	68bb      	ldr	r3, [r7, #8]
 801cd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd48:	d045      	beq.n	801cdd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801cd4a:	f7fc fe71 	bl	8019a30 <HAL_GetTick>
 801cd4e:	4602      	mov	r2, r0
 801cd50:	69fb      	ldr	r3, [r7, #28]
 801cd52:	1ad3      	subs	r3, r2, r3
 801cd54:	68ba      	ldr	r2, [r7, #8]
 801cd56:	429a      	cmp	r2, r3
 801cd58:	d302      	bcc.n	801cd60 <I2C_IsErrorOccurred+0x54>
 801cd5a:	68bb      	ldr	r3, [r7, #8]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d13a      	bne.n	801cdd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	685b      	ldr	r3, [r3, #4]
 801cd66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cd6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cd72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801cd74:	68fb      	ldr	r3, [r7, #12]
 801cd76:	681b      	ldr	r3, [r3, #0]
 801cd78:	699b      	ldr	r3, [r3, #24]
 801cd7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cd7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cd82:	d121      	bne.n	801cdc8 <I2C_IsErrorOccurred+0xbc>
 801cd84:	697b      	ldr	r3, [r7, #20]
 801cd86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cd8a:	d01d      	beq.n	801cdc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801cd8c:	7cfb      	ldrb	r3, [r7, #19]
 801cd8e:	2b20      	cmp	r3, #32
 801cd90:	d01a      	beq.n	801cdc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801cd92:	68fb      	ldr	r3, [r7, #12]
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	685a      	ldr	r2, [r3, #4]
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801cda0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801cda2:	f7fc fe45 	bl	8019a30 <HAL_GetTick>
 801cda6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801cda8:	e00e      	b.n	801cdc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801cdaa:	f7fc fe41 	bl	8019a30 <HAL_GetTick>
 801cdae:	4602      	mov	r2, r0
 801cdb0:	69fb      	ldr	r3, [r7, #28]
 801cdb2:	1ad3      	subs	r3, r2, r3
 801cdb4:	2b19      	cmp	r3, #25
 801cdb6:	d907      	bls.n	801cdc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 801cdb8:	6a3b      	ldr	r3, [r7, #32]
 801cdba:	f043 0320 	orr.w	r3, r3, #32
 801cdbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801cdc0:	2301      	movs	r3, #1
 801cdc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801cdc6:	e006      	b.n	801cdd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801cdc8:	68fb      	ldr	r3, [r7, #12]
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	699b      	ldr	r3, [r3, #24]
 801cdce:	f003 0320 	and.w	r3, r3, #32
 801cdd2:	2b20      	cmp	r3, #32
 801cdd4:	d1e9      	bne.n	801cdaa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	699b      	ldr	r3, [r3, #24]
 801cddc:	f003 0320 	and.w	r3, r3, #32
 801cde0:	2b20      	cmp	r3, #32
 801cde2:	d003      	beq.n	801cdec <I2C_IsErrorOccurred+0xe0>
 801cde4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d0aa      	beq.n	801cd42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801cdec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d103      	bne.n	801cdfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	2220      	movs	r2, #32
 801cdfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801cdfc:	6a3b      	ldr	r3, [r7, #32]
 801cdfe:	f043 0304 	orr.w	r3, r3, #4
 801ce02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801ce04:	2301      	movs	r3, #1
 801ce06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	699b      	ldr	r3, [r3, #24]
 801ce10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801ce12:	69bb      	ldr	r3, [r7, #24]
 801ce14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d00b      	beq.n	801ce34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801ce1c:	6a3b      	ldr	r3, [r7, #32]
 801ce1e:	f043 0301 	orr.w	r3, r3, #1
 801ce22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ce2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ce2e:	2301      	movs	r3, #1
 801ce30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801ce34:	69bb      	ldr	r3, [r7, #24]
 801ce36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d00b      	beq.n	801ce56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801ce3e:	6a3b      	ldr	r3, [r7, #32]
 801ce40:	f043 0308 	orr.w	r3, r3, #8
 801ce44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ce4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ce50:	2301      	movs	r3, #1
 801ce52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801ce56:	69bb      	ldr	r3, [r7, #24]
 801ce58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d00b      	beq.n	801ce78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801ce60:	6a3b      	ldr	r3, [r7, #32]
 801ce62:	f043 0302 	orr.w	r3, r3, #2
 801ce66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801ce68:	68fb      	ldr	r3, [r7, #12]
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ce70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ce72:	2301      	movs	r3, #1
 801ce74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801ce78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d01c      	beq.n	801ceba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801ce80:	68f8      	ldr	r0, [r7, #12]
 801ce82:	f7ff fe63 	bl	801cb4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801ce86:	68fb      	ldr	r3, [r7, #12]
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	6859      	ldr	r1, [r3, #4]
 801ce8c:	68fb      	ldr	r3, [r7, #12]
 801ce8e:	681a      	ldr	r2, [r3, #0]
 801ce90:	4b0d      	ldr	r3, [pc, #52]	; (801cec8 <I2C_IsErrorOccurred+0x1bc>)
 801ce92:	400b      	ands	r3, r1
 801ce94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ce9a:	6a3b      	ldr	r3, [r7, #32]
 801ce9c:	431a      	orrs	r2, r3
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	2220      	movs	r2, #32
 801cea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	2200      	movs	r2, #0
 801ceae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	2200      	movs	r2, #0
 801ceb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801ceba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801cebe:	4618      	mov	r0, r3
 801cec0:	3728      	adds	r7, #40	; 0x28
 801cec2:	46bd      	mov	sp, r7
 801cec4:	bd80      	pop	{r7, pc}
 801cec6:	bf00      	nop
 801cec8:	fe00e800 	.word	0xfe00e800

0801cecc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801cecc:	b480      	push	{r7}
 801cece:	b087      	sub	sp, #28
 801ced0:	af00      	add	r7, sp, #0
 801ced2:	60f8      	str	r0, [r7, #12]
 801ced4:	607b      	str	r3, [r7, #4]
 801ced6:	460b      	mov	r3, r1
 801ced8:	817b      	strh	r3, [r7, #10]
 801ceda:	4613      	mov	r3, r2
 801cedc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801cede:	897b      	ldrh	r3, [r7, #10]
 801cee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801cee4:	7a7b      	ldrb	r3, [r7, #9]
 801cee6:	041b      	lsls	r3, r3, #16
 801cee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801ceec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801cef2:	6a3b      	ldr	r3, [r7, #32]
 801cef4:	4313      	orrs	r3, r2
 801cef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cefa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	685a      	ldr	r2, [r3, #4]
 801cf02:	6a3b      	ldr	r3, [r7, #32]
 801cf04:	0d5b      	lsrs	r3, r3, #21
 801cf06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801cf0a:	4b08      	ldr	r3, [pc, #32]	; (801cf2c <I2C_TransferConfig+0x60>)
 801cf0c:	430b      	orrs	r3, r1
 801cf0e:	43db      	mvns	r3, r3
 801cf10:	ea02 0103 	and.w	r1, r2, r3
 801cf14:	68fb      	ldr	r3, [r7, #12]
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	697a      	ldr	r2, [r7, #20]
 801cf1a:	430a      	orrs	r2, r1
 801cf1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801cf1e:	bf00      	nop
 801cf20:	371c      	adds	r7, #28
 801cf22:	46bd      	mov	sp, r7
 801cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf28:	4770      	bx	lr
 801cf2a:	bf00      	nop
 801cf2c:	03ff63ff 	.word	0x03ff63ff

0801cf30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801cf30:	b480      	push	{r7}
 801cf32:	b083      	sub	sp, #12
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
 801cf38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801cf40:	b2db      	uxtb	r3, r3
 801cf42:	2b20      	cmp	r3, #32
 801cf44:	d138      	bne.n	801cfb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801cf4c:	2b01      	cmp	r3, #1
 801cf4e:	d101      	bne.n	801cf54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801cf50:	2302      	movs	r3, #2
 801cf52:	e032      	b.n	801cfba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	2201      	movs	r2, #1
 801cf58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	2224      	movs	r2, #36	; 0x24
 801cf60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	681a      	ldr	r2, [r3, #0]
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	f022 0201 	bic.w	r2, r2, #1
 801cf72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	681a      	ldr	r2, [r3, #0]
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801cf82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	6819      	ldr	r1, [r3, #0]
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	683a      	ldr	r2, [r7, #0]
 801cf90:	430a      	orrs	r2, r1
 801cf92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	681b      	ldr	r3, [r3, #0]
 801cf98:	681a      	ldr	r2, [r3, #0]
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	f042 0201 	orr.w	r2, r2, #1
 801cfa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	2220      	movs	r2, #32
 801cfa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	2200      	movs	r2, #0
 801cfb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801cfb4:	2300      	movs	r3, #0
 801cfb6:	e000      	b.n	801cfba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801cfb8:	2302      	movs	r3, #2
  }
}
 801cfba:	4618      	mov	r0, r3
 801cfbc:	370c      	adds	r7, #12
 801cfbe:	46bd      	mov	sp, r7
 801cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfc4:	4770      	bx	lr

0801cfc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801cfc6:	b480      	push	{r7}
 801cfc8:	b085      	sub	sp, #20
 801cfca:	af00      	add	r7, sp, #0
 801cfcc:	6078      	str	r0, [r7, #4]
 801cfce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801cfd6:	b2db      	uxtb	r3, r3
 801cfd8:	2b20      	cmp	r3, #32
 801cfda:	d139      	bne.n	801d050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801cfe2:	2b01      	cmp	r3, #1
 801cfe4:	d101      	bne.n	801cfea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801cfe6:	2302      	movs	r3, #2
 801cfe8:	e033      	b.n	801d052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	2201      	movs	r2, #1
 801cfee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	2224      	movs	r2, #36	; 0x24
 801cff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	681a      	ldr	r2, [r3, #0]
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	f022 0201 	bic.w	r2, r2, #1
 801d008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801d018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801d01a:	683b      	ldr	r3, [r7, #0]
 801d01c:	021b      	lsls	r3, r3, #8
 801d01e:	68fa      	ldr	r2, [r7, #12]
 801d020:	4313      	orrs	r3, r2
 801d022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	68fa      	ldr	r2, [r7, #12]
 801d02a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	681a      	ldr	r2, [r3, #0]
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	f042 0201 	orr.w	r2, r2, #1
 801d03a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	2220      	movs	r2, #32
 801d040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	2200      	movs	r2, #0
 801d048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801d04c:	2300      	movs	r3, #0
 801d04e:	e000      	b.n	801d052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801d050:	2302      	movs	r3, #2
  }
}
 801d052:	4618      	mov	r0, r3
 801d054:	3714      	adds	r7, #20
 801d056:	46bd      	mov	sp, r7
 801d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d05c:	4770      	bx	lr

0801d05e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801d05e:	b580      	push	{r7, lr}
 801d060:	b084      	sub	sp, #16
 801d062:	af00      	add	r7, sp, #0
 801d064:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d101      	bne.n	801d070 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801d06c:	2301      	movs	r3, #1
 801d06e:	e041      	b.n	801d0f4 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801d078:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	f245 5255 	movw	r2, #21845	; 0x5555
 801d082:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	687a      	ldr	r2, [r7, #4]
 801d08a:	6852      	ldr	r2, [r2, #4]
 801d08c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	687a      	ldr	r2, [r7, #4]
 801d094:	6892      	ldr	r2, [r2, #8]
 801d096:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801d098:	f7fc fcca 	bl	8019a30 <HAL_GetTick>
 801d09c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801d09e:	e00f      	b.n	801d0c0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801d0a0:	f7fc fcc6 	bl	8019a30 <HAL_GetTick>
 801d0a4:	4602      	mov	r2, r0
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	1ad3      	subs	r3, r2, r3
 801d0aa:	2b31      	cmp	r3, #49	; 0x31
 801d0ac:	d908      	bls.n	801d0c0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	68db      	ldr	r3, [r3, #12]
 801d0b4:	f003 0307 	and.w	r3, r3, #7
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d001      	beq.n	801d0c0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 801d0bc:	2303      	movs	r3, #3
 801d0be:	e019      	b.n	801d0f4 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	68db      	ldr	r3, [r3, #12]
 801d0c6:	f003 0307 	and.w	r3, r3, #7
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d1e8      	bne.n	801d0a0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	691a      	ldr	r2, [r3, #16]
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	68db      	ldr	r3, [r3, #12]
 801d0d8:	429a      	cmp	r2, r3
 801d0da:	d005      	beq.n	801d0e8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	681b      	ldr	r3, [r3, #0]
 801d0e0:	687a      	ldr	r2, [r7, #4]
 801d0e2:	68d2      	ldr	r2, [r2, #12]
 801d0e4:	611a      	str	r2, [r3, #16]
 801d0e6:	e004      	b.n	801d0f2 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801d0f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801d0f2:	2300      	movs	r3, #0
}
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	3710      	adds	r7, #16
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	bd80      	pop	{r7, pc}

0801d0fc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801d0fc:	b480      	push	{r7}
 801d0fe:	b083      	sub	sp, #12
 801d100:	af00      	add	r7, sp, #0
 801d102:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801d10c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801d10e:	2300      	movs	r3, #0
}
 801d110:	4618      	mov	r0, r3
 801d112:	370c      	adds	r7, #12
 801d114:	46bd      	mov	sp, r7
 801d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d11a:	4770      	bx	lr

0801d11c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801d11c:	b580      	push	{r7, lr}
 801d11e:	b086      	sub	sp, #24
 801d120:	af00      	add	r7, sp, #0
 801d122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801d124:	2300      	movs	r3, #0
 801d126:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d101      	bne.n	801d132 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801d12e:	2301      	movs	r3, #1
 801d130:	e29b      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	f003 0301 	and.w	r3, r3, #1
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	f000 8087 	beq.w	801d24e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801d140:	4b96      	ldr	r3, [pc, #600]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d142:	689b      	ldr	r3, [r3, #8]
 801d144:	f003 030c 	and.w	r3, r3, #12
 801d148:	2b04      	cmp	r3, #4
 801d14a:	d00c      	beq.n	801d166 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801d14c:	4b93      	ldr	r3, [pc, #588]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d14e:	689b      	ldr	r3, [r3, #8]
 801d150:	f003 030c 	and.w	r3, r3, #12
 801d154:	2b08      	cmp	r3, #8
 801d156:	d112      	bne.n	801d17e <HAL_RCC_OscConfig+0x62>
 801d158:	4b90      	ldr	r3, [pc, #576]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d15a:	685b      	ldr	r3, [r3, #4]
 801d15c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d164:	d10b      	bne.n	801d17e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d166:	4b8d      	ldr	r3, [pc, #564]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d06c      	beq.n	801d24c <HAL_RCC_OscConfig+0x130>
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	685b      	ldr	r3, [r3, #4]
 801d176:	2b00      	cmp	r3, #0
 801d178:	d168      	bne.n	801d24c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801d17a:	2301      	movs	r3, #1
 801d17c:	e275      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	685b      	ldr	r3, [r3, #4]
 801d182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d186:	d106      	bne.n	801d196 <HAL_RCC_OscConfig+0x7a>
 801d188:	4b84      	ldr	r3, [pc, #528]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	4a83      	ldr	r2, [pc, #524]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d18e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d192:	6013      	str	r3, [r2, #0]
 801d194:	e02e      	b.n	801d1f4 <HAL_RCC_OscConfig+0xd8>
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	685b      	ldr	r3, [r3, #4]
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d10c      	bne.n	801d1b8 <HAL_RCC_OscConfig+0x9c>
 801d19e:	4b7f      	ldr	r3, [pc, #508]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	4a7e      	ldr	r2, [pc, #504]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d1a8:	6013      	str	r3, [r2, #0]
 801d1aa:	4b7c      	ldr	r3, [pc, #496]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	4a7b      	ldr	r2, [pc, #492]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801d1b4:	6013      	str	r3, [r2, #0]
 801d1b6:	e01d      	b.n	801d1f4 <HAL_RCC_OscConfig+0xd8>
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	685b      	ldr	r3, [r3, #4]
 801d1bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d1c0:	d10c      	bne.n	801d1dc <HAL_RCC_OscConfig+0xc0>
 801d1c2:	4b76      	ldr	r3, [pc, #472]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	4a75      	ldr	r2, [pc, #468]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801d1cc:	6013      	str	r3, [r2, #0]
 801d1ce:	4b73      	ldr	r3, [pc, #460]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	4a72      	ldr	r2, [pc, #456]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d1d8:	6013      	str	r3, [r2, #0]
 801d1da:	e00b      	b.n	801d1f4 <HAL_RCC_OscConfig+0xd8>
 801d1dc:	4b6f      	ldr	r3, [pc, #444]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	4a6e      	ldr	r2, [pc, #440]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d1e6:	6013      	str	r3, [r2, #0]
 801d1e8:	4b6c      	ldr	r3, [pc, #432]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	4a6b      	ldr	r2, [pc, #428]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d1ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801d1f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	685b      	ldr	r3, [r3, #4]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d013      	beq.n	801d224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d1fc:	f7fc fc18 	bl	8019a30 <HAL_GetTick>
 801d200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d202:	e008      	b.n	801d216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d204:	f7fc fc14 	bl	8019a30 <HAL_GetTick>
 801d208:	4602      	mov	r2, r0
 801d20a:	693b      	ldr	r3, [r7, #16]
 801d20c:	1ad3      	subs	r3, r2, r3
 801d20e:	2b64      	cmp	r3, #100	; 0x64
 801d210:	d901      	bls.n	801d216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801d212:	2303      	movs	r3, #3
 801d214:	e229      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d216:	4b61      	ldr	r3, [pc, #388]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d0f0      	beq.n	801d204 <HAL_RCC_OscConfig+0xe8>
 801d222:	e014      	b.n	801d24e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d224:	f7fc fc04 	bl	8019a30 <HAL_GetTick>
 801d228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801d22a:	e008      	b.n	801d23e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d22c:	f7fc fc00 	bl	8019a30 <HAL_GetTick>
 801d230:	4602      	mov	r2, r0
 801d232:	693b      	ldr	r3, [r7, #16]
 801d234:	1ad3      	subs	r3, r2, r3
 801d236:	2b64      	cmp	r3, #100	; 0x64
 801d238:	d901      	bls.n	801d23e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801d23a:	2303      	movs	r3, #3
 801d23c:	e215      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801d23e:	4b57      	ldr	r3, [pc, #348]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d240:	681b      	ldr	r3, [r3, #0]
 801d242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d246:	2b00      	cmp	r3, #0
 801d248:	d1f0      	bne.n	801d22c <HAL_RCC_OscConfig+0x110>
 801d24a:	e000      	b.n	801d24e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d24c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	f003 0302 	and.w	r3, r3, #2
 801d256:	2b00      	cmp	r3, #0
 801d258:	d069      	beq.n	801d32e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801d25a:	4b50      	ldr	r3, [pc, #320]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d25c:	689b      	ldr	r3, [r3, #8]
 801d25e:	f003 030c 	and.w	r3, r3, #12
 801d262:	2b00      	cmp	r3, #0
 801d264:	d00b      	beq.n	801d27e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801d266:	4b4d      	ldr	r3, [pc, #308]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d268:	689b      	ldr	r3, [r3, #8]
 801d26a:	f003 030c 	and.w	r3, r3, #12
 801d26e:	2b08      	cmp	r3, #8
 801d270:	d11c      	bne.n	801d2ac <HAL_RCC_OscConfig+0x190>
 801d272:	4b4a      	ldr	r3, [pc, #296]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d274:	685b      	ldr	r3, [r3, #4]
 801d276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d116      	bne.n	801d2ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801d27e:	4b47      	ldr	r3, [pc, #284]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	f003 0302 	and.w	r3, r3, #2
 801d286:	2b00      	cmp	r3, #0
 801d288:	d005      	beq.n	801d296 <HAL_RCC_OscConfig+0x17a>
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	68db      	ldr	r3, [r3, #12]
 801d28e:	2b01      	cmp	r3, #1
 801d290:	d001      	beq.n	801d296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801d292:	2301      	movs	r3, #1
 801d294:	e1e9      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d296:	4b41      	ldr	r3, [pc, #260]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	691b      	ldr	r3, [r3, #16]
 801d2a2:	00db      	lsls	r3, r3, #3
 801d2a4:	493d      	ldr	r1, [pc, #244]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d2a6:	4313      	orrs	r3, r2
 801d2a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801d2aa:	e040      	b.n	801d32e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	68db      	ldr	r3, [r3, #12]
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d023      	beq.n	801d2fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801d2b4:	4b39      	ldr	r3, [pc, #228]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	4a38      	ldr	r2, [pc, #224]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d2ba:	f043 0301 	orr.w	r3, r3, #1
 801d2be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d2c0:	f7fc fbb6 	bl	8019a30 <HAL_GetTick>
 801d2c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d2c6:	e008      	b.n	801d2da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d2c8:	f7fc fbb2 	bl	8019a30 <HAL_GetTick>
 801d2cc:	4602      	mov	r2, r0
 801d2ce:	693b      	ldr	r3, [r7, #16]
 801d2d0:	1ad3      	subs	r3, r2, r3
 801d2d2:	2b02      	cmp	r3, #2
 801d2d4:	d901      	bls.n	801d2da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801d2d6:	2303      	movs	r3, #3
 801d2d8:	e1c7      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d2da:	4b30      	ldr	r3, [pc, #192]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	f003 0302 	and.w	r3, r3, #2
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d0f0      	beq.n	801d2c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d2e6:	4b2d      	ldr	r3, [pc, #180]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	691b      	ldr	r3, [r3, #16]
 801d2f2:	00db      	lsls	r3, r3, #3
 801d2f4:	4929      	ldr	r1, [pc, #164]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d2f6:	4313      	orrs	r3, r2
 801d2f8:	600b      	str	r3, [r1, #0]
 801d2fa:	e018      	b.n	801d32e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801d2fc:	4b27      	ldr	r3, [pc, #156]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	4a26      	ldr	r2, [pc, #152]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d302:	f023 0301 	bic.w	r3, r3, #1
 801d306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d308:	f7fc fb92 	bl	8019a30 <HAL_GetTick>
 801d30c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d30e:	e008      	b.n	801d322 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d310:	f7fc fb8e 	bl	8019a30 <HAL_GetTick>
 801d314:	4602      	mov	r2, r0
 801d316:	693b      	ldr	r3, [r7, #16]
 801d318:	1ad3      	subs	r3, r2, r3
 801d31a:	2b02      	cmp	r3, #2
 801d31c:	d901      	bls.n	801d322 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801d31e:	2303      	movs	r3, #3
 801d320:	e1a3      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801d322:	4b1e      	ldr	r3, [pc, #120]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	f003 0302 	and.w	r3, r3, #2
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d1f0      	bne.n	801d310 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	f003 0308 	and.w	r3, r3, #8
 801d336:	2b00      	cmp	r3, #0
 801d338:	d038      	beq.n	801d3ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	695b      	ldr	r3, [r3, #20]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d019      	beq.n	801d376 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801d342:	4b16      	ldr	r3, [pc, #88]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d346:	4a15      	ldr	r2, [pc, #84]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d348:	f043 0301 	orr.w	r3, r3, #1
 801d34c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d34e:	f7fc fb6f 	bl	8019a30 <HAL_GetTick>
 801d352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801d354:	e008      	b.n	801d368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d356:	f7fc fb6b 	bl	8019a30 <HAL_GetTick>
 801d35a:	4602      	mov	r2, r0
 801d35c:	693b      	ldr	r3, [r7, #16]
 801d35e:	1ad3      	subs	r3, r2, r3
 801d360:	2b02      	cmp	r3, #2
 801d362:	d901      	bls.n	801d368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801d364:	2303      	movs	r3, #3
 801d366:	e180      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801d368:	4b0c      	ldr	r3, [pc, #48]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d36c:	f003 0302 	and.w	r3, r3, #2
 801d370:	2b00      	cmp	r3, #0
 801d372:	d0f0      	beq.n	801d356 <HAL_RCC_OscConfig+0x23a>
 801d374:	e01a      	b.n	801d3ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801d376:	4b09      	ldr	r3, [pc, #36]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d37a:	4a08      	ldr	r2, [pc, #32]	; (801d39c <HAL_RCC_OscConfig+0x280>)
 801d37c:	f023 0301 	bic.w	r3, r3, #1
 801d380:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d382:	f7fc fb55 	bl	8019a30 <HAL_GetTick>
 801d386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801d388:	e00a      	b.n	801d3a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d38a:	f7fc fb51 	bl	8019a30 <HAL_GetTick>
 801d38e:	4602      	mov	r2, r0
 801d390:	693b      	ldr	r3, [r7, #16]
 801d392:	1ad3      	subs	r3, r2, r3
 801d394:	2b02      	cmp	r3, #2
 801d396:	d903      	bls.n	801d3a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801d398:	2303      	movs	r3, #3
 801d39a:	e166      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
 801d39c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801d3a0:	4b92      	ldr	r3, [pc, #584]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d3a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d3a4:	f003 0302 	and.w	r3, r3, #2
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d1ee      	bne.n	801d38a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	f003 0304 	and.w	r3, r3, #4
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	f000 80a4 	beq.w	801d502 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d3ba:	4b8c      	ldr	r3, [pc, #560]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d10d      	bne.n	801d3e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801d3c6:	4b89      	ldr	r3, [pc, #548]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3ca:	4a88      	ldr	r2, [pc, #544]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d3cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d3d0:	6413      	str	r3, [r2, #64]	; 0x40
 801d3d2:	4b86      	ldr	r3, [pc, #536]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d3da:	60bb      	str	r3, [r7, #8]
 801d3dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801d3de:	2301      	movs	r3, #1
 801d3e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801d3e2:	4b83      	ldr	r3, [pc, #524]	; (801d5f0 <HAL_RCC_OscConfig+0x4d4>)
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d118      	bne.n	801d420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801d3ee:	4b80      	ldr	r3, [pc, #512]	; (801d5f0 <HAL_RCC_OscConfig+0x4d4>)
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	4a7f      	ldr	r2, [pc, #508]	; (801d5f0 <HAL_RCC_OscConfig+0x4d4>)
 801d3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d3f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801d3fa:	f7fc fb19 	bl	8019a30 <HAL_GetTick>
 801d3fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801d400:	e008      	b.n	801d414 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d402:	f7fc fb15 	bl	8019a30 <HAL_GetTick>
 801d406:	4602      	mov	r2, r0
 801d408:	693b      	ldr	r3, [r7, #16]
 801d40a:	1ad3      	subs	r3, r2, r3
 801d40c:	2b64      	cmp	r3, #100	; 0x64
 801d40e:	d901      	bls.n	801d414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801d410:	2303      	movs	r3, #3
 801d412:	e12a      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801d414:	4b76      	ldr	r3, [pc, #472]	; (801d5f0 <HAL_RCC_OscConfig+0x4d4>)
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d0f0      	beq.n	801d402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	689b      	ldr	r3, [r3, #8]
 801d424:	2b01      	cmp	r3, #1
 801d426:	d106      	bne.n	801d436 <HAL_RCC_OscConfig+0x31a>
 801d428:	4b70      	ldr	r3, [pc, #448]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d42a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d42c:	4a6f      	ldr	r2, [pc, #444]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d42e:	f043 0301 	orr.w	r3, r3, #1
 801d432:	6713      	str	r3, [r2, #112]	; 0x70
 801d434:	e02d      	b.n	801d492 <HAL_RCC_OscConfig+0x376>
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	689b      	ldr	r3, [r3, #8]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d10c      	bne.n	801d458 <HAL_RCC_OscConfig+0x33c>
 801d43e:	4b6b      	ldr	r3, [pc, #428]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d442:	4a6a      	ldr	r2, [pc, #424]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d444:	f023 0301 	bic.w	r3, r3, #1
 801d448:	6713      	str	r3, [r2, #112]	; 0x70
 801d44a:	4b68      	ldr	r3, [pc, #416]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d44e:	4a67      	ldr	r2, [pc, #412]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d450:	f023 0304 	bic.w	r3, r3, #4
 801d454:	6713      	str	r3, [r2, #112]	; 0x70
 801d456:	e01c      	b.n	801d492 <HAL_RCC_OscConfig+0x376>
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	689b      	ldr	r3, [r3, #8]
 801d45c:	2b05      	cmp	r3, #5
 801d45e:	d10c      	bne.n	801d47a <HAL_RCC_OscConfig+0x35e>
 801d460:	4b62      	ldr	r3, [pc, #392]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d464:	4a61      	ldr	r2, [pc, #388]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d466:	f043 0304 	orr.w	r3, r3, #4
 801d46a:	6713      	str	r3, [r2, #112]	; 0x70
 801d46c:	4b5f      	ldr	r3, [pc, #380]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d470:	4a5e      	ldr	r2, [pc, #376]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d472:	f043 0301 	orr.w	r3, r3, #1
 801d476:	6713      	str	r3, [r2, #112]	; 0x70
 801d478:	e00b      	b.n	801d492 <HAL_RCC_OscConfig+0x376>
 801d47a:	4b5c      	ldr	r3, [pc, #368]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d47e:	4a5b      	ldr	r2, [pc, #364]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d480:	f023 0301 	bic.w	r3, r3, #1
 801d484:	6713      	str	r3, [r2, #112]	; 0x70
 801d486:	4b59      	ldr	r3, [pc, #356]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d48a:	4a58      	ldr	r2, [pc, #352]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d48c:	f023 0304 	bic.w	r3, r3, #4
 801d490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	689b      	ldr	r3, [r3, #8]
 801d496:	2b00      	cmp	r3, #0
 801d498:	d015      	beq.n	801d4c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d49a:	f7fc fac9 	bl	8019a30 <HAL_GetTick>
 801d49e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d4a0:	e00a      	b.n	801d4b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d4a2:	f7fc fac5 	bl	8019a30 <HAL_GetTick>
 801d4a6:	4602      	mov	r2, r0
 801d4a8:	693b      	ldr	r3, [r7, #16]
 801d4aa:	1ad3      	subs	r3, r2, r3
 801d4ac:	f241 3288 	movw	r2, #5000	; 0x1388
 801d4b0:	4293      	cmp	r3, r2
 801d4b2:	d901      	bls.n	801d4b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801d4b4:	2303      	movs	r3, #3
 801d4b6:	e0d8      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d4b8:	4b4c      	ldr	r3, [pc, #304]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d4bc:	f003 0302 	and.w	r3, r3, #2
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d0ee      	beq.n	801d4a2 <HAL_RCC_OscConfig+0x386>
 801d4c4:	e014      	b.n	801d4f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d4c6:	f7fc fab3 	bl	8019a30 <HAL_GetTick>
 801d4ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801d4cc:	e00a      	b.n	801d4e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d4ce:	f7fc faaf 	bl	8019a30 <HAL_GetTick>
 801d4d2:	4602      	mov	r2, r0
 801d4d4:	693b      	ldr	r3, [r7, #16]
 801d4d6:	1ad3      	subs	r3, r2, r3
 801d4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 801d4dc:	4293      	cmp	r3, r2
 801d4de:	d901      	bls.n	801d4e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801d4e0:	2303      	movs	r3, #3
 801d4e2:	e0c2      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801d4e4:	4b41      	ldr	r3, [pc, #260]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d4e8:	f003 0302 	and.w	r3, r3, #2
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d1ee      	bne.n	801d4ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801d4f0:	7dfb      	ldrb	r3, [r7, #23]
 801d4f2:	2b01      	cmp	r3, #1
 801d4f4:	d105      	bne.n	801d502 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d4f6:	4b3d      	ldr	r3, [pc, #244]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4fa:	4a3c      	ldr	r2, [pc, #240]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d4fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801d502:	687b      	ldr	r3, [r7, #4]
 801d504:	699b      	ldr	r3, [r3, #24]
 801d506:	2b00      	cmp	r3, #0
 801d508:	f000 80ae 	beq.w	801d668 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801d50c:	4b37      	ldr	r3, [pc, #220]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d50e:	689b      	ldr	r3, [r3, #8]
 801d510:	f003 030c 	and.w	r3, r3, #12
 801d514:	2b08      	cmp	r3, #8
 801d516:	d06d      	beq.n	801d5f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	699b      	ldr	r3, [r3, #24]
 801d51c:	2b02      	cmp	r3, #2
 801d51e:	d14b      	bne.n	801d5b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d520:	4b32      	ldr	r3, [pc, #200]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	4a31      	ldr	r2, [pc, #196]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d52a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d52c:	f7fc fa80 	bl	8019a30 <HAL_GetTick>
 801d530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d532:	e008      	b.n	801d546 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d534:	f7fc fa7c 	bl	8019a30 <HAL_GetTick>
 801d538:	4602      	mov	r2, r0
 801d53a:	693b      	ldr	r3, [r7, #16]
 801d53c:	1ad3      	subs	r3, r2, r3
 801d53e:	2b02      	cmp	r3, #2
 801d540:	d901      	bls.n	801d546 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801d542:	2303      	movs	r3, #3
 801d544:	e091      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d546:	4b29      	ldr	r3, [pc, #164]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d548:	681b      	ldr	r3, [r3, #0]
 801d54a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d1f0      	bne.n	801d534 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	69da      	ldr	r2, [r3, #28]
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	6a1b      	ldr	r3, [r3, #32]
 801d55a:	431a      	orrs	r2, r3
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d560:	019b      	lsls	r3, r3, #6
 801d562:	431a      	orrs	r2, r3
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d568:	085b      	lsrs	r3, r3, #1
 801d56a:	3b01      	subs	r3, #1
 801d56c:	041b      	lsls	r3, r3, #16
 801d56e:	431a      	orrs	r2, r3
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d574:	061b      	lsls	r3, r3, #24
 801d576:	431a      	orrs	r2, r3
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d57c:	071b      	lsls	r3, r3, #28
 801d57e:	491b      	ldr	r1, [pc, #108]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d580:	4313      	orrs	r3, r2
 801d582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d584:	4b19      	ldr	r3, [pc, #100]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d586:	681b      	ldr	r3, [r3, #0]
 801d588:	4a18      	ldr	r2, [pc, #96]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d58a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d58e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d590:	f7fc fa4e 	bl	8019a30 <HAL_GetTick>
 801d594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d596:	e008      	b.n	801d5aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d598:	f7fc fa4a 	bl	8019a30 <HAL_GetTick>
 801d59c:	4602      	mov	r2, r0
 801d59e:	693b      	ldr	r3, [r7, #16]
 801d5a0:	1ad3      	subs	r3, r2, r3
 801d5a2:	2b02      	cmp	r3, #2
 801d5a4:	d901      	bls.n	801d5aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801d5a6:	2303      	movs	r3, #3
 801d5a8:	e05f      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d5aa:	4b10      	ldr	r3, [pc, #64]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d0f0      	beq.n	801d598 <HAL_RCC_OscConfig+0x47c>
 801d5b6:	e057      	b.n	801d668 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d5b8:	4b0c      	ldr	r3, [pc, #48]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	4a0b      	ldr	r2, [pc, #44]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d5be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d5c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d5c4:	f7fc fa34 	bl	8019a30 <HAL_GetTick>
 801d5c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d5ca:	e008      	b.n	801d5de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d5cc:	f7fc fa30 	bl	8019a30 <HAL_GetTick>
 801d5d0:	4602      	mov	r2, r0
 801d5d2:	693b      	ldr	r3, [r7, #16]
 801d5d4:	1ad3      	subs	r3, r2, r3
 801d5d6:	2b02      	cmp	r3, #2
 801d5d8:	d901      	bls.n	801d5de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801d5da:	2303      	movs	r3, #3
 801d5dc:	e045      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801d5de:	4b03      	ldr	r3, [pc, #12]	; (801d5ec <HAL_RCC_OscConfig+0x4d0>)
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d1f0      	bne.n	801d5cc <HAL_RCC_OscConfig+0x4b0>
 801d5ea:	e03d      	b.n	801d668 <HAL_RCC_OscConfig+0x54c>
 801d5ec:	40023800 	.word	0x40023800
 801d5f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801d5f4:	4b1f      	ldr	r3, [pc, #124]	; (801d674 <HAL_RCC_OscConfig+0x558>)
 801d5f6:	685b      	ldr	r3, [r3, #4]
 801d5f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	699b      	ldr	r3, [r3, #24]
 801d5fe:	2b01      	cmp	r3, #1
 801d600:	d030      	beq.n	801d664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d60c:	429a      	cmp	r2, r3
 801d60e:	d129      	bne.n	801d664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801d610:	68fb      	ldr	r3, [r7, #12]
 801d612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d61a:	429a      	cmp	r2, r3
 801d61c:	d122      	bne.n	801d664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d61e:	68fa      	ldr	r2, [r7, #12]
 801d620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801d624:	4013      	ands	r3, r2
 801d626:	687a      	ldr	r2, [r7, #4]
 801d628:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801d62a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801d62c:	4293      	cmp	r3, r2
 801d62e:	d119      	bne.n	801d664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801d630:	68fb      	ldr	r3, [r7, #12]
 801d632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d63a:	085b      	lsrs	r3, r3, #1
 801d63c:	3b01      	subs	r3, #1
 801d63e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801d640:	429a      	cmp	r2, r3
 801d642:	d10f      	bne.n	801d664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d64e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801d650:	429a      	cmp	r2, r3
 801d652:	d107      	bne.n	801d664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d65e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d660:	429a      	cmp	r2, r3
 801d662:	d001      	beq.n	801d668 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801d664:	2301      	movs	r3, #1
 801d666:	e000      	b.n	801d66a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 801d668:	2300      	movs	r3, #0
}
 801d66a:	4618      	mov	r0, r3
 801d66c:	3718      	adds	r7, #24
 801d66e:	46bd      	mov	sp, r7
 801d670:	bd80      	pop	{r7, pc}
 801d672:	bf00      	nop
 801d674:	40023800 	.word	0x40023800

0801d678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d678:	b580      	push	{r7, lr}
 801d67a:	b084      	sub	sp, #16
 801d67c:	af00      	add	r7, sp, #0
 801d67e:	6078      	str	r0, [r7, #4]
 801d680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801d682:	2300      	movs	r3, #0
 801d684:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d101      	bne.n	801d690 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801d68c:	2301      	movs	r3, #1
 801d68e:	e0d0      	b.n	801d832 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d690:	4b6a      	ldr	r3, [pc, #424]	; (801d83c <HAL_RCC_ClockConfig+0x1c4>)
 801d692:	681b      	ldr	r3, [r3, #0]
 801d694:	f003 030f 	and.w	r3, r3, #15
 801d698:	683a      	ldr	r2, [r7, #0]
 801d69a:	429a      	cmp	r2, r3
 801d69c:	d910      	bls.n	801d6c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d69e:	4b67      	ldr	r3, [pc, #412]	; (801d83c <HAL_RCC_ClockConfig+0x1c4>)
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	f023 020f 	bic.w	r2, r3, #15
 801d6a6:	4965      	ldr	r1, [pc, #404]	; (801d83c <HAL_RCC_ClockConfig+0x1c4>)
 801d6a8:	683b      	ldr	r3, [r7, #0]
 801d6aa:	4313      	orrs	r3, r2
 801d6ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d6ae:	4b63      	ldr	r3, [pc, #396]	; (801d83c <HAL_RCC_ClockConfig+0x1c4>)
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	f003 030f 	and.w	r3, r3, #15
 801d6b6:	683a      	ldr	r2, [r7, #0]
 801d6b8:	429a      	cmp	r2, r3
 801d6ba:	d001      	beq.n	801d6c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801d6bc:	2301      	movs	r3, #1
 801d6be:	e0b8      	b.n	801d832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	f003 0302 	and.w	r3, r3, #2
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d020      	beq.n	801d70e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	681b      	ldr	r3, [r3, #0]
 801d6d0:	f003 0304 	and.w	r3, r3, #4
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d005      	beq.n	801d6e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801d6d8:	4b59      	ldr	r3, [pc, #356]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d6da:	689b      	ldr	r3, [r3, #8]
 801d6dc:	4a58      	ldr	r2, [pc, #352]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d6de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801d6e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	f003 0308 	and.w	r3, r3, #8
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d005      	beq.n	801d6fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801d6f0:	4b53      	ldr	r3, [pc, #332]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d6f2:	689b      	ldr	r3, [r3, #8]
 801d6f4:	4a52      	ldr	r2, [pc, #328]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d6f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801d6fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d6fc:	4b50      	ldr	r3, [pc, #320]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d6fe:	689b      	ldr	r3, [r3, #8]
 801d700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	689b      	ldr	r3, [r3, #8]
 801d708:	494d      	ldr	r1, [pc, #308]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d70a:	4313      	orrs	r3, r2
 801d70c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	f003 0301 	and.w	r3, r3, #1
 801d716:	2b00      	cmp	r3, #0
 801d718:	d040      	beq.n	801d79c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	685b      	ldr	r3, [r3, #4]
 801d71e:	2b01      	cmp	r3, #1
 801d720:	d107      	bne.n	801d732 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801d722:	4b47      	ldr	r3, [pc, #284]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d115      	bne.n	801d75a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801d72e:	2301      	movs	r3, #1
 801d730:	e07f      	b.n	801d832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	685b      	ldr	r3, [r3, #4]
 801d736:	2b02      	cmp	r3, #2
 801d738:	d107      	bne.n	801d74a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801d73a:	4b41      	ldr	r3, [pc, #260]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d742:	2b00      	cmp	r3, #0
 801d744:	d109      	bne.n	801d75a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801d746:	2301      	movs	r3, #1
 801d748:	e073      	b.n	801d832 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801d74a:	4b3d      	ldr	r3, [pc, #244]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	f003 0302 	and.w	r3, r3, #2
 801d752:	2b00      	cmp	r3, #0
 801d754:	d101      	bne.n	801d75a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801d756:	2301      	movs	r3, #1
 801d758:	e06b      	b.n	801d832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801d75a:	4b39      	ldr	r3, [pc, #228]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d75c:	689b      	ldr	r3, [r3, #8]
 801d75e:	f023 0203 	bic.w	r2, r3, #3
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	685b      	ldr	r3, [r3, #4]
 801d766:	4936      	ldr	r1, [pc, #216]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d768:	4313      	orrs	r3, r2
 801d76a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d76c:	f7fc f960 	bl	8019a30 <HAL_GetTick>
 801d770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d772:	e00a      	b.n	801d78a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d774:	f7fc f95c 	bl	8019a30 <HAL_GetTick>
 801d778:	4602      	mov	r2, r0
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	1ad3      	subs	r3, r2, r3
 801d77e:	f241 3288 	movw	r2, #5000	; 0x1388
 801d782:	4293      	cmp	r3, r2
 801d784:	d901      	bls.n	801d78a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801d786:	2303      	movs	r3, #3
 801d788:	e053      	b.n	801d832 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d78a:	4b2d      	ldr	r3, [pc, #180]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d78c:	689b      	ldr	r3, [r3, #8]
 801d78e:	f003 020c 	and.w	r2, r3, #12
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	685b      	ldr	r3, [r3, #4]
 801d796:	009b      	lsls	r3, r3, #2
 801d798:	429a      	cmp	r2, r3
 801d79a:	d1eb      	bne.n	801d774 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d79c:	4b27      	ldr	r3, [pc, #156]	; (801d83c <HAL_RCC_ClockConfig+0x1c4>)
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	f003 030f 	and.w	r3, r3, #15
 801d7a4:	683a      	ldr	r2, [r7, #0]
 801d7a6:	429a      	cmp	r2, r3
 801d7a8:	d210      	bcs.n	801d7cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d7aa:	4b24      	ldr	r3, [pc, #144]	; (801d83c <HAL_RCC_ClockConfig+0x1c4>)
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	f023 020f 	bic.w	r2, r3, #15
 801d7b2:	4922      	ldr	r1, [pc, #136]	; (801d83c <HAL_RCC_ClockConfig+0x1c4>)
 801d7b4:	683b      	ldr	r3, [r7, #0]
 801d7b6:	4313      	orrs	r3, r2
 801d7b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d7ba:	4b20      	ldr	r3, [pc, #128]	; (801d83c <HAL_RCC_ClockConfig+0x1c4>)
 801d7bc:	681b      	ldr	r3, [r3, #0]
 801d7be:	f003 030f 	and.w	r3, r3, #15
 801d7c2:	683a      	ldr	r2, [r7, #0]
 801d7c4:	429a      	cmp	r2, r3
 801d7c6:	d001      	beq.n	801d7cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801d7c8:	2301      	movs	r3, #1
 801d7ca:	e032      	b.n	801d832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	f003 0304 	and.w	r3, r3, #4
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	d008      	beq.n	801d7ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801d7d8:	4b19      	ldr	r3, [pc, #100]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d7da:	689b      	ldr	r3, [r3, #8]
 801d7dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	68db      	ldr	r3, [r3, #12]
 801d7e4:	4916      	ldr	r1, [pc, #88]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d7e6:	4313      	orrs	r3, r2
 801d7e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	f003 0308 	and.w	r3, r3, #8
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d009      	beq.n	801d80a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801d7f6:	4b12      	ldr	r3, [pc, #72]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d7f8:	689b      	ldr	r3, [r3, #8]
 801d7fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	691b      	ldr	r3, [r3, #16]
 801d802:	00db      	lsls	r3, r3, #3
 801d804:	490e      	ldr	r1, [pc, #56]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d806:	4313      	orrs	r3, r2
 801d808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801d80a:	f000 f821 	bl	801d850 <HAL_RCC_GetSysClockFreq>
 801d80e:	4602      	mov	r2, r0
 801d810:	4b0b      	ldr	r3, [pc, #44]	; (801d840 <HAL_RCC_ClockConfig+0x1c8>)
 801d812:	689b      	ldr	r3, [r3, #8]
 801d814:	091b      	lsrs	r3, r3, #4
 801d816:	f003 030f 	and.w	r3, r3, #15
 801d81a:	490a      	ldr	r1, [pc, #40]	; (801d844 <HAL_RCC_ClockConfig+0x1cc>)
 801d81c:	5ccb      	ldrb	r3, [r1, r3]
 801d81e:	fa22 f303 	lsr.w	r3, r2, r3
 801d822:	4a09      	ldr	r2, [pc, #36]	; (801d848 <HAL_RCC_ClockConfig+0x1d0>)
 801d824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801d826:	4b09      	ldr	r3, [pc, #36]	; (801d84c <HAL_RCC_ClockConfig+0x1d4>)
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	4618      	mov	r0, r3
 801d82c:	f7fc f8bc 	bl	80199a8 <HAL_InitTick>

  return HAL_OK;
 801d830:	2300      	movs	r3, #0
}
 801d832:	4618      	mov	r0, r3
 801d834:	3710      	adds	r7, #16
 801d836:	46bd      	mov	sp, r7
 801d838:	bd80      	pop	{r7, pc}
 801d83a:	bf00      	nop
 801d83c:	40023c00 	.word	0x40023c00
 801d840:	40023800 	.word	0x40023800
 801d844:	0802dd54 	.word	0x0802dd54
 801d848:	2000031c 	.word	0x2000031c
 801d84c:	20000320 	.word	0x20000320

0801d850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d854:	b090      	sub	sp, #64	; 0x40
 801d856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801d858:	2300      	movs	r3, #0
 801d85a:	637b      	str	r3, [r7, #52]	; 0x34
 801d85c:	2300      	movs	r3, #0
 801d85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d860:	2300      	movs	r3, #0
 801d862:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801d864:	2300      	movs	r3, #0
 801d866:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d868:	4b59      	ldr	r3, [pc, #356]	; (801d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 801d86a:	689b      	ldr	r3, [r3, #8]
 801d86c:	f003 030c 	and.w	r3, r3, #12
 801d870:	2b08      	cmp	r3, #8
 801d872:	d00d      	beq.n	801d890 <HAL_RCC_GetSysClockFreq+0x40>
 801d874:	2b08      	cmp	r3, #8
 801d876:	f200 80a1 	bhi.w	801d9bc <HAL_RCC_GetSysClockFreq+0x16c>
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d002      	beq.n	801d884 <HAL_RCC_GetSysClockFreq+0x34>
 801d87e:	2b04      	cmp	r3, #4
 801d880:	d003      	beq.n	801d88a <HAL_RCC_GetSysClockFreq+0x3a>
 801d882:	e09b      	b.n	801d9bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801d884:	4b53      	ldr	r3, [pc, #332]	; (801d9d4 <HAL_RCC_GetSysClockFreq+0x184>)
 801d886:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801d888:	e09b      	b.n	801d9c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801d88a:	4b53      	ldr	r3, [pc, #332]	; (801d9d8 <HAL_RCC_GetSysClockFreq+0x188>)
 801d88c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801d88e:	e098      	b.n	801d9c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801d890:	4b4f      	ldr	r3, [pc, #316]	; (801d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 801d892:	685b      	ldr	r3, [r3, #4]
 801d894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d898:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801d89a:	4b4d      	ldr	r3, [pc, #308]	; (801d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 801d89c:	685b      	ldr	r3, [r3, #4]
 801d89e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d028      	beq.n	801d8f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801d8a6:	4b4a      	ldr	r3, [pc, #296]	; (801d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 801d8a8:	685b      	ldr	r3, [r3, #4]
 801d8aa:	099b      	lsrs	r3, r3, #6
 801d8ac:	2200      	movs	r2, #0
 801d8ae:	623b      	str	r3, [r7, #32]
 801d8b0:	627a      	str	r2, [r7, #36]	; 0x24
 801d8b2:	6a3b      	ldr	r3, [r7, #32]
 801d8b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801d8b8:	2100      	movs	r1, #0
 801d8ba:	4b47      	ldr	r3, [pc, #284]	; (801d9d8 <HAL_RCC_GetSysClockFreq+0x188>)
 801d8bc:	fb03 f201 	mul.w	r2, r3, r1
 801d8c0:	2300      	movs	r3, #0
 801d8c2:	fb00 f303 	mul.w	r3, r0, r3
 801d8c6:	4413      	add	r3, r2
 801d8c8:	4a43      	ldr	r2, [pc, #268]	; (801d9d8 <HAL_RCC_GetSysClockFreq+0x188>)
 801d8ca:	fba0 1202 	umull	r1, r2, r0, r2
 801d8ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d8d0:	460a      	mov	r2, r1
 801d8d2:	62ba      	str	r2, [r7, #40]	; 0x28
 801d8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d8d6:	4413      	add	r3, r2
 801d8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8dc:	2200      	movs	r2, #0
 801d8de:	61bb      	str	r3, [r7, #24]
 801d8e0:	61fa      	str	r2, [r7, #28]
 801d8e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d8e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801d8ea:	f7e2 fd11 	bl	8000310 <__aeabi_uldivmod>
 801d8ee:	4602      	mov	r2, r0
 801d8f0:	460b      	mov	r3, r1
 801d8f2:	4613      	mov	r3, r2
 801d8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d8f6:	e053      	b.n	801d9a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801d8f8:	4b35      	ldr	r3, [pc, #212]	; (801d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 801d8fa:	685b      	ldr	r3, [r3, #4]
 801d8fc:	099b      	lsrs	r3, r3, #6
 801d8fe:	2200      	movs	r2, #0
 801d900:	613b      	str	r3, [r7, #16]
 801d902:	617a      	str	r2, [r7, #20]
 801d904:	693b      	ldr	r3, [r7, #16]
 801d906:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801d90a:	f04f 0b00 	mov.w	fp, #0
 801d90e:	4652      	mov	r2, sl
 801d910:	465b      	mov	r3, fp
 801d912:	f04f 0000 	mov.w	r0, #0
 801d916:	f04f 0100 	mov.w	r1, #0
 801d91a:	0159      	lsls	r1, r3, #5
 801d91c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801d920:	0150      	lsls	r0, r2, #5
 801d922:	4602      	mov	r2, r0
 801d924:	460b      	mov	r3, r1
 801d926:	ebb2 080a 	subs.w	r8, r2, sl
 801d92a:	eb63 090b 	sbc.w	r9, r3, fp
 801d92e:	f04f 0200 	mov.w	r2, #0
 801d932:	f04f 0300 	mov.w	r3, #0
 801d936:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801d93a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801d93e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801d942:	ebb2 0408 	subs.w	r4, r2, r8
 801d946:	eb63 0509 	sbc.w	r5, r3, r9
 801d94a:	f04f 0200 	mov.w	r2, #0
 801d94e:	f04f 0300 	mov.w	r3, #0
 801d952:	00eb      	lsls	r3, r5, #3
 801d954:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801d958:	00e2      	lsls	r2, r4, #3
 801d95a:	4614      	mov	r4, r2
 801d95c:	461d      	mov	r5, r3
 801d95e:	eb14 030a 	adds.w	r3, r4, sl
 801d962:	603b      	str	r3, [r7, #0]
 801d964:	eb45 030b 	adc.w	r3, r5, fp
 801d968:	607b      	str	r3, [r7, #4]
 801d96a:	f04f 0200 	mov.w	r2, #0
 801d96e:	f04f 0300 	mov.w	r3, #0
 801d972:	e9d7 4500 	ldrd	r4, r5, [r7]
 801d976:	4629      	mov	r1, r5
 801d978:	028b      	lsls	r3, r1, #10
 801d97a:	4621      	mov	r1, r4
 801d97c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801d980:	4621      	mov	r1, r4
 801d982:	028a      	lsls	r2, r1, #10
 801d984:	4610      	mov	r0, r2
 801d986:	4619      	mov	r1, r3
 801d988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d98a:	2200      	movs	r2, #0
 801d98c:	60bb      	str	r3, [r7, #8]
 801d98e:	60fa      	str	r2, [r7, #12]
 801d990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d994:	f7e2 fcbc 	bl	8000310 <__aeabi_uldivmod>
 801d998:	4602      	mov	r2, r0
 801d99a:	460b      	mov	r3, r1
 801d99c:	4613      	mov	r3, r2
 801d99e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801d9a0:	4b0b      	ldr	r3, [pc, #44]	; (801d9d0 <HAL_RCC_GetSysClockFreq+0x180>)
 801d9a2:	685b      	ldr	r3, [r3, #4]
 801d9a4:	0c1b      	lsrs	r3, r3, #16
 801d9a6:	f003 0303 	and.w	r3, r3, #3
 801d9aa:	3301      	adds	r3, #1
 801d9ac:	005b      	lsls	r3, r3, #1
 801d9ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 801d9b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9b4:	fbb2 f3f3 	udiv	r3, r2, r3
 801d9b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801d9ba:	e002      	b.n	801d9c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801d9bc:	4b05      	ldr	r3, [pc, #20]	; (801d9d4 <HAL_RCC_GetSysClockFreq+0x184>)
 801d9be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801d9c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 801d9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801d9c4:	4618      	mov	r0, r3
 801d9c6:	3740      	adds	r7, #64	; 0x40
 801d9c8:	46bd      	mov	sp, r7
 801d9ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d9ce:	bf00      	nop
 801d9d0:	40023800 	.word	0x40023800
 801d9d4:	00f42400 	.word	0x00f42400
 801d9d8:	00b71b00 	.word	0x00b71b00

0801d9dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d9dc:	b480      	push	{r7}
 801d9de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801d9e0:	4b03      	ldr	r3, [pc, #12]	; (801d9f0 <HAL_RCC_GetHCLKFreq+0x14>)
 801d9e2:	681b      	ldr	r3, [r3, #0]
}
 801d9e4:	4618      	mov	r0, r3
 801d9e6:	46bd      	mov	sp, r7
 801d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9ec:	4770      	bx	lr
 801d9ee:	bf00      	nop
 801d9f0:	2000031c 	.word	0x2000031c

0801d9f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d9f4:	b580      	push	{r7, lr}
 801d9f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801d9f8:	f7ff fff0 	bl	801d9dc <HAL_RCC_GetHCLKFreq>
 801d9fc:	4602      	mov	r2, r0
 801d9fe:	4b05      	ldr	r3, [pc, #20]	; (801da14 <HAL_RCC_GetPCLK1Freq+0x20>)
 801da00:	689b      	ldr	r3, [r3, #8]
 801da02:	0a9b      	lsrs	r3, r3, #10
 801da04:	f003 0307 	and.w	r3, r3, #7
 801da08:	4903      	ldr	r1, [pc, #12]	; (801da18 <HAL_RCC_GetPCLK1Freq+0x24>)
 801da0a:	5ccb      	ldrb	r3, [r1, r3]
 801da0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801da10:	4618      	mov	r0, r3
 801da12:	bd80      	pop	{r7, pc}
 801da14:	40023800 	.word	0x40023800
 801da18:	0802dd64 	.word	0x0802dd64

0801da1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801da1c:	b580      	push	{r7, lr}
 801da1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801da20:	f7ff ffdc 	bl	801d9dc <HAL_RCC_GetHCLKFreq>
 801da24:	4602      	mov	r2, r0
 801da26:	4b05      	ldr	r3, [pc, #20]	; (801da3c <HAL_RCC_GetPCLK2Freq+0x20>)
 801da28:	689b      	ldr	r3, [r3, #8]
 801da2a:	0b5b      	lsrs	r3, r3, #13
 801da2c:	f003 0307 	and.w	r3, r3, #7
 801da30:	4903      	ldr	r1, [pc, #12]	; (801da40 <HAL_RCC_GetPCLK2Freq+0x24>)
 801da32:	5ccb      	ldrb	r3, [r1, r3]
 801da34:	fa22 f303 	lsr.w	r3, r2, r3
}
 801da38:	4618      	mov	r0, r3
 801da3a:	bd80      	pop	{r7, pc}
 801da3c:	40023800 	.word	0x40023800
 801da40:	0802dd64 	.word	0x0802dd64

0801da44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801da44:	b580      	push	{r7, lr}
 801da46:	b088      	sub	sp, #32
 801da48:	af00      	add	r7, sp, #0
 801da4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801da4c:	2300      	movs	r3, #0
 801da4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 801da50:	2300      	movs	r3, #0
 801da52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801da54:	2300      	movs	r3, #0
 801da56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801da58:	2300      	movs	r3, #0
 801da5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801da5c:	2300      	movs	r3, #0
 801da5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	f003 0301 	and.w	r3, r3, #1
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d012      	beq.n	801da92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801da6c:	4b69      	ldr	r3, [pc, #420]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801da6e:	689b      	ldr	r3, [r3, #8]
 801da70:	4a68      	ldr	r2, [pc, #416]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801da72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801da76:	6093      	str	r3, [r2, #8]
 801da78:	4b66      	ldr	r3, [pc, #408]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801da7a:	689a      	ldr	r2, [r3, #8]
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da80:	4964      	ldr	r1, [pc, #400]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801da82:	4313      	orrs	r3, r2
 801da84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da8a:	2b00      	cmp	r3, #0
 801da8c:	d101      	bne.n	801da92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801da8e:	2301      	movs	r3, #1
 801da90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	681b      	ldr	r3, [r3, #0]
 801da96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d017      	beq.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801da9e:	4b5d      	ldr	r3, [pc, #372]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801daa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801daa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801daac:	4959      	ldr	r1, [pc, #356]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801daae:	4313      	orrs	r3, r2
 801dab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801dabc:	d101      	bne.n	801dac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801dabe:	2301      	movs	r3, #1
 801dac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d101      	bne.n	801dace <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801daca:	2301      	movs	r3, #1
 801dacc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	681b      	ldr	r3, [r3, #0]
 801dad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d017      	beq.n	801db0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801dada:	4b4e      	ldr	r3, [pc, #312]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dadc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dae0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dae8:	494a      	ldr	r1, [pc, #296]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801daea:	4313      	orrs	r3, r2
 801daec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801daf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801daf8:	d101      	bne.n	801dafe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801dafa:	2301      	movs	r3, #1
 801dafc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db02:	2b00      	cmp	r3, #0
 801db04:	d101      	bne.n	801db0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801db06:	2301      	movs	r3, #1
 801db08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801db12:	2b00      	cmp	r3, #0
 801db14:	d001      	beq.n	801db1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801db16:	2301      	movs	r3, #1
 801db18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	681b      	ldr	r3, [r3, #0]
 801db1e:	f003 0320 	and.w	r3, r3, #32
 801db22:	2b00      	cmp	r3, #0
 801db24:	f000 808b 	beq.w	801dc3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801db28:	4b3a      	ldr	r3, [pc, #232]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801db2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db2c:	4a39      	ldr	r2, [pc, #228]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801db2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801db32:	6413      	str	r3, [r2, #64]	; 0x40
 801db34:	4b37      	ldr	r3, [pc, #220]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801db36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801db3c:	60bb      	str	r3, [r7, #8]
 801db3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801db40:	4b35      	ldr	r3, [pc, #212]	; (801dc18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	4a34      	ldr	r2, [pc, #208]	; (801dc18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801db46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801db4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801db4c:	f7fb ff70 	bl	8019a30 <HAL_GetTick>
 801db50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801db52:	e008      	b.n	801db66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801db54:	f7fb ff6c 	bl	8019a30 <HAL_GetTick>
 801db58:	4602      	mov	r2, r0
 801db5a:	697b      	ldr	r3, [r7, #20]
 801db5c:	1ad3      	subs	r3, r2, r3
 801db5e:	2b64      	cmp	r3, #100	; 0x64
 801db60:	d901      	bls.n	801db66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801db62:	2303      	movs	r3, #3
 801db64:	e38f      	b.n	801e286 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801db66:	4b2c      	ldr	r3, [pc, #176]	; (801dc18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d0f0      	beq.n	801db54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801db72:	4b28      	ldr	r3, [pc, #160]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801db74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801db7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801db7c:	693b      	ldr	r3, [r7, #16]
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d035      	beq.n	801dbee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801db8a:	693a      	ldr	r2, [r7, #16]
 801db8c:	429a      	cmp	r2, r3
 801db8e:	d02e      	beq.n	801dbee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801db90:	4b20      	ldr	r3, [pc, #128]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801db92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801db98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801db9a:	4b1e      	ldr	r3, [pc, #120]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801db9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db9e:	4a1d      	ldr	r2, [pc, #116]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801dba4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801dba6:	4b1b      	ldr	r3, [pc, #108]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dbaa:	4a1a      	ldr	r2, [pc, #104]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dbac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dbb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801dbb2:	4a18      	ldr	r2, [pc, #96]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dbb4:	693b      	ldr	r3, [r7, #16]
 801dbb6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801dbb8:	4b16      	ldr	r3, [pc, #88]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dbba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dbbc:	f003 0301 	and.w	r3, r3, #1
 801dbc0:	2b01      	cmp	r3, #1
 801dbc2:	d114      	bne.n	801dbee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801dbc4:	f7fb ff34 	bl	8019a30 <HAL_GetTick>
 801dbc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801dbca:	e00a      	b.n	801dbe2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801dbcc:	f7fb ff30 	bl	8019a30 <HAL_GetTick>
 801dbd0:	4602      	mov	r2, r0
 801dbd2:	697b      	ldr	r3, [r7, #20]
 801dbd4:	1ad3      	subs	r3, r2, r3
 801dbd6:	f241 3288 	movw	r2, #5000	; 0x1388
 801dbda:	4293      	cmp	r3, r2
 801dbdc:	d901      	bls.n	801dbe2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801dbde:	2303      	movs	r3, #3
 801dbe0:	e351      	b.n	801e286 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801dbe2:	4b0c      	ldr	r3, [pc, #48]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dbe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dbe6:	f003 0302 	and.w	r3, r3, #2
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d0ee      	beq.n	801dbcc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dbf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801dbf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dbfa:	d111      	bne.n	801dc20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801dbfc:	4b05      	ldr	r3, [pc, #20]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dbfe:	689b      	ldr	r3, [r3, #8]
 801dc00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801dc08:	4b04      	ldr	r3, [pc, #16]	; (801dc1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801dc0a:	400b      	ands	r3, r1
 801dc0c:	4901      	ldr	r1, [pc, #4]	; (801dc14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801dc0e:	4313      	orrs	r3, r2
 801dc10:	608b      	str	r3, [r1, #8]
 801dc12:	e00b      	b.n	801dc2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801dc14:	40023800 	.word	0x40023800
 801dc18:	40007000 	.word	0x40007000
 801dc1c:	0ffffcff 	.word	0x0ffffcff
 801dc20:	4bac      	ldr	r3, [pc, #688]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc22:	689b      	ldr	r3, [r3, #8]
 801dc24:	4aab      	ldr	r2, [pc, #684]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801dc2a:	6093      	str	r3, [r2, #8]
 801dc2c:	4ba9      	ldr	r3, [pc, #676]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801dc38:	49a6      	ldr	r1, [pc, #664]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc3a:	4313      	orrs	r3, r2
 801dc3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	f003 0310 	and.w	r3, r3, #16
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d010      	beq.n	801dc6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801dc4a:	4ba2      	ldr	r3, [pc, #648]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dc50:	4aa0      	ldr	r2, [pc, #640]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801dc56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801dc5a:	4b9e      	ldr	r3, [pc, #632]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc64:	499b      	ldr	r1, [pc, #620]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc66:	4313      	orrs	r3, r2
 801dc68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d00a      	beq.n	801dc8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801dc78:	4b96      	ldr	r3, [pc, #600]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dc7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801dc86:	4993      	ldr	r1, [pc, #588]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc88:	4313      	orrs	r3, r2
 801dc8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d00a      	beq.n	801dcb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801dc9a:	4b8e      	ldr	r3, [pc, #568]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dc9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dca0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801dca8:	498a      	ldr	r1, [pc, #552]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dcaa:	4313      	orrs	r3, r2
 801dcac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d00a      	beq.n	801dcd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801dcbc:	4b85      	ldr	r3, [pc, #532]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dcbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dcc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dcca:	4982      	ldr	r1, [pc, #520]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dccc:	4313      	orrs	r3, r2
 801dcce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	d00a      	beq.n	801dcf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801dcde:	4b7d      	ldr	r3, [pc, #500]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dce4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dcec:	4979      	ldr	r1, [pc, #484]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dcee:	4313      	orrs	r3, r2
 801dcf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	d00a      	beq.n	801dd16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801dd00:	4b74      	ldr	r3, [pc, #464]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dd06:	f023 0203 	bic.w	r2, r3, #3
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dd0e:	4971      	ldr	r1, [pc, #452]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd10:	4313      	orrs	r3, r2
 801dd12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d00a      	beq.n	801dd38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801dd22:	4b6c      	ldr	r3, [pc, #432]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dd28:	f023 020c 	bic.w	r2, r3, #12
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dd30:	4968      	ldr	r1, [pc, #416]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd32:	4313      	orrs	r3, r2
 801dd34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	681b      	ldr	r3, [r3, #0]
 801dd3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d00a      	beq.n	801dd5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801dd44:	4b63      	ldr	r3, [pc, #396]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dd4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dd52:	4960      	ldr	r1, [pc, #384]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd54:	4313      	orrs	r3, r2
 801dd56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d00a      	beq.n	801dd7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801dd66:	4b5b      	ldr	r3, [pc, #364]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dd6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd74:	4957      	ldr	r1, [pc, #348]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd76:	4313      	orrs	r3, r2
 801dd78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	681b      	ldr	r3, [r3, #0]
 801dd80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d00a      	beq.n	801dd9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801dd88:	4b52      	ldr	r3, [pc, #328]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801dd8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801dd96:	494f      	ldr	r1, [pc, #316]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dd98:	4313      	orrs	r3, r2
 801dd9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d00a      	beq.n	801ddc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801ddaa:	4b4a      	ldr	r3, [pc, #296]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ddb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ddb8:	4946      	ldr	r1, [pc, #280]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddba:	4313      	orrs	r3, r2
 801ddbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d00a      	beq.n	801dde2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801ddcc:	4b41      	ldr	r3, [pc, #260]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ddd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ddda:	493e      	ldr	r1, [pc, #248]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dddc:	4313      	orrs	r3, r2
 801ddde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d00a      	beq.n	801de04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801ddee:	4b39      	ldr	r3, [pc, #228]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ddf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ddfc:	4935      	ldr	r1, [pc, #212]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ddfe:	4313      	orrs	r3, r2
 801de00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	681b      	ldr	r3, [r3, #0]
 801de08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d00a      	beq.n	801de26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801de10:	4b30      	ldr	r3, [pc, #192]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801de1e:	492d      	ldr	r1, [pc, #180]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de20:	4313      	orrs	r3, r2
 801de22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d011      	beq.n	801de56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801de32:	4b28      	ldr	r3, [pc, #160]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801de40:	4924      	ldr	r1, [pc, #144]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de42:	4313      	orrs	r3, r2
 801de44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801de4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801de50:	d101      	bne.n	801de56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801de52:	2301      	movs	r3, #1
 801de54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	f003 0308 	and.w	r3, r3, #8
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d001      	beq.n	801de66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801de62:	2301      	movs	r3, #1
 801de64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	681b      	ldr	r3, [r3, #0]
 801de6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801de6e:	2b00      	cmp	r3, #0
 801de70:	d00a      	beq.n	801de88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801de72:	4b18      	ldr	r3, [pc, #96]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801de80:	4914      	ldr	r1, [pc, #80]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de82:	4313      	orrs	r3, r2
 801de84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801de90:	2b00      	cmp	r3, #0
 801de92:	d00b      	beq.n	801deac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801de94:	4b0f      	ldr	r3, [pc, #60]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801de96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801dea4:	490b      	ldr	r1, [pc, #44]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801dea6:	4313      	orrs	r3, r2
 801dea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	681b      	ldr	r3, [r3, #0]
 801deb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	d00f      	beq.n	801ded8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 801deb8:	4b06      	ldr	r3, [pc, #24]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801deba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801debe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dec8:	4902      	ldr	r1, [pc, #8]	; (801ded4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801deca:	4313      	orrs	r3, r2
 801decc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801ded0:	e002      	b.n	801ded8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 801ded2:	bf00      	nop
 801ded4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d00b      	beq.n	801defc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801dee4:	4b8a      	ldr	r3, [pc, #552]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801dee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801deea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801def4:	4986      	ldr	r1, [pc, #536]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801def6:	4313      	orrs	r3, r2
 801def8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	681b      	ldr	r3, [r3, #0]
 801df00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801df04:	2b00      	cmp	r3, #0
 801df06:	d00b      	beq.n	801df20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801df08:	4b81      	ldr	r3, [pc, #516]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801df0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801df0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801df18:	497d      	ldr	r1, [pc, #500]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801df1a:	4313      	orrs	r3, r2
 801df1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801df20:	69fb      	ldr	r3, [r7, #28]
 801df22:	2b01      	cmp	r3, #1
 801df24:	d006      	beq.n	801df34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801df2e:	2b00      	cmp	r3, #0
 801df30:	f000 80d6 	beq.w	801e0e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801df34:	4b76      	ldr	r3, [pc, #472]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	4a75      	ldr	r2, [pc, #468]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801df3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801df3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801df40:	f7fb fd76 	bl	8019a30 <HAL_GetTick>
 801df44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801df46:	e008      	b.n	801df5a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801df48:	f7fb fd72 	bl	8019a30 <HAL_GetTick>
 801df4c:	4602      	mov	r2, r0
 801df4e:	697b      	ldr	r3, [r7, #20]
 801df50:	1ad3      	subs	r3, r2, r3
 801df52:	2b64      	cmp	r3, #100	; 0x64
 801df54:	d901      	bls.n	801df5a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801df56:	2303      	movs	r3, #3
 801df58:	e195      	b.n	801e286 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801df5a:	4b6d      	ldr	r3, [pc, #436]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801df62:	2b00      	cmp	r3, #0
 801df64:	d1f0      	bne.n	801df48 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	f003 0301 	and.w	r3, r3, #1
 801df6e:	2b00      	cmp	r3, #0
 801df70:	d021      	beq.n	801dfb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 801df72:	687b      	ldr	r3, [r7, #4]
 801df74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df76:	2b00      	cmp	r3, #0
 801df78:	d11d      	bne.n	801dfb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801df7a:	4b65      	ldr	r3, [pc, #404]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801df7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801df80:	0c1b      	lsrs	r3, r3, #16
 801df82:	f003 0303 	and.w	r3, r3, #3
 801df86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801df88:	4b61      	ldr	r3, [pc, #388]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801df8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801df8e:	0e1b      	lsrs	r3, r3, #24
 801df90:	f003 030f 	and.w	r3, r3, #15
 801df94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	685b      	ldr	r3, [r3, #4]
 801df9a:	019a      	lsls	r2, r3, #6
 801df9c:	693b      	ldr	r3, [r7, #16]
 801df9e:	041b      	lsls	r3, r3, #16
 801dfa0:	431a      	orrs	r2, r3
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	061b      	lsls	r3, r3, #24
 801dfa6:	431a      	orrs	r2, r3
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	689b      	ldr	r3, [r3, #8]
 801dfac:	071b      	lsls	r3, r3, #28
 801dfae:	4958      	ldr	r1, [pc, #352]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801dfb0:	4313      	orrs	r3, r2
 801dfb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d004      	beq.n	801dfcc <HAL_RCCEx_PeriphCLKConfig+0x588>
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dfc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801dfca:	d00a      	beq.n	801dfe2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d02e      	beq.n	801e036 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801dfe0:	d129      	bne.n	801e036 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801dfe2:	4b4b      	ldr	r3, [pc, #300]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801dfe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dfe8:	0c1b      	lsrs	r3, r3, #16
 801dfea:	f003 0303 	and.w	r3, r3, #3
 801dfee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801dff0:	4b47      	ldr	r3, [pc, #284]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801dff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801dff6:	0f1b      	lsrs	r3, r3, #28
 801dff8:	f003 0307 	and.w	r3, r3, #7
 801dffc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	685b      	ldr	r3, [r3, #4]
 801e002:	019a      	lsls	r2, r3, #6
 801e004:	693b      	ldr	r3, [r7, #16]
 801e006:	041b      	lsls	r3, r3, #16
 801e008:	431a      	orrs	r2, r3
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	68db      	ldr	r3, [r3, #12]
 801e00e:	061b      	lsls	r3, r3, #24
 801e010:	431a      	orrs	r2, r3
 801e012:	68fb      	ldr	r3, [r7, #12]
 801e014:	071b      	lsls	r3, r3, #28
 801e016:	493e      	ldr	r1, [pc, #248]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e018:	4313      	orrs	r3, r2
 801e01a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801e01e:	4b3c      	ldr	r3, [pc, #240]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e024:	f023 021f 	bic.w	r2, r3, #31
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e02c:	3b01      	subs	r3, #1
 801e02e:	4938      	ldr	r1, [pc, #224]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e030:	4313      	orrs	r3, r2
 801e032:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d01d      	beq.n	801e07e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801e042:	4b33      	ldr	r3, [pc, #204]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e048:	0e1b      	lsrs	r3, r3, #24
 801e04a:	f003 030f 	and.w	r3, r3, #15
 801e04e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801e050:	4b2f      	ldr	r3, [pc, #188]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e056:	0f1b      	lsrs	r3, r3, #28
 801e058:	f003 0307 	and.w	r3, r3, #7
 801e05c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801e05e:	687b      	ldr	r3, [r7, #4]
 801e060:	685b      	ldr	r3, [r3, #4]
 801e062:	019a      	lsls	r2, r3, #6
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	691b      	ldr	r3, [r3, #16]
 801e068:	041b      	lsls	r3, r3, #16
 801e06a:	431a      	orrs	r2, r3
 801e06c:	693b      	ldr	r3, [r7, #16]
 801e06e:	061b      	lsls	r3, r3, #24
 801e070:	431a      	orrs	r2, r3
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	071b      	lsls	r3, r3, #28
 801e076:	4926      	ldr	r1, [pc, #152]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e078:	4313      	orrs	r3, r2
 801e07a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801e07e:	687b      	ldr	r3, [r7, #4]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801e086:	2b00      	cmp	r3, #0
 801e088:	d011      	beq.n	801e0ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	685b      	ldr	r3, [r3, #4]
 801e08e:	019a      	lsls	r2, r3, #6
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	691b      	ldr	r3, [r3, #16]
 801e094:	041b      	lsls	r3, r3, #16
 801e096:	431a      	orrs	r2, r3
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	68db      	ldr	r3, [r3, #12]
 801e09c:	061b      	lsls	r3, r3, #24
 801e09e:	431a      	orrs	r2, r3
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	689b      	ldr	r3, [r3, #8]
 801e0a4:	071b      	lsls	r3, r3, #28
 801e0a6:	491a      	ldr	r1, [pc, #104]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0a8:	4313      	orrs	r3, r2
 801e0aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801e0ae:	4b18      	ldr	r3, [pc, #96]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	4a17      	ldr	r2, [pc, #92]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801e0b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e0ba:	f7fb fcb9 	bl	8019a30 <HAL_GetTick>
 801e0be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801e0c0:	e008      	b.n	801e0d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801e0c2:	f7fb fcb5 	bl	8019a30 <HAL_GetTick>
 801e0c6:	4602      	mov	r2, r0
 801e0c8:	697b      	ldr	r3, [r7, #20]
 801e0ca:	1ad3      	subs	r3, r2, r3
 801e0cc:	2b64      	cmp	r3, #100	; 0x64
 801e0ce:	d901      	bls.n	801e0d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801e0d0:	2303      	movs	r3, #3
 801e0d2:	e0d8      	b.n	801e286 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801e0d4:	4b0e      	ldr	r3, [pc, #56]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d0f0      	beq.n	801e0c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801e0e0:	69bb      	ldr	r3, [r7, #24]
 801e0e2:	2b01      	cmp	r3, #1
 801e0e4:	f040 80ce 	bne.w	801e284 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801e0e8:	4b09      	ldr	r3, [pc, #36]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	4a08      	ldr	r2, [pc, #32]	; (801e110 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801e0ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e0f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e0f4:	f7fb fc9c 	bl	8019a30 <HAL_GetTick>
 801e0f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801e0fa:	e00b      	b.n	801e114 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801e0fc:	f7fb fc98 	bl	8019a30 <HAL_GetTick>
 801e100:	4602      	mov	r2, r0
 801e102:	697b      	ldr	r3, [r7, #20]
 801e104:	1ad3      	subs	r3, r2, r3
 801e106:	2b64      	cmp	r3, #100	; 0x64
 801e108:	d904      	bls.n	801e114 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801e10a:	2303      	movs	r3, #3
 801e10c:	e0bb      	b.n	801e286 <HAL_RCCEx_PeriphCLKConfig+0x842>
 801e10e:	bf00      	nop
 801e110:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801e114:	4b5e      	ldr	r3, [pc, #376]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e11c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e120:	d0ec      	beq.n	801e0fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d003      	beq.n	801e136 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e132:	2b00      	cmp	r3, #0
 801e134:	d009      	beq.n	801e14a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d02e      	beq.n	801e1a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e146:	2b00      	cmp	r3, #0
 801e148:	d12a      	bne.n	801e1a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801e14a:	4b51      	ldr	r3, [pc, #324]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e150:	0c1b      	lsrs	r3, r3, #16
 801e152:	f003 0303 	and.w	r3, r3, #3
 801e156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801e158:	4b4d      	ldr	r3, [pc, #308]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e15e:	0f1b      	lsrs	r3, r3, #28
 801e160:	f003 0307 	and.w	r3, r3, #7
 801e164:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	695b      	ldr	r3, [r3, #20]
 801e16a:	019a      	lsls	r2, r3, #6
 801e16c:	693b      	ldr	r3, [r7, #16]
 801e16e:	041b      	lsls	r3, r3, #16
 801e170:	431a      	orrs	r2, r3
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	699b      	ldr	r3, [r3, #24]
 801e176:	061b      	lsls	r3, r3, #24
 801e178:	431a      	orrs	r2, r3
 801e17a:	68fb      	ldr	r3, [r7, #12]
 801e17c:	071b      	lsls	r3, r3, #28
 801e17e:	4944      	ldr	r1, [pc, #272]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e180:	4313      	orrs	r3, r2
 801e182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801e186:	4b42      	ldr	r3, [pc, #264]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e18c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e194:	3b01      	subs	r3, #1
 801e196:	021b      	lsls	r3, r3, #8
 801e198:	493d      	ldr	r1, [pc, #244]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e19a:	4313      	orrs	r3, r2
 801e19c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d022      	beq.n	801e1f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e1b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801e1b4:	d11d      	bne.n	801e1f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801e1b6:	4b36      	ldr	r3, [pc, #216]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e1bc:	0e1b      	lsrs	r3, r3, #24
 801e1be:	f003 030f 	and.w	r3, r3, #15
 801e1c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801e1c4:	4b32      	ldr	r3, [pc, #200]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e1c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e1ca:	0f1b      	lsrs	r3, r3, #28
 801e1cc:	f003 0307 	and.w	r3, r3, #7
 801e1d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801e1d2:	687b      	ldr	r3, [r7, #4]
 801e1d4:	695b      	ldr	r3, [r3, #20]
 801e1d6:	019a      	lsls	r2, r3, #6
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	6a1b      	ldr	r3, [r3, #32]
 801e1dc:	041b      	lsls	r3, r3, #16
 801e1de:	431a      	orrs	r2, r3
 801e1e0:	693b      	ldr	r3, [r7, #16]
 801e1e2:	061b      	lsls	r3, r3, #24
 801e1e4:	431a      	orrs	r2, r3
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	071b      	lsls	r3, r3, #28
 801e1ea:	4929      	ldr	r1, [pc, #164]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e1ec:	4313      	orrs	r3, r2
 801e1ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	f003 0308 	and.w	r3, r3, #8
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d028      	beq.n	801e250 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801e1fe:	4b24      	ldr	r3, [pc, #144]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e204:	0e1b      	lsrs	r3, r3, #24
 801e206:	f003 030f 	and.w	r3, r3, #15
 801e20a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801e20c:	4b20      	ldr	r3, [pc, #128]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e212:	0c1b      	lsrs	r3, r3, #16
 801e214:	f003 0303 	and.w	r3, r3, #3
 801e218:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801e21a:	687b      	ldr	r3, [r7, #4]
 801e21c:	695b      	ldr	r3, [r3, #20]
 801e21e:	019a      	lsls	r2, r3, #6
 801e220:	68fb      	ldr	r3, [r7, #12]
 801e222:	041b      	lsls	r3, r3, #16
 801e224:	431a      	orrs	r2, r3
 801e226:	693b      	ldr	r3, [r7, #16]
 801e228:	061b      	lsls	r3, r3, #24
 801e22a:	431a      	orrs	r2, r3
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	69db      	ldr	r3, [r3, #28]
 801e230:	071b      	lsls	r3, r3, #28
 801e232:	4917      	ldr	r1, [pc, #92]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e234:	4313      	orrs	r3, r2
 801e236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801e23a:	4b15      	ldr	r3, [pc, #84]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e248:	4911      	ldr	r1, [pc, #68]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e24a:	4313      	orrs	r3, r2
 801e24c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801e250:	4b0f      	ldr	r3, [pc, #60]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	4a0e      	ldr	r2, [pc, #56]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e25a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e25c:	f7fb fbe8 	bl	8019a30 <HAL_GetTick>
 801e260:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801e262:	e008      	b.n	801e276 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801e264:	f7fb fbe4 	bl	8019a30 <HAL_GetTick>
 801e268:	4602      	mov	r2, r0
 801e26a:	697b      	ldr	r3, [r7, #20]
 801e26c:	1ad3      	subs	r3, r2, r3
 801e26e:	2b64      	cmp	r3, #100	; 0x64
 801e270:	d901      	bls.n	801e276 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801e272:	2303      	movs	r3, #3
 801e274:	e007      	b.n	801e286 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801e276:	4b06      	ldr	r3, [pc, #24]	; (801e290 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e27e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801e282:	d1ef      	bne.n	801e264 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801e284:	2300      	movs	r3, #0
}
 801e286:	4618      	mov	r0, r3
 801e288:	3720      	adds	r7, #32
 801e28a:	46bd      	mov	sp, r7
 801e28c:	bd80      	pop	{r7, pc}
 801e28e:	bf00      	nop
 801e290:	40023800 	.word	0x40023800

0801e294 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801e294:	b580      	push	{r7, lr}
 801e296:	b082      	sub	sp, #8
 801e298:	af00      	add	r7, sp, #0
 801e29a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	d101      	bne.n	801e2a6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801e2a2:	2301      	movs	r3, #1
 801e2a4:	e01c      	b.n	801e2e0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	795b      	ldrb	r3, [r3, #5]
 801e2aa:	b2db      	uxtb	r3, r3
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d105      	bne.n	801e2bc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	2200      	movs	r2, #0
 801e2b4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801e2b6:	6878      	ldr	r0, [r7, #4]
 801e2b8:	f7f9 fdda 	bl	8017e70 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	2202      	movs	r2, #2
 801e2c0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	681b      	ldr	r3, [r3, #0]
 801e2c6:	681a      	ldr	r2, [r3, #0]
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	f042 0204 	orr.w	r2, r2, #4
 801e2d0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	2201      	movs	r2, #1
 801e2d6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	2200      	movs	r2, #0
 801e2dc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801e2de:	2300      	movs	r3, #0
}
 801e2e0:	4618      	mov	r0, r3
 801e2e2:	3708      	adds	r7, #8
 801e2e4:	46bd      	mov	sp, r7
 801e2e6:	bd80      	pop	{r7, pc}

0801e2e8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801e2e8:	b580      	push	{r7, lr}
 801e2ea:	b084      	sub	sp, #16
 801e2ec:	af00      	add	r7, sp, #0
 801e2ee:	6078      	str	r0, [r7, #4]
 801e2f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801e2f6:	687b      	ldr	r3, [r7, #4]
 801e2f8:	791b      	ldrb	r3, [r3, #4]
 801e2fa:	2b01      	cmp	r3, #1
 801e2fc:	d101      	bne.n	801e302 <HAL_RNG_GenerateRandomNumber+0x1a>
 801e2fe:	2302      	movs	r3, #2
 801e300:	e044      	b.n	801e38c <HAL_RNG_GenerateRandomNumber+0xa4>
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	2201      	movs	r2, #1
 801e306:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	795b      	ldrb	r3, [r3, #5]
 801e30c:	b2db      	uxtb	r3, r3
 801e30e:	2b01      	cmp	r3, #1
 801e310:	d133      	bne.n	801e37a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	2202      	movs	r2, #2
 801e316:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801e318:	f7fb fb8a 	bl	8019a30 <HAL_GetTick>
 801e31c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801e31e:	e018      	b.n	801e352 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801e320:	f7fb fb86 	bl	8019a30 <HAL_GetTick>
 801e324:	4602      	mov	r2, r0
 801e326:	68bb      	ldr	r3, [r7, #8]
 801e328:	1ad3      	subs	r3, r2, r3
 801e32a:	2b02      	cmp	r3, #2
 801e32c:	d911      	bls.n	801e352 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	681b      	ldr	r3, [r3, #0]
 801e332:	685b      	ldr	r3, [r3, #4]
 801e334:	f003 0301 	and.w	r3, r3, #1
 801e338:	2b01      	cmp	r3, #1
 801e33a:	d00a      	beq.n	801e352 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	2201      	movs	r2, #1
 801e340:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	2202      	movs	r2, #2
 801e346:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	2200      	movs	r2, #0
 801e34c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801e34e:	2301      	movs	r3, #1
 801e350:	e01c      	b.n	801e38c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	685b      	ldr	r3, [r3, #4]
 801e358:	f003 0301 	and.w	r3, r3, #1
 801e35c:	2b01      	cmp	r3, #1
 801e35e:	d1df      	bne.n	801e320 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	689a      	ldr	r2, [r3, #8]
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	68da      	ldr	r2, [r3, #12]
 801e36e:	683b      	ldr	r3, [r7, #0]
 801e370:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	2201      	movs	r2, #1
 801e376:	715a      	strb	r2, [r3, #5]
 801e378:	e004      	b.n	801e384 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	2204      	movs	r2, #4
 801e37e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801e380:	2301      	movs	r3, #1
 801e382:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	2200      	movs	r2, #0
 801e388:	711a      	strb	r2, [r3, #4]

  return status;
 801e38a:	7bfb      	ldrb	r3, [r7, #15]
}
 801e38c:	4618      	mov	r0, r3
 801e38e:	3710      	adds	r7, #16
 801e390:	46bd      	mov	sp, r7
 801e392:	bd80      	pop	{r7, pc}

0801e394 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801e394:	b580      	push	{r7, lr}
 801e396:	b082      	sub	sp, #8
 801e398:	af00      	add	r7, sp, #0
 801e39a:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	330c      	adds	r3, #12
 801e3a0:	4619      	mov	r1, r3
 801e3a2:	6878      	ldr	r0, [r7, #4]
 801e3a4:	f7ff ffa0 	bl	801e2e8 <HAL_RNG_GenerateRandomNumber>
 801e3a8:	4603      	mov	r3, r0
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d102      	bne.n	801e3b4 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	68db      	ldr	r3, [r3, #12]
 801e3b2:	e000      	b.n	801e3b6 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801e3b4:	2300      	movs	r3, #0
  }
}
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	3708      	adds	r7, #8
 801e3ba:	46bd      	mov	sp, r7
 801e3bc:	bd80      	pop	{r7, pc}

0801e3be <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801e3be:	b580      	push	{r7, lr}
 801e3c0:	b084      	sub	sp, #16
 801e3c2:	af00      	add	r7, sp, #0
 801e3c4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d101      	bne.n	801e3d0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801e3cc:	2301      	movs	r3, #1
 801e3ce:	e09d      	b.n	801e50c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801e3d0:	687b      	ldr	r3, [r7, #4]
 801e3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d108      	bne.n	801e3ea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	685b      	ldr	r3, [r3, #4]
 801e3dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e3e0:	d009      	beq.n	801e3f6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	2200      	movs	r2, #0
 801e3e6:	61da      	str	r2, [r3, #28]
 801e3e8:	e005      	b.n	801e3f6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	2200      	movs	r2, #0
 801e3ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	2200      	movs	r2, #0
 801e3f4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	2200      	movs	r2, #0
 801e3fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e402:	b2db      	uxtb	r3, r3
 801e404:	2b00      	cmp	r3, #0
 801e406:	d106      	bne.n	801e416 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	2200      	movs	r2, #0
 801e40c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801e410:	6878      	ldr	r0, [r7, #4]
 801e412:	f7f9 fdb5 	bl	8017f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	2202      	movs	r2, #2
 801e41a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	681b      	ldr	r3, [r3, #0]
 801e422:	681a      	ldr	r2, [r3, #0]
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e42c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	68db      	ldr	r3, [r3, #12]
 801e432:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e436:	d902      	bls.n	801e43e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801e438:	2300      	movs	r3, #0
 801e43a:	60fb      	str	r3, [r7, #12]
 801e43c:	e002      	b.n	801e444 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801e43e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801e442:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	68db      	ldr	r3, [r3, #12]
 801e448:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801e44c:	d007      	beq.n	801e45e <HAL_SPI_Init+0xa0>
 801e44e:	687b      	ldr	r3, [r7, #4]
 801e450:	68db      	ldr	r3, [r3, #12]
 801e452:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e456:	d002      	beq.n	801e45e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	2200      	movs	r2, #0
 801e45c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	685b      	ldr	r3, [r3, #4]
 801e462:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	689b      	ldr	r3, [r3, #8]
 801e46a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801e46e:	431a      	orrs	r2, r3
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	691b      	ldr	r3, [r3, #16]
 801e474:	f003 0302 	and.w	r3, r3, #2
 801e478:	431a      	orrs	r2, r3
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	695b      	ldr	r3, [r3, #20]
 801e47e:	f003 0301 	and.w	r3, r3, #1
 801e482:	431a      	orrs	r2, r3
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	699b      	ldr	r3, [r3, #24]
 801e488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801e48c:	431a      	orrs	r2, r3
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	69db      	ldr	r3, [r3, #28]
 801e492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801e496:	431a      	orrs	r2, r3
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	6a1b      	ldr	r3, [r3, #32]
 801e49c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e4a0:	ea42 0103 	orr.w	r1, r2, r3
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	430a      	orrs	r2, r1
 801e4b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	699b      	ldr	r3, [r3, #24]
 801e4b8:	0c1b      	lsrs	r3, r3, #16
 801e4ba:	f003 0204 	and.w	r2, r3, #4
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4c2:	f003 0310 	and.w	r3, r3, #16
 801e4c6:	431a      	orrs	r2, r3
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e4cc:	f003 0308 	and.w	r3, r3, #8
 801e4d0:	431a      	orrs	r2, r3
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	68db      	ldr	r3, [r3, #12]
 801e4d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801e4da:	ea42 0103 	orr.w	r1, r2, r3
 801e4de:	68fb      	ldr	r3, [r7, #12]
 801e4e0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	430a      	orrs	r2, r1
 801e4ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	69da      	ldr	r2, [r3, #28]
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	681b      	ldr	r3, [r3, #0]
 801e4f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e4fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	2200      	movs	r2, #0
 801e500:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	2201      	movs	r2, #1
 801e506:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801e50a:	2300      	movs	r3, #0
}
 801e50c:	4618      	mov	r0, r3
 801e50e:	3710      	adds	r7, #16
 801e510:	46bd      	mov	sp, r7
 801e512:	bd80      	pop	{r7, pc}

0801e514 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e514:	b580      	push	{r7, lr}
 801e516:	b088      	sub	sp, #32
 801e518:	af00      	add	r7, sp, #0
 801e51a:	60f8      	str	r0, [r7, #12]
 801e51c:	60b9      	str	r1, [r7, #8]
 801e51e:	603b      	str	r3, [r7, #0]
 801e520:	4613      	mov	r3, r2
 801e522:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801e524:	2300      	movs	r3, #0
 801e526:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e528:	68fb      	ldr	r3, [r7, #12]
 801e52a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e52e:	2b01      	cmp	r3, #1
 801e530:	d101      	bne.n	801e536 <HAL_SPI_Transmit+0x22>
 801e532:	2302      	movs	r3, #2
 801e534:	e158      	b.n	801e7e8 <HAL_SPI_Transmit+0x2d4>
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	2201      	movs	r2, #1
 801e53a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e53e:	f7fb fa77 	bl	8019a30 <HAL_GetTick>
 801e542:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801e544:	88fb      	ldrh	r3, [r7, #6]
 801e546:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e54e:	b2db      	uxtb	r3, r3
 801e550:	2b01      	cmp	r3, #1
 801e552:	d002      	beq.n	801e55a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801e554:	2302      	movs	r3, #2
 801e556:	77fb      	strb	r3, [r7, #31]
    goto error;
 801e558:	e13d      	b.n	801e7d6 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801e55a:	68bb      	ldr	r3, [r7, #8]
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	d002      	beq.n	801e566 <HAL_SPI_Transmit+0x52>
 801e560:	88fb      	ldrh	r3, [r7, #6]
 801e562:	2b00      	cmp	r3, #0
 801e564:	d102      	bne.n	801e56c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801e566:	2301      	movs	r3, #1
 801e568:	77fb      	strb	r3, [r7, #31]
    goto error;
 801e56a:	e134      	b.n	801e7d6 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	2203      	movs	r2, #3
 801e570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	2200      	movs	r2, #0
 801e578:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	68ba      	ldr	r2, [r7, #8]
 801e57e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	88fa      	ldrh	r2, [r7, #6]
 801e584:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801e586:	68fb      	ldr	r3, [r7, #12]
 801e588:	88fa      	ldrh	r2, [r7, #6]
 801e58a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801e58c:	68fb      	ldr	r3, [r7, #12]
 801e58e:	2200      	movs	r2, #0
 801e590:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	2200      	movs	r2, #0
 801e596:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	2200      	movs	r2, #0
 801e59e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	2200      	movs	r2, #0
 801e5a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	689b      	ldr	r3, [r3, #8]
 801e5b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e5b6:	d10f      	bne.n	801e5d8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	681a      	ldr	r2, [r3, #0]
 801e5be:	68fb      	ldr	r3, [r7, #12]
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e5c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801e5c8:	68fb      	ldr	r3, [r7, #12]
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	681a      	ldr	r2, [r3, #0]
 801e5ce:	68fb      	ldr	r3, [r7, #12]
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801e5d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e5d8:	68fb      	ldr	r3, [r7, #12]
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	681b      	ldr	r3, [r3, #0]
 801e5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e5e2:	2b40      	cmp	r3, #64	; 0x40
 801e5e4:	d007      	beq.n	801e5f6 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	681a      	ldr	r2, [r3, #0]
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e5f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e5f6:	68fb      	ldr	r3, [r7, #12]
 801e5f8:	68db      	ldr	r3, [r3, #12]
 801e5fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e5fe:	d94b      	bls.n	801e698 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	685b      	ldr	r3, [r3, #4]
 801e604:	2b00      	cmp	r3, #0
 801e606:	d002      	beq.n	801e60e <HAL_SPI_Transmit+0xfa>
 801e608:	8afb      	ldrh	r3, [r7, #22]
 801e60a:	2b01      	cmp	r3, #1
 801e60c:	d13e      	bne.n	801e68c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e612:	881a      	ldrh	r2, [r3, #0]
 801e614:	68fb      	ldr	r3, [r7, #12]
 801e616:	681b      	ldr	r3, [r3, #0]
 801e618:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e61a:	68fb      	ldr	r3, [r7, #12]
 801e61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e61e:	1c9a      	adds	r2, r3, #2
 801e620:	68fb      	ldr	r3, [r7, #12]
 801e622:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801e624:	68fb      	ldr	r3, [r7, #12]
 801e626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e628:	b29b      	uxth	r3, r3
 801e62a:	3b01      	subs	r3, #1
 801e62c:	b29a      	uxth	r2, r3
 801e62e:	68fb      	ldr	r3, [r7, #12]
 801e630:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801e632:	e02b      	b.n	801e68c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801e634:	68fb      	ldr	r3, [r7, #12]
 801e636:	681b      	ldr	r3, [r3, #0]
 801e638:	689b      	ldr	r3, [r3, #8]
 801e63a:	f003 0302 	and.w	r3, r3, #2
 801e63e:	2b02      	cmp	r3, #2
 801e640:	d112      	bne.n	801e668 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e642:	68fb      	ldr	r3, [r7, #12]
 801e644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e646:	881a      	ldrh	r2, [r3, #0]
 801e648:	68fb      	ldr	r3, [r7, #12]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e652:	1c9a      	adds	r2, r3, #2
 801e654:	68fb      	ldr	r3, [r7, #12]
 801e656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e658:	68fb      	ldr	r3, [r7, #12]
 801e65a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e65c:	b29b      	uxth	r3, r3
 801e65e:	3b01      	subs	r3, #1
 801e660:	b29a      	uxth	r2, r3
 801e662:	68fb      	ldr	r3, [r7, #12]
 801e664:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e666:	e011      	b.n	801e68c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e668:	f7fb f9e2 	bl	8019a30 <HAL_GetTick>
 801e66c:	4602      	mov	r2, r0
 801e66e:	69bb      	ldr	r3, [r7, #24]
 801e670:	1ad3      	subs	r3, r2, r3
 801e672:	683a      	ldr	r2, [r7, #0]
 801e674:	429a      	cmp	r2, r3
 801e676:	d803      	bhi.n	801e680 <HAL_SPI_Transmit+0x16c>
 801e678:	683b      	ldr	r3, [r7, #0]
 801e67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e67e:	d102      	bne.n	801e686 <HAL_SPI_Transmit+0x172>
 801e680:	683b      	ldr	r3, [r7, #0]
 801e682:	2b00      	cmp	r3, #0
 801e684:	d102      	bne.n	801e68c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801e686:	2303      	movs	r3, #3
 801e688:	77fb      	strb	r3, [r7, #31]
          goto error;
 801e68a:	e0a4      	b.n	801e7d6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801e68c:	68fb      	ldr	r3, [r7, #12]
 801e68e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e690:	b29b      	uxth	r3, r3
 801e692:	2b00      	cmp	r3, #0
 801e694:	d1ce      	bne.n	801e634 <HAL_SPI_Transmit+0x120>
 801e696:	e07c      	b.n	801e792 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e698:	68fb      	ldr	r3, [r7, #12]
 801e69a:	685b      	ldr	r3, [r3, #4]
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d002      	beq.n	801e6a6 <HAL_SPI_Transmit+0x192>
 801e6a0:	8afb      	ldrh	r3, [r7, #22]
 801e6a2:	2b01      	cmp	r3, #1
 801e6a4:	d170      	bne.n	801e788 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801e6a6:	68fb      	ldr	r3, [r7, #12]
 801e6a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e6aa:	b29b      	uxth	r3, r3
 801e6ac:	2b01      	cmp	r3, #1
 801e6ae:	d912      	bls.n	801e6d6 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e6b0:	68fb      	ldr	r3, [r7, #12]
 801e6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6b4:	881a      	ldrh	r2, [r3, #0]
 801e6b6:	68fb      	ldr	r3, [r7, #12]
 801e6b8:	681b      	ldr	r3, [r3, #0]
 801e6ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e6bc:	68fb      	ldr	r3, [r7, #12]
 801e6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6c0:	1c9a      	adds	r2, r3, #2
 801e6c2:	68fb      	ldr	r3, [r7, #12]
 801e6c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801e6c6:	68fb      	ldr	r3, [r7, #12]
 801e6c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e6ca:	b29b      	uxth	r3, r3
 801e6cc:	3b02      	subs	r3, #2
 801e6ce:	b29a      	uxth	r2, r3
 801e6d0:	68fb      	ldr	r3, [r7, #12]
 801e6d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e6d4:	e058      	b.n	801e788 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801e6d6:	68fb      	ldr	r3, [r7, #12]
 801e6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	330c      	adds	r3, #12
 801e6e0:	7812      	ldrb	r2, [r2, #0]
 801e6e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801e6e4:	68fb      	ldr	r3, [r7, #12]
 801e6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6e8:	1c5a      	adds	r2, r3, #1
 801e6ea:	68fb      	ldr	r3, [r7, #12]
 801e6ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e6f2:	b29b      	uxth	r3, r3
 801e6f4:	3b01      	subs	r3, #1
 801e6f6:	b29a      	uxth	r2, r3
 801e6f8:	68fb      	ldr	r3, [r7, #12]
 801e6fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801e6fc:	e044      	b.n	801e788 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801e6fe:	68fb      	ldr	r3, [r7, #12]
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	689b      	ldr	r3, [r3, #8]
 801e704:	f003 0302 	and.w	r3, r3, #2
 801e708:	2b02      	cmp	r3, #2
 801e70a:	d12b      	bne.n	801e764 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801e70c:	68fb      	ldr	r3, [r7, #12]
 801e70e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e710:	b29b      	uxth	r3, r3
 801e712:	2b01      	cmp	r3, #1
 801e714:	d912      	bls.n	801e73c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e716:	68fb      	ldr	r3, [r7, #12]
 801e718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e71a:	881a      	ldrh	r2, [r3, #0]
 801e71c:	68fb      	ldr	r3, [r7, #12]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e722:	68fb      	ldr	r3, [r7, #12]
 801e724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e726:	1c9a      	adds	r2, r3, #2
 801e728:	68fb      	ldr	r3, [r7, #12]
 801e72a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e730:	b29b      	uxth	r3, r3
 801e732:	3b02      	subs	r3, #2
 801e734:	b29a      	uxth	r2, r3
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e73a:	e025      	b.n	801e788 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801e73c:	68fb      	ldr	r3, [r7, #12]
 801e73e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e740:	68fb      	ldr	r3, [r7, #12]
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	330c      	adds	r3, #12
 801e746:	7812      	ldrb	r2, [r2, #0]
 801e748:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e74e:	1c5a      	adds	r2, r3, #1
 801e750:	68fb      	ldr	r3, [r7, #12]
 801e752:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e758:	b29b      	uxth	r3, r3
 801e75a:	3b01      	subs	r3, #1
 801e75c:	b29a      	uxth	r2, r3
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e762:	e011      	b.n	801e788 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e764:	f7fb f964 	bl	8019a30 <HAL_GetTick>
 801e768:	4602      	mov	r2, r0
 801e76a:	69bb      	ldr	r3, [r7, #24]
 801e76c:	1ad3      	subs	r3, r2, r3
 801e76e:	683a      	ldr	r2, [r7, #0]
 801e770:	429a      	cmp	r2, r3
 801e772:	d803      	bhi.n	801e77c <HAL_SPI_Transmit+0x268>
 801e774:	683b      	ldr	r3, [r7, #0]
 801e776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e77a:	d102      	bne.n	801e782 <HAL_SPI_Transmit+0x26e>
 801e77c:	683b      	ldr	r3, [r7, #0]
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d102      	bne.n	801e788 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801e782:	2303      	movs	r3, #3
 801e784:	77fb      	strb	r3, [r7, #31]
          goto error;
 801e786:	e026      	b.n	801e7d6 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801e788:	68fb      	ldr	r3, [r7, #12]
 801e78a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e78c:	b29b      	uxth	r3, r3
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d1b5      	bne.n	801e6fe <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e792:	69ba      	ldr	r2, [r7, #24]
 801e794:	6839      	ldr	r1, [r7, #0]
 801e796:	68f8      	ldr	r0, [r7, #12]
 801e798:	f000 fd08 	bl	801f1ac <SPI_EndRxTxTransaction>
 801e79c:	4603      	mov	r3, r0
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d002      	beq.n	801e7a8 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	2220      	movs	r2, #32
 801e7a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	689b      	ldr	r3, [r3, #8]
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d10a      	bne.n	801e7c6 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e7b0:	2300      	movs	r3, #0
 801e7b2:	613b      	str	r3, [r7, #16]
 801e7b4:	68fb      	ldr	r3, [r7, #12]
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	68db      	ldr	r3, [r3, #12]
 801e7ba:	613b      	str	r3, [r7, #16]
 801e7bc:	68fb      	ldr	r3, [r7, #12]
 801e7be:	681b      	ldr	r3, [r3, #0]
 801e7c0:	689b      	ldr	r3, [r3, #8]
 801e7c2:	613b      	str	r3, [r7, #16]
 801e7c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d002      	beq.n	801e7d4 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801e7ce:	2301      	movs	r3, #1
 801e7d0:	77fb      	strb	r3, [r7, #31]
 801e7d2:	e000      	b.n	801e7d6 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801e7d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e7d6:	68fb      	ldr	r3, [r7, #12]
 801e7d8:	2201      	movs	r2, #1
 801e7da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801e7de:	68fb      	ldr	r3, [r7, #12]
 801e7e0:	2200      	movs	r2, #0
 801e7e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e7e6:	7ffb      	ldrb	r3, [r7, #31]
}
 801e7e8:	4618      	mov	r0, r3
 801e7ea:	3720      	adds	r7, #32
 801e7ec:	46bd      	mov	sp, r7
 801e7ee:	bd80      	pop	{r7, pc}

0801e7f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e7f0:	b580      	push	{r7, lr}
 801e7f2:	b088      	sub	sp, #32
 801e7f4:	af02      	add	r7, sp, #8
 801e7f6:	60f8      	str	r0, [r7, #12]
 801e7f8:	60b9      	str	r1, [r7, #8]
 801e7fa:	603b      	str	r3, [r7, #0]
 801e7fc:	4613      	mov	r3, r2
 801e7fe:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801e800:	2300      	movs	r3, #0
 801e802:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801e804:	68fb      	ldr	r3, [r7, #12]
 801e806:	685b      	ldr	r3, [r3, #4]
 801e808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e80c:	d112      	bne.n	801e834 <HAL_SPI_Receive+0x44>
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	689b      	ldr	r3, [r3, #8]
 801e812:	2b00      	cmp	r3, #0
 801e814:	d10e      	bne.n	801e834 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801e816:	68fb      	ldr	r3, [r7, #12]
 801e818:	2204      	movs	r2, #4
 801e81a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801e81e:	88fa      	ldrh	r2, [r7, #6]
 801e820:	683b      	ldr	r3, [r7, #0]
 801e822:	9300      	str	r3, [sp, #0]
 801e824:	4613      	mov	r3, r2
 801e826:	68ba      	ldr	r2, [r7, #8]
 801e828:	68b9      	ldr	r1, [r7, #8]
 801e82a:	68f8      	ldr	r0, [r7, #12]
 801e82c:	f000 f910 	bl	801ea50 <HAL_SPI_TransmitReceive>
 801e830:	4603      	mov	r3, r0
 801e832:	e109      	b.n	801ea48 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e834:	68fb      	ldr	r3, [r7, #12]
 801e836:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e83a:	2b01      	cmp	r3, #1
 801e83c:	d101      	bne.n	801e842 <HAL_SPI_Receive+0x52>
 801e83e:	2302      	movs	r3, #2
 801e840:	e102      	b.n	801ea48 <HAL_SPI_Receive+0x258>
 801e842:	68fb      	ldr	r3, [r7, #12]
 801e844:	2201      	movs	r2, #1
 801e846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e84a:	f7fb f8f1 	bl	8019a30 <HAL_GetTick>
 801e84e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e856:	b2db      	uxtb	r3, r3
 801e858:	2b01      	cmp	r3, #1
 801e85a:	d002      	beq.n	801e862 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801e85c:	2302      	movs	r3, #2
 801e85e:	75fb      	strb	r3, [r7, #23]
    goto error;
 801e860:	e0e9      	b.n	801ea36 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801e862:	68bb      	ldr	r3, [r7, #8]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d002      	beq.n	801e86e <HAL_SPI_Receive+0x7e>
 801e868:	88fb      	ldrh	r3, [r7, #6]
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d102      	bne.n	801e874 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801e86e:	2301      	movs	r3, #1
 801e870:	75fb      	strb	r3, [r7, #23]
    goto error;
 801e872:	e0e0      	b.n	801ea36 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801e874:	68fb      	ldr	r3, [r7, #12]
 801e876:	2204      	movs	r2, #4
 801e878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e87c:	68fb      	ldr	r3, [r7, #12]
 801e87e:	2200      	movs	r2, #0
 801e880:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	68ba      	ldr	r2, [r7, #8]
 801e886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	88fa      	ldrh	r2, [r7, #6]
 801e88c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	88fa      	ldrh	r2, [r7, #6]
 801e894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801e898:	68fb      	ldr	r3, [r7, #12]
 801e89a:	2200      	movs	r2, #0
 801e89c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801e89e:	68fb      	ldr	r3, [r7, #12]
 801e8a0:	2200      	movs	r2, #0
 801e8a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801e8a4:	68fb      	ldr	r3, [r7, #12]
 801e8a6:	2200      	movs	r2, #0
 801e8a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801e8aa:	68fb      	ldr	r3, [r7, #12]
 801e8ac:	2200      	movs	r2, #0
 801e8ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801e8b0:	68fb      	ldr	r3, [r7, #12]
 801e8b2:	2200      	movs	r2, #0
 801e8b4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	68db      	ldr	r3, [r3, #12]
 801e8ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e8be:	d908      	bls.n	801e8d2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e8c0:	68fb      	ldr	r3, [r7, #12]
 801e8c2:	681b      	ldr	r3, [r3, #0]
 801e8c4:	685a      	ldr	r2, [r3, #4]
 801e8c6:	68fb      	ldr	r3, [r7, #12]
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e8ce:	605a      	str	r2, [r3, #4]
 801e8d0:	e007      	b.n	801e8e2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e8d2:	68fb      	ldr	r3, [r7, #12]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	685a      	ldr	r2, [r3, #4]
 801e8d8:	68fb      	ldr	r3, [r7, #12]
 801e8da:	681b      	ldr	r3, [r3, #0]
 801e8dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e8e0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e8e2:	68fb      	ldr	r3, [r7, #12]
 801e8e4:	689b      	ldr	r3, [r3, #8]
 801e8e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e8ea:	d10f      	bne.n	801e90c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801e8ec:	68fb      	ldr	r3, [r7, #12]
 801e8ee:	681b      	ldr	r3, [r3, #0]
 801e8f0:	681a      	ldr	r2, [r3, #0]
 801e8f2:	68fb      	ldr	r3, [r7, #12]
 801e8f4:	681b      	ldr	r3, [r3, #0]
 801e8f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e8fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801e8fc:	68fb      	ldr	r3, [r7, #12]
 801e8fe:	681b      	ldr	r3, [r3, #0]
 801e900:	681a      	ldr	r2, [r3, #0]
 801e902:	68fb      	ldr	r3, [r7, #12]
 801e904:	681b      	ldr	r3, [r3, #0]
 801e906:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801e90a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e90c:	68fb      	ldr	r3, [r7, #12]
 801e90e:	681b      	ldr	r3, [r3, #0]
 801e910:	681b      	ldr	r3, [r3, #0]
 801e912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e916:	2b40      	cmp	r3, #64	; 0x40
 801e918:	d007      	beq.n	801e92a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e91a:	68fb      	ldr	r3, [r7, #12]
 801e91c:	681b      	ldr	r3, [r3, #0]
 801e91e:	681a      	ldr	r2, [r3, #0]
 801e920:	68fb      	ldr	r3, [r7, #12]
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e928:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	68db      	ldr	r3, [r3, #12]
 801e92e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e932:	d867      	bhi.n	801ea04 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801e934:	e030      	b.n	801e998 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e936:	68fb      	ldr	r3, [r7, #12]
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	689b      	ldr	r3, [r3, #8]
 801e93c:	f003 0301 	and.w	r3, r3, #1
 801e940:	2b01      	cmp	r3, #1
 801e942:	d117      	bne.n	801e974 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e944:	68fb      	ldr	r3, [r7, #12]
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	f103 020c 	add.w	r2, r3, #12
 801e94c:	68fb      	ldr	r3, [r7, #12]
 801e94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e950:	7812      	ldrb	r2, [r2, #0]
 801e952:	b2d2      	uxtb	r2, r2
 801e954:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801e956:	68fb      	ldr	r3, [r7, #12]
 801e958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e95a:	1c5a      	adds	r2, r3, #1
 801e95c:	68fb      	ldr	r3, [r7, #12]
 801e95e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e960:	68fb      	ldr	r3, [r7, #12]
 801e962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e966:	b29b      	uxth	r3, r3
 801e968:	3b01      	subs	r3, #1
 801e96a:	b29a      	uxth	r2, r3
 801e96c:	68fb      	ldr	r3, [r7, #12]
 801e96e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e972:	e011      	b.n	801e998 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e974:	f7fb f85c 	bl	8019a30 <HAL_GetTick>
 801e978:	4602      	mov	r2, r0
 801e97a:	693b      	ldr	r3, [r7, #16]
 801e97c:	1ad3      	subs	r3, r2, r3
 801e97e:	683a      	ldr	r2, [r7, #0]
 801e980:	429a      	cmp	r2, r3
 801e982:	d803      	bhi.n	801e98c <HAL_SPI_Receive+0x19c>
 801e984:	683b      	ldr	r3, [r7, #0]
 801e986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e98a:	d102      	bne.n	801e992 <HAL_SPI_Receive+0x1a2>
 801e98c:	683b      	ldr	r3, [r7, #0]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d102      	bne.n	801e998 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801e992:	2303      	movs	r3, #3
 801e994:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e996:	e04e      	b.n	801ea36 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e998:	68fb      	ldr	r3, [r7, #12]
 801e99a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e99e:	b29b      	uxth	r3, r3
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d1c8      	bne.n	801e936 <HAL_SPI_Receive+0x146>
 801e9a4:	e034      	b.n	801ea10 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e9a6:	68fb      	ldr	r3, [r7, #12]
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	689b      	ldr	r3, [r3, #8]
 801e9ac:	f003 0301 	and.w	r3, r3, #1
 801e9b0:	2b01      	cmp	r3, #1
 801e9b2:	d115      	bne.n	801e9e0 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e9b4:	68fb      	ldr	r3, [r7, #12]
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	68da      	ldr	r2, [r3, #12]
 801e9ba:	68fb      	ldr	r3, [r7, #12]
 801e9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9be:	b292      	uxth	r2, r2
 801e9c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e9c2:	68fb      	ldr	r3, [r7, #12]
 801e9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9c6:	1c9a      	adds	r2, r3, #2
 801e9c8:	68fb      	ldr	r3, [r7, #12]
 801e9ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e9cc:	68fb      	ldr	r3, [r7, #12]
 801e9ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e9d2:	b29b      	uxth	r3, r3
 801e9d4:	3b01      	subs	r3, #1
 801e9d6:	b29a      	uxth	r2, r3
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e9de:	e011      	b.n	801ea04 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e9e0:	f7fb f826 	bl	8019a30 <HAL_GetTick>
 801e9e4:	4602      	mov	r2, r0
 801e9e6:	693b      	ldr	r3, [r7, #16]
 801e9e8:	1ad3      	subs	r3, r2, r3
 801e9ea:	683a      	ldr	r2, [r7, #0]
 801e9ec:	429a      	cmp	r2, r3
 801e9ee:	d803      	bhi.n	801e9f8 <HAL_SPI_Receive+0x208>
 801e9f0:	683b      	ldr	r3, [r7, #0]
 801e9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e9f6:	d102      	bne.n	801e9fe <HAL_SPI_Receive+0x20e>
 801e9f8:	683b      	ldr	r3, [r7, #0]
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	d102      	bne.n	801ea04 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801e9fe:	2303      	movs	r3, #3
 801ea00:	75fb      	strb	r3, [r7, #23]
          goto error;
 801ea02:	e018      	b.n	801ea36 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801ea04:	68fb      	ldr	r3, [r7, #12]
 801ea06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ea0a:	b29b      	uxth	r3, r3
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d1ca      	bne.n	801e9a6 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801ea10:	693a      	ldr	r2, [r7, #16]
 801ea12:	6839      	ldr	r1, [r7, #0]
 801ea14:	68f8      	ldr	r0, [r7, #12]
 801ea16:	f000 fb4d 	bl	801f0b4 <SPI_EndRxTransaction>
 801ea1a:	4603      	mov	r3, r0
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d002      	beq.n	801ea26 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ea20:	68fb      	ldr	r3, [r7, #12]
 801ea22:	2220      	movs	r2, #32
 801ea24:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ea26:	68fb      	ldr	r3, [r7, #12]
 801ea28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	d002      	beq.n	801ea34 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801ea2e:	2301      	movs	r3, #1
 801ea30:	75fb      	strb	r3, [r7, #23]
 801ea32:	e000      	b.n	801ea36 <HAL_SPI_Receive+0x246>
  }

error :
 801ea34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801ea36:	68fb      	ldr	r3, [r7, #12]
 801ea38:	2201      	movs	r2, #1
 801ea3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801ea3e:	68fb      	ldr	r3, [r7, #12]
 801ea40:	2200      	movs	r2, #0
 801ea42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801ea46:	7dfb      	ldrb	r3, [r7, #23]
}
 801ea48:	4618      	mov	r0, r3
 801ea4a:	3718      	adds	r7, #24
 801ea4c:	46bd      	mov	sp, r7
 801ea4e:	bd80      	pop	{r7, pc}

0801ea50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801ea50:	b580      	push	{r7, lr}
 801ea52:	b08a      	sub	sp, #40	; 0x28
 801ea54:	af00      	add	r7, sp, #0
 801ea56:	60f8      	str	r0, [r7, #12]
 801ea58:	60b9      	str	r1, [r7, #8]
 801ea5a:	607a      	str	r2, [r7, #4]
 801ea5c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801ea5e:	2301      	movs	r3, #1
 801ea60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801ea62:	2300      	movs	r3, #0
 801ea64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801ea6e:	2b01      	cmp	r3, #1
 801ea70:	d101      	bne.n	801ea76 <HAL_SPI_TransmitReceive+0x26>
 801ea72:	2302      	movs	r3, #2
 801ea74:	e1fb      	b.n	801ee6e <HAL_SPI_TransmitReceive+0x41e>
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	2201      	movs	r2, #1
 801ea7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ea7e:	f7fa ffd7 	bl	8019a30 <HAL_GetTick>
 801ea82:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801ea84:	68fb      	ldr	r3, [r7, #12]
 801ea86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801ea8a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801ea8c:	68fb      	ldr	r3, [r7, #12]
 801ea8e:	685b      	ldr	r3, [r3, #4]
 801ea90:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801ea92:	887b      	ldrh	r3, [r7, #2]
 801ea94:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801ea96:	887b      	ldrh	r3, [r7, #2]
 801ea98:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801ea9a:	7efb      	ldrb	r3, [r7, #27]
 801ea9c:	2b01      	cmp	r3, #1
 801ea9e:	d00e      	beq.n	801eabe <HAL_SPI_TransmitReceive+0x6e>
 801eaa0:	697b      	ldr	r3, [r7, #20]
 801eaa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801eaa6:	d106      	bne.n	801eab6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	689b      	ldr	r3, [r3, #8]
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d102      	bne.n	801eab6 <HAL_SPI_TransmitReceive+0x66>
 801eab0:	7efb      	ldrb	r3, [r7, #27]
 801eab2:	2b04      	cmp	r3, #4
 801eab4:	d003      	beq.n	801eabe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801eab6:	2302      	movs	r3, #2
 801eab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801eabc:	e1cd      	b.n	801ee5a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801eabe:	68bb      	ldr	r3, [r7, #8]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d005      	beq.n	801ead0 <HAL_SPI_TransmitReceive+0x80>
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	d002      	beq.n	801ead0 <HAL_SPI_TransmitReceive+0x80>
 801eaca:	887b      	ldrh	r3, [r7, #2]
 801eacc:	2b00      	cmp	r3, #0
 801eace:	d103      	bne.n	801ead8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801ead0:	2301      	movs	r3, #1
 801ead2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801ead6:	e1c0      	b.n	801ee5a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801ead8:	68fb      	ldr	r3, [r7, #12]
 801eada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801eade:	b2db      	uxtb	r3, r3
 801eae0:	2b04      	cmp	r3, #4
 801eae2:	d003      	beq.n	801eaec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801eae4:	68fb      	ldr	r3, [r7, #12]
 801eae6:	2205      	movs	r2, #5
 801eae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801eaec:	68fb      	ldr	r3, [r7, #12]
 801eaee:	2200      	movs	r2, #0
 801eaf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801eaf2:	68fb      	ldr	r3, [r7, #12]
 801eaf4:	687a      	ldr	r2, [r7, #4]
 801eaf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801eaf8:	68fb      	ldr	r3, [r7, #12]
 801eafa:	887a      	ldrh	r2, [r7, #2]
 801eafc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801eb00:	68fb      	ldr	r3, [r7, #12]
 801eb02:	887a      	ldrh	r2, [r7, #2]
 801eb04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801eb08:	68fb      	ldr	r3, [r7, #12]
 801eb0a:	68ba      	ldr	r2, [r7, #8]
 801eb0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801eb0e:	68fb      	ldr	r3, [r7, #12]
 801eb10:	887a      	ldrh	r2, [r7, #2]
 801eb12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801eb14:	68fb      	ldr	r3, [r7, #12]
 801eb16:	887a      	ldrh	r2, [r7, #2]
 801eb18:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801eb1a:	68fb      	ldr	r3, [r7, #12]
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	2200      	movs	r2, #0
 801eb24:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801eb26:	68fb      	ldr	r3, [r7, #12]
 801eb28:	68db      	ldr	r3, [r3, #12]
 801eb2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801eb2e:	d802      	bhi.n	801eb36 <HAL_SPI_TransmitReceive+0xe6>
 801eb30:	8a3b      	ldrh	r3, [r7, #16]
 801eb32:	2b01      	cmp	r3, #1
 801eb34:	d908      	bls.n	801eb48 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801eb36:	68fb      	ldr	r3, [r7, #12]
 801eb38:	681b      	ldr	r3, [r3, #0]
 801eb3a:	685a      	ldr	r2, [r3, #4]
 801eb3c:	68fb      	ldr	r3, [r7, #12]
 801eb3e:	681b      	ldr	r3, [r3, #0]
 801eb40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801eb44:	605a      	str	r2, [r3, #4]
 801eb46:	e007      	b.n	801eb58 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801eb48:	68fb      	ldr	r3, [r7, #12]
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	685a      	ldr	r2, [r3, #4]
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	681b      	ldr	r3, [r3, #0]
 801eb52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801eb56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801eb58:	68fb      	ldr	r3, [r7, #12]
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801eb62:	2b40      	cmp	r3, #64	; 0x40
 801eb64:	d007      	beq.n	801eb76 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801eb66:	68fb      	ldr	r3, [r7, #12]
 801eb68:	681b      	ldr	r3, [r3, #0]
 801eb6a:	681a      	ldr	r2, [r3, #0]
 801eb6c:	68fb      	ldr	r3, [r7, #12]
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801eb74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	68db      	ldr	r3, [r3, #12]
 801eb7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801eb7e:	d97c      	bls.n	801ec7a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801eb80:	68fb      	ldr	r3, [r7, #12]
 801eb82:	685b      	ldr	r3, [r3, #4]
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	d002      	beq.n	801eb8e <HAL_SPI_TransmitReceive+0x13e>
 801eb88:	8a7b      	ldrh	r3, [r7, #18]
 801eb8a:	2b01      	cmp	r3, #1
 801eb8c:	d169      	bne.n	801ec62 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801eb8e:	68fb      	ldr	r3, [r7, #12]
 801eb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb92:	881a      	ldrh	r2, [r3, #0]
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eb9e:	1c9a      	adds	r2, r3, #2
 801eba0:	68fb      	ldr	r3, [r7, #12]
 801eba2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801eba4:	68fb      	ldr	r3, [r7, #12]
 801eba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801eba8:	b29b      	uxth	r3, r3
 801ebaa:	3b01      	subs	r3, #1
 801ebac:	b29a      	uxth	r2, r3
 801ebae:	68fb      	ldr	r3, [r7, #12]
 801ebb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ebb2:	e056      	b.n	801ec62 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ebb4:	68fb      	ldr	r3, [r7, #12]
 801ebb6:	681b      	ldr	r3, [r3, #0]
 801ebb8:	689b      	ldr	r3, [r3, #8]
 801ebba:	f003 0302 	and.w	r3, r3, #2
 801ebbe:	2b02      	cmp	r3, #2
 801ebc0:	d11b      	bne.n	801ebfa <HAL_SPI_TransmitReceive+0x1aa>
 801ebc2:	68fb      	ldr	r3, [r7, #12]
 801ebc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ebc6:	b29b      	uxth	r3, r3
 801ebc8:	2b00      	cmp	r3, #0
 801ebca:	d016      	beq.n	801ebfa <HAL_SPI_TransmitReceive+0x1aa>
 801ebcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebce:	2b01      	cmp	r3, #1
 801ebd0:	d113      	bne.n	801ebfa <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ebd2:	68fb      	ldr	r3, [r7, #12]
 801ebd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ebd6:	881a      	ldrh	r2, [r3, #0]
 801ebd8:	68fb      	ldr	r3, [r7, #12]
 801ebda:	681b      	ldr	r3, [r3, #0]
 801ebdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ebe2:	1c9a      	adds	r2, r3, #2
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801ebe8:	68fb      	ldr	r3, [r7, #12]
 801ebea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ebec:	b29b      	uxth	r3, r3
 801ebee:	3b01      	subs	r3, #1
 801ebf0:	b29a      	uxth	r2, r3
 801ebf2:	68fb      	ldr	r3, [r7, #12]
 801ebf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ebfa:	68fb      	ldr	r3, [r7, #12]
 801ebfc:	681b      	ldr	r3, [r3, #0]
 801ebfe:	689b      	ldr	r3, [r3, #8]
 801ec00:	f003 0301 	and.w	r3, r3, #1
 801ec04:	2b01      	cmp	r3, #1
 801ec06:	d11c      	bne.n	801ec42 <HAL_SPI_TransmitReceive+0x1f2>
 801ec08:	68fb      	ldr	r3, [r7, #12]
 801ec0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ec0e:	b29b      	uxth	r3, r3
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d016      	beq.n	801ec42 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ec14:	68fb      	ldr	r3, [r7, #12]
 801ec16:	681b      	ldr	r3, [r3, #0]
 801ec18:	68da      	ldr	r2, [r3, #12]
 801ec1a:	68fb      	ldr	r3, [r7, #12]
 801ec1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec1e:	b292      	uxth	r2, r2
 801ec20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801ec22:	68fb      	ldr	r3, [r7, #12]
 801ec24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec26:	1c9a      	adds	r2, r3, #2
 801ec28:	68fb      	ldr	r3, [r7, #12]
 801ec2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801ec2c:	68fb      	ldr	r3, [r7, #12]
 801ec2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ec32:	b29b      	uxth	r3, r3
 801ec34:	3b01      	subs	r3, #1
 801ec36:	b29a      	uxth	r2, r3
 801ec38:	68fb      	ldr	r3, [r7, #12]
 801ec3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801ec3e:	2301      	movs	r3, #1
 801ec40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801ec42:	f7fa fef5 	bl	8019a30 <HAL_GetTick>
 801ec46:	4602      	mov	r2, r0
 801ec48:	69fb      	ldr	r3, [r7, #28]
 801ec4a:	1ad3      	subs	r3, r2, r3
 801ec4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ec4e:	429a      	cmp	r2, r3
 801ec50:	d807      	bhi.n	801ec62 <HAL_SPI_TransmitReceive+0x212>
 801ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec54:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ec58:	d003      	beq.n	801ec62 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801ec5a:	2303      	movs	r3, #3
 801ec5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801ec60:	e0fb      	b.n	801ee5a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ec62:	68fb      	ldr	r3, [r7, #12]
 801ec64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ec66:	b29b      	uxth	r3, r3
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d1a3      	bne.n	801ebb4 <HAL_SPI_TransmitReceive+0x164>
 801ec6c:	68fb      	ldr	r3, [r7, #12]
 801ec6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ec72:	b29b      	uxth	r3, r3
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d19d      	bne.n	801ebb4 <HAL_SPI_TransmitReceive+0x164>
 801ec78:	e0df      	b.n	801ee3a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	685b      	ldr	r3, [r3, #4]
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d003      	beq.n	801ec8a <HAL_SPI_TransmitReceive+0x23a>
 801ec82:	8a7b      	ldrh	r3, [r7, #18]
 801ec84:	2b01      	cmp	r3, #1
 801ec86:	f040 80cb 	bne.w	801ee20 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801ec8a:	68fb      	ldr	r3, [r7, #12]
 801ec8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ec8e:	b29b      	uxth	r3, r3
 801ec90:	2b01      	cmp	r3, #1
 801ec92:	d912      	bls.n	801ecba <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ec94:	68fb      	ldr	r3, [r7, #12]
 801ec96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ec98:	881a      	ldrh	r2, [r3, #0]
 801ec9a:	68fb      	ldr	r3, [r7, #12]
 801ec9c:	681b      	ldr	r3, [r3, #0]
 801ec9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801eca0:	68fb      	ldr	r3, [r7, #12]
 801eca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eca4:	1c9a      	adds	r2, r3, #2
 801eca6:	68fb      	ldr	r3, [r7, #12]
 801eca8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801ecaa:	68fb      	ldr	r3, [r7, #12]
 801ecac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ecae:	b29b      	uxth	r3, r3
 801ecb0:	3b02      	subs	r3, #2
 801ecb2:	b29a      	uxth	r2, r3
 801ecb4:	68fb      	ldr	r3, [r7, #12]
 801ecb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ecb8:	e0b2      	b.n	801ee20 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801ecba:	68fb      	ldr	r3, [r7, #12]
 801ecbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ecbe:	68fb      	ldr	r3, [r7, #12]
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	330c      	adds	r3, #12
 801ecc4:	7812      	ldrb	r2, [r2, #0]
 801ecc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801ecc8:	68fb      	ldr	r3, [r7, #12]
 801ecca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eccc:	1c5a      	adds	r2, r3, #1
 801ecce:	68fb      	ldr	r3, [r7, #12]
 801ecd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801ecd2:	68fb      	ldr	r3, [r7, #12]
 801ecd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ecd6:	b29b      	uxth	r3, r3
 801ecd8:	3b01      	subs	r3, #1
 801ecda:	b29a      	uxth	r2, r3
 801ecdc:	68fb      	ldr	r3, [r7, #12]
 801ecde:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ece0:	e09e      	b.n	801ee20 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ece2:	68fb      	ldr	r3, [r7, #12]
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	689b      	ldr	r3, [r3, #8]
 801ece8:	f003 0302 	and.w	r3, r3, #2
 801ecec:	2b02      	cmp	r3, #2
 801ecee:	d134      	bne.n	801ed5a <HAL_SPI_TransmitReceive+0x30a>
 801ecf0:	68fb      	ldr	r3, [r7, #12]
 801ecf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ecf4:	b29b      	uxth	r3, r3
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d02f      	beq.n	801ed5a <HAL_SPI_TransmitReceive+0x30a>
 801ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecfc:	2b01      	cmp	r3, #1
 801ecfe:	d12c      	bne.n	801ed5a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801ed00:	68fb      	ldr	r3, [r7, #12]
 801ed02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ed04:	b29b      	uxth	r3, r3
 801ed06:	2b01      	cmp	r3, #1
 801ed08:	d912      	bls.n	801ed30 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ed0a:	68fb      	ldr	r3, [r7, #12]
 801ed0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed0e:	881a      	ldrh	r2, [r3, #0]
 801ed10:	68fb      	ldr	r3, [r7, #12]
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801ed16:	68fb      	ldr	r3, [r7, #12]
 801ed18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed1a:	1c9a      	adds	r2, r3, #2
 801ed1c:	68fb      	ldr	r3, [r7, #12]
 801ed1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801ed20:	68fb      	ldr	r3, [r7, #12]
 801ed22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ed24:	b29b      	uxth	r3, r3
 801ed26:	3b02      	subs	r3, #2
 801ed28:	b29a      	uxth	r2, r3
 801ed2a:	68fb      	ldr	r3, [r7, #12]
 801ed2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ed2e:	e012      	b.n	801ed56 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801ed30:	68fb      	ldr	r3, [r7, #12]
 801ed32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ed34:	68fb      	ldr	r3, [r7, #12]
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	330c      	adds	r3, #12
 801ed3a:	7812      	ldrb	r2, [r2, #0]
 801ed3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801ed3e:	68fb      	ldr	r3, [r7, #12]
 801ed40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ed42:	1c5a      	adds	r2, r3, #1
 801ed44:	68fb      	ldr	r3, [r7, #12]
 801ed46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801ed48:	68fb      	ldr	r3, [r7, #12]
 801ed4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ed4c:	b29b      	uxth	r3, r3
 801ed4e:	3b01      	subs	r3, #1
 801ed50:	b29a      	uxth	r2, r3
 801ed52:	68fb      	ldr	r3, [r7, #12]
 801ed54:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ed56:	2300      	movs	r3, #0
 801ed58:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ed5a:	68fb      	ldr	r3, [r7, #12]
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	689b      	ldr	r3, [r3, #8]
 801ed60:	f003 0301 	and.w	r3, r3, #1
 801ed64:	2b01      	cmp	r3, #1
 801ed66:	d148      	bne.n	801edfa <HAL_SPI_TransmitReceive+0x3aa>
 801ed68:	68fb      	ldr	r3, [r7, #12]
 801ed6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ed6e:	b29b      	uxth	r3, r3
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	d042      	beq.n	801edfa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801ed74:	68fb      	ldr	r3, [r7, #12]
 801ed76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ed7a:	b29b      	uxth	r3, r3
 801ed7c:	2b01      	cmp	r3, #1
 801ed7e:	d923      	bls.n	801edc8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	681b      	ldr	r3, [r3, #0]
 801ed84:	68da      	ldr	r2, [r3, #12]
 801ed86:	68fb      	ldr	r3, [r7, #12]
 801ed88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed8a:	b292      	uxth	r2, r2
 801ed8c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ed8e:	68fb      	ldr	r3, [r7, #12]
 801ed90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ed92:	1c9a      	adds	r2, r3, #2
 801ed94:	68fb      	ldr	r3, [r7, #12]
 801ed96:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801ed98:	68fb      	ldr	r3, [r7, #12]
 801ed9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ed9e:	b29b      	uxth	r3, r3
 801eda0:	3b02      	subs	r3, #2
 801eda2:	b29a      	uxth	r2, r3
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801edaa:	68fb      	ldr	r3, [r7, #12]
 801edac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801edb0:	b29b      	uxth	r3, r3
 801edb2:	2b01      	cmp	r3, #1
 801edb4:	d81f      	bhi.n	801edf6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801edb6:	68fb      	ldr	r3, [r7, #12]
 801edb8:	681b      	ldr	r3, [r3, #0]
 801edba:	685a      	ldr	r2, [r3, #4]
 801edbc:	68fb      	ldr	r3, [r7, #12]
 801edbe:	681b      	ldr	r3, [r3, #0]
 801edc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801edc4:	605a      	str	r2, [r3, #4]
 801edc6:	e016      	b.n	801edf6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801edc8:	68fb      	ldr	r3, [r7, #12]
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	f103 020c 	add.w	r2, r3, #12
 801edd0:	68fb      	ldr	r3, [r7, #12]
 801edd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edd4:	7812      	ldrb	r2, [r2, #0]
 801edd6:	b2d2      	uxtb	r2, r2
 801edd8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801edda:	68fb      	ldr	r3, [r7, #12]
 801eddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edde:	1c5a      	adds	r2, r3, #1
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801ede4:	68fb      	ldr	r3, [r7, #12]
 801ede6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801edea:	b29b      	uxth	r3, r3
 801edec:	3b01      	subs	r3, #1
 801edee:	b29a      	uxth	r2, r3
 801edf0:	68fb      	ldr	r3, [r7, #12]
 801edf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801edf6:	2301      	movs	r3, #1
 801edf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801edfa:	f7fa fe19 	bl	8019a30 <HAL_GetTick>
 801edfe:	4602      	mov	r2, r0
 801ee00:	69fb      	ldr	r3, [r7, #28]
 801ee02:	1ad3      	subs	r3, r2, r3
 801ee04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ee06:	429a      	cmp	r2, r3
 801ee08:	d803      	bhi.n	801ee12 <HAL_SPI_TransmitReceive+0x3c2>
 801ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee10:	d102      	bne.n	801ee18 <HAL_SPI_TransmitReceive+0x3c8>
 801ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	d103      	bne.n	801ee20 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801ee18:	2303      	movs	r3, #3
 801ee1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801ee1e:	e01c      	b.n	801ee5a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ee20:	68fb      	ldr	r3, [r7, #12]
 801ee22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ee24:	b29b      	uxth	r3, r3
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	f47f af5b 	bne.w	801ece2 <HAL_SPI_TransmitReceive+0x292>
 801ee2c:	68fb      	ldr	r3, [r7, #12]
 801ee2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ee32:	b29b      	uxth	r3, r3
 801ee34:	2b00      	cmp	r3, #0
 801ee36:	f47f af54 	bne.w	801ece2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801ee3a:	69fa      	ldr	r2, [r7, #28]
 801ee3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ee3e:	68f8      	ldr	r0, [r7, #12]
 801ee40:	f000 f9b4 	bl	801f1ac <SPI_EndRxTxTransaction>
 801ee44:	4603      	mov	r3, r0
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d006      	beq.n	801ee58 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801ee4a:	2301      	movs	r3, #1
 801ee4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	2220      	movs	r2, #32
 801ee54:	661a      	str	r2, [r3, #96]	; 0x60
 801ee56:	e000      	b.n	801ee5a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801ee58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801ee5a:	68fb      	ldr	r3, [r7, #12]
 801ee5c:	2201      	movs	r2, #1
 801ee5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801ee62:	68fb      	ldr	r3, [r7, #12]
 801ee64:	2200      	movs	r2, #0
 801ee66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801ee6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801ee6e:	4618      	mov	r0, r3
 801ee70:	3728      	adds	r7, #40	; 0x28
 801ee72:	46bd      	mov	sp, r7
 801ee74:	bd80      	pop	{r7, pc}
	...

0801ee78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801ee78:	b580      	push	{r7, lr}
 801ee7a:	b088      	sub	sp, #32
 801ee7c:	af00      	add	r7, sp, #0
 801ee7e:	60f8      	str	r0, [r7, #12]
 801ee80:	60b9      	str	r1, [r7, #8]
 801ee82:	603b      	str	r3, [r7, #0]
 801ee84:	4613      	mov	r3, r2
 801ee86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801ee88:	f7fa fdd2 	bl	8019a30 <HAL_GetTick>
 801ee8c:	4602      	mov	r2, r0
 801ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee90:	1a9b      	subs	r3, r3, r2
 801ee92:	683a      	ldr	r2, [r7, #0]
 801ee94:	4413      	add	r3, r2
 801ee96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801ee98:	f7fa fdca 	bl	8019a30 <HAL_GetTick>
 801ee9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801ee9e:	4b39      	ldr	r3, [pc, #228]	; (801ef84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801eea0:	681b      	ldr	r3, [r3, #0]
 801eea2:	015b      	lsls	r3, r3, #5
 801eea4:	0d1b      	lsrs	r3, r3, #20
 801eea6:	69fa      	ldr	r2, [r7, #28]
 801eea8:	fb02 f303 	mul.w	r3, r2, r3
 801eeac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801eeae:	e054      	b.n	801ef5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801eeb0:	683b      	ldr	r3, [r7, #0]
 801eeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eeb6:	d050      	beq.n	801ef5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801eeb8:	f7fa fdba 	bl	8019a30 <HAL_GetTick>
 801eebc:	4602      	mov	r2, r0
 801eebe:	69bb      	ldr	r3, [r7, #24]
 801eec0:	1ad3      	subs	r3, r2, r3
 801eec2:	69fa      	ldr	r2, [r7, #28]
 801eec4:	429a      	cmp	r2, r3
 801eec6:	d902      	bls.n	801eece <SPI_WaitFlagStateUntilTimeout+0x56>
 801eec8:	69fb      	ldr	r3, [r7, #28]
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	d13d      	bne.n	801ef4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801eece:	68fb      	ldr	r3, [r7, #12]
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	685a      	ldr	r2, [r3, #4]
 801eed4:	68fb      	ldr	r3, [r7, #12]
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801eedc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801eede:	68fb      	ldr	r3, [r7, #12]
 801eee0:	685b      	ldr	r3, [r3, #4]
 801eee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801eee6:	d111      	bne.n	801ef0c <SPI_WaitFlagStateUntilTimeout+0x94>
 801eee8:	68fb      	ldr	r3, [r7, #12]
 801eeea:	689b      	ldr	r3, [r3, #8]
 801eeec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801eef0:	d004      	beq.n	801eefc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	689b      	ldr	r3, [r3, #8]
 801eef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801eefa:	d107      	bne.n	801ef0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801eefc:	68fb      	ldr	r3, [r7, #12]
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	681a      	ldr	r2, [r3, #0]
 801ef02:	68fb      	ldr	r3, [r7, #12]
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ef0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ef0c:	68fb      	ldr	r3, [r7, #12]
 801ef0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ef10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ef14:	d10f      	bne.n	801ef36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801ef16:	68fb      	ldr	r3, [r7, #12]
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	681a      	ldr	r2, [r3, #0]
 801ef1c:	68fb      	ldr	r3, [r7, #12]
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ef24:	601a      	str	r2, [r3, #0]
 801ef26:	68fb      	ldr	r3, [r7, #12]
 801ef28:	681b      	ldr	r3, [r3, #0]
 801ef2a:	681a      	ldr	r2, [r3, #0]
 801ef2c:	68fb      	ldr	r3, [r7, #12]
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ef34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ef36:	68fb      	ldr	r3, [r7, #12]
 801ef38:	2201      	movs	r2, #1
 801ef3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ef3e:	68fb      	ldr	r3, [r7, #12]
 801ef40:	2200      	movs	r2, #0
 801ef42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801ef46:	2303      	movs	r3, #3
 801ef48:	e017      	b.n	801ef7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801ef4a:	697b      	ldr	r3, [r7, #20]
 801ef4c:	2b00      	cmp	r3, #0
 801ef4e:	d101      	bne.n	801ef54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801ef50:	2300      	movs	r3, #0
 801ef52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801ef54:	697b      	ldr	r3, [r7, #20]
 801ef56:	3b01      	subs	r3, #1
 801ef58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ef5a:	68fb      	ldr	r3, [r7, #12]
 801ef5c:	681b      	ldr	r3, [r3, #0]
 801ef5e:	689a      	ldr	r2, [r3, #8]
 801ef60:	68bb      	ldr	r3, [r7, #8]
 801ef62:	4013      	ands	r3, r2
 801ef64:	68ba      	ldr	r2, [r7, #8]
 801ef66:	429a      	cmp	r2, r3
 801ef68:	bf0c      	ite	eq
 801ef6a:	2301      	moveq	r3, #1
 801ef6c:	2300      	movne	r3, #0
 801ef6e:	b2db      	uxtb	r3, r3
 801ef70:	461a      	mov	r2, r3
 801ef72:	79fb      	ldrb	r3, [r7, #7]
 801ef74:	429a      	cmp	r2, r3
 801ef76:	d19b      	bne.n	801eeb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801ef78:	2300      	movs	r3, #0
}
 801ef7a:	4618      	mov	r0, r3
 801ef7c:	3720      	adds	r7, #32
 801ef7e:	46bd      	mov	sp, r7
 801ef80:	bd80      	pop	{r7, pc}
 801ef82:	bf00      	nop
 801ef84:	2000031c 	.word	0x2000031c

0801ef88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801ef88:	b580      	push	{r7, lr}
 801ef8a:	b08a      	sub	sp, #40	; 0x28
 801ef8c:	af00      	add	r7, sp, #0
 801ef8e:	60f8      	str	r0, [r7, #12]
 801ef90:	60b9      	str	r1, [r7, #8]
 801ef92:	607a      	str	r2, [r7, #4]
 801ef94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801ef96:	2300      	movs	r3, #0
 801ef98:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801ef9a:	f7fa fd49 	bl	8019a30 <HAL_GetTick>
 801ef9e:	4602      	mov	r2, r0
 801efa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801efa2:	1a9b      	subs	r3, r3, r2
 801efa4:	683a      	ldr	r2, [r7, #0]
 801efa6:	4413      	add	r3, r2
 801efa8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801efaa:	f7fa fd41 	bl	8019a30 <HAL_GetTick>
 801efae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801efb0:	68fb      	ldr	r3, [r7, #12]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	330c      	adds	r3, #12
 801efb6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801efb8:	4b3d      	ldr	r3, [pc, #244]	; (801f0b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801efba:	681a      	ldr	r2, [r3, #0]
 801efbc:	4613      	mov	r3, r2
 801efbe:	009b      	lsls	r3, r3, #2
 801efc0:	4413      	add	r3, r2
 801efc2:	00da      	lsls	r2, r3, #3
 801efc4:	1ad3      	subs	r3, r2, r3
 801efc6:	0d1b      	lsrs	r3, r3, #20
 801efc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801efca:	fb02 f303 	mul.w	r3, r2, r3
 801efce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801efd0:	e060      	b.n	801f094 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801efd2:	68bb      	ldr	r3, [r7, #8]
 801efd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801efd8:	d107      	bne.n	801efea <SPI_WaitFifoStateUntilTimeout+0x62>
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	2b00      	cmp	r3, #0
 801efde:	d104      	bne.n	801efea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801efe0:	69fb      	ldr	r3, [r7, #28]
 801efe2:	781b      	ldrb	r3, [r3, #0]
 801efe4:	b2db      	uxtb	r3, r3
 801efe6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801efe8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801efea:	683b      	ldr	r3, [r7, #0]
 801efec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eff0:	d050      	beq.n	801f094 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801eff2:	f7fa fd1d 	bl	8019a30 <HAL_GetTick>
 801eff6:	4602      	mov	r2, r0
 801eff8:	6a3b      	ldr	r3, [r7, #32]
 801effa:	1ad3      	subs	r3, r2, r3
 801effc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801effe:	429a      	cmp	r2, r3
 801f000:	d902      	bls.n	801f008 <SPI_WaitFifoStateUntilTimeout+0x80>
 801f002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f004:	2b00      	cmp	r3, #0
 801f006:	d13d      	bne.n	801f084 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801f008:	68fb      	ldr	r3, [r7, #12]
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	685a      	ldr	r2, [r3, #4]
 801f00e:	68fb      	ldr	r3, [r7, #12]
 801f010:	681b      	ldr	r3, [r3, #0]
 801f012:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801f016:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f018:	68fb      	ldr	r3, [r7, #12]
 801f01a:	685b      	ldr	r3, [r3, #4]
 801f01c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f020:	d111      	bne.n	801f046 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801f022:	68fb      	ldr	r3, [r7, #12]
 801f024:	689b      	ldr	r3, [r3, #8]
 801f026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f02a:	d004      	beq.n	801f036 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f02c:	68fb      	ldr	r3, [r7, #12]
 801f02e:	689b      	ldr	r3, [r3, #8]
 801f030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f034:	d107      	bne.n	801f046 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801f036:	68fb      	ldr	r3, [r7, #12]
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	681a      	ldr	r2, [r3, #0]
 801f03c:	68fb      	ldr	r3, [r7, #12]
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f044:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801f046:	68fb      	ldr	r3, [r7, #12]
 801f048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f04a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f04e:	d10f      	bne.n	801f070 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	681a      	ldr	r2, [r3, #0]
 801f056:	68fb      	ldr	r3, [r7, #12]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801f05e:	601a      	str	r2, [r3, #0]
 801f060:	68fb      	ldr	r3, [r7, #12]
 801f062:	681b      	ldr	r3, [r3, #0]
 801f064:	681a      	ldr	r2, [r3, #0]
 801f066:	68fb      	ldr	r3, [r7, #12]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f06e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801f070:	68fb      	ldr	r3, [r7, #12]
 801f072:	2201      	movs	r2, #1
 801f074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	2200      	movs	r2, #0
 801f07c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801f080:	2303      	movs	r3, #3
 801f082:	e010      	b.n	801f0a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801f084:	69bb      	ldr	r3, [r7, #24]
 801f086:	2b00      	cmp	r3, #0
 801f088:	d101      	bne.n	801f08e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801f08a:	2300      	movs	r3, #0
 801f08c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801f08e:	69bb      	ldr	r3, [r7, #24]
 801f090:	3b01      	subs	r3, #1
 801f092:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801f094:	68fb      	ldr	r3, [r7, #12]
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	689a      	ldr	r2, [r3, #8]
 801f09a:	68bb      	ldr	r3, [r7, #8]
 801f09c:	4013      	ands	r3, r2
 801f09e:	687a      	ldr	r2, [r7, #4]
 801f0a0:	429a      	cmp	r2, r3
 801f0a2:	d196      	bne.n	801efd2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801f0a4:	2300      	movs	r3, #0
}
 801f0a6:	4618      	mov	r0, r3
 801f0a8:	3728      	adds	r7, #40	; 0x28
 801f0aa:	46bd      	mov	sp, r7
 801f0ac:	bd80      	pop	{r7, pc}
 801f0ae:	bf00      	nop
 801f0b0:	2000031c 	.word	0x2000031c

0801f0b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801f0b4:	b580      	push	{r7, lr}
 801f0b6:	b088      	sub	sp, #32
 801f0b8:	af02      	add	r7, sp, #8
 801f0ba:	60f8      	str	r0, [r7, #12]
 801f0bc:	60b9      	str	r1, [r7, #8]
 801f0be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f0c0:	68fb      	ldr	r3, [r7, #12]
 801f0c2:	685b      	ldr	r3, [r3, #4]
 801f0c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f0c8:	d111      	bne.n	801f0ee <SPI_EndRxTransaction+0x3a>
 801f0ca:	68fb      	ldr	r3, [r7, #12]
 801f0cc:	689b      	ldr	r3, [r3, #8]
 801f0ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f0d2:	d004      	beq.n	801f0de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f0d4:	68fb      	ldr	r3, [r7, #12]
 801f0d6:	689b      	ldr	r3, [r3, #8]
 801f0d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f0dc:	d107      	bne.n	801f0ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	681a      	ldr	r2, [r3, #0]
 801f0e4:	68fb      	ldr	r3, [r7, #12]
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f0ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801f0ee:	68fb      	ldr	r3, [r7, #12]
 801f0f0:	685b      	ldr	r3, [r3, #4]
 801f0f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f0f6:	d112      	bne.n	801f11e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801f0f8:	687b      	ldr	r3, [r7, #4]
 801f0fa:	9300      	str	r3, [sp, #0]
 801f0fc:	68bb      	ldr	r3, [r7, #8]
 801f0fe:	2200      	movs	r2, #0
 801f100:	2180      	movs	r1, #128	; 0x80
 801f102:	68f8      	ldr	r0, [r7, #12]
 801f104:	f7ff feb8 	bl	801ee78 <SPI_WaitFlagStateUntilTimeout>
 801f108:	4603      	mov	r3, r0
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d021      	beq.n	801f152 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f112:	f043 0220 	orr.w	r2, r3, #32
 801f116:	68fb      	ldr	r3, [r7, #12]
 801f118:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801f11a:	2303      	movs	r3, #3
 801f11c:	e03d      	b.n	801f19a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801f11e:	4b21      	ldr	r3, [pc, #132]	; (801f1a4 <SPI_EndRxTransaction+0xf0>)
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	4a21      	ldr	r2, [pc, #132]	; (801f1a8 <SPI_EndRxTransaction+0xf4>)
 801f124:	fba2 2303 	umull	r2, r3, r2, r3
 801f128:	0d5b      	lsrs	r3, r3, #21
 801f12a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f12e:	fb02 f303 	mul.w	r3, r2, r3
 801f132:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801f134:	697b      	ldr	r3, [r7, #20]
 801f136:	2b00      	cmp	r3, #0
 801f138:	d00a      	beq.n	801f150 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801f13a:	697b      	ldr	r3, [r7, #20]
 801f13c:	3b01      	subs	r3, #1
 801f13e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801f140:	68fb      	ldr	r3, [r7, #12]
 801f142:	681b      	ldr	r3, [r3, #0]
 801f144:	689b      	ldr	r3, [r3, #8]
 801f146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f14a:	2b80      	cmp	r3, #128	; 0x80
 801f14c:	d0f2      	beq.n	801f134 <SPI_EndRxTransaction+0x80>
 801f14e:	e000      	b.n	801f152 <SPI_EndRxTransaction+0x9e>
        break;
 801f150:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801f152:	68fb      	ldr	r3, [r7, #12]
 801f154:	685b      	ldr	r3, [r3, #4]
 801f156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f15a:	d11d      	bne.n	801f198 <SPI_EndRxTransaction+0xe4>
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	689b      	ldr	r3, [r3, #8]
 801f160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f164:	d004      	beq.n	801f170 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801f166:	68fb      	ldr	r3, [r7, #12]
 801f168:	689b      	ldr	r3, [r3, #8]
 801f16a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f16e:	d113      	bne.n	801f198 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	9300      	str	r3, [sp, #0]
 801f174:	68bb      	ldr	r3, [r7, #8]
 801f176:	2200      	movs	r2, #0
 801f178:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801f17c:	68f8      	ldr	r0, [r7, #12]
 801f17e:	f7ff ff03 	bl	801ef88 <SPI_WaitFifoStateUntilTimeout>
 801f182:	4603      	mov	r3, r0
 801f184:	2b00      	cmp	r3, #0
 801f186:	d007      	beq.n	801f198 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f188:	68fb      	ldr	r3, [r7, #12]
 801f18a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f18c:	f043 0220 	orr.w	r2, r3, #32
 801f190:	68fb      	ldr	r3, [r7, #12]
 801f192:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801f194:	2303      	movs	r3, #3
 801f196:	e000      	b.n	801f19a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801f198:	2300      	movs	r3, #0
}
 801f19a:	4618      	mov	r0, r3
 801f19c:	3718      	adds	r7, #24
 801f19e:	46bd      	mov	sp, r7
 801f1a0:	bd80      	pop	{r7, pc}
 801f1a2:	bf00      	nop
 801f1a4:	2000031c 	.word	0x2000031c
 801f1a8:	165e9f81 	.word	0x165e9f81

0801f1ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801f1ac:	b580      	push	{r7, lr}
 801f1ae:	b088      	sub	sp, #32
 801f1b0:	af02      	add	r7, sp, #8
 801f1b2:	60f8      	str	r0, [r7, #12]
 801f1b4:	60b9      	str	r1, [r7, #8]
 801f1b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	9300      	str	r3, [sp, #0]
 801f1bc:	68bb      	ldr	r3, [r7, #8]
 801f1be:	2200      	movs	r2, #0
 801f1c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801f1c4:	68f8      	ldr	r0, [r7, #12]
 801f1c6:	f7ff fedf 	bl	801ef88 <SPI_WaitFifoStateUntilTimeout>
 801f1ca:	4603      	mov	r3, r0
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d007      	beq.n	801f1e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f1d0:	68fb      	ldr	r3, [r7, #12]
 801f1d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f1d4:	f043 0220 	orr.w	r2, r3, #32
 801f1d8:	68fb      	ldr	r3, [r7, #12]
 801f1da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801f1dc:	2303      	movs	r3, #3
 801f1de:	e046      	b.n	801f26e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801f1e0:	4b25      	ldr	r3, [pc, #148]	; (801f278 <SPI_EndRxTxTransaction+0xcc>)
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	4a25      	ldr	r2, [pc, #148]	; (801f27c <SPI_EndRxTxTransaction+0xd0>)
 801f1e6:	fba2 2303 	umull	r2, r3, r2, r3
 801f1ea:	0d5b      	lsrs	r3, r3, #21
 801f1ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f1f0:	fb02 f303 	mul.w	r3, r2, r3
 801f1f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801f1f6:	68fb      	ldr	r3, [r7, #12]
 801f1f8:	685b      	ldr	r3, [r3, #4]
 801f1fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801f1fe:	d112      	bne.n	801f226 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	9300      	str	r3, [sp, #0]
 801f204:	68bb      	ldr	r3, [r7, #8]
 801f206:	2200      	movs	r2, #0
 801f208:	2180      	movs	r1, #128	; 0x80
 801f20a:	68f8      	ldr	r0, [r7, #12]
 801f20c:	f7ff fe34 	bl	801ee78 <SPI_WaitFlagStateUntilTimeout>
 801f210:	4603      	mov	r3, r0
 801f212:	2b00      	cmp	r3, #0
 801f214:	d016      	beq.n	801f244 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f216:	68fb      	ldr	r3, [r7, #12]
 801f218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f21a:	f043 0220 	orr.w	r2, r3, #32
 801f21e:	68fb      	ldr	r3, [r7, #12]
 801f220:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801f222:	2303      	movs	r3, #3
 801f224:	e023      	b.n	801f26e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801f226:	697b      	ldr	r3, [r7, #20]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d00a      	beq.n	801f242 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801f22c:	697b      	ldr	r3, [r7, #20]
 801f22e:	3b01      	subs	r3, #1
 801f230:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801f232:	68fb      	ldr	r3, [r7, #12]
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	689b      	ldr	r3, [r3, #8]
 801f238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f23c:	2b80      	cmp	r3, #128	; 0x80
 801f23e:	d0f2      	beq.n	801f226 <SPI_EndRxTxTransaction+0x7a>
 801f240:	e000      	b.n	801f244 <SPI_EndRxTxTransaction+0x98>
        break;
 801f242:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	9300      	str	r3, [sp, #0]
 801f248:	68bb      	ldr	r3, [r7, #8]
 801f24a:	2200      	movs	r2, #0
 801f24c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801f250:	68f8      	ldr	r0, [r7, #12]
 801f252:	f7ff fe99 	bl	801ef88 <SPI_WaitFifoStateUntilTimeout>
 801f256:	4603      	mov	r3, r0
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d007      	beq.n	801f26c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801f25c:	68fb      	ldr	r3, [r7, #12]
 801f25e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f260:	f043 0220 	orr.w	r2, r3, #32
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801f268:	2303      	movs	r3, #3
 801f26a:	e000      	b.n	801f26e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801f26c:	2300      	movs	r3, #0
}
 801f26e:	4618      	mov	r0, r3
 801f270:	3718      	adds	r7, #24
 801f272:	46bd      	mov	sp, r7
 801f274:	bd80      	pop	{r7, pc}
 801f276:	bf00      	nop
 801f278:	2000031c 	.word	0x2000031c
 801f27c:	165e9f81 	.word	0x165e9f81

0801f280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f280:	b580      	push	{r7, lr}
 801f282:	b082      	sub	sp, #8
 801f284:	af00      	add	r7, sp, #0
 801f286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	691b      	ldr	r3, [r3, #16]
 801f28e:	f003 0302 	and.w	r3, r3, #2
 801f292:	2b02      	cmp	r3, #2
 801f294:	d128      	bne.n	801f2e8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	68db      	ldr	r3, [r3, #12]
 801f29c:	f003 0302 	and.w	r3, r3, #2
 801f2a0:	2b02      	cmp	r3, #2
 801f2a2:	d121      	bne.n	801f2e8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801f2a4:	687b      	ldr	r3, [r7, #4]
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	f06f 0202 	mvn.w	r2, #2
 801f2ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	2201      	movs	r2, #1
 801f2b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	699b      	ldr	r3, [r3, #24]
 801f2ba:	f003 0303 	and.w	r3, r3, #3
 801f2be:	2b00      	cmp	r3, #0
 801f2c0:	d005      	beq.n	801f2ce <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f2c8:	6878      	ldr	r0, [r7, #4]
 801f2ca:	4798      	blx	r3
 801f2cc:	e009      	b.n	801f2e2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801f2d4:	6878      	ldr	r0, [r7, #4]
 801f2d6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f2de:	6878      	ldr	r0, [r7, #4]
 801f2e0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	2200      	movs	r2, #0
 801f2e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	681b      	ldr	r3, [r3, #0]
 801f2ec:	691b      	ldr	r3, [r3, #16]
 801f2ee:	f003 0304 	and.w	r3, r3, #4
 801f2f2:	2b04      	cmp	r3, #4
 801f2f4:	d128      	bne.n	801f348 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	681b      	ldr	r3, [r3, #0]
 801f2fa:	68db      	ldr	r3, [r3, #12]
 801f2fc:	f003 0304 	and.w	r3, r3, #4
 801f300:	2b04      	cmp	r3, #4
 801f302:	d121      	bne.n	801f348 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	f06f 0204 	mvn.w	r2, #4
 801f30c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	2202      	movs	r2, #2
 801f312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	681b      	ldr	r3, [r3, #0]
 801f318:	699b      	ldr	r3, [r3, #24]
 801f31a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f31e:	2b00      	cmp	r3, #0
 801f320:	d005      	beq.n	801f32e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801f322:	687b      	ldr	r3, [r7, #4]
 801f324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f328:	6878      	ldr	r0, [r7, #4]
 801f32a:	4798      	blx	r3
 801f32c:	e009      	b.n	801f342 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801f334:	6878      	ldr	r0, [r7, #4]
 801f336:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f33e:	6878      	ldr	r0, [r7, #4]
 801f340:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	2200      	movs	r2, #0
 801f346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	691b      	ldr	r3, [r3, #16]
 801f34e:	f003 0308 	and.w	r3, r3, #8
 801f352:	2b08      	cmp	r3, #8
 801f354:	d128      	bne.n	801f3a8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	68db      	ldr	r3, [r3, #12]
 801f35c:	f003 0308 	and.w	r3, r3, #8
 801f360:	2b08      	cmp	r3, #8
 801f362:	d121      	bne.n	801f3a8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	681b      	ldr	r3, [r3, #0]
 801f368:	f06f 0208 	mvn.w	r2, #8
 801f36c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	2204      	movs	r2, #4
 801f372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	69db      	ldr	r3, [r3, #28]
 801f37a:	f003 0303 	and.w	r3, r3, #3
 801f37e:	2b00      	cmp	r3, #0
 801f380:	d005      	beq.n	801f38e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f388:	6878      	ldr	r0, [r7, #4]
 801f38a:	4798      	blx	r3
 801f38c:	e009      	b.n	801f3a2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801f394:	6878      	ldr	r0, [r7, #4]
 801f396:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f39e:	6878      	ldr	r0, [r7, #4]
 801f3a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f3a2:	687b      	ldr	r3, [r7, #4]
 801f3a4:	2200      	movs	r2, #0
 801f3a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	691b      	ldr	r3, [r3, #16]
 801f3ae:	f003 0310 	and.w	r3, r3, #16
 801f3b2:	2b10      	cmp	r3, #16
 801f3b4:	d128      	bne.n	801f408 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	68db      	ldr	r3, [r3, #12]
 801f3bc:	f003 0310 	and.w	r3, r3, #16
 801f3c0:	2b10      	cmp	r3, #16
 801f3c2:	d121      	bne.n	801f408 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	f06f 0210 	mvn.w	r2, #16
 801f3cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	2208      	movs	r2, #8
 801f3d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	69db      	ldr	r3, [r3, #28]
 801f3da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	d005      	beq.n	801f3ee <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801f3e8:	6878      	ldr	r0, [r7, #4]
 801f3ea:	4798      	blx	r3
 801f3ec:	e009      	b.n	801f402 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801f3f4:	6878      	ldr	r0, [r7, #4]
 801f3f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801f3fe:	6878      	ldr	r0, [r7, #4]
 801f400:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f402:	687b      	ldr	r3, [r7, #4]
 801f404:	2200      	movs	r2, #0
 801f406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	691b      	ldr	r3, [r3, #16]
 801f40e:	f003 0301 	and.w	r3, r3, #1
 801f412:	2b01      	cmp	r3, #1
 801f414:	d110      	bne.n	801f438 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	681b      	ldr	r3, [r3, #0]
 801f41a:	68db      	ldr	r3, [r3, #12]
 801f41c:	f003 0301 	and.w	r3, r3, #1
 801f420:	2b01      	cmp	r3, #1
 801f422:	d109      	bne.n	801f438 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	f06f 0201 	mvn.w	r2, #1
 801f42c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f434:	6878      	ldr	r0, [r7, #4]
 801f436:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	691b      	ldr	r3, [r3, #16]
 801f43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f442:	2b80      	cmp	r3, #128	; 0x80
 801f444:	d110      	bne.n	801f468 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f446:	687b      	ldr	r3, [r7, #4]
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	68db      	ldr	r3, [r3, #12]
 801f44c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f450:	2b80      	cmp	r3, #128	; 0x80
 801f452:	d109      	bne.n	801f468 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	681b      	ldr	r3, [r3, #0]
 801f458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f45c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801f464:	6878      	ldr	r0, [r7, #4]
 801f466:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	691b      	ldr	r3, [r3, #16]
 801f46e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f476:	d110      	bne.n	801f49a <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f478:	687b      	ldr	r3, [r7, #4]
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	68db      	ldr	r3, [r3, #12]
 801f47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f482:	2b80      	cmp	r3, #128	; 0x80
 801f484:	d109      	bne.n	801f49a <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801f496:	6878      	ldr	r0, [r7, #4]
 801f498:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	681b      	ldr	r3, [r3, #0]
 801f49e:	691b      	ldr	r3, [r3, #16]
 801f4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f4a4:	2b40      	cmp	r3, #64	; 0x40
 801f4a6:	d110      	bne.n	801f4ca <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	681b      	ldr	r3, [r3, #0]
 801f4ac:	68db      	ldr	r3, [r3, #12]
 801f4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f4b2:	2b40      	cmp	r3, #64	; 0x40
 801f4b4:	d109      	bne.n	801f4ca <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f4b6:	687b      	ldr	r3, [r7, #4]
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f4be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f4c6:	6878      	ldr	r0, [r7, #4]
 801f4c8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	681b      	ldr	r3, [r3, #0]
 801f4ce:	691b      	ldr	r3, [r3, #16]
 801f4d0:	f003 0320 	and.w	r3, r3, #32
 801f4d4:	2b20      	cmp	r3, #32
 801f4d6:	d110      	bne.n	801f4fa <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	68db      	ldr	r3, [r3, #12]
 801f4de:	f003 0320 	and.w	r3, r3, #32
 801f4e2:	2b20      	cmp	r3, #32
 801f4e4:	d109      	bne.n	801f4fa <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	f06f 0220 	mvn.w	r2, #32
 801f4ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f4f6:	6878      	ldr	r0, [r7, #4]
 801f4f8:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f4fa:	bf00      	nop
 801f4fc:	3708      	adds	r7, #8
 801f4fe:	46bd      	mov	sp, r7
 801f500:	bd80      	pop	{r7, pc}
	...

0801f504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f504:	b580      	push	{r7, lr}
 801f506:	b082      	sub	sp, #8
 801f508:	af00      	add	r7, sp, #0
 801f50a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d101      	bne.n	801f516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f512:	2301      	movs	r3, #1
 801f514:	e04e      	b.n	801f5b4 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d114      	bne.n	801f548 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f51e:	687b      	ldr	r3, [r7, #4]
 801f520:	2200      	movs	r2, #0
 801f522:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801f526:	6878      	ldr	r0, [r7, #4]
 801f528:	f000 fc1c 	bl	801fd64 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801f532:	2b00      	cmp	r3, #0
 801f534:	d103      	bne.n	801f53e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	4a20      	ldr	r2, [pc, #128]	; (801f5bc <HAL_UART_Init+0xb8>)
 801f53a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801f544:	6878      	ldr	r0, [r7, #4]
 801f546:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	2224      	movs	r2, #36	; 0x24
 801f54c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	681a      	ldr	r2, [r3, #0]
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	681b      	ldr	r3, [r3, #0]
 801f558:	f022 0201 	bic.w	r2, r2, #1
 801f55c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f55e:	6878      	ldr	r0, [r7, #4]
 801f560:	f000 fc46 	bl	801fdf0 <UART_SetConfig>
 801f564:	4603      	mov	r3, r0
 801f566:	2b01      	cmp	r3, #1
 801f568:	d101      	bne.n	801f56e <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801f56a:	2301      	movs	r3, #1
 801f56c:	e022      	b.n	801f5b4 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f56e:	687b      	ldr	r3, [r7, #4]
 801f570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f572:	2b00      	cmp	r3, #0
 801f574:	d002      	beq.n	801f57c <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801f576:	6878      	ldr	r0, [r7, #4]
 801f578:	f000 fe9e 	bl	80202b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	685a      	ldr	r2, [r3, #4]
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	681b      	ldr	r3, [r3, #0]
 801f586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f58a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	689a      	ldr	r2, [r3, #8]
 801f592:	687b      	ldr	r3, [r7, #4]
 801f594:	681b      	ldr	r3, [r3, #0]
 801f596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f59a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	681b      	ldr	r3, [r3, #0]
 801f5a0:	681a      	ldr	r2, [r3, #0]
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	f042 0201 	orr.w	r2, r2, #1
 801f5aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f5ac:	6878      	ldr	r0, [r7, #4]
 801f5ae:	f000 ff25 	bl	80203fc <UART_CheckIdleState>
 801f5b2:	4603      	mov	r3, r0
}
 801f5b4:	4618      	mov	r0, r3
 801f5b6:	3708      	adds	r7, #8
 801f5b8:	46bd      	mov	sp, r7
 801f5ba:	bd80      	pop	{r7, pc}
 801f5bc:	08018e05 	.word	0x08018e05

0801f5c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f5c0:	b580      	push	{r7, lr}
 801f5c2:	b08a      	sub	sp, #40	; 0x28
 801f5c4:	af02      	add	r7, sp, #8
 801f5c6:	60f8      	str	r0, [r7, #12]
 801f5c8:	60b9      	str	r1, [r7, #8]
 801f5ca:	603b      	str	r3, [r7, #0]
 801f5cc:	4613      	mov	r3, r2
 801f5ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f5d0:	68fb      	ldr	r3, [r7, #12]
 801f5d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801f5d4:	2b20      	cmp	r3, #32
 801f5d6:	d171      	bne.n	801f6bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801f5d8:	68bb      	ldr	r3, [r7, #8]
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	d002      	beq.n	801f5e4 <HAL_UART_Transmit+0x24>
 801f5de:	88fb      	ldrh	r3, [r7, #6]
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d101      	bne.n	801f5e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801f5e4:	2301      	movs	r3, #1
 801f5e6:	e06a      	b.n	801f6be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f5e8:	68fb      	ldr	r3, [r7, #12]
 801f5ea:	2200      	movs	r2, #0
 801f5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f5f0:	68fb      	ldr	r3, [r7, #12]
 801f5f2:	2221      	movs	r2, #33	; 0x21
 801f5f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f5f6:	f7fa fa1b 	bl	8019a30 <HAL_GetTick>
 801f5fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f5fc:	68fb      	ldr	r3, [r7, #12]
 801f5fe:	88fa      	ldrh	r2, [r7, #6]
 801f600:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	88fa      	ldrh	r2, [r7, #6]
 801f608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	689b      	ldr	r3, [r3, #8]
 801f610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f614:	d108      	bne.n	801f628 <HAL_UART_Transmit+0x68>
 801f616:	68fb      	ldr	r3, [r7, #12]
 801f618:	691b      	ldr	r3, [r3, #16]
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	d104      	bne.n	801f628 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801f61e:	2300      	movs	r3, #0
 801f620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f622:	68bb      	ldr	r3, [r7, #8]
 801f624:	61bb      	str	r3, [r7, #24]
 801f626:	e003      	b.n	801f630 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801f628:	68bb      	ldr	r3, [r7, #8]
 801f62a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f62c:	2300      	movs	r3, #0
 801f62e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801f630:	e02c      	b.n	801f68c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f632:	683b      	ldr	r3, [r7, #0]
 801f634:	9300      	str	r3, [sp, #0]
 801f636:	697b      	ldr	r3, [r7, #20]
 801f638:	2200      	movs	r2, #0
 801f63a:	2180      	movs	r1, #128	; 0x80
 801f63c:	68f8      	ldr	r0, [r7, #12]
 801f63e:	f000 ff2a 	bl	8020496 <UART_WaitOnFlagUntilTimeout>
 801f642:	4603      	mov	r3, r0
 801f644:	2b00      	cmp	r3, #0
 801f646:	d001      	beq.n	801f64c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801f648:	2303      	movs	r3, #3
 801f64a:	e038      	b.n	801f6be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801f64c:	69fb      	ldr	r3, [r7, #28]
 801f64e:	2b00      	cmp	r3, #0
 801f650:	d10b      	bne.n	801f66a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f652:	69bb      	ldr	r3, [r7, #24]
 801f654:	881b      	ldrh	r3, [r3, #0]
 801f656:	461a      	mov	r2, r3
 801f658:	68fb      	ldr	r3, [r7, #12]
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f660:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f662:	69bb      	ldr	r3, [r7, #24]
 801f664:	3302      	adds	r3, #2
 801f666:	61bb      	str	r3, [r7, #24]
 801f668:	e007      	b.n	801f67a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f66a:	69fb      	ldr	r3, [r7, #28]
 801f66c:	781a      	ldrb	r2, [r3, #0]
 801f66e:	68fb      	ldr	r3, [r7, #12]
 801f670:	681b      	ldr	r3, [r3, #0]
 801f672:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f674:	69fb      	ldr	r3, [r7, #28]
 801f676:	3301      	adds	r3, #1
 801f678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801f680:	b29b      	uxth	r3, r3
 801f682:	3b01      	subs	r3, #1
 801f684:	b29a      	uxth	r2, r3
 801f686:	68fb      	ldr	r3, [r7, #12]
 801f688:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801f68c:	68fb      	ldr	r3, [r7, #12]
 801f68e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801f692:	b29b      	uxth	r3, r3
 801f694:	2b00      	cmp	r3, #0
 801f696:	d1cc      	bne.n	801f632 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f698:	683b      	ldr	r3, [r7, #0]
 801f69a:	9300      	str	r3, [sp, #0]
 801f69c:	697b      	ldr	r3, [r7, #20]
 801f69e:	2200      	movs	r2, #0
 801f6a0:	2140      	movs	r1, #64	; 0x40
 801f6a2:	68f8      	ldr	r0, [r7, #12]
 801f6a4:	f000 fef7 	bl	8020496 <UART_WaitOnFlagUntilTimeout>
 801f6a8:	4603      	mov	r3, r0
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	d001      	beq.n	801f6b2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801f6ae:	2303      	movs	r3, #3
 801f6b0:	e005      	b.n	801f6be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	2220      	movs	r2, #32
 801f6b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	e000      	b.n	801f6be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801f6bc:	2302      	movs	r3, #2
  }
}
 801f6be:	4618      	mov	r0, r3
 801f6c0:	3720      	adds	r7, #32
 801f6c2:	46bd      	mov	sp, r7
 801f6c4:	bd80      	pop	{r7, pc}
	...

0801f6c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801f6c8:	b580      	push	{r7, lr}
 801f6ca:	b0ba      	sub	sp, #232	; 0xe8
 801f6cc:	af00      	add	r7, sp, #0
 801f6ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	69db      	ldr	r3, [r3, #28]
 801f6d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	681b      	ldr	r3, [r3, #0]
 801f6de:	681b      	ldr	r3, [r3, #0]
 801f6e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	689b      	ldr	r3, [r3, #8]
 801f6ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801f6ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801f6f2:	f640 030f 	movw	r3, #2063	; 0x80f
 801f6f6:	4013      	ands	r3, r2
 801f6f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801f6fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801f700:	2b00      	cmp	r3, #0
 801f702:	d115      	bne.n	801f730 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801f704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f708:	f003 0320 	and.w	r3, r3, #32
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d00f      	beq.n	801f730 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801f710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f714:	f003 0320 	and.w	r3, r3, #32
 801f718:	2b00      	cmp	r3, #0
 801f71a:	d009      	beq.n	801f730 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f720:	2b00      	cmp	r3, #0
 801f722:	f000 82b8 	beq.w	801fc96 <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801f726:	687b      	ldr	r3, [r7, #4]
 801f728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f72a:	6878      	ldr	r0, [r7, #4]
 801f72c:	4798      	blx	r3
      }
      return;
 801f72e:	e2b2      	b.n	801fc96 <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801f730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801f734:	2b00      	cmp	r3, #0
 801f736:	f000 811d 	beq.w	801f974 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801f73a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f73e:	f003 0301 	and.w	r3, r3, #1
 801f742:	2b00      	cmp	r3, #0
 801f744:	d106      	bne.n	801f754 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801f746:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801f74a:	4b88      	ldr	r3, [pc, #544]	; (801f96c <HAL_UART_IRQHandler+0x2a4>)
 801f74c:	4013      	ands	r3, r2
 801f74e:	2b00      	cmp	r3, #0
 801f750:	f000 8110 	beq.w	801f974 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801f754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f758:	f003 0301 	and.w	r3, r3, #1
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d011      	beq.n	801f784 <HAL_UART_IRQHandler+0xbc>
 801f760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f768:	2b00      	cmp	r3, #0
 801f76a:	d00b      	beq.n	801f784 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	2201      	movs	r2, #1
 801f772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f77a:	f043 0201 	orr.w	r2, r3, #1
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f788:	f003 0302 	and.w	r3, r3, #2
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	d011      	beq.n	801f7b4 <HAL_UART_IRQHandler+0xec>
 801f790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f794:	f003 0301 	and.w	r3, r3, #1
 801f798:	2b00      	cmp	r3, #0
 801f79a:	d00b      	beq.n	801f7b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801f79c:	687b      	ldr	r3, [r7, #4]
 801f79e:	681b      	ldr	r3, [r3, #0]
 801f7a0:	2202      	movs	r2, #2
 801f7a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f7aa:	f043 0204 	orr.w	r2, r3, #4
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801f7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f7b8:	f003 0304 	and.w	r3, r3, #4
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	d011      	beq.n	801f7e4 <HAL_UART_IRQHandler+0x11c>
 801f7c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f7c4:	f003 0301 	and.w	r3, r3, #1
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	d00b      	beq.n	801f7e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	2204      	movs	r2, #4
 801f7d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f7da:	f043 0202 	orr.w	r2, r3, #2
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801f7e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f7e8:	f003 0308 	and.w	r3, r3, #8
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d017      	beq.n	801f820 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801f7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f7f4:	f003 0320 	and.w	r3, r3, #32
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	d105      	bne.n	801f808 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801f7fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f800:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801f804:	2b00      	cmp	r3, #0
 801f806:	d00b      	beq.n	801f820 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	2208      	movs	r2, #8
 801f80e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f816:	f043 0208 	orr.w	r2, r3, #8
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801f820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d012      	beq.n	801f852 <HAL_UART_IRQHandler+0x18a>
 801f82c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801f834:	2b00      	cmp	r3, #0
 801f836:	d00c      	beq.n	801f852 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	681b      	ldr	r3, [r3, #0]
 801f83c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f840:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801f842:	687b      	ldr	r3, [r7, #4]
 801f844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f848:	f043 0220 	orr.w	r2, r3, #32
 801f84c:	687b      	ldr	r3, [r7, #4]
 801f84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f858:	2b00      	cmp	r3, #0
 801f85a:	f000 821e 	beq.w	801fc9a <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801f85e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f862:	f003 0320 	and.w	r3, r3, #32
 801f866:	2b00      	cmp	r3, #0
 801f868:	d00d      	beq.n	801f886 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801f86a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f86e:	f003 0320 	and.w	r3, r3, #32
 801f872:	2b00      	cmp	r3, #0
 801f874:	d007      	beq.n	801f886 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d003      	beq.n	801f886 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f882:	6878      	ldr	r0, [r7, #4]
 801f884:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f88c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	689b      	ldr	r3, [r3, #8]
 801f896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f89a:	2b40      	cmp	r3, #64	; 0x40
 801f89c:	d005      	beq.n	801f8aa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801f89e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801f8a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801f8a6:	2b00      	cmp	r3, #0
 801f8a8:	d053      	beq.n	801f952 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801f8aa:	6878      	ldr	r0, [r7, #4]
 801f8ac:	f000 ff80 	bl	80207b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	681b      	ldr	r3, [r3, #0]
 801f8b4:	689b      	ldr	r3, [r3, #8]
 801f8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f8ba:	2b40      	cmp	r3, #64	; 0x40
 801f8bc:	d143      	bne.n	801f946 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	681b      	ldr	r3, [r3, #0]
 801f8c2:	3308      	adds	r3, #8
 801f8c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f8c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f8cc:	e853 3f00 	ldrex	r3, [r3]
 801f8d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801f8d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f8d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f8dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	681b      	ldr	r3, [r3, #0]
 801f8e4:	3308      	adds	r3, #8
 801f8e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801f8ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801f8ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f8f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801f8f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801f8fa:	e841 2300 	strex	r3, r2, [r1]
 801f8fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801f902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f906:	2b00      	cmp	r3, #0
 801f908:	d1d9      	bne.n	801f8be <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801f90a:	687b      	ldr	r3, [r7, #4]
 801f90c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f90e:	2b00      	cmp	r3, #0
 801f910:	d013      	beq.n	801f93a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f916:	4a16      	ldr	r2, [pc, #88]	; (801f970 <HAL_UART_IRQHandler+0x2a8>)
 801f918:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801f91a:	687b      	ldr	r3, [r7, #4]
 801f91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f91e:	4618      	mov	r0, r3
 801f920:	f7fb f98a 	bl	801ac38 <HAL_DMA_Abort_IT>
 801f924:	4603      	mov	r3, r0
 801f926:	2b00      	cmp	r3, #0
 801f928:	d01d      	beq.n	801f966 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f930:	687a      	ldr	r2, [r7, #4]
 801f932:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801f934:	4610      	mov	r0, r2
 801f936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f938:	e015      	b.n	801f966 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801f940:	6878      	ldr	r0, [r7, #4]
 801f942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f944:	e00f      	b.n	801f966 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801f94c:	6878      	ldr	r0, [r7, #4]
 801f94e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f950:	e009      	b.n	801f966 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801f952:	687b      	ldr	r3, [r7, #4]
 801f954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801f958:	6878      	ldr	r0, [r7, #4]
 801f95a:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	2200      	movs	r2, #0
 801f960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801f964:	e199      	b.n	801fc9a <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f966:	bf00      	nop
    return;
 801f968:	e197      	b.n	801fc9a <HAL_UART_IRQHandler+0x5d2>
 801f96a:	bf00      	nop
 801f96c:	04000120 	.word	0x04000120
 801f970:	08020879 	.word	0x08020879

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f978:	2b01      	cmp	r3, #1
 801f97a:	f040 8150 	bne.w	801fc1e <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801f97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f982:	f003 0310 	and.w	r3, r3, #16
 801f986:	2b00      	cmp	r3, #0
 801f988:	f000 8149 	beq.w	801fc1e <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801f98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f990:	f003 0310 	and.w	r3, r3, #16
 801f994:	2b00      	cmp	r3, #0
 801f996:	f000 8142 	beq.w	801fc1e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	681b      	ldr	r3, [r3, #0]
 801f99e:	2210      	movs	r2, #16
 801f9a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	681b      	ldr	r3, [r3, #0]
 801f9a6:	689b      	ldr	r3, [r3, #8]
 801f9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f9ac:	2b40      	cmp	r3, #64	; 0x40
 801f9ae:	f040 80b8 	bne.w	801fb22 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801f9b2:	687b      	ldr	r3, [r7, #4]
 801f9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	685b      	ldr	r3, [r3, #4]
 801f9ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801f9be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	f000 816b 	beq.w	801fc9e <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801f9ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801f9d2:	429a      	cmp	r2, r3
 801f9d4:	f080 8163 	bcs.w	801fc9e <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801f9de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f9e6:	69db      	ldr	r3, [r3, #28]
 801f9e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f9ec:	f000 8086 	beq.w	801fafc <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f9f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801f9fc:	e853 3f00 	ldrex	r3, [r3]
 801fa00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801fa04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801fa08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fa0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801fa10:	687b      	ldr	r3, [r7, #4]
 801fa12:	681b      	ldr	r3, [r3, #0]
 801fa14:	461a      	mov	r2, r3
 801fa16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801fa1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801fa1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801fa26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801fa2a:	e841 2300 	strex	r3, r2, [r1]
 801fa2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801fa32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801fa36:	2b00      	cmp	r3, #0
 801fa38:	d1da      	bne.n	801f9f0 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fa3a:	687b      	ldr	r3, [r7, #4]
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	3308      	adds	r3, #8
 801fa40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801fa44:	e853 3f00 	ldrex	r3, [r3]
 801fa48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801fa4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801fa4c:	f023 0301 	bic.w	r3, r3, #1
 801fa50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	3308      	adds	r3, #8
 801fa5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801fa5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801fa62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801fa66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801fa6a:	e841 2300 	strex	r3, r2, [r1]
 801fa6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801fa70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d1e1      	bne.n	801fa3a <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	3308      	adds	r3, #8
 801fa7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801fa80:	e853 3f00 	ldrex	r3, [r3]
 801fa84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801fa86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801fa88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fa8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	681b      	ldr	r3, [r3, #0]
 801fa94:	3308      	adds	r3, #8
 801fa96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801fa9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801fa9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801faa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801faa2:	e841 2300 	strex	r3, r2, [r1]
 801faa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801faa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d1e3      	bne.n	801fa76 <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	2220      	movs	r2, #32
 801fab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	2200      	movs	r2, #0
 801faba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	681b      	ldr	r3, [r3, #0]
 801fac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fac4:	e853 3f00 	ldrex	r3, [r3]
 801fac8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801faca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801facc:	f023 0310 	bic.w	r3, r3, #16
 801fad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	681b      	ldr	r3, [r3, #0]
 801fad8:	461a      	mov	r2, r3
 801fada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801fade:	65bb      	str	r3, [r7, #88]	; 0x58
 801fae0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801fae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fae6:	e841 2300 	strex	r3, r2, [r1]
 801faea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801faec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d1e4      	bne.n	801fabc <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801faf6:	4618      	mov	r0, r3
 801faf8:	f7fb f82e 	bl	801ab58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	2202      	movs	r2, #2
 801fb00:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801fb08:	687a      	ldr	r2, [r7, #4]
 801fb0a:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801fb0e:	687a      	ldr	r2, [r7, #4]
 801fb10:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801fb14:	b292      	uxth	r2, r2
 801fb16:	1a8a      	subs	r2, r1, r2
 801fb18:	b292      	uxth	r2, r2
 801fb1a:	4611      	mov	r1, r2
 801fb1c:	6878      	ldr	r0, [r7, #4]
 801fb1e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801fb20:	e0bd      	b.n	801fc9e <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801fb28:	687b      	ldr	r3, [r7, #4]
 801fb2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801fb2e:	b29b      	uxth	r3, r3
 801fb30:	1ad3      	subs	r3, r2, r3
 801fb32:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801fb3c:	b29b      	uxth	r3, r3
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	f000 80af 	beq.w	801fca2 <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801fb44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	f000 80aa 	beq.w	801fca2 <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	681b      	ldr	r3, [r3, #0]
 801fb52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb56:	e853 3f00 	ldrex	r3, [r3]
 801fb5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801fb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801fb62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	681b      	ldr	r3, [r3, #0]
 801fb6a:	461a      	mov	r2, r3
 801fb6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801fb70:	647b      	str	r3, [r7, #68]	; 0x44
 801fb72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801fb76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801fb78:	e841 2300 	strex	r3, r2, [r1]
 801fb7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801fb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fb80:	2b00      	cmp	r3, #0
 801fb82:	d1e4      	bne.n	801fb4e <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	3308      	adds	r3, #8
 801fb8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb8e:	e853 3f00 	ldrex	r3, [r3]
 801fb92:	623b      	str	r3, [r7, #32]
   return(result);
 801fb94:	6a3b      	ldr	r3, [r7, #32]
 801fb96:	f023 0301 	bic.w	r3, r3, #1
 801fb9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	3308      	adds	r3, #8
 801fba4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801fba8:	633a      	str	r2, [r7, #48]	; 0x30
 801fbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fbac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fbae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801fbb0:	e841 2300 	strex	r3, r2, [r1]
 801fbb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801fbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	d1e3      	bne.n	801fb84 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	2220      	movs	r2, #32
 801fbc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fbc4:	687b      	ldr	r3, [r7, #4]
 801fbc6:	2200      	movs	r2, #0
 801fbc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801fbca:	687b      	ldr	r3, [r7, #4]
 801fbcc:	2200      	movs	r2, #0
 801fbce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fbd0:	687b      	ldr	r3, [r7, #4]
 801fbd2:	681b      	ldr	r3, [r3, #0]
 801fbd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fbd6:	693b      	ldr	r3, [r7, #16]
 801fbd8:	e853 3f00 	ldrex	r3, [r3]
 801fbdc:	60fb      	str	r3, [r7, #12]
   return(result);
 801fbde:	68fb      	ldr	r3, [r7, #12]
 801fbe0:	f023 0310 	bic.w	r3, r3, #16
 801fbe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	461a      	mov	r2, r3
 801fbee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801fbf2:	61fb      	str	r3, [r7, #28]
 801fbf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fbf6:	69b9      	ldr	r1, [r7, #24]
 801fbf8:	69fa      	ldr	r2, [r7, #28]
 801fbfa:	e841 2300 	strex	r3, r2, [r1]
 801fbfe:	617b      	str	r3, [r7, #20]
   return(result);
 801fc00:	697b      	ldr	r3, [r7, #20]
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	d1e4      	bne.n	801fbd0 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	2202      	movs	r2, #2
 801fc0a:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801fc0c:	687b      	ldr	r3, [r7, #4]
 801fc0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801fc12:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801fc16:	4611      	mov	r1, r2
 801fc18:	6878      	ldr	r0, [r7, #4]
 801fc1a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801fc1c:	e041      	b.n	801fca2 <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801fc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801fc22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	d010      	beq.n	801fc4c <HAL_UART_IRQHandler+0x584>
 801fc2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801fc2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	d00a      	beq.n	801fc4c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801fc3e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801fc40:	687b      	ldr	r3, [r7, #4]
 801fc42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801fc46:	6878      	ldr	r0, [r7, #4]
 801fc48:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801fc4a:	e02d      	b.n	801fca8 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801fc4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801fc50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	d00e      	beq.n	801fc76 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801fc58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801fc5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fc60:	2b00      	cmp	r3, #0
 801fc62:	d008      	beq.n	801fc76 <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801fc64:	687b      	ldr	r3, [r7, #4]
 801fc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d01c      	beq.n	801fca6 <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fc70:	6878      	ldr	r0, [r7, #4]
 801fc72:	4798      	blx	r3
    }
    return;
 801fc74:	e017      	b.n	801fca6 <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801fc76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801fc7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d012      	beq.n	801fca8 <HAL_UART_IRQHandler+0x5e0>
 801fc82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801fc86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	d00c      	beq.n	801fca8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801fc8e:	6878      	ldr	r0, [r7, #4]
 801fc90:	f000 fe0a 	bl	80208a8 <UART_EndTransmit_IT>
    return;
 801fc94:	e008      	b.n	801fca8 <HAL_UART_IRQHandler+0x5e0>
      return;
 801fc96:	bf00      	nop
 801fc98:	e006      	b.n	801fca8 <HAL_UART_IRQHandler+0x5e0>
    return;
 801fc9a:	bf00      	nop
 801fc9c:	e004      	b.n	801fca8 <HAL_UART_IRQHandler+0x5e0>
      return;
 801fc9e:	bf00      	nop
 801fca0:	e002      	b.n	801fca8 <HAL_UART_IRQHandler+0x5e0>
      return;
 801fca2:	bf00      	nop
 801fca4:	e000      	b.n	801fca8 <HAL_UART_IRQHandler+0x5e0>
    return;
 801fca6:	bf00      	nop
  }

}
 801fca8:	37e8      	adds	r7, #232	; 0xe8
 801fcaa:	46bd      	mov	sp, r7
 801fcac:	bd80      	pop	{r7, pc}
 801fcae:	bf00      	nop

0801fcb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801fcb0:	b480      	push	{r7}
 801fcb2:	b083      	sub	sp, #12
 801fcb4:	af00      	add	r7, sp, #0
 801fcb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801fcb8:	bf00      	nop
 801fcba:	370c      	adds	r7, #12
 801fcbc:	46bd      	mov	sp, r7
 801fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcc2:	4770      	bx	lr

0801fcc4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801fcc4:	b480      	push	{r7}
 801fcc6:	b083      	sub	sp, #12
 801fcc8:	af00      	add	r7, sp, #0
 801fcca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801fccc:	bf00      	nop
 801fcce:	370c      	adds	r7, #12
 801fcd0:	46bd      	mov	sp, r7
 801fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcd6:	4770      	bx	lr

0801fcd8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801fcd8:	b480      	push	{r7}
 801fcda:	b083      	sub	sp, #12
 801fcdc:	af00      	add	r7, sp, #0
 801fcde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801fce0:	bf00      	nop
 801fce2:	370c      	adds	r7, #12
 801fce4:	46bd      	mov	sp, r7
 801fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcea:	4770      	bx	lr

0801fcec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801fcec:	b480      	push	{r7}
 801fcee:	b083      	sub	sp, #12
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801fcf4:	bf00      	nop
 801fcf6:	370c      	adds	r7, #12
 801fcf8:	46bd      	mov	sp, r7
 801fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcfe:	4770      	bx	lr

0801fd00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801fd00:	b480      	push	{r7}
 801fd02:	b083      	sub	sp, #12
 801fd04:	af00      	add	r7, sp, #0
 801fd06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801fd08:	bf00      	nop
 801fd0a:	370c      	adds	r7, #12
 801fd0c:	46bd      	mov	sp, r7
 801fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd12:	4770      	bx	lr

0801fd14 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801fd14:	b480      	push	{r7}
 801fd16:	b083      	sub	sp, #12
 801fd18:	af00      	add	r7, sp, #0
 801fd1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801fd1c:	bf00      	nop
 801fd1e:	370c      	adds	r7, #12
 801fd20:	46bd      	mov	sp, r7
 801fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd26:	4770      	bx	lr

0801fd28 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801fd28:	b480      	push	{r7}
 801fd2a:	b083      	sub	sp, #12
 801fd2c:	af00      	add	r7, sp, #0
 801fd2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801fd30:	bf00      	nop
 801fd32:	370c      	adds	r7, #12
 801fd34:	46bd      	mov	sp, r7
 801fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd3a:	4770      	bx	lr

0801fd3c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801fd3c:	b480      	push	{r7}
 801fd3e:	b083      	sub	sp, #12
 801fd40:	af00      	add	r7, sp, #0
 801fd42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801fd44:	bf00      	nop
 801fd46:	370c      	adds	r7, #12
 801fd48:	46bd      	mov	sp, r7
 801fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd4e:	4770      	bx	lr

0801fd50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801fd50:	b480      	push	{r7}
 801fd52:	b083      	sub	sp, #12
 801fd54:	af00      	add	r7, sp, #0
 801fd56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801fd58:	bf00      	nop
 801fd5a:	370c      	adds	r7, #12
 801fd5c:	46bd      	mov	sp, r7
 801fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd62:	4770      	bx	lr

0801fd64 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801fd64:	b480      	push	{r7}
 801fd66:	b083      	sub	sp, #12
 801fd68:	af00      	add	r7, sp, #0
 801fd6a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	4a16      	ldr	r2, [pc, #88]	; (801fdc8 <UART_InitCallbacksToDefault+0x64>)
 801fd70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	4a15      	ldr	r2, [pc, #84]	; (801fdcc <UART_InitCallbacksToDefault+0x68>)
 801fd78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	4a14      	ldr	r2, [pc, #80]	; (801fdd0 <UART_InitCallbacksToDefault+0x6c>)
 801fd80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	4a13      	ldr	r2, [pc, #76]	; (801fdd4 <UART_InitCallbacksToDefault+0x70>)
 801fd88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	4a12      	ldr	r2, [pc, #72]	; (801fdd8 <UART_InitCallbacksToDefault+0x74>)
 801fd90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	4a11      	ldr	r2, [pc, #68]	; (801fddc <UART_InitCallbacksToDefault+0x78>)
 801fd98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	4a10      	ldr	r2, [pc, #64]	; (801fde0 <UART_InitCallbacksToDefault+0x7c>)
 801fda0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	4a0f      	ldr	r2, [pc, #60]	; (801fde4 <UART_InitCallbacksToDefault+0x80>)
 801fda8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	4a0e      	ldr	r2, [pc, #56]	; (801fde8 <UART_InitCallbacksToDefault+0x84>)
 801fdb0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	4a0d      	ldr	r2, [pc, #52]	; (801fdec <UART_InitCallbacksToDefault+0x88>)
 801fdb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801fdbc:	bf00      	nop
 801fdbe:	370c      	adds	r7, #12
 801fdc0:	46bd      	mov	sp, r7
 801fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdc6:	4770      	bx	lr
 801fdc8:	0801fcc5 	.word	0x0801fcc5
 801fdcc:	0801fcb1 	.word	0x0801fcb1
 801fdd0:	0801fced 	.word	0x0801fced
 801fdd4:	0801fcd9 	.word	0x0801fcd9
 801fdd8:	0801fd01 	.word	0x0801fd01
 801fddc:	0801fd15 	.word	0x0801fd15
 801fde0:	0801fd29 	.word	0x0801fd29
 801fde4:	0801fd3d 	.word	0x0801fd3d
 801fde8:	0801fd51 	.word	0x0801fd51
 801fdec:	08019169 	.word	0x08019169

0801fdf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801fdf0:	b580      	push	{r7, lr}
 801fdf2:	b088      	sub	sp, #32
 801fdf4:	af00      	add	r7, sp, #0
 801fdf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801fdf8:	2300      	movs	r3, #0
 801fdfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	689a      	ldr	r2, [r3, #8]
 801fe00:	687b      	ldr	r3, [r7, #4]
 801fe02:	691b      	ldr	r3, [r3, #16]
 801fe04:	431a      	orrs	r2, r3
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	695b      	ldr	r3, [r3, #20]
 801fe0a:	431a      	orrs	r2, r3
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	69db      	ldr	r3, [r3, #28]
 801fe10:	4313      	orrs	r3, r2
 801fe12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801fe14:	687b      	ldr	r3, [r7, #4]
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	681a      	ldr	r2, [r3, #0]
 801fe1a:	4ba6      	ldr	r3, [pc, #664]	; (80200b4 <UART_SetConfig+0x2c4>)
 801fe1c:	4013      	ands	r3, r2
 801fe1e:	687a      	ldr	r2, [r7, #4]
 801fe20:	6812      	ldr	r2, [r2, #0]
 801fe22:	6979      	ldr	r1, [r7, #20]
 801fe24:	430b      	orrs	r3, r1
 801fe26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	681b      	ldr	r3, [r3, #0]
 801fe2c:	685b      	ldr	r3, [r3, #4]
 801fe2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801fe32:	687b      	ldr	r3, [r7, #4]
 801fe34:	68da      	ldr	r2, [r3, #12]
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	430a      	orrs	r2, r1
 801fe3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801fe3e:	687b      	ldr	r3, [r7, #4]
 801fe40:	699b      	ldr	r3, [r3, #24]
 801fe42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801fe44:	687b      	ldr	r3, [r7, #4]
 801fe46:	6a1b      	ldr	r3, [r3, #32]
 801fe48:	697a      	ldr	r2, [r7, #20]
 801fe4a:	4313      	orrs	r3, r2
 801fe4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801fe4e:	687b      	ldr	r3, [r7, #4]
 801fe50:	681b      	ldr	r3, [r3, #0]
 801fe52:	689b      	ldr	r3, [r3, #8]
 801fe54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	697a      	ldr	r2, [r7, #20]
 801fe5e:	430a      	orrs	r2, r1
 801fe60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801fe62:	687b      	ldr	r3, [r7, #4]
 801fe64:	681b      	ldr	r3, [r3, #0]
 801fe66:	4a94      	ldr	r2, [pc, #592]	; (80200b8 <UART_SetConfig+0x2c8>)
 801fe68:	4293      	cmp	r3, r2
 801fe6a:	d120      	bne.n	801feae <UART_SetConfig+0xbe>
 801fe6c:	4b93      	ldr	r3, [pc, #588]	; (80200bc <UART_SetConfig+0x2cc>)
 801fe6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801fe72:	f003 0303 	and.w	r3, r3, #3
 801fe76:	2b03      	cmp	r3, #3
 801fe78:	d816      	bhi.n	801fea8 <UART_SetConfig+0xb8>
 801fe7a:	a201      	add	r2, pc, #4	; (adr r2, 801fe80 <UART_SetConfig+0x90>)
 801fe7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe80:	0801fe91 	.word	0x0801fe91
 801fe84:	0801fe9d 	.word	0x0801fe9d
 801fe88:	0801fe97 	.word	0x0801fe97
 801fe8c:	0801fea3 	.word	0x0801fea3
 801fe90:	2301      	movs	r3, #1
 801fe92:	77fb      	strb	r3, [r7, #31]
 801fe94:	e150      	b.n	8020138 <UART_SetConfig+0x348>
 801fe96:	2302      	movs	r3, #2
 801fe98:	77fb      	strb	r3, [r7, #31]
 801fe9a:	e14d      	b.n	8020138 <UART_SetConfig+0x348>
 801fe9c:	2304      	movs	r3, #4
 801fe9e:	77fb      	strb	r3, [r7, #31]
 801fea0:	e14a      	b.n	8020138 <UART_SetConfig+0x348>
 801fea2:	2308      	movs	r3, #8
 801fea4:	77fb      	strb	r3, [r7, #31]
 801fea6:	e147      	b.n	8020138 <UART_SetConfig+0x348>
 801fea8:	2310      	movs	r3, #16
 801feaa:	77fb      	strb	r3, [r7, #31]
 801feac:	e144      	b.n	8020138 <UART_SetConfig+0x348>
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	681b      	ldr	r3, [r3, #0]
 801feb2:	4a83      	ldr	r2, [pc, #524]	; (80200c0 <UART_SetConfig+0x2d0>)
 801feb4:	4293      	cmp	r3, r2
 801feb6:	d132      	bne.n	801ff1e <UART_SetConfig+0x12e>
 801feb8:	4b80      	ldr	r3, [pc, #512]	; (80200bc <UART_SetConfig+0x2cc>)
 801feba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801febe:	f003 030c 	and.w	r3, r3, #12
 801fec2:	2b0c      	cmp	r3, #12
 801fec4:	d828      	bhi.n	801ff18 <UART_SetConfig+0x128>
 801fec6:	a201      	add	r2, pc, #4	; (adr r2, 801fecc <UART_SetConfig+0xdc>)
 801fec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fecc:	0801ff01 	.word	0x0801ff01
 801fed0:	0801ff19 	.word	0x0801ff19
 801fed4:	0801ff19 	.word	0x0801ff19
 801fed8:	0801ff19 	.word	0x0801ff19
 801fedc:	0801ff0d 	.word	0x0801ff0d
 801fee0:	0801ff19 	.word	0x0801ff19
 801fee4:	0801ff19 	.word	0x0801ff19
 801fee8:	0801ff19 	.word	0x0801ff19
 801feec:	0801ff07 	.word	0x0801ff07
 801fef0:	0801ff19 	.word	0x0801ff19
 801fef4:	0801ff19 	.word	0x0801ff19
 801fef8:	0801ff19 	.word	0x0801ff19
 801fefc:	0801ff13 	.word	0x0801ff13
 801ff00:	2300      	movs	r3, #0
 801ff02:	77fb      	strb	r3, [r7, #31]
 801ff04:	e118      	b.n	8020138 <UART_SetConfig+0x348>
 801ff06:	2302      	movs	r3, #2
 801ff08:	77fb      	strb	r3, [r7, #31]
 801ff0a:	e115      	b.n	8020138 <UART_SetConfig+0x348>
 801ff0c:	2304      	movs	r3, #4
 801ff0e:	77fb      	strb	r3, [r7, #31]
 801ff10:	e112      	b.n	8020138 <UART_SetConfig+0x348>
 801ff12:	2308      	movs	r3, #8
 801ff14:	77fb      	strb	r3, [r7, #31]
 801ff16:	e10f      	b.n	8020138 <UART_SetConfig+0x348>
 801ff18:	2310      	movs	r3, #16
 801ff1a:	77fb      	strb	r3, [r7, #31]
 801ff1c:	e10c      	b.n	8020138 <UART_SetConfig+0x348>
 801ff1e:	687b      	ldr	r3, [r7, #4]
 801ff20:	681b      	ldr	r3, [r3, #0]
 801ff22:	4a68      	ldr	r2, [pc, #416]	; (80200c4 <UART_SetConfig+0x2d4>)
 801ff24:	4293      	cmp	r3, r2
 801ff26:	d120      	bne.n	801ff6a <UART_SetConfig+0x17a>
 801ff28:	4b64      	ldr	r3, [pc, #400]	; (80200bc <UART_SetConfig+0x2cc>)
 801ff2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ff2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ff32:	2b30      	cmp	r3, #48	; 0x30
 801ff34:	d013      	beq.n	801ff5e <UART_SetConfig+0x16e>
 801ff36:	2b30      	cmp	r3, #48	; 0x30
 801ff38:	d814      	bhi.n	801ff64 <UART_SetConfig+0x174>
 801ff3a:	2b20      	cmp	r3, #32
 801ff3c:	d009      	beq.n	801ff52 <UART_SetConfig+0x162>
 801ff3e:	2b20      	cmp	r3, #32
 801ff40:	d810      	bhi.n	801ff64 <UART_SetConfig+0x174>
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	d002      	beq.n	801ff4c <UART_SetConfig+0x15c>
 801ff46:	2b10      	cmp	r3, #16
 801ff48:	d006      	beq.n	801ff58 <UART_SetConfig+0x168>
 801ff4a:	e00b      	b.n	801ff64 <UART_SetConfig+0x174>
 801ff4c:	2300      	movs	r3, #0
 801ff4e:	77fb      	strb	r3, [r7, #31]
 801ff50:	e0f2      	b.n	8020138 <UART_SetConfig+0x348>
 801ff52:	2302      	movs	r3, #2
 801ff54:	77fb      	strb	r3, [r7, #31]
 801ff56:	e0ef      	b.n	8020138 <UART_SetConfig+0x348>
 801ff58:	2304      	movs	r3, #4
 801ff5a:	77fb      	strb	r3, [r7, #31]
 801ff5c:	e0ec      	b.n	8020138 <UART_SetConfig+0x348>
 801ff5e:	2308      	movs	r3, #8
 801ff60:	77fb      	strb	r3, [r7, #31]
 801ff62:	e0e9      	b.n	8020138 <UART_SetConfig+0x348>
 801ff64:	2310      	movs	r3, #16
 801ff66:	77fb      	strb	r3, [r7, #31]
 801ff68:	e0e6      	b.n	8020138 <UART_SetConfig+0x348>
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	4a56      	ldr	r2, [pc, #344]	; (80200c8 <UART_SetConfig+0x2d8>)
 801ff70:	4293      	cmp	r3, r2
 801ff72:	d120      	bne.n	801ffb6 <UART_SetConfig+0x1c6>
 801ff74:	4b51      	ldr	r3, [pc, #324]	; (80200bc <UART_SetConfig+0x2cc>)
 801ff76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ff7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ff7e:	2bc0      	cmp	r3, #192	; 0xc0
 801ff80:	d013      	beq.n	801ffaa <UART_SetConfig+0x1ba>
 801ff82:	2bc0      	cmp	r3, #192	; 0xc0
 801ff84:	d814      	bhi.n	801ffb0 <UART_SetConfig+0x1c0>
 801ff86:	2b80      	cmp	r3, #128	; 0x80
 801ff88:	d009      	beq.n	801ff9e <UART_SetConfig+0x1ae>
 801ff8a:	2b80      	cmp	r3, #128	; 0x80
 801ff8c:	d810      	bhi.n	801ffb0 <UART_SetConfig+0x1c0>
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	d002      	beq.n	801ff98 <UART_SetConfig+0x1a8>
 801ff92:	2b40      	cmp	r3, #64	; 0x40
 801ff94:	d006      	beq.n	801ffa4 <UART_SetConfig+0x1b4>
 801ff96:	e00b      	b.n	801ffb0 <UART_SetConfig+0x1c0>
 801ff98:	2300      	movs	r3, #0
 801ff9a:	77fb      	strb	r3, [r7, #31]
 801ff9c:	e0cc      	b.n	8020138 <UART_SetConfig+0x348>
 801ff9e:	2302      	movs	r3, #2
 801ffa0:	77fb      	strb	r3, [r7, #31]
 801ffa2:	e0c9      	b.n	8020138 <UART_SetConfig+0x348>
 801ffa4:	2304      	movs	r3, #4
 801ffa6:	77fb      	strb	r3, [r7, #31]
 801ffa8:	e0c6      	b.n	8020138 <UART_SetConfig+0x348>
 801ffaa:	2308      	movs	r3, #8
 801ffac:	77fb      	strb	r3, [r7, #31]
 801ffae:	e0c3      	b.n	8020138 <UART_SetConfig+0x348>
 801ffb0:	2310      	movs	r3, #16
 801ffb2:	77fb      	strb	r3, [r7, #31]
 801ffb4:	e0c0      	b.n	8020138 <UART_SetConfig+0x348>
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	4a44      	ldr	r2, [pc, #272]	; (80200cc <UART_SetConfig+0x2dc>)
 801ffbc:	4293      	cmp	r3, r2
 801ffbe:	d125      	bne.n	802000c <UART_SetConfig+0x21c>
 801ffc0:	4b3e      	ldr	r3, [pc, #248]	; (80200bc <UART_SetConfig+0x2cc>)
 801ffc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ffc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ffca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ffce:	d017      	beq.n	8020000 <UART_SetConfig+0x210>
 801ffd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ffd4:	d817      	bhi.n	8020006 <UART_SetConfig+0x216>
 801ffd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ffda:	d00b      	beq.n	801fff4 <UART_SetConfig+0x204>
 801ffdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ffe0:	d811      	bhi.n	8020006 <UART_SetConfig+0x216>
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d003      	beq.n	801ffee <UART_SetConfig+0x1fe>
 801ffe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ffea:	d006      	beq.n	801fffa <UART_SetConfig+0x20a>
 801ffec:	e00b      	b.n	8020006 <UART_SetConfig+0x216>
 801ffee:	2300      	movs	r3, #0
 801fff0:	77fb      	strb	r3, [r7, #31]
 801fff2:	e0a1      	b.n	8020138 <UART_SetConfig+0x348>
 801fff4:	2302      	movs	r3, #2
 801fff6:	77fb      	strb	r3, [r7, #31]
 801fff8:	e09e      	b.n	8020138 <UART_SetConfig+0x348>
 801fffa:	2304      	movs	r3, #4
 801fffc:	77fb      	strb	r3, [r7, #31]
 801fffe:	e09b      	b.n	8020138 <UART_SetConfig+0x348>
 8020000:	2308      	movs	r3, #8
 8020002:	77fb      	strb	r3, [r7, #31]
 8020004:	e098      	b.n	8020138 <UART_SetConfig+0x348>
 8020006:	2310      	movs	r3, #16
 8020008:	77fb      	strb	r3, [r7, #31]
 802000a:	e095      	b.n	8020138 <UART_SetConfig+0x348>
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	4a2f      	ldr	r2, [pc, #188]	; (80200d0 <UART_SetConfig+0x2e0>)
 8020012:	4293      	cmp	r3, r2
 8020014:	d125      	bne.n	8020062 <UART_SetConfig+0x272>
 8020016:	4b29      	ldr	r3, [pc, #164]	; (80200bc <UART_SetConfig+0x2cc>)
 8020018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802001c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8020020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8020024:	d017      	beq.n	8020056 <UART_SetConfig+0x266>
 8020026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 802002a:	d817      	bhi.n	802005c <UART_SetConfig+0x26c>
 802002c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020030:	d00b      	beq.n	802004a <UART_SetConfig+0x25a>
 8020032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020036:	d811      	bhi.n	802005c <UART_SetConfig+0x26c>
 8020038:	2b00      	cmp	r3, #0
 802003a:	d003      	beq.n	8020044 <UART_SetConfig+0x254>
 802003c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020040:	d006      	beq.n	8020050 <UART_SetConfig+0x260>
 8020042:	e00b      	b.n	802005c <UART_SetConfig+0x26c>
 8020044:	2301      	movs	r3, #1
 8020046:	77fb      	strb	r3, [r7, #31]
 8020048:	e076      	b.n	8020138 <UART_SetConfig+0x348>
 802004a:	2302      	movs	r3, #2
 802004c:	77fb      	strb	r3, [r7, #31]
 802004e:	e073      	b.n	8020138 <UART_SetConfig+0x348>
 8020050:	2304      	movs	r3, #4
 8020052:	77fb      	strb	r3, [r7, #31]
 8020054:	e070      	b.n	8020138 <UART_SetConfig+0x348>
 8020056:	2308      	movs	r3, #8
 8020058:	77fb      	strb	r3, [r7, #31]
 802005a:	e06d      	b.n	8020138 <UART_SetConfig+0x348>
 802005c:	2310      	movs	r3, #16
 802005e:	77fb      	strb	r3, [r7, #31]
 8020060:	e06a      	b.n	8020138 <UART_SetConfig+0x348>
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	4a1b      	ldr	r2, [pc, #108]	; (80200d4 <UART_SetConfig+0x2e4>)
 8020068:	4293      	cmp	r3, r2
 802006a:	d138      	bne.n	80200de <UART_SetConfig+0x2ee>
 802006c:	4b13      	ldr	r3, [pc, #76]	; (80200bc <UART_SetConfig+0x2cc>)
 802006e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8020072:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8020076:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802007a:	d017      	beq.n	80200ac <UART_SetConfig+0x2bc>
 802007c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8020080:	d82a      	bhi.n	80200d8 <UART_SetConfig+0x2e8>
 8020082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020086:	d00b      	beq.n	80200a0 <UART_SetConfig+0x2b0>
 8020088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802008c:	d824      	bhi.n	80200d8 <UART_SetConfig+0x2e8>
 802008e:	2b00      	cmp	r3, #0
 8020090:	d003      	beq.n	802009a <UART_SetConfig+0x2aa>
 8020092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020096:	d006      	beq.n	80200a6 <UART_SetConfig+0x2b6>
 8020098:	e01e      	b.n	80200d8 <UART_SetConfig+0x2e8>
 802009a:	2300      	movs	r3, #0
 802009c:	77fb      	strb	r3, [r7, #31]
 802009e:	e04b      	b.n	8020138 <UART_SetConfig+0x348>
 80200a0:	2302      	movs	r3, #2
 80200a2:	77fb      	strb	r3, [r7, #31]
 80200a4:	e048      	b.n	8020138 <UART_SetConfig+0x348>
 80200a6:	2304      	movs	r3, #4
 80200a8:	77fb      	strb	r3, [r7, #31]
 80200aa:	e045      	b.n	8020138 <UART_SetConfig+0x348>
 80200ac:	2308      	movs	r3, #8
 80200ae:	77fb      	strb	r3, [r7, #31]
 80200b0:	e042      	b.n	8020138 <UART_SetConfig+0x348>
 80200b2:	bf00      	nop
 80200b4:	efff69f3 	.word	0xefff69f3
 80200b8:	40011000 	.word	0x40011000
 80200bc:	40023800 	.word	0x40023800
 80200c0:	40004400 	.word	0x40004400
 80200c4:	40004800 	.word	0x40004800
 80200c8:	40004c00 	.word	0x40004c00
 80200cc:	40005000 	.word	0x40005000
 80200d0:	40011400 	.word	0x40011400
 80200d4:	40007800 	.word	0x40007800
 80200d8:	2310      	movs	r3, #16
 80200da:	77fb      	strb	r3, [r7, #31]
 80200dc:	e02c      	b.n	8020138 <UART_SetConfig+0x348>
 80200de:	687b      	ldr	r3, [r7, #4]
 80200e0:	681b      	ldr	r3, [r3, #0]
 80200e2:	4a72      	ldr	r2, [pc, #456]	; (80202ac <UART_SetConfig+0x4bc>)
 80200e4:	4293      	cmp	r3, r2
 80200e6:	d125      	bne.n	8020134 <UART_SetConfig+0x344>
 80200e8:	4b71      	ldr	r3, [pc, #452]	; (80202b0 <UART_SetConfig+0x4c0>)
 80200ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80200ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80200f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80200f6:	d017      	beq.n	8020128 <UART_SetConfig+0x338>
 80200f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80200fc:	d817      	bhi.n	802012e <UART_SetConfig+0x33e>
 80200fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8020102:	d00b      	beq.n	802011c <UART_SetConfig+0x32c>
 8020104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8020108:	d811      	bhi.n	802012e <UART_SetConfig+0x33e>
 802010a:	2b00      	cmp	r3, #0
 802010c:	d003      	beq.n	8020116 <UART_SetConfig+0x326>
 802010e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8020112:	d006      	beq.n	8020122 <UART_SetConfig+0x332>
 8020114:	e00b      	b.n	802012e <UART_SetConfig+0x33e>
 8020116:	2300      	movs	r3, #0
 8020118:	77fb      	strb	r3, [r7, #31]
 802011a:	e00d      	b.n	8020138 <UART_SetConfig+0x348>
 802011c:	2302      	movs	r3, #2
 802011e:	77fb      	strb	r3, [r7, #31]
 8020120:	e00a      	b.n	8020138 <UART_SetConfig+0x348>
 8020122:	2304      	movs	r3, #4
 8020124:	77fb      	strb	r3, [r7, #31]
 8020126:	e007      	b.n	8020138 <UART_SetConfig+0x348>
 8020128:	2308      	movs	r3, #8
 802012a:	77fb      	strb	r3, [r7, #31]
 802012c:	e004      	b.n	8020138 <UART_SetConfig+0x348>
 802012e:	2310      	movs	r3, #16
 8020130:	77fb      	strb	r3, [r7, #31]
 8020132:	e001      	b.n	8020138 <UART_SetConfig+0x348>
 8020134:	2310      	movs	r3, #16
 8020136:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8020138:	687b      	ldr	r3, [r7, #4]
 802013a:	69db      	ldr	r3, [r3, #28]
 802013c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8020140:	d15b      	bne.n	80201fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8020142:	7ffb      	ldrb	r3, [r7, #31]
 8020144:	2b08      	cmp	r3, #8
 8020146:	d828      	bhi.n	802019a <UART_SetConfig+0x3aa>
 8020148:	a201      	add	r2, pc, #4	; (adr r2, 8020150 <UART_SetConfig+0x360>)
 802014a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802014e:	bf00      	nop
 8020150:	08020175 	.word	0x08020175
 8020154:	0802017d 	.word	0x0802017d
 8020158:	08020185 	.word	0x08020185
 802015c:	0802019b 	.word	0x0802019b
 8020160:	0802018b 	.word	0x0802018b
 8020164:	0802019b 	.word	0x0802019b
 8020168:	0802019b 	.word	0x0802019b
 802016c:	0802019b 	.word	0x0802019b
 8020170:	08020193 	.word	0x08020193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020174:	f7fd fc3e 	bl	801d9f4 <HAL_RCC_GetPCLK1Freq>
 8020178:	61b8      	str	r0, [r7, #24]
        break;
 802017a:	e013      	b.n	80201a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802017c:	f7fd fc4e 	bl	801da1c <HAL_RCC_GetPCLK2Freq>
 8020180:	61b8      	str	r0, [r7, #24]
        break;
 8020182:	e00f      	b.n	80201a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8020184:	4b4b      	ldr	r3, [pc, #300]	; (80202b4 <UART_SetConfig+0x4c4>)
 8020186:	61bb      	str	r3, [r7, #24]
        break;
 8020188:	e00c      	b.n	80201a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802018a:	f7fd fb61 	bl	801d850 <HAL_RCC_GetSysClockFreq>
 802018e:	61b8      	str	r0, [r7, #24]
        break;
 8020190:	e008      	b.n	80201a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020196:	61bb      	str	r3, [r7, #24]
        break;
 8020198:	e004      	b.n	80201a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 802019a:	2300      	movs	r3, #0
 802019c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 802019e:	2301      	movs	r3, #1
 80201a0:	77bb      	strb	r3, [r7, #30]
        break;
 80201a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80201a4:	69bb      	ldr	r3, [r7, #24]
 80201a6:	2b00      	cmp	r3, #0
 80201a8:	d074      	beq.n	8020294 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80201aa:	69bb      	ldr	r3, [r7, #24]
 80201ac:	005a      	lsls	r2, r3, #1
 80201ae:	687b      	ldr	r3, [r7, #4]
 80201b0:	685b      	ldr	r3, [r3, #4]
 80201b2:	085b      	lsrs	r3, r3, #1
 80201b4:	441a      	add	r2, r3
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	685b      	ldr	r3, [r3, #4]
 80201ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80201be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80201c0:	693b      	ldr	r3, [r7, #16]
 80201c2:	2b0f      	cmp	r3, #15
 80201c4:	d916      	bls.n	80201f4 <UART_SetConfig+0x404>
 80201c6:	693b      	ldr	r3, [r7, #16]
 80201c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80201cc:	d212      	bcs.n	80201f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80201ce:	693b      	ldr	r3, [r7, #16]
 80201d0:	b29b      	uxth	r3, r3
 80201d2:	f023 030f 	bic.w	r3, r3, #15
 80201d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80201d8:	693b      	ldr	r3, [r7, #16]
 80201da:	085b      	lsrs	r3, r3, #1
 80201dc:	b29b      	uxth	r3, r3
 80201de:	f003 0307 	and.w	r3, r3, #7
 80201e2:	b29a      	uxth	r2, r3
 80201e4:	89fb      	ldrh	r3, [r7, #14]
 80201e6:	4313      	orrs	r3, r2
 80201e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	681b      	ldr	r3, [r3, #0]
 80201ee:	89fa      	ldrh	r2, [r7, #14]
 80201f0:	60da      	str	r2, [r3, #12]
 80201f2:	e04f      	b.n	8020294 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80201f4:	2301      	movs	r3, #1
 80201f6:	77bb      	strb	r3, [r7, #30]
 80201f8:	e04c      	b.n	8020294 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80201fa:	7ffb      	ldrb	r3, [r7, #31]
 80201fc:	2b08      	cmp	r3, #8
 80201fe:	d828      	bhi.n	8020252 <UART_SetConfig+0x462>
 8020200:	a201      	add	r2, pc, #4	; (adr r2, 8020208 <UART_SetConfig+0x418>)
 8020202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020206:	bf00      	nop
 8020208:	0802022d 	.word	0x0802022d
 802020c:	08020235 	.word	0x08020235
 8020210:	0802023d 	.word	0x0802023d
 8020214:	08020253 	.word	0x08020253
 8020218:	08020243 	.word	0x08020243
 802021c:	08020253 	.word	0x08020253
 8020220:	08020253 	.word	0x08020253
 8020224:	08020253 	.word	0x08020253
 8020228:	0802024b 	.word	0x0802024b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802022c:	f7fd fbe2 	bl	801d9f4 <HAL_RCC_GetPCLK1Freq>
 8020230:	61b8      	str	r0, [r7, #24]
        break;
 8020232:	e013      	b.n	802025c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020234:	f7fd fbf2 	bl	801da1c <HAL_RCC_GetPCLK2Freq>
 8020238:	61b8      	str	r0, [r7, #24]
        break;
 802023a:	e00f      	b.n	802025c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 802023c:	4b1d      	ldr	r3, [pc, #116]	; (80202b4 <UART_SetConfig+0x4c4>)
 802023e:	61bb      	str	r3, [r7, #24]
        break;
 8020240:	e00c      	b.n	802025c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8020242:	f7fd fb05 	bl	801d850 <HAL_RCC_GetSysClockFreq>
 8020246:	61b8      	str	r0, [r7, #24]
        break;
 8020248:	e008      	b.n	802025c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802024a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802024e:	61bb      	str	r3, [r7, #24]
        break;
 8020250:	e004      	b.n	802025c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8020252:	2300      	movs	r3, #0
 8020254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8020256:	2301      	movs	r3, #1
 8020258:	77bb      	strb	r3, [r7, #30]
        break;
 802025a:	bf00      	nop
    }

    if (pclk != 0U)
 802025c:	69bb      	ldr	r3, [r7, #24]
 802025e:	2b00      	cmp	r3, #0
 8020260:	d018      	beq.n	8020294 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8020262:	687b      	ldr	r3, [r7, #4]
 8020264:	685b      	ldr	r3, [r3, #4]
 8020266:	085a      	lsrs	r2, r3, #1
 8020268:	69bb      	ldr	r3, [r7, #24]
 802026a:	441a      	add	r2, r3
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	685b      	ldr	r3, [r3, #4]
 8020270:	fbb2 f3f3 	udiv	r3, r2, r3
 8020274:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020276:	693b      	ldr	r3, [r7, #16]
 8020278:	2b0f      	cmp	r3, #15
 802027a:	d909      	bls.n	8020290 <UART_SetConfig+0x4a0>
 802027c:	693b      	ldr	r3, [r7, #16]
 802027e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020282:	d205      	bcs.n	8020290 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8020284:	693b      	ldr	r3, [r7, #16]
 8020286:	b29a      	uxth	r2, r3
 8020288:	687b      	ldr	r3, [r7, #4]
 802028a:	681b      	ldr	r3, [r3, #0]
 802028c:	60da      	str	r2, [r3, #12]
 802028e:	e001      	b.n	8020294 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8020290:	2301      	movs	r3, #1
 8020292:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	2200      	movs	r2, #0
 8020298:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	2200      	movs	r2, #0
 802029e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80202a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80202a2:	4618      	mov	r0, r3
 80202a4:	3720      	adds	r7, #32
 80202a6:	46bd      	mov	sp, r7
 80202a8:	bd80      	pop	{r7, pc}
 80202aa:	bf00      	nop
 80202ac:	40007c00 	.word	0x40007c00
 80202b0:	40023800 	.word	0x40023800
 80202b4:	00f42400 	.word	0x00f42400

080202b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80202b8:	b480      	push	{r7}
 80202ba:	b083      	sub	sp, #12
 80202bc:	af00      	add	r7, sp, #0
 80202be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80202c4:	f003 0301 	and.w	r3, r3, #1
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	d00a      	beq.n	80202e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	685b      	ldr	r3, [r3, #4]
 80202d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80202d6:	687b      	ldr	r3, [r7, #4]
 80202d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	430a      	orrs	r2, r1
 80202e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80202e2:	687b      	ldr	r3, [r7, #4]
 80202e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80202e6:	f003 0302 	and.w	r3, r3, #2
 80202ea:	2b00      	cmp	r3, #0
 80202ec:	d00a      	beq.n	8020304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80202ee:	687b      	ldr	r3, [r7, #4]
 80202f0:	681b      	ldr	r3, [r3, #0]
 80202f2:	685b      	ldr	r3, [r3, #4]
 80202f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	430a      	orrs	r2, r1
 8020302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020308:	f003 0304 	and.w	r3, r3, #4
 802030c:	2b00      	cmp	r3, #0
 802030e:	d00a      	beq.n	8020326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	681b      	ldr	r3, [r3, #0]
 8020314:	685b      	ldr	r3, [r3, #4]
 8020316:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802031e:	687b      	ldr	r3, [r7, #4]
 8020320:	681b      	ldr	r3, [r3, #0]
 8020322:	430a      	orrs	r2, r1
 8020324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802032a:	f003 0308 	and.w	r3, r3, #8
 802032e:	2b00      	cmp	r3, #0
 8020330:	d00a      	beq.n	8020348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8020332:	687b      	ldr	r3, [r7, #4]
 8020334:	681b      	ldr	r3, [r3, #0]
 8020336:	685b      	ldr	r3, [r3, #4]
 8020338:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8020340:	687b      	ldr	r3, [r7, #4]
 8020342:	681b      	ldr	r3, [r3, #0]
 8020344:	430a      	orrs	r2, r1
 8020346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802034c:	f003 0310 	and.w	r3, r3, #16
 8020350:	2b00      	cmp	r3, #0
 8020352:	d00a      	beq.n	802036a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	681b      	ldr	r3, [r3, #0]
 8020358:	689b      	ldr	r3, [r3, #8]
 802035a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802035e:	687b      	ldr	r3, [r7, #4]
 8020360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	430a      	orrs	r2, r1
 8020368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802036e:	f003 0320 	and.w	r3, r3, #32
 8020372:	2b00      	cmp	r3, #0
 8020374:	d00a      	beq.n	802038c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	689b      	ldr	r3, [r3, #8]
 802037c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	430a      	orrs	r2, r1
 802038a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802038c:	687b      	ldr	r3, [r7, #4]
 802038e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020394:	2b00      	cmp	r3, #0
 8020396:	d01a      	beq.n	80203ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	681b      	ldr	r3, [r3, #0]
 802039c:	685b      	ldr	r3, [r3, #4]
 802039e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80203a2:	687b      	ldr	r3, [r7, #4]
 80203a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	681b      	ldr	r3, [r3, #0]
 80203aa:	430a      	orrs	r2, r1
 80203ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80203b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80203b6:	d10a      	bne.n	80203ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80203b8:	687b      	ldr	r3, [r7, #4]
 80203ba:	681b      	ldr	r3, [r3, #0]
 80203bc:	685b      	ldr	r3, [r3, #4]
 80203be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80203c2:	687b      	ldr	r3, [r7, #4]
 80203c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	681b      	ldr	r3, [r3, #0]
 80203ca:	430a      	orrs	r2, r1
 80203cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80203ce:	687b      	ldr	r3, [r7, #4]
 80203d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	d00a      	beq.n	80203f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	685b      	ldr	r3, [r3, #4]
 80203e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	430a      	orrs	r2, r1
 80203ee:	605a      	str	r2, [r3, #4]
  }
}
 80203f0:	bf00      	nop
 80203f2:	370c      	adds	r7, #12
 80203f4:	46bd      	mov	sp, r7
 80203f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203fa:	4770      	bx	lr

080203fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80203fc:	b580      	push	{r7, lr}
 80203fe:	b086      	sub	sp, #24
 8020400:	af02      	add	r7, sp, #8
 8020402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	2200      	movs	r2, #0
 8020408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802040c:	f7f9 fb10 	bl	8019a30 <HAL_GetTick>
 8020410:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	681b      	ldr	r3, [r3, #0]
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	f003 0308 	and.w	r3, r3, #8
 802041c:	2b08      	cmp	r3, #8
 802041e:	d10e      	bne.n	802043e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8020424:	9300      	str	r3, [sp, #0]
 8020426:	68fb      	ldr	r3, [r7, #12]
 8020428:	2200      	movs	r2, #0
 802042a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802042e:	6878      	ldr	r0, [r7, #4]
 8020430:	f000 f831 	bl	8020496 <UART_WaitOnFlagUntilTimeout>
 8020434:	4603      	mov	r3, r0
 8020436:	2b00      	cmp	r3, #0
 8020438:	d001      	beq.n	802043e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 802043a:	2303      	movs	r3, #3
 802043c:	e027      	b.n	802048e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802043e:	687b      	ldr	r3, [r7, #4]
 8020440:	681b      	ldr	r3, [r3, #0]
 8020442:	681b      	ldr	r3, [r3, #0]
 8020444:	f003 0304 	and.w	r3, r3, #4
 8020448:	2b04      	cmp	r3, #4
 802044a:	d10e      	bne.n	802046a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802044c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8020450:	9300      	str	r3, [sp, #0]
 8020452:	68fb      	ldr	r3, [r7, #12]
 8020454:	2200      	movs	r2, #0
 8020456:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 802045a:	6878      	ldr	r0, [r7, #4]
 802045c:	f000 f81b 	bl	8020496 <UART_WaitOnFlagUntilTimeout>
 8020460:	4603      	mov	r3, r0
 8020462:	2b00      	cmp	r3, #0
 8020464:	d001      	beq.n	802046a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020466:	2303      	movs	r3, #3
 8020468:	e011      	b.n	802048e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	2220      	movs	r2, #32
 802046e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	2220      	movs	r2, #32
 8020474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	2200      	movs	r2, #0
 802047c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	2200      	movs	r2, #0
 8020482:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	2200      	movs	r2, #0
 8020488:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 802048c:	2300      	movs	r3, #0
}
 802048e:	4618      	mov	r0, r3
 8020490:	3710      	adds	r7, #16
 8020492:	46bd      	mov	sp, r7
 8020494:	bd80      	pop	{r7, pc}

08020496 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8020496:	b580      	push	{r7, lr}
 8020498:	b09c      	sub	sp, #112	; 0x70
 802049a:	af00      	add	r7, sp, #0
 802049c:	60f8      	str	r0, [r7, #12]
 802049e:	60b9      	str	r1, [r7, #8]
 80204a0:	603b      	str	r3, [r7, #0]
 80204a2:	4613      	mov	r3, r2
 80204a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80204a6:	e0a7      	b.n	80205f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80204a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80204aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80204ae:	f000 80a3 	beq.w	80205f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80204b2:	f7f9 fabd 	bl	8019a30 <HAL_GetTick>
 80204b6:	4602      	mov	r2, r0
 80204b8:	683b      	ldr	r3, [r7, #0]
 80204ba:	1ad3      	subs	r3, r2, r3
 80204bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80204be:	429a      	cmp	r2, r3
 80204c0:	d302      	bcc.n	80204c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80204c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	d13f      	bne.n	8020548 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80204c8:	68fb      	ldr	r3, [r7, #12]
 80204ca:	681b      	ldr	r3, [r3, #0]
 80204cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80204ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80204d0:	e853 3f00 	ldrex	r3, [r3]
 80204d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80204d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80204d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80204dc:	667b      	str	r3, [r7, #100]	; 0x64
 80204de:	68fb      	ldr	r3, [r7, #12]
 80204e0:	681b      	ldr	r3, [r3, #0]
 80204e2:	461a      	mov	r2, r3
 80204e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80204e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80204e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80204ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80204ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80204ee:	e841 2300 	strex	r3, r2, [r1]
 80204f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80204f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d1e6      	bne.n	80204c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80204fa:	68fb      	ldr	r3, [r7, #12]
 80204fc:	681b      	ldr	r3, [r3, #0]
 80204fe:	3308      	adds	r3, #8
 8020500:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020504:	e853 3f00 	ldrex	r3, [r3]
 8020508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802050a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802050c:	f023 0301 	bic.w	r3, r3, #1
 8020510:	663b      	str	r3, [r7, #96]	; 0x60
 8020512:	68fb      	ldr	r3, [r7, #12]
 8020514:	681b      	ldr	r3, [r3, #0]
 8020516:	3308      	adds	r3, #8
 8020518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802051a:	64ba      	str	r2, [r7, #72]	; 0x48
 802051c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802051e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8020520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020522:	e841 2300 	strex	r3, r2, [r1]
 8020526:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8020528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802052a:	2b00      	cmp	r3, #0
 802052c:	d1e5      	bne.n	80204fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 802052e:	68fb      	ldr	r3, [r7, #12]
 8020530:	2220      	movs	r2, #32
 8020532:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8020534:	68fb      	ldr	r3, [r7, #12]
 8020536:	2220      	movs	r2, #32
 8020538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 802053c:	68fb      	ldr	r3, [r7, #12]
 802053e:	2200      	movs	r2, #0
 8020540:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8020544:	2303      	movs	r3, #3
 8020546:	e068      	b.n	802061a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8020548:	68fb      	ldr	r3, [r7, #12]
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	681b      	ldr	r3, [r3, #0]
 802054e:	f003 0304 	and.w	r3, r3, #4
 8020552:	2b00      	cmp	r3, #0
 8020554:	d050      	beq.n	80205f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8020556:	68fb      	ldr	r3, [r7, #12]
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	69db      	ldr	r3, [r3, #28]
 802055c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020564:	d148      	bne.n	80205f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020566:	68fb      	ldr	r3, [r7, #12]
 8020568:	681b      	ldr	r3, [r3, #0]
 802056a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802056e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8020570:	68fb      	ldr	r3, [r7, #12]
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020578:	e853 3f00 	ldrex	r3, [r3]
 802057c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8020584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8020586:	68fb      	ldr	r3, [r7, #12]
 8020588:	681b      	ldr	r3, [r3, #0]
 802058a:	461a      	mov	r2, r3
 802058c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802058e:	637b      	str	r3, [r7, #52]	; 0x34
 8020590:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020596:	e841 2300 	strex	r3, r2, [r1]
 802059a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802059c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802059e:	2b00      	cmp	r3, #0
 80205a0:	d1e6      	bne.n	8020570 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80205a2:	68fb      	ldr	r3, [r7, #12]
 80205a4:	681b      	ldr	r3, [r3, #0]
 80205a6:	3308      	adds	r3, #8
 80205a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80205aa:	697b      	ldr	r3, [r7, #20]
 80205ac:	e853 3f00 	ldrex	r3, [r3]
 80205b0:	613b      	str	r3, [r7, #16]
   return(result);
 80205b2:	693b      	ldr	r3, [r7, #16]
 80205b4:	f023 0301 	bic.w	r3, r3, #1
 80205b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80205ba:	68fb      	ldr	r3, [r7, #12]
 80205bc:	681b      	ldr	r3, [r3, #0]
 80205be:	3308      	adds	r3, #8
 80205c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80205c2:	623a      	str	r2, [r7, #32]
 80205c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80205c6:	69f9      	ldr	r1, [r7, #28]
 80205c8:	6a3a      	ldr	r2, [r7, #32]
 80205ca:	e841 2300 	strex	r3, r2, [r1]
 80205ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80205d0:	69bb      	ldr	r3, [r7, #24]
 80205d2:	2b00      	cmp	r3, #0
 80205d4:	d1e5      	bne.n	80205a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80205d6:	68fb      	ldr	r3, [r7, #12]
 80205d8:	2220      	movs	r2, #32
 80205da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80205dc:	68fb      	ldr	r3, [r7, #12]
 80205de:	2220      	movs	r2, #32
 80205e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80205e4:	68fb      	ldr	r3, [r7, #12]
 80205e6:	2220      	movs	r2, #32
 80205e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80205ec:	68fb      	ldr	r3, [r7, #12]
 80205ee:	2200      	movs	r2, #0
 80205f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80205f4:	2303      	movs	r3, #3
 80205f6:	e010      	b.n	802061a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80205f8:	68fb      	ldr	r3, [r7, #12]
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	69da      	ldr	r2, [r3, #28]
 80205fe:	68bb      	ldr	r3, [r7, #8]
 8020600:	4013      	ands	r3, r2
 8020602:	68ba      	ldr	r2, [r7, #8]
 8020604:	429a      	cmp	r2, r3
 8020606:	bf0c      	ite	eq
 8020608:	2301      	moveq	r3, #1
 802060a:	2300      	movne	r3, #0
 802060c:	b2db      	uxtb	r3, r3
 802060e:	461a      	mov	r2, r3
 8020610:	79fb      	ldrb	r3, [r7, #7]
 8020612:	429a      	cmp	r2, r3
 8020614:	f43f af48 	beq.w	80204a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020618:	2300      	movs	r3, #0
}
 802061a:	4618      	mov	r0, r3
 802061c:	3770      	adds	r7, #112	; 0x70
 802061e:	46bd      	mov	sp, r7
 8020620:	bd80      	pop	{r7, pc}
	...

08020624 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020624:	b480      	push	{r7}
 8020626:	b097      	sub	sp, #92	; 0x5c
 8020628:	af00      	add	r7, sp, #0
 802062a:	60f8      	str	r0, [r7, #12]
 802062c:	60b9      	str	r1, [r7, #8]
 802062e:	4613      	mov	r3, r2
 8020630:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8020632:	68fb      	ldr	r3, [r7, #12]
 8020634:	68ba      	ldr	r2, [r7, #8]
 8020636:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8020638:	68fb      	ldr	r3, [r7, #12]
 802063a:	88fa      	ldrh	r2, [r7, #6]
 802063c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8020640:	68fb      	ldr	r3, [r7, #12]
 8020642:	88fa      	ldrh	r2, [r7, #6]
 8020644:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8020648:	68fb      	ldr	r3, [r7, #12]
 802064a:	2200      	movs	r2, #0
 802064c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	689b      	ldr	r3, [r3, #8]
 8020652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020656:	d10e      	bne.n	8020676 <UART_Start_Receive_IT+0x52>
 8020658:	68fb      	ldr	r3, [r7, #12]
 802065a:	691b      	ldr	r3, [r3, #16]
 802065c:	2b00      	cmp	r3, #0
 802065e:	d105      	bne.n	802066c <UART_Start_Receive_IT+0x48>
 8020660:	68fb      	ldr	r3, [r7, #12]
 8020662:	f240 12ff 	movw	r2, #511	; 0x1ff
 8020666:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 802066a:	e02d      	b.n	80206c8 <UART_Start_Receive_IT+0xa4>
 802066c:	68fb      	ldr	r3, [r7, #12]
 802066e:	22ff      	movs	r2, #255	; 0xff
 8020670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8020674:	e028      	b.n	80206c8 <UART_Start_Receive_IT+0xa4>
 8020676:	68fb      	ldr	r3, [r7, #12]
 8020678:	689b      	ldr	r3, [r3, #8]
 802067a:	2b00      	cmp	r3, #0
 802067c:	d10d      	bne.n	802069a <UART_Start_Receive_IT+0x76>
 802067e:	68fb      	ldr	r3, [r7, #12]
 8020680:	691b      	ldr	r3, [r3, #16]
 8020682:	2b00      	cmp	r3, #0
 8020684:	d104      	bne.n	8020690 <UART_Start_Receive_IT+0x6c>
 8020686:	68fb      	ldr	r3, [r7, #12]
 8020688:	22ff      	movs	r2, #255	; 0xff
 802068a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 802068e:	e01b      	b.n	80206c8 <UART_Start_Receive_IT+0xa4>
 8020690:	68fb      	ldr	r3, [r7, #12]
 8020692:	227f      	movs	r2, #127	; 0x7f
 8020694:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8020698:	e016      	b.n	80206c8 <UART_Start_Receive_IT+0xa4>
 802069a:	68fb      	ldr	r3, [r7, #12]
 802069c:	689b      	ldr	r3, [r3, #8]
 802069e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80206a2:	d10d      	bne.n	80206c0 <UART_Start_Receive_IT+0x9c>
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	691b      	ldr	r3, [r3, #16]
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d104      	bne.n	80206b6 <UART_Start_Receive_IT+0x92>
 80206ac:	68fb      	ldr	r3, [r7, #12]
 80206ae:	227f      	movs	r2, #127	; 0x7f
 80206b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80206b4:	e008      	b.n	80206c8 <UART_Start_Receive_IT+0xa4>
 80206b6:	68fb      	ldr	r3, [r7, #12]
 80206b8:	223f      	movs	r2, #63	; 0x3f
 80206ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80206be:	e003      	b.n	80206c8 <UART_Start_Receive_IT+0xa4>
 80206c0:	68fb      	ldr	r3, [r7, #12]
 80206c2:	2200      	movs	r2, #0
 80206c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80206c8:	68fb      	ldr	r3, [r7, #12]
 80206ca:	2200      	movs	r2, #0
 80206cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80206d0:	68fb      	ldr	r3, [r7, #12]
 80206d2:	2222      	movs	r2, #34	; 0x22
 80206d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80206d8:	68fb      	ldr	r3, [r7, #12]
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	3308      	adds	r3, #8
 80206de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80206e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80206e2:	e853 3f00 	ldrex	r3, [r3]
 80206e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80206e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80206ea:	f043 0301 	orr.w	r3, r3, #1
 80206ee:	657b      	str	r3, [r7, #84]	; 0x54
 80206f0:	68fb      	ldr	r3, [r7, #12]
 80206f2:	681b      	ldr	r3, [r3, #0]
 80206f4:	3308      	adds	r3, #8
 80206f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80206f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80206fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80206fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80206fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020700:	e841 2300 	strex	r3, r2, [r1]
 8020704:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8020706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020708:	2b00      	cmp	r3, #0
 802070a:	d1e5      	bne.n	80206d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802070c:	68fb      	ldr	r3, [r7, #12]
 802070e:	689b      	ldr	r3, [r3, #8]
 8020710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020714:	d107      	bne.n	8020726 <UART_Start_Receive_IT+0x102>
 8020716:	68fb      	ldr	r3, [r7, #12]
 8020718:	691b      	ldr	r3, [r3, #16]
 802071a:	2b00      	cmp	r3, #0
 802071c:	d103      	bne.n	8020726 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	4a21      	ldr	r2, [pc, #132]	; (80207a8 <UART_Start_Receive_IT+0x184>)
 8020722:	669a      	str	r2, [r3, #104]	; 0x68
 8020724:	e002      	b.n	802072c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8020726:	68fb      	ldr	r3, [r7, #12]
 8020728:	4a20      	ldr	r2, [pc, #128]	; (80207ac <UART_Start_Receive_IT+0x188>)
 802072a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 802072c:	68fb      	ldr	r3, [r7, #12]
 802072e:	691b      	ldr	r3, [r3, #16]
 8020730:	2b00      	cmp	r3, #0
 8020732:	d019      	beq.n	8020768 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8020734:	68fb      	ldr	r3, [r7, #12]
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802073a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802073c:	e853 3f00 	ldrex	r3, [r3]
 8020740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020744:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8020748:	64fb      	str	r3, [r7, #76]	; 0x4c
 802074a:	68fb      	ldr	r3, [r7, #12]
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	461a      	mov	r2, r3
 8020750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020752:	637b      	str	r3, [r7, #52]	; 0x34
 8020754:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802075a:	e841 2300 	strex	r3, r2, [r1]
 802075e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8020760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020762:	2b00      	cmp	r3, #0
 8020764:	d1e6      	bne.n	8020734 <UART_Start_Receive_IT+0x110>
 8020766:	e018      	b.n	802079a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8020768:	68fb      	ldr	r3, [r7, #12]
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802076e:	697b      	ldr	r3, [r7, #20]
 8020770:	e853 3f00 	ldrex	r3, [r3]
 8020774:	613b      	str	r3, [r7, #16]
   return(result);
 8020776:	693b      	ldr	r3, [r7, #16]
 8020778:	f043 0320 	orr.w	r3, r3, #32
 802077c:	653b      	str	r3, [r7, #80]	; 0x50
 802077e:	68fb      	ldr	r3, [r7, #12]
 8020780:	681b      	ldr	r3, [r3, #0]
 8020782:	461a      	mov	r2, r3
 8020784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020786:	623b      	str	r3, [r7, #32]
 8020788:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802078a:	69f9      	ldr	r1, [r7, #28]
 802078c:	6a3a      	ldr	r2, [r7, #32]
 802078e:	e841 2300 	strex	r3, r2, [r1]
 8020792:	61bb      	str	r3, [r7, #24]
   return(result);
 8020794:	69bb      	ldr	r3, [r7, #24]
 8020796:	2b00      	cmp	r3, #0
 8020798:	d1e6      	bne.n	8020768 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 802079a:	2300      	movs	r3, #0
}
 802079c:	4618      	mov	r0, r3
 802079e:	375c      	adds	r7, #92	; 0x5c
 80207a0:	46bd      	mov	sp, r7
 80207a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207a6:	4770      	bx	lr
 80207a8:	08020a6f 	.word	0x08020a6f
 80207ac:	08020901 	.word	0x08020901

080207b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80207b0:	b480      	push	{r7}
 80207b2:	b095      	sub	sp, #84	; 0x54
 80207b4:	af00      	add	r7, sp, #0
 80207b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80207b8:	687b      	ldr	r3, [r7, #4]
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80207be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80207c0:	e853 3f00 	ldrex	r3, [r3]
 80207c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80207c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80207c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80207cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80207ce:	687b      	ldr	r3, [r7, #4]
 80207d0:	681b      	ldr	r3, [r3, #0]
 80207d2:	461a      	mov	r2, r3
 80207d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80207d6:	643b      	str	r3, [r7, #64]	; 0x40
 80207d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80207da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80207dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80207de:	e841 2300 	strex	r3, r2, [r1]
 80207e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80207e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d1e6      	bne.n	80207b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	681b      	ldr	r3, [r3, #0]
 80207ee:	3308      	adds	r3, #8
 80207f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80207f2:	6a3b      	ldr	r3, [r7, #32]
 80207f4:	e853 3f00 	ldrex	r3, [r3]
 80207f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80207fa:	69fb      	ldr	r3, [r7, #28]
 80207fc:	f023 0301 	bic.w	r3, r3, #1
 8020800:	64bb      	str	r3, [r7, #72]	; 0x48
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	681b      	ldr	r3, [r3, #0]
 8020806:	3308      	adds	r3, #8
 8020808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802080a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802080c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802080e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020812:	e841 2300 	strex	r3, r2, [r1]
 8020816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802081a:	2b00      	cmp	r3, #0
 802081c:	d1e5      	bne.n	80207ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020822:	2b01      	cmp	r3, #1
 8020824:	d118      	bne.n	8020858 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	681b      	ldr	r3, [r3, #0]
 802082a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802082c:	68fb      	ldr	r3, [r7, #12]
 802082e:	e853 3f00 	ldrex	r3, [r3]
 8020832:	60bb      	str	r3, [r7, #8]
   return(result);
 8020834:	68bb      	ldr	r3, [r7, #8]
 8020836:	f023 0310 	bic.w	r3, r3, #16
 802083a:	647b      	str	r3, [r7, #68]	; 0x44
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	681b      	ldr	r3, [r3, #0]
 8020840:	461a      	mov	r2, r3
 8020842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020844:	61bb      	str	r3, [r7, #24]
 8020846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020848:	6979      	ldr	r1, [r7, #20]
 802084a:	69ba      	ldr	r2, [r7, #24]
 802084c:	e841 2300 	strex	r3, r2, [r1]
 8020850:	613b      	str	r3, [r7, #16]
   return(result);
 8020852:	693b      	ldr	r3, [r7, #16]
 8020854:	2b00      	cmp	r3, #0
 8020856:	d1e6      	bne.n	8020826 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8020858:	687b      	ldr	r3, [r7, #4]
 802085a:	2220      	movs	r2, #32
 802085c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	2200      	movs	r2, #0
 8020864:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8020866:	687b      	ldr	r3, [r7, #4]
 8020868:	2200      	movs	r2, #0
 802086a:	669a      	str	r2, [r3, #104]	; 0x68
}
 802086c:	bf00      	nop
 802086e:	3754      	adds	r7, #84	; 0x54
 8020870:	46bd      	mov	sp, r7
 8020872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020876:	4770      	bx	lr

08020878 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8020878:	b580      	push	{r7, lr}
 802087a:	b084      	sub	sp, #16
 802087c:	af00      	add	r7, sp, #0
 802087e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8020886:	68fb      	ldr	r3, [r7, #12]
 8020888:	2200      	movs	r2, #0
 802088a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 802088e:	68fb      	ldr	r3, [r7, #12]
 8020890:	2200      	movs	r2, #0
 8020892:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8020896:	68fb      	ldr	r3, [r7, #12]
 8020898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 802089c:	68f8      	ldr	r0, [r7, #12]
 802089e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80208a0:	bf00      	nop
 80208a2:	3710      	adds	r7, #16
 80208a4:	46bd      	mov	sp, r7
 80208a6:	bd80      	pop	{r7, pc}

080208a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80208a8:	b580      	push	{r7, lr}
 80208aa:	b088      	sub	sp, #32
 80208ac:	af00      	add	r7, sp, #0
 80208ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80208b0:	687b      	ldr	r3, [r7, #4]
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80208b6:	68fb      	ldr	r3, [r7, #12]
 80208b8:	e853 3f00 	ldrex	r3, [r3]
 80208bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80208be:	68bb      	ldr	r3, [r7, #8]
 80208c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80208c4:	61fb      	str	r3, [r7, #28]
 80208c6:	687b      	ldr	r3, [r7, #4]
 80208c8:	681b      	ldr	r3, [r3, #0]
 80208ca:	461a      	mov	r2, r3
 80208cc:	69fb      	ldr	r3, [r7, #28]
 80208ce:	61bb      	str	r3, [r7, #24]
 80208d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80208d2:	6979      	ldr	r1, [r7, #20]
 80208d4:	69ba      	ldr	r2, [r7, #24]
 80208d6:	e841 2300 	strex	r3, r2, [r1]
 80208da:	613b      	str	r3, [r7, #16]
   return(result);
 80208dc:	693b      	ldr	r3, [r7, #16]
 80208de:	2b00      	cmp	r3, #0
 80208e0:	d1e6      	bne.n	80208b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80208e2:	687b      	ldr	r3, [r7, #4]
 80208e4:	2220      	movs	r2, #32
 80208e6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	2200      	movs	r2, #0
 80208ec:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80208f4:	6878      	ldr	r0, [r7, #4]
 80208f6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80208f8:	bf00      	nop
 80208fa:	3720      	adds	r7, #32
 80208fc:	46bd      	mov	sp, r7
 80208fe:	bd80      	pop	{r7, pc}

08020900 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8020900:	b580      	push	{r7, lr}
 8020902:	b096      	sub	sp, #88	; 0x58
 8020904:	af00      	add	r7, sp, #0
 8020906:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 802090e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8020912:	687b      	ldr	r3, [r7, #4]
 8020914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020918:	2b22      	cmp	r3, #34	; 0x22
 802091a:	f040 809c 	bne.w	8020a56 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020924:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8020928:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 802092c:	b2d9      	uxtb	r1, r3
 802092e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8020932:	b2da      	uxtb	r2, r3
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020938:	400a      	ands	r2, r1
 802093a:	b2d2      	uxtb	r2, r2
 802093c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020942:	1c5a      	adds	r2, r3, #1
 8020944:	687b      	ldr	r3, [r7, #4]
 8020946:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 802094e:	b29b      	uxth	r3, r3
 8020950:	3b01      	subs	r3, #1
 8020952:	b29a      	uxth	r2, r3
 8020954:	687b      	ldr	r3, [r7, #4]
 8020956:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020960:	b29b      	uxth	r3, r3
 8020962:	2b00      	cmp	r3, #0
 8020964:	d17f      	bne.n	8020a66 <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020966:	687b      	ldr	r3, [r7, #4]
 8020968:	681b      	ldr	r3, [r3, #0]
 802096a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802096c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802096e:	e853 3f00 	ldrex	r3, [r3]
 8020972:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8020974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802097a:	653b      	str	r3, [r7, #80]	; 0x50
 802097c:	687b      	ldr	r3, [r7, #4]
 802097e:	681b      	ldr	r3, [r3, #0]
 8020980:	461a      	mov	r2, r3
 8020982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020984:	647b      	str	r3, [r7, #68]	; 0x44
 8020986:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020988:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802098a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802098c:	e841 2300 	strex	r3, r2, [r1]
 8020990:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8020992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020994:	2b00      	cmp	r3, #0
 8020996:	d1e6      	bne.n	8020966 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	681b      	ldr	r3, [r3, #0]
 802099c:	3308      	adds	r3, #8
 802099e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80209a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80209a2:	e853 3f00 	ldrex	r3, [r3]
 80209a6:	623b      	str	r3, [r7, #32]
   return(result);
 80209a8:	6a3b      	ldr	r3, [r7, #32]
 80209aa:	f023 0301 	bic.w	r3, r3, #1
 80209ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	681b      	ldr	r3, [r3, #0]
 80209b4:	3308      	adds	r3, #8
 80209b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80209b8:	633a      	str	r2, [r7, #48]	; 0x30
 80209ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80209bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80209be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80209c0:	e841 2300 	strex	r3, r2, [r1]
 80209c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80209c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209c8:	2b00      	cmp	r3, #0
 80209ca:	d1e5      	bne.n	8020998 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80209cc:	687b      	ldr	r3, [r7, #4]
 80209ce:	2220      	movs	r2, #32
 80209d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	2200      	movs	r2, #0
 80209d8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	2200      	movs	r2, #0
 80209de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80209e4:	2b01      	cmp	r3, #1
 80209e6:	d130      	bne.n	8020a4a <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80209e8:	687b      	ldr	r3, [r7, #4]
 80209ea:	2200      	movs	r2, #0
 80209ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	681b      	ldr	r3, [r3, #0]
 80209f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80209f4:	693b      	ldr	r3, [r7, #16]
 80209f6:	e853 3f00 	ldrex	r3, [r3]
 80209fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80209fc:	68fb      	ldr	r3, [r7, #12]
 80209fe:	f023 0310 	bic.w	r3, r3, #16
 8020a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	681b      	ldr	r3, [r3, #0]
 8020a08:	461a      	mov	r2, r3
 8020a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020a0c:	61fb      	str	r3, [r7, #28]
 8020a0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020a10:	69b9      	ldr	r1, [r7, #24]
 8020a12:	69fa      	ldr	r2, [r7, #28]
 8020a14:	e841 2300 	strex	r3, r2, [r1]
 8020a18:	617b      	str	r3, [r7, #20]
   return(result);
 8020a1a:	697b      	ldr	r3, [r7, #20]
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	d1e6      	bne.n	80209ee <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	69db      	ldr	r3, [r3, #28]
 8020a26:	f003 0310 	and.w	r3, r3, #16
 8020a2a:	2b10      	cmp	r3, #16
 8020a2c:	d103      	bne.n	8020a36 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	681b      	ldr	r3, [r3, #0]
 8020a32:	2210      	movs	r2, #16
 8020a34:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8020a36:	687b      	ldr	r3, [r7, #4]
 8020a38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8020a3c:	687a      	ldr	r2, [r7, #4]
 8020a3e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8020a42:	4611      	mov	r1, r2
 8020a44:	6878      	ldr	r0, [r7, #4]
 8020a46:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8020a48:	e00d      	b.n	8020a66 <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8020a50:	6878      	ldr	r0, [r7, #4]
 8020a52:	4798      	blx	r3
}
 8020a54:	e007      	b.n	8020a66 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	681b      	ldr	r3, [r3, #0]
 8020a5a:	699a      	ldr	r2, [r3, #24]
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	f042 0208 	orr.w	r2, r2, #8
 8020a64:	619a      	str	r2, [r3, #24]
}
 8020a66:	bf00      	nop
 8020a68:	3758      	adds	r7, #88	; 0x58
 8020a6a:	46bd      	mov	sp, r7
 8020a6c:	bd80      	pop	{r7, pc}

08020a6e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8020a6e:	b580      	push	{r7, lr}
 8020a70:	b096      	sub	sp, #88	; 0x58
 8020a72:	af00      	add	r7, sp, #0
 8020a74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8020a76:	687b      	ldr	r3, [r7, #4]
 8020a78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8020a7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020a86:	2b22      	cmp	r3, #34	; 0x22
 8020a88:	f040 809c 	bne.w	8020bc4 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020a9a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8020a9c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8020aa0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8020aa4:	4013      	ands	r3, r2
 8020aa6:	b29a      	uxth	r2, r3
 8020aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020aaa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8020aac:	687b      	ldr	r3, [r7, #4]
 8020aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020ab0:	1c9a      	adds	r2, r3, #2
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8020ab6:	687b      	ldr	r3, [r7, #4]
 8020ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020abc:	b29b      	uxth	r3, r3
 8020abe:	3b01      	subs	r3, #1
 8020ac0:	b29a      	uxth	r2, r3
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020ace:	b29b      	uxth	r3, r3
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d17f      	bne.n	8020bd4 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	681b      	ldr	r3, [r3, #0]
 8020ad8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020adc:	e853 3f00 	ldrex	r3, [r3]
 8020ae0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8020ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8020ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	681b      	ldr	r3, [r3, #0]
 8020aee:	461a      	mov	r2, r3
 8020af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020af2:	643b      	str	r3, [r7, #64]	; 0x40
 8020af4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020af6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8020af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020afa:	e841 2300 	strex	r3, r2, [r1]
 8020afe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8020b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	d1e6      	bne.n	8020ad4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	681b      	ldr	r3, [r3, #0]
 8020b0a:	3308      	adds	r3, #8
 8020b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020b0e:	6a3b      	ldr	r3, [r7, #32]
 8020b10:	e853 3f00 	ldrex	r3, [r3]
 8020b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8020b16:	69fb      	ldr	r3, [r7, #28]
 8020b18:	f023 0301 	bic.w	r3, r3, #1
 8020b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	3308      	adds	r3, #8
 8020b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020b28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020b2e:	e841 2300 	strex	r3, r2, [r1]
 8020b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b36:	2b00      	cmp	r3, #0
 8020b38:	d1e5      	bne.n	8020b06 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8020b3a:	687b      	ldr	r3, [r7, #4]
 8020b3c:	2220      	movs	r2, #32
 8020b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8020b42:	687b      	ldr	r3, [r7, #4]
 8020b44:	2200      	movs	r2, #0
 8020b46:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	2200      	movs	r2, #0
 8020b4c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020b52:	2b01      	cmp	r3, #1
 8020b54:	d130      	bne.n	8020bb8 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020b56:	687b      	ldr	r3, [r7, #4]
 8020b58:	2200      	movs	r2, #0
 8020b5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	681b      	ldr	r3, [r3, #0]
 8020b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020b62:	68fb      	ldr	r3, [r7, #12]
 8020b64:	e853 3f00 	ldrex	r3, [r3]
 8020b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8020b6a:	68bb      	ldr	r3, [r7, #8]
 8020b6c:	f023 0310 	bic.w	r3, r3, #16
 8020b70:	647b      	str	r3, [r7, #68]	; 0x44
 8020b72:	687b      	ldr	r3, [r7, #4]
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	461a      	mov	r2, r3
 8020b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020b7a:	61bb      	str	r3, [r7, #24]
 8020b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020b7e:	6979      	ldr	r1, [r7, #20]
 8020b80:	69ba      	ldr	r2, [r7, #24]
 8020b82:	e841 2300 	strex	r3, r2, [r1]
 8020b86:	613b      	str	r3, [r7, #16]
   return(result);
 8020b88:	693b      	ldr	r3, [r7, #16]
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	d1e6      	bne.n	8020b5c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	681b      	ldr	r3, [r3, #0]
 8020b92:	69db      	ldr	r3, [r3, #28]
 8020b94:	f003 0310 	and.w	r3, r3, #16
 8020b98:	2b10      	cmp	r3, #16
 8020b9a:	d103      	bne.n	8020ba4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	681b      	ldr	r3, [r3, #0]
 8020ba0:	2210      	movs	r2, #16
 8020ba2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8020baa:	687a      	ldr	r2, [r7, #4]
 8020bac:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8020bb0:	4611      	mov	r1, r2
 8020bb2:	6878      	ldr	r0, [r7, #4]
 8020bb4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8020bb6:	e00d      	b.n	8020bd4 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8020bbe:	6878      	ldr	r0, [r7, #4]
 8020bc0:	4798      	blx	r3
}
 8020bc2:	e007      	b.n	8020bd4 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8020bc4:	687b      	ldr	r3, [r7, #4]
 8020bc6:	681b      	ldr	r3, [r3, #0]
 8020bc8:	699a      	ldr	r2, [r3, #24]
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	f042 0208 	orr.w	r2, r2, #8
 8020bd2:	619a      	str	r2, [r3, #24]
}
 8020bd4:	bf00      	nop
 8020bd6:	3758      	adds	r7, #88	; 0x58
 8020bd8:	46bd      	mov	sp, r7
 8020bda:	bd80      	pop	{r7, pc}

08020bdc <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020bdc:	b580      	push	{r7, lr}
 8020bde:	b08c      	sub	sp, #48	; 0x30
 8020be0:	af00      	add	r7, sp, #0
 8020be2:	60f8      	str	r0, [r7, #12]
 8020be4:	60b9      	str	r1, [r7, #8]
 8020be6:	4613      	mov	r3, r2
 8020be8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8020bea:	68fb      	ldr	r3, [r7, #12]
 8020bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020bf0:	2b20      	cmp	r3, #32
 8020bf2:	d142      	bne.n	8020c7a <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8020bf4:	68bb      	ldr	r3, [r7, #8]
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	d002      	beq.n	8020c00 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8020bfa:	88fb      	ldrh	r3, [r7, #6]
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d101      	bne.n	8020c04 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8020c00:	2301      	movs	r3, #1
 8020c02:	e03b      	b.n	8020c7c <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8020c04:	68fb      	ldr	r3, [r7, #12]
 8020c06:	2201      	movs	r2, #1
 8020c08:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020c0a:	68fb      	ldr	r3, [r7, #12]
 8020c0c:	2200      	movs	r2, #0
 8020c0e:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8020c10:	88fb      	ldrh	r3, [r7, #6]
 8020c12:	461a      	mov	r2, r3
 8020c14:	68b9      	ldr	r1, [r7, #8]
 8020c16:	68f8      	ldr	r0, [r7, #12]
 8020c18:	f7ff fd04 	bl	8020624 <UART_Start_Receive_IT>
 8020c1c:	4603      	mov	r3, r0
 8020c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8020c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020c26:	2b00      	cmp	r3, #0
 8020c28:	d124      	bne.n	8020c74 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8020c2a:	68fb      	ldr	r3, [r7, #12]
 8020c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8020c2e:	2b01      	cmp	r3, #1
 8020c30:	d11d      	bne.n	8020c6e <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020c32:	68fb      	ldr	r3, [r7, #12]
 8020c34:	681b      	ldr	r3, [r3, #0]
 8020c36:	2210      	movs	r2, #16
 8020c38:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8020c3a:	68fb      	ldr	r3, [r7, #12]
 8020c3c:	681b      	ldr	r3, [r3, #0]
 8020c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020c40:	69bb      	ldr	r3, [r7, #24]
 8020c42:	e853 3f00 	ldrex	r3, [r3]
 8020c46:	617b      	str	r3, [r7, #20]
   return(result);
 8020c48:	697b      	ldr	r3, [r7, #20]
 8020c4a:	f043 0310 	orr.w	r3, r3, #16
 8020c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8020c50:	68fb      	ldr	r3, [r7, #12]
 8020c52:	681b      	ldr	r3, [r3, #0]
 8020c54:	461a      	mov	r2, r3
 8020c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c58:	627b      	str	r3, [r7, #36]	; 0x24
 8020c5a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020c5c:	6a39      	ldr	r1, [r7, #32]
 8020c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020c60:	e841 2300 	strex	r3, r2, [r1]
 8020c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8020c66:	69fb      	ldr	r3, [r7, #28]
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	d1e6      	bne.n	8020c3a <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8020c6c:	e002      	b.n	8020c74 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8020c6e:	2301      	movs	r3, #1
 8020c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8020c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8020c78:	e000      	b.n	8020c7c <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8020c7a:	2302      	movs	r3, #2
  }
}
 8020c7c:	4618      	mov	r0, r3
 8020c7e:	3730      	adds	r7, #48	; 0x30
 8020c80:	46bd      	mov	sp, r7
 8020c82:	bd80      	pop	{r7, pc}

08020c84 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8020c84:	b580      	push	{r7, lr}
 8020c86:	b084      	sub	sp, #16
 8020c88:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8020c8a:	4b2f      	ldr	r3, [pc, #188]	; (8020d48 <MX_LWIP_Init+0xc4>)
 8020c8c:	22c0      	movs	r2, #192	; 0xc0
 8020c8e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8020c90:	4b2d      	ldr	r3, [pc, #180]	; (8020d48 <MX_LWIP_Init+0xc4>)
 8020c92:	22a8      	movs	r2, #168	; 0xa8
 8020c94:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 8020c96:	4b2c      	ldr	r3, [pc, #176]	; (8020d48 <MX_LWIP_Init+0xc4>)
 8020c98:	220c      	movs	r2, #12
 8020c9a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8020c9c:	4b2a      	ldr	r3, [pc, #168]	; (8020d48 <MX_LWIP_Init+0xc4>)
 8020c9e:	2264      	movs	r2, #100	; 0x64
 8020ca0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8020ca2:	4b2a      	ldr	r3, [pc, #168]	; (8020d4c <MX_LWIP_Init+0xc8>)
 8020ca4:	22ff      	movs	r2, #255	; 0xff
 8020ca6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8020ca8:	4b28      	ldr	r3, [pc, #160]	; (8020d4c <MX_LWIP_Init+0xc8>)
 8020caa:	22ff      	movs	r2, #255	; 0xff
 8020cac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8020cae:	4b27      	ldr	r3, [pc, #156]	; (8020d4c <MX_LWIP_Init+0xc8>)
 8020cb0:	22ff      	movs	r2, #255	; 0xff
 8020cb2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8020cb4:	4b25      	ldr	r3, [pc, #148]	; (8020d4c <MX_LWIP_Init+0xc8>)
 8020cb6:	2200      	movs	r2, #0
 8020cb8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8020cba:	4b25      	ldr	r3, [pc, #148]	; (8020d50 <MX_LWIP_Init+0xcc>)
 8020cbc:	22c0      	movs	r2, #192	; 0xc0
 8020cbe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8020cc0:	4b23      	ldr	r3, [pc, #140]	; (8020d50 <MX_LWIP_Init+0xcc>)
 8020cc2:	22a8      	movs	r2, #168	; 0xa8
 8020cc4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 8020cc6:	4b22      	ldr	r3, [pc, #136]	; (8020d50 <MX_LWIP_Init+0xcc>)
 8020cc8:	220c      	movs	r2, #12
 8020cca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8020ccc:	4b20      	ldr	r3, [pc, #128]	; (8020d50 <MX_LWIP_Init+0xcc>)
 8020cce:	2201      	movs	r2, #1
 8020cd0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 8020cd2:	4b20      	ldr	r3, [pc, #128]	; (8020d54 <MX_LWIP_Init+0xd0>)
 8020cd4:	781b      	ldrb	r3, [r3, #0]
 8020cd6:	2b01      	cmp	r3, #1
 8020cd8:	d002      	beq.n	8020ce0 <MX_LWIP_Init+0x5c>
 8020cda:	2b02      	cmp	r3, #2
 8020cdc:	d03c      	beq.n	8020d58 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 8020cde:	e162      	b.n	8020fa6 <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 8020ce0:	4b1c      	ldr	r3, [pc, #112]	; (8020d54 <MX_LWIP_Init+0xd0>)
 8020ce2:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8020ce6:	4b18      	ldr	r3, [pc, #96]	; (8020d48 <MX_LWIP_Init+0xc4>)
 8020ce8:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 8020cea:	4b1a      	ldr	r3, [pc, #104]	; (8020d54 <MX_LWIP_Init+0xd0>)
 8020cec:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8020cf0:	4b15      	ldr	r3, [pc, #84]	; (8020d48 <MX_LWIP_Init+0xc4>)
 8020cf2:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 8020cf4:	4b17      	ldr	r3, [pc, #92]	; (8020d54 <MX_LWIP_Init+0xd0>)
 8020cf6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8020cfa:	4b13      	ldr	r3, [pc, #76]	; (8020d48 <MX_LWIP_Init+0xc4>)
 8020cfc:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 8020cfe:	4b15      	ldr	r3, [pc, #84]	; (8020d54 <MX_LWIP_Init+0xd0>)
 8020d00:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8020d04:	4b10      	ldr	r3, [pc, #64]	; (8020d48 <MX_LWIP_Init+0xc4>)
 8020d06:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 8020d08:	4b10      	ldr	r3, [pc, #64]	; (8020d4c <MX_LWIP_Init+0xc8>)
 8020d0a:	22ff      	movs	r2, #255	; 0xff
 8020d0c:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 8020d0e:	4b0f      	ldr	r3, [pc, #60]	; (8020d4c <MX_LWIP_Init+0xc8>)
 8020d10:	22ff      	movs	r2, #255	; 0xff
 8020d12:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 8020d14:	4b0d      	ldr	r3, [pc, #52]	; (8020d4c <MX_LWIP_Init+0xc8>)
 8020d16:	22ff      	movs	r2, #255	; 0xff
 8020d18:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 8020d1a:	4b0c      	ldr	r3, [pc, #48]	; (8020d4c <MX_LWIP_Init+0xc8>)
 8020d1c:	2200      	movs	r2, #0
 8020d1e:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 8020d20:	4b0c      	ldr	r3, [pc, #48]	; (8020d54 <MX_LWIP_Init+0xd0>)
 8020d22:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8020d26:	4b0a      	ldr	r3, [pc, #40]	; (8020d50 <MX_LWIP_Init+0xcc>)
 8020d28:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 8020d2a:	4b0a      	ldr	r3, [pc, #40]	; (8020d54 <MX_LWIP_Init+0xd0>)
 8020d2c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8020d30:	4b07      	ldr	r3, [pc, #28]	; (8020d50 <MX_LWIP_Init+0xcc>)
 8020d32:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 8020d34:	4b07      	ldr	r3, [pc, #28]	; (8020d54 <MX_LWIP_Init+0xd0>)
 8020d36:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8020d3a:	4b05      	ldr	r3, [pc, #20]	; (8020d50 <MX_LWIP_Init+0xcc>)
 8020d3c:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 8020d3e:	4b04      	ldr	r3, [pc, #16]	; (8020d50 <MX_LWIP_Init+0xcc>)
 8020d40:	2201      	movs	r2, #1
 8020d42:	70da      	strb	r2, [r3, #3]
		break;
 8020d44:	e03b      	b.n	8020dbe <MX_LWIP_Init+0x13a>
 8020d46:	bf00      	nop
 8020d48:	2000ddc4 	.word	0x2000ddc4
 8020d4c:	2000ddc8 	.word	0x2000ddc8
 8020d50:	2000ddcc 	.word	0x2000ddcc
 8020d54:	20000504 	.word	0x20000504
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 8020d58:	4b94      	ldr	r3, [pc, #592]	; (8020fac <MX_LWIP_Init+0x328>)
 8020d5a:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 8020d5e:	4b94      	ldr	r3, [pc, #592]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020d60:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 8020d62:	4b92      	ldr	r3, [pc, #584]	; (8020fac <MX_LWIP_Init+0x328>)
 8020d64:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 8020d68:	4b91      	ldr	r3, [pc, #580]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020d6a:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 8020d6c:	4b8f      	ldr	r3, [pc, #572]	; (8020fac <MX_LWIP_Init+0x328>)
 8020d6e:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 8020d72:	4b8f      	ldr	r3, [pc, #572]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020d74:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 8020d76:	4b8d      	ldr	r3, [pc, #564]	; (8020fac <MX_LWIP_Init+0x328>)
 8020d78:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 8020d7c:	4b8c      	ldr	r3, [pc, #560]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020d7e:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 8020d80:	4b8c      	ldr	r3, [pc, #560]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020d82:	22ff      	movs	r2, #255	; 0xff
 8020d84:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 8020d86:	4b8b      	ldr	r3, [pc, #556]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020d88:	22ff      	movs	r2, #255	; 0xff
 8020d8a:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 8020d8c:	4b89      	ldr	r3, [pc, #548]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020d8e:	22ff      	movs	r2, #255	; 0xff
 8020d90:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 8020d92:	4b88      	ldr	r3, [pc, #544]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020d94:	2200      	movs	r2, #0
 8020d96:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 8020d98:	4b84      	ldr	r3, [pc, #528]	; (8020fac <MX_LWIP_Init+0x328>)
 8020d9a:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 8020d9e:	4b86      	ldr	r3, [pc, #536]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020da0:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 8020da2:	4b82      	ldr	r3, [pc, #520]	; (8020fac <MX_LWIP_Init+0x328>)
 8020da4:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 8020da8:	4b83      	ldr	r3, [pc, #524]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020daa:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 8020dac:	4b7f      	ldr	r3, [pc, #508]	; (8020fac <MX_LWIP_Init+0x328>)
 8020dae:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 8020db2:	4b81      	ldr	r3, [pc, #516]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020db4:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 8020db6:	4b80      	ldr	r3, [pc, #512]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020db8:	2201      	movs	r2, #1
 8020dba:	70da      	strb	r2, [r3, #3]
		break;
 8020dbc:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8020dbe:	f000 fd42 	bl	8021846 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8020dc2:	4b7b      	ldr	r3, [pc, #492]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020dc4:	781b      	ldrb	r3, [r3, #0]
 8020dc6:	061a      	lsls	r2, r3, #24
 8020dc8:	4b79      	ldr	r3, [pc, #484]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020dca:	785b      	ldrb	r3, [r3, #1]
 8020dcc:	041b      	lsls	r3, r3, #16
 8020dce:	431a      	orrs	r2, r3
 8020dd0:	4b77      	ldr	r3, [pc, #476]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020dd2:	789b      	ldrb	r3, [r3, #2]
 8020dd4:	021b      	lsls	r3, r3, #8
 8020dd6:	4313      	orrs	r3, r2
 8020dd8:	4a75      	ldr	r2, [pc, #468]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020dda:	78d2      	ldrb	r2, [r2, #3]
 8020ddc:	4313      	orrs	r3, r2
 8020dde:	061a      	lsls	r2, r3, #24
 8020de0:	4b73      	ldr	r3, [pc, #460]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020de2:	781b      	ldrb	r3, [r3, #0]
 8020de4:	0619      	lsls	r1, r3, #24
 8020de6:	4b72      	ldr	r3, [pc, #456]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020de8:	785b      	ldrb	r3, [r3, #1]
 8020dea:	041b      	lsls	r3, r3, #16
 8020dec:	4319      	orrs	r1, r3
 8020dee:	4b70      	ldr	r3, [pc, #448]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020df0:	789b      	ldrb	r3, [r3, #2]
 8020df2:	021b      	lsls	r3, r3, #8
 8020df4:	430b      	orrs	r3, r1
 8020df6:	496e      	ldr	r1, [pc, #440]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020df8:	78c9      	ldrb	r1, [r1, #3]
 8020dfa:	430b      	orrs	r3, r1
 8020dfc:	021b      	lsls	r3, r3, #8
 8020dfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8020e02:	431a      	orrs	r2, r3
 8020e04:	4b6a      	ldr	r3, [pc, #424]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020e06:	781b      	ldrb	r3, [r3, #0]
 8020e08:	0619      	lsls	r1, r3, #24
 8020e0a:	4b69      	ldr	r3, [pc, #420]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020e0c:	785b      	ldrb	r3, [r3, #1]
 8020e0e:	041b      	lsls	r3, r3, #16
 8020e10:	4319      	orrs	r1, r3
 8020e12:	4b67      	ldr	r3, [pc, #412]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020e14:	789b      	ldrb	r3, [r3, #2]
 8020e16:	021b      	lsls	r3, r3, #8
 8020e18:	430b      	orrs	r3, r1
 8020e1a:	4965      	ldr	r1, [pc, #404]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020e1c:	78c9      	ldrb	r1, [r1, #3]
 8020e1e:	430b      	orrs	r3, r1
 8020e20:	0a1b      	lsrs	r3, r3, #8
 8020e22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e26:	431a      	orrs	r2, r3
 8020e28:	4b61      	ldr	r3, [pc, #388]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020e2a:	781b      	ldrb	r3, [r3, #0]
 8020e2c:	0619      	lsls	r1, r3, #24
 8020e2e:	4b60      	ldr	r3, [pc, #384]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020e30:	785b      	ldrb	r3, [r3, #1]
 8020e32:	041b      	lsls	r3, r3, #16
 8020e34:	4319      	orrs	r1, r3
 8020e36:	4b5e      	ldr	r3, [pc, #376]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020e38:	789b      	ldrb	r3, [r3, #2]
 8020e3a:	021b      	lsls	r3, r3, #8
 8020e3c:	430b      	orrs	r3, r1
 8020e3e:	495c      	ldr	r1, [pc, #368]	; (8020fb0 <MX_LWIP_Init+0x32c>)
 8020e40:	78c9      	ldrb	r1, [r1, #3]
 8020e42:	430b      	orrs	r3, r1
 8020e44:	0e1b      	lsrs	r3, r3, #24
 8020e46:	4313      	orrs	r3, r2
 8020e48:	4a5c      	ldr	r2, [pc, #368]	; (8020fbc <MX_LWIP_Init+0x338>)
 8020e4a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8020e4c:	4b59      	ldr	r3, [pc, #356]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e4e:	781b      	ldrb	r3, [r3, #0]
 8020e50:	061a      	lsls	r2, r3, #24
 8020e52:	4b58      	ldr	r3, [pc, #352]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e54:	785b      	ldrb	r3, [r3, #1]
 8020e56:	041b      	lsls	r3, r3, #16
 8020e58:	431a      	orrs	r2, r3
 8020e5a:	4b56      	ldr	r3, [pc, #344]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e5c:	789b      	ldrb	r3, [r3, #2]
 8020e5e:	021b      	lsls	r3, r3, #8
 8020e60:	4313      	orrs	r3, r2
 8020e62:	4a54      	ldr	r2, [pc, #336]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e64:	78d2      	ldrb	r2, [r2, #3]
 8020e66:	4313      	orrs	r3, r2
 8020e68:	061a      	lsls	r2, r3, #24
 8020e6a:	4b52      	ldr	r3, [pc, #328]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e6c:	781b      	ldrb	r3, [r3, #0]
 8020e6e:	0619      	lsls	r1, r3, #24
 8020e70:	4b50      	ldr	r3, [pc, #320]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e72:	785b      	ldrb	r3, [r3, #1]
 8020e74:	041b      	lsls	r3, r3, #16
 8020e76:	4319      	orrs	r1, r3
 8020e78:	4b4e      	ldr	r3, [pc, #312]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e7a:	789b      	ldrb	r3, [r3, #2]
 8020e7c:	021b      	lsls	r3, r3, #8
 8020e7e:	430b      	orrs	r3, r1
 8020e80:	494c      	ldr	r1, [pc, #304]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e82:	78c9      	ldrb	r1, [r1, #3]
 8020e84:	430b      	orrs	r3, r1
 8020e86:	021b      	lsls	r3, r3, #8
 8020e88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8020e8c:	431a      	orrs	r2, r3
 8020e8e:	4b49      	ldr	r3, [pc, #292]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e90:	781b      	ldrb	r3, [r3, #0]
 8020e92:	0619      	lsls	r1, r3, #24
 8020e94:	4b47      	ldr	r3, [pc, #284]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e96:	785b      	ldrb	r3, [r3, #1]
 8020e98:	041b      	lsls	r3, r3, #16
 8020e9a:	4319      	orrs	r1, r3
 8020e9c:	4b45      	ldr	r3, [pc, #276]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020e9e:	789b      	ldrb	r3, [r3, #2]
 8020ea0:	021b      	lsls	r3, r3, #8
 8020ea2:	430b      	orrs	r3, r1
 8020ea4:	4943      	ldr	r1, [pc, #268]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020ea6:	78c9      	ldrb	r1, [r1, #3]
 8020ea8:	430b      	orrs	r3, r1
 8020eaa:	0a1b      	lsrs	r3, r3, #8
 8020eac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020eb0:	431a      	orrs	r2, r3
 8020eb2:	4b40      	ldr	r3, [pc, #256]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020eb4:	781b      	ldrb	r3, [r3, #0]
 8020eb6:	0619      	lsls	r1, r3, #24
 8020eb8:	4b3e      	ldr	r3, [pc, #248]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020eba:	785b      	ldrb	r3, [r3, #1]
 8020ebc:	041b      	lsls	r3, r3, #16
 8020ebe:	4319      	orrs	r1, r3
 8020ec0:	4b3c      	ldr	r3, [pc, #240]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020ec2:	789b      	ldrb	r3, [r3, #2]
 8020ec4:	021b      	lsls	r3, r3, #8
 8020ec6:	430b      	orrs	r3, r1
 8020ec8:	493a      	ldr	r1, [pc, #232]	; (8020fb4 <MX_LWIP_Init+0x330>)
 8020eca:	78c9      	ldrb	r1, [r1, #3]
 8020ecc:	430b      	orrs	r3, r1
 8020ece:	0e1b      	lsrs	r3, r3, #24
 8020ed0:	4313      	orrs	r3, r2
 8020ed2:	4a3b      	ldr	r2, [pc, #236]	; (8020fc0 <MX_LWIP_Init+0x33c>)
 8020ed4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8020ed6:	4b38      	ldr	r3, [pc, #224]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020ed8:	781b      	ldrb	r3, [r3, #0]
 8020eda:	061a      	lsls	r2, r3, #24
 8020edc:	4b36      	ldr	r3, [pc, #216]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020ede:	785b      	ldrb	r3, [r3, #1]
 8020ee0:	041b      	lsls	r3, r3, #16
 8020ee2:	431a      	orrs	r2, r3
 8020ee4:	4b34      	ldr	r3, [pc, #208]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020ee6:	789b      	ldrb	r3, [r3, #2]
 8020ee8:	021b      	lsls	r3, r3, #8
 8020eea:	4313      	orrs	r3, r2
 8020eec:	4a32      	ldr	r2, [pc, #200]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020eee:	78d2      	ldrb	r2, [r2, #3]
 8020ef0:	4313      	orrs	r3, r2
 8020ef2:	061a      	lsls	r2, r3, #24
 8020ef4:	4b30      	ldr	r3, [pc, #192]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020ef6:	781b      	ldrb	r3, [r3, #0]
 8020ef8:	0619      	lsls	r1, r3, #24
 8020efa:	4b2f      	ldr	r3, [pc, #188]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020efc:	785b      	ldrb	r3, [r3, #1]
 8020efe:	041b      	lsls	r3, r3, #16
 8020f00:	4319      	orrs	r1, r3
 8020f02:	4b2d      	ldr	r3, [pc, #180]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f04:	789b      	ldrb	r3, [r3, #2]
 8020f06:	021b      	lsls	r3, r3, #8
 8020f08:	430b      	orrs	r3, r1
 8020f0a:	492b      	ldr	r1, [pc, #172]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f0c:	78c9      	ldrb	r1, [r1, #3]
 8020f0e:	430b      	orrs	r3, r1
 8020f10:	021b      	lsls	r3, r3, #8
 8020f12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8020f16:	431a      	orrs	r2, r3
 8020f18:	4b27      	ldr	r3, [pc, #156]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f1a:	781b      	ldrb	r3, [r3, #0]
 8020f1c:	0619      	lsls	r1, r3, #24
 8020f1e:	4b26      	ldr	r3, [pc, #152]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f20:	785b      	ldrb	r3, [r3, #1]
 8020f22:	041b      	lsls	r3, r3, #16
 8020f24:	4319      	orrs	r1, r3
 8020f26:	4b24      	ldr	r3, [pc, #144]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f28:	789b      	ldrb	r3, [r3, #2]
 8020f2a:	021b      	lsls	r3, r3, #8
 8020f2c:	430b      	orrs	r3, r1
 8020f2e:	4922      	ldr	r1, [pc, #136]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f30:	78c9      	ldrb	r1, [r1, #3]
 8020f32:	430b      	orrs	r3, r1
 8020f34:	0a1b      	lsrs	r3, r3, #8
 8020f36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f3a:	431a      	orrs	r2, r3
 8020f3c:	4b1e      	ldr	r3, [pc, #120]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f3e:	781b      	ldrb	r3, [r3, #0]
 8020f40:	0619      	lsls	r1, r3, #24
 8020f42:	4b1d      	ldr	r3, [pc, #116]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f44:	785b      	ldrb	r3, [r3, #1]
 8020f46:	041b      	lsls	r3, r3, #16
 8020f48:	4319      	orrs	r1, r3
 8020f4a:	4b1b      	ldr	r3, [pc, #108]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f4c:	789b      	ldrb	r3, [r3, #2]
 8020f4e:	021b      	lsls	r3, r3, #8
 8020f50:	430b      	orrs	r3, r1
 8020f52:	4919      	ldr	r1, [pc, #100]	; (8020fb8 <MX_LWIP_Init+0x334>)
 8020f54:	78c9      	ldrb	r1, [r1, #3]
 8020f56:	430b      	orrs	r3, r1
 8020f58:	0e1b      	lsrs	r3, r3, #24
 8020f5a:	4313      	orrs	r3, r2
 8020f5c:	4a19      	ldr	r2, [pc, #100]	; (8020fc4 <MX_LWIP_Init+0x340>)
 8020f5e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8020f60:	4b19      	ldr	r3, [pc, #100]	; (8020fc8 <MX_LWIP_Init+0x344>)
 8020f62:	9302      	str	r3, [sp, #8]
 8020f64:	4b19      	ldr	r3, [pc, #100]	; (8020fcc <MX_LWIP_Init+0x348>)
 8020f66:	9301      	str	r3, [sp, #4]
 8020f68:	2300      	movs	r3, #0
 8020f6a:	9300      	str	r3, [sp, #0]
 8020f6c:	4b15      	ldr	r3, [pc, #84]	; (8020fc4 <MX_LWIP_Init+0x340>)
 8020f6e:	4a14      	ldr	r2, [pc, #80]	; (8020fc0 <MX_LWIP_Init+0x33c>)
 8020f70:	4912      	ldr	r1, [pc, #72]	; (8020fbc <MX_LWIP_Init+0x338>)
 8020f72:	4817      	ldr	r0, [pc, #92]	; (8020fd0 <MX_LWIP_Init+0x34c>)
 8020f74:	f001 f998 	bl	80222a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8020f78:	4815      	ldr	r0, [pc, #84]	; (8020fd0 <MX_LWIP_Init+0x34c>)
 8020f7a:	f001 fb49 	bl	8022610 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8020f7e:	4b14      	ldr	r3, [pc, #80]	; (8020fd0 <MX_LWIP_Init+0x34c>)
 8020f80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020f84:	089b      	lsrs	r3, r3, #2
 8020f86:	f003 0301 	and.w	r3, r3, #1
 8020f8a:	b2db      	uxtb	r3, r3
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	d003      	beq.n	8020f98 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8020f90:	480f      	ldr	r0, [pc, #60]	; (8020fd0 <MX_LWIP_Init+0x34c>)
 8020f92:	f001 fb4d 	bl	8022630 <netif_set_up>
 8020f96:	e002      	b.n	8020f9e <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8020f98:	480d      	ldr	r0, [pc, #52]	; (8020fd0 <MX_LWIP_Init+0x34c>)
 8020f9a:	f001 fbb5 	bl	8022708 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8020f9e:	490d      	ldr	r1, [pc, #52]	; (8020fd4 <MX_LWIP_Init+0x350>)
 8020fa0:	480b      	ldr	r0, [pc, #44]	; (8020fd0 <MX_LWIP_Init+0x34c>)
 8020fa2:	f001 fc47 	bl	8022834 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8020fa6:	46bd      	mov	sp, r7
 8020fa8:	bd80      	pop	{r7, pc}
 8020faa:	bf00      	nop
 8020fac:	20000504 	.word	0x20000504
 8020fb0:	2000ddc4 	.word	0x2000ddc4
 8020fb4:	2000ddc8 	.word	0x2000ddc8
 8020fb8:	2000ddcc 	.word	0x2000ddcc
 8020fbc:	2000ddb8 	.word	0x2000ddb8
 8020fc0:	2000ddbc 	.word	0x2000ddbc
 8020fc4:	2000ddc0 	.word	0x2000ddc0
 8020fc8:	080265f1 	.word	0x080265f1
 8020fcc:	08021365 	.word	0x08021365
 8020fd0:	2000dd78 	.word	0x2000dd78
 8020fd4:	08021029 	.word	0x08021029

08020fd8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8020fd8:	b580      	push	{r7, lr}
 8020fda:	b082      	sub	sp, #8
 8020fdc:	af00      	add	r7, sp, #0
 8020fde:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8020fe0:	f7f8 fd26 	bl	8019a30 <HAL_GetTick>
 8020fe4:	4602      	mov	r2, r0
 8020fe6:	4b08      	ldr	r3, [pc, #32]	; (8021008 <Ethernet_Link_Periodic_Handle+0x30>)
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	1ad3      	subs	r3, r2, r3
 8020fec:	2b63      	cmp	r3, #99	; 0x63
 8020fee:	d907      	bls.n	8021000 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8020ff0:	f7f8 fd1e 	bl	8019a30 <HAL_GetTick>
 8020ff4:	4603      	mov	r3, r0
 8020ff6:	4a04      	ldr	r2, [pc, #16]	; (8021008 <Ethernet_Link_Periodic_Handle+0x30>)
 8020ff8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8020ffa:	6878      	ldr	r0, [r7, #4]
 8020ffc:	f000 fb10 	bl	8021620 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8021000:	bf00      	nop
 8021002:	3708      	adds	r7, #8
 8021004:	46bd      	mov	sp, r7
 8021006:	bd80      	pop	{r7, pc}
 8021008:	2000dd74 	.word	0x2000dd74

0802100c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 802100c:	b580      	push	{r7, lr}
 802100e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8021010:	4804      	ldr	r0, [pc, #16]	; (8021024 <MX_LWIP_Process+0x18>)
 8021012:	f000 f987 	bl	8021324 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8021016:	f002 fb83 	bl	8023720 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 802101a:	4802      	ldr	r0, [pc, #8]	; (8021024 <MX_LWIP_Process+0x18>)
 802101c:	f7ff ffdc 	bl	8020fd8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8021020:	bf00      	nop
 8021022:	bd80      	pop	{r7, pc}
 8021024:	2000dd78 	.word	0x2000dd78

08021028 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8021028:	b480      	push	{r7}
 802102a:	b083      	sub	sp, #12
 802102c:	af00      	add	r7, sp, #0
 802102e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8021030:	bf00      	nop
 8021032:	370c      	adds	r7, #12
 8021034:	46bd      	mov	sp, r7
 8021036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802103a:	4770      	bx	lr

0802103c <SCB_InvalidateDCache_by_Addr>:
{
 802103c:	b480      	push	{r7}
 802103e:	b087      	sub	sp, #28
 8021040:	af00      	add	r7, sp, #0
 8021042:	6078      	str	r0, [r7, #4]
 8021044:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8021046:	683b      	ldr	r3, [r7, #0]
 8021048:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 802104e:	2320      	movs	r3, #32
 8021050:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8021052:	f3bf 8f4f 	dsb	sy
}
 8021056:	bf00      	nop
    while (op_size > 0) {
 8021058:	e00b      	b.n	8021072 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 802105a:	4a0d      	ldr	r2, [pc, #52]	; (8021090 <SCB_InvalidateDCache_by_Addr+0x54>)
 802105c:	693b      	ldr	r3, [r7, #16]
 802105e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8021062:	68fb      	ldr	r3, [r7, #12]
 8021064:	693a      	ldr	r2, [r7, #16]
 8021066:	4413      	add	r3, r2
 8021068:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 802106a:	697a      	ldr	r2, [r7, #20]
 802106c:	68fb      	ldr	r3, [r7, #12]
 802106e:	1ad3      	subs	r3, r2, r3
 8021070:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8021072:	697b      	ldr	r3, [r7, #20]
 8021074:	2b00      	cmp	r3, #0
 8021076:	dcf0      	bgt.n	802105a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8021078:	f3bf 8f4f 	dsb	sy
}
 802107c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802107e:	f3bf 8f6f 	isb	sy
}
 8021082:	bf00      	nop
}
 8021084:	bf00      	nop
 8021086:	371c      	adds	r7, #28
 8021088:	46bd      	mov	sp, r7
 802108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802108e:	4770      	bx	lr
 8021090:	e000ed00 	.word	0xe000ed00

08021094 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8021094:	b580      	push	{r7, lr}
 8021096:	b084      	sub	sp, #16
 8021098:	af00      	add	r7, sp, #0
 802109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 802109c:	2300      	movs	r3, #0
 802109e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80210a0:	4b47      	ldr	r3, [pc, #284]	; (80211c0 <low_level_init+0x12c>)
 80210a2:	4a48      	ldr	r2, [pc, #288]	; (80211c4 <low_level_init+0x130>)
 80210a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80210a6:	2300      	movs	r3, #0
 80210a8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80210aa:	2380      	movs	r3, #128	; 0x80
 80210ac:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80210ae:	23e1      	movs	r3, #225	; 0xe1
 80210b0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80210b2:	2300      	movs	r3, #0
 80210b4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80210b6:	2300      	movs	r3, #0
 80210b8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80210ba:	2300      	movs	r3, #0
 80210bc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80210be:	4a40      	ldr	r2, [pc, #256]	; (80211c0 <low_level_init+0x12c>)
 80210c0:	f107 0308 	add.w	r3, r7, #8
 80210c4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80210c6:	4b3e      	ldr	r3, [pc, #248]	; (80211c0 <low_level_init+0x12c>)
 80210c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80210cc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80210ce:	4b3c      	ldr	r3, [pc, #240]	; (80211c0 <low_level_init+0x12c>)
 80210d0:	4a3d      	ldr	r2, [pc, #244]	; (80211c8 <low_level_init+0x134>)
 80210d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80210d4:	4b3a      	ldr	r3, [pc, #232]	; (80211c0 <low_level_init+0x12c>)
 80210d6:	4a3d      	ldr	r2, [pc, #244]	; (80211cc <low_level_init+0x138>)
 80210d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80210da:	4b39      	ldr	r3, [pc, #228]	; (80211c0 <low_level_init+0x12c>)
 80210dc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80210e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 80210e2:	4b3b      	ldr	r3, [pc, #236]	; (80211d0 <low_level_init+0x13c>)
 80210e4:	781b      	ldrb	r3, [r3, #0]
 80210e6:	2b01      	cmp	r3, #1
 80210e8:	d002      	beq.n	80210f0 <low_level_init+0x5c>
 80210ea:	2b02      	cmp	r3, #2
 80210ec:	d004      	beq.n	80210f8 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 80210ee:	e063      	b.n	80211b8 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 80210f0:	4b33      	ldr	r3, [pc, #204]	; (80211c0 <low_level_init+0x12c>)
 80210f2:	4a38      	ldr	r2, [pc, #224]	; (80211d4 <low_level_init+0x140>)
 80210f4:	605a      	str	r2, [r3, #4]
		break;
 80210f6:	e003      	b.n	8021100 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 80210f8:	4b31      	ldr	r3, [pc, #196]	; (80211c0 <low_level_init+0x12c>)
 80210fa:	4a37      	ldr	r2, [pc, #220]	; (80211d8 <low_level_init+0x144>)
 80210fc:	605a      	str	r2, [r3, #4]
		break;
 80210fe:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8021100:	482f      	ldr	r0, [pc, #188]	; (80211c0 <low_level_init+0x12c>)
 8021102:	f7f9 fdbb 	bl	801ac7c <HAL_ETH_Init>
 8021106:	4603      	mov	r3, r0
 8021108:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 802110a:	2238      	movs	r2, #56	; 0x38
 802110c:	2100      	movs	r1, #0
 802110e:	4833      	ldr	r0, [pc, #204]	; (80211dc <low_level_init+0x148>)
 8021110:	f005 fbb0 	bl	8026874 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8021114:	4b31      	ldr	r3, [pc, #196]	; (80211dc <low_level_init+0x148>)
 8021116:	2221      	movs	r2, #33	; 0x21
 8021118:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 802111a:	4b30      	ldr	r3, [pc, #192]	; (80211dc <low_level_init+0x148>)
 802111c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8021120:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8021122:	4b2e      	ldr	r3, [pc, #184]	; (80211dc <low_level_init+0x148>)
 8021124:	2200      	movs	r2, #0
 8021126:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8021128:	482d      	ldr	r0, [pc, #180]	; (80211e0 <low_level_init+0x14c>)
 802112a:	f000 ff3d 	bl	8021fa8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	2206      	movs	r2, #6
 8021132:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8021136:	4b22      	ldr	r3, [pc, #136]	; (80211c0 <low_level_init+0x12c>)
 8021138:	685b      	ldr	r3, [r3, #4]
 802113a:	781a      	ldrb	r2, [r3, #0]
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8021142:	4b1f      	ldr	r3, [pc, #124]	; (80211c0 <low_level_init+0x12c>)
 8021144:	685b      	ldr	r3, [r3, #4]
 8021146:	785a      	ldrb	r2, [r3, #1]
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 802114e:	4b1c      	ldr	r3, [pc, #112]	; (80211c0 <low_level_init+0x12c>)
 8021150:	685b      	ldr	r3, [r3, #4]
 8021152:	789a      	ldrb	r2, [r3, #2]
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 802115a:	4b19      	ldr	r3, [pc, #100]	; (80211c0 <low_level_init+0x12c>)
 802115c:	685b      	ldr	r3, [r3, #4]
 802115e:	78da      	ldrb	r2, [r3, #3]
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8021166:	4b16      	ldr	r3, [pc, #88]	; (80211c0 <low_level_init+0x12c>)
 8021168:	685b      	ldr	r3, [r3, #4]
 802116a:	791a      	ldrb	r2, [r3, #4]
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8021172:	4b13      	ldr	r3, [pc, #76]	; (80211c0 <low_level_init+0x12c>)
 8021174:	685b      	ldr	r3, [r3, #4]
 8021176:	795a      	ldrb	r2, [r3, #5]
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8021184:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8021186:	687b      	ldr	r3, [r7, #4]
 8021188:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802118c:	f043 030a 	orr.w	r3, r3, #10
 8021190:	b2da      	uxtb	r2, r3
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8021198:	4912      	ldr	r1, [pc, #72]	; (80211e4 <low_level_init+0x150>)
 802119a:	4813      	ldr	r0, [pc, #76]	; (80211e8 <low_level_init+0x154>)
 802119c:	f7f8 fa87 	bl	80196ae <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80211a0:	4811      	ldr	r0, [pc, #68]	; (80211e8 <low_level_init+0x154>)
 80211a2:	f7f8 fab6 	bl	8019712 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80211a6:	7bfb      	ldrb	r3, [r7, #15]
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d103      	bne.n	80211b4 <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80211ac:	6878      	ldr	r0, [r7, #4]
 80211ae:	f000 fa37 	bl	8021620 <ethernet_link_check_state>
 80211b2:	e001      	b.n	80211b8 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 80211b4:	f7f6 fe42 	bl	8017e3c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80211b8:	3710      	adds	r7, #16
 80211ba:	46bd      	mov	sp, r7
 80211bc:	bd80      	pop	{r7, pc}
 80211be:	bf00      	nop
 80211c0:	200126cc 	.word	0x200126cc
 80211c4:	40028000 	.word	0x40028000
 80211c8:	20000444 	.word	0x20000444
 80211cc:	200003a4 	.word	0x200003a4
 80211d0:	20000504 	.word	0x20000504
 80211d4:	20000543 	.word	0x20000543
 80211d8:	200007b1 	.word	0x200007b1
 80211dc:	2001277c 	.word	0x2001277c
 80211e0:	0802dd6c 	.word	0x0802dd6c
 80211e4:	20000328 	.word	0x20000328
 80211e8:	200127b4 	.word	0x200127b4

080211ec <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80211ec:	b580      	push	{r7, lr}
 80211ee:	b092      	sub	sp, #72	; 0x48
 80211f0:	af00      	add	r7, sp, #0
 80211f2:	6078      	str	r0, [r7, #4]
 80211f4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80211f6:	2300      	movs	r3, #0
 80211f8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80211fa:	2300      	movs	r3, #0
 80211fc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80211fe:	2300      	movs	r3, #0
 8021200:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8021204:	f107 030c 	add.w	r3, r7, #12
 8021208:	2230      	movs	r2, #48	; 0x30
 802120a:	2100      	movs	r1, #0
 802120c:	4618      	mov	r0, r3
 802120e:	f005 fb31 	bl	8026874 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8021212:	f107 030c 	add.w	r3, r7, #12
 8021216:	2230      	movs	r2, #48	; 0x30
 8021218:	2100      	movs	r1, #0
 802121a:	4618      	mov	r0, r3
 802121c:	f005 fb2a 	bl	8026874 <memset>

  for(q = p; q != NULL; q = q->next)
 8021220:	683b      	ldr	r3, [r7, #0]
 8021222:	643b      	str	r3, [r7, #64]	; 0x40
 8021224:	e045      	b.n	80212b2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8021226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021228:	2b03      	cmp	r3, #3
 802122a:	d902      	bls.n	8021232 <low_level_output+0x46>
      return ERR_IF;
 802122c:	f06f 030b 	mvn.w	r3, #11
 8021230:	e055      	b.n	80212de <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8021232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021234:	6859      	ldr	r1, [r3, #4]
 8021236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021238:	4613      	mov	r3, r2
 802123a:	005b      	lsls	r3, r3, #1
 802123c:	4413      	add	r3, r2
 802123e:	009b      	lsls	r3, r3, #2
 8021240:	3348      	adds	r3, #72	; 0x48
 8021242:	443b      	add	r3, r7
 8021244:	3b3c      	subs	r3, #60	; 0x3c
 8021246:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8021248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802124a:	895b      	ldrh	r3, [r3, #10]
 802124c:	4619      	mov	r1, r3
 802124e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021250:	4613      	mov	r3, r2
 8021252:	005b      	lsls	r3, r3, #1
 8021254:	4413      	add	r3, r2
 8021256:	009b      	lsls	r3, r3, #2
 8021258:	3348      	adds	r3, #72	; 0x48
 802125a:	443b      	add	r3, r7
 802125c:	3b38      	subs	r3, #56	; 0x38
 802125e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8021260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021262:	2b00      	cmp	r3, #0
 8021264:	d011      	beq.n	802128a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8021266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021268:	1e5a      	subs	r2, r3, #1
 802126a:	f107 000c 	add.w	r0, r7, #12
 802126e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8021270:	460b      	mov	r3, r1
 8021272:	005b      	lsls	r3, r3, #1
 8021274:	440b      	add	r3, r1
 8021276:	009b      	lsls	r3, r3, #2
 8021278:	18c1      	adds	r1, r0, r3
 802127a:	4613      	mov	r3, r2
 802127c:	005b      	lsls	r3, r3, #1
 802127e:	4413      	add	r3, r2
 8021280:	009b      	lsls	r3, r3, #2
 8021282:	3348      	adds	r3, #72	; 0x48
 8021284:	443b      	add	r3, r7
 8021286:	3b34      	subs	r3, #52	; 0x34
 8021288:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 802128a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802128c:	681b      	ldr	r3, [r3, #0]
 802128e:	2b00      	cmp	r3, #0
 8021290:	d109      	bne.n	80212a6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8021292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021294:	4613      	mov	r3, r2
 8021296:	005b      	lsls	r3, r3, #1
 8021298:	4413      	add	r3, r2
 802129a:	009b      	lsls	r3, r3, #2
 802129c:	3348      	adds	r3, #72	; 0x48
 802129e:	443b      	add	r3, r7
 80212a0:	3b34      	subs	r3, #52	; 0x34
 80212a2:	2200      	movs	r2, #0
 80212a4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80212a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80212a8:	3301      	adds	r3, #1
 80212aa:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80212ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	643b      	str	r3, [r7, #64]	; 0x40
 80212b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d1b6      	bne.n	8021226 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80212b8:	683b      	ldr	r3, [r7, #0]
 80212ba:	891b      	ldrh	r3, [r3, #8]
 80212bc:	461a      	mov	r2, r3
 80212be:	4b0a      	ldr	r3, [pc, #40]	; (80212e8 <low_level_output+0xfc>)
 80212c0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80212c2:	4a09      	ldr	r2, [pc, #36]	; (80212e8 <low_level_output+0xfc>)
 80212c4:	f107 030c 	add.w	r3, r7, #12
 80212c8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80212ca:	4a07      	ldr	r2, [pc, #28]	; (80212e8 <low_level_output+0xfc>)
 80212cc:	683b      	ldr	r3, [r7, #0]
 80212ce:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80212d0:	2214      	movs	r2, #20
 80212d2:	4905      	ldr	r1, [pc, #20]	; (80212e8 <low_level_output+0xfc>)
 80212d4:	4805      	ldr	r0, [pc, #20]	; (80212ec <low_level_output+0x100>)
 80212d6:	f7f9 fe05 	bl	801aee4 <HAL_ETH_Transmit>

  return errval;
 80212da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80212de:	4618      	mov	r0, r3
 80212e0:	3748      	adds	r7, #72	; 0x48
 80212e2:	46bd      	mov	sp, r7
 80212e4:	bd80      	pop	{r7, pc}
 80212e6:	bf00      	nop
 80212e8:	2001277c 	.word	0x2001277c
 80212ec:	200126cc 	.word	0x200126cc

080212f0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80212f0:	b580      	push	{r7, lr}
 80212f2:	b084      	sub	sp, #16
 80212f4:	af00      	add	r7, sp, #0
 80212f6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80212f8:	2300      	movs	r3, #0
 80212fa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80212fc:	4b07      	ldr	r3, [pc, #28]	; (802131c <low_level_input+0x2c>)
 80212fe:	781b      	ldrb	r3, [r3, #0]
 8021300:	2b00      	cmp	r3, #0
 8021302:	d105      	bne.n	8021310 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8021304:	f107 030c 	add.w	r3, r7, #12
 8021308:	4619      	mov	r1, r3
 802130a:	4805      	ldr	r0, [pc, #20]	; (8021320 <low_level_input+0x30>)
 802130c:	f7f9 fe7e 	bl	801b00c <HAL_ETH_ReadData>
  }

  return p;
 8021310:	68fb      	ldr	r3, [r7, #12]
}
 8021312:	4618      	mov	r0, r3
 8021314:	3710      	adds	r7, #16
 8021316:	46bd      	mov	sp, r7
 8021318:	bd80      	pop	{r7, pc}
 802131a:	bf00      	nop
 802131c:	200126c8 	.word	0x200126c8
 8021320:	200126cc 	.word	0x200126cc

08021324 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8021324:	b580      	push	{r7, lr}
 8021326:	b084      	sub	sp, #16
 8021328:	af00      	add	r7, sp, #0
 802132a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 802132c:	2300      	movs	r3, #0
 802132e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8021330:	6878      	ldr	r0, [r7, #4]
 8021332:	f7ff ffdd 	bl	80212f0 <low_level_input>
 8021336:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8021338:	68fb      	ldr	r3, [r7, #12]
 802133a:	2b00      	cmp	r3, #0
 802133c:	d00a      	beq.n	8021354 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 802133e:	687b      	ldr	r3, [r7, #4]
 8021340:	691b      	ldr	r3, [r3, #16]
 8021342:	6879      	ldr	r1, [r7, #4]
 8021344:	68f8      	ldr	r0, [r7, #12]
 8021346:	4798      	blx	r3
 8021348:	4603      	mov	r3, r0
 802134a:	2b00      	cmp	r3, #0
 802134c:	d002      	beq.n	8021354 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 802134e:	68f8      	ldr	r0, [r7, #12]
 8021350:	f001 fe40 	bl	8022fd4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8021354:	68fb      	ldr	r3, [r7, #12]
 8021356:	2b00      	cmp	r3, #0
 8021358:	d1ea      	bne.n	8021330 <ethernetif_input+0xc>
}
 802135a:	bf00      	nop
 802135c:	bf00      	nop
 802135e:	3710      	adds	r7, #16
 8021360:	46bd      	mov	sp, r7
 8021362:	bd80      	pop	{r7, pc}

08021364 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8021364:	b580      	push	{r7, lr}
 8021366:	b082      	sub	sp, #8
 8021368:	af00      	add	r7, sp, #0
 802136a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 802136c:	687b      	ldr	r3, [r7, #4]
 802136e:	2b00      	cmp	r3, #0
 8021370:	d106      	bne.n	8021380 <ethernetif_init+0x1c>
 8021372:	4b0e      	ldr	r3, [pc, #56]	; (80213ac <ethernetif_init+0x48>)
 8021374:	f240 1287 	movw	r2, #391	; 0x187
 8021378:	490d      	ldr	r1, [pc, #52]	; (80213b0 <ethernetif_init+0x4c>)
 802137a:	480e      	ldr	r0, [pc, #56]	; (80213b4 <ethernetif_init+0x50>)
 802137c:	f005 fb62 	bl	8026a44 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8021380:	687b      	ldr	r3, [r7, #4]
 8021382:	2273      	movs	r2, #115	; 0x73
 8021384:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	2274      	movs	r2, #116	; 0x74
 802138c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	4a09      	ldr	r2, [pc, #36]	; (80213b8 <ethernetif_init+0x54>)
 8021394:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8021396:	687b      	ldr	r3, [r7, #4]
 8021398:	4a08      	ldr	r2, [pc, #32]	; (80213bc <ethernetif_init+0x58>)
 802139a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 802139c:	6878      	ldr	r0, [r7, #4]
 802139e:	f7ff fe79 	bl	8021094 <low_level_init>

  return ERR_OK;
 80213a2:	2300      	movs	r3, #0
}
 80213a4:	4618      	mov	r0, r3
 80213a6:	3708      	adds	r7, #8
 80213a8:	46bd      	mov	sp, r7
 80213aa:	bd80      	pop	{r7, pc}
 80213ac:	0802c2c4 	.word	0x0802c2c4
 80213b0:	0802c2e0 	.word	0x0802c2e0
 80213b4:	0802c2f0 	.word	0x0802c2f0
 80213b8:	08024981 	.word	0x08024981
 80213bc:	080211ed 	.word	0x080211ed

080213c0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80213c0:	b580      	push	{r7, lr}
 80213c2:	b084      	sub	sp, #16
 80213c4:	af00      	add	r7, sp, #0
 80213c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80213c8:	687b      	ldr	r3, [r7, #4]
 80213ca:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80213cc:	68f9      	ldr	r1, [r7, #12]
 80213ce:	4807      	ldr	r0, [pc, #28]	; (80213ec <pbuf_free_custom+0x2c>)
 80213d0:	f000 fecc 	bl	802216c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80213d4:	4b06      	ldr	r3, [pc, #24]	; (80213f0 <pbuf_free_custom+0x30>)
 80213d6:	781b      	ldrb	r3, [r3, #0]
 80213d8:	2b01      	cmp	r3, #1
 80213da:	d102      	bne.n	80213e2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80213dc:	4b04      	ldr	r3, [pc, #16]	; (80213f0 <pbuf_free_custom+0x30>)
 80213de:	2200      	movs	r2, #0
 80213e0:	701a      	strb	r2, [r3, #0]
  }
}
 80213e2:	bf00      	nop
 80213e4:	3710      	adds	r7, #16
 80213e6:	46bd      	mov	sp, r7
 80213e8:	bd80      	pop	{r7, pc}
 80213ea:	bf00      	nop
 80213ec:	0802dd6c 	.word	0x0802dd6c
 80213f0:	200126c8 	.word	0x200126c8

080213f4 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 80213f4:	b580      	push	{r7, lr}
 80213f6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80213f8:	f7f8 fb1a 	bl	8019a30 <HAL_GetTick>
 80213fc:	4603      	mov	r3, r0
}
 80213fe:	4618      	mov	r0, r3
 8021400:	bd80      	pop	{r7, pc}
	...

08021404 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8021404:	b580      	push	{r7, lr}
 8021406:	b08e      	sub	sp, #56	; 0x38
 8021408:	af00      	add	r7, sp, #0
 802140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021410:	2200      	movs	r2, #0
 8021412:	601a      	str	r2, [r3, #0]
 8021414:	605a      	str	r2, [r3, #4]
 8021416:	609a      	str	r2, [r3, #8]
 8021418:	60da      	str	r2, [r3, #12]
 802141a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 802141c:	687b      	ldr	r3, [r7, #4]
 802141e:	681b      	ldr	r3, [r3, #0]
 8021420:	4a52      	ldr	r2, [pc, #328]	; (802156c <HAL_ETH_MspInit+0x168>)
 8021422:	4293      	cmp	r3, r2
 8021424:	f040 809e 	bne.w	8021564 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8021428:	4b51      	ldr	r3, [pc, #324]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 802142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802142c:	4a50      	ldr	r2, [pc, #320]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 802142e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8021432:	6313      	str	r3, [r2, #48]	; 0x30
 8021434:	4b4e      	ldr	r3, [pc, #312]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 8021436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802143c:	623b      	str	r3, [r7, #32]
 802143e:	6a3b      	ldr	r3, [r7, #32]
 8021440:	4b4b      	ldr	r3, [pc, #300]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 8021442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021444:	4a4a      	ldr	r2, [pc, #296]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 8021446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802144a:	6313      	str	r3, [r2, #48]	; 0x30
 802144c:	4b48      	ldr	r3, [pc, #288]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 802144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021450:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8021454:	61fb      	str	r3, [r7, #28]
 8021456:	69fb      	ldr	r3, [r7, #28]
 8021458:	4b45      	ldr	r3, [pc, #276]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 802145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802145c:	4a44      	ldr	r2, [pc, #272]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 802145e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8021462:	6313      	str	r3, [r2, #48]	; 0x30
 8021464:	4b42      	ldr	r3, [pc, #264]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 8021466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802146c:	61bb      	str	r3, [r7, #24]
 802146e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021470:	4b3f      	ldr	r3, [pc, #252]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 8021472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021474:	4a3e      	ldr	r2, [pc, #248]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 8021476:	f043 0304 	orr.w	r3, r3, #4
 802147a:	6313      	str	r3, [r2, #48]	; 0x30
 802147c:	4b3c      	ldr	r3, [pc, #240]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 802147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021480:	f003 0304 	and.w	r3, r3, #4
 8021484:	617b      	str	r3, [r7, #20]
 8021486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021488:	4b39      	ldr	r3, [pc, #228]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 802148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802148c:	4a38      	ldr	r2, [pc, #224]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 802148e:	f043 0301 	orr.w	r3, r3, #1
 8021492:	6313      	str	r3, [r2, #48]	; 0x30
 8021494:	4b36      	ldr	r3, [pc, #216]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 8021496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021498:	f003 0301 	and.w	r3, r3, #1
 802149c:	613b      	str	r3, [r7, #16]
 802149e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80214a0:	4b33      	ldr	r3, [pc, #204]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 80214a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214a4:	4a32      	ldr	r2, [pc, #200]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 80214a6:	f043 0302 	orr.w	r3, r3, #2
 80214aa:	6313      	str	r3, [r2, #48]	; 0x30
 80214ac:	4b30      	ldr	r3, [pc, #192]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 80214ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214b0:	f003 0302 	and.w	r3, r3, #2
 80214b4:	60fb      	str	r3, [r7, #12]
 80214b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80214b8:	4b2d      	ldr	r3, [pc, #180]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 80214ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214bc:	4a2c      	ldr	r2, [pc, #176]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 80214be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80214c2:	6313      	str	r3, [r2, #48]	; 0x30
 80214c4:	4b2a      	ldr	r3, [pc, #168]	; (8021570 <HAL_ETH_MspInit+0x16c>)
 80214c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80214cc:	60bb      	str	r3, [r7, #8]
 80214ce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 80214d0:	2332      	movs	r3, #50	; 0x32
 80214d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214d4:	2302      	movs	r3, #2
 80214d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80214d8:	2300      	movs	r3, #0
 80214da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80214dc:	2303      	movs	r3, #3
 80214de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80214e0:	230b      	movs	r3, #11
 80214e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80214e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80214e8:	4619      	mov	r1, r3
 80214ea:	4822      	ldr	r0, [pc, #136]	; (8021574 <HAL_ETH_MspInit+0x170>)
 80214ec:	f7fa fdac 	bl	801c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 80214f0:	2386      	movs	r3, #134	; 0x86
 80214f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214f4:	2302      	movs	r3, #2
 80214f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80214f8:	2300      	movs	r3, #0
 80214fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80214fc:	2303      	movs	r3, #3
 80214fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8021500:	230b      	movs	r3, #11
 8021502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021508:	4619      	mov	r1, r3
 802150a:	481b      	ldr	r0, [pc, #108]	; (8021578 <HAL_ETH_MspInit+0x174>)
 802150c:	f7fa fd9c 	bl	801c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 8021510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021516:	2302      	movs	r3, #2
 8021518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802151a:	2300      	movs	r3, #0
 802151c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802151e:	2303      	movs	r3, #3
 8021520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8021522:	230b      	movs	r3, #11
 8021524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 8021526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802152a:	4619      	mov	r1, r3
 802152c:	4813      	ldr	r0, [pc, #76]	; (802157c <HAL_ETH_MspInit+0x178>)
 802152e:	f7fa fd8b 	bl	801c048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 8021532:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8021536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021538:	2302      	movs	r3, #2
 802153a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802153c:	2300      	movs	r3, #0
 802153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021540:	2303      	movs	r3, #3
 8021542:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8021544:	230b      	movs	r3, #11
 8021546:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802154c:	4619      	mov	r1, r3
 802154e:	480c      	ldr	r0, [pc, #48]	; (8021580 <HAL_ETH_MspInit+0x17c>)
 8021550:	f7fa fd7a 	bl	801c048 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8021554:	2200      	movs	r2, #0
 8021556:	2101      	movs	r1, #1
 8021558:	203d      	movs	r0, #61	; 0x3d
 802155a:	f7f9 fa4a 	bl	801a9f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 802155e:	203d      	movs	r0, #61	; 0x3d
 8021560:	f7f9 fa63 	bl	801aa2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8021564:	bf00      	nop
 8021566:	3738      	adds	r7, #56	; 0x38
 8021568:	46bd      	mov	sp, r7
 802156a:	bd80      	pop	{r7, pc}
 802156c:	40028000 	.word	0x40028000
 8021570:	40023800 	.word	0x40023800
 8021574:	40020800 	.word	0x40020800
 8021578:	40020000 	.word	0x40020000
 802157c:	40020400 	.word	0x40020400
 8021580:	40021800 	.word	0x40021800

08021584 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8021584:	b580      	push	{r7, lr}
 8021586:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8021588:	4802      	ldr	r0, [pc, #8]	; (8021594 <ETH_PHY_IO_Init+0x10>)
 802158a:	f7fa f903 	bl	801b794 <HAL_ETH_SetMDIOClockRange>

  return 0;
 802158e:	2300      	movs	r3, #0
}
 8021590:	4618      	mov	r0, r3
 8021592:	bd80      	pop	{r7, pc}
 8021594:	200126cc 	.word	0x200126cc

08021598 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8021598:	b480      	push	{r7}
 802159a:	af00      	add	r7, sp, #0
  return 0;
 802159c:	2300      	movs	r3, #0
}
 802159e:	4618      	mov	r0, r3
 80215a0:	46bd      	mov	sp, r7
 80215a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215a6:	4770      	bx	lr

080215a8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80215a8:	b580      	push	{r7, lr}
 80215aa:	b084      	sub	sp, #16
 80215ac:	af00      	add	r7, sp, #0
 80215ae:	60f8      	str	r0, [r7, #12]
 80215b0:	60b9      	str	r1, [r7, #8]
 80215b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80215b4:	687b      	ldr	r3, [r7, #4]
 80215b6:	68ba      	ldr	r2, [r7, #8]
 80215b8:	68f9      	ldr	r1, [r7, #12]
 80215ba:	4807      	ldr	r0, [pc, #28]	; (80215d8 <ETH_PHY_IO_ReadReg+0x30>)
 80215bc:	f7f9 ff52 	bl	801b464 <HAL_ETH_ReadPHYRegister>
 80215c0:	4603      	mov	r3, r0
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d002      	beq.n	80215cc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80215c6:	f04f 33ff 	mov.w	r3, #4294967295
 80215ca:	e000      	b.n	80215ce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80215cc:	2300      	movs	r3, #0
}
 80215ce:	4618      	mov	r0, r3
 80215d0:	3710      	adds	r7, #16
 80215d2:	46bd      	mov	sp, r7
 80215d4:	bd80      	pop	{r7, pc}
 80215d6:	bf00      	nop
 80215d8:	200126cc 	.word	0x200126cc

080215dc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80215dc:	b580      	push	{r7, lr}
 80215de:	b084      	sub	sp, #16
 80215e0:	af00      	add	r7, sp, #0
 80215e2:	60f8      	str	r0, [r7, #12]
 80215e4:	60b9      	str	r1, [r7, #8]
 80215e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80215e8:	687b      	ldr	r3, [r7, #4]
 80215ea:	68ba      	ldr	r2, [r7, #8]
 80215ec:	68f9      	ldr	r1, [r7, #12]
 80215ee:	4807      	ldr	r0, [pc, #28]	; (802160c <ETH_PHY_IO_WriteReg+0x30>)
 80215f0:	f7f9 ff83 	bl	801b4fa <HAL_ETH_WritePHYRegister>
 80215f4:	4603      	mov	r3, r0
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d002      	beq.n	8021600 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80215fa:	f04f 33ff 	mov.w	r3, #4294967295
 80215fe:	e000      	b.n	8021602 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8021600:	2300      	movs	r3, #0
}
 8021602:	4618      	mov	r0, r3
 8021604:	3710      	adds	r7, #16
 8021606:	46bd      	mov	sp, r7
 8021608:	bd80      	pop	{r7, pc}
 802160a:	bf00      	nop
 802160c:	200126cc 	.word	0x200126cc

08021610 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8021610:	b580      	push	{r7, lr}
 8021612:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8021614:	f7f8 fa0c 	bl	8019a30 <HAL_GetTick>
 8021618:	4603      	mov	r3, r0
}
 802161a:	4618      	mov	r0, r3
 802161c:	bd80      	pop	{r7, pc}
	...

08021620 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8021620:	b580      	push	{r7, lr}
 8021622:	b0a0      	sub	sp, #128	; 0x80
 8021624:	af00      	add	r7, sp, #0
 8021626:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8021628:	f107 030c 	add.w	r3, r7, #12
 802162c:	2264      	movs	r2, #100	; 0x64
 802162e:	2100      	movs	r1, #0
 8021630:	4618      	mov	r0, r3
 8021632:	f005 f91f 	bl	8026874 <memset>
  int32_t PHYLinkState = 0;
 8021636:	2300      	movs	r3, #0
 8021638:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 802163a:	2300      	movs	r3, #0
 802163c:	67fb      	str	r3, [r7, #124]	; 0x7c
 802163e:	2300      	movs	r3, #0
 8021640:	67bb      	str	r3, [r7, #120]	; 0x78
 8021642:	2300      	movs	r3, #0
 8021644:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8021646:	483a      	ldr	r0, [pc, #232]	; (8021730 <ethernet_link_check_state+0x110>)
 8021648:	f7f8 f90b 	bl	8019862 <DP83848_GetLinkState>
 802164c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 802164e:	687b      	ldr	r3, [r7, #4]
 8021650:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021654:	089b      	lsrs	r3, r3, #2
 8021656:	f003 0301 	and.w	r3, r3, #1
 802165a:	b2db      	uxtb	r3, r3
 802165c:	2b00      	cmp	r3, #0
 802165e:	d00c      	beq.n	802167a <ethernet_link_check_state+0x5a>
 8021660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021662:	2b01      	cmp	r3, #1
 8021664:	dc09      	bgt.n	802167a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8021666:	4833      	ldr	r0, [pc, #204]	; (8021734 <ethernet_link_check_state+0x114>)
 8021668:	f7f9 fbe3 	bl	801ae32 <HAL_ETH_Stop>
    netif_set_down(netif);
 802166c:	6878      	ldr	r0, [r7, #4]
 802166e:	f001 f84b 	bl	8022708 <netif_set_down>
    netif_set_link_down(netif);
 8021672:	6878      	ldr	r0, [r7, #4]
 8021674:	f001 f8ae 	bl	80227d4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8021678:	e055      	b.n	8021726 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021680:	f003 0304 	and.w	r3, r3, #4
 8021684:	2b00      	cmp	r3, #0
 8021686:	d14e      	bne.n	8021726 <ethernet_link_check_state+0x106>
 8021688:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802168a:	2b01      	cmp	r3, #1
 802168c:	dd4b      	ble.n	8021726 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 802168e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021690:	3b02      	subs	r3, #2
 8021692:	2b03      	cmp	r3, #3
 8021694:	d82a      	bhi.n	80216ec <ethernet_link_check_state+0xcc>
 8021696:	a201      	add	r2, pc, #4	; (adr r2, 802169c <ethernet_link_check_state+0x7c>)
 8021698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802169c:	080216ad 	.word	0x080216ad
 80216a0:	080216bf 	.word	0x080216bf
 80216a4:	080216cf 	.word	0x080216cf
 80216a8:	080216df 	.word	0x080216df
      duplex = ETH_FULLDUPLEX_MODE;
 80216ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80216b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80216b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80216b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80216b8:	2301      	movs	r3, #1
 80216ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80216bc:	e017      	b.n	80216ee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80216be:	2300      	movs	r3, #0
 80216c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80216c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80216c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80216c8:	2301      	movs	r3, #1
 80216ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80216cc:	e00f      	b.n	80216ee <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80216ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80216d2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80216d4:	2300      	movs	r3, #0
 80216d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80216d8:	2301      	movs	r3, #1
 80216da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80216dc:	e007      	b.n	80216ee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80216de:	2300      	movs	r3, #0
 80216e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80216e2:	2300      	movs	r3, #0
 80216e4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80216e6:	2301      	movs	r3, #1
 80216e8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80216ea:	e000      	b.n	80216ee <ethernet_link_check_state+0xce>
      break;
 80216ec:	bf00      	nop
    if(linkchanged)
 80216ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	d018      	beq.n	8021726 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80216f4:	f107 030c 	add.w	r3, r7, #12
 80216f8:	4619      	mov	r1, r3
 80216fa:	480e      	ldr	r0, [pc, #56]	; (8021734 <ethernet_link_check_state+0x114>)
 80216fc:	f7f9 ff46 	bl	801b58c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8021700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021702:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8021704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021706:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8021708:	f107 030c 	add.w	r3, r7, #12
 802170c:	4619      	mov	r1, r3
 802170e:	4809      	ldr	r0, [pc, #36]	; (8021734 <ethernet_link_check_state+0x114>)
 8021710:	f7fa f826 	bl	801b760 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8021714:	4807      	ldr	r0, [pc, #28]	; (8021734 <ethernet_link_check_state+0x114>)
 8021716:	f7f9 fb2d 	bl	801ad74 <HAL_ETH_Start>
      netif_set_up(netif);
 802171a:	6878      	ldr	r0, [r7, #4]
 802171c:	f000 ff88 	bl	8022630 <netif_set_up>
      netif_set_link_up(netif);
 8021720:	6878      	ldr	r0, [r7, #4]
 8021722:	f001 f823 	bl	802276c <netif_set_link_up>
}
 8021726:	bf00      	nop
 8021728:	3780      	adds	r7, #128	; 0x80
 802172a:	46bd      	mov	sp, r7
 802172c:	bd80      	pop	{r7, pc}
 802172e:	bf00      	nop
 8021730:	200127b4 	.word	0x200127b4
 8021734:	200126cc 	.word	0x200126cc

08021738 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8021738:	b580      	push	{r7, lr}
 802173a:	b086      	sub	sp, #24
 802173c:	af02      	add	r7, sp, #8
 802173e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8021740:	4812      	ldr	r0, [pc, #72]	; (802178c <HAL_ETH_RxAllocateCallback+0x54>)
 8021742:	f000 fca5 	bl	8022090 <memp_malloc_pool>
 8021746:	60f8      	str	r0, [r7, #12]
	if (p)
 8021748:	68fb      	ldr	r3, [r7, #12]
 802174a:	2b00      	cmp	r3, #0
 802174c:	d014      	beq.n	8021778 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 802174e:	68fb      	ldr	r3, [r7, #12]
 8021750:	f103 0214 	add.w	r2, r3, #20
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 8021758:	68fb      	ldr	r3, [r7, #12]
 802175a:	4a0d      	ldr	r2, [pc, #52]	; (8021790 <HAL_ETH_RxAllocateCallback+0x58>)
 802175c:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 802175e:	687b      	ldr	r3, [r7, #4]
 8021760:	681b      	ldr	r3, [r3, #0]
 8021762:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8021766:	9201      	str	r2, [sp, #4]
 8021768:	9300      	str	r3, [sp, #0]
 802176a:	68fb      	ldr	r3, [r7, #12]
 802176c:	2241      	movs	r2, #65	; 0x41
 802176e:	2100      	movs	r1, #0
 8021770:	2000      	movs	r0, #0
 8021772:	f001 fa75 	bl	8022c60 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8021776:	e005      	b.n	8021784 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 8021778:	4b06      	ldr	r3, [pc, #24]	; (8021794 <HAL_ETH_RxAllocateCallback+0x5c>)
 802177a:	2201      	movs	r2, #1
 802177c:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 802177e:	687b      	ldr	r3, [r7, #4]
 8021780:	2200      	movs	r2, #0
 8021782:	601a      	str	r2, [r3, #0]
}
 8021784:	bf00      	nop
 8021786:	3710      	adds	r7, #16
 8021788:	46bd      	mov	sp, r7
 802178a:	bd80      	pop	{r7, pc}
 802178c:	0802dd6c 	.word	0x0802dd6c
 8021790:	080213c1 	.word	0x080213c1
 8021794:	200126c8 	.word	0x200126c8

08021798 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8021798:	b580      	push	{r7, lr}
 802179a:	b088      	sub	sp, #32
 802179c:	af00      	add	r7, sp, #0
 802179e:	60f8      	str	r0, [r7, #12]
 80217a0:	60b9      	str	r1, [r7, #8]
 80217a2:	607a      	str	r2, [r7, #4]
 80217a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 80217a6:	68fb      	ldr	r3, [r7, #12]
 80217a8:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80217aa:	68bb      	ldr	r3, [r7, #8]
 80217ac:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 80217ae:	2300      	movs	r3, #0
 80217b0:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80217b2:	687b      	ldr	r3, [r7, #4]
 80217b4:	3b14      	subs	r3, #20
 80217b6:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 80217b8:	69fb      	ldr	r3, [r7, #28]
 80217ba:	2200      	movs	r2, #0
 80217bc:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 80217be:	69fb      	ldr	r3, [r7, #28]
 80217c0:	2200      	movs	r2, #0
 80217c2:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 80217c4:	69fb      	ldr	r3, [r7, #28]
 80217c6:	887a      	ldrh	r2, [r7, #2]
 80217c8:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 80217ca:	69bb      	ldr	r3, [r7, #24]
 80217cc:	681b      	ldr	r3, [r3, #0]
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	d103      	bne.n	80217da <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 80217d2:	69bb      	ldr	r3, [r7, #24]
 80217d4:	69fa      	ldr	r2, [r7, #28]
 80217d6:	601a      	str	r2, [r3, #0]
 80217d8:	e003      	b.n	80217e2 <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 80217da:	697b      	ldr	r3, [r7, #20]
 80217dc:	681b      	ldr	r3, [r3, #0]
 80217de:	69fa      	ldr	r2, [r7, #28]
 80217e0:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 80217e2:	697b      	ldr	r3, [r7, #20]
 80217e4:	69fa      	ldr	r2, [r7, #28]
 80217e6:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 80217e8:	69bb      	ldr	r3, [r7, #24]
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	61fb      	str	r3, [r7, #28]
 80217ee:	e009      	b.n	8021804 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 80217f0:	69fb      	ldr	r3, [r7, #28]
 80217f2:	891a      	ldrh	r2, [r3, #8]
 80217f4:	887b      	ldrh	r3, [r7, #2]
 80217f6:	4413      	add	r3, r2
 80217f8:	b29a      	uxth	r2, r3
 80217fa:	69fb      	ldr	r3, [r7, #28]
 80217fc:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 80217fe:	69fb      	ldr	r3, [r7, #28]
 8021800:	681b      	ldr	r3, [r3, #0]
 8021802:	61fb      	str	r3, [r7, #28]
 8021804:	69fb      	ldr	r3, [r7, #28]
 8021806:	2b00      	cmp	r3, #0
 8021808:	d1f2      	bne.n	80217f0 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 802180a:	887b      	ldrh	r3, [r7, #2]
 802180c:	4619      	mov	r1, r3
 802180e:	6878      	ldr	r0, [r7, #4]
 8021810:	f7ff fc14 	bl	802103c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8021814:	bf00      	nop
 8021816:	3720      	adds	r7, #32
 8021818:	46bd      	mov	sp, r7
 802181a:	bd80      	pop	{r7, pc}

0802181c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 802181c:	b480      	push	{r7}
 802181e:	b083      	sub	sp, #12
 8021820:	af00      	add	r7, sp, #0
 8021822:	4603      	mov	r3, r0
 8021824:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8021826:	88fb      	ldrh	r3, [r7, #6]
 8021828:	021b      	lsls	r3, r3, #8
 802182a:	b21a      	sxth	r2, r3
 802182c:	88fb      	ldrh	r3, [r7, #6]
 802182e:	0a1b      	lsrs	r3, r3, #8
 8021830:	b29b      	uxth	r3, r3
 8021832:	b21b      	sxth	r3, r3
 8021834:	4313      	orrs	r3, r2
 8021836:	b21b      	sxth	r3, r3
 8021838:	b29b      	uxth	r3, r3
}
 802183a:	4618      	mov	r0, r3
 802183c:	370c      	adds	r7, #12
 802183e:	46bd      	mov	sp, r7
 8021840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021844:	4770      	bx	lr

08021846 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8021846:	b580      	push	{r7, lr}
 8021848:	b082      	sub	sp, #8
 802184a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 802184c:	2300      	movs	r3, #0
 802184e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8021850:	f000 f8d2 	bl	80219f8 <mem_init>
  memp_init();
 8021854:	f000 fbd8 	bl	8022008 <memp_init>
  pbuf_init();
  netif_init();
 8021858:	f000 fcfc 	bl	8022254 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 802185c:	f001 ff9a 	bl	8023794 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8021860:	f001 ff16 	bl	8023690 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8021864:	bf00      	nop
 8021866:	3708      	adds	r7, #8
 8021868:	46bd      	mov	sp, r7
 802186a:	bd80      	pop	{r7, pc}

0802186c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 802186c:	b480      	push	{r7}
 802186e:	b083      	sub	sp, #12
 8021870:	af00      	add	r7, sp, #0
 8021872:	4603      	mov	r3, r0
 8021874:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8021876:	4b05      	ldr	r3, [pc, #20]	; (802188c <ptr_to_mem+0x20>)
 8021878:	681a      	ldr	r2, [r3, #0]
 802187a:	88fb      	ldrh	r3, [r7, #6]
 802187c:	4413      	add	r3, r2
}
 802187e:	4618      	mov	r0, r3
 8021880:	370c      	adds	r7, #12
 8021882:	46bd      	mov	sp, r7
 8021884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021888:	4770      	bx	lr
 802188a:	bf00      	nop
 802188c:	20012e40 	.word	0x20012e40

08021890 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8021890:	b480      	push	{r7}
 8021892:	b083      	sub	sp, #12
 8021894:	af00      	add	r7, sp, #0
 8021896:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8021898:	4b05      	ldr	r3, [pc, #20]	; (80218b0 <mem_to_ptr+0x20>)
 802189a:	681b      	ldr	r3, [r3, #0]
 802189c:	687a      	ldr	r2, [r7, #4]
 802189e:	1ad3      	subs	r3, r2, r3
 80218a0:	b29b      	uxth	r3, r3
}
 80218a2:	4618      	mov	r0, r3
 80218a4:	370c      	adds	r7, #12
 80218a6:	46bd      	mov	sp, r7
 80218a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ac:	4770      	bx	lr
 80218ae:	bf00      	nop
 80218b0:	20012e40 	.word	0x20012e40

080218b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80218b4:	b590      	push	{r4, r7, lr}
 80218b6:	b085      	sub	sp, #20
 80218b8:	af00      	add	r7, sp, #0
 80218ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80218bc:	4b45      	ldr	r3, [pc, #276]	; (80219d4 <plug_holes+0x120>)
 80218be:	681b      	ldr	r3, [r3, #0]
 80218c0:	687a      	ldr	r2, [r7, #4]
 80218c2:	429a      	cmp	r2, r3
 80218c4:	d206      	bcs.n	80218d4 <plug_holes+0x20>
 80218c6:	4b44      	ldr	r3, [pc, #272]	; (80219d8 <plug_holes+0x124>)
 80218c8:	f240 12df 	movw	r2, #479	; 0x1df
 80218cc:	4943      	ldr	r1, [pc, #268]	; (80219dc <plug_holes+0x128>)
 80218ce:	4844      	ldr	r0, [pc, #272]	; (80219e0 <plug_holes+0x12c>)
 80218d0:	f005 f8b8 	bl	8026a44 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80218d4:	4b43      	ldr	r3, [pc, #268]	; (80219e4 <plug_holes+0x130>)
 80218d6:	681b      	ldr	r3, [r3, #0]
 80218d8:	687a      	ldr	r2, [r7, #4]
 80218da:	429a      	cmp	r2, r3
 80218dc:	d306      	bcc.n	80218ec <plug_holes+0x38>
 80218de:	4b3e      	ldr	r3, [pc, #248]	; (80219d8 <plug_holes+0x124>)
 80218e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80218e4:	4940      	ldr	r1, [pc, #256]	; (80219e8 <plug_holes+0x134>)
 80218e6:	483e      	ldr	r0, [pc, #248]	; (80219e0 <plug_holes+0x12c>)
 80218e8:	f005 f8ac 	bl	8026a44 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	791b      	ldrb	r3, [r3, #4]
 80218f0:	2b00      	cmp	r3, #0
 80218f2:	d006      	beq.n	8021902 <plug_holes+0x4e>
 80218f4:	4b38      	ldr	r3, [pc, #224]	; (80219d8 <plug_holes+0x124>)
 80218f6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80218fa:	493c      	ldr	r1, [pc, #240]	; (80219ec <plug_holes+0x138>)
 80218fc:	4838      	ldr	r0, [pc, #224]	; (80219e0 <plug_holes+0x12c>)
 80218fe:	f005 f8a1 	bl	8026a44 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8021902:	687b      	ldr	r3, [r7, #4]
 8021904:	881b      	ldrh	r3, [r3, #0]
 8021906:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802190a:	d906      	bls.n	802191a <plug_holes+0x66>
 802190c:	4b32      	ldr	r3, [pc, #200]	; (80219d8 <plug_holes+0x124>)
 802190e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8021912:	4937      	ldr	r1, [pc, #220]	; (80219f0 <plug_holes+0x13c>)
 8021914:	4832      	ldr	r0, [pc, #200]	; (80219e0 <plug_holes+0x12c>)
 8021916:	f005 f895 	bl	8026a44 <iprintf>

  nmem = ptr_to_mem(mem->next);
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	881b      	ldrh	r3, [r3, #0]
 802191e:	4618      	mov	r0, r3
 8021920:	f7ff ffa4 	bl	802186c <ptr_to_mem>
 8021924:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8021926:	687a      	ldr	r2, [r7, #4]
 8021928:	68fb      	ldr	r3, [r7, #12]
 802192a:	429a      	cmp	r2, r3
 802192c:	d024      	beq.n	8021978 <plug_holes+0xc4>
 802192e:	68fb      	ldr	r3, [r7, #12]
 8021930:	791b      	ldrb	r3, [r3, #4]
 8021932:	2b00      	cmp	r3, #0
 8021934:	d120      	bne.n	8021978 <plug_holes+0xc4>
 8021936:	4b2b      	ldr	r3, [pc, #172]	; (80219e4 <plug_holes+0x130>)
 8021938:	681b      	ldr	r3, [r3, #0]
 802193a:	68fa      	ldr	r2, [r7, #12]
 802193c:	429a      	cmp	r2, r3
 802193e:	d01b      	beq.n	8021978 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8021940:	4b2c      	ldr	r3, [pc, #176]	; (80219f4 <plug_holes+0x140>)
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	68fa      	ldr	r2, [r7, #12]
 8021946:	429a      	cmp	r2, r3
 8021948:	d102      	bne.n	8021950 <plug_holes+0x9c>
      lfree = mem;
 802194a:	4a2a      	ldr	r2, [pc, #168]	; (80219f4 <plug_holes+0x140>)
 802194c:	687b      	ldr	r3, [r7, #4]
 802194e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8021950:	68fb      	ldr	r3, [r7, #12]
 8021952:	881a      	ldrh	r2, [r3, #0]
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8021958:	68fb      	ldr	r3, [r7, #12]
 802195a:	881b      	ldrh	r3, [r3, #0]
 802195c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021960:	d00a      	beq.n	8021978 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8021962:	68fb      	ldr	r3, [r7, #12]
 8021964:	881b      	ldrh	r3, [r3, #0]
 8021966:	4618      	mov	r0, r3
 8021968:	f7ff ff80 	bl	802186c <ptr_to_mem>
 802196c:	4604      	mov	r4, r0
 802196e:	6878      	ldr	r0, [r7, #4]
 8021970:	f7ff ff8e 	bl	8021890 <mem_to_ptr>
 8021974:	4603      	mov	r3, r0
 8021976:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8021978:	687b      	ldr	r3, [r7, #4]
 802197a:	885b      	ldrh	r3, [r3, #2]
 802197c:	4618      	mov	r0, r3
 802197e:	f7ff ff75 	bl	802186c <ptr_to_mem>
 8021982:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8021984:	68ba      	ldr	r2, [r7, #8]
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	429a      	cmp	r2, r3
 802198a:	d01f      	beq.n	80219cc <plug_holes+0x118>
 802198c:	68bb      	ldr	r3, [r7, #8]
 802198e:	791b      	ldrb	r3, [r3, #4]
 8021990:	2b00      	cmp	r3, #0
 8021992:	d11b      	bne.n	80219cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8021994:	4b17      	ldr	r3, [pc, #92]	; (80219f4 <plug_holes+0x140>)
 8021996:	681b      	ldr	r3, [r3, #0]
 8021998:	687a      	ldr	r2, [r7, #4]
 802199a:	429a      	cmp	r2, r3
 802199c:	d102      	bne.n	80219a4 <plug_holes+0xf0>
      lfree = pmem;
 802199e:	4a15      	ldr	r2, [pc, #84]	; (80219f4 <plug_holes+0x140>)
 80219a0:	68bb      	ldr	r3, [r7, #8]
 80219a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	881a      	ldrh	r2, [r3, #0]
 80219a8:	68bb      	ldr	r3, [r7, #8]
 80219aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	881b      	ldrh	r3, [r3, #0]
 80219b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80219b4:	d00a      	beq.n	80219cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80219b6:	687b      	ldr	r3, [r7, #4]
 80219b8:	881b      	ldrh	r3, [r3, #0]
 80219ba:	4618      	mov	r0, r3
 80219bc:	f7ff ff56 	bl	802186c <ptr_to_mem>
 80219c0:	4604      	mov	r4, r0
 80219c2:	68b8      	ldr	r0, [r7, #8]
 80219c4:	f7ff ff64 	bl	8021890 <mem_to_ptr>
 80219c8:	4603      	mov	r3, r0
 80219ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80219cc:	bf00      	nop
 80219ce:	3714      	adds	r7, #20
 80219d0:	46bd      	mov	sp, r7
 80219d2:	bd90      	pop	{r4, r7, pc}
 80219d4:	20012e40 	.word	0x20012e40
 80219d8:	0802c318 	.word	0x0802c318
 80219dc:	0802c348 	.word	0x0802c348
 80219e0:	0802c360 	.word	0x0802c360
 80219e4:	20012e44 	.word	0x20012e44
 80219e8:	0802c388 	.word	0x0802c388
 80219ec:	0802c3a4 	.word	0x0802c3a4
 80219f0:	0802c3c0 	.word	0x0802c3c0
 80219f4:	20012e48 	.word	0x20012e48

080219f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80219f8:	b580      	push	{r7, lr}
 80219fa:	b082      	sub	sp, #8
 80219fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80219fe:	4b18      	ldr	r3, [pc, #96]	; (8021a60 <mem_init+0x68>)
 8021a00:	3303      	adds	r3, #3
 8021a02:	f023 0303 	bic.w	r3, r3, #3
 8021a06:	461a      	mov	r2, r3
 8021a08:	4b16      	ldr	r3, [pc, #88]	; (8021a64 <mem_init+0x6c>)
 8021a0a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8021a0c:	4b15      	ldr	r3, [pc, #84]	; (8021a64 <mem_init+0x6c>)
 8021a0e:	681b      	ldr	r3, [r3, #0]
 8021a10:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8021a18:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	2200      	movs	r2, #0
 8021a1e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8021a20:	687b      	ldr	r3, [r7, #4]
 8021a22:	2200      	movs	r2, #0
 8021a24:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8021a26:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8021a2a:	f7ff ff1f 	bl	802186c <ptr_to_mem>
 8021a2e:	4603      	mov	r3, r0
 8021a30:	4a0d      	ldr	r2, [pc, #52]	; (8021a68 <mem_init+0x70>)
 8021a32:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8021a34:	4b0c      	ldr	r3, [pc, #48]	; (8021a68 <mem_init+0x70>)
 8021a36:	681b      	ldr	r3, [r3, #0]
 8021a38:	2201      	movs	r2, #1
 8021a3a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8021a3c:	4b0a      	ldr	r3, [pc, #40]	; (8021a68 <mem_init+0x70>)
 8021a3e:	681b      	ldr	r3, [r3, #0]
 8021a40:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8021a44:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8021a46:	4b08      	ldr	r3, [pc, #32]	; (8021a68 <mem_init+0x70>)
 8021a48:	681b      	ldr	r3, [r3, #0]
 8021a4a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8021a4e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8021a50:	4b04      	ldr	r3, [pc, #16]	; (8021a64 <mem_init+0x6c>)
 8021a52:	681b      	ldr	r3, [r3, #0]
 8021a54:	4a05      	ldr	r2, [pc, #20]	; (8021a6c <mem_init+0x74>)
 8021a56:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8021a58:	bf00      	nop
 8021a5a:	3708      	adds	r7, #8
 8021a5c:	46bd      	mov	sp, r7
 8021a5e:	bd80      	pop	{r7, pc}
 8021a60:	200127ec 	.word	0x200127ec
 8021a64:	20012e40 	.word	0x20012e40
 8021a68:	20012e44 	.word	0x20012e44
 8021a6c:	20012e48 	.word	0x20012e48

08021a70 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8021a70:	b580      	push	{r7, lr}
 8021a72:	b086      	sub	sp, #24
 8021a74:	af00      	add	r7, sp, #0
 8021a76:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8021a78:	6878      	ldr	r0, [r7, #4]
 8021a7a:	f7ff ff09 	bl	8021890 <mem_to_ptr>
 8021a7e:	4603      	mov	r3, r0
 8021a80:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	881b      	ldrh	r3, [r3, #0]
 8021a86:	4618      	mov	r0, r3
 8021a88:	f7ff fef0 	bl	802186c <ptr_to_mem>
 8021a8c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	885b      	ldrh	r3, [r3, #2]
 8021a92:	4618      	mov	r0, r3
 8021a94:	f7ff feea 	bl	802186c <ptr_to_mem>
 8021a98:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	881b      	ldrh	r3, [r3, #0]
 8021a9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021aa2:	d818      	bhi.n	8021ad6 <mem_link_valid+0x66>
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	885b      	ldrh	r3, [r3, #2]
 8021aa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021aac:	d813      	bhi.n	8021ad6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8021ab2:	8afa      	ldrh	r2, [r7, #22]
 8021ab4:	429a      	cmp	r2, r3
 8021ab6:	d004      	beq.n	8021ac2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8021ab8:	68fb      	ldr	r3, [r7, #12]
 8021aba:	881b      	ldrh	r3, [r3, #0]
 8021abc:	8afa      	ldrh	r2, [r7, #22]
 8021abe:	429a      	cmp	r2, r3
 8021ac0:	d109      	bne.n	8021ad6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8021ac2:	4b08      	ldr	r3, [pc, #32]	; (8021ae4 <mem_link_valid+0x74>)
 8021ac4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8021ac6:	693a      	ldr	r2, [r7, #16]
 8021ac8:	429a      	cmp	r2, r3
 8021aca:	d006      	beq.n	8021ada <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8021acc:	693b      	ldr	r3, [r7, #16]
 8021ace:	885b      	ldrh	r3, [r3, #2]
 8021ad0:	8afa      	ldrh	r2, [r7, #22]
 8021ad2:	429a      	cmp	r2, r3
 8021ad4:	d001      	beq.n	8021ada <mem_link_valid+0x6a>
    return 0;
 8021ad6:	2300      	movs	r3, #0
 8021ad8:	e000      	b.n	8021adc <mem_link_valid+0x6c>
  }
  return 1;
 8021ada:	2301      	movs	r3, #1
}
 8021adc:	4618      	mov	r0, r3
 8021ade:	3718      	adds	r7, #24
 8021ae0:	46bd      	mov	sp, r7
 8021ae2:	bd80      	pop	{r7, pc}
 8021ae4:	20012e44 	.word	0x20012e44

08021ae8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8021ae8:	b580      	push	{r7, lr}
 8021aea:	b084      	sub	sp, #16
 8021aec:	af00      	add	r7, sp, #0
 8021aee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8021af0:	687b      	ldr	r3, [r7, #4]
 8021af2:	2b00      	cmp	r3, #0
 8021af4:	d04c      	beq.n	8021b90 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8021af6:	687b      	ldr	r3, [r7, #4]
 8021af8:	f003 0303 	and.w	r3, r3, #3
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d007      	beq.n	8021b10 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8021b00:	4b25      	ldr	r3, [pc, #148]	; (8021b98 <mem_free+0xb0>)
 8021b02:	f240 2273 	movw	r2, #627	; 0x273
 8021b06:	4925      	ldr	r1, [pc, #148]	; (8021b9c <mem_free+0xb4>)
 8021b08:	4825      	ldr	r0, [pc, #148]	; (8021ba0 <mem_free+0xb8>)
 8021b0a:	f004 ff9b 	bl	8026a44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021b0e:	e040      	b.n	8021b92 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8021b10:	687b      	ldr	r3, [r7, #4]
 8021b12:	3b08      	subs	r3, #8
 8021b14:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8021b16:	4b23      	ldr	r3, [pc, #140]	; (8021ba4 <mem_free+0xbc>)
 8021b18:	681b      	ldr	r3, [r3, #0]
 8021b1a:	68fa      	ldr	r2, [r7, #12]
 8021b1c:	429a      	cmp	r2, r3
 8021b1e:	d306      	bcc.n	8021b2e <mem_free+0x46>
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	f103 020c 	add.w	r2, r3, #12
 8021b26:	4b20      	ldr	r3, [pc, #128]	; (8021ba8 <mem_free+0xc0>)
 8021b28:	681b      	ldr	r3, [r3, #0]
 8021b2a:	429a      	cmp	r2, r3
 8021b2c:	d907      	bls.n	8021b3e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8021b2e:	4b1a      	ldr	r3, [pc, #104]	; (8021b98 <mem_free+0xb0>)
 8021b30:	f240 227f 	movw	r2, #639	; 0x27f
 8021b34:	491d      	ldr	r1, [pc, #116]	; (8021bac <mem_free+0xc4>)
 8021b36:	481a      	ldr	r0, [pc, #104]	; (8021ba0 <mem_free+0xb8>)
 8021b38:	f004 ff84 	bl	8026a44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021b3c:	e029      	b.n	8021b92 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8021b3e:	68fb      	ldr	r3, [r7, #12]
 8021b40:	791b      	ldrb	r3, [r3, #4]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d107      	bne.n	8021b56 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8021b46:	4b14      	ldr	r3, [pc, #80]	; (8021b98 <mem_free+0xb0>)
 8021b48:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8021b4c:	4918      	ldr	r1, [pc, #96]	; (8021bb0 <mem_free+0xc8>)
 8021b4e:	4814      	ldr	r0, [pc, #80]	; (8021ba0 <mem_free+0xb8>)
 8021b50:	f004 ff78 	bl	8026a44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021b54:	e01d      	b.n	8021b92 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8021b56:	68f8      	ldr	r0, [r7, #12]
 8021b58:	f7ff ff8a 	bl	8021a70 <mem_link_valid>
 8021b5c:	4603      	mov	r3, r0
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d107      	bne.n	8021b72 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8021b62:	4b0d      	ldr	r3, [pc, #52]	; (8021b98 <mem_free+0xb0>)
 8021b64:	f240 2295 	movw	r2, #661	; 0x295
 8021b68:	4912      	ldr	r1, [pc, #72]	; (8021bb4 <mem_free+0xcc>)
 8021b6a:	480d      	ldr	r0, [pc, #52]	; (8021ba0 <mem_free+0xb8>)
 8021b6c:	f004 ff6a 	bl	8026a44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8021b70:	e00f      	b.n	8021b92 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8021b72:	68fb      	ldr	r3, [r7, #12]
 8021b74:	2200      	movs	r2, #0
 8021b76:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8021b78:	4b0f      	ldr	r3, [pc, #60]	; (8021bb8 <mem_free+0xd0>)
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	68fa      	ldr	r2, [r7, #12]
 8021b7e:	429a      	cmp	r2, r3
 8021b80:	d202      	bcs.n	8021b88 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8021b82:	4a0d      	ldr	r2, [pc, #52]	; (8021bb8 <mem_free+0xd0>)
 8021b84:	68fb      	ldr	r3, [r7, #12]
 8021b86:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8021b88:	68f8      	ldr	r0, [r7, #12]
 8021b8a:	f7ff fe93 	bl	80218b4 <plug_holes>
 8021b8e:	e000      	b.n	8021b92 <mem_free+0xaa>
    return;
 8021b90:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8021b92:	3710      	adds	r7, #16
 8021b94:	46bd      	mov	sp, r7
 8021b96:	bd80      	pop	{r7, pc}
 8021b98:	0802c318 	.word	0x0802c318
 8021b9c:	0802c3ec 	.word	0x0802c3ec
 8021ba0:	0802c360 	.word	0x0802c360
 8021ba4:	20012e40 	.word	0x20012e40
 8021ba8:	20012e44 	.word	0x20012e44
 8021bac:	0802c410 	.word	0x0802c410
 8021bb0:	0802c42c 	.word	0x0802c42c
 8021bb4:	0802c454 	.word	0x0802c454
 8021bb8:	20012e48 	.word	0x20012e48

08021bbc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8021bbc:	b580      	push	{r7, lr}
 8021bbe:	b088      	sub	sp, #32
 8021bc0:	af00      	add	r7, sp, #0
 8021bc2:	6078      	str	r0, [r7, #4]
 8021bc4:	460b      	mov	r3, r1
 8021bc6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8021bc8:	887b      	ldrh	r3, [r7, #2]
 8021bca:	3303      	adds	r3, #3
 8021bcc:	b29b      	uxth	r3, r3
 8021bce:	f023 0303 	bic.w	r3, r3, #3
 8021bd2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8021bd4:	8bfb      	ldrh	r3, [r7, #30]
 8021bd6:	2b0b      	cmp	r3, #11
 8021bd8:	d801      	bhi.n	8021bde <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8021bda:	230c      	movs	r3, #12
 8021bdc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8021bde:	8bfb      	ldrh	r3, [r7, #30]
 8021be0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021be4:	d803      	bhi.n	8021bee <mem_trim+0x32>
 8021be6:	8bfa      	ldrh	r2, [r7, #30]
 8021be8:	887b      	ldrh	r3, [r7, #2]
 8021bea:	429a      	cmp	r2, r3
 8021bec:	d201      	bcs.n	8021bf2 <mem_trim+0x36>
    return NULL;
 8021bee:	2300      	movs	r3, #0
 8021bf0:	e0cc      	b.n	8021d8c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8021bf2:	4b68      	ldr	r3, [pc, #416]	; (8021d94 <mem_trim+0x1d8>)
 8021bf4:	681b      	ldr	r3, [r3, #0]
 8021bf6:	687a      	ldr	r2, [r7, #4]
 8021bf8:	429a      	cmp	r2, r3
 8021bfa:	d304      	bcc.n	8021c06 <mem_trim+0x4a>
 8021bfc:	4b66      	ldr	r3, [pc, #408]	; (8021d98 <mem_trim+0x1dc>)
 8021bfe:	681b      	ldr	r3, [r3, #0]
 8021c00:	687a      	ldr	r2, [r7, #4]
 8021c02:	429a      	cmp	r2, r3
 8021c04:	d306      	bcc.n	8021c14 <mem_trim+0x58>
 8021c06:	4b65      	ldr	r3, [pc, #404]	; (8021d9c <mem_trim+0x1e0>)
 8021c08:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021c0c:	4964      	ldr	r1, [pc, #400]	; (8021da0 <mem_trim+0x1e4>)
 8021c0e:	4865      	ldr	r0, [pc, #404]	; (8021da4 <mem_trim+0x1e8>)
 8021c10:	f004 ff18 	bl	8026a44 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8021c14:	4b5f      	ldr	r3, [pc, #380]	; (8021d94 <mem_trim+0x1d8>)
 8021c16:	681b      	ldr	r3, [r3, #0]
 8021c18:	687a      	ldr	r2, [r7, #4]
 8021c1a:	429a      	cmp	r2, r3
 8021c1c:	d304      	bcc.n	8021c28 <mem_trim+0x6c>
 8021c1e:	4b5e      	ldr	r3, [pc, #376]	; (8021d98 <mem_trim+0x1dc>)
 8021c20:	681b      	ldr	r3, [r3, #0]
 8021c22:	687a      	ldr	r2, [r7, #4]
 8021c24:	429a      	cmp	r2, r3
 8021c26:	d301      	bcc.n	8021c2c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8021c28:	687b      	ldr	r3, [r7, #4]
 8021c2a:	e0af      	b.n	8021d8c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	3b08      	subs	r3, #8
 8021c30:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8021c32:	69b8      	ldr	r0, [r7, #24]
 8021c34:	f7ff fe2c 	bl	8021890 <mem_to_ptr>
 8021c38:	4603      	mov	r3, r0
 8021c3a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8021c3c:	69bb      	ldr	r3, [r7, #24]
 8021c3e:	881a      	ldrh	r2, [r3, #0]
 8021c40:	8afb      	ldrh	r3, [r7, #22]
 8021c42:	1ad3      	subs	r3, r2, r3
 8021c44:	b29b      	uxth	r3, r3
 8021c46:	3b08      	subs	r3, #8
 8021c48:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8021c4a:	8bfa      	ldrh	r2, [r7, #30]
 8021c4c:	8abb      	ldrh	r3, [r7, #20]
 8021c4e:	429a      	cmp	r2, r3
 8021c50:	d906      	bls.n	8021c60 <mem_trim+0xa4>
 8021c52:	4b52      	ldr	r3, [pc, #328]	; (8021d9c <mem_trim+0x1e0>)
 8021c54:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8021c58:	4953      	ldr	r1, [pc, #332]	; (8021da8 <mem_trim+0x1ec>)
 8021c5a:	4852      	ldr	r0, [pc, #328]	; (8021da4 <mem_trim+0x1e8>)
 8021c5c:	f004 fef2 	bl	8026a44 <iprintf>
  if (newsize > size) {
 8021c60:	8bfa      	ldrh	r2, [r7, #30]
 8021c62:	8abb      	ldrh	r3, [r7, #20]
 8021c64:	429a      	cmp	r2, r3
 8021c66:	d901      	bls.n	8021c6c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8021c68:	2300      	movs	r3, #0
 8021c6a:	e08f      	b.n	8021d8c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8021c6c:	8bfa      	ldrh	r2, [r7, #30]
 8021c6e:	8abb      	ldrh	r3, [r7, #20]
 8021c70:	429a      	cmp	r2, r3
 8021c72:	d101      	bne.n	8021c78 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	e089      	b.n	8021d8c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8021c78:	69bb      	ldr	r3, [r7, #24]
 8021c7a:	881b      	ldrh	r3, [r3, #0]
 8021c7c:	4618      	mov	r0, r3
 8021c7e:	f7ff fdf5 	bl	802186c <ptr_to_mem>
 8021c82:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8021c84:	693b      	ldr	r3, [r7, #16]
 8021c86:	791b      	ldrb	r3, [r3, #4]
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d13f      	bne.n	8021d0c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8021c8c:	69bb      	ldr	r3, [r7, #24]
 8021c8e:	881b      	ldrh	r3, [r3, #0]
 8021c90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021c94:	d106      	bne.n	8021ca4 <mem_trim+0xe8>
 8021c96:	4b41      	ldr	r3, [pc, #260]	; (8021d9c <mem_trim+0x1e0>)
 8021c98:	f240 22f5 	movw	r2, #757	; 0x2f5
 8021c9c:	4943      	ldr	r1, [pc, #268]	; (8021dac <mem_trim+0x1f0>)
 8021c9e:	4841      	ldr	r0, [pc, #260]	; (8021da4 <mem_trim+0x1e8>)
 8021ca0:	f004 fed0 	bl	8026a44 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8021ca4:	693b      	ldr	r3, [r7, #16]
 8021ca6:	881b      	ldrh	r3, [r3, #0]
 8021ca8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8021caa:	8afa      	ldrh	r2, [r7, #22]
 8021cac:	8bfb      	ldrh	r3, [r7, #30]
 8021cae:	4413      	add	r3, r2
 8021cb0:	b29b      	uxth	r3, r3
 8021cb2:	3308      	adds	r3, #8
 8021cb4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8021cb6:	4b3e      	ldr	r3, [pc, #248]	; (8021db0 <mem_trim+0x1f4>)
 8021cb8:	681b      	ldr	r3, [r3, #0]
 8021cba:	693a      	ldr	r2, [r7, #16]
 8021cbc:	429a      	cmp	r2, r3
 8021cbe:	d106      	bne.n	8021cce <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8021cc0:	89fb      	ldrh	r3, [r7, #14]
 8021cc2:	4618      	mov	r0, r3
 8021cc4:	f7ff fdd2 	bl	802186c <ptr_to_mem>
 8021cc8:	4603      	mov	r3, r0
 8021cca:	4a39      	ldr	r2, [pc, #228]	; (8021db0 <mem_trim+0x1f4>)
 8021ccc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8021cce:	89fb      	ldrh	r3, [r7, #14]
 8021cd0:	4618      	mov	r0, r3
 8021cd2:	f7ff fdcb 	bl	802186c <ptr_to_mem>
 8021cd6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8021cd8:	693b      	ldr	r3, [r7, #16]
 8021cda:	2200      	movs	r2, #0
 8021cdc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8021cde:	693b      	ldr	r3, [r7, #16]
 8021ce0:	89ba      	ldrh	r2, [r7, #12]
 8021ce2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8021ce4:	693b      	ldr	r3, [r7, #16]
 8021ce6:	8afa      	ldrh	r2, [r7, #22]
 8021ce8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8021cea:	69bb      	ldr	r3, [r7, #24]
 8021cec:	89fa      	ldrh	r2, [r7, #14]
 8021cee:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8021cf0:	693b      	ldr	r3, [r7, #16]
 8021cf2:	881b      	ldrh	r3, [r3, #0]
 8021cf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021cf8:	d047      	beq.n	8021d8a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8021cfa:	693b      	ldr	r3, [r7, #16]
 8021cfc:	881b      	ldrh	r3, [r3, #0]
 8021cfe:	4618      	mov	r0, r3
 8021d00:	f7ff fdb4 	bl	802186c <ptr_to_mem>
 8021d04:	4602      	mov	r2, r0
 8021d06:	89fb      	ldrh	r3, [r7, #14]
 8021d08:	8053      	strh	r3, [r2, #2]
 8021d0a:	e03e      	b.n	8021d8a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8021d0c:	8bfb      	ldrh	r3, [r7, #30]
 8021d0e:	f103 0214 	add.w	r2, r3, #20
 8021d12:	8abb      	ldrh	r3, [r7, #20]
 8021d14:	429a      	cmp	r2, r3
 8021d16:	d838      	bhi.n	8021d8a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8021d18:	8afa      	ldrh	r2, [r7, #22]
 8021d1a:	8bfb      	ldrh	r3, [r7, #30]
 8021d1c:	4413      	add	r3, r2
 8021d1e:	b29b      	uxth	r3, r3
 8021d20:	3308      	adds	r3, #8
 8021d22:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8021d24:	69bb      	ldr	r3, [r7, #24]
 8021d26:	881b      	ldrh	r3, [r3, #0]
 8021d28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021d2c:	d106      	bne.n	8021d3c <mem_trim+0x180>
 8021d2e:	4b1b      	ldr	r3, [pc, #108]	; (8021d9c <mem_trim+0x1e0>)
 8021d30:	f240 3216 	movw	r2, #790	; 0x316
 8021d34:	491d      	ldr	r1, [pc, #116]	; (8021dac <mem_trim+0x1f0>)
 8021d36:	481b      	ldr	r0, [pc, #108]	; (8021da4 <mem_trim+0x1e8>)
 8021d38:	f004 fe84 	bl	8026a44 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8021d3c:	89fb      	ldrh	r3, [r7, #14]
 8021d3e:	4618      	mov	r0, r3
 8021d40:	f7ff fd94 	bl	802186c <ptr_to_mem>
 8021d44:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8021d46:	4b1a      	ldr	r3, [pc, #104]	; (8021db0 <mem_trim+0x1f4>)
 8021d48:	681b      	ldr	r3, [r3, #0]
 8021d4a:	693a      	ldr	r2, [r7, #16]
 8021d4c:	429a      	cmp	r2, r3
 8021d4e:	d202      	bcs.n	8021d56 <mem_trim+0x19a>
      lfree = mem2;
 8021d50:	4a17      	ldr	r2, [pc, #92]	; (8021db0 <mem_trim+0x1f4>)
 8021d52:	693b      	ldr	r3, [r7, #16]
 8021d54:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8021d56:	693b      	ldr	r3, [r7, #16]
 8021d58:	2200      	movs	r2, #0
 8021d5a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8021d5c:	69bb      	ldr	r3, [r7, #24]
 8021d5e:	881a      	ldrh	r2, [r3, #0]
 8021d60:	693b      	ldr	r3, [r7, #16]
 8021d62:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8021d64:	693b      	ldr	r3, [r7, #16]
 8021d66:	8afa      	ldrh	r2, [r7, #22]
 8021d68:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8021d6a:	69bb      	ldr	r3, [r7, #24]
 8021d6c:	89fa      	ldrh	r2, [r7, #14]
 8021d6e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8021d70:	693b      	ldr	r3, [r7, #16]
 8021d72:	881b      	ldrh	r3, [r3, #0]
 8021d74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021d78:	d007      	beq.n	8021d8a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8021d7a:	693b      	ldr	r3, [r7, #16]
 8021d7c:	881b      	ldrh	r3, [r3, #0]
 8021d7e:	4618      	mov	r0, r3
 8021d80:	f7ff fd74 	bl	802186c <ptr_to_mem>
 8021d84:	4602      	mov	r2, r0
 8021d86:	89fb      	ldrh	r3, [r7, #14]
 8021d88:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8021d8a:	687b      	ldr	r3, [r7, #4]
}
 8021d8c:	4618      	mov	r0, r3
 8021d8e:	3720      	adds	r7, #32
 8021d90:	46bd      	mov	sp, r7
 8021d92:	bd80      	pop	{r7, pc}
 8021d94:	20012e40 	.word	0x20012e40
 8021d98:	20012e44 	.word	0x20012e44
 8021d9c:	0802c318 	.word	0x0802c318
 8021da0:	0802c488 	.word	0x0802c488
 8021da4:	0802c360 	.word	0x0802c360
 8021da8:	0802c4a0 	.word	0x0802c4a0
 8021dac:	0802c4c0 	.word	0x0802c4c0
 8021db0:	20012e48 	.word	0x20012e48

08021db4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8021db4:	b580      	push	{r7, lr}
 8021db6:	b088      	sub	sp, #32
 8021db8:	af00      	add	r7, sp, #0
 8021dba:	4603      	mov	r3, r0
 8021dbc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8021dbe:	88fb      	ldrh	r3, [r7, #6]
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d101      	bne.n	8021dc8 <mem_malloc+0x14>
    return NULL;
 8021dc4:	2300      	movs	r3, #0
 8021dc6:	e0d9      	b.n	8021f7c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8021dc8:	88fb      	ldrh	r3, [r7, #6]
 8021dca:	3303      	adds	r3, #3
 8021dcc:	b29b      	uxth	r3, r3
 8021dce:	f023 0303 	bic.w	r3, r3, #3
 8021dd2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8021dd4:	8bbb      	ldrh	r3, [r7, #28]
 8021dd6:	2b0b      	cmp	r3, #11
 8021dd8:	d801      	bhi.n	8021dde <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8021dda:	230c      	movs	r3, #12
 8021ddc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8021dde:	8bbb      	ldrh	r3, [r7, #28]
 8021de0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021de4:	d803      	bhi.n	8021dee <mem_malloc+0x3a>
 8021de6:	8bba      	ldrh	r2, [r7, #28]
 8021de8:	88fb      	ldrh	r3, [r7, #6]
 8021dea:	429a      	cmp	r2, r3
 8021dec:	d201      	bcs.n	8021df2 <mem_malloc+0x3e>
    return NULL;
 8021dee:	2300      	movs	r3, #0
 8021df0:	e0c4      	b.n	8021f7c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8021df2:	4b64      	ldr	r3, [pc, #400]	; (8021f84 <mem_malloc+0x1d0>)
 8021df4:	681b      	ldr	r3, [r3, #0]
 8021df6:	4618      	mov	r0, r3
 8021df8:	f7ff fd4a 	bl	8021890 <mem_to_ptr>
 8021dfc:	4603      	mov	r3, r0
 8021dfe:	83fb      	strh	r3, [r7, #30]
 8021e00:	e0b4      	b.n	8021f6c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8021e02:	8bfb      	ldrh	r3, [r7, #30]
 8021e04:	4618      	mov	r0, r3
 8021e06:	f7ff fd31 	bl	802186c <ptr_to_mem>
 8021e0a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8021e0c:	697b      	ldr	r3, [r7, #20]
 8021e0e:	791b      	ldrb	r3, [r3, #4]
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	f040 80a4 	bne.w	8021f5e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8021e16:	697b      	ldr	r3, [r7, #20]
 8021e18:	881b      	ldrh	r3, [r3, #0]
 8021e1a:	461a      	mov	r2, r3
 8021e1c:	8bfb      	ldrh	r3, [r7, #30]
 8021e1e:	1ad3      	subs	r3, r2, r3
 8021e20:	f1a3 0208 	sub.w	r2, r3, #8
 8021e24:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8021e26:	429a      	cmp	r2, r3
 8021e28:	f0c0 8099 	bcc.w	8021f5e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8021e2c:	697b      	ldr	r3, [r7, #20]
 8021e2e:	881b      	ldrh	r3, [r3, #0]
 8021e30:	461a      	mov	r2, r3
 8021e32:	8bfb      	ldrh	r3, [r7, #30]
 8021e34:	1ad3      	subs	r3, r2, r3
 8021e36:	f1a3 0208 	sub.w	r2, r3, #8
 8021e3a:	8bbb      	ldrh	r3, [r7, #28]
 8021e3c:	3314      	adds	r3, #20
 8021e3e:	429a      	cmp	r2, r3
 8021e40:	d333      	bcc.n	8021eaa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8021e42:	8bfa      	ldrh	r2, [r7, #30]
 8021e44:	8bbb      	ldrh	r3, [r7, #28]
 8021e46:	4413      	add	r3, r2
 8021e48:	b29b      	uxth	r3, r3
 8021e4a:	3308      	adds	r3, #8
 8021e4c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8021e4e:	8a7b      	ldrh	r3, [r7, #18]
 8021e50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021e54:	d106      	bne.n	8021e64 <mem_malloc+0xb0>
 8021e56:	4b4c      	ldr	r3, [pc, #304]	; (8021f88 <mem_malloc+0x1d4>)
 8021e58:	f240 3287 	movw	r2, #903	; 0x387
 8021e5c:	494b      	ldr	r1, [pc, #300]	; (8021f8c <mem_malloc+0x1d8>)
 8021e5e:	484c      	ldr	r0, [pc, #304]	; (8021f90 <mem_malloc+0x1dc>)
 8021e60:	f004 fdf0 	bl	8026a44 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8021e64:	8a7b      	ldrh	r3, [r7, #18]
 8021e66:	4618      	mov	r0, r3
 8021e68:	f7ff fd00 	bl	802186c <ptr_to_mem>
 8021e6c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8021e6e:	68fb      	ldr	r3, [r7, #12]
 8021e70:	2200      	movs	r2, #0
 8021e72:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8021e74:	697b      	ldr	r3, [r7, #20]
 8021e76:	881a      	ldrh	r2, [r3, #0]
 8021e78:	68fb      	ldr	r3, [r7, #12]
 8021e7a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8021e7c:	68fb      	ldr	r3, [r7, #12]
 8021e7e:	8bfa      	ldrh	r2, [r7, #30]
 8021e80:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8021e82:	697b      	ldr	r3, [r7, #20]
 8021e84:	8a7a      	ldrh	r2, [r7, #18]
 8021e86:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8021e88:	697b      	ldr	r3, [r7, #20]
 8021e8a:	2201      	movs	r2, #1
 8021e8c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	881b      	ldrh	r3, [r3, #0]
 8021e92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021e96:	d00b      	beq.n	8021eb0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8021e98:	68fb      	ldr	r3, [r7, #12]
 8021e9a:	881b      	ldrh	r3, [r3, #0]
 8021e9c:	4618      	mov	r0, r3
 8021e9e:	f7ff fce5 	bl	802186c <ptr_to_mem>
 8021ea2:	4602      	mov	r2, r0
 8021ea4:	8a7b      	ldrh	r3, [r7, #18]
 8021ea6:	8053      	strh	r3, [r2, #2]
 8021ea8:	e002      	b.n	8021eb0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8021eaa:	697b      	ldr	r3, [r7, #20]
 8021eac:	2201      	movs	r2, #1
 8021eae:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8021eb0:	4b34      	ldr	r3, [pc, #208]	; (8021f84 <mem_malloc+0x1d0>)
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	697a      	ldr	r2, [r7, #20]
 8021eb6:	429a      	cmp	r2, r3
 8021eb8:	d127      	bne.n	8021f0a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8021eba:	4b32      	ldr	r3, [pc, #200]	; (8021f84 <mem_malloc+0x1d0>)
 8021ebc:	681b      	ldr	r3, [r3, #0]
 8021ebe:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8021ec0:	e005      	b.n	8021ece <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8021ec2:	69bb      	ldr	r3, [r7, #24]
 8021ec4:	881b      	ldrh	r3, [r3, #0]
 8021ec6:	4618      	mov	r0, r3
 8021ec8:	f7ff fcd0 	bl	802186c <ptr_to_mem>
 8021ecc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8021ece:	69bb      	ldr	r3, [r7, #24]
 8021ed0:	791b      	ldrb	r3, [r3, #4]
 8021ed2:	2b00      	cmp	r3, #0
 8021ed4:	d004      	beq.n	8021ee0 <mem_malloc+0x12c>
 8021ed6:	4b2f      	ldr	r3, [pc, #188]	; (8021f94 <mem_malloc+0x1e0>)
 8021ed8:	681b      	ldr	r3, [r3, #0]
 8021eda:	69ba      	ldr	r2, [r7, #24]
 8021edc:	429a      	cmp	r2, r3
 8021ede:	d1f0      	bne.n	8021ec2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8021ee0:	4a28      	ldr	r2, [pc, #160]	; (8021f84 <mem_malloc+0x1d0>)
 8021ee2:	69bb      	ldr	r3, [r7, #24]
 8021ee4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8021ee6:	4b27      	ldr	r3, [pc, #156]	; (8021f84 <mem_malloc+0x1d0>)
 8021ee8:	681a      	ldr	r2, [r3, #0]
 8021eea:	4b2a      	ldr	r3, [pc, #168]	; (8021f94 <mem_malloc+0x1e0>)
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	429a      	cmp	r2, r3
 8021ef0:	d00b      	beq.n	8021f0a <mem_malloc+0x156>
 8021ef2:	4b24      	ldr	r3, [pc, #144]	; (8021f84 <mem_malloc+0x1d0>)
 8021ef4:	681b      	ldr	r3, [r3, #0]
 8021ef6:	791b      	ldrb	r3, [r3, #4]
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d006      	beq.n	8021f0a <mem_malloc+0x156>
 8021efc:	4b22      	ldr	r3, [pc, #136]	; (8021f88 <mem_malloc+0x1d4>)
 8021efe:	f240 32b5 	movw	r2, #949	; 0x3b5
 8021f02:	4925      	ldr	r1, [pc, #148]	; (8021f98 <mem_malloc+0x1e4>)
 8021f04:	4822      	ldr	r0, [pc, #136]	; (8021f90 <mem_malloc+0x1dc>)
 8021f06:	f004 fd9d 	bl	8026a44 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8021f0a:	8bba      	ldrh	r2, [r7, #28]
 8021f0c:	697b      	ldr	r3, [r7, #20]
 8021f0e:	4413      	add	r3, r2
 8021f10:	3308      	adds	r3, #8
 8021f12:	4a20      	ldr	r2, [pc, #128]	; (8021f94 <mem_malloc+0x1e0>)
 8021f14:	6812      	ldr	r2, [r2, #0]
 8021f16:	4293      	cmp	r3, r2
 8021f18:	d906      	bls.n	8021f28 <mem_malloc+0x174>
 8021f1a:	4b1b      	ldr	r3, [pc, #108]	; (8021f88 <mem_malloc+0x1d4>)
 8021f1c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8021f20:	491e      	ldr	r1, [pc, #120]	; (8021f9c <mem_malloc+0x1e8>)
 8021f22:	481b      	ldr	r0, [pc, #108]	; (8021f90 <mem_malloc+0x1dc>)
 8021f24:	f004 fd8e 	bl	8026a44 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8021f28:	697b      	ldr	r3, [r7, #20]
 8021f2a:	f003 0303 	and.w	r3, r3, #3
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d006      	beq.n	8021f40 <mem_malloc+0x18c>
 8021f32:	4b15      	ldr	r3, [pc, #84]	; (8021f88 <mem_malloc+0x1d4>)
 8021f34:	f240 32bb 	movw	r2, #955	; 0x3bb
 8021f38:	4919      	ldr	r1, [pc, #100]	; (8021fa0 <mem_malloc+0x1ec>)
 8021f3a:	4815      	ldr	r0, [pc, #84]	; (8021f90 <mem_malloc+0x1dc>)
 8021f3c:	f004 fd82 	bl	8026a44 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8021f40:	697b      	ldr	r3, [r7, #20]
 8021f42:	f003 0303 	and.w	r3, r3, #3
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	d006      	beq.n	8021f58 <mem_malloc+0x1a4>
 8021f4a:	4b0f      	ldr	r3, [pc, #60]	; (8021f88 <mem_malloc+0x1d4>)
 8021f4c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8021f50:	4914      	ldr	r1, [pc, #80]	; (8021fa4 <mem_malloc+0x1f0>)
 8021f52:	480f      	ldr	r0, [pc, #60]	; (8021f90 <mem_malloc+0x1dc>)
 8021f54:	f004 fd76 	bl	8026a44 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8021f58:	697b      	ldr	r3, [r7, #20]
 8021f5a:	3308      	adds	r3, #8
 8021f5c:	e00e      	b.n	8021f7c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8021f5e:	8bfb      	ldrh	r3, [r7, #30]
 8021f60:	4618      	mov	r0, r3
 8021f62:	f7ff fc83 	bl	802186c <ptr_to_mem>
 8021f66:	4603      	mov	r3, r0
 8021f68:	881b      	ldrh	r3, [r3, #0]
 8021f6a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8021f6c:	8bfa      	ldrh	r2, [r7, #30]
 8021f6e:	8bbb      	ldrh	r3, [r7, #28]
 8021f70:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8021f74:	429a      	cmp	r2, r3
 8021f76:	f4ff af44 	bcc.w	8021e02 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8021f7a:	2300      	movs	r3, #0
}
 8021f7c:	4618      	mov	r0, r3
 8021f7e:	3720      	adds	r7, #32
 8021f80:	46bd      	mov	sp, r7
 8021f82:	bd80      	pop	{r7, pc}
 8021f84:	20012e48 	.word	0x20012e48
 8021f88:	0802c318 	.word	0x0802c318
 8021f8c:	0802c4c0 	.word	0x0802c4c0
 8021f90:	0802c360 	.word	0x0802c360
 8021f94:	20012e44 	.word	0x20012e44
 8021f98:	0802c4d4 	.word	0x0802c4d4
 8021f9c:	0802c4f0 	.word	0x0802c4f0
 8021fa0:	0802c520 	.word	0x0802c520
 8021fa4:	0802c550 	.word	0x0802c550

08021fa8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8021fa8:	b480      	push	{r7}
 8021faa:	b085      	sub	sp, #20
 8021fac:	af00      	add	r7, sp, #0
 8021fae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	689b      	ldr	r3, [r3, #8]
 8021fb4:	2200      	movs	r2, #0
 8021fb6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	685b      	ldr	r3, [r3, #4]
 8021fbc:	3303      	adds	r3, #3
 8021fbe:	f023 0303 	bic.w	r3, r3, #3
 8021fc2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8021fc4:	2300      	movs	r3, #0
 8021fc6:	60fb      	str	r3, [r7, #12]
 8021fc8:	e011      	b.n	8021fee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	689b      	ldr	r3, [r3, #8]
 8021fce:	681a      	ldr	r2, [r3, #0]
 8021fd0:	68bb      	ldr	r3, [r7, #8]
 8021fd2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8021fd4:	687b      	ldr	r3, [r7, #4]
 8021fd6:	689b      	ldr	r3, [r3, #8]
 8021fd8:	68ba      	ldr	r2, [r7, #8]
 8021fda:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	881b      	ldrh	r3, [r3, #0]
 8021fe0:	461a      	mov	r2, r3
 8021fe2:	68bb      	ldr	r3, [r7, #8]
 8021fe4:	4413      	add	r3, r2
 8021fe6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8021fe8:	68fb      	ldr	r3, [r7, #12]
 8021fea:	3301      	adds	r3, #1
 8021fec:	60fb      	str	r3, [r7, #12]
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	885b      	ldrh	r3, [r3, #2]
 8021ff2:	461a      	mov	r2, r3
 8021ff4:	68fb      	ldr	r3, [r7, #12]
 8021ff6:	4293      	cmp	r3, r2
 8021ff8:	dbe7      	blt.n	8021fca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8021ffa:	bf00      	nop
 8021ffc:	bf00      	nop
 8021ffe:	3714      	adds	r7, #20
 8022000:	46bd      	mov	sp, r7
 8022002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022006:	4770      	bx	lr

08022008 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8022008:	b580      	push	{r7, lr}
 802200a:	b082      	sub	sp, #8
 802200c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802200e:	2300      	movs	r3, #0
 8022010:	80fb      	strh	r3, [r7, #6]
 8022012:	e009      	b.n	8022028 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8022014:	88fb      	ldrh	r3, [r7, #6]
 8022016:	4a08      	ldr	r2, [pc, #32]	; (8022038 <memp_init+0x30>)
 8022018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802201c:	4618      	mov	r0, r3
 802201e:	f7ff ffc3 	bl	8021fa8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8022022:	88fb      	ldrh	r3, [r7, #6]
 8022024:	3301      	adds	r3, #1
 8022026:	80fb      	strh	r3, [r7, #6]
 8022028:	88fb      	ldrh	r3, [r7, #6]
 802202a:	2b05      	cmp	r3, #5
 802202c:	d9f2      	bls.n	8022014 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 802202e:	bf00      	nop
 8022030:	bf00      	nop
 8022032:	3708      	adds	r7, #8
 8022034:	46bd      	mov	sp, r7
 8022036:	bd80      	pop	{r7, pc}
 8022038:	0802ddc0 	.word	0x0802ddc0

0802203c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 802203c:	b580      	push	{r7, lr}
 802203e:	b084      	sub	sp, #16
 8022040:	af00      	add	r7, sp, #0
 8022042:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	689b      	ldr	r3, [r3, #8]
 8022048:	681b      	ldr	r3, [r3, #0]
 802204a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 802204c:	68fb      	ldr	r3, [r7, #12]
 802204e:	2b00      	cmp	r3, #0
 8022050:	d012      	beq.n	8022078 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8022052:	687b      	ldr	r3, [r7, #4]
 8022054:	689b      	ldr	r3, [r3, #8]
 8022056:	68fa      	ldr	r2, [r7, #12]
 8022058:	6812      	ldr	r2, [r2, #0]
 802205a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 802205c:	68fb      	ldr	r3, [r7, #12]
 802205e:	f003 0303 	and.w	r3, r3, #3
 8022062:	2b00      	cmp	r3, #0
 8022064:	d006      	beq.n	8022074 <do_memp_malloc_pool+0x38>
 8022066:	4b07      	ldr	r3, [pc, #28]	; (8022084 <do_memp_malloc_pool+0x48>)
 8022068:	f44f 728c 	mov.w	r2, #280	; 0x118
 802206c:	4906      	ldr	r1, [pc, #24]	; (8022088 <do_memp_malloc_pool+0x4c>)
 802206e:	4807      	ldr	r0, [pc, #28]	; (802208c <do_memp_malloc_pool+0x50>)
 8022070:	f004 fce8 	bl	8026a44 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8022074:	68fb      	ldr	r3, [r7, #12]
 8022076:	e000      	b.n	802207a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8022078:	2300      	movs	r3, #0
}
 802207a:	4618      	mov	r0, r3
 802207c:	3710      	adds	r7, #16
 802207e:	46bd      	mov	sp, r7
 8022080:	bd80      	pop	{r7, pc}
 8022082:	bf00      	nop
 8022084:	0802c574 	.word	0x0802c574
 8022088:	0802c5a4 	.word	0x0802c5a4
 802208c:	0802c5c8 	.word	0x0802c5c8

08022090 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8022090:	b580      	push	{r7, lr}
 8022092:	b082      	sub	sp, #8
 8022094:	af00      	add	r7, sp, #0
 8022096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8022098:	687b      	ldr	r3, [r7, #4]
 802209a:	2b00      	cmp	r3, #0
 802209c:	d106      	bne.n	80220ac <memp_malloc_pool+0x1c>
 802209e:	4b0a      	ldr	r3, [pc, #40]	; (80220c8 <memp_malloc_pool+0x38>)
 80220a0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80220a4:	4909      	ldr	r1, [pc, #36]	; (80220cc <memp_malloc_pool+0x3c>)
 80220a6:	480a      	ldr	r0, [pc, #40]	; (80220d0 <memp_malloc_pool+0x40>)
 80220a8:	f004 fccc 	bl	8026a44 <iprintf>
  if (desc == NULL) {
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	2b00      	cmp	r3, #0
 80220b0:	d101      	bne.n	80220b6 <memp_malloc_pool+0x26>
    return NULL;
 80220b2:	2300      	movs	r3, #0
 80220b4:	e003      	b.n	80220be <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80220b6:	6878      	ldr	r0, [r7, #4]
 80220b8:	f7ff ffc0 	bl	802203c <do_memp_malloc_pool>
 80220bc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80220be:	4618      	mov	r0, r3
 80220c0:	3708      	adds	r7, #8
 80220c2:	46bd      	mov	sp, r7
 80220c4:	bd80      	pop	{r7, pc}
 80220c6:	bf00      	nop
 80220c8:	0802c574 	.word	0x0802c574
 80220cc:	0802c5f0 	.word	0x0802c5f0
 80220d0:	0802c5c8 	.word	0x0802c5c8

080220d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80220d4:	b580      	push	{r7, lr}
 80220d6:	b084      	sub	sp, #16
 80220d8:	af00      	add	r7, sp, #0
 80220da:	4603      	mov	r3, r0
 80220dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80220de:	79fb      	ldrb	r3, [r7, #7]
 80220e0:	2b05      	cmp	r3, #5
 80220e2:	d908      	bls.n	80220f6 <memp_malloc+0x22>
 80220e4:	4b0a      	ldr	r3, [pc, #40]	; (8022110 <memp_malloc+0x3c>)
 80220e6:	f240 1257 	movw	r2, #343	; 0x157
 80220ea:	490a      	ldr	r1, [pc, #40]	; (8022114 <memp_malloc+0x40>)
 80220ec:	480a      	ldr	r0, [pc, #40]	; (8022118 <memp_malloc+0x44>)
 80220ee:	f004 fca9 	bl	8026a44 <iprintf>
 80220f2:	2300      	movs	r3, #0
 80220f4:	e008      	b.n	8022108 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80220f6:	79fb      	ldrb	r3, [r7, #7]
 80220f8:	4a08      	ldr	r2, [pc, #32]	; (802211c <memp_malloc+0x48>)
 80220fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80220fe:	4618      	mov	r0, r3
 8022100:	f7ff ff9c 	bl	802203c <do_memp_malloc_pool>
 8022104:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8022106:	68fb      	ldr	r3, [r7, #12]
}
 8022108:	4618      	mov	r0, r3
 802210a:	3710      	adds	r7, #16
 802210c:	46bd      	mov	sp, r7
 802210e:	bd80      	pop	{r7, pc}
 8022110:	0802c574 	.word	0x0802c574
 8022114:	0802c604 	.word	0x0802c604
 8022118:	0802c5c8 	.word	0x0802c5c8
 802211c:	0802ddc0 	.word	0x0802ddc0

08022120 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8022120:	b580      	push	{r7, lr}
 8022122:	b084      	sub	sp, #16
 8022124:	af00      	add	r7, sp, #0
 8022126:	6078      	str	r0, [r7, #4]
 8022128:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 802212a:	683b      	ldr	r3, [r7, #0]
 802212c:	f003 0303 	and.w	r3, r3, #3
 8022130:	2b00      	cmp	r3, #0
 8022132:	d006      	beq.n	8022142 <do_memp_free_pool+0x22>
 8022134:	4b0a      	ldr	r3, [pc, #40]	; (8022160 <do_memp_free_pool+0x40>)
 8022136:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 802213a:	490a      	ldr	r1, [pc, #40]	; (8022164 <do_memp_free_pool+0x44>)
 802213c:	480a      	ldr	r0, [pc, #40]	; (8022168 <do_memp_free_pool+0x48>)
 802213e:	f004 fc81 	bl	8026a44 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8022142:	683b      	ldr	r3, [r7, #0]
 8022144:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	689b      	ldr	r3, [r3, #8]
 802214a:	681a      	ldr	r2, [r3, #0]
 802214c:	68fb      	ldr	r3, [r7, #12]
 802214e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	689b      	ldr	r3, [r3, #8]
 8022154:	68fa      	ldr	r2, [r7, #12]
 8022156:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8022158:	bf00      	nop
 802215a:	3710      	adds	r7, #16
 802215c:	46bd      	mov	sp, r7
 802215e:	bd80      	pop	{r7, pc}
 8022160:	0802c574 	.word	0x0802c574
 8022164:	0802c624 	.word	0x0802c624
 8022168:	0802c5c8 	.word	0x0802c5c8

0802216c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 802216c:	b580      	push	{r7, lr}
 802216e:	b082      	sub	sp, #8
 8022170:	af00      	add	r7, sp, #0
 8022172:	6078      	str	r0, [r7, #4]
 8022174:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8022176:	687b      	ldr	r3, [r7, #4]
 8022178:	2b00      	cmp	r3, #0
 802217a:	d106      	bne.n	802218a <memp_free_pool+0x1e>
 802217c:	4b0a      	ldr	r3, [pc, #40]	; (80221a8 <memp_free_pool+0x3c>)
 802217e:	f240 1295 	movw	r2, #405	; 0x195
 8022182:	490a      	ldr	r1, [pc, #40]	; (80221ac <memp_free_pool+0x40>)
 8022184:	480a      	ldr	r0, [pc, #40]	; (80221b0 <memp_free_pool+0x44>)
 8022186:	f004 fc5d 	bl	8026a44 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	2b00      	cmp	r3, #0
 802218e:	d007      	beq.n	80221a0 <memp_free_pool+0x34>
 8022190:	683b      	ldr	r3, [r7, #0]
 8022192:	2b00      	cmp	r3, #0
 8022194:	d004      	beq.n	80221a0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8022196:	6839      	ldr	r1, [r7, #0]
 8022198:	6878      	ldr	r0, [r7, #4]
 802219a:	f7ff ffc1 	bl	8022120 <do_memp_free_pool>
 802219e:	e000      	b.n	80221a2 <memp_free_pool+0x36>
    return;
 80221a0:	bf00      	nop
}
 80221a2:	3708      	adds	r7, #8
 80221a4:	46bd      	mov	sp, r7
 80221a6:	bd80      	pop	{r7, pc}
 80221a8:	0802c574 	.word	0x0802c574
 80221ac:	0802c5f0 	.word	0x0802c5f0
 80221b0:	0802c5c8 	.word	0x0802c5c8

080221b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80221b4:	b580      	push	{r7, lr}
 80221b6:	b082      	sub	sp, #8
 80221b8:	af00      	add	r7, sp, #0
 80221ba:	4603      	mov	r3, r0
 80221bc:	6039      	str	r1, [r7, #0]
 80221be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80221c0:	79fb      	ldrb	r3, [r7, #7]
 80221c2:	2b05      	cmp	r3, #5
 80221c4:	d907      	bls.n	80221d6 <memp_free+0x22>
 80221c6:	4b0c      	ldr	r3, [pc, #48]	; (80221f8 <memp_free+0x44>)
 80221c8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80221cc:	490b      	ldr	r1, [pc, #44]	; (80221fc <memp_free+0x48>)
 80221ce:	480c      	ldr	r0, [pc, #48]	; (8022200 <memp_free+0x4c>)
 80221d0:	f004 fc38 	bl	8026a44 <iprintf>
 80221d4:	e00c      	b.n	80221f0 <memp_free+0x3c>

  if (mem == NULL) {
 80221d6:	683b      	ldr	r3, [r7, #0]
 80221d8:	2b00      	cmp	r3, #0
 80221da:	d008      	beq.n	80221ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80221dc:	79fb      	ldrb	r3, [r7, #7]
 80221de:	4a09      	ldr	r2, [pc, #36]	; (8022204 <memp_free+0x50>)
 80221e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80221e4:	6839      	ldr	r1, [r7, #0]
 80221e6:	4618      	mov	r0, r3
 80221e8:	f7ff ff9a 	bl	8022120 <do_memp_free_pool>
 80221ec:	e000      	b.n	80221f0 <memp_free+0x3c>
    return;
 80221ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80221f0:	3708      	adds	r7, #8
 80221f2:	46bd      	mov	sp, r7
 80221f4:	bd80      	pop	{r7, pc}
 80221f6:	bf00      	nop
 80221f8:	0802c574 	.word	0x0802c574
 80221fc:	0802c644 	.word	0x0802c644
 8022200:	0802c5c8 	.word	0x0802c5c8
 8022204:	0802ddc0 	.word	0x0802ddc0

08022208 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 8022208:	b580      	push	{r7, lr}
 802220a:	b082      	sub	sp, #8
 802220c:	af00      	add	r7, sp, #0
 802220e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 8022210:	687b      	ldr	r3, [r7, #4]
 8022212:	2b00      	cmp	r3, #0
 8022214:	d105      	bne.n	8022222 <netif_loopif_init+0x1a>
 8022216:	4b0b      	ldr	r3, [pc, #44]	; (8022244 <netif_loopif_init+0x3c>)
 8022218:	2299      	movs	r2, #153	; 0x99
 802221a:	490b      	ldr	r1, [pc, #44]	; (8022248 <netif_loopif_init+0x40>)
 802221c:	480b      	ldr	r0, [pc, #44]	; (802224c <netif_loopif_init+0x44>)
 802221e:	f004 fc11 	bl	8026a44 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	226c      	movs	r2, #108	; 0x6c
 8022226:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	226f      	movs	r2, #111	; 0x6f
 802222e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	4a06      	ldr	r2, [pc, #24]	; (8022250 <netif_loopif_init+0x48>)
 8022236:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 8022238:	2300      	movs	r3, #0
}
 802223a:	4618      	mov	r0, r3
 802223c:	3708      	adds	r7, #8
 802223e:	46bd      	mov	sp, r7
 8022240:	bd80      	pop	{r7, pc}
 8022242:	bf00      	nop
 8022244:	0802c660 	.word	0x0802c660
 8022248:	0802c694 	.word	0x0802c694
 802224c:	0802c6b8 	.word	0x0802c6b8
 8022250:	08022935 	.word	0x08022935

08022254 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8022254:	b580      	push	{r7, lr}
 8022256:	b088      	sub	sp, #32
 8022258:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 802225a:	4b0f      	ldr	r3, [pc, #60]	; (8022298 <netif_init+0x44>)
 802225c:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 802225e:	4b0e      	ldr	r3, [pc, #56]	; (8022298 <netif_init+0x44>)
 8022260:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 8022262:	23ff      	movs	r3, #255	; 0xff
 8022264:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 8022266:	1d3b      	adds	r3, r7, #4
 8022268:	f107 0208 	add.w	r2, r7, #8
 802226c:	f107 010c 	add.w	r1, r7, #12
 8022270:	480a      	ldr	r0, [pc, #40]	; (802229c <netif_init+0x48>)
 8022272:	9002      	str	r0, [sp, #8]
 8022274:	480a      	ldr	r0, [pc, #40]	; (80222a0 <netif_init+0x4c>)
 8022276:	9001      	str	r0, [sp, #4]
 8022278:	2000      	movs	r0, #0
 802227a:	9000      	str	r0, [sp, #0]
 802227c:	4809      	ldr	r0, [pc, #36]	; (80222a4 <netif_init+0x50>)
 802227e:	f000 f813 	bl	80222a8 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 8022282:	4808      	ldr	r0, [pc, #32]	; (80222a4 <netif_init+0x50>)
 8022284:	f000 fa72 	bl	802276c <netif_set_link_up>
  netif_set_up(&loop_netif);
 8022288:	4806      	ldr	r0, [pc, #24]	; (80222a4 <netif_init+0x50>)
 802228a:	f000 f9d1 	bl	8022630 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 802228e:	bf00      	nop
 8022290:	3710      	adds	r7, #16
 8022292:	46bd      	mov	sp, r7
 8022294:	bd80      	pop	{r7, pc}
 8022296:	bf00      	nop
 8022298:	0100007f 	.word	0x0100007f
 802229c:	080253d1 	.word	0x080253d1
 80222a0:	08022209 	.word	0x08022209
 80222a4:	20015df0 	.word	0x20015df0

080222a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80222a8:	b580      	push	{r7, lr}
 80222aa:	b086      	sub	sp, #24
 80222ac:	af00      	add	r7, sp, #0
 80222ae:	60f8      	str	r0, [r7, #12]
 80222b0:	60b9      	str	r1, [r7, #8]
 80222b2:	607a      	str	r2, [r7, #4]
 80222b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80222b6:	68fb      	ldr	r3, [r7, #12]
 80222b8:	2b00      	cmp	r3, #0
 80222ba:	d108      	bne.n	80222ce <netif_add+0x26>
 80222bc:	4b5a      	ldr	r3, [pc, #360]	; (8022428 <netif_add+0x180>)
 80222be:	f240 1227 	movw	r2, #295	; 0x127
 80222c2:	495a      	ldr	r1, [pc, #360]	; (802242c <netif_add+0x184>)
 80222c4:	485a      	ldr	r0, [pc, #360]	; (8022430 <netif_add+0x188>)
 80222c6:	f004 fbbd 	bl	8026a44 <iprintf>
 80222ca:	2300      	movs	r3, #0
 80222cc:	e0a8      	b.n	8022420 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80222ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	d108      	bne.n	80222e6 <netif_add+0x3e>
 80222d4:	4b54      	ldr	r3, [pc, #336]	; (8022428 <netif_add+0x180>)
 80222d6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80222da:	4956      	ldr	r1, [pc, #344]	; (8022434 <netif_add+0x18c>)
 80222dc:	4854      	ldr	r0, [pc, #336]	; (8022430 <netif_add+0x188>)
 80222de:	f004 fbb1 	bl	8026a44 <iprintf>
 80222e2:	2300      	movs	r3, #0
 80222e4:	e09c      	b.n	8022420 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80222e6:	68bb      	ldr	r3, [r7, #8]
 80222e8:	2b00      	cmp	r3, #0
 80222ea:	d101      	bne.n	80222f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80222ec:	4b52      	ldr	r3, [pc, #328]	; (8022438 <netif_add+0x190>)
 80222ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80222f0:	687b      	ldr	r3, [r7, #4]
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	d101      	bne.n	80222fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80222f6:	4b50      	ldr	r3, [pc, #320]	; (8022438 <netif_add+0x190>)
 80222f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80222fa:	683b      	ldr	r3, [r7, #0]
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d101      	bne.n	8022304 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8022300:	4b4d      	ldr	r3, [pc, #308]	; (8022438 <netif_add+0x190>)
 8022302:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8022304:	68fb      	ldr	r3, [r7, #12]
 8022306:	2200      	movs	r2, #0
 8022308:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 802230a:	68fb      	ldr	r3, [r7, #12]
 802230c:	2200      	movs	r2, #0
 802230e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8022310:	68fb      	ldr	r3, [r7, #12]
 8022312:	2200      	movs	r2, #0
 8022314:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8022316:	68fb      	ldr	r3, [r7, #12]
 8022318:	4a48      	ldr	r2, [pc, #288]	; (802243c <netif_add+0x194>)
 802231a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 802231c:	68fb      	ldr	r3, [r7, #12]
 802231e:	2200      	movs	r2, #0
 8022320:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8022322:	68fb      	ldr	r3, [r7, #12]
 8022324:	2200      	movs	r2, #0
 8022326:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 802232a:	68fb      	ldr	r3, [r7, #12]
 802232c:	2200      	movs	r2, #0
 802232e:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 8022330:	68fb      	ldr	r3, [r7, #12]
 8022332:	2200      	movs	r2, #0
 8022334:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 8022336:	68fb      	ldr	r3, [r7, #12]
 8022338:	2200      	movs	r2, #0
 802233a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 802233c:	68fb      	ldr	r3, [r7, #12]
 802233e:	6a3a      	ldr	r2, [r7, #32]
 8022340:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8022342:	4b3f      	ldr	r3, [pc, #252]	; (8022440 <netif_add+0x198>)
 8022344:	781a      	ldrb	r2, [r3, #0]
 8022346:	68fb      	ldr	r3, [r7, #12]
 8022348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 802234c:	68fb      	ldr	r3, [r7, #12]
 802234e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022350:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8022352:	683b      	ldr	r3, [r7, #0]
 8022354:	687a      	ldr	r2, [r7, #4]
 8022356:	68b9      	ldr	r1, [r7, #8]
 8022358:	68f8      	ldr	r0, [r7, #12]
 802235a:	f000 f90f 	bl	802257c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 802235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022360:	68f8      	ldr	r0, [r7, #12]
 8022362:	4798      	blx	r3
 8022364:	4603      	mov	r3, r0
 8022366:	2b00      	cmp	r3, #0
 8022368:	d001      	beq.n	802236e <netif_add+0xc6>
    return NULL;
 802236a:	2300      	movs	r3, #0
 802236c:	e058      	b.n	8022420 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 802236e:	68fb      	ldr	r3, [r7, #12]
 8022370:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022374:	2bff      	cmp	r3, #255	; 0xff
 8022376:	d103      	bne.n	8022380 <netif_add+0xd8>
        netif->num = 0;
 8022378:	68fb      	ldr	r3, [r7, #12]
 802237a:	2200      	movs	r2, #0
 802237c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8022380:	2300      	movs	r3, #0
 8022382:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8022384:	4b2f      	ldr	r3, [pc, #188]	; (8022444 <netif_add+0x19c>)
 8022386:	681b      	ldr	r3, [r3, #0]
 8022388:	617b      	str	r3, [r7, #20]
 802238a:	e02b      	b.n	80223e4 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 802238c:	697a      	ldr	r2, [r7, #20]
 802238e:	68fb      	ldr	r3, [r7, #12]
 8022390:	429a      	cmp	r2, r3
 8022392:	d106      	bne.n	80223a2 <netif_add+0xfa>
 8022394:	4b24      	ldr	r3, [pc, #144]	; (8022428 <netif_add+0x180>)
 8022396:	f240 128b 	movw	r2, #395	; 0x18b
 802239a:	492b      	ldr	r1, [pc, #172]	; (8022448 <netif_add+0x1a0>)
 802239c:	4824      	ldr	r0, [pc, #144]	; (8022430 <netif_add+0x188>)
 802239e:	f004 fb51 	bl	8026a44 <iprintf>
        num_netifs++;
 80223a2:	693b      	ldr	r3, [r7, #16]
 80223a4:	3301      	adds	r3, #1
 80223a6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80223a8:	693b      	ldr	r3, [r7, #16]
 80223aa:	2bff      	cmp	r3, #255	; 0xff
 80223ac:	dd06      	ble.n	80223bc <netif_add+0x114>
 80223ae:	4b1e      	ldr	r3, [pc, #120]	; (8022428 <netif_add+0x180>)
 80223b0:	f240 128d 	movw	r2, #397	; 0x18d
 80223b4:	4925      	ldr	r1, [pc, #148]	; (802244c <netif_add+0x1a4>)
 80223b6:	481e      	ldr	r0, [pc, #120]	; (8022430 <netif_add+0x188>)
 80223b8:	f004 fb44 	bl	8026a44 <iprintf>
        if (netif2->num == netif->num) {
 80223bc:	697b      	ldr	r3, [r7, #20]
 80223be:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80223c2:	68fb      	ldr	r3, [r7, #12]
 80223c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80223c8:	429a      	cmp	r2, r3
 80223ca:	d108      	bne.n	80223de <netif_add+0x136>
          netif->num++;
 80223cc:	68fb      	ldr	r3, [r7, #12]
 80223ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80223d2:	3301      	adds	r3, #1
 80223d4:	b2da      	uxtb	r2, r3
 80223d6:	68fb      	ldr	r3, [r7, #12]
 80223d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80223dc:	e005      	b.n	80223ea <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80223de:	697b      	ldr	r3, [r7, #20]
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	617b      	str	r3, [r7, #20]
 80223e4:	697b      	ldr	r3, [r7, #20]
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d1d0      	bne.n	802238c <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 80223ea:	697b      	ldr	r3, [r7, #20]
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	d1be      	bne.n	802236e <netif_add+0xc6>
  }
  if (netif->num == 254) {
 80223f0:	68fb      	ldr	r3, [r7, #12]
 80223f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80223f6:	2bfe      	cmp	r3, #254	; 0xfe
 80223f8:	d103      	bne.n	8022402 <netif_add+0x15a>
    netif_num = 0;
 80223fa:	4b11      	ldr	r3, [pc, #68]	; (8022440 <netif_add+0x198>)
 80223fc:	2200      	movs	r2, #0
 80223fe:	701a      	strb	r2, [r3, #0]
 8022400:	e006      	b.n	8022410 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8022402:	68fb      	ldr	r3, [r7, #12]
 8022404:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022408:	3301      	adds	r3, #1
 802240a:	b2da      	uxtb	r2, r3
 802240c:	4b0c      	ldr	r3, [pc, #48]	; (8022440 <netif_add+0x198>)
 802240e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8022410:	4b0c      	ldr	r3, [pc, #48]	; (8022444 <netif_add+0x19c>)
 8022412:	681a      	ldr	r2, [r3, #0]
 8022414:	68fb      	ldr	r3, [r7, #12]
 8022416:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8022418:	4a0a      	ldr	r2, [pc, #40]	; (8022444 <netif_add+0x19c>)
 802241a:	68fb      	ldr	r3, [r7, #12]
 802241c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 802241e:	68fb      	ldr	r3, [r7, #12]
}
 8022420:	4618      	mov	r0, r3
 8022422:	3718      	adds	r7, #24
 8022424:	46bd      	mov	sp, r7
 8022426:	bd80      	pop	{r7, pc}
 8022428:	0802c660 	.word	0x0802c660
 802242c:	0802c718 	.word	0x0802c718
 8022430:	0802c6b8 	.word	0x0802c6b8
 8022434:	0802c734 	.word	0x0802c734
 8022438:	0802dde8 	.word	0x0802dde8
 802243c:	08022953 	.word	0x08022953
 8022440:	20015dec 	.word	0x20015dec
 8022444:	20015de4 	.word	0x20015de4
 8022448:	0802c758 	.word	0x0802c758
 802244c:	0802c76c 	.word	0x0802c76c

08022450 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8022450:	b580      	push	{r7, lr}
 8022452:	b082      	sub	sp, #8
 8022454:	af00      	add	r7, sp, #0
 8022456:	6078      	str	r0, [r7, #4]
 8022458:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 802245a:	6839      	ldr	r1, [r7, #0]
 802245c:	6878      	ldr	r0, [r7, #4]
 802245e:	f001 fe13 	bl	8024088 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8022462:	bf00      	nop
 8022464:	3708      	adds	r7, #8
 8022466:	46bd      	mov	sp, r7
 8022468:	bd80      	pop	{r7, pc}
	...

0802246c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 802246c:	b580      	push	{r7, lr}
 802246e:	b086      	sub	sp, #24
 8022470:	af00      	add	r7, sp, #0
 8022472:	60f8      	str	r0, [r7, #12]
 8022474:	60b9      	str	r1, [r7, #8]
 8022476:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8022478:	68bb      	ldr	r3, [r7, #8]
 802247a:	2b00      	cmp	r3, #0
 802247c:	d106      	bne.n	802248c <netif_do_set_ipaddr+0x20>
 802247e:	4b1d      	ldr	r3, [pc, #116]	; (80224f4 <netif_do_set_ipaddr+0x88>)
 8022480:	f240 12cb 	movw	r2, #459	; 0x1cb
 8022484:	491c      	ldr	r1, [pc, #112]	; (80224f8 <netif_do_set_ipaddr+0x8c>)
 8022486:	481d      	ldr	r0, [pc, #116]	; (80224fc <netif_do_set_ipaddr+0x90>)
 8022488:	f004 fadc 	bl	8026a44 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 802248c:	687b      	ldr	r3, [r7, #4]
 802248e:	2b00      	cmp	r3, #0
 8022490:	d106      	bne.n	80224a0 <netif_do_set_ipaddr+0x34>
 8022492:	4b18      	ldr	r3, [pc, #96]	; (80224f4 <netif_do_set_ipaddr+0x88>)
 8022494:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8022498:	4917      	ldr	r1, [pc, #92]	; (80224f8 <netif_do_set_ipaddr+0x8c>)
 802249a:	4818      	ldr	r0, [pc, #96]	; (80224fc <netif_do_set_ipaddr+0x90>)
 802249c:	f004 fad2 	bl	8026a44 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80224a0:	68bb      	ldr	r3, [r7, #8]
 80224a2:	681a      	ldr	r2, [r3, #0]
 80224a4:	68fb      	ldr	r3, [r7, #12]
 80224a6:	3304      	adds	r3, #4
 80224a8:	681b      	ldr	r3, [r3, #0]
 80224aa:	429a      	cmp	r2, r3
 80224ac:	d01c      	beq.n	80224e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80224ae:	68bb      	ldr	r3, [r7, #8]
 80224b0:	681b      	ldr	r3, [r3, #0]
 80224b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80224b4:	68fb      	ldr	r3, [r7, #12]
 80224b6:	3304      	adds	r3, #4
 80224b8:	681a      	ldr	r2, [r3, #0]
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80224be:	f107 0314 	add.w	r3, r7, #20
 80224c2:	4619      	mov	r1, r3
 80224c4:	6878      	ldr	r0, [r7, #4]
 80224c6:	f7ff ffc3 	bl	8022450 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80224ca:	68bb      	ldr	r3, [r7, #8]
 80224cc:	2b00      	cmp	r3, #0
 80224ce:	d002      	beq.n	80224d6 <netif_do_set_ipaddr+0x6a>
 80224d0:	68bb      	ldr	r3, [r7, #8]
 80224d2:	681b      	ldr	r3, [r3, #0]
 80224d4:	e000      	b.n	80224d8 <netif_do_set_ipaddr+0x6c>
 80224d6:	2300      	movs	r3, #0
 80224d8:	68fa      	ldr	r2, [r7, #12]
 80224da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80224dc:	2101      	movs	r1, #1
 80224de:	68f8      	ldr	r0, [r7, #12]
 80224e0:	f000 f8d2 	bl	8022688 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80224e4:	2301      	movs	r3, #1
 80224e6:	e000      	b.n	80224ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80224e8:	2300      	movs	r3, #0
}
 80224ea:	4618      	mov	r0, r3
 80224ec:	3718      	adds	r7, #24
 80224ee:	46bd      	mov	sp, r7
 80224f0:	bd80      	pop	{r7, pc}
 80224f2:	bf00      	nop
 80224f4:	0802c660 	.word	0x0802c660
 80224f8:	0802c79c 	.word	0x0802c79c
 80224fc:	0802c6b8 	.word	0x0802c6b8

08022500 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8022500:	b480      	push	{r7}
 8022502:	b085      	sub	sp, #20
 8022504:	af00      	add	r7, sp, #0
 8022506:	60f8      	str	r0, [r7, #12]
 8022508:	60b9      	str	r1, [r7, #8]
 802250a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 802250c:	68bb      	ldr	r3, [r7, #8]
 802250e:	681a      	ldr	r2, [r3, #0]
 8022510:	68fb      	ldr	r3, [r7, #12]
 8022512:	3308      	adds	r3, #8
 8022514:	681b      	ldr	r3, [r3, #0]
 8022516:	429a      	cmp	r2, r3
 8022518:	d00a      	beq.n	8022530 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 802251a:	68bb      	ldr	r3, [r7, #8]
 802251c:	2b00      	cmp	r3, #0
 802251e:	d002      	beq.n	8022526 <netif_do_set_netmask+0x26>
 8022520:	68bb      	ldr	r3, [r7, #8]
 8022522:	681b      	ldr	r3, [r3, #0]
 8022524:	e000      	b.n	8022528 <netif_do_set_netmask+0x28>
 8022526:	2300      	movs	r3, #0
 8022528:	68fa      	ldr	r2, [r7, #12]
 802252a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 802252c:	2301      	movs	r3, #1
 802252e:	e000      	b.n	8022532 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8022530:	2300      	movs	r3, #0
}
 8022532:	4618      	mov	r0, r3
 8022534:	3714      	adds	r7, #20
 8022536:	46bd      	mov	sp, r7
 8022538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802253c:	4770      	bx	lr

0802253e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 802253e:	b480      	push	{r7}
 8022540:	b085      	sub	sp, #20
 8022542:	af00      	add	r7, sp, #0
 8022544:	60f8      	str	r0, [r7, #12]
 8022546:	60b9      	str	r1, [r7, #8]
 8022548:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 802254a:	68bb      	ldr	r3, [r7, #8]
 802254c:	681a      	ldr	r2, [r3, #0]
 802254e:	68fb      	ldr	r3, [r7, #12]
 8022550:	330c      	adds	r3, #12
 8022552:	681b      	ldr	r3, [r3, #0]
 8022554:	429a      	cmp	r2, r3
 8022556:	d00a      	beq.n	802256e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8022558:	68bb      	ldr	r3, [r7, #8]
 802255a:	2b00      	cmp	r3, #0
 802255c:	d002      	beq.n	8022564 <netif_do_set_gw+0x26>
 802255e:	68bb      	ldr	r3, [r7, #8]
 8022560:	681b      	ldr	r3, [r3, #0]
 8022562:	e000      	b.n	8022566 <netif_do_set_gw+0x28>
 8022564:	2300      	movs	r3, #0
 8022566:	68fa      	ldr	r2, [r7, #12]
 8022568:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 802256a:	2301      	movs	r3, #1
 802256c:	e000      	b.n	8022570 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 802256e:	2300      	movs	r3, #0
}
 8022570:	4618      	mov	r0, r3
 8022572:	3714      	adds	r7, #20
 8022574:	46bd      	mov	sp, r7
 8022576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802257a:	4770      	bx	lr

0802257c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 802257c:	b580      	push	{r7, lr}
 802257e:	b088      	sub	sp, #32
 8022580:	af00      	add	r7, sp, #0
 8022582:	60f8      	str	r0, [r7, #12]
 8022584:	60b9      	str	r1, [r7, #8]
 8022586:	607a      	str	r2, [r7, #4]
 8022588:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 802258a:	2300      	movs	r3, #0
 802258c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 802258e:	2300      	movs	r3, #0
 8022590:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8022592:	68bb      	ldr	r3, [r7, #8]
 8022594:	2b00      	cmp	r3, #0
 8022596:	d101      	bne.n	802259c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8022598:	4b1c      	ldr	r3, [pc, #112]	; (802260c <netif_set_addr+0x90>)
 802259a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 802259c:	687b      	ldr	r3, [r7, #4]
 802259e:	2b00      	cmp	r3, #0
 80225a0:	d101      	bne.n	80225a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80225a2:	4b1a      	ldr	r3, [pc, #104]	; (802260c <netif_set_addr+0x90>)
 80225a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80225a6:	683b      	ldr	r3, [r7, #0]
 80225a8:	2b00      	cmp	r3, #0
 80225aa:	d101      	bne.n	80225b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80225ac:	4b17      	ldr	r3, [pc, #92]	; (802260c <netif_set_addr+0x90>)
 80225ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80225b0:	68bb      	ldr	r3, [r7, #8]
 80225b2:	2b00      	cmp	r3, #0
 80225b4:	d003      	beq.n	80225be <netif_set_addr+0x42>
 80225b6:	68bb      	ldr	r3, [r7, #8]
 80225b8:	681b      	ldr	r3, [r3, #0]
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d101      	bne.n	80225c2 <netif_set_addr+0x46>
 80225be:	2301      	movs	r3, #1
 80225c0:	e000      	b.n	80225c4 <netif_set_addr+0x48>
 80225c2:	2300      	movs	r3, #0
 80225c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80225c6:	697b      	ldr	r3, [r7, #20]
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	d006      	beq.n	80225da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80225cc:	f107 0310 	add.w	r3, r7, #16
 80225d0:	461a      	mov	r2, r3
 80225d2:	68b9      	ldr	r1, [r7, #8]
 80225d4:	68f8      	ldr	r0, [r7, #12]
 80225d6:	f7ff ff49 	bl	802246c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80225da:	69fa      	ldr	r2, [r7, #28]
 80225dc:	6879      	ldr	r1, [r7, #4]
 80225de:	68f8      	ldr	r0, [r7, #12]
 80225e0:	f7ff ff8e 	bl	8022500 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80225e4:	69ba      	ldr	r2, [r7, #24]
 80225e6:	6839      	ldr	r1, [r7, #0]
 80225e8:	68f8      	ldr	r0, [r7, #12]
 80225ea:	f7ff ffa8 	bl	802253e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80225ee:	697b      	ldr	r3, [r7, #20]
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	d106      	bne.n	8022602 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80225f4:	f107 0310 	add.w	r3, r7, #16
 80225f8:	461a      	mov	r2, r3
 80225fa:	68b9      	ldr	r1, [r7, #8]
 80225fc:	68f8      	ldr	r0, [r7, #12]
 80225fe:	f7ff ff35 	bl	802246c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8022602:	bf00      	nop
 8022604:	3720      	adds	r7, #32
 8022606:	46bd      	mov	sp, r7
 8022608:	bd80      	pop	{r7, pc}
 802260a:	bf00      	nop
 802260c:	0802dde8 	.word	0x0802dde8

08022610 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8022610:	b480      	push	{r7}
 8022612:	b083      	sub	sp, #12
 8022614:	af00      	add	r7, sp, #0
 8022616:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8022618:	4a04      	ldr	r2, [pc, #16]	; (802262c <netif_set_default+0x1c>)
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 802261e:	bf00      	nop
 8022620:	370c      	adds	r7, #12
 8022622:	46bd      	mov	sp, r7
 8022624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022628:	4770      	bx	lr
 802262a:	bf00      	nop
 802262c:	20015de8 	.word	0x20015de8

08022630 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8022630:	b580      	push	{r7, lr}
 8022632:	b082      	sub	sp, #8
 8022634:	af00      	add	r7, sp, #0
 8022636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	2b00      	cmp	r3, #0
 802263c:	d107      	bne.n	802264e <netif_set_up+0x1e>
 802263e:	4b0f      	ldr	r3, [pc, #60]	; (802267c <netif_set_up+0x4c>)
 8022640:	f44f 7254 	mov.w	r2, #848	; 0x350
 8022644:	490e      	ldr	r1, [pc, #56]	; (8022680 <netif_set_up+0x50>)
 8022646:	480f      	ldr	r0, [pc, #60]	; (8022684 <netif_set_up+0x54>)
 8022648:	f004 f9fc 	bl	8026a44 <iprintf>
 802264c:	e013      	b.n	8022676 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 802264e:	687b      	ldr	r3, [r7, #4]
 8022650:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022654:	f003 0301 	and.w	r3, r3, #1
 8022658:	2b00      	cmp	r3, #0
 802265a:	d10c      	bne.n	8022676 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022662:	f043 0301 	orr.w	r3, r3, #1
 8022666:	b2da      	uxtb	r2, r3
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 802266e:	2103      	movs	r1, #3
 8022670:	6878      	ldr	r0, [r7, #4]
 8022672:	f000 f809 	bl	8022688 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8022676:	3708      	adds	r7, #8
 8022678:	46bd      	mov	sp, r7
 802267a:	bd80      	pop	{r7, pc}
 802267c:	0802c660 	.word	0x0802c660
 8022680:	0802c80c 	.word	0x0802c80c
 8022684:	0802c6b8 	.word	0x0802c6b8

08022688 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8022688:	b580      	push	{r7, lr}
 802268a:	b082      	sub	sp, #8
 802268c:	af00      	add	r7, sp, #0
 802268e:	6078      	str	r0, [r7, #4]
 8022690:	460b      	mov	r3, r1
 8022692:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	2b00      	cmp	r3, #0
 8022698:	d106      	bne.n	80226a8 <netif_issue_reports+0x20>
 802269a:	4b18      	ldr	r3, [pc, #96]	; (80226fc <netif_issue_reports+0x74>)
 802269c:	f240 326d 	movw	r2, #877	; 0x36d
 80226a0:	4917      	ldr	r1, [pc, #92]	; (8022700 <netif_issue_reports+0x78>)
 80226a2:	4818      	ldr	r0, [pc, #96]	; (8022704 <netif_issue_reports+0x7c>)
 80226a4:	f004 f9ce 	bl	8026a44 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80226a8:	687b      	ldr	r3, [r7, #4]
 80226aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80226ae:	f003 0304 	and.w	r3, r3, #4
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d01e      	beq.n	80226f4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80226bc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80226c0:	2b00      	cmp	r3, #0
 80226c2:	d017      	beq.n	80226f4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80226c4:	78fb      	ldrb	r3, [r7, #3]
 80226c6:	f003 0301 	and.w	r3, r3, #1
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	d013      	beq.n	80226f6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	3304      	adds	r3, #4
 80226d2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	d00e      	beq.n	80226f6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80226de:	f003 0308 	and.w	r3, r3, #8
 80226e2:	2b00      	cmp	r3, #0
 80226e4:	d007      	beq.n	80226f6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80226e6:	687b      	ldr	r3, [r7, #4]
 80226e8:	3304      	adds	r3, #4
 80226ea:	4619      	mov	r1, r3
 80226ec:	6878      	ldr	r0, [r7, #4]
 80226ee:	f002 fc35 	bl	8024f5c <etharp_request>
 80226f2:	e000      	b.n	80226f6 <netif_issue_reports+0x6e>
    return;
 80226f4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80226f6:	3708      	adds	r7, #8
 80226f8:	46bd      	mov	sp, r7
 80226fa:	bd80      	pop	{r7, pc}
 80226fc:	0802c660 	.word	0x0802c660
 8022700:	0802c828 	.word	0x0802c828
 8022704:	0802c6b8 	.word	0x0802c6b8

08022708 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8022708:	b580      	push	{r7, lr}
 802270a:	b082      	sub	sp, #8
 802270c:	af00      	add	r7, sp, #0
 802270e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	2b00      	cmp	r3, #0
 8022714:	d107      	bne.n	8022726 <netif_set_down+0x1e>
 8022716:	4b12      	ldr	r3, [pc, #72]	; (8022760 <netif_set_down+0x58>)
 8022718:	f240 329b 	movw	r2, #923	; 0x39b
 802271c:	4911      	ldr	r1, [pc, #68]	; (8022764 <netif_set_down+0x5c>)
 802271e:	4812      	ldr	r0, [pc, #72]	; (8022768 <netif_set_down+0x60>)
 8022720:	f004 f990 	bl	8026a44 <iprintf>
 8022724:	e019      	b.n	802275a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802272c:	f003 0301 	and.w	r3, r3, #1
 8022730:	2b00      	cmp	r3, #0
 8022732:	d012      	beq.n	802275a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802273a:	f023 0301 	bic.w	r3, r3, #1
 802273e:	b2da      	uxtb	r2, r3
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8022746:	687b      	ldr	r3, [r7, #4]
 8022748:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802274c:	f003 0308 	and.w	r3, r3, #8
 8022750:	2b00      	cmp	r3, #0
 8022752:	d002      	beq.n	802275a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8022754:	6878      	ldr	r0, [r7, #4]
 8022756:	f001 ffbf 	bl	80246d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 802275a:	3708      	adds	r7, #8
 802275c:	46bd      	mov	sp, r7
 802275e:	bd80      	pop	{r7, pc}
 8022760:	0802c660 	.word	0x0802c660
 8022764:	0802c84c 	.word	0x0802c84c
 8022768:	0802c6b8 	.word	0x0802c6b8

0802276c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 802276c:	b580      	push	{r7, lr}
 802276e:	b082      	sub	sp, #8
 8022770:	af00      	add	r7, sp, #0
 8022772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	2b00      	cmp	r3, #0
 8022778:	d107      	bne.n	802278a <netif_set_link_up+0x1e>
 802277a:	4b13      	ldr	r3, [pc, #76]	; (80227c8 <netif_set_link_up+0x5c>)
 802277c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8022780:	4912      	ldr	r1, [pc, #72]	; (80227cc <netif_set_link_up+0x60>)
 8022782:	4813      	ldr	r0, [pc, #76]	; (80227d0 <netif_set_link_up+0x64>)
 8022784:	f004 f95e 	bl	8026a44 <iprintf>
 8022788:	e01b      	b.n	80227c2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 802278a:	687b      	ldr	r3, [r7, #4]
 802278c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022790:	f003 0304 	and.w	r3, r3, #4
 8022794:	2b00      	cmp	r3, #0
 8022796:	d114      	bne.n	80227c2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8022798:	687b      	ldr	r3, [r7, #4]
 802279a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802279e:	f043 0304 	orr.w	r3, r3, #4
 80227a2:	b2da      	uxtb	r2, r3
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80227aa:	2103      	movs	r1, #3
 80227ac:	6878      	ldr	r0, [r7, #4]
 80227ae:	f7ff ff6b 	bl	8022688 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	69db      	ldr	r3, [r3, #28]
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	d003      	beq.n	80227c2 <netif_set_link_up+0x56>
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	69db      	ldr	r3, [r3, #28]
 80227be:	6878      	ldr	r0, [r7, #4]
 80227c0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80227c2:	3708      	adds	r7, #8
 80227c4:	46bd      	mov	sp, r7
 80227c6:	bd80      	pop	{r7, pc}
 80227c8:	0802c660 	.word	0x0802c660
 80227cc:	0802c86c 	.word	0x0802c86c
 80227d0:	0802c6b8 	.word	0x0802c6b8

080227d4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80227d4:	b580      	push	{r7, lr}
 80227d6:	b082      	sub	sp, #8
 80227d8:	af00      	add	r7, sp, #0
 80227da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80227dc:	687b      	ldr	r3, [r7, #4]
 80227de:	2b00      	cmp	r3, #0
 80227e0:	d107      	bne.n	80227f2 <netif_set_link_down+0x1e>
 80227e2:	4b11      	ldr	r3, [pc, #68]	; (8022828 <netif_set_link_down+0x54>)
 80227e4:	f240 4206 	movw	r2, #1030	; 0x406
 80227e8:	4910      	ldr	r1, [pc, #64]	; (802282c <netif_set_link_down+0x58>)
 80227ea:	4811      	ldr	r0, [pc, #68]	; (8022830 <netif_set_link_down+0x5c>)
 80227ec:	f004 f92a 	bl	8026a44 <iprintf>
 80227f0:	e017      	b.n	8022822 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80227f8:	f003 0304 	and.w	r3, r3, #4
 80227fc:	2b00      	cmp	r3, #0
 80227fe:	d010      	beq.n	8022822 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022806:	f023 0304 	bic.w	r3, r3, #4
 802280a:	b2da      	uxtb	r2, r3
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	69db      	ldr	r3, [r3, #28]
 8022816:	2b00      	cmp	r3, #0
 8022818:	d003      	beq.n	8022822 <netif_set_link_down+0x4e>
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	69db      	ldr	r3, [r3, #28]
 802281e:	6878      	ldr	r0, [r7, #4]
 8022820:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8022822:	3708      	adds	r7, #8
 8022824:	46bd      	mov	sp, r7
 8022826:	bd80      	pop	{r7, pc}
 8022828:	0802c660 	.word	0x0802c660
 802282c:	0802c890 	.word	0x0802c890
 8022830:	0802c6b8 	.word	0x0802c6b8

08022834 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8022834:	b480      	push	{r7}
 8022836:	b083      	sub	sp, #12
 8022838:	af00      	add	r7, sp, #0
 802283a:	6078      	str	r0, [r7, #4]
 802283c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 802283e:	687b      	ldr	r3, [r7, #4]
 8022840:	2b00      	cmp	r3, #0
 8022842:	d002      	beq.n	802284a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8022844:	687b      	ldr	r3, [r7, #4]
 8022846:	683a      	ldr	r2, [r7, #0]
 8022848:	61da      	str	r2, [r3, #28]
  }
}
 802284a:	bf00      	nop
 802284c:	370c      	adds	r7, #12
 802284e:	46bd      	mov	sp, r7
 8022850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022854:	4770      	bx	lr
	...

08022858 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 8022858:	b580      	push	{r7, lr}
 802285a:	b086      	sub	sp, #24
 802285c:	af00      	add	r7, sp, #0
 802285e:	6078      	str	r0, [r7, #4]
 8022860:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 8022862:	687b      	ldr	r3, [r7, #4]
 8022864:	2b00      	cmp	r3, #0
 8022866:	d106      	bne.n	8022876 <netif_loop_output+0x1e>
 8022868:	4b2d      	ldr	r3, [pc, #180]	; (8022920 <netif_loop_output+0xc8>)
 802286a:	f240 424b 	movw	r2, #1099	; 0x44b
 802286e:	492d      	ldr	r1, [pc, #180]	; (8022924 <netif_loop_output+0xcc>)
 8022870:	482d      	ldr	r0, [pc, #180]	; (8022928 <netif_loop_output+0xd0>)
 8022872:	f004 f8e7 	bl	8026a44 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 8022876:	683b      	ldr	r3, [r7, #0]
 8022878:	2b00      	cmp	r3, #0
 802287a:	d106      	bne.n	802288a <netif_loop_output+0x32>
 802287c:	4b28      	ldr	r3, [pc, #160]	; (8022920 <netif_loop_output+0xc8>)
 802287e:	f240 424c 	movw	r2, #1100	; 0x44c
 8022882:	492a      	ldr	r1, [pc, #168]	; (802292c <netif_loop_output+0xd4>)
 8022884:	4828      	ldr	r0, [pc, #160]	; (8022928 <netif_loop_output+0xd0>)
 8022886:	f004 f8dd 	bl	8026a44 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 802288a:	683b      	ldr	r3, [r7, #0]
 802288c:	891b      	ldrh	r3, [r3, #8]
 802288e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022892:	4619      	mov	r1, r3
 8022894:	200e      	movs	r0, #14
 8022896:	f000 f8bb 	bl	8022a10 <pbuf_alloc>
 802289a:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 802289c:	693b      	ldr	r3, [r7, #16]
 802289e:	2b00      	cmp	r3, #0
 80228a0:	d102      	bne.n	80228a8 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 80228a2:	f04f 33ff 	mov.w	r3, #4294967295
 80228a6:	e037      	b.n	8022918 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 80228a8:	6839      	ldr	r1, [r7, #0]
 80228aa:	6938      	ldr	r0, [r7, #16]
 80228ac:	f000 fcba 	bl	8023224 <pbuf_copy>
 80228b0:	4603      	mov	r3, r0
 80228b2:	73fb      	strb	r3, [r7, #15]
 80228b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80228b8:	2b00      	cmp	r3, #0
 80228ba:	d005      	beq.n	80228c8 <netif_loop_output+0x70>
    pbuf_free(r);
 80228bc:	6938      	ldr	r0, [r7, #16]
 80228be:	f000 fb89 	bl	8022fd4 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 80228c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80228c6:	e027      	b.n	8022918 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 80228c8:	693b      	ldr	r3, [r7, #16]
 80228ca:	617b      	str	r3, [r7, #20]
 80228cc:	e002      	b.n	80228d4 <netif_loop_output+0x7c>
 80228ce:	697b      	ldr	r3, [r7, #20]
 80228d0:	681b      	ldr	r3, [r3, #0]
 80228d2:	617b      	str	r3, [r7, #20]
 80228d4:	697b      	ldr	r3, [r7, #20]
 80228d6:	681b      	ldr	r3, [r3, #0]
 80228d8:	2b00      	cmp	r3, #0
 80228da:	d1f8      	bne.n	80228ce <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80228e0:	2b00      	cmp	r3, #0
 80228e2:	d012      	beq.n	802290a <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 80228e4:	687b      	ldr	r3, [r7, #4]
 80228e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d106      	bne.n	80228fa <netif_loop_output+0xa2>
 80228ec:	4b0c      	ldr	r3, [pc, #48]	; (8022920 <netif_loop_output+0xc8>)
 80228ee:	f240 4277 	movw	r2, #1143	; 0x477
 80228f2:	490f      	ldr	r1, [pc, #60]	; (8022930 <netif_loop_output+0xd8>)
 80228f4:	480c      	ldr	r0, [pc, #48]	; (8022928 <netif_loop_output+0xd0>)
 80228f6:	f004 f8a5 	bl	8026a44 <iprintf>
    netif->loop_last->next = r;
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80228fe:	693a      	ldr	r2, [r7, #16]
 8022900:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 8022902:	687b      	ldr	r3, [r7, #4]
 8022904:	697a      	ldr	r2, [r7, #20]
 8022906:	63da      	str	r2, [r3, #60]	; 0x3c
 8022908:	e005      	b.n	8022916 <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	693a      	ldr	r2, [r7, #16]
 802290e:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	697a      	ldr	r2, [r7, #20]
 8022914:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 8022916:	2300      	movs	r3, #0
}
 8022918:	4618      	mov	r0, r3
 802291a:	3718      	adds	r7, #24
 802291c:	46bd      	mov	sp, r7
 802291e:	bd80      	pop	{r7, pc}
 8022920:	0802c660 	.word	0x0802c660
 8022924:	0802c8b4 	.word	0x0802c8b4
 8022928:	0802c6b8 	.word	0x0802c6b8
 802292c:	0802c8d8 	.word	0x0802c8d8
 8022930:	0802c8f8 	.word	0x0802c8f8

08022934 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 8022934:	b580      	push	{r7, lr}
 8022936:	b084      	sub	sp, #16
 8022938:	af00      	add	r7, sp, #0
 802293a:	60f8      	str	r0, [r7, #12]
 802293c:	60b9      	str	r1, [r7, #8]
 802293e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 8022940:	68b9      	ldr	r1, [r7, #8]
 8022942:	68f8      	ldr	r0, [r7, #12]
 8022944:	f7ff ff88 	bl	8022858 <netif_loop_output>
 8022948:	4603      	mov	r3, r0
}
 802294a:	4618      	mov	r0, r3
 802294c:	3710      	adds	r7, #16
 802294e:	46bd      	mov	sp, r7
 8022950:	bd80      	pop	{r7, pc}

08022952 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8022952:	b480      	push	{r7}
 8022954:	b085      	sub	sp, #20
 8022956:	af00      	add	r7, sp, #0
 8022958:	60f8      	str	r0, [r7, #12]
 802295a:	60b9      	str	r1, [r7, #8]
 802295c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 802295e:	f06f 030b 	mvn.w	r3, #11
}
 8022962:	4618      	mov	r0, r3
 8022964:	3714      	adds	r7, #20
 8022966:	46bd      	mov	sp, r7
 8022968:	f85d 7b04 	ldr.w	r7, [sp], #4
 802296c:	4770      	bx	lr
	...

08022970 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8022970:	b480      	push	{r7}
 8022972:	b085      	sub	sp, #20
 8022974:	af00      	add	r7, sp, #0
 8022976:	4603      	mov	r3, r0
 8022978:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 802297a:	79fb      	ldrb	r3, [r7, #7]
 802297c:	2b00      	cmp	r3, #0
 802297e:	d013      	beq.n	80229a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8022980:	4b0d      	ldr	r3, [pc, #52]	; (80229b8 <netif_get_by_index+0x48>)
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	60fb      	str	r3, [r7, #12]
 8022986:	e00c      	b.n	80229a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8022988:	68fb      	ldr	r3, [r7, #12]
 802298a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802298e:	3301      	adds	r3, #1
 8022990:	b2db      	uxtb	r3, r3
 8022992:	79fa      	ldrb	r2, [r7, #7]
 8022994:	429a      	cmp	r2, r3
 8022996:	d101      	bne.n	802299c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8022998:	68fb      	ldr	r3, [r7, #12]
 802299a:	e006      	b.n	80229aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 802299c:	68fb      	ldr	r3, [r7, #12]
 802299e:	681b      	ldr	r3, [r3, #0]
 80229a0:	60fb      	str	r3, [r7, #12]
 80229a2:	68fb      	ldr	r3, [r7, #12]
 80229a4:	2b00      	cmp	r3, #0
 80229a6:	d1ef      	bne.n	8022988 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80229a8:	2300      	movs	r3, #0
}
 80229aa:	4618      	mov	r0, r3
 80229ac:	3714      	adds	r7, #20
 80229ae:	46bd      	mov	sp, r7
 80229b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229b4:	4770      	bx	lr
 80229b6:	bf00      	nop
 80229b8:	20015de4 	.word	0x20015de4

080229bc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80229bc:	b480      	push	{r7}
 80229be:	b085      	sub	sp, #20
 80229c0:	af00      	add	r7, sp, #0
 80229c2:	60f8      	str	r0, [r7, #12]
 80229c4:	60b9      	str	r1, [r7, #8]
 80229c6:	4611      	mov	r1, r2
 80229c8:	461a      	mov	r2, r3
 80229ca:	460b      	mov	r3, r1
 80229cc:	80fb      	strh	r3, [r7, #6]
 80229ce:	4613      	mov	r3, r2
 80229d0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80229d2:	68fb      	ldr	r3, [r7, #12]
 80229d4:	2200      	movs	r2, #0
 80229d6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80229d8:	68fb      	ldr	r3, [r7, #12]
 80229da:	68ba      	ldr	r2, [r7, #8]
 80229dc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80229de:	68fb      	ldr	r3, [r7, #12]
 80229e0:	88fa      	ldrh	r2, [r7, #6]
 80229e2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80229e4:	68fb      	ldr	r3, [r7, #12]
 80229e6:	88ba      	ldrh	r2, [r7, #4]
 80229e8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80229ea:	8b3b      	ldrh	r3, [r7, #24]
 80229ec:	b2da      	uxtb	r2, r3
 80229ee:	68fb      	ldr	r3, [r7, #12]
 80229f0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80229f2:	68fb      	ldr	r3, [r7, #12]
 80229f4:	7f3a      	ldrb	r2, [r7, #28]
 80229f6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80229f8:	68fb      	ldr	r3, [r7, #12]
 80229fa:	2201      	movs	r2, #1
 80229fc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80229fe:	68fb      	ldr	r3, [r7, #12]
 8022a00:	2200      	movs	r2, #0
 8022a02:	73da      	strb	r2, [r3, #15]
}
 8022a04:	bf00      	nop
 8022a06:	3714      	adds	r7, #20
 8022a08:	46bd      	mov	sp, r7
 8022a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a0e:	4770      	bx	lr

08022a10 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8022a10:	b580      	push	{r7, lr}
 8022a12:	b08c      	sub	sp, #48	; 0x30
 8022a14:	af02      	add	r7, sp, #8
 8022a16:	4603      	mov	r3, r0
 8022a18:	71fb      	strb	r3, [r7, #7]
 8022a1a:	460b      	mov	r3, r1
 8022a1c:	80bb      	strh	r3, [r7, #4]
 8022a1e:	4613      	mov	r3, r2
 8022a20:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8022a22:	79fb      	ldrb	r3, [r7, #7]
 8022a24:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8022a26:	887b      	ldrh	r3, [r7, #2]
 8022a28:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8022a2c:	d07d      	beq.n	8022b2a <pbuf_alloc+0x11a>
 8022a2e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8022a32:	f300 80c6 	bgt.w	8022bc2 <pbuf_alloc+0x1b2>
 8022a36:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8022a3a:	d010      	beq.n	8022a5e <pbuf_alloc+0x4e>
 8022a3c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8022a40:	f300 80bf 	bgt.w	8022bc2 <pbuf_alloc+0x1b2>
 8022a44:	2b01      	cmp	r3, #1
 8022a46:	d002      	beq.n	8022a4e <pbuf_alloc+0x3e>
 8022a48:	2b41      	cmp	r3, #65	; 0x41
 8022a4a:	f040 80ba 	bne.w	8022bc2 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8022a4e:	887a      	ldrh	r2, [r7, #2]
 8022a50:	88bb      	ldrh	r3, [r7, #4]
 8022a52:	4619      	mov	r1, r3
 8022a54:	2000      	movs	r0, #0
 8022a56:	f000 f8cf 	bl	8022bf8 <pbuf_alloc_reference>
 8022a5a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8022a5c:	e0bb      	b.n	8022bd6 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8022a5e:	2300      	movs	r3, #0
 8022a60:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8022a62:	2300      	movs	r3, #0
 8022a64:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8022a66:	88bb      	ldrh	r3, [r7, #4]
 8022a68:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8022a6a:	2005      	movs	r0, #5
 8022a6c:	f7ff fb32 	bl	80220d4 <memp_malloc>
 8022a70:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8022a72:	693b      	ldr	r3, [r7, #16]
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	d107      	bne.n	8022a88 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8022a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	d002      	beq.n	8022a84 <pbuf_alloc+0x74>
            pbuf_free(p);
 8022a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022a80:	f000 faa8 	bl	8022fd4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8022a84:	2300      	movs	r3, #0
 8022a86:	e0a7      	b.n	8022bd8 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8022a88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022a8a:	3303      	adds	r3, #3
 8022a8c:	b29b      	uxth	r3, r3
 8022a8e:	f023 0303 	bic.w	r3, r3, #3
 8022a92:	b29b      	uxth	r3, r3
 8022a94:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8022a98:	b29b      	uxth	r3, r3
 8022a9a:	8b7a      	ldrh	r2, [r7, #26]
 8022a9c:	4293      	cmp	r3, r2
 8022a9e:	bf28      	it	cs
 8022aa0:	4613      	movcs	r3, r2
 8022aa2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8022aa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022aa6:	3310      	adds	r3, #16
 8022aa8:	693a      	ldr	r2, [r7, #16]
 8022aaa:	4413      	add	r3, r2
 8022aac:	3303      	adds	r3, #3
 8022aae:	f023 0303 	bic.w	r3, r3, #3
 8022ab2:	4618      	mov	r0, r3
 8022ab4:	89f9      	ldrh	r1, [r7, #14]
 8022ab6:	8b7a      	ldrh	r2, [r7, #26]
 8022ab8:	2300      	movs	r3, #0
 8022aba:	9301      	str	r3, [sp, #4]
 8022abc:	887b      	ldrh	r3, [r7, #2]
 8022abe:	9300      	str	r3, [sp, #0]
 8022ac0:	460b      	mov	r3, r1
 8022ac2:	4601      	mov	r1, r0
 8022ac4:	6938      	ldr	r0, [r7, #16]
 8022ac6:	f7ff ff79 	bl	80229bc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8022aca:	693b      	ldr	r3, [r7, #16]
 8022acc:	685b      	ldr	r3, [r3, #4]
 8022ace:	f003 0303 	and.w	r3, r3, #3
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d006      	beq.n	8022ae4 <pbuf_alloc+0xd4>
 8022ad6:	4b42      	ldr	r3, [pc, #264]	; (8022be0 <pbuf_alloc+0x1d0>)
 8022ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022adc:	4941      	ldr	r1, [pc, #260]	; (8022be4 <pbuf_alloc+0x1d4>)
 8022ade:	4842      	ldr	r0, [pc, #264]	; (8022be8 <pbuf_alloc+0x1d8>)
 8022ae0:	f003 ffb0 	bl	8026a44 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8022ae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022ae6:	3303      	adds	r3, #3
 8022ae8:	f023 0303 	bic.w	r3, r3, #3
 8022aec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8022af0:	d106      	bne.n	8022b00 <pbuf_alloc+0xf0>
 8022af2:	4b3b      	ldr	r3, [pc, #236]	; (8022be0 <pbuf_alloc+0x1d0>)
 8022af4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8022af8:	493c      	ldr	r1, [pc, #240]	; (8022bec <pbuf_alloc+0x1dc>)
 8022afa:	483b      	ldr	r0, [pc, #236]	; (8022be8 <pbuf_alloc+0x1d8>)
 8022afc:	f003 ffa2 	bl	8026a44 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8022b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d102      	bne.n	8022b0c <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8022b06:	693b      	ldr	r3, [r7, #16]
 8022b08:	627b      	str	r3, [r7, #36]	; 0x24
 8022b0a:	e002      	b.n	8022b12 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8022b0c:	69fb      	ldr	r3, [r7, #28]
 8022b0e:	693a      	ldr	r2, [r7, #16]
 8022b10:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8022b12:	693b      	ldr	r3, [r7, #16]
 8022b14:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8022b16:	8b7a      	ldrh	r2, [r7, #26]
 8022b18:	89fb      	ldrh	r3, [r7, #14]
 8022b1a:	1ad3      	subs	r3, r2, r3
 8022b1c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8022b1e:	2300      	movs	r3, #0
 8022b20:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8022b22:	8b7b      	ldrh	r3, [r7, #26]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d1a0      	bne.n	8022a6a <pbuf_alloc+0x5a>
      break;
 8022b28:	e055      	b.n	8022bd6 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8022b2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022b2c:	3303      	adds	r3, #3
 8022b2e:	b29b      	uxth	r3, r3
 8022b30:	f023 0303 	bic.w	r3, r3, #3
 8022b34:	b29a      	uxth	r2, r3
 8022b36:	88bb      	ldrh	r3, [r7, #4]
 8022b38:	3303      	adds	r3, #3
 8022b3a:	b29b      	uxth	r3, r3
 8022b3c:	f023 0303 	bic.w	r3, r3, #3
 8022b40:	b29b      	uxth	r3, r3
 8022b42:	4413      	add	r3, r2
 8022b44:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8022b46:	8b3b      	ldrh	r3, [r7, #24]
 8022b48:	3310      	adds	r3, #16
 8022b4a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8022b4c:	8b3a      	ldrh	r2, [r7, #24]
 8022b4e:	88bb      	ldrh	r3, [r7, #4]
 8022b50:	3303      	adds	r3, #3
 8022b52:	f023 0303 	bic.w	r3, r3, #3
 8022b56:	429a      	cmp	r2, r3
 8022b58:	d306      	bcc.n	8022b68 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8022b5a:	8afa      	ldrh	r2, [r7, #22]
 8022b5c:	88bb      	ldrh	r3, [r7, #4]
 8022b5e:	3303      	adds	r3, #3
 8022b60:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8022b64:	429a      	cmp	r2, r3
 8022b66:	d201      	bcs.n	8022b6c <pbuf_alloc+0x15c>
        return NULL;
 8022b68:	2300      	movs	r3, #0
 8022b6a:	e035      	b.n	8022bd8 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8022b6c:	8afb      	ldrh	r3, [r7, #22]
 8022b6e:	4618      	mov	r0, r3
 8022b70:	f7ff f920 	bl	8021db4 <mem_malloc>
 8022b74:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8022b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b78:	2b00      	cmp	r3, #0
 8022b7a:	d101      	bne.n	8022b80 <pbuf_alloc+0x170>
        return NULL;
 8022b7c:	2300      	movs	r3, #0
 8022b7e:	e02b      	b.n	8022bd8 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8022b80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022b82:	3310      	adds	r3, #16
 8022b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022b86:	4413      	add	r3, r2
 8022b88:	3303      	adds	r3, #3
 8022b8a:	f023 0303 	bic.w	r3, r3, #3
 8022b8e:	4618      	mov	r0, r3
 8022b90:	88b9      	ldrh	r1, [r7, #4]
 8022b92:	88ba      	ldrh	r2, [r7, #4]
 8022b94:	2300      	movs	r3, #0
 8022b96:	9301      	str	r3, [sp, #4]
 8022b98:	887b      	ldrh	r3, [r7, #2]
 8022b9a:	9300      	str	r3, [sp, #0]
 8022b9c:	460b      	mov	r3, r1
 8022b9e:	4601      	mov	r1, r0
 8022ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022ba2:	f7ff ff0b 	bl	80229bc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8022ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ba8:	685b      	ldr	r3, [r3, #4]
 8022baa:	f003 0303 	and.w	r3, r3, #3
 8022bae:	2b00      	cmp	r3, #0
 8022bb0:	d010      	beq.n	8022bd4 <pbuf_alloc+0x1c4>
 8022bb2:	4b0b      	ldr	r3, [pc, #44]	; (8022be0 <pbuf_alloc+0x1d0>)
 8022bb4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8022bb8:	490d      	ldr	r1, [pc, #52]	; (8022bf0 <pbuf_alloc+0x1e0>)
 8022bba:	480b      	ldr	r0, [pc, #44]	; (8022be8 <pbuf_alloc+0x1d8>)
 8022bbc:	f003 ff42 	bl	8026a44 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8022bc0:	e008      	b.n	8022bd4 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8022bc2:	4b07      	ldr	r3, [pc, #28]	; (8022be0 <pbuf_alloc+0x1d0>)
 8022bc4:	f240 1227 	movw	r2, #295	; 0x127
 8022bc8:	490a      	ldr	r1, [pc, #40]	; (8022bf4 <pbuf_alloc+0x1e4>)
 8022bca:	4807      	ldr	r0, [pc, #28]	; (8022be8 <pbuf_alloc+0x1d8>)
 8022bcc:	f003 ff3a 	bl	8026a44 <iprintf>
      return NULL;
 8022bd0:	2300      	movs	r3, #0
 8022bd2:	e001      	b.n	8022bd8 <pbuf_alloc+0x1c8>
      break;
 8022bd4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8022bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022bd8:	4618      	mov	r0, r3
 8022bda:	3728      	adds	r7, #40	; 0x28
 8022bdc:	46bd      	mov	sp, r7
 8022bde:	bd80      	pop	{r7, pc}
 8022be0:	0802c998 	.word	0x0802c998
 8022be4:	0802c9c8 	.word	0x0802c9c8
 8022be8:	0802c9f8 	.word	0x0802c9f8
 8022bec:	0802ca20 	.word	0x0802ca20
 8022bf0:	0802ca54 	.word	0x0802ca54
 8022bf4:	0802ca80 	.word	0x0802ca80

08022bf8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8022bf8:	b580      	push	{r7, lr}
 8022bfa:	b086      	sub	sp, #24
 8022bfc:	af02      	add	r7, sp, #8
 8022bfe:	6078      	str	r0, [r7, #4]
 8022c00:	460b      	mov	r3, r1
 8022c02:	807b      	strh	r3, [r7, #2]
 8022c04:	4613      	mov	r3, r2
 8022c06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8022c08:	883b      	ldrh	r3, [r7, #0]
 8022c0a:	2b41      	cmp	r3, #65	; 0x41
 8022c0c:	d009      	beq.n	8022c22 <pbuf_alloc_reference+0x2a>
 8022c0e:	883b      	ldrh	r3, [r7, #0]
 8022c10:	2b01      	cmp	r3, #1
 8022c12:	d006      	beq.n	8022c22 <pbuf_alloc_reference+0x2a>
 8022c14:	4b0f      	ldr	r3, [pc, #60]	; (8022c54 <pbuf_alloc_reference+0x5c>)
 8022c16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8022c1a:	490f      	ldr	r1, [pc, #60]	; (8022c58 <pbuf_alloc_reference+0x60>)
 8022c1c:	480f      	ldr	r0, [pc, #60]	; (8022c5c <pbuf_alloc_reference+0x64>)
 8022c1e:	f003 ff11 	bl	8026a44 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8022c22:	2004      	movs	r0, #4
 8022c24:	f7ff fa56 	bl	80220d4 <memp_malloc>
 8022c28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8022c2a:	68fb      	ldr	r3, [r7, #12]
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	d101      	bne.n	8022c34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8022c30:	2300      	movs	r3, #0
 8022c32:	e00b      	b.n	8022c4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8022c34:	8879      	ldrh	r1, [r7, #2]
 8022c36:	887a      	ldrh	r2, [r7, #2]
 8022c38:	2300      	movs	r3, #0
 8022c3a:	9301      	str	r3, [sp, #4]
 8022c3c:	883b      	ldrh	r3, [r7, #0]
 8022c3e:	9300      	str	r3, [sp, #0]
 8022c40:	460b      	mov	r3, r1
 8022c42:	6879      	ldr	r1, [r7, #4]
 8022c44:	68f8      	ldr	r0, [r7, #12]
 8022c46:	f7ff feb9 	bl	80229bc <pbuf_init_alloced_pbuf>
  return p;
 8022c4a:	68fb      	ldr	r3, [r7, #12]
}
 8022c4c:	4618      	mov	r0, r3
 8022c4e:	3710      	adds	r7, #16
 8022c50:	46bd      	mov	sp, r7
 8022c52:	bd80      	pop	{r7, pc}
 8022c54:	0802c998 	.word	0x0802c998
 8022c58:	0802ca9c 	.word	0x0802ca9c
 8022c5c:	0802c9f8 	.word	0x0802c9f8

08022c60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8022c60:	b580      	push	{r7, lr}
 8022c62:	b088      	sub	sp, #32
 8022c64:	af02      	add	r7, sp, #8
 8022c66:	607b      	str	r3, [r7, #4]
 8022c68:	4603      	mov	r3, r0
 8022c6a:	73fb      	strb	r3, [r7, #15]
 8022c6c:	460b      	mov	r3, r1
 8022c6e:	81bb      	strh	r3, [r7, #12]
 8022c70:	4613      	mov	r3, r2
 8022c72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8022c74:	7bfb      	ldrb	r3, [r7, #15]
 8022c76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8022c78:	8a7b      	ldrh	r3, [r7, #18]
 8022c7a:	3303      	adds	r3, #3
 8022c7c:	f023 0203 	bic.w	r2, r3, #3
 8022c80:	89bb      	ldrh	r3, [r7, #12]
 8022c82:	441a      	add	r2, r3
 8022c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022c86:	429a      	cmp	r2, r3
 8022c88:	d901      	bls.n	8022c8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8022c8a:	2300      	movs	r3, #0
 8022c8c:	e018      	b.n	8022cc0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8022c8e:	6a3b      	ldr	r3, [r7, #32]
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d007      	beq.n	8022ca4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8022c94:	8a7b      	ldrh	r3, [r7, #18]
 8022c96:	3303      	adds	r3, #3
 8022c98:	f023 0303 	bic.w	r3, r3, #3
 8022c9c:	6a3a      	ldr	r2, [r7, #32]
 8022c9e:	4413      	add	r3, r2
 8022ca0:	617b      	str	r3, [r7, #20]
 8022ca2:	e001      	b.n	8022ca8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8022ca4:	2300      	movs	r3, #0
 8022ca6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8022ca8:	6878      	ldr	r0, [r7, #4]
 8022caa:	89b9      	ldrh	r1, [r7, #12]
 8022cac:	89ba      	ldrh	r2, [r7, #12]
 8022cae:	2302      	movs	r3, #2
 8022cb0:	9301      	str	r3, [sp, #4]
 8022cb2:	897b      	ldrh	r3, [r7, #10]
 8022cb4:	9300      	str	r3, [sp, #0]
 8022cb6:	460b      	mov	r3, r1
 8022cb8:	6979      	ldr	r1, [r7, #20]
 8022cba:	f7ff fe7f 	bl	80229bc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8022cbe:	687b      	ldr	r3, [r7, #4]
}
 8022cc0:	4618      	mov	r0, r3
 8022cc2:	3718      	adds	r7, #24
 8022cc4:	46bd      	mov	sp, r7
 8022cc6:	bd80      	pop	{r7, pc}

08022cc8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8022cc8:	b580      	push	{r7, lr}
 8022cca:	b084      	sub	sp, #16
 8022ccc:	af00      	add	r7, sp, #0
 8022cce:	6078      	str	r0, [r7, #4]
 8022cd0:	460b      	mov	r3, r1
 8022cd2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	2b00      	cmp	r3, #0
 8022cd8:	d106      	bne.n	8022ce8 <pbuf_realloc+0x20>
 8022cda:	4b3a      	ldr	r3, [pc, #232]	; (8022dc4 <pbuf_realloc+0xfc>)
 8022cdc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8022ce0:	4939      	ldr	r1, [pc, #228]	; (8022dc8 <pbuf_realloc+0x100>)
 8022ce2:	483a      	ldr	r0, [pc, #232]	; (8022dcc <pbuf_realloc+0x104>)
 8022ce4:	f003 feae 	bl	8026a44 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	891b      	ldrh	r3, [r3, #8]
 8022cec:	887a      	ldrh	r2, [r7, #2]
 8022cee:	429a      	cmp	r2, r3
 8022cf0:	d263      	bcs.n	8022dba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8022cf2:	687b      	ldr	r3, [r7, #4]
 8022cf4:	891a      	ldrh	r2, [r3, #8]
 8022cf6:	887b      	ldrh	r3, [r7, #2]
 8022cf8:	1ad3      	subs	r3, r2, r3
 8022cfa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8022cfc:	887b      	ldrh	r3, [r7, #2]
 8022cfe:	817b      	strh	r3, [r7, #10]
  q = p;
 8022d00:	687b      	ldr	r3, [r7, #4]
 8022d02:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8022d04:	e018      	b.n	8022d38 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8022d06:	68fb      	ldr	r3, [r7, #12]
 8022d08:	895b      	ldrh	r3, [r3, #10]
 8022d0a:	897a      	ldrh	r2, [r7, #10]
 8022d0c:	1ad3      	subs	r3, r2, r3
 8022d0e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8022d10:	68fb      	ldr	r3, [r7, #12]
 8022d12:	891a      	ldrh	r2, [r3, #8]
 8022d14:	893b      	ldrh	r3, [r7, #8]
 8022d16:	1ad3      	subs	r3, r2, r3
 8022d18:	b29a      	uxth	r2, r3
 8022d1a:	68fb      	ldr	r3, [r7, #12]
 8022d1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8022d1e:	68fb      	ldr	r3, [r7, #12]
 8022d20:	681b      	ldr	r3, [r3, #0]
 8022d22:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8022d24:	68fb      	ldr	r3, [r7, #12]
 8022d26:	2b00      	cmp	r3, #0
 8022d28:	d106      	bne.n	8022d38 <pbuf_realloc+0x70>
 8022d2a:	4b26      	ldr	r3, [pc, #152]	; (8022dc4 <pbuf_realloc+0xfc>)
 8022d2c:	f240 12af 	movw	r2, #431	; 0x1af
 8022d30:	4927      	ldr	r1, [pc, #156]	; (8022dd0 <pbuf_realloc+0x108>)
 8022d32:	4826      	ldr	r0, [pc, #152]	; (8022dcc <pbuf_realloc+0x104>)
 8022d34:	f003 fe86 	bl	8026a44 <iprintf>
  while (rem_len > q->len) {
 8022d38:	68fb      	ldr	r3, [r7, #12]
 8022d3a:	895b      	ldrh	r3, [r3, #10]
 8022d3c:	897a      	ldrh	r2, [r7, #10]
 8022d3e:	429a      	cmp	r2, r3
 8022d40:	d8e1      	bhi.n	8022d06 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8022d42:	68fb      	ldr	r3, [r7, #12]
 8022d44:	7b1b      	ldrb	r3, [r3, #12]
 8022d46:	f003 030f 	and.w	r3, r3, #15
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d121      	bne.n	8022d92 <pbuf_realloc+0xca>
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	895b      	ldrh	r3, [r3, #10]
 8022d52:	897a      	ldrh	r2, [r7, #10]
 8022d54:	429a      	cmp	r2, r3
 8022d56:	d01c      	beq.n	8022d92 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8022d58:	68fb      	ldr	r3, [r7, #12]
 8022d5a:	7b5b      	ldrb	r3, [r3, #13]
 8022d5c:	f003 0302 	and.w	r3, r3, #2
 8022d60:	2b00      	cmp	r3, #0
 8022d62:	d116      	bne.n	8022d92 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8022d64:	68fb      	ldr	r3, [r7, #12]
 8022d66:	685a      	ldr	r2, [r3, #4]
 8022d68:	68fb      	ldr	r3, [r7, #12]
 8022d6a:	1ad3      	subs	r3, r2, r3
 8022d6c:	b29a      	uxth	r2, r3
 8022d6e:	897b      	ldrh	r3, [r7, #10]
 8022d70:	4413      	add	r3, r2
 8022d72:	b29b      	uxth	r3, r3
 8022d74:	4619      	mov	r1, r3
 8022d76:	68f8      	ldr	r0, [r7, #12]
 8022d78:	f7fe ff20 	bl	8021bbc <mem_trim>
 8022d7c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8022d7e:	68fb      	ldr	r3, [r7, #12]
 8022d80:	2b00      	cmp	r3, #0
 8022d82:	d106      	bne.n	8022d92 <pbuf_realloc+0xca>
 8022d84:	4b0f      	ldr	r3, [pc, #60]	; (8022dc4 <pbuf_realloc+0xfc>)
 8022d86:	f240 12bd 	movw	r2, #445	; 0x1bd
 8022d8a:	4912      	ldr	r1, [pc, #72]	; (8022dd4 <pbuf_realloc+0x10c>)
 8022d8c:	480f      	ldr	r0, [pc, #60]	; (8022dcc <pbuf_realloc+0x104>)
 8022d8e:	f003 fe59 	bl	8026a44 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8022d92:	68fb      	ldr	r3, [r7, #12]
 8022d94:	897a      	ldrh	r2, [r7, #10]
 8022d96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8022d98:	68fb      	ldr	r3, [r7, #12]
 8022d9a:	895a      	ldrh	r2, [r3, #10]
 8022d9c:	68fb      	ldr	r3, [r7, #12]
 8022d9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8022da0:	68fb      	ldr	r3, [r7, #12]
 8022da2:	681b      	ldr	r3, [r3, #0]
 8022da4:	2b00      	cmp	r3, #0
 8022da6:	d004      	beq.n	8022db2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8022da8:	68fb      	ldr	r3, [r7, #12]
 8022daa:	681b      	ldr	r3, [r3, #0]
 8022dac:	4618      	mov	r0, r3
 8022dae:	f000 f911 	bl	8022fd4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8022db2:	68fb      	ldr	r3, [r7, #12]
 8022db4:	2200      	movs	r2, #0
 8022db6:	601a      	str	r2, [r3, #0]
 8022db8:	e000      	b.n	8022dbc <pbuf_realloc+0xf4>
    return;
 8022dba:	bf00      	nop

}
 8022dbc:	3710      	adds	r7, #16
 8022dbe:	46bd      	mov	sp, r7
 8022dc0:	bd80      	pop	{r7, pc}
 8022dc2:	bf00      	nop
 8022dc4:	0802c998 	.word	0x0802c998
 8022dc8:	0802cab0 	.word	0x0802cab0
 8022dcc:	0802c9f8 	.word	0x0802c9f8
 8022dd0:	0802cac8 	.word	0x0802cac8
 8022dd4:	0802cae0 	.word	0x0802cae0

08022dd8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8022dd8:	b580      	push	{r7, lr}
 8022dda:	b086      	sub	sp, #24
 8022ddc:	af00      	add	r7, sp, #0
 8022dde:	60f8      	str	r0, [r7, #12]
 8022de0:	60b9      	str	r1, [r7, #8]
 8022de2:	4613      	mov	r3, r2
 8022de4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8022de6:	68fb      	ldr	r3, [r7, #12]
 8022de8:	2b00      	cmp	r3, #0
 8022dea:	d106      	bne.n	8022dfa <pbuf_add_header_impl+0x22>
 8022dec:	4b2b      	ldr	r3, [pc, #172]	; (8022e9c <pbuf_add_header_impl+0xc4>)
 8022dee:	f240 12df 	movw	r2, #479	; 0x1df
 8022df2:	492b      	ldr	r1, [pc, #172]	; (8022ea0 <pbuf_add_header_impl+0xc8>)
 8022df4:	482b      	ldr	r0, [pc, #172]	; (8022ea4 <pbuf_add_header_impl+0xcc>)
 8022df6:	f003 fe25 	bl	8026a44 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8022dfa:	68fb      	ldr	r3, [r7, #12]
 8022dfc:	2b00      	cmp	r3, #0
 8022dfe:	d003      	beq.n	8022e08 <pbuf_add_header_impl+0x30>
 8022e00:	68bb      	ldr	r3, [r7, #8]
 8022e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022e06:	d301      	bcc.n	8022e0c <pbuf_add_header_impl+0x34>
    return 1;
 8022e08:	2301      	movs	r3, #1
 8022e0a:	e043      	b.n	8022e94 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8022e0c:	68bb      	ldr	r3, [r7, #8]
 8022e0e:	2b00      	cmp	r3, #0
 8022e10:	d101      	bne.n	8022e16 <pbuf_add_header_impl+0x3e>
    return 0;
 8022e12:	2300      	movs	r3, #0
 8022e14:	e03e      	b.n	8022e94 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8022e16:	68bb      	ldr	r3, [r7, #8]
 8022e18:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8022e1a:	68fb      	ldr	r3, [r7, #12]
 8022e1c:	891a      	ldrh	r2, [r3, #8]
 8022e1e:	8a7b      	ldrh	r3, [r7, #18]
 8022e20:	4413      	add	r3, r2
 8022e22:	b29b      	uxth	r3, r3
 8022e24:	8a7a      	ldrh	r2, [r7, #18]
 8022e26:	429a      	cmp	r2, r3
 8022e28:	d901      	bls.n	8022e2e <pbuf_add_header_impl+0x56>
    return 1;
 8022e2a:	2301      	movs	r3, #1
 8022e2c:	e032      	b.n	8022e94 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8022e2e:	68fb      	ldr	r3, [r7, #12]
 8022e30:	7b1b      	ldrb	r3, [r3, #12]
 8022e32:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8022e34:	8a3b      	ldrh	r3, [r7, #16]
 8022e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022e3a:	2b00      	cmp	r3, #0
 8022e3c:	d00c      	beq.n	8022e58 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8022e3e:	68fb      	ldr	r3, [r7, #12]
 8022e40:	685a      	ldr	r2, [r3, #4]
 8022e42:	68bb      	ldr	r3, [r7, #8]
 8022e44:	425b      	negs	r3, r3
 8022e46:	4413      	add	r3, r2
 8022e48:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8022e4a:	68fb      	ldr	r3, [r7, #12]
 8022e4c:	3310      	adds	r3, #16
 8022e4e:	697a      	ldr	r2, [r7, #20]
 8022e50:	429a      	cmp	r2, r3
 8022e52:	d20d      	bcs.n	8022e70 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8022e54:	2301      	movs	r3, #1
 8022e56:	e01d      	b.n	8022e94 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8022e58:	79fb      	ldrb	r3, [r7, #7]
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	d006      	beq.n	8022e6c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8022e5e:	68fb      	ldr	r3, [r7, #12]
 8022e60:	685a      	ldr	r2, [r3, #4]
 8022e62:	68bb      	ldr	r3, [r7, #8]
 8022e64:	425b      	negs	r3, r3
 8022e66:	4413      	add	r3, r2
 8022e68:	617b      	str	r3, [r7, #20]
 8022e6a:	e001      	b.n	8022e70 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8022e6c:	2301      	movs	r3, #1
 8022e6e:	e011      	b.n	8022e94 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8022e70:	68fb      	ldr	r3, [r7, #12]
 8022e72:	697a      	ldr	r2, [r7, #20]
 8022e74:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8022e76:	68fb      	ldr	r3, [r7, #12]
 8022e78:	895a      	ldrh	r2, [r3, #10]
 8022e7a:	8a7b      	ldrh	r3, [r7, #18]
 8022e7c:	4413      	add	r3, r2
 8022e7e:	b29a      	uxth	r2, r3
 8022e80:	68fb      	ldr	r3, [r7, #12]
 8022e82:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8022e84:	68fb      	ldr	r3, [r7, #12]
 8022e86:	891a      	ldrh	r2, [r3, #8]
 8022e88:	8a7b      	ldrh	r3, [r7, #18]
 8022e8a:	4413      	add	r3, r2
 8022e8c:	b29a      	uxth	r2, r3
 8022e8e:	68fb      	ldr	r3, [r7, #12]
 8022e90:	811a      	strh	r2, [r3, #8]


  return 0;
 8022e92:	2300      	movs	r3, #0
}
 8022e94:	4618      	mov	r0, r3
 8022e96:	3718      	adds	r7, #24
 8022e98:	46bd      	mov	sp, r7
 8022e9a:	bd80      	pop	{r7, pc}
 8022e9c:	0802c998 	.word	0x0802c998
 8022ea0:	0802cafc 	.word	0x0802cafc
 8022ea4:	0802c9f8 	.word	0x0802c9f8

08022ea8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8022ea8:	b580      	push	{r7, lr}
 8022eaa:	b082      	sub	sp, #8
 8022eac:	af00      	add	r7, sp, #0
 8022eae:	6078      	str	r0, [r7, #4]
 8022eb0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8022eb2:	2200      	movs	r2, #0
 8022eb4:	6839      	ldr	r1, [r7, #0]
 8022eb6:	6878      	ldr	r0, [r7, #4]
 8022eb8:	f7ff ff8e 	bl	8022dd8 <pbuf_add_header_impl>
 8022ebc:	4603      	mov	r3, r0
}
 8022ebe:	4618      	mov	r0, r3
 8022ec0:	3708      	adds	r7, #8
 8022ec2:	46bd      	mov	sp, r7
 8022ec4:	bd80      	pop	{r7, pc}
	...

08022ec8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8022ec8:	b580      	push	{r7, lr}
 8022eca:	b084      	sub	sp, #16
 8022ecc:	af00      	add	r7, sp, #0
 8022ece:	6078      	str	r0, [r7, #4]
 8022ed0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	2b00      	cmp	r3, #0
 8022ed6:	d106      	bne.n	8022ee6 <pbuf_remove_header+0x1e>
 8022ed8:	4b20      	ldr	r3, [pc, #128]	; (8022f5c <pbuf_remove_header+0x94>)
 8022eda:	f240 224b 	movw	r2, #587	; 0x24b
 8022ede:	4920      	ldr	r1, [pc, #128]	; (8022f60 <pbuf_remove_header+0x98>)
 8022ee0:	4820      	ldr	r0, [pc, #128]	; (8022f64 <pbuf_remove_header+0x9c>)
 8022ee2:	f003 fdaf 	bl	8026a44 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d003      	beq.n	8022ef4 <pbuf_remove_header+0x2c>
 8022eec:	683b      	ldr	r3, [r7, #0]
 8022eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022ef2:	d301      	bcc.n	8022ef8 <pbuf_remove_header+0x30>
    return 1;
 8022ef4:	2301      	movs	r3, #1
 8022ef6:	e02c      	b.n	8022f52 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8022ef8:	683b      	ldr	r3, [r7, #0]
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d101      	bne.n	8022f02 <pbuf_remove_header+0x3a>
    return 0;
 8022efe:	2300      	movs	r3, #0
 8022f00:	e027      	b.n	8022f52 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8022f02:	683b      	ldr	r3, [r7, #0]
 8022f04:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	895b      	ldrh	r3, [r3, #10]
 8022f0a:	89fa      	ldrh	r2, [r7, #14]
 8022f0c:	429a      	cmp	r2, r3
 8022f0e:	d908      	bls.n	8022f22 <pbuf_remove_header+0x5a>
 8022f10:	4b12      	ldr	r3, [pc, #72]	; (8022f5c <pbuf_remove_header+0x94>)
 8022f12:	f240 2255 	movw	r2, #597	; 0x255
 8022f16:	4914      	ldr	r1, [pc, #80]	; (8022f68 <pbuf_remove_header+0xa0>)
 8022f18:	4812      	ldr	r0, [pc, #72]	; (8022f64 <pbuf_remove_header+0x9c>)
 8022f1a:	f003 fd93 	bl	8026a44 <iprintf>
 8022f1e:	2301      	movs	r3, #1
 8022f20:	e017      	b.n	8022f52 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	685b      	ldr	r3, [r3, #4]
 8022f26:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	685a      	ldr	r2, [r3, #4]
 8022f2c:	683b      	ldr	r3, [r7, #0]
 8022f2e:	441a      	add	r2, r3
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8022f34:	687b      	ldr	r3, [r7, #4]
 8022f36:	895a      	ldrh	r2, [r3, #10]
 8022f38:	89fb      	ldrh	r3, [r7, #14]
 8022f3a:	1ad3      	subs	r3, r2, r3
 8022f3c:	b29a      	uxth	r2, r3
 8022f3e:	687b      	ldr	r3, [r7, #4]
 8022f40:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8022f42:	687b      	ldr	r3, [r7, #4]
 8022f44:	891a      	ldrh	r2, [r3, #8]
 8022f46:	89fb      	ldrh	r3, [r7, #14]
 8022f48:	1ad3      	subs	r3, r2, r3
 8022f4a:	b29a      	uxth	r2, r3
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8022f50:	2300      	movs	r3, #0
}
 8022f52:	4618      	mov	r0, r3
 8022f54:	3710      	adds	r7, #16
 8022f56:	46bd      	mov	sp, r7
 8022f58:	bd80      	pop	{r7, pc}
 8022f5a:	bf00      	nop
 8022f5c:	0802c998 	.word	0x0802c998
 8022f60:	0802cafc 	.word	0x0802cafc
 8022f64:	0802c9f8 	.word	0x0802c9f8
 8022f68:	0802cb08 	.word	0x0802cb08

08022f6c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8022f6c:	b580      	push	{r7, lr}
 8022f6e:	b082      	sub	sp, #8
 8022f70:	af00      	add	r7, sp, #0
 8022f72:	6078      	str	r0, [r7, #4]
 8022f74:	460b      	mov	r3, r1
 8022f76:	807b      	strh	r3, [r7, #2]
 8022f78:	4613      	mov	r3, r2
 8022f7a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8022f7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8022f80:	2b00      	cmp	r3, #0
 8022f82:	da08      	bge.n	8022f96 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8022f84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8022f88:	425b      	negs	r3, r3
 8022f8a:	4619      	mov	r1, r3
 8022f8c:	6878      	ldr	r0, [r7, #4]
 8022f8e:	f7ff ff9b 	bl	8022ec8 <pbuf_remove_header>
 8022f92:	4603      	mov	r3, r0
 8022f94:	e007      	b.n	8022fa6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8022f96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8022f9a:	787a      	ldrb	r2, [r7, #1]
 8022f9c:	4619      	mov	r1, r3
 8022f9e:	6878      	ldr	r0, [r7, #4]
 8022fa0:	f7ff ff1a 	bl	8022dd8 <pbuf_add_header_impl>
 8022fa4:	4603      	mov	r3, r0
  }
}
 8022fa6:	4618      	mov	r0, r3
 8022fa8:	3708      	adds	r7, #8
 8022faa:	46bd      	mov	sp, r7
 8022fac:	bd80      	pop	{r7, pc}

08022fae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8022fae:	b580      	push	{r7, lr}
 8022fb0:	b082      	sub	sp, #8
 8022fb2:	af00      	add	r7, sp, #0
 8022fb4:	6078      	str	r0, [r7, #4]
 8022fb6:	460b      	mov	r3, r1
 8022fb8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8022fba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8022fbe:	2201      	movs	r2, #1
 8022fc0:	4619      	mov	r1, r3
 8022fc2:	6878      	ldr	r0, [r7, #4]
 8022fc4:	f7ff ffd2 	bl	8022f6c <pbuf_header_impl>
 8022fc8:	4603      	mov	r3, r0
}
 8022fca:	4618      	mov	r0, r3
 8022fcc:	3708      	adds	r7, #8
 8022fce:	46bd      	mov	sp, r7
 8022fd0:	bd80      	pop	{r7, pc}
	...

08022fd4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8022fd4:	b580      	push	{r7, lr}
 8022fd6:	b086      	sub	sp, #24
 8022fd8:	af00      	add	r7, sp, #0
 8022fda:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8022fdc:	687b      	ldr	r3, [r7, #4]
 8022fde:	2b00      	cmp	r3, #0
 8022fe0:	d10b      	bne.n	8022ffa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	2b00      	cmp	r3, #0
 8022fe6:	d106      	bne.n	8022ff6 <pbuf_free+0x22>
 8022fe8:	4b38      	ldr	r3, [pc, #224]	; (80230cc <pbuf_free+0xf8>)
 8022fea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8022fee:	4938      	ldr	r1, [pc, #224]	; (80230d0 <pbuf_free+0xfc>)
 8022ff0:	4838      	ldr	r0, [pc, #224]	; (80230d4 <pbuf_free+0x100>)
 8022ff2:	f003 fd27 	bl	8026a44 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8022ff6:	2300      	movs	r3, #0
 8022ff8:	e063      	b.n	80230c2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8022ffa:	2300      	movs	r3, #0
 8022ffc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8022ffe:	e05c      	b.n	80230ba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8023000:	687b      	ldr	r3, [r7, #4]
 8023002:	7b9b      	ldrb	r3, [r3, #14]
 8023004:	2b00      	cmp	r3, #0
 8023006:	d106      	bne.n	8023016 <pbuf_free+0x42>
 8023008:	4b30      	ldr	r3, [pc, #192]	; (80230cc <pbuf_free+0xf8>)
 802300a:	f240 22f1 	movw	r2, #753	; 0x2f1
 802300e:	4932      	ldr	r1, [pc, #200]	; (80230d8 <pbuf_free+0x104>)
 8023010:	4830      	ldr	r0, [pc, #192]	; (80230d4 <pbuf_free+0x100>)
 8023012:	f003 fd17 	bl	8026a44 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8023016:	687b      	ldr	r3, [r7, #4]
 8023018:	7b9b      	ldrb	r3, [r3, #14]
 802301a:	3b01      	subs	r3, #1
 802301c:	b2da      	uxtb	r2, r3
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	739a      	strb	r2, [r3, #14]
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	7b9b      	ldrb	r3, [r3, #14]
 8023026:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8023028:	7dbb      	ldrb	r3, [r7, #22]
 802302a:	2b00      	cmp	r3, #0
 802302c:	d143      	bne.n	80230b6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	681b      	ldr	r3, [r3, #0]
 8023032:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8023034:	687b      	ldr	r3, [r7, #4]
 8023036:	7b1b      	ldrb	r3, [r3, #12]
 8023038:	f003 030f 	and.w	r3, r3, #15
 802303c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 802303e:	687b      	ldr	r3, [r7, #4]
 8023040:	7b5b      	ldrb	r3, [r3, #13]
 8023042:	f003 0302 	and.w	r3, r3, #2
 8023046:	2b00      	cmp	r3, #0
 8023048:	d011      	beq.n	802306e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 802304e:	68bb      	ldr	r3, [r7, #8]
 8023050:	691b      	ldr	r3, [r3, #16]
 8023052:	2b00      	cmp	r3, #0
 8023054:	d106      	bne.n	8023064 <pbuf_free+0x90>
 8023056:	4b1d      	ldr	r3, [pc, #116]	; (80230cc <pbuf_free+0xf8>)
 8023058:	f240 22ff 	movw	r2, #767	; 0x2ff
 802305c:	491f      	ldr	r1, [pc, #124]	; (80230dc <pbuf_free+0x108>)
 802305e:	481d      	ldr	r0, [pc, #116]	; (80230d4 <pbuf_free+0x100>)
 8023060:	f003 fcf0 	bl	8026a44 <iprintf>
        pc->custom_free_function(p);
 8023064:	68bb      	ldr	r3, [r7, #8]
 8023066:	691b      	ldr	r3, [r3, #16]
 8023068:	6878      	ldr	r0, [r7, #4]
 802306a:	4798      	blx	r3
 802306c:	e01d      	b.n	80230aa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 802306e:	7bfb      	ldrb	r3, [r7, #15]
 8023070:	2b02      	cmp	r3, #2
 8023072:	d104      	bne.n	802307e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8023074:	6879      	ldr	r1, [r7, #4]
 8023076:	2005      	movs	r0, #5
 8023078:	f7ff f89c 	bl	80221b4 <memp_free>
 802307c:	e015      	b.n	80230aa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 802307e:	7bfb      	ldrb	r3, [r7, #15]
 8023080:	2b01      	cmp	r3, #1
 8023082:	d104      	bne.n	802308e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8023084:	6879      	ldr	r1, [r7, #4]
 8023086:	2004      	movs	r0, #4
 8023088:	f7ff f894 	bl	80221b4 <memp_free>
 802308c:	e00d      	b.n	80230aa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 802308e:	7bfb      	ldrb	r3, [r7, #15]
 8023090:	2b00      	cmp	r3, #0
 8023092:	d103      	bne.n	802309c <pbuf_free+0xc8>
          mem_free(p);
 8023094:	6878      	ldr	r0, [r7, #4]
 8023096:	f7fe fd27 	bl	8021ae8 <mem_free>
 802309a:	e006      	b.n	80230aa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 802309c:	4b0b      	ldr	r3, [pc, #44]	; (80230cc <pbuf_free+0xf8>)
 802309e:	f240 320f 	movw	r2, #783	; 0x30f
 80230a2:	490f      	ldr	r1, [pc, #60]	; (80230e0 <pbuf_free+0x10c>)
 80230a4:	480b      	ldr	r0, [pc, #44]	; (80230d4 <pbuf_free+0x100>)
 80230a6:	f003 fccd 	bl	8026a44 <iprintf>
        }
      }
      count++;
 80230aa:	7dfb      	ldrb	r3, [r7, #23]
 80230ac:	3301      	adds	r3, #1
 80230ae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80230b0:	693b      	ldr	r3, [r7, #16]
 80230b2:	607b      	str	r3, [r7, #4]
 80230b4:	e001      	b.n	80230ba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80230b6:	2300      	movs	r3, #0
 80230b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80230ba:	687b      	ldr	r3, [r7, #4]
 80230bc:	2b00      	cmp	r3, #0
 80230be:	d19f      	bne.n	8023000 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80230c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80230c2:	4618      	mov	r0, r3
 80230c4:	3718      	adds	r7, #24
 80230c6:	46bd      	mov	sp, r7
 80230c8:	bd80      	pop	{r7, pc}
 80230ca:	bf00      	nop
 80230cc:	0802c998 	.word	0x0802c998
 80230d0:	0802cafc 	.word	0x0802cafc
 80230d4:	0802c9f8 	.word	0x0802c9f8
 80230d8:	0802cb28 	.word	0x0802cb28
 80230dc:	0802cb40 	.word	0x0802cb40
 80230e0:	0802cb64 	.word	0x0802cb64

080230e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80230e4:	b480      	push	{r7}
 80230e6:	b085      	sub	sp, #20
 80230e8:	af00      	add	r7, sp, #0
 80230ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80230ec:	2300      	movs	r3, #0
 80230ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80230f0:	e005      	b.n	80230fe <pbuf_clen+0x1a>
    ++len;
 80230f2:	89fb      	ldrh	r3, [r7, #14]
 80230f4:	3301      	adds	r3, #1
 80230f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80230f8:	687b      	ldr	r3, [r7, #4]
 80230fa:	681b      	ldr	r3, [r3, #0]
 80230fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	2b00      	cmp	r3, #0
 8023102:	d1f6      	bne.n	80230f2 <pbuf_clen+0xe>
  }
  return len;
 8023104:	89fb      	ldrh	r3, [r7, #14]
}
 8023106:	4618      	mov	r0, r3
 8023108:	3714      	adds	r7, #20
 802310a:	46bd      	mov	sp, r7
 802310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023110:	4770      	bx	lr
	...

08023114 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8023114:	b580      	push	{r7, lr}
 8023116:	b082      	sub	sp, #8
 8023118:	af00      	add	r7, sp, #0
 802311a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 802311c:	687b      	ldr	r3, [r7, #4]
 802311e:	2b00      	cmp	r3, #0
 8023120:	d010      	beq.n	8023144 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8023122:	687b      	ldr	r3, [r7, #4]
 8023124:	7b9b      	ldrb	r3, [r3, #14]
 8023126:	3301      	adds	r3, #1
 8023128:	b2da      	uxtb	r2, r3
 802312a:	687b      	ldr	r3, [r7, #4]
 802312c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 802312e:	687b      	ldr	r3, [r7, #4]
 8023130:	7b9b      	ldrb	r3, [r3, #14]
 8023132:	2b00      	cmp	r3, #0
 8023134:	d106      	bne.n	8023144 <pbuf_ref+0x30>
 8023136:	4b05      	ldr	r3, [pc, #20]	; (802314c <pbuf_ref+0x38>)
 8023138:	f240 3242 	movw	r2, #834	; 0x342
 802313c:	4904      	ldr	r1, [pc, #16]	; (8023150 <pbuf_ref+0x3c>)
 802313e:	4805      	ldr	r0, [pc, #20]	; (8023154 <pbuf_ref+0x40>)
 8023140:	f003 fc80 	bl	8026a44 <iprintf>
  }
}
 8023144:	bf00      	nop
 8023146:	3708      	adds	r7, #8
 8023148:	46bd      	mov	sp, r7
 802314a:	bd80      	pop	{r7, pc}
 802314c:	0802c998 	.word	0x0802c998
 8023150:	0802cb78 	.word	0x0802cb78
 8023154:	0802c9f8 	.word	0x0802c9f8

08023158 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8023158:	b580      	push	{r7, lr}
 802315a:	b084      	sub	sp, #16
 802315c:	af00      	add	r7, sp, #0
 802315e:	6078      	str	r0, [r7, #4]
 8023160:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8023162:	687b      	ldr	r3, [r7, #4]
 8023164:	2b00      	cmp	r3, #0
 8023166:	d002      	beq.n	802316e <pbuf_cat+0x16>
 8023168:	683b      	ldr	r3, [r7, #0]
 802316a:	2b00      	cmp	r3, #0
 802316c:	d107      	bne.n	802317e <pbuf_cat+0x26>
 802316e:	4b20      	ldr	r3, [pc, #128]	; (80231f0 <pbuf_cat+0x98>)
 8023170:	f240 3259 	movw	r2, #857	; 0x359
 8023174:	491f      	ldr	r1, [pc, #124]	; (80231f4 <pbuf_cat+0x9c>)
 8023176:	4820      	ldr	r0, [pc, #128]	; (80231f8 <pbuf_cat+0xa0>)
 8023178:	f003 fc64 	bl	8026a44 <iprintf>
 802317c:	e034      	b.n	80231e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 802317e:	687b      	ldr	r3, [r7, #4]
 8023180:	60fb      	str	r3, [r7, #12]
 8023182:	e00a      	b.n	802319a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8023184:	68fb      	ldr	r3, [r7, #12]
 8023186:	891a      	ldrh	r2, [r3, #8]
 8023188:	683b      	ldr	r3, [r7, #0]
 802318a:	891b      	ldrh	r3, [r3, #8]
 802318c:	4413      	add	r3, r2
 802318e:	b29a      	uxth	r2, r3
 8023190:	68fb      	ldr	r3, [r7, #12]
 8023192:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8023194:	68fb      	ldr	r3, [r7, #12]
 8023196:	681b      	ldr	r3, [r3, #0]
 8023198:	60fb      	str	r3, [r7, #12]
 802319a:	68fb      	ldr	r3, [r7, #12]
 802319c:	681b      	ldr	r3, [r3, #0]
 802319e:	2b00      	cmp	r3, #0
 80231a0:	d1f0      	bne.n	8023184 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80231a2:	68fb      	ldr	r3, [r7, #12]
 80231a4:	891a      	ldrh	r2, [r3, #8]
 80231a6:	68fb      	ldr	r3, [r7, #12]
 80231a8:	895b      	ldrh	r3, [r3, #10]
 80231aa:	429a      	cmp	r2, r3
 80231ac:	d006      	beq.n	80231bc <pbuf_cat+0x64>
 80231ae:	4b10      	ldr	r3, [pc, #64]	; (80231f0 <pbuf_cat+0x98>)
 80231b0:	f240 3262 	movw	r2, #866	; 0x362
 80231b4:	4911      	ldr	r1, [pc, #68]	; (80231fc <pbuf_cat+0xa4>)
 80231b6:	4810      	ldr	r0, [pc, #64]	; (80231f8 <pbuf_cat+0xa0>)
 80231b8:	f003 fc44 	bl	8026a44 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80231bc:	68fb      	ldr	r3, [r7, #12]
 80231be:	681b      	ldr	r3, [r3, #0]
 80231c0:	2b00      	cmp	r3, #0
 80231c2:	d006      	beq.n	80231d2 <pbuf_cat+0x7a>
 80231c4:	4b0a      	ldr	r3, [pc, #40]	; (80231f0 <pbuf_cat+0x98>)
 80231c6:	f240 3263 	movw	r2, #867	; 0x363
 80231ca:	490d      	ldr	r1, [pc, #52]	; (8023200 <pbuf_cat+0xa8>)
 80231cc:	480a      	ldr	r0, [pc, #40]	; (80231f8 <pbuf_cat+0xa0>)
 80231ce:	f003 fc39 	bl	8026a44 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80231d2:	68fb      	ldr	r3, [r7, #12]
 80231d4:	891a      	ldrh	r2, [r3, #8]
 80231d6:	683b      	ldr	r3, [r7, #0]
 80231d8:	891b      	ldrh	r3, [r3, #8]
 80231da:	4413      	add	r3, r2
 80231dc:	b29a      	uxth	r2, r3
 80231de:	68fb      	ldr	r3, [r7, #12]
 80231e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80231e2:	68fb      	ldr	r3, [r7, #12]
 80231e4:	683a      	ldr	r2, [r7, #0]
 80231e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80231e8:	3710      	adds	r7, #16
 80231ea:	46bd      	mov	sp, r7
 80231ec:	bd80      	pop	{r7, pc}
 80231ee:	bf00      	nop
 80231f0:	0802c998 	.word	0x0802c998
 80231f4:	0802cb8c 	.word	0x0802cb8c
 80231f8:	0802c9f8 	.word	0x0802c9f8
 80231fc:	0802cbc4 	.word	0x0802cbc4
 8023200:	0802cbf4 	.word	0x0802cbf4

08023204 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8023204:	b580      	push	{r7, lr}
 8023206:	b082      	sub	sp, #8
 8023208:	af00      	add	r7, sp, #0
 802320a:	6078      	str	r0, [r7, #4]
 802320c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 802320e:	6839      	ldr	r1, [r7, #0]
 8023210:	6878      	ldr	r0, [r7, #4]
 8023212:	f7ff ffa1 	bl	8023158 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8023216:	6838      	ldr	r0, [r7, #0]
 8023218:	f7ff ff7c 	bl	8023114 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 802321c:	bf00      	nop
 802321e:	3708      	adds	r7, #8
 8023220:	46bd      	mov	sp, r7
 8023222:	bd80      	pop	{r7, pc}

08023224 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8023224:	b580      	push	{r7, lr}
 8023226:	b086      	sub	sp, #24
 8023228:	af00      	add	r7, sp, #0
 802322a:	6078      	str	r0, [r7, #4]
 802322c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 802322e:	2300      	movs	r3, #0
 8023230:	617b      	str	r3, [r7, #20]
 8023232:	2300      	movs	r3, #0
 8023234:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8023236:	687b      	ldr	r3, [r7, #4]
 8023238:	2b00      	cmp	r3, #0
 802323a:	d008      	beq.n	802324e <pbuf_copy+0x2a>
 802323c:	683b      	ldr	r3, [r7, #0]
 802323e:	2b00      	cmp	r3, #0
 8023240:	d005      	beq.n	802324e <pbuf_copy+0x2a>
 8023242:	687b      	ldr	r3, [r7, #4]
 8023244:	891a      	ldrh	r2, [r3, #8]
 8023246:	683b      	ldr	r3, [r7, #0]
 8023248:	891b      	ldrh	r3, [r3, #8]
 802324a:	429a      	cmp	r2, r3
 802324c:	d209      	bcs.n	8023262 <pbuf_copy+0x3e>
 802324e:	4b57      	ldr	r3, [pc, #348]	; (80233ac <pbuf_copy+0x188>)
 8023250:	f240 32c9 	movw	r2, #969	; 0x3c9
 8023254:	4956      	ldr	r1, [pc, #344]	; (80233b0 <pbuf_copy+0x18c>)
 8023256:	4857      	ldr	r0, [pc, #348]	; (80233b4 <pbuf_copy+0x190>)
 8023258:	f003 fbf4 	bl	8026a44 <iprintf>
 802325c:	f06f 030f 	mvn.w	r3, #15
 8023260:	e09f      	b.n	80233a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8023262:	687b      	ldr	r3, [r7, #4]
 8023264:	895b      	ldrh	r3, [r3, #10]
 8023266:	461a      	mov	r2, r3
 8023268:	697b      	ldr	r3, [r7, #20]
 802326a:	1ad2      	subs	r2, r2, r3
 802326c:	683b      	ldr	r3, [r7, #0]
 802326e:	895b      	ldrh	r3, [r3, #10]
 8023270:	4619      	mov	r1, r3
 8023272:	693b      	ldr	r3, [r7, #16]
 8023274:	1acb      	subs	r3, r1, r3
 8023276:	429a      	cmp	r2, r3
 8023278:	d306      	bcc.n	8023288 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 802327a:	683b      	ldr	r3, [r7, #0]
 802327c:	895b      	ldrh	r3, [r3, #10]
 802327e:	461a      	mov	r2, r3
 8023280:	693b      	ldr	r3, [r7, #16]
 8023282:	1ad3      	subs	r3, r2, r3
 8023284:	60fb      	str	r3, [r7, #12]
 8023286:	e005      	b.n	8023294 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	895b      	ldrh	r3, [r3, #10]
 802328c:	461a      	mov	r2, r3
 802328e:	697b      	ldr	r3, [r7, #20]
 8023290:	1ad3      	subs	r3, r2, r3
 8023292:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8023294:	687b      	ldr	r3, [r7, #4]
 8023296:	685a      	ldr	r2, [r3, #4]
 8023298:	697b      	ldr	r3, [r7, #20]
 802329a:	18d0      	adds	r0, r2, r3
 802329c:	683b      	ldr	r3, [r7, #0]
 802329e:	685a      	ldr	r2, [r3, #4]
 80232a0:	693b      	ldr	r3, [r7, #16]
 80232a2:	4413      	add	r3, r2
 80232a4:	68fa      	ldr	r2, [r7, #12]
 80232a6:	4619      	mov	r1, r3
 80232a8:	f003 fabc 	bl	8026824 <memcpy>
    offset_to += len;
 80232ac:	697a      	ldr	r2, [r7, #20]
 80232ae:	68fb      	ldr	r3, [r7, #12]
 80232b0:	4413      	add	r3, r2
 80232b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80232b4:	693a      	ldr	r2, [r7, #16]
 80232b6:	68fb      	ldr	r3, [r7, #12]
 80232b8:	4413      	add	r3, r2
 80232ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80232bc:	687b      	ldr	r3, [r7, #4]
 80232be:	895b      	ldrh	r3, [r3, #10]
 80232c0:	461a      	mov	r2, r3
 80232c2:	697b      	ldr	r3, [r7, #20]
 80232c4:	4293      	cmp	r3, r2
 80232c6:	d906      	bls.n	80232d6 <pbuf_copy+0xb2>
 80232c8:	4b38      	ldr	r3, [pc, #224]	; (80233ac <pbuf_copy+0x188>)
 80232ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 80232ce:	493a      	ldr	r1, [pc, #232]	; (80233b8 <pbuf_copy+0x194>)
 80232d0:	4838      	ldr	r0, [pc, #224]	; (80233b4 <pbuf_copy+0x190>)
 80232d2:	f003 fbb7 	bl	8026a44 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80232d6:	683b      	ldr	r3, [r7, #0]
 80232d8:	895b      	ldrh	r3, [r3, #10]
 80232da:	461a      	mov	r2, r3
 80232dc:	693b      	ldr	r3, [r7, #16]
 80232de:	4293      	cmp	r3, r2
 80232e0:	d906      	bls.n	80232f0 <pbuf_copy+0xcc>
 80232e2:	4b32      	ldr	r3, [pc, #200]	; (80233ac <pbuf_copy+0x188>)
 80232e4:	f240 32da 	movw	r2, #986	; 0x3da
 80232e8:	4934      	ldr	r1, [pc, #208]	; (80233bc <pbuf_copy+0x198>)
 80232ea:	4832      	ldr	r0, [pc, #200]	; (80233b4 <pbuf_copy+0x190>)
 80232ec:	f003 fbaa 	bl	8026a44 <iprintf>
    if (offset_from >= p_from->len) {
 80232f0:	683b      	ldr	r3, [r7, #0]
 80232f2:	895b      	ldrh	r3, [r3, #10]
 80232f4:	461a      	mov	r2, r3
 80232f6:	693b      	ldr	r3, [r7, #16]
 80232f8:	4293      	cmp	r3, r2
 80232fa:	d304      	bcc.n	8023306 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80232fc:	2300      	movs	r3, #0
 80232fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8023300:	683b      	ldr	r3, [r7, #0]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8023306:	687b      	ldr	r3, [r7, #4]
 8023308:	895b      	ldrh	r3, [r3, #10]
 802330a:	461a      	mov	r2, r3
 802330c:	697b      	ldr	r3, [r7, #20]
 802330e:	4293      	cmp	r3, r2
 8023310:	d114      	bne.n	802333c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8023312:	2300      	movs	r3, #0
 8023314:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8023316:	687b      	ldr	r3, [r7, #4]
 8023318:	681b      	ldr	r3, [r3, #0]
 802331a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	2b00      	cmp	r3, #0
 8023320:	d10c      	bne.n	802333c <pbuf_copy+0x118>
 8023322:	683b      	ldr	r3, [r7, #0]
 8023324:	2b00      	cmp	r3, #0
 8023326:	d009      	beq.n	802333c <pbuf_copy+0x118>
 8023328:	4b20      	ldr	r3, [pc, #128]	; (80233ac <pbuf_copy+0x188>)
 802332a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 802332e:	4924      	ldr	r1, [pc, #144]	; (80233c0 <pbuf_copy+0x19c>)
 8023330:	4820      	ldr	r0, [pc, #128]	; (80233b4 <pbuf_copy+0x190>)
 8023332:	f003 fb87 	bl	8026a44 <iprintf>
 8023336:	f06f 030f 	mvn.w	r3, #15
 802333a:	e032      	b.n	80233a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 802333c:	683b      	ldr	r3, [r7, #0]
 802333e:	2b00      	cmp	r3, #0
 8023340:	d013      	beq.n	802336a <pbuf_copy+0x146>
 8023342:	683b      	ldr	r3, [r7, #0]
 8023344:	895a      	ldrh	r2, [r3, #10]
 8023346:	683b      	ldr	r3, [r7, #0]
 8023348:	891b      	ldrh	r3, [r3, #8]
 802334a:	429a      	cmp	r2, r3
 802334c:	d10d      	bne.n	802336a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 802334e:	683b      	ldr	r3, [r7, #0]
 8023350:	681b      	ldr	r3, [r3, #0]
 8023352:	2b00      	cmp	r3, #0
 8023354:	d009      	beq.n	802336a <pbuf_copy+0x146>
 8023356:	4b15      	ldr	r3, [pc, #84]	; (80233ac <pbuf_copy+0x188>)
 8023358:	f240 32e9 	movw	r2, #1001	; 0x3e9
 802335c:	4919      	ldr	r1, [pc, #100]	; (80233c4 <pbuf_copy+0x1a0>)
 802335e:	4815      	ldr	r0, [pc, #84]	; (80233b4 <pbuf_copy+0x190>)
 8023360:	f003 fb70 	bl	8026a44 <iprintf>
 8023364:	f06f 0305 	mvn.w	r3, #5
 8023368:	e01b      	b.n	80233a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	2b00      	cmp	r3, #0
 802336e:	d013      	beq.n	8023398 <pbuf_copy+0x174>
 8023370:	687b      	ldr	r3, [r7, #4]
 8023372:	895a      	ldrh	r2, [r3, #10]
 8023374:	687b      	ldr	r3, [r7, #4]
 8023376:	891b      	ldrh	r3, [r3, #8]
 8023378:	429a      	cmp	r2, r3
 802337a:	d10d      	bne.n	8023398 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 802337c:	687b      	ldr	r3, [r7, #4]
 802337e:	681b      	ldr	r3, [r3, #0]
 8023380:	2b00      	cmp	r3, #0
 8023382:	d009      	beq.n	8023398 <pbuf_copy+0x174>
 8023384:	4b09      	ldr	r3, [pc, #36]	; (80233ac <pbuf_copy+0x188>)
 8023386:	f240 32ee 	movw	r2, #1006	; 0x3ee
 802338a:	490e      	ldr	r1, [pc, #56]	; (80233c4 <pbuf_copy+0x1a0>)
 802338c:	4809      	ldr	r0, [pc, #36]	; (80233b4 <pbuf_copy+0x190>)
 802338e:	f003 fb59 	bl	8026a44 <iprintf>
 8023392:	f06f 0305 	mvn.w	r3, #5
 8023396:	e004      	b.n	80233a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8023398:	683b      	ldr	r3, [r7, #0]
 802339a:	2b00      	cmp	r3, #0
 802339c:	f47f af61 	bne.w	8023262 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80233a0:	2300      	movs	r3, #0
}
 80233a2:	4618      	mov	r0, r3
 80233a4:	3718      	adds	r7, #24
 80233a6:	46bd      	mov	sp, r7
 80233a8:	bd80      	pop	{r7, pc}
 80233aa:	bf00      	nop
 80233ac:	0802c998 	.word	0x0802c998
 80233b0:	0802cc40 	.word	0x0802cc40
 80233b4:	0802c9f8 	.word	0x0802c9f8
 80233b8:	0802cc70 	.word	0x0802cc70
 80233bc:	0802cc88 	.word	0x0802cc88
 80233c0:	0802cca4 	.word	0x0802cca4
 80233c4:	0802ccb4 	.word	0x0802ccb4

080233c8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80233c8:	b580      	push	{r7, lr}
 80233ca:	b088      	sub	sp, #32
 80233cc:	af00      	add	r7, sp, #0
 80233ce:	60f8      	str	r0, [r7, #12]
 80233d0:	60b9      	str	r1, [r7, #8]
 80233d2:	4613      	mov	r3, r2
 80233d4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80233d6:	88fb      	ldrh	r3, [r7, #6]
 80233d8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80233da:	2300      	movs	r3, #0
 80233dc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80233de:	68fb      	ldr	r3, [r7, #12]
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d109      	bne.n	80233f8 <pbuf_take+0x30>
 80233e4:	4b3a      	ldr	r3, [pc, #232]	; (80234d0 <pbuf_take+0x108>)
 80233e6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80233ea:	493a      	ldr	r1, [pc, #232]	; (80234d4 <pbuf_take+0x10c>)
 80233ec:	483a      	ldr	r0, [pc, #232]	; (80234d8 <pbuf_take+0x110>)
 80233ee:	f003 fb29 	bl	8026a44 <iprintf>
 80233f2:	f06f 030f 	mvn.w	r3, #15
 80233f6:	e067      	b.n	80234c8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80233f8:	68bb      	ldr	r3, [r7, #8]
 80233fa:	2b00      	cmp	r3, #0
 80233fc:	d109      	bne.n	8023412 <pbuf_take+0x4a>
 80233fe:	4b34      	ldr	r3, [pc, #208]	; (80234d0 <pbuf_take+0x108>)
 8023400:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8023404:	4935      	ldr	r1, [pc, #212]	; (80234dc <pbuf_take+0x114>)
 8023406:	4834      	ldr	r0, [pc, #208]	; (80234d8 <pbuf_take+0x110>)
 8023408:	f003 fb1c 	bl	8026a44 <iprintf>
 802340c:	f06f 030f 	mvn.w	r3, #15
 8023410:	e05a      	b.n	80234c8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8023412:	68fb      	ldr	r3, [r7, #12]
 8023414:	891b      	ldrh	r3, [r3, #8]
 8023416:	88fa      	ldrh	r2, [r7, #6]
 8023418:	429a      	cmp	r2, r3
 802341a:	d909      	bls.n	8023430 <pbuf_take+0x68>
 802341c:	4b2c      	ldr	r3, [pc, #176]	; (80234d0 <pbuf_take+0x108>)
 802341e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8023422:	492f      	ldr	r1, [pc, #188]	; (80234e0 <pbuf_take+0x118>)
 8023424:	482c      	ldr	r0, [pc, #176]	; (80234d8 <pbuf_take+0x110>)
 8023426:	f003 fb0d 	bl	8026a44 <iprintf>
 802342a:	f04f 33ff 	mov.w	r3, #4294967295
 802342e:	e04b      	b.n	80234c8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8023430:	68fb      	ldr	r3, [r7, #12]
 8023432:	2b00      	cmp	r3, #0
 8023434:	d007      	beq.n	8023446 <pbuf_take+0x7e>
 8023436:	68bb      	ldr	r3, [r7, #8]
 8023438:	2b00      	cmp	r3, #0
 802343a:	d004      	beq.n	8023446 <pbuf_take+0x7e>
 802343c:	68fb      	ldr	r3, [r7, #12]
 802343e:	891b      	ldrh	r3, [r3, #8]
 8023440:	88fa      	ldrh	r2, [r7, #6]
 8023442:	429a      	cmp	r2, r3
 8023444:	d902      	bls.n	802344c <pbuf_take+0x84>
    return ERR_ARG;
 8023446:	f06f 030f 	mvn.w	r3, #15
 802344a:	e03d      	b.n	80234c8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 802344c:	68fb      	ldr	r3, [r7, #12]
 802344e:	61fb      	str	r3, [r7, #28]
 8023450:	e028      	b.n	80234a4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8023452:	69fb      	ldr	r3, [r7, #28]
 8023454:	2b00      	cmp	r3, #0
 8023456:	d106      	bne.n	8023466 <pbuf_take+0x9e>
 8023458:	4b1d      	ldr	r3, [pc, #116]	; (80234d0 <pbuf_take+0x108>)
 802345a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 802345e:	4921      	ldr	r1, [pc, #132]	; (80234e4 <pbuf_take+0x11c>)
 8023460:	481d      	ldr	r0, [pc, #116]	; (80234d8 <pbuf_take+0x110>)
 8023462:	f003 faef 	bl	8026a44 <iprintf>
    buf_copy_len = total_copy_len;
 8023466:	697b      	ldr	r3, [r7, #20]
 8023468:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 802346a:	69fb      	ldr	r3, [r7, #28]
 802346c:	895b      	ldrh	r3, [r3, #10]
 802346e:	461a      	mov	r2, r3
 8023470:	69bb      	ldr	r3, [r7, #24]
 8023472:	4293      	cmp	r3, r2
 8023474:	d902      	bls.n	802347c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8023476:	69fb      	ldr	r3, [r7, #28]
 8023478:	895b      	ldrh	r3, [r3, #10]
 802347a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 802347c:	69fb      	ldr	r3, [r7, #28]
 802347e:	6858      	ldr	r0, [r3, #4]
 8023480:	68ba      	ldr	r2, [r7, #8]
 8023482:	693b      	ldr	r3, [r7, #16]
 8023484:	4413      	add	r3, r2
 8023486:	69ba      	ldr	r2, [r7, #24]
 8023488:	4619      	mov	r1, r3
 802348a:	f003 f9cb 	bl	8026824 <memcpy>
    total_copy_len -= buf_copy_len;
 802348e:	697a      	ldr	r2, [r7, #20]
 8023490:	69bb      	ldr	r3, [r7, #24]
 8023492:	1ad3      	subs	r3, r2, r3
 8023494:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8023496:	693a      	ldr	r2, [r7, #16]
 8023498:	69bb      	ldr	r3, [r7, #24]
 802349a:	4413      	add	r3, r2
 802349c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 802349e:	69fb      	ldr	r3, [r7, #28]
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	61fb      	str	r3, [r7, #28]
 80234a4:	697b      	ldr	r3, [r7, #20]
 80234a6:	2b00      	cmp	r3, #0
 80234a8:	d1d3      	bne.n	8023452 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80234aa:	697b      	ldr	r3, [r7, #20]
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	d103      	bne.n	80234b8 <pbuf_take+0xf0>
 80234b0:	88fb      	ldrh	r3, [r7, #6]
 80234b2:	693a      	ldr	r2, [r7, #16]
 80234b4:	429a      	cmp	r2, r3
 80234b6:	d006      	beq.n	80234c6 <pbuf_take+0xfe>
 80234b8:	4b05      	ldr	r3, [pc, #20]	; (80234d0 <pbuf_take+0x108>)
 80234ba:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80234be:	490a      	ldr	r1, [pc, #40]	; (80234e8 <pbuf_take+0x120>)
 80234c0:	4805      	ldr	r0, [pc, #20]	; (80234d8 <pbuf_take+0x110>)
 80234c2:	f003 fabf 	bl	8026a44 <iprintf>
  return ERR_OK;
 80234c6:	2300      	movs	r3, #0
}
 80234c8:	4618      	mov	r0, r3
 80234ca:	3720      	adds	r7, #32
 80234cc:	46bd      	mov	sp, r7
 80234ce:	bd80      	pop	{r7, pc}
 80234d0:	0802c998 	.word	0x0802c998
 80234d4:	0802cd70 	.word	0x0802cd70
 80234d8:	0802c9f8 	.word	0x0802c9f8
 80234dc:	0802cd88 	.word	0x0802cd88
 80234e0:	0802cda4 	.word	0x0802cda4
 80234e4:	0802cdc4 	.word	0x0802cdc4
 80234e8:	0802cddc 	.word	0x0802cddc

080234ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80234ec:	b580      	push	{r7, lr}
 80234ee:	b084      	sub	sp, #16
 80234f0:	af00      	add	r7, sp, #0
 80234f2:	4603      	mov	r3, r0
 80234f4:	603a      	str	r2, [r7, #0]
 80234f6:	71fb      	strb	r3, [r7, #7]
 80234f8:	460b      	mov	r3, r1
 80234fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80234fc:	683b      	ldr	r3, [r7, #0]
 80234fe:	8919      	ldrh	r1, [r3, #8]
 8023500:	88ba      	ldrh	r2, [r7, #4]
 8023502:	79fb      	ldrb	r3, [r7, #7]
 8023504:	4618      	mov	r0, r3
 8023506:	f7ff fa83 	bl	8022a10 <pbuf_alloc>
 802350a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 802350c:	68fb      	ldr	r3, [r7, #12]
 802350e:	2b00      	cmp	r3, #0
 8023510:	d101      	bne.n	8023516 <pbuf_clone+0x2a>
    return NULL;
 8023512:	2300      	movs	r3, #0
 8023514:	e011      	b.n	802353a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8023516:	6839      	ldr	r1, [r7, #0]
 8023518:	68f8      	ldr	r0, [r7, #12]
 802351a:	f7ff fe83 	bl	8023224 <pbuf_copy>
 802351e:	4603      	mov	r3, r0
 8023520:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8023522:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8023526:	2b00      	cmp	r3, #0
 8023528:	d006      	beq.n	8023538 <pbuf_clone+0x4c>
 802352a:	4b06      	ldr	r3, [pc, #24]	; (8023544 <pbuf_clone+0x58>)
 802352c:	f240 5224 	movw	r2, #1316	; 0x524
 8023530:	4905      	ldr	r1, [pc, #20]	; (8023548 <pbuf_clone+0x5c>)
 8023532:	4806      	ldr	r0, [pc, #24]	; (802354c <pbuf_clone+0x60>)
 8023534:	f003 fa86 	bl	8026a44 <iprintf>
  return q;
 8023538:	68fb      	ldr	r3, [r7, #12]
}
 802353a:	4618      	mov	r0, r3
 802353c:	3710      	adds	r7, #16
 802353e:	46bd      	mov	sp, r7
 8023540:	bd80      	pop	{r7, pc}
 8023542:	bf00      	nop
 8023544:	0802c998 	.word	0x0802c998
 8023548:	0802ce0c 	.word	0x0802ce0c
 802354c:	0802c9f8 	.word	0x0802c9f8

08023550 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8023550:	b580      	push	{r7, lr}
 8023552:	b086      	sub	sp, #24
 8023554:	af00      	add	r7, sp, #0
 8023556:	60f8      	str	r0, [r7, #12]
 8023558:	60b9      	str	r1, [r7, #8]
 802355a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 802355c:	2003      	movs	r0, #3
 802355e:	f7fe fdb9 	bl	80220d4 <memp_malloc>
 8023562:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8023564:	693b      	ldr	r3, [r7, #16]
 8023566:	2b00      	cmp	r3, #0
 8023568:	d109      	bne.n	802357e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 802356a:	693b      	ldr	r3, [r7, #16]
 802356c:	2b00      	cmp	r3, #0
 802356e:	d151      	bne.n	8023614 <sys_timeout_abs+0xc4>
 8023570:	4b2a      	ldr	r3, [pc, #168]	; (802361c <sys_timeout_abs+0xcc>)
 8023572:	22be      	movs	r2, #190	; 0xbe
 8023574:	492a      	ldr	r1, [pc, #168]	; (8023620 <sys_timeout_abs+0xd0>)
 8023576:	482b      	ldr	r0, [pc, #172]	; (8023624 <sys_timeout_abs+0xd4>)
 8023578:	f003 fa64 	bl	8026a44 <iprintf>
    return;
 802357c:	e04a      	b.n	8023614 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 802357e:	693b      	ldr	r3, [r7, #16]
 8023580:	2200      	movs	r2, #0
 8023582:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8023584:	693b      	ldr	r3, [r7, #16]
 8023586:	68ba      	ldr	r2, [r7, #8]
 8023588:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 802358a:	693b      	ldr	r3, [r7, #16]
 802358c:	687a      	ldr	r2, [r7, #4]
 802358e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8023590:	693b      	ldr	r3, [r7, #16]
 8023592:	68fa      	ldr	r2, [r7, #12]
 8023594:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8023596:	4b24      	ldr	r3, [pc, #144]	; (8023628 <sys_timeout_abs+0xd8>)
 8023598:	681b      	ldr	r3, [r3, #0]
 802359a:	2b00      	cmp	r3, #0
 802359c:	d103      	bne.n	80235a6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 802359e:	4a22      	ldr	r2, [pc, #136]	; (8023628 <sys_timeout_abs+0xd8>)
 80235a0:	693b      	ldr	r3, [r7, #16]
 80235a2:	6013      	str	r3, [r2, #0]
    return;
 80235a4:	e037      	b.n	8023616 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80235a6:	693b      	ldr	r3, [r7, #16]
 80235a8:	685a      	ldr	r2, [r3, #4]
 80235aa:	4b1f      	ldr	r3, [pc, #124]	; (8023628 <sys_timeout_abs+0xd8>)
 80235ac:	681b      	ldr	r3, [r3, #0]
 80235ae:	685b      	ldr	r3, [r3, #4]
 80235b0:	1ad3      	subs	r3, r2, r3
 80235b2:	0fdb      	lsrs	r3, r3, #31
 80235b4:	f003 0301 	and.w	r3, r3, #1
 80235b8:	b2db      	uxtb	r3, r3
 80235ba:	2b00      	cmp	r3, #0
 80235bc:	d007      	beq.n	80235ce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80235be:	4b1a      	ldr	r3, [pc, #104]	; (8023628 <sys_timeout_abs+0xd8>)
 80235c0:	681a      	ldr	r2, [r3, #0]
 80235c2:	693b      	ldr	r3, [r7, #16]
 80235c4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80235c6:	4a18      	ldr	r2, [pc, #96]	; (8023628 <sys_timeout_abs+0xd8>)
 80235c8:	693b      	ldr	r3, [r7, #16]
 80235ca:	6013      	str	r3, [r2, #0]
 80235cc:	e023      	b.n	8023616 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80235ce:	4b16      	ldr	r3, [pc, #88]	; (8023628 <sys_timeout_abs+0xd8>)
 80235d0:	681b      	ldr	r3, [r3, #0]
 80235d2:	617b      	str	r3, [r7, #20]
 80235d4:	e01a      	b.n	802360c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80235d6:	697b      	ldr	r3, [r7, #20]
 80235d8:	681b      	ldr	r3, [r3, #0]
 80235da:	2b00      	cmp	r3, #0
 80235dc:	d00b      	beq.n	80235f6 <sys_timeout_abs+0xa6>
 80235de:	693b      	ldr	r3, [r7, #16]
 80235e0:	685a      	ldr	r2, [r3, #4]
 80235e2:	697b      	ldr	r3, [r7, #20]
 80235e4:	681b      	ldr	r3, [r3, #0]
 80235e6:	685b      	ldr	r3, [r3, #4]
 80235e8:	1ad3      	subs	r3, r2, r3
 80235ea:	0fdb      	lsrs	r3, r3, #31
 80235ec:	f003 0301 	and.w	r3, r3, #1
 80235f0:	b2db      	uxtb	r3, r3
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	d007      	beq.n	8023606 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80235f6:	697b      	ldr	r3, [r7, #20]
 80235f8:	681a      	ldr	r2, [r3, #0]
 80235fa:	693b      	ldr	r3, [r7, #16]
 80235fc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80235fe:	697b      	ldr	r3, [r7, #20]
 8023600:	693a      	ldr	r2, [r7, #16]
 8023602:	601a      	str	r2, [r3, #0]
        break;
 8023604:	e007      	b.n	8023616 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8023606:	697b      	ldr	r3, [r7, #20]
 8023608:	681b      	ldr	r3, [r3, #0]
 802360a:	617b      	str	r3, [r7, #20]
 802360c:	697b      	ldr	r3, [r7, #20]
 802360e:	2b00      	cmp	r3, #0
 8023610:	d1e1      	bne.n	80235d6 <sys_timeout_abs+0x86>
 8023612:	e000      	b.n	8023616 <sys_timeout_abs+0xc6>
    return;
 8023614:	bf00      	nop
      }
    }
  }
}
 8023616:	3718      	adds	r7, #24
 8023618:	46bd      	mov	sp, r7
 802361a:	bd80      	pop	{r7, pc}
 802361c:	0802ce20 	.word	0x0802ce20
 8023620:	0802ce54 	.word	0x0802ce54
 8023624:	0802ce94 	.word	0x0802ce94
 8023628:	20015e30 	.word	0x20015e30

0802362c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 802362c:	b580      	push	{r7, lr}
 802362e:	b086      	sub	sp, #24
 8023630:	af00      	add	r7, sp, #0
 8023632:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8023638:	697b      	ldr	r3, [r7, #20]
 802363a:	685b      	ldr	r3, [r3, #4]
 802363c:	4798      	blx	r3

  now = sys_now();
 802363e:	f7fd fed9 	bl	80213f4 <sys_now>
 8023642:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8023644:	697b      	ldr	r3, [r7, #20]
 8023646:	681a      	ldr	r2, [r3, #0]
 8023648:	4b0f      	ldr	r3, [pc, #60]	; (8023688 <lwip_cyclic_timer+0x5c>)
 802364a:	681b      	ldr	r3, [r3, #0]
 802364c:	4413      	add	r3, r2
 802364e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8023650:	68fa      	ldr	r2, [r7, #12]
 8023652:	693b      	ldr	r3, [r7, #16]
 8023654:	1ad3      	subs	r3, r2, r3
 8023656:	0fdb      	lsrs	r3, r3, #31
 8023658:	f003 0301 	and.w	r3, r3, #1
 802365c:	b2db      	uxtb	r3, r3
 802365e:	2b00      	cmp	r3, #0
 8023660:	d009      	beq.n	8023676 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8023662:	697b      	ldr	r3, [r7, #20]
 8023664:	681a      	ldr	r2, [r3, #0]
 8023666:	693b      	ldr	r3, [r7, #16]
 8023668:	4413      	add	r3, r2
 802366a:	687a      	ldr	r2, [r7, #4]
 802366c:	4907      	ldr	r1, [pc, #28]	; (802368c <lwip_cyclic_timer+0x60>)
 802366e:	4618      	mov	r0, r3
 8023670:	f7ff ff6e 	bl	8023550 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8023674:	e004      	b.n	8023680 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8023676:	687a      	ldr	r2, [r7, #4]
 8023678:	4904      	ldr	r1, [pc, #16]	; (802368c <lwip_cyclic_timer+0x60>)
 802367a:	68f8      	ldr	r0, [r7, #12]
 802367c:	f7ff ff68 	bl	8023550 <sys_timeout_abs>
}
 8023680:	bf00      	nop
 8023682:	3718      	adds	r7, #24
 8023684:	46bd      	mov	sp, r7
 8023686:	bd80      	pop	{r7, pc}
 8023688:	20015e34 	.word	0x20015e34
 802368c:	0802362d 	.word	0x0802362d

08023690 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8023690:	b580      	push	{r7, lr}
 8023692:	b082      	sub	sp, #8
 8023694:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8023696:	2300      	movs	r3, #0
 8023698:	607b      	str	r3, [r7, #4]
 802369a:	e00e      	b.n	80236ba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 802369c:	4a0b      	ldr	r2, [pc, #44]	; (80236cc <sys_timeouts_init+0x3c>)
 802369e:	687b      	ldr	r3, [r7, #4]
 80236a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80236a4:	687b      	ldr	r3, [r7, #4]
 80236a6:	00db      	lsls	r3, r3, #3
 80236a8:	4a08      	ldr	r2, [pc, #32]	; (80236cc <sys_timeouts_init+0x3c>)
 80236aa:	4413      	add	r3, r2
 80236ac:	461a      	mov	r2, r3
 80236ae:	4908      	ldr	r1, [pc, #32]	; (80236d0 <sys_timeouts_init+0x40>)
 80236b0:	f000 f810 	bl	80236d4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80236b4:	687b      	ldr	r3, [r7, #4]
 80236b6:	3301      	adds	r3, #1
 80236b8:	607b      	str	r3, [r7, #4]
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	2b01      	cmp	r3, #1
 80236be:	d9ed      	bls.n	802369c <sys_timeouts_init+0xc>
  }
}
 80236c0:	bf00      	nop
 80236c2:	bf00      	nop
 80236c4:	3708      	adds	r7, #8
 80236c6:	46bd      	mov	sp, r7
 80236c8:	bd80      	pop	{r7, pc}
 80236ca:	bf00      	nop
 80236cc:	0802ddd8 	.word	0x0802ddd8
 80236d0:	0802362d 	.word	0x0802362d

080236d4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80236d4:	b580      	push	{r7, lr}
 80236d6:	b086      	sub	sp, #24
 80236d8:	af00      	add	r7, sp, #0
 80236da:	60f8      	str	r0, [r7, #12]
 80236dc:	60b9      	str	r1, [r7, #8]
 80236de:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80236e0:	68fb      	ldr	r3, [r7, #12]
 80236e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80236e6:	d306      	bcc.n	80236f6 <sys_timeout+0x22>
 80236e8:	4b0a      	ldr	r3, [pc, #40]	; (8023714 <sys_timeout+0x40>)
 80236ea:	f240 1229 	movw	r2, #297	; 0x129
 80236ee:	490a      	ldr	r1, [pc, #40]	; (8023718 <sys_timeout+0x44>)
 80236f0:	480a      	ldr	r0, [pc, #40]	; (802371c <sys_timeout+0x48>)
 80236f2:	f003 f9a7 	bl	8026a44 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80236f6:	f7fd fe7d 	bl	80213f4 <sys_now>
 80236fa:	4602      	mov	r2, r0
 80236fc:	68fb      	ldr	r3, [r7, #12]
 80236fe:	4413      	add	r3, r2
 8023700:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8023702:	687a      	ldr	r2, [r7, #4]
 8023704:	68b9      	ldr	r1, [r7, #8]
 8023706:	6978      	ldr	r0, [r7, #20]
 8023708:	f7ff ff22 	bl	8023550 <sys_timeout_abs>
#endif
}
 802370c:	bf00      	nop
 802370e:	3718      	adds	r7, #24
 8023710:	46bd      	mov	sp, r7
 8023712:	bd80      	pop	{r7, pc}
 8023714:	0802ce20 	.word	0x0802ce20
 8023718:	0802cebc 	.word	0x0802cebc
 802371c:	0802ce94 	.word	0x0802ce94

08023720 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8023720:	b580      	push	{r7, lr}
 8023722:	b084      	sub	sp, #16
 8023724:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8023726:	f7fd fe65 	bl	80213f4 <sys_now>
 802372a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 802372c:	4b17      	ldr	r3, [pc, #92]	; (802378c <sys_check_timeouts+0x6c>)
 802372e:	681b      	ldr	r3, [r3, #0]
 8023730:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8023732:	68bb      	ldr	r3, [r7, #8]
 8023734:	2b00      	cmp	r3, #0
 8023736:	d022      	beq.n	802377e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8023738:	68bb      	ldr	r3, [r7, #8]
 802373a:	685b      	ldr	r3, [r3, #4]
 802373c:	68fa      	ldr	r2, [r7, #12]
 802373e:	1ad3      	subs	r3, r2, r3
 8023740:	0fdb      	lsrs	r3, r3, #31
 8023742:	f003 0301 	and.w	r3, r3, #1
 8023746:	b2db      	uxtb	r3, r3
 8023748:	2b00      	cmp	r3, #0
 802374a:	d11a      	bne.n	8023782 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 802374c:	68bb      	ldr	r3, [r7, #8]
 802374e:	681b      	ldr	r3, [r3, #0]
 8023750:	4a0e      	ldr	r2, [pc, #56]	; (802378c <sys_check_timeouts+0x6c>)
 8023752:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8023754:	68bb      	ldr	r3, [r7, #8]
 8023756:	689b      	ldr	r3, [r3, #8]
 8023758:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 802375a:	68bb      	ldr	r3, [r7, #8]
 802375c:	68db      	ldr	r3, [r3, #12]
 802375e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8023760:	68bb      	ldr	r3, [r7, #8]
 8023762:	685b      	ldr	r3, [r3, #4]
 8023764:	4a0a      	ldr	r2, [pc, #40]	; (8023790 <sys_check_timeouts+0x70>)
 8023766:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8023768:	68b9      	ldr	r1, [r7, #8]
 802376a:	2003      	movs	r0, #3
 802376c:	f7fe fd22 	bl	80221b4 <memp_free>
    if (handler != NULL) {
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	2b00      	cmp	r3, #0
 8023774:	d0da      	beq.n	802372c <sys_check_timeouts+0xc>
      handler(arg);
 8023776:	687b      	ldr	r3, [r7, #4]
 8023778:	6838      	ldr	r0, [r7, #0]
 802377a:	4798      	blx	r3
  do {
 802377c:	e7d6      	b.n	802372c <sys_check_timeouts+0xc>
      return;
 802377e:	bf00      	nop
 8023780:	e000      	b.n	8023784 <sys_check_timeouts+0x64>
      return;
 8023782:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8023784:	3710      	adds	r7, #16
 8023786:	46bd      	mov	sp, r7
 8023788:	bd80      	pop	{r7, pc}
 802378a:	bf00      	nop
 802378c:	20015e30 	.word	0x20015e30
 8023790:	20015e34 	.word	0x20015e34

08023794 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8023794:	b580      	push	{r7, lr}
 8023796:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8023798:	f003 f9f8 	bl	8026b8c <rand>
 802379c:	4603      	mov	r3, r0
 802379e:	b29b      	uxth	r3, r3
 80237a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80237a4:	b29b      	uxth	r3, r3
 80237a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80237aa:	b29a      	uxth	r2, r3
 80237ac:	4b01      	ldr	r3, [pc, #4]	; (80237b4 <udp_init+0x20>)
 80237ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80237b0:	bf00      	nop
 80237b2:	bd80      	pop	{r7, pc}
 80237b4:	2000033c 	.word	0x2000033c

080237b8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80237b8:	b480      	push	{r7}
 80237ba:	b083      	sub	sp, #12
 80237bc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80237be:	2300      	movs	r3, #0
 80237c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80237c2:	4b17      	ldr	r3, [pc, #92]	; (8023820 <udp_new_port+0x68>)
 80237c4:	881b      	ldrh	r3, [r3, #0]
 80237c6:	1c5a      	adds	r2, r3, #1
 80237c8:	b291      	uxth	r1, r2
 80237ca:	4a15      	ldr	r2, [pc, #84]	; (8023820 <udp_new_port+0x68>)
 80237cc:	8011      	strh	r1, [r2, #0]
 80237ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80237d2:	4293      	cmp	r3, r2
 80237d4:	d103      	bne.n	80237de <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80237d6:	4b12      	ldr	r3, [pc, #72]	; (8023820 <udp_new_port+0x68>)
 80237d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80237dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80237de:	4b11      	ldr	r3, [pc, #68]	; (8023824 <udp_new_port+0x6c>)
 80237e0:	681b      	ldr	r3, [r3, #0]
 80237e2:	603b      	str	r3, [r7, #0]
 80237e4:	e011      	b.n	802380a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80237e6:	683b      	ldr	r3, [r7, #0]
 80237e8:	8a5a      	ldrh	r2, [r3, #18]
 80237ea:	4b0d      	ldr	r3, [pc, #52]	; (8023820 <udp_new_port+0x68>)
 80237ec:	881b      	ldrh	r3, [r3, #0]
 80237ee:	429a      	cmp	r2, r3
 80237f0:	d108      	bne.n	8023804 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80237f2:	88fb      	ldrh	r3, [r7, #6]
 80237f4:	3301      	adds	r3, #1
 80237f6:	80fb      	strh	r3, [r7, #6]
 80237f8:	88fb      	ldrh	r3, [r7, #6]
 80237fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80237fe:	d3e0      	bcc.n	80237c2 <udp_new_port+0xa>
        return 0;
 8023800:	2300      	movs	r3, #0
 8023802:	e007      	b.n	8023814 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023804:	683b      	ldr	r3, [r7, #0]
 8023806:	68db      	ldr	r3, [r3, #12]
 8023808:	603b      	str	r3, [r7, #0]
 802380a:	683b      	ldr	r3, [r7, #0]
 802380c:	2b00      	cmp	r3, #0
 802380e:	d1ea      	bne.n	80237e6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8023810:	4b03      	ldr	r3, [pc, #12]	; (8023820 <udp_new_port+0x68>)
 8023812:	881b      	ldrh	r3, [r3, #0]
}
 8023814:	4618      	mov	r0, r3
 8023816:	370c      	adds	r7, #12
 8023818:	46bd      	mov	sp, r7
 802381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802381e:	4770      	bx	lr
 8023820:	2000033c 	.word	0x2000033c
 8023824:	20015e38 	.word	0x20015e38

08023828 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8023828:	b580      	push	{r7, lr}
 802382a:	b084      	sub	sp, #16
 802382c:	af00      	add	r7, sp, #0
 802382e:	60f8      	str	r0, [r7, #12]
 8023830:	60b9      	str	r1, [r7, #8]
 8023832:	4613      	mov	r3, r2
 8023834:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8023836:	68fb      	ldr	r3, [r7, #12]
 8023838:	2b00      	cmp	r3, #0
 802383a:	d105      	bne.n	8023848 <udp_input_local_match+0x20>
 802383c:	4b27      	ldr	r3, [pc, #156]	; (80238dc <udp_input_local_match+0xb4>)
 802383e:	2287      	movs	r2, #135	; 0x87
 8023840:	4927      	ldr	r1, [pc, #156]	; (80238e0 <udp_input_local_match+0xb8>)
 8023842:	4828      	ldr	r0, [pc, #160]	; (80238e4 <udp_input_local_match+0xbc>)
 8023844:	f003 f8fe 	bl	8026a44 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8023848:	68bb      	ldr	r3, [r7, #8]
 802384a:	2b00      	cmp	r3, #0
 802384c:	d105      	bne.n	802385a <udp_input_local_match+0x32>
 802384e:	4b23      	ldr	r3, [pc, #140]	; (80238dc <udp_input_local_match+0xb4>)
 8023850:	2288      	movs	r2, #136	; 0x88
 8023852:	4925      	ldr	r1, [pc, #148]	; (80238e8 <udp_input_local_match+0xc0>)
 8023854:	4823      	ldr	r0, [pc, #140]	; (80238e4 <udp_input_local_match+0xbc>)
 8023856:	f003 f8f5 	bl	8026a44 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802385a:	68fb      	ldr	r3, [r7, #12]
 802385c:	7a1b      	ldrb	r3, [r3, #8]
 802385e:	2b00      	cmp	r3, #0
 8023860:	d00b      	beq.n	802387a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8023862:	68fb      	ldr	r3, [r7, #12]
 8023864:	7a1a      	ldrb	r2, [r3, #8]
 8023866:	4b21      	ldr	r3, [pc, #132]	; (80238ec <udp_input_local_match+0xc4>)
 8023868:	685b      	ldr	r3, [r3, #4]
 802386a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802386e:	3301      	adds	r3, #1
 8023870:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8023872:	429a      	cmp	r2, r3
 8023874:	d001      	beq.n	802387a <udp_input_local_match+0x52>
    return 0;
 8023876:	2300      	movs	r3, #0
 8023878:	e02b      	b.n	80238d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802387a:	79fb      	ldrb	r3, [r7, #7]
 802387c:	2b00      	cmp	r3, #0
 802387e:	d018      	beq.n	80238b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023880:	68fb      	ldr	r3, [r7, #12]
 8023882:	2b00      	cmp	r3, #0
 8023884:	d013      	beq.n	80238ae <udp_input_local_match+0x86>
 8023886:	68fb      	ldr	r3, [r7, #12]
 8023888:	681b      	ldr	r3, [r3, #0]
 802388a:	2b00      	cmp	r3, #0
 802388c:	d00f      	beq.n	80238ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802388e:	4b17      	ldr	r3, [pc, #92]	; (80238ec <udp_input_local_match+0xc4>)
 8023890:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023896:	d00a      	beq.n	80238ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8023898:	68fb      	ldr	r3, [r7, #12]
 802389a:	681a      	ldr	r2, [r3, #0]
 802389c:	4b13      	ldr	r3, [pc, #76]	; (80238ec <udp_input_local_match+0xc4>)
 802389e:	695b      	ldr	r3, [r3, #20]
 80238a0:	405a      	eors	r2, r3
 80238a2:	68bb      	ldr	r3, [r7, #8]
 80238a4:	3308      	adds	r3, #8
 80238a6:	681b      	ldr	r3, [r3, #0]
 80238a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80238aa:	2b00      	cmp	r3, #0
 80238ac:	d110      	bne.n	80238d0 <udp_input_local_match+0xa8>
          return 1;
 80238ae:	2301      	movs	r3, #1
 80238b0:	e00f      	b.n	80238d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	d009      	beq.n	80238cc <udp_input_local_match+0xa4>
 80238b8:	68fb      	ldr	r3, [r7, #12]
 80238ba:	681b      	ldr	r3, [r3, #0]
 80238bc:	2b00      	cmp	r3, #0
 80238be:	d005      	beq.n	80238cc <udp_input_local_match+0xa4>
 80238c0:	68fb      	ldr	r3, [r7, #12]
 80238c2:	681a      	ldr	r2, [r3, #0]
 80238c4:	4b09      	ldr	r3, [pc, #36]	; (80238ec <udp_input_local_match+0xc4>)
 80238c6:	695b      	ldr	r3, [r3, #20]
 80238c8:	429a      	cmp	r2, r3
 80238ca:	d101      	bne.n	80238d0 <udp_input_local_match+0xa8>
        return 1;
 80238cc:	2301      	movs	r3, #1
 80238ce:	e000      	b.n	80238d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80238d0:	2300      	movs	r3, #0
}
 80238d2:	4618      	mov	r0, r3
 80238d4:	3710      	adds	r7, #16
 80238d6:	46bd      	mov	sp, r7
 80238d8:	bd80      	pop	{r7, pc}
 80238da:	bf00      	nop
 80238dc:	0802cf08 	.word	0x0802cf08
 80238e0:	0802cf38 	.word	0x0802cf38
 80238e4:	0802cf5c 	.word	0x0802cf5c
 80238e8:	0802cf84 	.word	0x0802cf84
 80238ec:	200127d4 	.word	0x200127d4

080238f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80238f0:	b590      	push	{r4, r7, lr}
 80238f2:	b08d      	sub	sp, #52	; 0x34
 80238f4:	af02      	add	r7, sp, #8
 80238f6:	6078      	str	r0, [r7, #4]
 80238f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80238fa:	2300      	movs	r3, #0
 80238fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80238fe:	687b      	ldr	r3, [r7, #4]
 8023900:	2b00      	cmp	r3, #0
 8023902:	d105      	bne.n	8023910 <udp_input+0x20>
 8023904:	4b7c      	ldr	r3, [pc, #496]	; (8023af8 <udp_input+0x208>)
 8023906:	22cf      	movs	r2, #207	; 0xcf
 8023908:	497c      	ldr	r1, [pc, #496]	; (8023afc <udp_input+0x20c>)
 802390a:	487d      	ldr	r0, [pc, #500]	; (8023b00 <udp_input+0x210>)
 802390c:	f003 f89a 	bl	8026a44 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8023910:	683b      	ldr	r3, [r7, #0]
 8023912:	2b00      	cmp	r3, #0
 8023914:	d105      	bne.n	8023922 <udp_input+0x32>
 8023916:	4b78      	ldr	r3, [pc, #480]	; (8023af8 <udp_input+0x208>)
 8023918:	22d0      	movs	r2, #208	; 0xd0
 802391a:	497a      	ldr	r1, [pc, #488]	; (8023b04 <udp_input+0x214>)
 802391c:	4878      	ldr	r0, [pc, #480]	; (8023b00 <udp_input+0x210>)
 802391e:	f003 f891 	bl	8026a44 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	895b      	ldrh	r3, [r3, #10]
 8023926:	2b07      	cmp	r3, #7
 8023928:	d803      	bhi.n	8023932 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 802392a:	6878      	ldr	r0, [r7, #4]
 802392c:	f7ff fb52 	bl	8022fd4 <pbuf_free>
    goto end;
 8023930:	e0de      	b.n	8023af0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8023932:	687b      	ldr	r3, [r7, #4]
 8023934:	685b      	ldr	r3, [r3, #4]
 8023936:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8023938:	4b73      	ldr	r3, [pc, #460]	; (8023b08 <udp_input+0x218>)
 802393a:	695b      	ldr	r3, [r3, #20]
 802393c:	4a72      	ldr	r2, [pc, #456]	; (8023b08 <udp_input+0x218>)
 802393e:	6812      	ldr	r2, [r2, #0]
 8023940:	4611      	mov	r1, r2
 8023942:	4618      	mov	r0, r3
 8023944:	f001 ff44 	bl	80257d0 <ip4_addr_isbroadcast_u32>
 8023948:	4603      	mov	r3, r0
 802394a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 802394c:	697b      	ldr	r3, [r7, #20]
 802394e:	881b      	ldrh	r3, [r3, #0]
 8023950:	b29b      	uxth	r3, r3
 8023952:	4618      	mov	r0, r3
 8023954:	f7fd ff62 	bl	802181c <lwip_htons>
 8023958:	4603      	mov	r3, r0
 802395a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 802395c:	697b      	ldr	r3, [r7, #20]
 802395e:	885b      	ldrh	r3, [r3, #2]
 8023960:	b29b      	uxth	r3, r3
 8023962:	4618      	mov	r0, r3
 8023964:	f7fd ff5a 	bl	802181c <lwip_htons>
 8023968:	4603      	mov	r3, r0
 802396a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 802396c:	2300      	movs	r3, #0
 802396e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8023970:	2300      	movs	r3, #0
 8023972:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8023974:	2300      	movs	r3, #0
 8023976:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023978:	4b64      	ldr	r3, [pc, #400]	; (8023b0c <udp_input+0x21c>)
 802397a:	681b      	ldr	r3, [r3, #0]
 802397c:	627b      	str	r3, [r7, #36]	; 0x24
 802397e:	e054      	b.n	8023a2a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8023980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023982:	8a5b      	ldrh	r3, [r3, #18]
 8023984:	89fa      	ldrh	r2, [r7, #14]
 8023986:	429a      	cmp	r2, r3
 8023988:	d14a      	bne.n	8023a20 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 802398a:	7cfb      	ldrb	r3, [r7, #19]
 802398c:	461a      	mov	r2, r3
 802398e:	6839      	ldr	r1, [r7, #0]
 8023990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023992:	f7ff ff49 	bl	8023828 <udp_input_local_match>
 8023996:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8023998:	2b00      	cmp	r3, #0
 802399a:	d041      	beq.n	8023a20 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 802399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802399e:	7c1b      	ldrb	r3, [r3, #16]
 80239a0:	f003 0304 	and.w	r3, r3, #4
 80239a4:	2b00      	cmp	r3, #0
 80239a6:	d11d      	bne.n	80239e4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80239a8:	69fb      	ldr	r3, [r7, #28]
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d102      	bne.n	80239b4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80239ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239b0:	61fb      	str	r3, [r7, #28]
 80239b2:	e017      	b.n	80239e4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80239b4:	7cfb      	ldrb	r3, [r7, #19]
 80239b6:	2b00      	cmp	r3, #0
 80239b8:	d014      	beq.n	80239e4 <udp_input+0xf4>
 80239ba:	4b53      	ldr	r3, [pc, #332]	; (8023b08 <udp_input+0x218>)
 80239bc:	695b      	ldr	r3, [r3, #20]
 80239be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80239c2:	d10f      	bne.n	80239e4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80239c4:	69fb      	ldr	r3, [r7, #28]
 80239c6:	681a      	ldr	r2, [r3, #0]
 80239c8:	683b      	ldr	r3, [r7, #0]
 80239ca:	3304      	adds	r3, #4
 80239cc:	681b      	ldr	r3, [r3, #0]
 80239ce:	429a      	cmp	r2, r3
 80239d0:	d008      	beq.n	80239e4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80239d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239d4:	681a      	ldr	r2, [r3, #0]
 80239d6:	683b      	ldr	r3, [r7, #0]
 80239d8:	3304      	adds	r3, #4
 80239da:	681b      	ldr	r3, [r3, #0]
 80239dc:	429a      	cmp	r2, r3
 80239de:	d101      	bne.n	80239e4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80239e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239e2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80239e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239e6:	8a9b      	ldrh	r3, [r3, #20]
 80239e8:	8a3a      	ldrh	r2, [r7, #16]
 80239ea:	429a      	cmp	r2, r3
 80239ec:	d118      	bne.n	8023a20 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80239ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d005      	beq.n	8023a02 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80239f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239f8:	685a      	ldr	r2, [r3, #4]
 80239fa:	4b43      	ldr	r3, [pc, #268]	; (8023b08 <udp_input+0x218>)
 80239fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80239fe:	429a      	cmp	r2, r3
 8023a00:	d10e      	bne.n	8023a20 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8023a02:	6a3b      	ldr	r3, [r7, #32]
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	d014      	beq.n	8023a32 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8023a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a0a:	68da      	ldr	r2, [r3, #12]
 8023a0c:	6a3b      	ldr	r3, [r7, #32]
 8023a0e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8023a10:	4b3e      	ldr	r3, [pc, #248]	; (8023b0c <udp_input+0x21c>)
 8023a12:	681a      	ldr	r2, [r3, #0]
 8023a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a16:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8023a18:	4a3c      	ldr	r2, [pc, #240]	; (8023b0c <udp_input+0x21c>)
 8023a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a1c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8023a1e:	e008      	b.n	8023a32 <udp_input+0x142>
      }
    }

    prev = pcb;
 8023a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a22:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8023a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a26:	68db      	ldr	r3, [r3, #12]
 8023a28:	627b      	str	r3, [r7, #36]	; 0x24
 8023a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	d1a7      	bne.n	8023980 <udp_input+0x90>
 8023a30:	e000      	b.n	8023a34 <udp_input+0x144>
        break;
 8023a32:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8023a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a36:	2b00      	cmp	r3, #0
 8023a38:	d101      	bne.n	8023a3e <udp_input+0x14e>
    pcb = uncon_pcb;
 8023a3a:	69fb      	ldr	r3, [r7, #28]
 8023a3c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8023a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a40:	2b00      	cmp	r3, #0
 8023a42:	d002      	beq.n	8023a4a <udp_input+0x15a>
    for_us = 1;
 8023a44:	2301      	movs	r3, #1
 8023a46:	76fb      	strb	r3, [r7, #27]
 8023a48:	e00a      	b.n	8023a60 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8023a4a:	683b      	ldr	r3, [r7, #0]
 8023a4c:	3304      	adds	r3, #4
 8023a4e:	681a      	ldr	r2, [r3, #0]
 8023a50:	4b2d      	ldr	r3, [pc, #180]	; (8023b08 <udp_input+0x218>)
 8023a52:	695b      	ldr	r3, [r3, #20]
 8023a54:	429a      	cmp	r2, r3
 8023a56:	bf0c      	ite	eq
 8023a58:	2301      	moveq	r3, #1
 8023a5a:	2300      	movne	r3, #0
 8023a5c:	b2db      	uxtb	r3, r3
 8023a5e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8023a60:	7efb      	ldrb	r3, [r7, #27]
 8023a62:	2b00      	cmp	r3, #0
 8023a64:	d041      	beq.n	8023aea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8023a66:	2108      	movs	r1, #8
 8023a68:	6878      	ldr	r0, [r7, #4]
 8023a6a:	f7ff fa2d 	bl	8022ec8 <pbuf_remove_header>
 8023a6e:	4603      	mov	r3, r0
 8023a70:	2b00      	cmp	r3, #0
 8023a72:	d00a      	beq.n	8023a8a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8023a74:	4b20      	ldr	r3, [pc, #128]	; (8023af8 <udp_input+0x208>)
 8023a76:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8023a7a:	4925      	ldr	r1, [pc, #148]	; (8023b10 <udp_input+0x220>)
 8023a7c:	4820      	ldr	r0, [pc, #128]	; (8023b00 <udp_input+0x210>)
 8023a7e:	f002 ffe1 	bl	8026a44 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8023a82:	6878      	ldr	r0, [r7, #4]
 8023a84:	f7ff faa6 	bl	8022fd4 <pbuf_free>
      goto end;
 8023a88:	e032      	b.n	8023af0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8023a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d012      	beq.n	8023ab6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8023a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a92:	699b      	ldr	r3, [r3, #24]
 8023a94:	2b00      	cmp	r3, #0
 8023a96:	d00a      	beq.n	8023aae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8023a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a9a:	699c      	ldr	r4, [r3, #24]
 8023a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a9e:	69d8      	ldr	r0, [r3, #28]
 8023aa0:	8a3b      	ldrh	r3, [r7, #16]
 8023aa2:	9300      	str	r3, [sp, #0]
 8023aa4:	4b1b      	ldr	r3, [pc, #108]	; (8023b14 <udp_input+0x224>)
 8023aa6:	687a      	ldr	r2, [r7, #4]
 8023aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8023aaa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8023aac:	e021      	b.n	8023af2 <udp_input+0x202>
        pbuf_free(p);
 8023aae:	6878      	ldr	r0, [r7, #4]
 8023ab0:	f7ff fa90 	bl	8022fd4 <pbuf_free>
        goto end;
 8023ab4:	e01c      	b.n	8023af0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8023ab6:	7cfb      	ldrb	r3, [r7, #19]
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	d112      	bne.n	8023ae2 <udp_input+0x1f2>
 8023abc:	4b12      	ldr	r3, [pc, #72]	; (8023b08 <udp_input+0x218>)
 8023abe:	695b      	ldr	r3, [r3, #20]
 8023ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023ac4:	2be0      	cmp	r3, #224	; 0xe0
 8023ac6:	d00c      	beq.n	8023ae2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8023ac8:	4b0f      	ldr	r3, [pc, #60]	; (8023b08 <udp_input+0x218>)
 8023aca:	899b      	ldrh	r3, [r3, #12]
 8023acc:	3308      	adds	r3, #8
 8023ace:	b29b      	uxth	r3, r3
 8023ad0:	b21b      	sxth	r3, r3
 8023ad2:	4619      	mov	r1, r3
 8023ad4:	6878      	ldr	r0, [r7, #4]
 8023ad6:	f7ff fa6a 	bl	8022fae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8023ada:	2103      	movs	r1, #3
 8023adc:	6878      	ldr	r0, [r7, #4]
 8023ade:	f001 fb53 	bl	8025188 <icmp_dest_unreach>
      pbuf_free(p);
 8023ae2:	6878      	ldr	r0, [r7, #4]
 8023ae4:	f7ff fa76 	bl	8022fd4 <pbuf_free>
  return;
 8023ae8:	e003      	b.n	8023af2 <udp_input+0x202>
    pbuf_free(p);
 8023aea:	6878      	ldr	r0, [r7, #4]
 8023aec:	f7ff fa72 	bl	8022fd4 <pbuf_free>
  return;
 8023af0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8023af2:	372c      	adds	r7, #44	; 0x2c
 8023af4:	46bd      	mov	sp, r7
 8023af6:	bd90      	pop	{r4, r7, pc}
 8023af8:	0802cf08 	.word	0x0802cf08
 8023afc:	0802cfac 	.word	0x0802cfac
 8023b00:	0802cf5c 	.word	0x0802cf5c
 8023b04:	0802cfc4 	.word	0x0802cfc4
 8023b08:	200127d4 	.word	0x200127d4
 8023b0c:	20015e38 	.word	0x20015e38
 8023b10:	0802cfe0 	.word	0x0802cfe0
 8023b14:	200127e4 	.word	0x200127e4

08023b18 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8023b18:	b580      	push	{r7, lr}
 8023b1a:	b088      	sub	sp, #32
 8023b1c:	af02      	add	r7, sp, #8
 8023b1e:	60f8      	str	r0, [r7, #12]
 8023b20:	60b9      	str	r1, [r7, #8]
 8023b22:	607a      	str	r2, [r7, #4]
 8023b24:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8023b26:	68fb      	ldr	r3, [r7, #12]
 8023b28:	2b00      	cmp	r3, #0
 8023b2a:	d109      	bne.n	8023b40 <udp_sendto+0x28>
 8023b2c:	4b23      	ldr	r3, [pc, #140]	; (8023bbc <udp_sendto+0xa4>)
 8023b2e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8023b32:	4923      	ldr	r1, [pc, #140]	; (8023bc0 <udp_sendto+0xa8>)
 8023b34:	4823      	ldr	r0, [pc, #140]	; (8023bc4 <udp_sendto+0xac>)
 8023b36:	f002 ff85 	bl	8026a44 <iprintf>
 8023b3a:	f06f 030f 	mvn.w	r3, #15
 8023b3e:	e038      	b.n	8023bb2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8023b40:	68bb      	ldr	r3, [r7, #8]
 8023b42:	2b00      	cmp	r3, #0
 8023b44:	d109      	bne.n	8023b5a <udp_sendto+0x42>
 8023b46:	4b1d      	ldr	r3, [pc, #116]	; (8023bbc <udp_sendto+0xa4>)
 8023b48:	f240 2219 	movw	r2, #537	; 0x219
 8023b4c:	491e      	ldr	r1, [pc, #120]	; (8023bc8 <udp_sendto+0xb0>)
 8023b4e:	481d      	ldr	r0, [pc, #116]	; (8023bc4 <udp_sendto+0xac>)
 8023b50:	f002 ff78 	bl	8026a44 <iprintf>
 8023b54:	f06f 030f 	mvn.w	r3, #15
 8023b58:	e02b      	b.n	8023bb2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	2b00      	cmp	r3, #0
 8023b5e:	d109      	bne.n	8023b74 <udp_sendto+0x5c>
 8023b60:	4b16      	ldr	r3, [pc, #88]	; (8023bbc <udp_sendto+0xa4>)
 8023b62:	f240 221a 	movw	r2, #538	; 0x21a
 8023b66:	4919      	ldr	r1, [pc, #100]	; (8023bcc <udp_sendto+0xb4>)
 8023b68:	4816      	ldr	r0, [pc, #88]	; (8023bc4 <udp_sendto+0xac>)
 8023b6a:	f002 ff6b 	bl	8026a44 <iprintf>
 8023b6e:	f06f 030f 	mvn.w	r3, #15
 8023b72:	e01e      	b.n	8023bb2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8023b74:	68fb      	ldr	r3, [r7, #12]
 8023b76:	7a1b      	ldrb	r3, [r3, #8]
 8023b78:	2b00      	cmp	r3, #0
 8023b7a:	d006      	beq.n	8023b8a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8023b7c:	68fb      	ldr	r3, [r7, #12]
 8023b7e:	7a1b      	ldrb	r3, [r3, #8]
 8023b80:	4618      	mov	r0, r3
 8023b82:	f7fe fef5 	bl	8022970 <netif_get_by_index>
 8023b86:	6178      	str	r0, [r7, #20]
 8023b88:	e003      	b.n	8023b92 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8023b8a:	6878      	ldr	r0, [r7, #4]
 8023b8c:	f001 fb86 	bl	802529c <ip4_route>
 8023b90:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8023b92:	697b      	ldr	r3, [r7, #20]
 8023b94:	2b00      	cmp	r3, #0
 8023b96:	d102      	bne.n	8023b9e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8023b98:	f06f 0303 	mvn.w	r3, #3
 8023b9c:	e009      	b.n	8023bb2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8023b9e:	887a      	ldrh	r2, [r7, #2]
 8023ba0:	697b      	ldr	r3, [r7, #20]
 8023ba2:	9300      	str	r3, [sp, #0]
 8023ba4:	4613      	mov	r3, r2
 8023ba6:	687a      	ldr	r2, [r7, #4]
 8023ba8:	68b9      	ldr	r1, [r7, #8]
 8023baa:	68f8      	ldr	r0, [r7, #12]
 8023bac:	f000 f810 	bl	8023bd0 <udp_sendto_if>
 8023bb0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8023bb2:	4618      	mov	r0, r3
 8023bb4:	3718      	adds	r7, #24
 8023bb6:	46bd      	mov	sp, r7
 8023bb8:	bd80      	pop	{r7, pc}
 8023bba:	bf00      	nop
 8023bbc:	0802cf08 	.word	0x0802cf08
 8023bc0:	0802d02c 	.word	0x0802d02c
 8023bc4:	0802cf5c 	.word	0x0802cf5c
 8023bc8:	0802d044 	.word	0x0802d044
 8023bcc:	0802d060 	.word	0x0802d060

08023bd0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8023bd0:	b580      	push	{r7, lr}
 8023bd2:	b088      	sub	sp, #32
 8023bd4:	af02      	add	r7, sp, #8
 8023bd6:	60f8      	str	r0, [r7, #12]
 8023bd8:	60b9      	str	r1, [r7, #8]
 8023bda:	607a      	str	r2, [r7, #4]
 8023bdc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8023bde:	68fb      	ldr	r3, [r7, #12]
 8023be0:	2b00      	cmp	r3, #0
 8023be2:	d109      	bne.n	8023bf8 <udp_sendto_if+0x28>
 8023be4:	4b2e      	ldr	r3, [pc, #184]	; (8023ca0 <udp_sendto_if+0xd0>)
 8023be6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023bea:	492e      	ldr	r1, [pc, #184]	; (8023ca4 <udp_sendto_if+0xd4>)
 8023bec:	482e      	ldr	r0, [pc, #184]	; (8023ca8 <udp_sendto_if+0xd8>)
 8023bee:	f002 ff29 	bl	8026a44 <iprintf>
 8023bf2:	f06f 030f 	mvn.w	r3, #15
 8023bf6:	e04f      	b.n	8023c98 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8023bf8:	68bb      	ldr	r3, [r7, #8]
 8023bfa:	2b00      	cmp	r3, #0
 8023bfc:	d109      	bne.n	8023c12 <udp_sendto_if+0x42>
 8023bfe:	4b28      	ldr	r3, [pc, #160]	; (8023ca0 <udp_sendto_if+0xd0>)
 8023c00:	f240 2281 	movw	r2, #641	; 0x281
 8023c04:	4929      	ldr	r1, [pc, #164]	; (8023cac <udp_sendto_if+0xdc>)
 8023c06:	4828      	ldr	r0, [pc, #160]	; (8023ca8 <udp_sendto_if+0xd8>)
 8023c08:	f002 ff1c 	bl	8026a44 <iprintf>
 8023c0c:	f06f 030f 	mvn.w	r3, #15
 8023c10:	e042      	b.n	8023c98 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	2b00      	cmp	r3, #0
 8023c16:	d109      	bne.n	8023c2c <udp_sendto_if+0x5c>
 8023c18:	4b21      	ldr	r3, [pc, #132]	; (8023ca0 <udp_sendto_if+0xd0>)
 8023c1a:	f240 2282 	movw	r2, #642	; 0x282
 8023c1e:	4924      	ldr	r1, [pc, #144]	; (8023cb0 <udp_sendto_if+0xe0>)
 8023c20:	4821      	ldr	r0, [pc, #132]	; (8023ca8 <udp_sendto_if+0xd8>)
 8023c22:	f002 ff0f 	bl	8026a44 <iprintf>
 8023c26:	f06f 030f 	mvn.w	r3, #15
 8023c2a:	e035      	b.n	8023c98 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8023c2c:	6a3b      	ldr	r3, [r7, #32]
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	d109      	bne.n	8023c46 <udp_sendto_if+0x76>
 8023c32:	4b1b      	ldr	r3, [pc, #108]	; (8023ca0 <udp_sendto_if+0xd0>)
 8023c34:	f240 2283 	movw	r2, #643	; 0x283
 8023c38:	491e      	ldr	r1, [pc, #120]	; (8023cb4 <udp_sendto_if+0xe4>)
 8023c3a:	481b      	ldr	r0, [pc, #108]	; (8023ca8 <udp_sendto_if+0xd8>)
 8023c3c:	f002 ff02 	bl	8026a44 <iprintf>
 8023c40:	f06f 030f 	mvn.w	r3, #15
 8023c44:	e028      	b.n	8023c98 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023c46:	68fb      	ldr	r3, [r7, #12]
 8023c48:	2b00      	cmp	r3, #0
 8023c4a:	d009      	beq.n	8023c60 <udp_sendto_if+0x90>
 8023c4c:	68fb      	ldr	r3, [r7, #12]
 8023c4e:	681b      	ldr	r3, [r3, #0]
 8023c50:	2b00      	cmp	r3, #0
 8023c52:	d005      	beq.n	8023c60 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8023c54:	68fb      	ldr	r3, [r7, #12]
 8023c56:	681b      	ldr	r3, [r3, #0]
 8023c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8023c5c:	2be0      	cmp	r3, #224	; 0xe0
 8023c5e:	d103      	bne.n	8023c68 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8023c60:	6a3b      	ldr	r3, [r7, #32]
 8023c62:	3304      	adds	r3, #4
 8023c64:	617b      	str	r3, [r7, #20]
 8023c66:	e00b      	b.n	8023c80 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8023c68:	68fb      	ldr	r3, [r7, #12]
 8023c6a:	681a      	ldr	r2, [r3, #0]
 8023c6c:	6a3b      	ldr	r3, [r7, #32]
 8023c6e:	3304      	adds	r3, #4
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	429a      	cmp	r2, r3
 8023c74:	d002      	beq.n	8023c7c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8023c76:	f06f 0303 	mvn.w	r3, #3
 8023c7a:	e00d      	b.n	8023c98 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8023c7c:	68fb      	ldr	r3, [r7, #12]
 8023c7e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8023c80:	887a      	ldrh	r2, [r7, #2]
 8023c82:	697b      	ldr	r3, [r7, #20]
 8023c84:	9301      	str	r3, [sp, #4]
 8023c86:	6a3b      	ldr	r3, [r7, #32]
 8023c88:	9300      	str	r3, [sp, #0]
 8023c8a:	4613      	mov	r3, r2
 8023c8c:	687a      	ldr	r2, [r7, #4]
 8023c8e:	68b9      	ldr	r1, [r7, #8]
 8023c90:	68f8      	ldr	r0, [r7, #12]
 8023c92:	f000 f811 	bl	8023cb8 <udp_sendto_if_src>
 8023c96:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8023c98:	4618      	mov	r0, r3
 8023c9a:	3718      	adds	r7, #24
 8023c9c:	46bd      	mov	sp, r7
 8023c9e:	bd80      	pop	{r7, pc}
 8023ca0:	0802cf08 	.word	0x0802cf08
 8023ca4:	0802d07c 	.word	0x0802d07c
 8023ca8:	0802cf5c 	.word	0x0802cf5c
 8023cac:	0802d098 	.word	0x0802d098
 8023cb0:	0802d0b4 	.word	0x0802d0b4
 8023cb4:	0802d0d4 	.word	0x0802d0d4

08023cb8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8023cb8:	b580      	push	{r7, lr}
 8023cba:	b08c      	sub	sp, #48	; 0x30
 8023cbc:	af04      	add	r7, sp, #16
 8023cbe:	60f8      	str	r0, [r7, #12]
 8023cc0:	60b9      	str	r1, [r7, #8]
 8023cc2:	607a      	str	r2, [r7, #4]
 8023cc4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8023cc6:	68fb      	ldr	r3, [r7, #12]
 8023cc8:	2b00      	cmp	r3, #0
 8023cca:	d109      	bne.n	8023ce0 <udp_sendto_if_src+0x28>
 8023ccc:	4b65      	ldr	r3, [pc, #404]	; (8023e64 <udp_sendto_if_src+0x1ac>)
 8023cce:	f240 22d1 	movw	r2, #721	; 0x2d1
 8023cd2:	4965      	ldr	r1, [pc, #404]	; (8023e68 <udp_sendto_if_src+0x1b0>)
 8023cd4:	4865      	ldr	r0, [pc, #404]	; (8023e6c <udp_sendto_if_src+0x1b4>)
 8023cd6:	f002 feb5 	bl	8026a44 <iprintf>
 8023cda:	f06f 030f 	mvn.w	r3, #15
 8023cde:	e0bc      	b.n	8023e5a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8023ce0:	68bb      	ldr	r3, [r7, #8]
 8023ce2:	2b00      	cmp	r3, #0
 8023ce4:	d109      	bne.n	8023cfa <udp_sendto_if_src+0x42>
 8023ce6:	4b5f      	ldr	r3, [pc, #380]	; (8023e64 <udp_sendto_if_src+0x1ac>)
 8023ce8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8023cec:	4960      	ldr	r1, [pc, #384]	; (8023e70 <udp_sendto_if_src+0x1b8>)
 8023cee:	485f      	ldr	r0, [pc, #380]	; (8023e6c <udp_sendto_if_src+0x1b4>)
 8023cf0:	f002 fea8 	bl	8026a44 <iprintf>
 8023cf4:	f06f 030f 	mvn.w	r3, #15
 8023cf8:	e0af      	b.n	8023e5a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023cfa:	687b      	ldr	r3, [r7, #4]
 8023cfc:	2b00      	cmp	r3, #0
 8023cfe:	d109      	bne.n	8023d14 <udp_sendto_if_src+0x5c>
 8023d00:	4b58      	ldr	r3, [pc, #352]	; (8023e64 <udp_sendto_if_src+0x1ac>)
 8023d02:	f240 22d3 	movw	r2, #723	; 0x2d3
 8023d06:	495b      	ldr	r1, [pc, #364]	; (8023e74 <udp_sendto_if_src+0x1bc>)
 8023d08:	4858      	ldr	r0, [pc, #352]	; (8023e6c <udp_sendto_if_src+0x1b4>)
 8023d0a:	f002 fe9b 	bl	8026a44 <iprintf>
 8023d0e:	f06f 030f 	mvn.w	r3, #15
 8023d12:	e0a2      	b.n	8023e5a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8023d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023d16:	2b00      	cmp	r3, #0
 8023d18:	d109      	bne.n	8023d2e <udp_sendto_if_src+0x76>
 8023d1a:	4b52      	ldr	r3, [pc, #328]	; (8023e64 <udp_sendto_if_src+0x1ac>)
 8023d1c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8023d20:	4955      	ldr	r1, [pc, #340]	; (8023e78 <udp_sendto_if_src+0x1c0>)
 8023d22:	4852      	ldr	r0, [pc, #328]	; (8023e6c <udp_sendto_if_src+0x1b4>)
 8023d24:	f002 fe8e 	bl	8026a44 <iprintf>
 8023d28:	f06f 030f 	mvn.w	r3, #15
 8023d2c:	e095      	b.n	8023e5a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8023d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d30:	2b00      	cmp	r3, #0
 8023d32:	d109      	bne.n	8023d48 <udp_sendto_if_src+0x90>
 8023d34:	4b4b      	ldr	r3, [pc, #300]	; (8023e64 <udp_sendto_if_src+0x1ac>)
 8023d36:	f240 22d5 	movw	r2, #725	; 0x2d5
 8023d3a:	4950      	ldr	r1, [pc, #320]	; (8023e7c <udp_sendto_if_src+0x1c4>)
 8023d3c:	484b      	ldr	r0, [pc, #300]	; (8023e6c <udp_sendto_if_src+0x1b4>)
 8023d3e:	f002 fe81 	bl	8026a44 <iprintf>
 8023d42:	f06f 030f 	mvn.w	r3, #15
 8023d46:	e088      	b.n	8023e5a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8023d48:	68fb      	ldr	r3, [r7, #12]
 8023d4a:	8a5b      	ldrh	r3, [r3, #18]
 8023d4c:	2b00      	cmp	r3, #0
 8023d4e:	d10f      	bne.n	8023d70 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8023d50:	68f9      	ldr	r1, [r7, #12]
 8023d52:	68fb      	ldr	r3, [r7, #12]
 8023d54:	8a5b      	ldrh	r3, [r3, #18]
 8023d56:	461a      	mov	r2, r3
 8023d58:	68f8      	ldr	r0, [r7, #12]
 8023d5a:	f000 f893 	bl	8023e84 <udp_bind>
 8023d5e:	4603      	mov	r3, r0
 8023d60:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8023d62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023d66:	2b00      	cmp	r3, #0
 8023d68:	d002      	beq.n	8023d70 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8023d6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8023d6e:	e074      	b.n	8023e5a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8023d70:	68bb      	ldr	r3, [r7, #8]
 8023d72:	891b      	ldrh	r3, [r3, #8]
 8023d74:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8023d78:	4293      	cmp	r3, r2
 8023d7a:	d902      	bls.n	8023d82 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8023d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8023d80:	e06b      	b.n	8023e5a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8023d82:	2108      	movs	r1, #8
 8023d84:	68b8      	ldr	r0, [r7, #8]
 8023d86:	f7ff f88f 	bl	8022ea8 <pbuf_add_header>
 8023d8a:	4603      	mov	r3, r0
 8023d8c:	2b00      	cmp	r3, #0
 8023d8e:	d015      	beq.n	8023dbc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8023d90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023d94:	2108      	movs	r1, #8
 8023d96:	2022      	movs	r0, #34	; 0x22
 8023d98:	f7fe fe3a 	bl	8022a10 <pbuf_alloc>
 8023d9c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8023d9e:	69fb      	ldr	r3, [r7, #28]
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	d102      	bne.n	8023daa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8023da4:	f04f 33ff 	mov.w	r3, #4294967295
 8023da8:	e057      	b.n	8023e5a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8023daa:	68bb      	ldr	r3, [r7, #8]
 8023dac:	891b      	ldrh	r3, [r3, #8]
 8023dae:	2b00      	cmp	r3, #0
 8023db0:	d006      	beq.n	8023dc0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8023db2:	68b9      	ldr	r1, [r7, #8]
 8023db4:	69f8      	ldr	r0, [r7, #28]
 8023db6:	f7ff fa25 	bl	8023204 <pbuf_chain>
 8023dba:	e001      	b.n	8023dc0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8023dbc:	68bb      	ldr	r3, [r7, #8]
 8023dbe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8023dc0:	69fb      	ldr	r3, [r7, #28]
 8023dc2:	895b      	ldrh	r3, [r3, #10]
 8023dc4:	2b07      	cmp	r3, #7
 8023dc6:	d806      	bhi.n	8023dd6 <udp_sendto_if_src+0x11e>
 8023dc8:	4b26      	ldr	r3, [pc, #152]	; (8023e64 <udp_sendto_if_src+0x1ac>)
 8023dca:	f240 320d 	movw	r2, #781	; 0x30d
 8023dce:	492c      	ldr	r1, [pc, #176]	; (8023e80 <udp_sendto_if_src+0x1c8>)
 8023dd0:	4826      	ldr	r0, [pc, #152]	; (8023e6c <udp_sendto_if_src+0x1b4>)
 8023dd2:	f002 fe37 	bl	8026a44 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8023dd6:	69fb      	ldr	r3, [r7, #28]
 8023dd8:	685b      	ldr	r3, [r3, #4]
 8023dda:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8023ddc:	68fb      	ldr	r3, [r7, #12]
 8023dde:	8a5b      	ldrh	r3, [r3, #18]
 8023de0:	4618      	mov	r0, r3
 8023de2:	f7fd fd1b 	bl	802181c <lwip_htons>
 8023de6:	4603      	mov	r3, r0
 8023de8:	461a      	mov	r2, r3
 8023dea:	697b      	ldr	r3, [r7, #20]
 8023dec:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8023dee:	887b      	ldrh	r3, [r7, #2]
 8023df0:	4618      	mov	r0, r3
 8023df2:	f7fd fd13 	bl	802181c <lwip_htons>
 8023df6:	4603      	mov	r3, r0
 8023df8:	461a      	mov	r2, r3
 8023dfa:	697b      	ldr	r3, [r7, #20]
 8023dfc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8023dfe:	697b      	ldr	r3, [r7, #20]
 8023e00:	2200      	movs	r2, #0
 8023e02:	719a      	strb	r2, [r3, #6]
 8023e04:	2200      	movs	r2, #0
 8023e06:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8023e08:	69fb      	ldr	r3, [r7, #28]
 8023e0a:	891b      	ldrh	r3, [r3, #8]
 8023e0c:	4618      	mov	r0, r3
 8023e0e:	f7fd fd05 	bl	802181c <lwip_htons>
 8023e12:	4603      	mov	r3, r0
 8023e14:	461a      	mov	r2, r3
 8023e16:	697b      	ldr	r3, [r7, #20]
 8023e18:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8023e1a:	2311      	movs	r3, #17
 8023e1c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8023e1e:	68fb      	ldr	r3, [r7, #12]
 8023e20:	7adb      	ldrb	r3, [r3, #11]
 8023e22:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8023e24:	68fb      	ldr	r3, [r7, #12]
 8023e26:	7a9b      	ldrb	r3, [r3, #10]
 8023e28:	7cb9      	ldrb	r1, [r7, #18]
 8023e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023e2c:	9202      	str	r2, [sp, #8]
 8023e2e:	7cfa      	ldrb	r2, [r7, #19]
 8023e30:	9201      	str	r2, [sp, #4]
 8023e32:	9300      	str	r3, [sp, #0]
 8023e34:	460b      	mov	r3, r1
 8023e36:	687a      	ldr	r2, [r7, #4]
 8023e38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023e3a:	69f8      	ldr	r0, [r7, #28]
 8023e3c:	f001 fc0c 	bl	8025658 <ip4_output_if_src>
 8023e40:	4603      	mov	r3, r0
 8023e42:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8023e44:	69fa      	ldr	r2, [r7, #28]
 8023e46:	68bb      	ldr	r3, [r7, #8]
 8023e48:	429a      	cmp	r2, r3
 8023e4a:	d004      	beq.n	8023e56 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8023e4c:	69f8      	ldr	r0, [r7, #28]
 8023e4e:	f7ff f8c1 	bl	8022fd4 <pbuf_free>
    q = NULL;
 8023e52:	2300      	movs	r3, #0
 8023e54:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8023e56:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8023e5a:	4618      	mov	r0, r3
 8023e5c:	3720      	adds	r7, #32
 8023e5e:	46bd      	mov	sp, r7
 8023e60:	bd80      	pop	{r7, pc}
 8023e62:	bf00      	nop
 8023e64:	0802cf08 	.word	0x0802cf08
 8023e68:	0802d0f4 	.word	0x0802d0f4
 8023e6c:	0802cf5c 	.word	0x0802cf5c
 8023e70:	0802d114 	.word	0x0802d114
 8023e74:	0802d134 	.word	0x0802d134
 8023e78:	0802d158 	.word	0x0802d158
 8023e7c:	0802d17c 	.word	0x0802d17c
 8023e80:	0802d1a0 	.word	0x0802d1a0

08023e84 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8023e84:	b580      	push	{r7, lr}
 8023e86:	b086      	sub	sp, #24
 8023e88:	af00      	add	r7, sp, #0
 8023e8a:	60f8      	str	r0, [r7, #12]
 8023e8c:	60b9      	str	r1, [r7, #8]
 8023e8e:	4613      	mov	r3, r2
 8023e90:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8023e92:	68bb      	ldr	r3, [r7, #8]
 8023e94:	2b00      	cmp	r3, #0
 8023e96:	d101      	bne.n	8023e9c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8023e98:	4b39      	ldr	r3, [pc, #228]	; (8023f80 <udp_bind+0xfc>)
 8023e9a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8023e9c:	68fb      	ldr	r3, [r7, #12]
 8023e9e:	2b00      	cmp	r3, #0
 8023ea0:	d109      	bne.n	8023eb6 <udp_bind+0x32>
 8023ea2:	4b38      	ldr	r3, [pc, #224]	; (8023f84 <udp_bind+0x100>)
 8023ea4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8023ea8:	4937      	ldr	r1, [pc, #220]	; (8023f88 <udp_bind+0x104>)
 8023eaa:	4838      	ldr	r0, [pc, #224]	; (8023f8c <udp_bind+0x108>)
 8023eac:	f002 fdca 	bl	8026a44 <iprintf>
 8023eb0:	f06f 030f 	mvn.w	r3, #15
 8023eb4:	e060      	b.n	8023f78 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8023eb6:	2300      	movs	r3, #0
 8023eb8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023eba:	4b35      	ldr	r3, [pc, #212]	; (8023f90 <udp_bind+0x10c>)
 8023ebc:	681b      	ldr	r3, [r3, #0]
 8023ebe:	617b      	str	r3, [r7, #20]
 8023ec0:	e009      	b.n	8023ed6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8023ec2:	68fa      	ldr	r2, [r7, #12]
 8023ec4:	697b      	ldr	r3, [r7, #20]
 8023ec6:	429a      	cmp	r2, r3
 8023ec8:	d102      	bne.n	8023ed0 <udp_bind+0x4c>
      rebind = 1;
 8023eca:	2301      	movs	r3, #1
 8023ecc:	74fb      	strb	r3, [r7, #19]
      break;
 8023ece:	e005      	b.n	8023edc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023ed0:	697b      	ldr	r3, [r7, #20]
 8023ed2:	68db      	ldr	r3, [r3, #12]
 8023ed4:	617b      	str	r3, [r7, #20]
 8023ed6:	697b      	ldr	r3, [r7, #20]
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	d1f2      	bne.n	8023ec2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8023edc:	88fb      	ldrh	r3, [r7, #6]
 8023ede:	2b00      	cmp	r3, #0
 8023ee0:	d109      	bne.n	8023ef6 <udp_bind+0x72>
    port = udp_new_port();
 8023ee2:	f7ff fc69 	bl	80237b8 <udp_new_port>
 8023ee6:	4603      	mov	r3, r0
 8023ee8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8023eea:	88fb      	ldrh	r3, [r7, #6]
 8023eec:	2b00      	cmp	r3, #0
 8023eee:	d12c      	bne.n	8023f4a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8023ef0:	f06f 0307 	mvn.w	r3, #7
 8023ef4:	e040      	b.n	8023f78 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023ef6:	4b26      	ldr	r3, [pc, #152]	; (8023f90 <udp_bind+0x10c>)
 8023ef8:	681b      	ldr	r3, [r3, #0]
 8023efa:	617b      	str	r3, [r7, #20]
 8023efc:	e022      	b.n	8023f44 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8023efe:	68fa      	ldr	r2, [r7, #12]
 8023f00:	697b      	ldr	r3, [r7, #20]
 8023f02:	429a      	cmp	r2, r3
 8023f04:	d01b      	beq.n	8023f3e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8023f06:	697b      	ldr	r3, [r7, #20]
 8023f08:	8a5b      	ldrh	r3, [r3, #18]
 8023f0a:	88fa      	ldrh	r2, [r7, #6]
 8023f0c:	429a      	cmp	r2, r3
 8023f0e:	d116      	bne.n	8023f3e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023f10:	697b      	ldr	r3, [r7, #20]
 8023f12:	681a      	ldr	r2, [r3, #0]
 8023f14:	68bb      	ldr	r3, [r7, #8]
 8023f16:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8023f18:	429a      	cmp	r2, r3
 8023f1a:	d00d      	beq.n	8023f38 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023f1c:	68bb      	ldr	r3, [r7, #8]
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	d00a      	beq.n	8023f38 <udp_bind+0xb4>
 8023f22:	68bb      	ldr	r3, [r7, #8]
 8023f24:	681b      	ldr	r3, [r3, #0]
 8023f26:	2b00      	cmp	r3, #0
 8023f28:	d006      	beq.n	8023f38 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8023f2a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023f2c:	2b00      	cmp	r3, #0
 8023f2e:	d003      	beq.n	8023f38 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8023f30:	697b      	ldr	r3, [r7, #20]
 8023f32:	681b      	ldr	r3, [r3, #0]
 8023f34:	2b00      	cmp	r3, #0
 8023f36:	d102      	bne.n	8023f3e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8023f38:	f06f 0307 	mvn.w	r3, #7
 8023f3c:	e01c      	b.n	8023f78 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023f3e:	697b      	ldr	r3, [r7, #20]
 8023f40:	68db      	ldr	r3, [r3, #12]
 8023f42:	617b      	str	r3, [r7, #20]
 8023f44:	697b      	ldr	r3, [r7, #20]
 8023f46:	2b00      	cmp	r3, #0
 8023f48:	d1d9      	bne.n	8023efe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8023f4a:	68bb      	ldr	r3, [r7, #8]
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	d002      	beq.n	8023f56 <udp_bind+0xd2>
 8023f50:	68bb      	ldr	r3, [r7, #8]
 8023f52:	681b      	ldr	r3, [r3, #0]
 8023f54:	e000      	b.n	8023f58 <udp_bind+0xd4>
 8023f56:	2300      	movs	r3, #0
 8023f58:	68fa      	ldr	r2, [r7, #12]
 8023f5a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8023f5c:	68fb      	ldr	r3, [r7, #12]
 8023f5e:	88fa      	ldrh	r2, [r7, #6]
 8023f60:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8023f62:	7cfb      	ldrb	r3, [r7, #19]
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	d106      	bne.n	8023f76 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8023f68:	4b09      	ldr	r3, [pc, #36]	; (8023f90 <udp_bind+0x10c>)
 8023f6a:	681a      	ldr	r2, [r3, #0]
 8023f6c:	68fb      	ldr	r3, [r7, #12]
 8023f6e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8023f70:	4a07      	ldr	r2, [pc, #28]	; (8023f90 <udp_bind+0x10c>)
 8023f72:	68fb      	ldr	r3, [r7, #12]
 8023f74:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8023f76:	2300      	movs	r3, #0
}
 8023f78:	4618      	mov	r0, r3
 8023f7a:	3718      	adds	r7, #24
 8023f7c:	46bd      	mov	sp, r7
 8023f7e:	bd80      	pop	{r7, pc}
 8023f80:	0802dde8 	.word	0x0802dde8
 8023f84:	0802cf08 	.word	0x0802cf08
 8023f88:	0802d1d0 	.word	0x0802d1d0
 8023f8c:	0802cf5c 	.word	0x0802cf5c
 8023f90:	20015e38 	.word	0x20015e38

08023f94 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8023f94:	b580      	push	{r7, lr}
 8023f96:	b084      	sub	sp, #16
 8023f98:	af00      	add	r7, sp, #0
 8023f9a:	60f8      	str	r0, [r7, #12]
 8023f9c:	60b9      	str	r1, [r7, #8]
 8023f9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8023fa0:	68fb      	ldr	r3, [r7, #12]
 8023fa2:	2b00      	cmp	r3, #0
 8023fa4:	d107      	bne.n	8023fb6 <udp_recv+0x22>
 8023fa6:	4b08      	ldr	r3, [pc, #32]	; (8023fc8 <udp_recv+0x34>)
 8023fa8:	f240 428a 	movw	r2, #1162	; 0x48a
 8023fac:	4907      	ldr	r1, [pc, #28]	; (8023fcc <udp_recv+0x38>)
 8023fae:	4808      	ldr	r0, [pc, #32]	; (8023fd0 <udp_recv+0x3c>)
 8023fb0:	f002 fd48 	bl	8026a44 <iprintf>
 8023fb4:	e005      	b.n	8023fc2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8023fb6:	68fb      	ldr	r3, [r7, #12]
 8023fb8:	68ba      	ldr	r2, [r7, #8]
 8023fba:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8023fbc:	68fb      	ldr	r3, [r7, #12]
 8023fbe:	687a      	ldr	r2, [r7, #4]
 8023fc0:	61da      	str	r2, [r3, #28]
}
 8023fc2:	3710      	adds	r7, #16
 8023fc4:	46bd      	mov	sp, r7
 8023fc6:	bd80      	pop	{r7, pc}
 8023fc8:	0802cf08 	.word	0x0802cf08
 8023fcc:	0802d23c 	.word	0x0802d23c
 8023fd0:	0802cf5c 	.word	0x0802cf5c

08023fd4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8023fd4:	b580      	push	{r7, lr}
 8023fd6:	b084      	sub	sp, #16
 8023fd8:	af00      	add	r7, sp, #0
 8023fda:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8023fdc:	687b      	ldr	r3, [r7, #4]
 8023fde:	2b00      	cmp	r3, #0
 8023fe0:	d107      	bne.n	8023ff2 <udp_remove+0x1e>
 8023fe2:	4b19      	ldr	r3, [pc, #100]	; (8024048 <udp_remove+0x74>)
 8023fe4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8023fe8:	4918      	ldr	r1, [pc, #96]	; (802404c <udp_remove+0x78>)
 8023fea:	4819      	ldr	r0, [pc, #100]	; (8024050 <udp_remove+0x7c>)
 8023fec:	f002 fd2a 	bl	8026a44 <iprintf>
 8023ff0:	e026      	b.n	8024040 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8023ff2:	4b18      	ldr	r3, [pc, #96]	; (8024054 <udp_remove+0x80>)
 8023ff4:	681b      	ldr	r3, [r3, #0]
 8023ff6:	687a      	ldr	r2, [r7, #4]
 8023ff8:	429a      	cmp	r2, r3
 8023ffa:	d105      	bne.n	8024008 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8023ffc:	4b15      	ldr	r3, [pc, #84]	; (8024054 <udp_remove+0x80>)
 8023ffe:	681b      	ldr	r3, [r3, #0]
 8024000:	68db      	ldr	r3, [r3, #12]
 8024002:	4a14      	ldr	r2, [pc, #80]	; (8024054 <udp_remove+0x80>)
 8024004:	6013      	str	r3, [r2, #0]
 8024006:	e017      	b.n	8024038 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8024008:	4b12      	ldr	r3, [pc, #72]	; (8024054 <udp_remove+0x80>)
 802400a:	681b      	ldr	r3, [r3, #0]
 802400c:	60fb      	str	r3, [r7, #12]
 802400e:	e010      	b.n	8024032 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8024010:	68fb      	ldr	r3, [r7, #12]
 8024012:	68db      	ldr	r3, [r3, #12]
 8024014:	2b00      	cmp	r3, #0
 8024016:	d009      	beq.n	802402c <udp_remove+0x58>
 8024018:	68fb      	ldr	r3, [r7, #12]
 802401a:	68db      	ldr	r3, [r3, #12]
 802401c:	687a      	ldr	r2, [r7, #4]
 802401e:	429a      	cmp	r2, r3
 8024020:	d104      	bne.n	802402c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8024022:	687b      	ldr	r3, [r7, #4]
 8024024:	68da      	ldr	r2, [r3, #12]
 8024026:	68fb      	ldr	r3, [r7, #12]
 8024028:	60da      	str	r2, [r3, #12]
        break;
 802402a:	e005      	b.n	8024038 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 802402c:	68fb      	ldr	r3, [r7, #12]
 802402e:	68db      	ldr	r3, [r3, #12]
 8024030:	60fb      	str	r3, [r7, #12]
 8024032:	68fb      	ldr	r3, [r7, #12]
 8024034:	2b00      	cmp	r3, #0
 8024036:	d1eb      	bne.n	8024010 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8024038:	6879      	ldr	r1, [r7, #4]
 802403a:	2000      	movs	r0, #0
 802403c:	f7fe f8ba 	bl	80221b4 <memp_free>
}
 8024040:	3710      	adds	r7, #16
 8024042:	46bd      	mov	sp, r7
 8024044:	bd80      	pop	{r7, pc}
 8024046:	bf00      	nop
 8024048:	0802cf08 	.word	0x0802cf08
 802404c:	0802d254 	.word	0x0802d254
 8024050:	0802cf5c 	.word	0x0802cf5c
 8024054:	20015e38 	.word	0x20015e38

08024058 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8024058:	b580      	push	{r7, lr}
 802405a:	b082      	sub	sp, #8
 802405c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802405e:	2000      	movs	r0, #0
 8024060:	f7fe f838 	bl	80220d4 <memp_malloc>
 8024064:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8024066:	687b      	ldr	r3, [r7, #4]
 8024068:	2b00      	cmp	r3, #0
 802406a:	d007      	beq.n	802407c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 802406c:	2220      	movs	r2, #32
 802406e:	2100      	movs	r1, #0
 8024070:	6878      	ldr	r0, [r7, #4]
 8024072:	f002 fbff 	bl	8026874 <memset>
    pcb->ttl = UDP_TTL;
 8024076:	687b      	ldr	r3, [r7, #4]
 8024078:	22ff      	movs	r2, #255	; 0xff
 802407a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 802407c:	687b      	ldr	r3, [r7, #4]
}
 802407e:	4618      	mov	r0, r3
 8024080:	3708      	adds	r7, #8
 8024082:	46bd      	mov	sp, r7
 8024084:	bd80      	pop	{r7, pc}
	...

08024088 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8024088:	b480      	push	{r7}
 802408a:	b085      	sub	sp, #20
 802408c:	af00      	add	r7, sp, #0
 802408e:	6078      	str	r0, [r7, #4]
 8024090:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8024092:	687b      	ldr	r3, [r7, #4]
 8024094:	2b00      	cmp	r3, #0
 8024096:	d01e      	beq.n	80240d6 <udp_netif_ip_addr_changed+0x4e>
 8024098:	687b      	ldr	r3, [r7, #4]
 802409a:	681b      	ldr	r3, [r3, #0]
 802409c:	2b00      	cmp	r3, #0
 802409e:	d01a      	beq.n	80240d6 <udp_netif_ip_addr_changed+0x4e>
 80240a0:	683b      	ldr	r3, [r7, #0]
 80240a2:	2b00      	cmp	r3, #0
 80240a4:	d017      	beq.n	80240d6 <udp_netif_ip_addr_changed+0x4e>
 80240a6:	683b      	ldr	r3, [r7, #0]
 80240a8:	681b      	ldr	r3, [r3, #0]
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	d013      	beq.n	80240d6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80240ae:	4b0d      	ldr	r3, [pc, #52]	; (80240e4 <udp_netif_ip_addr_changed+0x5c>)
 80240b0:	681b      	ldr	r3, [r3, #0]
 80240b2:	60fb      	str	r3, [r7, #12]
 80240b4:	e00c      	b.n	80240d0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80240b6:	68fb      	ldr	r3, [r7, #12]
 80240b8:	681a      	ldr	r2, [r3, #0]
 80240ba:	687b      	ldr	r3, [r7, #4]
 80240bc:	681b      	ldr	r3, [r3, #0]
 80240be:	429a      	cmp	r2, r3
 80240c0:	d103      	bne.n	80240ca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80240c2:	683b      	ldr	r3, [r7, #0]
 80240c4:	681a      	ldr	r2, [r3, #0]
 80240c6:	68fb      	ldr	r3, [r7, #12]
 80240c8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80240ca:	68fb      	ldr	r3, [r7, #12]
 80240cc:	68db      	ldr	r3, [r3, #12]
 80240ce:	60fb      	str	r3, [r7, #12]
 80240d0:	68fb      	ldr	r3, [r7, #12]
 80240d2:	2b00      	cmp	r3, #0
 80240d4:	d1ef      	bne.n	80240b6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80240d6:	bf00      	nop
 80240d8:	3714      	adds	r7, #20
 80240da:	46bd      	mov	sp, r7
 80240dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240e0:	4770      	bx	lr
 80240e2:	bf00      	nop
 80240e4:	20015e38 	.word	0x20015e38

080240e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80240e8:	b580      	push	{r7, lr}
 80240ea:	b082      	sub	sp, #8
 80240ec:	af00      	add	r7, sp, #0
 80240ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80240f0:	4915      	ldr	r1, [pc, #84]	; (8024148 <etharp_free_entry+0x60>)
 80240f2:	687a      	ldr	r2, [r7, #4]
 80240f4:	4613      	mov	r3, r2
 80240f6:	005b      	lsls	r3, r3, #1
 80240f8:	4413      	add	r3, r2
 80240fa:	00db      	lsls	r3, r3, #3
 80240fc:	440b      	add	r3, r1
 80240fe:	681b      	ldr	r3, [r3, #0]
 8024100:	2b00      	cmp	r3, #0
 8024102:	d013      	beq.n	802412c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8024104:	4910      	ldr	r1, [pc, #64]	; (8024148 <etharp_free_entry+0x60>)
 8024106:	687a      	ldr	r2, [r7, #4]
 8024108:	4613      	mov	r3, r2
 802410a:	005b      	lsls	r3, r3, #1
 802410c:	4413      	add	r3, r2
 802410e:	00db      	lsls	r3, r3, #3
 8024110:	440b      	add	r3, r1
 8024112:	681b      	ldr	r3, [r3, #0]
 8024114:	4618      	mov	r0, r3
 8024116:	f7fe ff5d 	bl	8022fd4 <pbuf_free>
    arp_table[i].q = NULL;
 802411a:	490b      	ldr	r1, [pc, #44]	; (8024148 <etharp_free_entry+0x60>)
 802411c:	687a      	ldr	r2, [r7, #4]
 802411e:	4613      	mov	r3, r2
 8024120:	005b      	lsls	r3, r3, #1
 8024122:	4413      	add	r3, r2
 8024124:	00db      	lsls	r3, r3, #3
 8024126:	440b      	add	r3, r1
 8024128:	2200      	movs	r2, #0
 802412a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 802412c:	4906      	ldr	r1, [pc, #24]	; (8024148 <etharp_free_entry+0x60>)
 802412e:	687a      	ldr	r2, [r7, #4]
 8024130:	4613      	mov	r3, r2
 8024132:	005b      	lsls	r3, r3, #1
 8024134:	4413      	add	r3, r2
 8024136:	00db      	lsls	r3, r3, #3
 8024138:	440b      	add	r3, r1
 802413a:	3314      	adds	r3, #20
 802413c:	2200      	movs	r2, #0
 802413e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8024140:	bf00      	nop
 8024142:	3708      	adds	r7, #8
 8024144:	46bd      	mov	sp, r7
 8024146:	bd80      	pop	{r7, pc}
 8024148:	20015e3c 	.word	0x20015e3c

0802414c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 802414c:	b580      	push	{r7, lr}
 802414e:	b082      	sub	sp, #8
 8024150:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024152:	2300      	movs	r3, #0
 8024154:	607b      	str	r3, [r7, #4]
 8024156:	e096      	b.n	8024286 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8024158:	494f      	ldr	r1, [pc, #316]	; (8024298 <etharp_tmr+0x14c>)
 802415a:	687a      	ldr	r2, [r7, #4]
 802415c:	4613      	mov	r3, r2
 802415e:	005b      	lsls	r3, r3, #1
 8024160:	4413      	add	r3, r2
 8024162:	00db      	lsls	r3, r3, #3
 8024164:	440b      	add	r3, r1
 8024166:	3314      	adds	r3, #20
 8024168:	781b      	ldrb	r3, [r3, #0]
 802416a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 802416c:	78fb      	ldrb	r3, [r7, #3]
 802416e:	2b00      	cmp	r3, #0
 8024170:	f000 8086 	beq.w	8024280 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8024174:	4948      	ldr	r1, [pc, #288]	; (8024298 <etharp_tmr+0x14c>)
 8024176:	687a      	ldr	r2, [r7, #4]
 8024178:	4613      	mov	r3, r2
 802417a:	005b      	lsls	r3, r3, #1
 802417c:	4413      	add	r3, r2
 802417e:	00db      	lsls	r3, r3, #3
 8024180:	440b      	add	r3, r1
 8024182:	3312      	adds	r3, #18
 8024184:	881b      	ldrh	r3, [r3, #0]
 8024186:	3301      	adds	r3, #1
 8024188:	b298      	uxth	r0, r3
 802418a:	4943      	ldr	r1, [pc, #268]	; (8024298 <etharp_tmr+0x14c>)
 802418c:	687a      	ldr	r2, [r7, #4]
 802418e:	4613      	mov	r3, r2
 8024190:	005b      	lsls	r3, r3, #1
 8024192:	4413      	add	r3, r2
 8024194:	00db      	lsls	r3, r3, #3
 8024196:	440b      	add	r3, r1
 8024198:	3312      	adds	r3, #18
 802419a:	4602      	mov	r2, r0
 802419c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802419e:	493e      	ldr	r1, [pc, #248]	; (8024298 <etharp_tmr+0x14c>)
 80241a0:	687a      	ldr	r2, [r7, #4]
 80241a2:	4613      	mov	r3, r2
 80241a4:	005b      	lsls	r3, r3, #1
 80241a6:	4413      	add	r3, r2
 80241a8:	00db      	lsls	r3, r3, #3
 80241aa:	440b      	add	r3, r1
 80241ac:	3312      	adds	r3, #18
 80241ae:	881b      	ldrh	r3, [r3, #0]
 80241b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80241b4:	d215      	bcs.n	80241e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80241b6:	4938      	ldr	r1, [pc, #224]	; (8024298 <etharp_tmr+0x14c>)
 80241b8:	687a      	ldr	r2, [r7, #4]
 80241ba:	4613      	mov	r3, r2
 80241bc:	005b      	lsls	r3, r3, #1
 80241be:	4413      	add	r3, r2
 80241c0:	00db      	lsls	r3, r3, #3
 80241c2:	440b      	add	r3, r1
 80241c4:	3314      	adds	r3, #20
 80241c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80241c8:	2b01      	cmp	r3, #1
 80241ca:	d10e      	bne.n	80241ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80241cc:	4932      	ldr	r1, [pc, #200]	; (8024298 <etharp_tmr+0x14c>)
 80241ce:	687a      	ldr	r2, [r7, #4]
 80241d0:	4613      	mov	r3, r2
 80241d2:	005b      	lsls	r3, r3, #1
 80241d4:	4413      	add	r3, r2
 80241d6:	00db      	lsls	r3, r3, #3
 80241d8:	440b      	add	r3, r1
 80241da:	3312      	adds	r3, #18
 80241dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80241de:	2b04      	cmp	r3, #4
 80241e0:	d903      	bls.n	80241ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80241e2:	6878      	ldr	r0, [r7, #4]
 80241e4:	f7ff ff80 	bl	80240e8 <etharp_free_entry>
 80241e8:	e04a      	b.n	8024280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80241ea:	492b      	ldr	r1, [pc, #172]	; (8024298 <etharp_tmr+0x14c>)
 80241ec:	687a      	ldr	r2, [r7, #4]
 80241ee:	4613      	mov	r3, r2
 80241f0:	005b      	lsls	r3, r3, #1
 80241f2:	4413      	add	r3, r2
 80241f4:	00db      	lsls	r3, r3, #3
 80241f6:	440b      	add	r3, r1
 80241f8:	3314      	adds	r3, #20
 80241fa:	781b      	ldrb	r3, [r3, #0]
 80241fc:	2b03      	cmp	r3, #3
 80241fe:	d10a      	bne.n	8024216 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8024200:	4925      	ldr	r1, [pc, #148]	; (8024298 <etharp_tmr+0x14c>)
 8024202:	687a      	ldr	r2, [r7, #4]
 8024204:	4613      	mov	r3, r2
 8024206:	005b      	lsls	r3, r3, #1
 8024208:	4413      	add	r3, r2
 802420a:	00db      	lsls	r3, r3, #3
 802420c:	440b      	add	r3, r1
 802420e:	3314      	adds	r3, #20
 8024210:	2204      	movs	r2, #4
 8024212:	701a      	strb	r2, [r3, #0]
 8024214:	e034      	b.n	8024280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8024216:	4920      	ldr	r1, [pc, #128]	; (8024298 <etharp_tmr+0x14c>)
 8024218:	687a      	ldr	r2, [r7, #4]
 802421a:	4613      	mov	r3, r2
 802421c:	005b      	lsls	r3, r3, #1
 802421e:	4413      	add	r3, r2
 8024220:	00db      	lsls	r3, r3, #3
 8024222:	440b      	add	r3, r1
 8024224:	3314      	adds	r3, #20
 8024226:	781b      	ldrb	r3, [r3, #0]
 8024228:	2b04      	cmp	r3, #4
 802422a:	d10a      	bne.n	8024242 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 802422c:	491a      	ldr	r1, [pc, #104]	; (8024298 <etharp_tmr+0x14c>)
 802422e:	687a      	ldr	r2, [r7, #4]
 8024230:	4613      	mov	r3, r2
 8024232:	005b      	lsls	r3, r3, #1
 8024234:	4413      	add	r3, r2
 8024236:	00db      	lsls	r3, r3, #3
 8024238:	440b      	add	r3, r1
 802423a:	3314      	adds	r3, #20
 802423c:	2202      	movs	r2, #2
 802423e:	701a      	strb	r2, [r3, #0]
 8024240:	e01e      	b.n	8024280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8024242:	4915      	ldr	r1, [pc, #84]	; (8024298 <etharp_tmr+0x14c>)
 8024244:	687a      	ldr	r2, [r7, #4]
 8024246:	4613      	mov	r3, r2
 8024248:	005b      	lsls	r3, r3, #1
 802424a:	4413      	add	r3, r2
 802424c:	00db      	lsls	r3, r3, #3
 802424e:	440b      	add	r3, r1
 8024250:	3314      	adds	r3, #20
 8024252:	781b      	ldrb	r3, [r3, #0]
 8024254:	2b01      	cmp	r3, #1
 8024256:	d113      	bne.n	8024280 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8024258:	490f      	ldr	r1, [pc, #60]	; (8024298 <etharp_tmr+0x14c>)
 802425a:	687a      	ldr	r2, [r7, #4]
 802425c:	4613      	mov	r3, r2
 802425e:	005b      	lsls	r3, r3, #1
 8024260:	4413      	add	r3, r2
 8024262:	00db      	lsls	r3, r3, #3
 8024264:	440b      	add	r3, r1
 8024266:	3308      	adds	r3, #8
 8024268:	6818      	ldr	r0, [r3, #0]
 802426a:	687a      	ldr	r2, [r7, #4]
 802426c:	4613      	mov	r3, r2
 802426e:	005b      	lsls	r3, r3, #1
 8024270:	4413      	add	r3, r2
 8024272:	00db      	lsls	r3, r3, #3
 8024274:	4a08      	ldr	r2, [pc, #32]	; (8024298 <etharp_tmr+0x14c>)
 8024276:	4413      	add	r3, r2
 8024278:	3304      	adds	r3, #4
 802427a:	4619      	mov	r1, r3
 802427c:	f000 fe6e 	bl	8024f5c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	3301      	adds	r3, #1
 8024284:	607b      	str	r3, [r7, #4]
 8024286:	687b      	ldr	r3, [r7, #4]
 8024288:	2b31      	cmp	r3, #49	; 0x31
 802428a:	f77f af65 	ble.w	8024158 <etharp_tmr+0xc>
      }
    }
  }
}
 802428e:	bf00      	nop
 8024290:	bf00      	nop
 8024292:	3708      	adds	r7, #8
 8024294:	46bd      	mov	sp, r7
 8024296:	bd80      	pop	{r7, pc}
 8024298:	20015e3c 	.word	0x20015e3c

0802429c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 802429c:	b580      	push	{r7, lr}
 802429e:	b08a      	sub	sp, #40	; 0x28
 80242a0:	af00      	add	r7, sp, #0
 80242a2:	60f8      	str	r0, [r7, #12]
 80242a4:	460b      	mov	r3, r1
 80242a6:	607a      	str	r2, [r7, #4]
 80242a8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80242aa:	2332      	movs	r3, #50	; 0x32
 80242ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80242ae:	2332      	movs	r3, #50	; 0x32
 80242b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80242b2:	2332      	movs	r3, #50	; 0x32
 80242b4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80242b6:	2300      	movs	r3, #0
 80242b8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80242ba:	2332      	movs	r3, #50	; 0x32
 80242bc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80242be:	2300      	movs	r3, #0
 80242c0:	83bb      	strh	r3, [r7, #28]
 80242c2:	2300      	movs	r3, #0
 80242c4:	837b      	strh	r3, [r7, #26]
 80242c6:	2300      	movs	r3, #0
 80242c8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80242ca:	2300      	movs	r3, #0
 80242cc:	843b      	strh	r3, [r7, #32]
 80242ce:	e0ae      	b.n	802442e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80242d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80242d4:	49a6      	ldr	r1, [pc, #664]	; (8024570 <etharp_find_entry+0x2d4>)
 80242d6:	4613      	mov	r3, r2
 80242d8:	005b      	lsls	r3, r3, #1
 80242da:	4413      	add	r3, r2
 80242dc:	00db      	lsls	r3, r3, #3
 80242de:	440b      	add	r3, r1
 80242e0:	3314      	adds	r3, #20
 80242e2:	781b      	ldrb	r3, [r3, #0]
 80242e4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80242e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80242ea:	2b32      	cmp	r3, #50	; 0x32
 80242ec:	d105      	bne.n	80242fa <etharp_find_entry+0x5e>
 80242ee:	7dfb      	ldrb	r3, [r7, #23]
 80242f0:	2b00      	cmp	r3, #0
 80242f2:	d102      	bne.n	80242fa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80242f4:	8c3b      	ldrh	r3, [r7, #32]
 80242f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80242f8:	e095      	b.n	8024426 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80242fa:	7dfb      	ldrb	r3, [r7, #23]
 80242fc:	2b00      	cmp	r3, #0
 80242fe:	f000 8092 	beq.w	8024426 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8024302:	7dfb      	ldrb	r3, [r7, #23]
 8024304:	2b01      	cmp	r3, #1
 8024306:	d009      	beq.n	802431c <etharp_find_entry+0x80>
 8024308:	7dfb      	ldrb	r3, [r7, #23]
 802430a:	2b01      	cmp	r3, #1
 802430c:	d806      	bhi.n	802431c <etharp_find_entry+0x80>
 802430e:	4b99      	ldr	r3, [pc, #612]	; (8024574 <etharp_find_entry+0x2d8>)
 8024310:	f240 1223 	movw	r2, #291	; 0x123
 8024314:	4998      	ldr	r1, [pc, #608]	; (8024578 <etharp_find_entry+0x2dc>)
 8024316:	4899      	ldr	r0, [pc, #612]	; (802457c <etharp_find_entry+0x2e0>)
 8024318:	f002 fb94 	bl	8026a44 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 802431c:	68fb      	ldr	r3, [r7, #12]
 802431e:	2b00      	cmp	r3, #0
 8024320:	d020      	beq.n	8024364 <etharp_find_entry+0xc8>
 8024322:	68fb      	ldr	r3, [r7, #12]
 8024324:	6819      	ldr	r1, [r3, #0]
 8024326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802432a:	4891      	ldr	r0, [pc, #580]	; (8024570 <etharp_find_entry+0x2d4>)
 802432c:	4613      	mov	r3, r2
 802432e:	005b      	lsls	r3, r3, #1
 8024330:	4413      	add	r3, r2
 8024332:	00db      	lsls	r3, r3, #3
 8024334:	4403      	add	r3, r0
 8024336:	3304      	adds	r3, #4
 8024338:	681b      	ldr	r3, [r3, #0]
 802433a:	4299      	cmp	r1, r3
 802433c:	d112      	bne.n	8024364 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 802433e:	687b      	ldr	r3, [r7, #4]
 8024340:	2b00      	cmp	r3, #0
 8024342:	d00c      	beq.n	802435e <etharp_find_entry+0xc2>
 8024344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024348:	4989      	ldr	r1, [pc, #548]	; (8024570 <etharp_find_entry+0x2d4>)
 802434a:	4613      	mov	r3, r2
 802434c:	005b      	lsls	r3, r3, #1
 802434e:	4413      	add	r3, r2
 8024350:	00db      	lsls	r3, r3, #3
 8024352:	440b      	add	r3, r1
 8024354:	3308      	adds	r3, #8
 8024356:	681b      	ldr	r3, [r3, #0]
 8024358:	687a      	ldr	r2, [r7, #4]
 802435a:	429a      	cmp	r2, r3
 802435c:	d102      	bne.n	8024364 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 802435e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8024362:	e100      	b.n	8024566 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8024364:	7dfb      	ldrb	r3, [r7, #23]
 8024366:	2b01      	cmp	r3, #1
 8024368:	d140      	bne.n	80243ec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 802436a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802436e:	4980      	ldr	r1, [pc, #512]	; (8024570 <etharp_find_entry+0x2d4>)
 8024370:	4613      	mov	r3, r2
 8024372:	005b      	lsls	r3, r3, #1
 8024374:	4413      	add	r3, r2
 8024376:	00db      	lsls	r3, r3, #3
 8024378:	440b      	add	r3, r1
 802437a:	681b      	ldr	r3, [r3, #0]
 802437c:	2b00      	cmp	r3, #0
 802437e:	d01a      	beq.n	80243b6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8024380:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024384:	497a      	ldr	r1, [pc, #488]	; (8024570 <etharp_find_entry+0x2d4>)
 8024386:	4613      	mov	r3, r2
 8024388:	005b      	lsls	r3, r3, #1
 802438a:	4413      	add	r3, r2
 802438c:	00db      	lsls	r3, r3, #3
 802438e:	440b      	add	r3, r1
 8024390:	3312      	adds	r3, #18
 8024392:	881b      	ldrh	r3, [r3, #0]
 8024394:	8bba      	ldrh	r2, [r7, #28]
 8024396:	429a      	cmp	r2, r3
 8024398:	d845      	bhi.n	8024426 <etharp_find_entry+0x18a>
            old_queue = i;
 802439a:	8c3b      	ldrh	r3, [r7, #32]
 802439c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 802439e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80243a2:	4973      	ldr	r1, [pc, #460]	; (8024570 <etharp_find_entry+0x2d4>)
 80243a4:	4613      	mov	r3, r2
 80243a6:	005b      	lsls	r3, r3, #1
 80243a8:	4413      	add	r3, r2
 80243aa:	00db      	lsls	r3, r3, #3
 80243ac:	440b      	add	r3, r1
 80243ae:	3312      	adds	r3, #18
 80243b0:	881b      	ldrh	r3, [r3, #0]
 80243b2:	83bb      	strh	r3, [r7, #28]
 80243b4:	e037      	b.n	8024426 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80243b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80243ba:	496d      	ldr	r1, [pc, #436]	; (8024570 <etharp_find_entry+0x2d4>)
 80243bc:	4613      	mov	r3, r2
 80243be:	005b      	lsls	r3, r3, #1
 80243c0:	4413      	add	r3, r2
 80243c2:	00db      	lsls	r3, r3, #3
 80243c4:	440b      	add	r3, r1
 80243c6:	3312      	adds	r3, #18
 80243c8:	881b      	ldrh	r3, [r3, #0]
 80243ca:	8b7a      	ldrh	r2, [r7, #26]
 80243cc:	429a      	cmp	r2, r3
 80243ce:	d82a      	bhi.n	8024426 <etharp_find_entry+0x18a>
            old_pending = i;
 80243d0:	8c3b      	ldrh	r3, [r7, #32]
 80243d2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80243d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80243d8:	4965      	ldr	r1, [pc, #404]	; (8024570 <etharp_find_entry+0x2d4>)
 80243da:	4613      	mov	r3, r2
 80243dc:	005b      	lsls	r3, r3, #1
 80243de:	4413      	add	r3, r2
 80243e0:	00db      	lsls	r3, r3, #3
 80243e2:	440b      	add	r3, r1
 80243e4:	3312      	adds	r3, #18
 80243e6:	881b      	ldrh	r3, [r3, #0]
 80243e8:	837b      	strh	r3, [r7, #26]
 80243ea:	e01c      	b.n	8024426 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80243ec:	7dfb      	ldrb	r3, [r7, #23]
 80243ee:	2b01      	cmp	r3, #1
 80243f0:	d919      	bls.n	8024426 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80243f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80243f6:	495e      	ldr	r1, [pc, #376]	; (8024570 <etharp_find_entry+0x2d4>)
 80243f8:	4613      	mov	r3, r2
 80243fa:	005b      	lsls	r3, r3, #1
 80243fc:	4413      	add	r3, r2
 80243fe:	00db      	lsls	r3, r3, #3
 8024400:	440b      	add	r3, r1
 8024402:	3312      	adds	r3, #18
 8024404:	881b      	ldrh	r3, [r3, #0]
 8024406:	8b3a      	ldrh	r2, [r7, #24]
 8024408:	429a      	cmp	r2, r3
 802440a:	d80c      	bhi.n	8024426 <etharp_find_entry+0x18a>
            old_stable = i;
 802440c:	8c3b      	ldrh	r3, [r7, #32]
 802440e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8024410:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024414:	4956      	ldr	r1, [pc, #344]	; (8024570 <etharp_find_entry+0x2d4>)
 8024416:	4613      	mov	r3, r2
 8024418:	005b      	lsls	r3, r3, #1
 802441a:	4413      	add	r3, r2
 802441c:	00db      	lsls	r3, r3, #3
 802441e:	440b      	add	r3, r1
 8024420:	3312      	adds	r3, #18
 8024422:	881b      	ldrh	r3, [r3, #0]
 8024424:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024426:	8c3b      	ldrh	r3, [r7, #32]
 8024428:	3301      	adds	r3, #1
 802442a:	b29b      	uxth	r3, r3
 802442c:	843b      	strh	r3, [r7, #32]
 802442e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8024432:	2b31      	cmp	r3, #49	; 0x31
 8024434:	f77f af4c 	ble.w	80242d0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8024438:	7afb      	ldrb	r3, [r7, #11]
 802443a:	f003 0302 	and.w	r3, r3, #2
 802443e:	2b00      	cmp	r3, #0
 8024440:	d108      	bne.n	8024454 <etharp_find_entry+0x1b8>
 8024442:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8024446:	2b32      	cmp	r3, #50	; 0x32
 8024448:	d107      	bne.n	802445a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 802444a:	7afb      	ldrb	r3, [r7, #11]
 802444c:	f003 0301 	and.w	r3, r3, #1
 8024450:	2b00      	cmp	r3, #0
 8024452:	d102      	bne.n	802445a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8024454:	f04f 33ff 	mov.w	r3, #4294967295
 8024458:	e085      	b.n	8024566 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 802445a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802445e:	2b31      	cmp	r3, #49	; 0x31
 8024460:	dc02      	bgt.n	8024468 <etharp_find_entry+0x1cc>
    i = empty;
 8024462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024464:	843b      	strh	r3, [r7, #32]
 8024466:	e039      	b.n	80244dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8024468:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 802446c:	2b31      	cmp	r3, #49	; 0x31
 802446e:	dc14      	bgt.n	802449a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8024470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8024472:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8024474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024478:	493d      	ldr	r1, [pc, #244]	; (8024570 <etharp_find_entry+0x2d4>)
 802447a:	4613      	mov	r3, r2
 802447c:	005b      	lsls	r3, r3, #1
 802447e:	4413      	add	r3, r2
 8024480:	00db      	lsls	r3, r3, #3
 8024482:	440b      	add	r3, r1
 8024484:	681b      	ldr	r3, [r3, #0]
 8024486:	2b00      	cmp	r3, #0
 8024488:	d018      	beq.n	80244bc <etharp_find_entry+0x220>
 802448a:	4b3a      	ldr	r3, [pc, #232]	; (8024574 <etharp_find_entry+0x2d8>)
 802448c:	f240 126d 	movw	r2, #365	; 0x16d
 8024490:	493b      	ldr	r1, [pc, #236]	; (8024580 <etharp_find_entry+0x2e4>)
 8024492:	483a      	ldr	r0, [pc, #232]	; (802457c <etharp_find_entry+0x2e0>)
 8024494:	f002 fad6 	bl	8026a44 <iprintf>
 8024498:	e010      	b.n	80244bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 802449a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802449e:	2b31      	cmp	r3, #49	; 0x31
 80244a0:	dc02      	bgt.n	80244a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80244a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80244a4:	843b      	strh	r3, [r7, #32]
 80244a6:	e009      	b.n	80244bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80244a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80244ac:	2b31      	cmp	r3, #49	; 0x31
 80244ae:	dc02      	bgt.n	80244b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80244b0:	8bfb      	ldrh	r3, [r7, #30]
 80244b2:	843b      	strh	r3, [r7, #32]
 80244b4:	e002      	b.n	80244bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80244b6:	f04f 33ff 	mov.w	r3, #4294967295
 80244ba:	e054      	b.n	8024566 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80244bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80244c0:	2b31      	cmp	r3, #49	; 0x31
 80244c2:	dd06      	ble.n	80244d2 <etharp_find_entry+0x236>
 80244c4:	4b2b      	ldr	r3, [pc, #172]	; (8024574 <etharp_find_entry+0x2d8>)
 80244c6:	f240 127f 	movw	r2, #383	; 0x17f
 80244ca:	492e      	ldr	r1, [pc, #184]	; (8024584 <etharp_find_entry+0x2e8>)
 80244cc:	482b      	ldr	r0, [pc, #172]	; (802457c <etharp_find_entry+0x2e0>)
 80244ce:	f002 fab9 	bl	8026a44 <iprintf>
    etharp_free_entry(i);
 80244d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80244d6:	4618      	mov	r0, r3
 80244d8:	f7ff fe06 	bl	80240e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80244dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80244e0:	2b31      	cmp	r3, #49	; 0x31
 80244e2:	dd06      	ble.n	80244f2 <etharp_find_entry+0x256>
 80244e4:	4b23      	ldr	r3, [pc, #140]	; (8024574 <etharp_find_entry+0x2d8>)
 80244e6:	f240 1283 	movw	r2, #387	; 0x183
 80244ea:	4926      	ldr	r1, [pc, #152]	; (8024584 <etharp_find_entry+0x2e8>)
 80244ec:	4823      	ldr	r0, [pc, #140]	; (802457c <etharp_find_entry+0x2e0>)
 80244ee:	f002 faa9 	bl	8026a44 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80244f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80244f6:	491e      	ldr	r1, [pc, #120]	; (8024570 <etharp_find_entry+0x2d4>)
 80244f8:	4613      	mov	r3, r2
 80244fa:	005b      	lsls	r3, r3, #1
 80244fc:	4413      	add	r3, r2
 80244fe:	00db      	lsls	r3, r3, #3
 8024500:	440b      	add	r3, r1
 8024502:	3314      	adds	r3, #20
 8024504:	781b      	ldrb	r3, [r3, #0]
 8024506:	2b00      	cmp	r3, #0
 8024508:	d006      	beq.n	8024518 <etharp_find_entry+0x27c>
 802450a:	4b1a      	ldr	r3, [pc, #104]	; (8024574 <etharp_find_entry+0x2d8>)
 802450c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8024510:	491d      	ldr	r1, [pc, #116]	; (8024588 <etharp_find_entry+0x2ec>)
 8024512:	481a      	ldr	r0, [pc, #104]	; (802457c <etharp_find_entry+0x2e0>)
 8024514:	f002 fa96 	bl	8026a44 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8024518:	68fb      	ldr	r3, [r7, #12]
 802451a:	2b00      	cmp	r3, #0
 802451c:	d00b      	beq.n	8024536 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 802451e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024522:	68fb      	ldr	r3, [r7, #12]
 8024524:	6819      	ldr	r1, [r3, #0]
 8024526:	4812      	ldr	r0, [pc, #72]	; (8024570 <etharp_find_entry+0x2d4>)
 8024528:	4613      	mov	r3, r2
 802452a:	005b      	lsls	r3, r3, #1
 802452c:	4413      	add	r3, r2
 802452e:	00db      	lsls	r3, r3, #3
 8024530:	4403      	add	r3, r0
 8024532:	3304      	adds	r3, #4
 8024534:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8024536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802453a:	490d      	ldr	r1, [pc, #52]	; (8024570 <etharp_find_entry+0x2d4>)
 802453c:	4613      	mov	r3, r2
 802453e:	005b      	lsls	r3, r3, #1
 8024540:	4413      	add	r3, r2
 8024542:	00db      	lsls	r3, r3, #3
 8024544:	440b      	add	r3, r1
 8024546:	3312      	adds	r3, #18
 8024548:	2200      	movs	r2, #0
 802454a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 802454c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8024550:	4907      	ldr	r1, [pc, #28]	; (8024570 <etharp_find_entry+0x2d4>)
 8024552:	4613      	mov	r3, r2
 8024554:	005b      	lsls	r3, r3, #1
 8024556:	4413      	add	r3, r2
 8024558:	00db      	lsls	r3, r3, #3
 802455a:	440b      	add	r3, r1
 802455c:	3308      	adds	r3, #8
 802455e:	687a      	ldr	r2, [r7, #4]
 8024560:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8024562:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8024566:	4618      	mov	r0, r3
 8024568:	3728      	adds	r7, #40	; 0x28
 802456a:	46bd      	mov	sp, r7
 802456c:	bd80      	pop	{r7, pc}
 802456e:	bf00      	nop
 8024570:	20015e3c 	.word	0x20015e3c
 8024574:	0802d26c 	.word	0x0802d26c
 8024578:	0802d2a4 	.word	0x0802d2a4
 802457c:	0802d2e4 	.word	0x0802d2e4
 8024580:	0802d30c 	.word	0x0802d30c
 8024584:	0802d324 	.word	0x0802d324
 8024588:	0802d338 	.word	0x0802d338

0802458c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 802458c:	b580      	push	{r7, lr}
 802458e:	b088      	sub	sp, #32
 8024590:	af02      	add	r7, sp, #8
 8024592:	60f8      	str	r0, [r7, #12]
 8024594:	60b9      	str	r1, [r7, #8]
 8024596:	607a      	str	r2, [r7, #4]
 8024598:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802459a:	68fb      	ldr	r3, [r7, #12]
 802459c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80245a0:	2b06      	cmp	r3, #6
 80245a2:	d006      	beq.n	80245b2 <etharp_update_arp_entry+0x26>
 80245a4:	4b48      	ldr	r3, [pc, #288]	; (80246c8 <etharp_update_arp_entry+0x13c>)
 80245a6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80245aa:	4948      	ldr	r1, [pc, #288]	; (80246cc <etharp_update_arp_entry+0x140>)
 80245ac:	4848      	ldr	r0, [pc, #288]	; (80246d0 <etharp_update_arp_entry+0x144>)
 80245ae:	f002 fa49 	bl	8026a44 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80245b2:	68bb      	ldr	r3, [r7, #8]
 80245b4:	2b00      	cmp	r3, #0
 80245b6:	d012      	beq.n	80245de <etharp_update_arp_entry+0x52>
 80245b8:	68bb      	ldr	r3, [r7, #8]
 80245ba:	681b      	ldr	r3, [r3, #0]
 80245bc:	2b00      	cmp	r3, #0
 80245be:	d00e      	beq.n	80245de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80245c0:	68bb      	ldr	r3, [r7, #8]
 80245c2:	681b      	ldr	r3, [r3, #0]
 80245c4:	68f9      	ldr	r1, [r7, #12]
 80245c6:	4618      	mov	r0, r3
 80245c8:	f001 f902 	bl	80257d0 <ip4_addr_isbroadcast_u32>
 80245cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80245ce:	2b00      	cmp	r3, #0
 80245d0:	d105      	bne.n	80245de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80245d2:	68bb      	ldr	r3, [r7, #8]
 80245d4:	681b      	ldr	r3, [r3, #0]
 80245d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80245da:	2be0      	cmp	r3, #224	; 0xe0
 80245dc:	d102      	bne.n	80245e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80245de:	f06f 030f 	mvn.w	r3, #15
 80245e2:	e06c      	b.n	80246be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80245e4:	78fb      	ldrb	r3, [r7, #3]
 80245e6:	68fa      	ldr	r2, [r7, #12]
 80245e8:	4619      	mov	r1, r3
 80245ea:	68b8      	ldr	r0, [r7, #8]
 80245ec:	f7ff fe56 	bl	802429c <etharp_find_entry>
 80245f0:	4603      	mov	r3, r0
 80245f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80245f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	da02      	bge.n	8024602 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80245fc:	8afb      	ldrh	r3, [r7, #22]
 80245fe:	b25b      	sxtb	r3, r3
 8024600:	e05d      	b.n	80246be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8024602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024606:	4933      	ldr	r1, [pc, #204]	; (80246d4 <etharp_update_arp_entry+0x148>)
 8024608:	4613      	mov	r3, r2
 802460a:	005b      	lsls	r3, r3, #1
 802460c:	4413      	add	r3, r2
 802460e:	00db      	lsls	r3, r3, #3
 8024610:	440b      	add	r3, r1
 8024612:	3314      	adds	r3, #20
 8024614:	2202      	movs	r2, #2
 8024616:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8024618:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802461c:	492d      	ldr	r1, [pc, #180]	; (80246d4 <etharp_update_arp_entry+0x148>)
 802461e:	4613      	mov	r3, r2
 8024620:	005b      	lsls	r3, r3, #1
 8024622:	4413      	add	r3, r2
 8024624:	00db      	lsls	r3, r3, #3
 8024626:	440b      	add	r3, r1
 8024628:	3308      	adds	r3, #8
 802462a:	68fa      	ldr	r2, [r7, #12]
 802462c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802462e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024632:	4613      	mov	r3, r2
 8024634:	005b      	lsls	r3, r3, #1
 8024636:	4413      	add	r3, r2
 8024638:	00db      	lsls	r3, r3, #3
 802463a:	3308      	adds	r3, #8
 802463c:	4a25      	ldr	r2, [pc, #148]	; (80246d4 <etharp_update_arp_entry+0x148>)
 802463e:	4413      	add	r3, r2
 8024640:	3304      	adds	r3, #4
 8024642:	2206      	movs	r2, #6
 8024644:	6879      	ldr	r1, [r7, #4]
 8024646:	4618      	mov	r0, r3
 8024648:	f002 f8ec 	bl	8026824 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 802464c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024650:	4920      	ldr	r1, [pc, #128]	; (80246d4 <etharp_update_arp_entry+0x148>)
 8024652:	4613      	mov	r3, r2
 8024654:	005b      	lsls	r3, r3, #1
 8024656:	4413      	add	r3, r2
 8024658:	00db      	lsls	r3, r3, #3
 802465a:	440b      	add	r3, r1
 802465c:	3312      	adds	r3, #18
 802465e:	2200      	movs	r2, #0
 8024660:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8024662:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024666:	491b      	ldr	r1, [pc, #108]	; (80246d4 <etharp_update_arp_entry+0x148>)
 8024668:	4613      	mov	r3, r2
 802466a:	005b      	lsls	r3, r3, #1
 802466c:	4413      	add	r3, r2
 802466e:	00db      	lsls	r3, r3, #3
 8024670:	440b      	add	r3, r1
 8024672:	681b      	ldr	r3, [r3, #0]
 8024674:	2b00      	cmp	r3, #0
 8024676:	d021      	beq.n	80246bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8024678:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802467c:	4915      	ldr	r1, [pc, #84]	; (80246d4 <etharp_update_arp_entry+0x148>)
 802467e:	4613      	mov	r3, r2
 8024680:	005b      	lsls	r3, r3, #1
 8024682:	4413      	add	r3, r2
 8024684:	00db      	lsls	r3, r3, #3
 8024686:	440b      	add	r3, r1
 8024688:	681b      	ldr	r3, [r3, #0]
 802468a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 802468c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024690:	4910      	ldr	r1, [pc, #64]	; (80246d4 <etharp_update_arp_entry+0x148>)
 8024692:	4613      	mov	r3, r2
 8024694:	005b      	lsls	r3, r3, #1
 8024696:	4413      	add	r3, r2
 8024698:	00db      	lsls	r3, r3, #3
 802469a:	440b      	add	r3, r1
 802469c:	2200      	movs	r2, #0
 802469e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80246a0:	68fb      	ldr	r3, [r7, #12]
 80246a2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80246a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80246aa:	9300      	str	r3, [sp, #0]
 80246ac:	687b      	ldr	r3, [r7, #4]
 80246ae:	6939      	ldr	r1, [r7, #16]
 80246b0:	68f8      	ldr	r0, [r7, #12]
 80246b2:	f002 f82b 	bl	802670c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80246b6:	6938      	ldr	r0, [r7, #16]
 80246b8:	f7fe fc8c 	bl	8022fd4 <pbuf_free>
  }
  return ERR_OK;
 80246bc:	2300      	movs	r3, #0
}
 80246be:	4618      	mov	r0, r3
 80246c0:	3718      	adds	r7, #24
 80246c2:	46bd      	mov	sp, r7
 80246c4:	bd80      	pop	{r7, pc}
 80246c6:	bf00      	nop
 80246c8:	0802d26c 	.word	0x0802d26c
 80246cc:	0802d364 	.word	0x0802d364
 80246d0:	0802d2e4 	.word	0x0802d2e4
 80246d4:	20015e3c 	.word	0x20015e3c

080246d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80246d8:	b580      	push	{r7, lr}
 80246da:	b084      	sub	sp, #16
 80246dc:	af00      	add	r7, sp, #0
 80246de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80246e0:	2300      	movs	r3, #0
 80246e2:	60fb      	str	r3, [r7, #12]
 80246e4:	e01e      	b.n	8024724 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80246e6:	4913      	ldr	r1, [pc, #76]	; (8024734 <etharp_cleanup_netif+0x5c>)
 80246e8:	68fa      	ldr	r2, [r7, #12]
 80246ea:	4613      	mov	r3, r2
 80246ec:	005b      	lsls	r3, r3, #1
 80246ee:	4413      	add	r3, r2
 80246f0:	00db      	lsls	r3, r3, #3
 80246f2:	440b      	add	r3, r1
 80246f4:	3314      	adds	r3, #20
 80246f6:	781b      	ldrb	r3, [r3, #0]
 80246f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80246fa:	7afb      	ldrb	r3, [r7, #11]
 80246fc:	2b00      	cmp	r3, #0
 80246fe:	d00e      	beq.n	802471e <etharp_cleanup_netif+0x46>
 8024700:	490c      	ldr	r1, [pc, #48]	; (8024734 <etharp_cleanup_netif+0x5c>)
 8024702:	68fa      	ldr	r2, [r7, #12]
 8024704:	4613      	mov	r3, r2
 8024706:	005b      	lsls	r3, r3, #1
 8024708:	4413      	add	r3, r2
 802470a:	00db      	lsls	r3, r3, #3
 802470c:	440b      	add	r3, r1
 802470e:	3308      	adds	r3, #8
 8024710:	681b      	ldr	r3, [r3, #0]
 8024712:	687a      	ldr	r2, [r7, #4]
 8024714:	429a      	cmp	r2, r3
 8024716:	d102      	bne.n	802471e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8024718:	68f8      	ldr	r0, [r7, #12]
 802471a:	f7ff fce5 	bl	80240e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802471e:	68fb      	ldr	r3, [r7, #12]
 8024720:	3301      	adds	r3, #1
 8024722:	60fb      	str	r3, [r7, #12]
 8024724:	68fb      	ldr	r3, [r7, #12]
 8024726:	2b31      	cmp	r3, #49	; 0x31
 8024728:	dddd      	ble.n	80246e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 802472a:	bf00      	nop
 802472c:	bf00      	nop
 802472e:	3710      	adds	r7, #16
 8024730:	46bd      	mov	sp, r7
 8024732:	bd80      	pop	{r7, pc}
 8024734:	20015e3c 	.word	0x20015e3c

08024738 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8024738:	b5b0      	push	{r4, r5, r7, lr}
 802473a:	b08a      	sub	sp, #40	; 0x28
 802473c:	af04      	add	r7, sp, #16
 802473e:	6078      	str	r0, [r7, #4]
 8024740:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8024742:	683b      	ldr	r3, [r7, #0]
 8024744:	2b00      	cmp	r3, #0
 8024746:	d107      	bne.n	8024758 <etharp_input+0x20>
 8024748:	4b3d      	ldr	r3, [pc, #244]	; (8024840 <etharp_input+0x108>)
 802474a:	f240 228a 	movw	r2, #650	; 0x28a
 802474e:	493d      	ldr	r1, [pc, #244]	; (8024844 <etharp_input+0x10c>)
 8024750:	483d      	ldr	r0, [pc, #244]	; (8024848 <etharp_input+0x110>)
 8024752:	f002 f977 	bl	8026a44 <iprintf>
 8024756:	e06f      	b.n	8024838 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	685b      	ldr	r3, [r3, #4]
 802475c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802475e:	693b      	ldr	r3, [r7, #16]
 8024760:	881b      	ldrh	r3, [r3, #0]
 8024762:	b29b      	uxth	r3, r3
 8024764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024768:	d10c      	bne.n	8024784 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802476a:	693b      	ldr	r3, [r7, #16]
 802476c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802476e:	2b06      	cmp	r3, #6
 8024770:	d108      	bne.n	8024784 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8024772:	693b      	ldr	r3, [r7, #16]
 8024774:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8024776:	2b04      	cmp	r3, #4
 8024778:	d104      	bne.n	8024784 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802477a:	693b      	ldr	r3, [r7, #16]
 802477c:	885b      	ldrh	r3, [r3, #2]
 802477e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8024780:	2b08      	cmp	r3, #8
 8024782:	d003      	beq.n	802478c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8024784:	6878      	ldr	r0, [r7, #4]
 8024786:	f7fe fc25 	bl	8022fd4 <pbuf_free>
    return;
 802478a:	e055      	b.n	8024838 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 802478c:	693b      	ldr	r3, [r7, #16]
 802478e:	330e      	adds	r3, #14
 8024790:	681b      	ldr	r3, [r3, #0]
 8024792:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8024794:	693b      	ldr	r3, [r7, #16]
 8024796:	3318      	adds	r3, #24
 8024798:	681b      	ldr	r3, [r3, #0]
 802479a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802479c:	683b      	ldr	r3, [r7, #0]
 802479e:	3304      	adds	r3, #4
 80247a0:	681b      	ldr	r3, [r3, #0]
 80247a2:	2b00      	cmp	r3, #0
 80247a4:	d102      	bne.n	80247ac <etharp_input+0x74>
    for_us = 0;
 80247a6:	2300      	movs	r3, #0
 80247a8:	75fb      	strb	r3, [r7, #23]
 80247aa:	e009      	b.n	80247c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80247ac:	68ba      	ldr	r2, [r7, #8]
 80247ae:	683b      	ldr	r3, [r7, #0]
 80247b0:	3304      	adds	r3, #4
 80247b2:	681b      	ldr	r3, [r3, #0]
 80247b4:	429a      	cmp	r2, r3
 80247b6:	bf0c      	ite	eq
 80247b8:	2301      	moveq	r3, #1
 80247ba:	2300      	movne	r3, #0
 80247bc:	b2db      	uxtb	r3, r3
 80247be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80247c0:	693b      	ldr	r3, [r7, #16]
 80247c2:	f103 0208 	add.w	r2, r3, #8
 80247c6:	7dfb      	ldrb	r3, [r7, #23]
 80247c8:	2b00      	cmp	r3, #0
 80247ca:	d001      	beq.n	80247d0 <etharp_input+0x98>
 80247cc:	2301      	movs	r3, #1
 80247ce:	e000      	b.n	80247d2 <etharp_input+0x9a>
 80247d0:	2302      	movs	r3, #2
 80247d2:	f107 010c 	add.w	r1, r7, #12
 80247d6:	6838      	ldr	r0, [r7, #0]
 80247d8:	f7ff fed8 	bl	802458c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80247dc:	693b      	ldr	r3, [r7, #16]
 80247de:	88db      	ldrh	r3, [r3, #6]
 80247e0:	b29b      	uxth	r3, r3
 80247e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80247e6:	d003      	beq.n	80247f0 <etharp_input+0xb8>
 80247e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80247ec:	d01e      	beq.n	802482c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80247ee:	e020      	b.n	8024832 <etharp_input+0xfa>
      if (for_us) {
 80247f0:	7dfb      	ldrb	r3, [r7, #23]
 80247f2:	2b00      	cmp	r3, #0
 80247f4:	d01c      	beq.n	8024830 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80247f6:	683b      	ldr	r3, [r7, #0]
 80247f8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80247fc:	693b      	ldr	r3, [r7, #16]
 80247fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8024802:	683b      	ldr	r3, [r7, #0]
 8024804:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8024808:	683b      	ldr	r3, [r7, #0]
 802480a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 802480c:	693a      	ldr	r2, [r7, #16]
 802480e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8024810:	2102      	movs	r1, #2
 8024812:	9103      	str	r1, [sp, #12]
 8024814:	f107 010c 	add.w	r1, r7, #12
 8024818:	9102      	str	r1, [sp, #8]
 802481a:	9201      	str	r2, [sp, #4]
 802481c:	9300      	str	r3, [sp, #0]
 802481e:	462b      	mov	r3, r5
 8024820:	4622      	mov	r2, r4
 8024822:	4601      	mov	r1, r0
 8024824:	6838      	ldr	r0, [r7, #0]
 8024826:	f000 faeb 	bl	8024e00 <etharp_raw>
      break;
 802482a:	e001      	b.n	8024830 <etharp_input+0xf8>
      break;
 802482c:	bf00      	nop
 802482e:	e000      	b.n	8024832 <etharp_input+0xfa>
      break;
 8024830:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8024832:	6878      	ldr	r0, [r7, #4]
 8024834:	f7fe fbce 	bl	8022fd4 <pbuf_free>
}
 8024838:	3718      	adds	r7, #24
 802483a:	46bd      	mov	sp, r7
 802483c:	bdb0      	pop	{r4, r5, r7, pc}
 802483e:	bf00      	nop
 8024840:	0802d26c 	.word	0x0802d26c
 8024844:	0802d3bc 	.word	0x0802d3bc
 8024848:	0802d2e4 	.word	0x0802d2e4

0802484c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 802484c:	b580      	push	{r7, lr}
 802484e:	b086      	sub	sp, #24
 8024850:	af02      	add	r7, sp, #8
 8024852:	60f8      	str	r0, [r7, #12]
 8024854:	60b9      	str	r1, [r7, #8]
 8024856:	4613      	mov	r3, r2
 8024858:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802485a:	79fa      	ldrb	r2, [r7, #7]
 802485c:	4944      	ldr	r1, [pc, #272]	; (8024970 <etharp_output_to_arp_index+0x124>)
 802485e:	4613      	mov	r3, r2
 8024860:	005b      	lsls	r3, r3, #1
 8024862:	4413      	add	r3, r2
 8024864:	00db      	lsls	r3, r3, #3
 8024866:	440b      	add	r3, r1
 8024868:	3314      	adds	r3, #20
 802486a:	781b      	ldrb	r3, [r3, #0]
 802486c:	2b01      	cmp	r3, #1
 802486e:	d806      	bhi.n	802487e <etharp_output_to_arp_index+0x32>
 8024870:	4b40      	ldr	r3, [pc, #256]	; (8024974 <etharp_output_to_arp_index+0x128>)
 8024872:	f240 22ee 	movw	r2, #750	; 0x2ee
 8024876:	4940      	ldr	r1, [pc, #256]	; (8024978 <etharp_output_to_arp_index+0x12c>)
 8024878:	4840      	ldr	r0, [pc, #256]	; (802497c <etharp_output_to_arp_index+0x130>)
 802487a:	f002 f8e3 	bl	8026a44 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 802487e:	79fa      	ldrb	r2, [r7, #7]
 8024880:	493b      	ldr	r1, [pc, #236]	; (8024970 <etharp_output_to_arp_index+0x124>)
 8024882:	4613      	mov	r3, r2
 8024884:	005b      	lsls	r3, r3, #1
 8024886:	4413      	add	r3, r2
 8024888:	00db      	lsls	r3, r3, #3
 802488a:	440b      	add	r3, r1
 802488c:	3314      	adds	r3, #20
 802488e:	781b      	ldrb	r3, [r3, #0]
 8024890:	2b02      	cmp	r3, #2
 8024892:	d153      	bne.n	802493c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8024894:	79fa      	ldrb	r2, [r7, #7]
 8024896:	4936      	ldr	r1, [pc, #216]	; (8024970 <etharp_output_to_arp_index+0x124>)
 8024898:	4613      	mov	r3, r2
 802489a:	005b      	lsls	r3, r3, #1
 802489c:	4413      	add	r3, r2
 802489e:	00db      	lsls	r3, r3, #3
 80248a0:	440b      	add	r3, r1
 80248a2:	3312      	adds	r3, #18
 80248a4:	881b      	ldrh	r3, [r3, #0]
 80248a6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80248aa:	d919      	bls.n	80248e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80248ac:	79fa      	ldrb	r2, [r7, #7]
 80248ae:	4613      	mov	r3, r2
 80248b0:	005b      	lsls	r3, r3, #1
 80248b2:	4413      	add	r3, r2
 80248b4:	00db      	lsls	r3, r3, #3
 80248b6:	4a2e      	ldr	r2, [pc, #184]	; (8024970 <etharp_output_to_arp_index+0x124>)
 80248b8:	4413      	add	r3, r2
 80248ba:	3304      	adds	r3, #4
 80248bc:	4619      	mov	r1, r3
 80248be:	68f8      	ldr	r0, [r7, #12]
 80248c0:	f000 fb4c 	bl	8024f5c <etharp_request>
 80248c4:	4603      	mov	r3, r0
 80248c6:	2b00      	cmp	r3, #0
 80248c8:	d138      	bne.n	802493c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80248ca:	79fa      	ldrb	r2, [r7, #7]
 80248cc:	4928      	ldr	r1, [pc, #160]	; (8024970 <etharp_output_to_arp_index+0x124>)
 80248ce:	4613      	mov	r3, r2
 80248d0:	005b      	lsls	r3, r3, #1
 80248d2:	4413      	add	r3, r2
 80248d4:	00db      	lsls	r3, r3, #3
 80248d6:	440b      	add	r3, r1
 80248d8:	3314      	adds	r3, #20
 80248da:	2203      	movs	r2, #3
 80248dc:	701a      	strb	r2, [r3, #0]
 80248de:	e02d      	b.n	802493c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80248e0:	79fa      	ldrb	r2, [r7, #7]
 80248e2:	4923      	ldr	r1, [pc, #140]	; (8024970 <etharp_output_to_arp_index+0x124>)
 80248e4:	4613      	mov	r3, r2
 80248e6:	005b      	lsls	r3, r3, #1
 80248e8:	4413      	add	r3, r2
 80248ea:	00db      	lsls	r3, r3, #3
 80248ec:	440b      	add	r3, r1
 80248ee:	3312      	adds	r3, #18
 80248f0:	881b      	ldrh	r3, [r3, #0]
 80248f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80248f6:	d321      	bcc.n	802493c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80248f8:	79fa      	ldrb	r2, [r7, #7]
 80248fa:	4613      	mov	r3, r2
 80248fc:	005b      	lsls	r3, r3, #1
 80248fe:	4413      	add	r3, r2
 8024900:	00db      	lsls	r3, r3, #3
 8024902:	4a1b      	ldr	r2, [pc, #108]	; (8024970 <etharp_output_to_arp_index+0x124>)
 8024904:	4413      	add	r3, r2
 8024906:	1d19      	adds	r1, r3, #4
 8024908:	79fa      	ldrb	r2, [r7, #7]
 802490a:	4613      	mov	r3, r2
 802490c:	005b      	lsls	r3, r3, #1
 802490e:	4413      	add	r3, r2
 8024910:	00db      	lsls	r3, r3, #3
 8024912:	3308      	adds	r3, #8
 8024914:	4a16      	ldr	r2, [pc, #88]	; (8024970 <etharp_output_to_arp_index+0x124>)
 8024916:	4413      	add	r3, r2
 8024918:	3304      	adds	r3, #4
 802491a:	461a      	mov	r2, r3
 802491c:	68f8      	ldr	r0, [r7, #12]
 802491e:	f000 fafb 	bl	8024f18 <etharp_request_dst>
 8024922:	4603      	mov	r3, r0
 8024924:	2b00      	cmp	r3, #0
 8024926:	d109      	bne.n	802493c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8024928:	79fa      	ldrb	r2, [r7, #7]
 802492a:	4911      	ldr	r1, [pc, #68]	; (8024970 <etharp_output_to_arp_index+0x124>)
 802492c:	4613      	mov	r3, r2
 802492e:	005b      	lsls	r3, r3, #1
 8024930:	4413      	add	r3, r2
 8024932:	00db      	lsls	r3, r3, #3
 8024934:	440b      	add	r3, r1
 8024936:	3314      	adds	r3, #20
 8024938:	2203      	movs	r2, #3
 802493a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 802493c:	68fb      	ldr	r3, [r7, #12]
 802493e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8024942:	79fa      	ldrb	r2, [r7, #7]
 8024944:	4613      	mov	r3, r2
 8024946:	005b      	lsls	r3, r3, #1
 8024948:	4413      	add	r3, r2
 802494a:	00db      	lsls	r3, r3, #3
 802494c:	3308      	adds	r3, #8
 802494e:	4a08      	ldr	r2, [pc, #32]	; (8024970 <etharp_output_to_arp_index+0x124>)
 8024950:	4413      	add	r3, r2
 8024952:	3304      	adds	r3, #4
 8024954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8024958:	9200      	str	r2, [sp, #0]
 802495a:	460a      	mov	r2, r1
 802495c:	68b9      	ldr	r1, [r7, #8]
 802495e:	68f8      	ldr	r0, [r7, #12]
 8024960:	f001 fed4 	bl	802670c <ethernet_output>
 8024964:	4603      	mov	r3, r0
}
 8024966:	4618      	mov	r0, r3
 8024968:	3710      	adds	r7, #16
 802496a:	46bd      	mov	sp, r7
 802496c:	bd80      	pop	{r7, pc}
 802496e:	bf00      	nop
 8024970:	20015e3c 	.word	0x20015e3c
 8024974:	0802d26c 	.word	0x0802d26c
 8024978:	0802d3dc 	.word	0x0802d3dc
 802497c:	0802d2e4 	.word	0x0802d2e4

08024980 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8024980:	b580      	push	{r7, lr}
 8024982:	b08a      	sub	sp, #40	; 0x28
 8024984:	af02      	add	r7, sp, #8
 8024986:	60f8      	str	r0, [r7, #12]
 8024988:	60b9      	str	r1, [r7, #8]
 802498a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 802498c:	687b      	ldr	r3, [r7, #4]
 802498e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8024990:	68fb      	ldr	r3, [r7, #12]
 8024992:	2b00      	cmp	r3, #0
 8024994:	d106      	bne.n	80249a4 <etharp_output+0x24>
 8024996:	4b73      	ldr	r3, [pc, #460]	; (8024b64 <etharp_output+0x1e4>)
 8024998:	f240 321e 	movw	r2, #798	; 0x31e
 802499c:	4972      	ldr	r1, [pc, #456]	; (8024b68 <etharp_output+0x1e8>)
 802499e:	4873      	ldr	r0, [pc, #460]	; (8024b6c <etharp_output+0x1ec>)
 80249a0:	f002 f850 	bl	8026a44 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80249a4:	68bb      	ldr	r3, [r7, #8]
 80249a6:	2b00      	cmp	r3, #0
 80249a8:	d106      	bne.n	80249b8 <etharp_output+0x38>
 80249aa:	4b6e      	ldr	r3, [pc, #440]	; (8024b64 <etharp_output+0x1e4>)
 80249ac:	f240 321f 	movw	r2, #799	; 0x31f
 80249b0:	496f      	ldr	r1, [pc, #444]	; (8024b70 <etharp_output+0x1f0>)
 80249b2:	486e      	ldr	r0, [pc, #440]	; (8024b6c <etharp_output+0x1ec>)
 80249b4:	f002 f846 	bl	8026a44 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80249b8:	687b      	ldr	r3, [r7, #4]
 80249ba:	2b00      	cmp	r3, #0
 80249bc:	d106      	bne.n	80249cc <etharp_output+0x4c>
 80249be:	4b69      	ldr	r3, [pc, #420]	; (8024b64 <etharp_output+0x1e4>)
 80249c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80249c4:	496b      	ldr	r1, [pc, #428]	; (8024b74 <etharp_output+0x1f4>)
 80249c6:	4869      	ldr	r0, [pc, #420]	; (8024b6c <etharp_output+0x1ec>)
 80249c8:	f002 f83c 	bl	8026a44 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	681b      	ldr	r3, [r3, #0]
 80249d0:	68f9      	ldr	r1, [r7, #12]
 80249d2:	4618      	mov	r0, r3
 80249d4:	f000 fefc 	bl	80257d0 <ip4_addr_isbroadcast_u32>
 80249d8:	4603      	mov	r3, r0
 80249da:	2b00      	cmp	r3, #0
 80249dc:	d002      	beq.n	80249e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80249de:	4b66      	ldr	r3, [pc, #408]	; (8024b78 <etharp_output+0x1f8>)
 80249e0:	61fb      	str	r3, [r7, #28]
 80249e2:	e0af      	b.n	8024b44 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80249e4:	687b      	ldr	r3, [r7, #4]
 80249e6:	681b      	ldr	r3, [r3, #0]
 80249e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80249ec:	2be0      	cmp	r3, #224	; 0xe0
 80249ee:	d118      	bne.n	8024a22 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80249f0:	2301      	movs	r3, #1
 80249f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80249f4:	2300      	movs	r3, #0
 80249f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80249f8:	235e      	movs	r3, #94	; 0x5e
 80249fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80249fc:	687b      	ldr	r3, [r7, #4]
 80249fe:	3301      	adds	r3, #1
 8024a00:	781b      	ldrb	r3, [r3, #0]
 8024a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024a06:	b2db      	uxtb	r3, r3
 8024a08:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8024a0a:	687b      	ldr	r3, [r7, #4]
 8024a0c:	3302      	adds	r3, #2
 8024a0e:	781b      	ldrb	r3, [r3, #0]
 8024a10:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8024a12:	687b      	ldr	r3, [r7, #4]
 8024a14:	3303      	adds	r3, #3
 8024a16:	781b      	ldrb	r3, [r3, #0]
 8024a18:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8024a1a:	f107 0310 	add.w	r3, r7, #16
 8024a1e:	61fb      	str	r3, [r7, #28]
 8024a20:	e090      	b.n	8024b44 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8024a22:	687b      	ldr	r3, [r7, #4]
 8024a24:	681a      	ldr	r2, [r3, #0]
 8024a26:	68fb      	ldr	r3, [r7, #12]
 8024a28:	3304      	adds	r3, #4
 8024a2a:	681b      	ldr	r3, [r3, #0]
 8024a2c:	405a      	eors	r2, r3
 8024a2e:	68fb      	ldr	r3, [r7, #12]
 8024a30:	3308      	adds	r3, #8
 8024a32:	681b      	ldr	r3, [r3, #0]
 8024a34:	4013      	ands	r3, r2
 8024a36:	2b00      	cmp	r3, #0
 8024a38:	d012      	beq.n	8024a60 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8024a3a:	687b      	ldr	r3, [r7, #4]
 8024a3c:	681b      	ldr	r3, [r3, #0]
 8024a3e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8024a40:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8024a44:	4293      	cmp	r3, r2
 8024a46:	d00b      	beq.n	8024a60 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8024a48:	68fb      	ldr	r3, [r7, #12]
 8024a4a:	330c      	adds	r3, #12
 8024a4c:	681b      	ldr	r3, [r3, #0]
 8024a4e:	2b00      	cmp	r3, #0
 8024a50:	d003      	beq.n	8024a5a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8024a52:	68fb      	ldr	r3, [r7, #12]
 8024a54:	330c      	adds	r3, #12
 8024a56:	61bb      	str	r3, [r7, #24]
 8024a58:	e002      	b.n	8024a60 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8024a5a:	f06f 0303 	mvn.w	r3, #3
 8024a5e:	e07d      	b.n	8024b5c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8024a60:	4b46      	ldr	r3, [pc, #280]	; (8024b7c <etharp_output+0x1fc>)
 8024a62:	781b      	ldrb	r3, [r3, #0]
 8024a64:	4619      	mov	r1, r3
 8024a66:	4a46      	ldr	r2, [pc, #280]	; (8024b80 <etharp_output+0x200>)
 8024a68:	460b      	mov	r3, r1
 8024a6a:	005b      	lsls	r3, r3, #1
 8024a6c:	440b      	add	r3, r1
 8024a6e:	00db      	lsls	r3, r3, #3
 8024a70:	4413      	add	r3, r2
 8024a72:	3314      	adds	r3, #20
 8024a74:	781b      	ldrb	r3, [r3, #0]
 8024a76:	2b01      	cmp	r3, #1
 8024a78:	d925      	bls.n	8024ac6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8024a7a:	4b40      	ldr	r3, [pc, #256]	; (8024b7c <etharp_output+0x1fc>)
 8024a7c:	781b      	ldrb	r3, [r3, #0]
 8024a7e:	4619      	mov	r1, r3
 8024a80:	4a3f      	ldr	r2, [pc, #252]	; (8024b80 <etharp_output+0x200>)
 8024a82:	460b      	mov	r3, r1
 8024a84:	005b      	lsls	r3, r3, #1
 8024a86:	440b      	add	r3, r1
 8024a88:	00db      	lsls	r3, r3, #3
 8024a8a:	4413      	add	r3, r2
 8024a8c:	3308      	adds	r3, #8
 8024a8e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8024a90:	68fa      	ldr	r2, [r7, #12]
 8024a92:	429a      	cmp	r2, r3
 8024a94:	d117      	bne.n	8024ac6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8024a96:	69bb      	ldr	r3, [r7, #24]
 8024a98:	681a      	ldr	r2, [r3, #0]
 8024a9a:	4b38      	ldr	r3, [pc, #224]	; (8024b7c <etharp_output+0x1fc>)
 8024a9c:	781b      	ldrb	r3, [r3, #0]
 8024a9e:	4618      	mov	r0, r3
 8024aa0:	4937      	ldr	r1, [pc, #220]	; (8024b80 <etharp_output+0x200>)
 8024aa2:	4603      	mov	r3, r0
 8024aa4:	005b      	lsls	r3, r3, #1
 8024aa6:	4403      	add	r3, r0
 8024aa8:	00db      	lsls	r3, r3, #3
 8024aaa:	440b      	add	r3, r1
 8024aac:	3304      	adds	r3, #4
 8024aae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8024ab0:	429a      	cmp	r2, r3
 8024ab2:	d108      	bne.n	8024ac6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8024ab4:	4b31      	ldr	r3, [pc, #196]	; (8024b7c <etharp_output+0x1fc>)
 8024ab6:	781b      	ldrb	r3, [r3, #0]
 8024ab8:	461a      	mov	r2, r3
 8024aba:	68b9      	ldr	r1, [r7, #8]
 8024abc:	68f8      	ldr	r0, [r7, #12]
 8024abe:	f7ff fec5 	bl	802484c <etharp_output_to_arp_index>
 8024ac2:	4603      	mov	r3, r0
 8024ac4:	e04a      	b.n	8024b5c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8024ac6:	2300      	movs	r3, #0
 8024ac8:	75fb      	strb	r3, [r7, #23]
 8024aca:	e031      	b.n	8024b30 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024acc:	7dfa      	ldrb	r2, [r7, #23]
 8024ace:	492c      	ldr	r1, [pc, #176]	; (8024b80 <etharp_output+0x200>)
 8024ad0:	4613      	mov	r3, r2
 8024ad2:	005b      	lsls	r3, r3, #1
 8024ad4:	4413      	add	r3, r2
 8024ad6:	00db      	lsls	r3, r3, #3
 8024ad8:	440b      	add	r3, r1
 8024ada:	3314      	adds	r3, #20
 8024adc:	781b      	ldrb	r3, [r3, #0]
 8024ade:	2b01      	cmp	r3, #1
 8024ae0:	d923      	bls.n	8024b2a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8024ae2:	7dfa      	ldrb	r2, [r7, #23]
 8024ae4:	4926      	ldr	r1, [pc, #152]	; (8024b80 <etharp_output+0x200>)
 8024ae6:	4613      	mov	r3, r2
 8024ae8:	005b      	lsls	r3, r3, #1
 8024aea:	4413      	add	r3, r2
 8024aec:	00db      	lsls	r3, r3, #3
 8024aee:	440b      	add	r3, r1
 8024af0:	3308      	adds	r3, #8
 8024af2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024af4:	68fa      	ldr	r2, [r7, #12]
 8024af6:	429a      	cmp	r2, r3
 8024af8:	d117      	bne.n	8024b2a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8024afa:	69bb      	ldr	r3, [r7, #24]
 8024afc:	6819      	ldr	r1, [r3, #0]
 8024afe:	7dfa      	ldrb	r2, [r7, #23]
 8024b00:	481f      	ldr	r0, [pc, #124]	; (8024b80 <etharp_output+0x200>)
 8024b02:	4613      	mov	r3, r2
 8024b04:	005b      	lsls	r3, r3, #1
 8024b06:	4413      	add	r3, r2
 8024b08:	00db      	lsls	r3, r3, #3
 8024b0a:	4403      	add	r3, r0
 8024b0c:	3304      	adds	r3, #4
 8024b0e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8024b10:	4299      	cmp	r1, r3
 8024b12:	d10a      	bne.n	8024b2a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8024b14:	4a19      	ldr	r2, [pc, #100]	; (8024b7c <etharp_output+0x1fc>)
 8024b16:	7dfb      	ldrb	r3, [r7, #23]
 8024b18:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8024b1a:	7dfb      	ldrb	r3, [r7, #23]
 8024b1c:	461a      	mov	r2, r3
 8024b1e:	68b9      	ldr	r1, [r7, #8]
 8024b20:	68f8      	ldr	r0, [r7, #12]
 8024b22:	f7ff fe93 	bl	802484c <etharp_output_to_arp_index>
 8024b26:	4603      	mov	r3, r0
 8024b28:	e018      	b.n	8024b5c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8024b2a:	7dfb      	ldrb	r3, [r7, #23]
 8024b2c:	3301      	adds	r3, #1
 8024b2e:	75fb      	strb	r3, [r7, #23]
 8024b30:	7dfb      	ldrb	r3, [r7, #23]
 8024b32:	2b31      	cmp	r3, #49	; 0x31
 8024b34:	d9ca      	bls.n	8024acc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8024b36:	68ba      	ldr	r2, [r7, #8]
 8024b38:	69b9      	ldr	r1, [r7, #24]
 8024b3a:	68f8      	ldr	r0, [r7, #12]
 8024b3c:	f000 f822 	bl	8024b84 <etharp_query>
 8024b40:	4603      	mov	r3, r0
 8024b42:	e00b      	b.n	8024b5c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8024b44:	68fb      	ldr	r3, [r7, #12]
 8024b46:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8024b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024b4e:	9300      	str	r3, [sp, #0]
 8024b50:	69fb      	ldr	r3, [r7, #28]
 8024b52:	68b9      	ldr	r1, [r7, #8]
 8024b54:	68f8      	ldr	r0, [r7, #12]
 8024b56:	f001 fdd9 	bl	802670c <ethernet_output>
 8024b5a:	4603      	mov	r3, r0
}
 8024b5c:	4618      	mov	r0, r3
 8024b5e:	3720      	adds	r7, #32
 8024b60:	46bd      	mov	sp, r7
 8024b62:	bd80      	pop	{r7, pc}
 8024b64:	0802d26c 	.word	0x0802d26c
 8024b68:	0802d3bc 	.word	0x0802d3bc
 8024b6c:	0802d2e4 	.word	0x0802d2e4
 8024b70:	0802d40c 	.word	0x0802d40c
 8024b74:	0802d3ac 	.word	0x0802d3ac
 8024b78:	0802ddec 	.word	0x0802ddec
 8024b7c:	200162ec 	.word	0x200162ec
 8024b80:	20015e3c 	.word	0x20015e3c

08024b84 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8024b84:	b580      	push	{r7, lr}
 8024b86:	b08c      	sub	sp, #48	; 0x30
 8024b88:	af02      	add	r7, sp, #8
 8024b8a:	60f8      	str	r0, [r7, #12]
 8024b8c:	60b9      	str	r1, [r7, #8]
 8024b8e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8024b90:	68fb      	ldr	r3, [r7, #12]
 8024b92:	332a      	adds	r3, #42	; 0x2a
 8024b94:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8024b96:	23ff      	movs	r3, #255	; 0xff
 8024b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8024b9c:	2300      	movs	r3, #0
 8024b9e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024ba0:	68bb      	ldr	r3, [r7, #8]
 8024ba2:	681b      	ldr	r3, [r3, #0]
 8024ba4:	68f9      	ldr	r1, [r7, #12]
 8024ba6:	4618      	mov	r0, r3
 8024ba8:	f000 fe12 	bl	80257d0 <ip4_addr_isbroadcast_u32>
 8024bac:	4603      	mov	r3, r0
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	d10c      	bne.n	8024bcc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8024bb2:	68bb      	ldr	r3, [r7, #8]
 8024bb4:	681b      	ldr	r3, [r3, #0]
 8024bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024bba:	2be0      	cmp	r3, #224	; 0xe0
 8024bbc:	d006      	beq.n	8024bcc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8024bbe:	68bb      	ldr	r3, [r7, #8]
 8024bc0:	2b00      	cmp	r3, #0
 8024bc2:	d003      	beq.n	8024bcc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8024bc4:	68bb      	ldr	r3, [r7, #8]
 8024bc6:	681b      	ldr	r3, [r3, #0]
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	d102      	bne.n	8024bd2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024bcc:	f06f 030f 	mvn.w	r3, #15
 8024bd0:	e101      	b.n	8024dd6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8024bd2:	68fa      	ldr	r2, [r7, #12]
 8024bd4:	2101      	movs	r1, #1
 8024bd6:	68b8      	ldr	r0, [r7, #8]
 8024bd8:	f7ff fb60 	bl	802429c <etharp_find_entry>
 8024bdc:	4603      	mov	r3, r0
 8024bde:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8024be0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8024be4:	2b00      	cmp	r3, #0
 8024be6:	da02      	bge.n	8024bee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8024be8:	8a7b      	ldrh	r3, [r7, #18]
 8024bea:	b25b      	sxtb	r3, r3
 8024bec:	e0f3      	b.n	8024dd6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8024bee:	8a7b      	ldrh	r3, [r7, #18]
 8024bf0:	2b7e      	cmp	r3, #126	; 0x7e
 8024bf2:	d906      	bls.n	8024c02 <etharp_query+0x7e>
 8024bf4:	4b7a      	ldr	r3, [pc, #488]	; (8024de0 <etharp_query+0x25c>)
 8024bf6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8024bfa:	497a      	ldr	r1, [pc, #488]	; (8024de4 <etharp_query+0x260>)
 8024bfc:	487a      	ldr	r0, [pc, #488]	; (8024de8 <etharp_query+0x264>)
 8024bfe:	f001 ff21 	bl	8026a44 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8024c02:	8a7b      	ldrh	r3, [r7, #18]
 8024c04:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8024c06:	7c7a      	ldrb	r2, [r7, #17]
 8024c08:	4978      	ldr	r1, [pc, #480]	; (8024dec <etharp_query+0x268>)
 8024c0a:	4613      	mov	r3, r2
 8024c0c:	005b      	lsls	r3, r3, #1
 8024c0e:	4413      	add	r3, r2
 8024c10:	00db      	lsls	r3, r3, #3
 8024c12:	440b      	add	r3, r1
 8024c14:	3314      	adds	r3, #20
 8024c16:	781b      	ldrb	r3, [r3, #0]
 8024c18:	2b00      	cmp	r3, #0
 8024c1a:	d115      	bne.n	8024c48 <etharp_query+0xc4>
    is_new_entry = 1;
 8024c1c:	2301      	movs	r3, #1
 8024c1e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8024c20:	7c7a      	ldrb	r2, [r7, #17]
 8024c22:	4972      	ldr	r1, [pc, #456]	; (8024dec <etharp_query+0x268>)
 8024c24:	4613      	mov	r3, r2
 8024c26:	005b      	lsls	r3, r3, #1
 8024c28:	4413      	add	r3, r2
 8024c2a:	00db      	lsls	r3, r3, #3
 8024c2c:	440b      	add	r3, r1
 8024c2e:	3314      	adds	r3, #20
 8024c30:	2201      	movs	r2, #1
 8024c32:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8024c34:	7c7a      	ldrb	r2, [r7, #17]
 8024c36:	496d      	ldr	r1, [pc, #436]	; (8024dec <etharp_query+0x268>)
 8024c38:	4613      	mov	r3, r2
 8024c3a:	005b      	lsls	r3, r3, #1
 8024c3c:	4413      	add	r3, r2
 8024c3e:	00db      	lsls	r3, r3, #3
 8024c40:	440b      	add	r3, r1
 8024c42:	3308      	adds	r3, #8
 8024c44:	68fa      	ldr	r2, [r7, #12]
 8024c46:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8024c48:	7c7a      	ldrb	r2, [r7, #17]
 8024c4a:	4968      	ldr	r1, [pc, #416]	; (8024dec <etharp_query+0x268>)
 8024c4c:	4613      	mov	r3, r2
 8024c4e:	005b      	lsls	r3, r3, #1
 8024c50:	4413      	add	r3, r2
 8024c52:	00db      	lsls	r3, r3, #3
 8024c54:	440b      	add	r3, r1
 8024c56:	3314      	adds	r3, #20
 8024c58:	781b      	ldrb	r3, [r3, #0]
 8024c5a:	2b01      	cmp	r3, #1
 8024c5c:	d011      	beq.n	8024c82 <etharp_query+0xfe>
 8024c5e:	7c7a      	ldrb	r2, [r7, #17]
 8024c60:	4962      	ldr	r1, [pc, #392]	; (8024dec <etharp_query+0x268>)
 8024c62:	4613      	mov	r3, r2
 8024c64:	005b      	lsls	r3, r3, #1
 8024c66:	4413      	add	r3, r2
 8024c68:	00db      	lsls	r3, r3, #3
 8024c6a:	440b      	add	r3, r1
 8024c6c:	3314      	adds	r3, #20
 8024c6e:	781b      	ldrb	r3, [r3, #0]
 8024c70:	2b01      	cmp	r3, #1
 8024c72:	d806      	bhi.n	8024c82 <etharp_query+0xfe>
 8024c74:	4b5a      	ldr	r3, [pc, #360]	; (8024de0 <etharp_query+0x25c>)
 8024c76:	f240 32cd 	movw	r2, #973	; 0x3cd
 8024c7a:	495d      	ldr	r1, [pc, #372]	; (8024df0 <etharp_query+0x26c>)
 8024c7c:	485a      	ldr	r0, [pc, #360]	; (8024de8 <etharp_query+0x264>)
 8024c7e:	f001 fee1 	bl	8026a44 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8024c82:	6a3b      	ldr	r3, [r7, #32]
 8024c84:	2b00      	cmp	r3, #0
 8024c86:	d102      	bne.n	8024c8e <etharp_query+0x10a>
 8024c88:	687b      	ldr	r3, [r7, #4]
 8024c8a:	2b00      	cmp	r3, #0
 8024c8c:	d10c      	bne.n	8024ca8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8024c8e:	68b9      	ldr	r1, [r7, #8]
 8024c90:	68f8      	ldr	r0, [r7, #12]
 8024c92:	f000 f963 	bl	8024f5c <etharp_request>
 8024c96:	4603      	mov	r3, r0
 8024c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8024c9c:	687b      	ldr	r3, [r7, #4]
 8024c9e:	2b00      	cmp	r3, #0
 8024ca0:	d102      	bne.n	8024ca8 <etharp_query+0x124>
      return result;
 8024ca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8024ca6:	e096      	b.n	8024dd6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8024ca8:	687b      	ldr	r3, [r7, #4]
 8024caa:	2b00      	cmp	r3, #0
 8024cac:	d106      	bne.n	8024cbc <etharp_query+0x138>
 8024cae:	4b4c      	ldr	r3, [pc, #304]	; (8024de0 <etharp_query+0x25c>)
 8024cb0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8024cb4:	494f      	ldr	r1, [pc, #316]	; (8024df4 <etharp_query+0x270>)
 8024cb6:	484c      	ldr	r0, [pc, #304]	; (8024de8 <etharp_query+0x264>)
 8024cb8:	f001 fec4 	bl	8026a44 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8024cbc:	7c7a      	ldrb	r2, [r7, #17]
 8024cbe:	494b      	ldr	r1, [pc, #300]	; (8024dec <etharp_query+0x268>)
 8024cc0:	4613      	mov	r3, r2
 8024cc2:	005b      	lsls	r3, r3, #1
 8024cc4:	4413      	add	r3, r2
 8024cc6:	00db      	lsls	r3, r3, #3
 8024cc8:	440b      	add	r3, r1
 8024cca:	3314      	adds	r3, #20
 8024ccc:	781b      	ldrb	r3, [r3, #0]
 8024cce:	2b01      	cmp	r3, #1
 8024cd0:	d917      	bls.n	8024d02 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8024cd2:	4a49      	ldr	r2, [pc, #292]	; (8024df8 <etharp_query+0x274>)
 8024cd4:	7c7b      	ldrb	r3, [r7, #17]
 8024cd6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8024cd8:	7c7a      	ldrb	r2, [r7, #17]
 8024cda:	4613      	mov	r3, r2
 8024cdc:	005b      	lsls	r3, r3, #1
 8024cde:	4413      	add	r3, r2
 8024ce0:	00db      	lsls	r3, r3, #3
 8024ce2:	3308      	adds	r3, #8
 8024ce4:	4a41      	ldr	r2, [pc, #260]	; (8024dec <etharp_query+0x268>)
 8024ce6:	4413      	add	r3, r2
 8024ce8:	3304      	adds	r3, #4
 8024cea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8024cee:	9200      	str	r2, [sp, #0]
 8024cf0:	697a      	ldr	r2, [r7, #20]
 8024cf2:	6879      	ldr	r1, [r7, #4]
 8024cf4:	68f8      	ldr	r0, [r7, #12]
 8024cf6:	f001 fd09 	bl	802670c <ethernet_output>
 8024cfa:	4603      	mov	r3, r0
 8024cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024d00:	e067      	b.n	8024dd2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8024d02:	7c7a      	ldrb	r2, [r7, #17]
 8024d04:	4939      	ldr	r1, [pc, #228]	; (8024dec <etharp_query+0x268>)
 8024d06:	4613      	mov	r3, r2
 8024d08:	005b      	lsls	r3, r3, #1
 8024d0a:	4413      	add	r3, r2
 8024d0c:	00db      	lsls	r3, r3, #3
 8024d0e:	440b      	add	r3, r1
 8024d10:	3314      	adds	r3, #20
 8024d12:	781b      	ldrb	r3, [r3, #0]
 8024d14:	2b01      	cmp	r3, #1
 8024d16:	d15c      	bne.n	8024dd2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8024d18:	2300      	movs	r3, #0
 8024d1a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8024d1c:	687b      	ldr	r3, [r7, #4]
 8024d1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8024d20:	e01c      	b.n	8024d5c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8024d22:	69fb      	ldr	r3, [r7, #28]
 8024d24:	895a      	ldrh	r2, [r3, #10]
 8024d26:	69fb      	ldr	r3, [r7, #28]
 8024d28:	891b      	ldrh	r3, [r3, #8]
 8024d2a:	429a      	cmp	r2, r3
 8024d2c:	d10a      	bne.n	8024d44 <etharp_query+0x1c0>
 8024d2e:	69fb      	ldr	r3, [r7, #28]
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	2b00      	cmp	r3, #0
 8024d34:	d006      	beq.n	8024d44 <etharp_query+0x1c0>
 8024d36:	4b2a      	ldr	r3, [pc, #168]	; (8024de0 <etharp_query+0x25c>)
 8024d38:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8024d3c:	492f      	ldr	r1, [pc, #188]	; (8024dfc <etharp_query+0x278>)
 8024d3e:	482a      	ldr	r0, [pc, #168]	; (8024de8 <etharp_query+0x264>)
 8024d40:	f001 fe80 	bl	8026a44 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8024d44:	69fb      	ldr	r3, [r7, #28]
 8024d46:	7b1b      	ldrb	r3, [r3, #12]
 8024d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024d4c:	2b00      	cmp	r3, #0
 8024d4e:	d002      	beq.n	8024d56 <etharp_query+0x1d2>
        copy_needed = 1;
 8024d50:	2301      	movs	r3, #1
 8024d52:	61bb      	str	r3, [r7, #24]
        break;
 8024d54:	e005      	b.n	8024d62 <etharp_query+0x1de>
      }
      p = p->next;
 8024d56:	69fb      	ldr	r3, [r7, #28]
 8024d58:	681b      	ldr	r3, [r3, #0]
 8024d5a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8024d5c:	69fb      	ldr	r3, [r7, #28]
 8024d5e:	2b00      	cmp	r3, #0
 8024d60:	d1df      	bne.n	8024d22 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8024d62:	69bb      	ldr	r3, [r7, #24]
 8024d64:	2b00      	cmp	r3, #0
 8024d66:	d007      	beq.n	8024d78 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8024d68:	687a      	ldr	r2, [r7, #4]
 8024d6a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8024d6e:	200e      	movs	r0, #14
 8024d70:	f7fe fbbc 	bl	80234ec <pbuf_clone>
 8024d74:	61f8      	str	r0, [r7, #28]
 8024d76:	e004      	b.n	8024d82 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8024d78:	687b      	ldr	r3, [r7, #4]
 8024d7a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8024d7c:	69f8      	ldr	r0, [r7, #28]
 8024d7e:	f7fe f9c9 	bl	8023114 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8024d82:	69fb      	ldr	r3, [r7, #28]
 8024d84:	2b00      	cmp	r3, #0
 8024d86:	d021      	beq.n	8024dcc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8024d88:	7c7a      	ldrb	r2, [r7, #17]
 8024d8a:	4918      	ldr	r1, [pc, #96]	; (8024dec <etharp_query+0x268>)
 8024d8c:	4613      	mov	r3, r2
 8024d8e:	005b      	lsls	r3, r3, #1
 8024d90:	4413      	add	r3, r2
 8024d92:	00db      	lsls	r3, r3, #3
 8024d94:	440b      	add	r3, r1
 8024d96:	681b      	ldr	r3, [r3, #0]
 8024d98:	2b00      	cmp	r3, #0
 8024d9a:	d00a      	beq.n	8024db2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8024d9c:	7c7a      	ldrb	r2, [r7, #17]
 8024d9e:	4913      	ldr	r1, [pc, #76]	; (8024dec <etharp_query+0x268>)
 8024da0:	4613      	mov	r3, r2
 8024da2:	005b      	lsls	r3, r3, #1
 8024da4:	4413      	add	r3, r2
 8024da6:	00db      	lsls	r3, r3, #3
 8024da8:	440b      	add	r3, r1
 8024daa:	681b      	ldr	r3, [r3, #0]
 8024dac:	4618      	mov	r0, r3
 8024dae:	f7fe f911 	bl	8022fd4 <pbuf_free>
      }
      arp_table[i].q = p;
 8024db2:	7c7a      	ldrb	r2, [r7, #17]
 8024db4:	490d      	ldr	r1, [pc, #52]	; (8024dec <etharp_query+0x268>)
 8024db6:	4613      	mov	r3, r2
 8024db8:	005b      	lsls	r3, r3, #1
 8024dba:	4413      	add	r3, r2
 8024dbc:	00db      	lsls	r3, r3, #3
 8024dbe:	440b      	add	r3, r1
 8024dc0:	69fa      	ldr	r2, [r7, #28]
 8024dc2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8024dc4:	2300      	movs	r3, #0
 8024dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024dca:	e002      	b.n	8024dd2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8024dcc:	23ff      	movs	r3, #255	; 0xff
 8024dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8024dd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8024dd6:	4618      	mov	r0, r3
 8024dd8:	3728      	adds	r7, #40	; 0x28
 8024dda:	46bd      	mov	sp, r7
 8024ddc:	bd80      	pop	{r7, pc}
 8024dde:	bf00      	nop
 8024de0:	0802d26c 	.word	0x0802d26c
 8024de4:	0802d418 	.word	0x0802d418
 8024de8:	0802d2e4 	.word	0x0802d2e4
 8024dec:	20015e3c 	.word	0x20015e3c
 8024df0:	0802d428 	.word	0x0802d428
 8024df4:	0802d40c 	.word	0x0802d40c
 8024df8:	200162ec 	.word	0x200162ec
 8024dfc:	0802d450 	.word	0x0802d450

08024e00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8024e00:	b580      	push	{r7, lr}
 8024e02:	b08a      	sub	sp, #40	; 0x28
 8024e04:	af02      	add	r7, sp, #8
 8024e06:	60f8      	str	r0, [r7, #12]
 8024e08:	60b9      	str	r1, [r7, #8]
 8024e0a:	607a      	str	r2, [r7, #4]
 8024e0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8024e0e:	2300      	movs	r3, #0
 8024e10:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8024e12:	68fb      	ldr	r3, [r7, #12]
 8024e14:	2b00      	cmp	r3, #0
 8024e16:	d106      	bne.n	8024e26 <etharp_raw+0x26>
 8024e18:	4b3a      	ldr	r3, [pc, #232]	; (8024f04 <etharp_raw+0x104>)
 8024e1a:	f240 4257 	movw	r2, #1111	; 0x457
 8024e1e:	493a      	ldr	r1, [pc, #232]	; (8024f08 <etharp_raw+0x108>)
 8024e20:	483a      	ldr	r0, [pc, #232]	; (8024f0c <etharp_raw+0x10c>)
 8024e22:	f001 fe0f 	bl	8026a44 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8024e26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024e2a:	211c      	movs	r1, #28
 8024e2c:	200e      	movs	r0, #14
 8024e2e:	f7fd fdef 	bl	8022a10 <pbuf_alloc>
 8024e32:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8024e34:	69bb      	ldr	r3, [r7, #24]
 8024e36:	2b00      	cmp	r3, #0
 8024e38:	d102      	bne.n	8024e40 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8024e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8024e3e:	e05d      	b.n	8024efc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8024e40:	69bb      	ldr	r3, [r7, #24]
 8024e42:	895b      	ldrh	r3, [r3, #10]
 8024e44:	2b1b      	cmp	r3, #27
 8024e46:	d806      	bhi.n	8024e56 <etharp_raw+0x56>
 8024e48:	4b2e      	ldr	r3, [pc, #184]	; (8024f04 <etharp_raw+0x104>)
 8024e4a:	f240 4262 	movw	r2, #1122	; 0x462
 8024e4e:	4930      	ldr	r1, [pc, #192]	; (8024f10 <etharp_raw+0x110>)
 8024e50:	482e      	ldr	r0, [pc, #184]	; (8024f0c <etharp_raw+0x10c>)
 8024e52:	f001 fdf7 	bl	8026a44 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8024e56:	69bb      	ldr	r3, [r7, #24]
 8024e58:	685b      	ldr	r3, [r3, #4]
 8024e5a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8024e5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8024e5e:	4618      	mov	r0, r3
 8024e60:	f7fc fcdc 	bl	802181c <lwip_htons>
 8024e64:	4603      	mov	r3, r0
 8024e66:	461a      	mov	r2, r3
 8024e68:	697b      	ldr	r3, [r7, #20]
 8024e6a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8024e6c:	68fb      	ldr	r3, [r7, #12]
 8024e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024e72:	2b06      	cmp	r3, #6
 8024e74:	d006      	beq.n	8024e84 <etharp_raw+0x84>
 8024e76:	4b23      	ldr	r3, [pc, #140]	; (8024f04 <etharp_raw+0x104>)
 8024e78:	f240 4269 	movw	r2, #1129	; 0x469
 8024e7c:	4925      	ldr	r1, [pc, #148]	; (8024f14 <etharp_raw+0x114>)
 8024e7e:	4823      	ldr	r0, [pc, #140]	; (8024f0c <etharp_raw+0x10c>)
 8024e80:	f001 fde0 	bl	8026a44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8024e84:	697b      	ldr	r3, [r7, #20]
 8024e86:	3308      	adds	r3, #8
 8024e88:	2206      	movs	r2, #6
 8024e8a:	6839      	ldr	r1, [r7, #0]
 8024e8c:	4618      	mov	r0, r3
 8024e8e:	f001 fcc9 	bl	8026824 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8024e92:	697b      	ldr	r3, [r7, #20]
 8024e94:	3312      	adds	r3, #18
 8024e96:	2206      	movs	r2, #6
 8024e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024e9a:	4618      	mov	r0, r3
 8024e9c:	f001 fcc2 	bl	8026824 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8024ea0:	697b      	ldr	r3, [r7, #20]
 8024ea2:	330e      	adds	r3, #14
 8024ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024ea6:	6812      	ldr	r2, [r2, #0]
 8024ea8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8024eaa:	697b      	ldr	r3, [r7, #20]
 8024eac:	3318      	adds	r3, #24
 8024eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024eb0:	6812      	ldr	r2, [r2, #0]
 8024eb2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8024eb4:	697b      	ldr	r3, [r7, #20]
 8024eb6:	2200      	movs	r2, #0
 8024eb8:	701a      	strb	r2, [r3, #0]
 8024eba:	2200      	movs	r2, #0
 8024ebc:	f042 0201 	orr.w	r2, r2, #1
 8024ec0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8024ec2:	697b      	ldr	r3, [r7, #20]
 8024ec4:	2200      	movs	r2, #0
 8024ec6:	f042 0208 	orr.w	r2, r2, #8
 8024eca:	709a      	strb	r2, [r3, #2]
 8024ecc:	2200      	movs	r2, #0
 8024ece:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8024ed0:	697b      	ldr	r3, [r7, #20]
 8024ed2:	2206      	movs	r2, #6
 8024ed4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8024ed6:	697b      	ldr	r3, [r7, #20]
 8024ed8:	2204      	movs	r2, #4
 8024eda:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8024edc:	f640 0306 	movw	r3, #2054	; 0x806
 8024ee0:	9300      	str	r3, [sp, #0]
 8024ee2:	687b      	ldr	r3, [r7, #4]
 8024ee4:	68ba      	ldr	r2, [r7, #8]
 8024ee6:	69b9      	ldr	r1, [r7, #24]
 8024ee8:	68f8      	ldr	r0, [r7, #12]
 8024eea:	f001 fc0f 	bl	802670c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8024eee:	69b8      	ldr	r0, [r7, #24]
 8024ef0:	f7fe f870 	bl	8022fd4 <pbuf_free>
  p = NULL;
 8024ef4:	2300      	movs	r3, #0
 8024ef6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8024ef8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8024efc:	4618      	mov	r0, r3
 8024efe:	3720      	adds	r7, #32
 8024f00:	46bd      	mov	sp, r7
 8024f02:	bd80      	pop	{r7, pc}
 8024f04:	0802d26c 	.word	0x0802d26c
 8024f08:	0802d3bc 	.word	0x0802d3bc
 8024f0c:	0802d2e4 	.word	0x0802d2e4
 8024f10:	0802d46c 	.word	0x0802d46c
 8024f14:	0802d4a0 	.word	0x0802d4a0

08024f18 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8024f18:	b580      	push	{r7, lr}
 8024f1a:	b088      	sub	sp, #32
 8024f1c:	af04      	add	r7, sp, #16
 8024f1e:	60f8      	str	r0, [r7, #12]
 8024f20:	60b9      	str	r1, [r7, #8]
 8024f22:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8024f24:	68fb      	ldr	r3, [r7, #12]
 8024f26:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8024f2a:	68fb      	ldr	r3, [r7, #12]
 8024f2c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8024f30:	68fb      	ldr	r3, [r7, #12]
 8024f32:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8024f34:	2201      	movs	r2, #1
 8024f36:	9203      	str	r2, [sp, #12]
 8024f38:	68ba      	ldr	r2, [r7, #8]
 8024f3a:	9202      	str	r2, [sp, #8]
 8024f3c:	4a06      	ldr	r2, [pc, #24]	; (8024f58 <etharp_request_dst+0x40>)
 8024f3e:	9201      	str	r2, [sp, #4]
 8024f40:	9300      	str	r3, [sp, #0]
 8024f42:	4603      	mov	r3, r0
 8024f44:	687a      	ldr	r2, [r7, #4]
 8024f46:	68f8      	ldr	r0, [r7, #12]
 8024f48:	f7ff ff5a 	bl	8024e00 <etharp_raw>
 8024f4c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8024f4e:	4618      	mov	r0, r3
 8024f50:	3710      	adds	r7, #16
 8024f52:	46bd      	mov	sp, r7
 8024f54:	bd80      	pop	{r7, pc}
 8024f56:	bf00      	nop
 8024f58:	0802ddf4 	.word	0x0802ddf4

08024f5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8024f5c:	b580      	push	{r7, lr}
 8024f5e:	b082      	sub	sp, #8
 8024f60:	af00      	add	r7, sp, #0
 8024f62:	6078      	str	r0, [r7, #4]
 8024f64:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8024f66:	4a05      	ldr	r2, [pc, #20]	; (8024f7c <etharp_request+0x20>)
 8024f68:	6839      	ldr	r1, [r7, #0]
 8024f6a:	6878      	ldr	r0, [r7, #4]
 8024f6c:	f7ff ffd4 	bl	8024f18 <etharp_request_dst>
 8024f70:	4603      	mov	r3, r0
}
 8024f72:	4618      	mov	r0, r3
 8024f74:	3708      	adds	r7, #8
 8024f76:	46bd      	mov	sp, r7
 8024f78:	bd80      	pop	{r7, pc}
 8024f7a:	bf00      	nop
 8024f7c:	0802ddec 	.word	0x0802ddec

08024f80 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8024f80:	b580      	push	{r7, lr}
 8024f82:	b08e      	sub	sp, #56	; 0x38
 8024f84:	af04      	add	r7, sp, #16
 8024f86:	6078      	str	r0, [r7, #4]
 8024f88:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8024f8a:	4b79      	ldr	r3, [pc, #484]	; (8025170 <icmp_input+0x1f0>)
 8024f8c:	689b      	ldr	r3, [r3, #8]
 8024f8e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8024f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f92:	781b      	ldrb	r3, [r3, #0]
 8024f94:	f003 030f 	and.w	r3, r3, #15
 8024f98:	b2db      	uxtb	r3, r3
 8024f9a:	009b      	lsls	r3, r3, #2
 8024f9c:	b2db      	uxtb	r3, r3
 8024f9e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8024fa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024fa2:	2b13      	cmp	r3, #19
 8024fa4:	f240 80cd 	bls.w	8025142 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8024fa8:	687b      	ldr	r3, [r7, #4]
 8024faa:	895b      	ldrh	r3, [r3, #10]
 8024fac:	2b03      	cmp	r3, #3
 8024fae:	f240 80ca 	bls.w	8025146 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8024fb2:	687b      	ldr	r3, [r7, #4]
 8024fb4:	685b      	ldr	r3, [r3, #4]
 8024fb6:	781b      	ldrb	r3, [r3, #0]
 8024fb8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8024fbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8024fc0:	2b00      	cmp	r3, #0
 8024fc2:	f000 80b7 	beq.w	8025134 <icmp_input+0x1b4>
 8024fc6:	2b08      	cmp	r3, #8
 8024fc8:	f040 80b7 	bne.w	802513a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8024fcc:	4b69      	ldr	r3, [pc, #420]	; (8025174 <icmp_input+0x1f4>)
 8024fce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024fd0:	4b67      	ldr	r3, [pc, #412]	; (8025170 <icmp_input+0x1f0>)
 8024fd2:	695b      	ldr	r3, [r3, #20]
 8024fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024fd8:	2be0      	cmp	r3, #224	; 0xe0
 8024fda:	f000 80bb 	beq.w	8025154 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8024fde:	4b64      	ldr	r3, [pc, #400]	; (8025170 <icmp_input+0x1f0>)
 8024fe0:	695b      	ldr	r3, [r3, #20]
 8024fe2:	4a63      	ldr	r2, [pc, #396]	; (8025170 <icmp_input+0x1f0>)
 8024fe4:	6812      	ldr	r2, [r2, #0]
 8024fe6:	4611      	mov	r1, r2
 8024fe8:	4618      	mov	r0, r3
 8024fea:	f000 fbf1 	bl	80257d0 <ip4_addr_isbroadcast_u32>
 8024fee:	4603      	mov	r3, r0
 8024ff0:	2b00      	cmp	r3, #0
 8024ff2:	f040 80b1 	bne.w	8025158 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8024ff6:	687b      	ldr	r3, [r7, #4]
 8024ff8:	891b      	ldrh	r3, [r3, #8]
 8024ffa:	2b07      	cmp	r3, #7
 8024ffc:	f240 80a5 	bls.w	802514a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8025000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8025002:	330e      	adds	r3, #14
 8025004:	4619      	mov	r1, r3
 8025006:	6878      	ldr	r0, [r7, #4]
 8025008:	f7fd ff4e 	bl	8022ea8 <pbuf_add_header>
 802500c:	4603      	mov	r3, r0
 802500e:	2b00      	cmp	r3, #0
 8025010:	d04b      	beq.n	80250aa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8025012:	687b      	ldr	r3, [r7, #4]
 8025014:	891a      	ldrh	r2, [r3, #8]
 8025016:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8025018:	4413      	add	r3, r2
 802501a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 802501c:	687b      	ldr	r3, [r7, #4]
 802501e:	891b      	ldrh	r3, [r3, #8]
 8025020:	8b7a      	ldrh	r2, [r7, #26]
 8025022:	429a      	cmp	r2, r3
 8025024:	f0c0 809a 	bcc.w	802515c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8025028:	8b7b      	ldrh	r3, [r7, #26]
 802502a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802502e:	4619      	mov	r1, r3
 8025030:	200e      	movs	r0, #14
 8025032:	f7fd fced 	bl	8022a10 <pbuf_alloc>
 8025036:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8025038:	697b      	ldr	r3, [r7, #20]
 802503a:	2b00      	cmp	r3, #0
 802503c:	f000 8090 	beq.w	8025160 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8025040:	697b      	ldr	r3, [r7, #20]
 8025042:	895b      	ldrh	r3, [r3, #10]
 8025044:	461a      	mov	r2, r3
 8025046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8025048:	3308      	adds	r3, #8
 802504a:	429a      	cmp	r2, r3
 802504c:	d203      	bcs.n	8025056 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 802504e:	6978      	ldr	r0, [r7, #20]
 8025050:	f7fd ffc0 	bl	8022fd4 <pbuf_free>
          goto icmperr;
 8025054:	e085      	b.n	8025162 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8025056:	697b      	ldr	r3, [r7, #20]
 8025058:	685b      	ldr	r3, [r3, #4]
 802505a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802505c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802505e:	4618      	mov	r0, r3
 8025060:	f001 fbe0 	bl	8026824 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8025064:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8025066:	4619      	mov	r1, r3
 8025068:	6978      	ldr	r0, [r7, #20]
 802506a:	f7fd ff2d 	bl	8022ec8 <pbuf_remove_header>
 802506e:	4603      	mov	r3, r0
 8025070:	2b00      	cmp	r3, #0
 8025072:	d009      	beq.n	8025088 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8025074:	4b40      	ldr	r3, [pc, #256]	; (8025178 <icmp_input+0x1f8>)
 8025076:	22b6      	movs	r2, #182	; 0xb6
 8025078:	4940      	ldr	r1, [pc, #256]	; (802517c <icmp_input+0x1fc>)
 802507a:	4841      	ldr	r0, [pc, #260]	; (8025180 <icmp_input+0x200>)
 802507c:	f001 fce2 	bl	8026a44 <iprintf>
          pbuf_free(r);
 8025080:	6978      	ldr	r0, [r7, #20]
 8025082:	f7fd ffa7 	bl	8022fd4 <pbuf_free>
          goto icmperr;
 8025086:	e06c      	b.n	8025162 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8025088:	6879      	ldr	r1, [r7, #4]
 802508a:	6978      	ldr	r0, [r7, #20]
 802508c:	f7fe f8ca 	bl	8023224 <pbuf_copy>
 8025090:	4603      	mov	r3, r0
 8025092:	2b00      	cmp	r3, #0
 8025094:	d003      	beq.n	802509e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8025096:	6978      	ldr	r0, [r7, #20]
 8025098:	f7fd ff9c 	bl	8022fd4 <pbuf_free>
          goto icmperr;
 802509c:	e061      	b.n	8025162 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802509e:	6878      	ldr	r0, [r7, #4]
 80250a0:	f7fd ff98 	bl	8022fd4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80250a4:	697b      	ldr	r3, [r7, #20]
 80250a6:	607b      	str	r3, [r7, #4]
 80250a8:	e00f      	b.n	80250ca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80250aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80250ac:	330e      	adds	r3, #14
 80250ae:	4619      	mov	r1, r3
 80250b0:	6878      	ldr	r0, [r7, #4]
 80250b2:	f7fd ff09 	bl	8022ec8 <pbuf_remove_header>
 80250b6:	4603      	mov	r3, r0
 80250b8:	2b00      	cmp	r3, #0
 80250ba:	d006      	beq.n	80250ca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80250bc:	4b2e      	ldr	r3, [pc, #184]	; (8025178 <icmp_input+0x1f8>)
 80250be:	22c7      	movs	r2, #199	; 0xc7
 80250c0:	4930      	ldr	r1, [pc, #192]	; (8025184 <icmp_input+0x204>)
 80250c2:	482f      	ldr	r0, [pc, #188]	; (8025180 <icmp_input+0x200>)
 80250c4:	f001 fcbe 	bl	8026a44 <iprintf>
          goto icmperr;
 80250c8:	e04b      	b.n	8025162 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80250ca:	687b      	ldr	r3, [r7, #4]
 80250cc:	685b      	ldr	r3, [r3, #4]
 80250ce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80250d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80250d2:	4619      	mov	r1, r3
 80250d4:	6878      	ldr	r0, [r7, #4]
 80250d6:	f7fd fee7 	bl	8022ea8 <pbuf_add_header>
 80250da:	4603      	mov	r3, r0
 80250dc:	2b00      	cmp	r3, #0
 80250de:	d12b      	bne.n	8025138 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80250e0:	687b      	ldr	r3, [r7, #4]
 80250e2:	685b      	ldr	r3, [r3, #4]
 80250e4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80250e6:	69fb      	ldr	r3, [r7, #28]
 80250e8:	681a      	ldr	r2, [r3, #0]
 80250ea:	68fb      	ldr	r3, [r7, #12]
 80250ec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80250ee:	4b20      	ldr	r3, [pc, #128]	; (8025170 <icmp_input+0x1f0>)
 80250f0:	691a      	ldr	r2, [r3, #16]
 80250f2:	68fb      	ldr	r3, [r7, #12]
 80250f4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80250f6:	693b      	ldr	r3, [r7, #16]
 80250f8:	2200      	movs	r2, #0
 80250fa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80250fc:	693b      	ldr	r3, [r7, #16]
 80250fe:	2200      	movs	r2, #0
 8025100:	709a      	strb	r2, [r3, #2]
 8025102:	2200      	movs	r2, #0
 8025104:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8025106:	68fb      	ldr	r3, [r7, #12]
 8025108:	22ff      	movs	r2, #255	; 0xff
 802510a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 802510c:	68fb      	ldr	r3, [r7, #12]
 802510e:	2200      	movs	r2, #0
 8025110:	729a      	strb	r2, [r3, #10]
 8025112:	2200      	movs	r2, #0
 8025114:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8025116:	683b      	ldr	r3, [r7, #0]
 8025118:	9302      	str	r3, [sp, #8]
 802511a:	2301      	movs	r3, #1
 802511c:	9301      	str	r3, [sp, #4]
 802511e:	2300      	movs	r3, #0
 8025120:	9300      	str	r3, [sp, #0]
 8025122:	23ff      	movs	r3, #255	; 0xff
 8025124:	2200      	movs	r2, #0
 8025126:	69f9      	ldr	r1, [r7, #28]
 8025128:	6878      	ldr	r0, [r7, #4]
 802512a:	f000 fa6b 	bl	8025604 <ip4_output_if>
 802512e:	4603      	mov	r3, r0
 8025130:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8025132:	e001      	b.n	8025138 <icmp_input+0x1b8>
      break;
 8025134:	bf00      	nop
 8025136:	e000      	b.n	802513a <icmp_input+0x1ba>
      break;
 8025138:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 802513a:	6878      	ldr	r0, [r7, #4]
 802513c:	f7fd ff4a 	bl	8022fd4 <pbuf_free>
  return;
 8025140:	e013      	b.n	802516a <icmp_input+0x1ea>
    goto lenerr;
 8025142:	bf00      	nop
 8025144:	e002      	b.n	802514c <icmp_input+0x1cc>
    goto lenerr;
 8025146:	bf00      	nop
 8025148:	e000      	b.n	802514c <icmp_input+0x1cc>
        goto lenerr;
 802514a:	bf00      	nop
lenerr:
  pbuf_free(p);
 802514c:	6878      	ldr	r0, [r7, #4]
 802514e:	f7fd ff41 	bl	8022fd4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8025152:	e00a      	b.n	802516a <icmp_input+0x1ea>
        goto icmperr;
 8025154:	bf00      	nop
 8025156:	e004      	b.n	8025162 <icmp_input+0x1e2>
        goto icmperr;
 8025158:	bf00      	nop
 802515a:	e002      	b.n	8025162 <icmp_input+0x1e2>
          goto icmperr;
 802515c:	bf00      	nop
 802515e:	e000      	b.n	8025162 <icmp_input+0x1e2>
          goto icmperr;
 8025160:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8025162:	6878      	ldr	r0, [r7, #4]
 8025164:	f7fd ff36 	bl	8022fd4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8025168:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 802516a:	3728      	adds	r7, #40	; 0x28
 802516c:	46bd      	mov	sp, r7
 802516e:	bd80      	pop	{r7, pc}
 8025170:	200127d4 	.word	0x200127d4
 8025174:	200127e8 	.word	0x200127e8
 8025178:	0802d4e4 	.word	0x0802d4e4
 802517c:	0802d51c 	.word	0x0802d51c
 8025180:	0802d554 	.word	0x0802d554
 8025184:	0802d57c 	.word	0x0802d57c

08025188 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8025188:	b580      	push	{r7, lr}
 802518a:	b082      	sub	sp, #8
 802518c:	af00      	add	r7, sp, #0
 802518e:	6078      	str	r0, [r7, #4]
 8025190:	460b      	mov	r3, r1
 8025192:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8025194:	78fb      	ldrb	r3, [r7, #3]
 8025196:	461a      	mov	r2, r3
 8025198:	2103      	movs	r1, #3
 802519a:	6878      	ldr	r0, [r7, #4]
 802519c:	f000 f814 	bl	80251c8 <icmp_send_response>
}
 80251a0:	bf00      	nop
 80251a2:	3708      	adds	r7, #8
 80251a4:	46bd      	mov	sp, r7
 80251a6:	bd80      	pop	{r7, pc}

080251a8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80251a8:	b580      	push	{r7, lr}
 80251aa:	b082      	sub	sp, #8
 80251ac:	af00      	add	r7, sp, #0
 80251ae:	6078      	str	r0, [r7, #4]
 80251b0:	460b      	mov	r3, r1
 80251b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80251b4:	78fb      	ldrb	r3, [r7, #3]
 80251b6:	461a      	mov	r2, r3
 80251b8:	210b      	movs	r1, #11
 80251ba:	6878      	ldr	r0, [r7, #4]
 80251bc:	f000 f804 	bl	80251c8 <icmp_send_response>
}
 80251c0:	bf00      	nop
 80251c2:	3708      	adds	r7, #8
 80251c4:	46bd      	mov	sp, r7
 80251c6:	bd80      	pop	{r7, pc}

080251c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80251c8:	b580      	push	{r7, lr}
 80251ca:	b08c      	sub	sp, #48	; 0x30
 80251cc:	af04      	add	r7, sp, #16
 80251ce:	6078      	str	r0, [r7, #4]
 80251d0:	460b      	mov	r3, r1
 80251d2:	70fb      	strb	r3, [r7, #3]
 80251d4:	4613      	mov	r3, r2
 80251d6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80251d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80251dc:	2124      	movs	r1, #36	; 0x24
 80251de:	2022      	movs	r0, #34	; 0x22
 80251e0:	f7fd fc16 	bl	8022a10 <pbuf_alloc>
 80251e4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80251e6:	69fb      	ldr	r3, [r7, #28]
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	d04c      	beq.n	8025286 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80251ec:	69fb      	ldr	r3, [r7, #28]
 80251ee:	895b      	ldrh	r3, [r3, #10]
 80251f0:	2b23      	cmp	r3, #35	; 0x23
 80251f2:	d806      	bhi.n	8025202 <icmp_send_response+0x3a>
 80251f4:	4b26      	ldr	r3, [pc, #152]	; (8025290 <icmp_send_response+0xc8>)
 80251f6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80251fa:	4926      	ldr	r1, [pc, #152]	; (8025294 <icmp_send_response+0xcc>)
 80251fc:	4826      	ldr	r0, [pc, #152]	; (8025298 <icmp_send_response+0xd0>)
 80251fe:	f001 fc21 	bl	8026a44 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8025202:	687b      	ldr	r3, [r7, #4]
 8025204:	685b      	ldr	r3, [r3, #4]
 8025206:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8025208:	69fb      	ldr	r3, [r7, #28]
 802520a:	685b      	ldr	r3, [r3, #4]
 802520c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 802520e:	697b      	ldr	r3, [r7, #20]
 8025210:	78fa      	ldrb	r2, [r7, #3]
 8025212:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8025214:	697b      	ldr	r3, [r7, #20]
 8025216:	78ba      	ldrb	r2, [r7, #2]
 8025218:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 802521a:	697b      	ldr	r3, [r7, #20]
 802521c:	2200      	movs	r2, #0
 802521e:	711a      	strb	r2, [r3, #4]
 8025220:	2200      	movs	r2, #0
 8025222:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8025224:	697b      	ldr	r3, [r7, #20]
 8025226:	2200      	movs	r2, #0
 8025228:	719a      	strb	r2, [r3, #6]
 802522a:	2200      	movs	r2, #0
 802522c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 802522e:	69fb      	ldr	r3, [r7, #28]
 8025230:	685b      	ldr	r3, [r3, #4]
 8025232:	f103 0008 	add.w	r0, r3, #8
 8025236:	687b      	ldr	r3, [r7, #4]
 8025238:	685b      	ldr	r3, [r3, #4]
 802523a:	221c      	movs	r2, #28
 802523c:	4619      	mov	r1, r3
 802523e:	f001 faf1 	bl	8026824 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8025242:	69bb      	ldr	r3, [r7, #24]
 8025244:	68db      	ldr	r3, [r3, #12]
 8025246:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8025248:	f107 030c 	add.w	r3, r7, #12
 802524c:	4618      	mov	r0, r3
 802524e:	f000 f825 	bl	802529c <ip4_route>
 8025252:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8025254:	693b      	ldr	r3, [r7, #16]
 8025256:	2b00      	cmp	r3, #0
 8025258:	d011      	beq.n	802527e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 802525a:	697b      	ldr	r3, [r7, #20]
 802525c:	2200      	movs	r2, #0
 802525e:	709a      	strb	r2, [r3, #2]
 8025260:	2200      	movs	r2, #0
 8025262:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8025264:	f107 020c 	add.w	r2, r7, #12
 8025268:	693b      	ldr	r3, [r7, #16]
 802526a:	9302      	str	r3, [sp, #8]
 802526c:	2301      	movs	r3, #1
 802526e:	9301      	str	r3, [sp, #4]
 8025270:	2300      	movs	r3, #0
 8025272:	9300      	str	r3, [sp, #0]
 8025274:	23ff      	movs	r3, #255	; 0xff
 8025276:	2100      	movs	r1, #0
 8025278:	69f8      	ldr	r0, [r7, #28]
 802527a:	f000 f9c3 	bl	8025604 <ip4_output_if>
  }
  pbuf_free(q);
 802527e:	69f8      	ldr	r0, [r7, #28]
 8025280:	f7fd fea8 	bl	8022fd4 <pbuf_free>
 8025284:	e000      	b.n	8025288 <icmp_send_response+0xc0>
    return;
 8025286:	bf00      	nop
}
 8025288:	3720      	adds	r7, #32
 802528a:	46bd      	mov	sp, r7
 802528c:	bd80      	pop	{r7, pc}
 802528e:	bf00      	nop
 8025290:	0802d4e4 	.word	0x0802d4e4
 8025294:	0802d5b0 	.word	0x0802d5b0
 8025298:	0802d554 	.word	0x0802d554

0802529c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 802529c:	b480      	push	{r7}
 802529e:	b085      	sub	sp, #20
 80252a0:	af00      	add	r7, sp, #0
 80252a2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80252a4:	4b33      	ldr	r3, [pc, #204]	; (8025374 <ip4_route+0xd8>)
 80252a6:	681b      	ldr	r3, [r3, #0]
 80252a8:	60fb      	str	r3, [r7, #12]
 80252aa:	e036      	b.n	802531a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80252ac:	68fb      	ldr	r3, [r7, #12]
 80252ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80252b2:	f003 0301 	and.w	r3, r3, #1
 80252b6:	b2db      	uxtb	r3, r3
 80252b8:	2b00      	cmp	r3, #0
 80252ba:	d02b      	beq.n	8025314 <ip4_route+0x78>
 80252bc:	68fb      	ldr	r3, [r7, #12]
 80252be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80252c2:	089b      	lsrs	r3, r3, #2
 80252c4:	f003 0301 	and.w	r3, r3, #1
 80252c8:	b2db      	uxtb	r3, r3
 80252ca:	2b00      	cmp	r3, #0
 80252cc:	d022      	beq.n	8025314 <ip4_route+0x78>
 80252ce:	68fb      	ldr	r3, [r7, #12]
 80252d0:	3304      	adds	r3, #4
 80252d2:	681b      	ldr	r3, [r3, #0]
 80252d4:	2b00      	cmp	r3, #0
 80252d6:	d01d      	beq.n	8025314 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80252d8:	687b      	ldr	r3, [r7, #4]
 80252da:	681a      	ldr	r2, [r3, #0]
 80252dc:	68fb      	ldr	r3, [r7, #12]
 80252de:	3304      	adds	r3, #4
 80252e0:	681b      	ldr	r3, [r3, #0]
 80252e2:	405a      	eors	r2, r3
 80252e4:	68fb      	ldr	r3, [r7, #12]
 80252e6:	3308      	adds	r3, #8
 80252e8:	681b      	ldr	r3, [r3, #0]
 80252ea:	4013      	ands	r3, r2
 80252ec:	2b00      	cmp	r3, #0
 80252ee:	d101      	bne.n	80252f4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80252f0:	68fb      	ldr	r3, [r7, #12]
 80252f2:	e038      	b.n	8025366 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80252f4:	68fb      	ldr	r3, [r7, #12]
 80252f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80252fa:	f003 0302 	and.w	r3, r3, #2
 80252fe:	2b00      	cmp	r3, #0
 8025300:	d108      	bne.n	8025314 <ip4_route+0x78>
 8025302:	687b      	ldr	r3, [r7, #4]
 8025304:	681a      	ldr	r2, [r3, #0]
 8025306:	68fb      	ldr	r3, [r7, #12]
 8025308:	330c      	adds	r3, #12
 802530a:	681b      	ldr	r3, [r3, #0]
 802530c:	429a      	cmp	r2, r3
 802530e:	d101      	bne.n	8025314 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8025310:	68fb      	ldr	r3, [r7, #12]
 8025312:	e028      	b.n	8025366 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8025314:	68fb      	ldr	r3, [r7, #12]
 8025316:	681b      	ldr	r3, [r3, #0]
 8025318:	60fb      	str	r3, [r7, #12]
 802531a:	68fb      	ldr	r3, [r7, #12]
 802531c:	2b00      	cmp	r3, #0
 802531e:	d1c5      	bne.n	80252ac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8025320:	4b15      	ldr	r3, [pc, #84]	; (8025378 <ip4_route+0xdc>)
 8025322:	681b      	ldr	r3, [r3, #0]
 8025324:	2b00      	cmp	r3, #0
 8025326:	d01a      	beq.n	802535e <ip4_route+0xc2>
 8025328:	4b13      	ldr	r3, [pc, #76]	; (8025378 <ip4_route+0xdc>)
 802532a:	681b      	ldr	r3, [r3, #0]
 802532c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025330:	f003 0301 	and.w	r3, r3, #1
 8025334:	2b00      	cmp	r3, #0
 8025336:	d012      	beq.n	802535e <ip4_route+0xc2>
 8025338:	4b0f      	ldr	r3, [pc, #60]	; (8025378 <ip4_route+0xdc>)
 802533a:	681b      	ldr	r3, [r3, #0]
 802533c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025340:	f003 0304 	and.w	r3, r3, #4
 8025344:	2b00      	cmp	r3, #0
 8025346:	d00a      	beq.n	802535e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8025348:	4b0b      	ldr	r3, [pc, #44]	; (8025378 <ip4_route+0xdc>)
 802534a:	681b      	ldr	r3, [r3, #0]
 802534c:	3304      	adds	r3, #4
 802534e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8025350:	2b00      	cmp	r3, #0
 8025352:	d004      	beq.n	802535e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	681b      	ldr	r3, [r3, #0]
 8025358:	b2db      	uxtb	r3, r3
 802535a:	2b7f      	cmp	r3, #127	; 0x7f
 802535c:	d101      	bne.n	8025362 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802535e:	2300      	movs	r3, #0
 8025360:	e001      	b.n	8025366 <ip4_route+0xca>
  }

  return netif_default;
 8025362:	4b05      	ldr	r3, [pc, #20]	; (8025378 <ip4_route+0xdc>)
 8025364:	681b      	ldr	r3, [r3, #0]
}
 8025366:	4618      	mov	r0, r3
 8025368:	3714      	adds	r7, #20
 802536a:	46bd      	mov	sp, r7
 802536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025370:	4770      	bx	lr
 8025372:	bf00      	nop
 8025374:	20015de4 	.word	0x20015de4
 8025378:	20015de8 	.word	0x20015de8

0802537c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 802537c:	b580      	push	{r7, lr}
 802537e:	b082      	sub	sp, #8
 8025380:	af00      	add	r7, sp, #0
 8025382:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802538a:	f003 0301 	and.w	r3, r3, #1
 802538e:	b2db      	uxtb	r3, r3
 8025390:	2b00      	cmp	r3, #0
 8025392:	d016      	beq.n	80253c2 <ip4_input_accept+0x46>
 8025394:	687b      	ldr	r3, [r7, #4]
 8025396:	3304      	adds	r3, #4
 8025398:	681b      	ldr	r3, [r3, #0]
 802539a:	2b00      	cmp	r3, #0
 802539c:	d011      	beq.n	80253c2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802539e:	4b0b      	ldr	r3, [pc, #44]	; (80253cc <ip4_input_accept+0x50>)
 80253a0:	695a      	ldr	r2, [r3, #20]
 80253a2:	687b      	ldr	r3, [r7, #4]
 80253a4:	3304      	adds	r3, #4
 80253a6:	681b      	ldr	r3, [r3, #0]
 80253a8:	429a      	cmp	r2, r3
 80253aa:	d008      	beq.n	80253be <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80253ac:	4b07      	ldr	r3, [pc, #28]	; (80253cc <ip4_input_accept+0x50>)
 80253ae:	695b      	ldr	r3, [r3, #20]
 80253b0:	6879      	ldr	r1, [r7, #4]
 80253b2:	4618      	mov	r0, r3
 80253b4:	f000 fa0c 	bl	80257d0 <ip4_addr_isbroadcast_u32>
 80253b8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80253ba:	2b00      	cmp	r3, #0
 80253bc:	d001      	beq.n	80253c2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80253be:	2301      	movs	r3, #1
 80253c0:	e000      	b.n	80253c4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80253c2:	2300      	movs	r3, #0
}
 80253c4:	4618      	mov	r0, r3
 80253c6:	3708      	adds	r7, #8
 80253c8:	46bd      	mov	sp, r7
 80253ca:	bd80      	pop	{r7, pc}
 80253cc:	200127d4 	.word	0x200127d4

080253d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80253d0:	b580      	push	{r7, lr}
 80253d2:	b086      	sub	sp, #24
 80253d4:	af00      	add	r7, sp, #0
 80253d6:	6078      	str	r0, [r7, #4]
 80253d8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80253da:	687b      	ldr	r3, [r7, #4]
 80253dc:	685b      	ldr	r3, [r3, #4]
 80253de:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80253e0:	697b      	ldr	r3, [r7, #20]
 80253e2:	781b      	ldrb	r3, [r3, #0]
 80253e4:	091b      	lsrs	r3, r3, #4
 80253e6:	b2db      	uxtb	r3, r3
 80253e8:	2b04      	cmp	r3, #4
 80253ea:	d004      	beq.n	80253f6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80253ec:	6878      	ldr	r0, [r7, #4]
 80253ee:	f7fd fdf1 	bl	8022fd4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80253f2:	2300      	movs	r3, #0
 80253f4:	e0fd      	b.n	80255f2 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80253f6:	697b      	ldr	r3, [r7, #20]
 80253f8:	781b      	ldrb	r3, [r3, #0]
 80253fa:	f003 030f 	and.w	r3, r3, #15
 80253fe:	b2db      	uxtb	r3, r3
 8025400:	009b      	lsls	r3, r3, #2
 8025402:	b2db      	uxtb	r3, r3
 8025404:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8025406:	697b      	ldr	r3, [r7, #20]
 8025408:	885b      	ldrh	r3, [r3, #2]
 802540a:	b29b      	uxth	r3, r3
 802540c:	4618      	mov	r0, r3
 802540e:	f7fc fa05 	bl	802181c <lwip_htons>
 8025412:	4603      	mov	r3, r0
 8025414:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8025416:	687b      	ldr	r3, [r7, #4]
 8025418:	891b      	ldrh	r3, [r3, #8]
 802541a:	89ba      	ldrh	r2, [r7, #12]
 802541c:	429a      	cmp	r2, r3
 802541e:	d204      	bcs.n	802542a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8025420:	89bb      	ldrh	r3, [r7, #12]
 8025422:	4619      	mov	r1, r3
 8025424:	6878      	ldr	r0, [r7, #4]
 8025426:	f7fd fc4f 	bl	8022cc8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802542a:	687b      	ldr	r3, [r7, #4]
 802542c:	895b      	ldrh	r3, [r3, #10]
 802542e:	89fa      	ldrh	r2, [r7, #14]
 8025430:	429a      	cmp	r2, r3
 8025432:	d807      	bhi.n	8025444 <ip4_input+0x74>
 8025434:	687b      	ldr	r3, [r7, #4]
 8025436:	891b      	ldrh	r3, [r3, #8]
 8025438:	89ba      	ldrh	r2, [r7, #12]
 802543a:	429a      	cmp	r2, r3
 802543c:	d802      	bhi.n	8025444 <ip4_input+0x74>
 802543e:	89fb      	ldrh	r3, [r7, #14]
 8025440:	2b13      	cmp	r3, #19
 8025442:	d804      	bhi.n	802544e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8025444:	6878      	ldr	r0, [r7, #4]
 8025446:	f7fd fdc5 	bl	8022fd4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802544a:	2300      	movs	r3, #0
 802544c:	e0d1      	b.n	80255f2 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802544e:	697b      	ldr	r3, [r7, #20]
 8025450:	691b      	ldr	r3, [r3, #16]
 8025452:	4a6a      	ldr	r2, [pc, #424]	; (80255fc <ip4_input+0x22c>)
 8025454:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8025456:	697b      	ldr	r3, [r7, #20]
 8025458:	68db      	ldr	r3, [r3, #12]
 802545a:	4a68      	ldr	r2, [pc, #416]	; (80255fc <ip4_input+0x22c>)
 802545c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802545e:	4b67      	ldr	r3, [pc, #412]	; (80255fc <ip4_input+0x22c>)
 8025460:	695b      	ldr	r3, [r3, #20]
 8025462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8025466:	2be0      	cmp	r3, #224	; 0xe0
 8025468:	d112      	bne.n	8025490 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802546a:	683b      	ldr	r3, [r7, #0]
 802546c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025470:	f003 0301 	and.w	r3, r3, #1
 8025474:	b2db      	uxtb	r3, r3
 8025476:	2b00      	cmp	r3, #0
 8025478:	d007      	beq.n	802548a <ip4_input+0xba>
 802547a:	683b      	ldr	r3, [r7, #0]
 802547c:	3304      	adds	r3, #4
 802547e:	681b      	ldr	r3, [r3, #0]
 8025480:	2b00      	cmp	r3, #0
 8025482:	d002      	beq.n	802548a <ip4_input+0xba>
      netif = inp;
 8025484:	683b      	ldr	r3, [r7, #0]
 8025486:	613b      	str	r3, [r7, #16]
 8025488:	e02a      	b.n	80254e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 802548a:	2300      	movs	r3, #0
 802548c:	613b      	str	r3, [r7, #16]
 802548e:	e027      	b.n	80254e0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8025490:	6838      	ldr	r0, [r7, #0]
 8025492:	f7ff ff73 	bl	802537c <ip4_input_accept>
 8025496:	4603      	mov	r3, r0
 8025498:	2b00      	cmp	r3, #0
 802549a:	d002      	beq.n	80254a2 <ip4_input+0xd2>
      netif = inp;
 802549c:	683b      	ldr	r3, [r7, #0]
 802549e:	613b      	str	r3, [r7, #16]
 80254a0:	e01e      	b.n	80254e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 80254a2:	2300      	movs	r3, #0
 80254a4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80254a6:	4b55      	ldr	r3, [pc, #340]	; (80255fc <ip4_input+0x22c>)
 80254a8:	695b      	ldr	r3, [r3, #20]
 80254aa:	b2db      	uxtb	r3, r3
 80254ac:	2b7f      	cmp	r3, #127	; 0x7f
 80254ae:	d017      	beq.n	80254e0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80254b0:	4b53      	ldr	r3, [pc, #332]	; (8025600 <ip4_input+0x230>)
 80254b2:	681b      	ldr	r3, [r3, #0]
 80254b4:	613b      	str	r3, [r7, #16]
 80254b6:	e00e      	b.n	80254d6 <ip4_input+0x106>
          if (netif == inp) {
 80254b8:	693a      	ldr	r2, [r7, #16]
 80254ba:	683b      	ldr	r3, [r7, #0]
 80254bc:	429a      	cmp	r2, r3
 80254be:	d006      	beq.n	80254ce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80254c0:	6938      	ldr	r0, [r7, #16]
 80254c2:	f7ff ff5b 	bl	802537c <ip4_input_accept>
 80254c6:	4603      	mov	r3, r0
 80254c8:	2b00      	cmp	r3, #0
 80254ca:	d108      	bne.n	80254de <ip4_input+0x10e>
 80254cc:	e000      	b.n	80254d0 <ip4_input+0x100>
            continue;
 80254ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80254d0:	693b      	ldr	r3, [r7, #16]
 80254d2:	681b      	ldr	r3, [r3, #0]
 80254d4:	613b      	str	r3, [r7, #16]
 80254d6:	693b      	ldr	r3, [r7, #16]
 80254d8:	2b00      	cmp	r3, #0
 80254da:	d1ed      	bne.n	80254b8 <ip4_input+0xe8>
 80254dc:	e000      	b.n	80254e0 <ip4_input+0x110>
            break;
 80254de:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80254e0:	4b46      	ldr	r3, [pc, #280]	; (80255fc <ip4_input+0x22c>)
 80254e2:	691b      	ldr	r3, [r3, #16]
 80254e4:	6839      	ldr	r1, [r7, #0]
 80254e6:	4618      	mov	r0, r3
 80254e8:	f000 f972 	bl	80257d0 <ip4_addr_isbroadcast_u32>
 80254ec:	4603      	mov	r3, r0
 80254ee:	2b00      	cmp	r3, #0
 80254f0:	d105      	bne.n	80254fe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80254f2:	4b42      	ldr	r3, [pc, #264]	; (80255fc <ip4_input+0x22c>)
 80254f4:	691b      	ldr	r3, [r3, #16]
 80254f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80254fa:	2be0      	cmp	r3, #224	; 0xe0
 80254fc:	d104      	bne.n	8025508 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80254fe:	6878      	ldr	r0, [r7, #4]
 8025500:	f7fd fd68 	bl	8022fd4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8025504:	2300      	movs	r3, #0
 8025506:	e074      	b.n	80255f2 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8025508:	693b      	ldr	r3, [r7, #16]
 802550a:	2b00      	cmp	r3, #0
 802550c:	d104      	bne.n	8025518 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 802550e:	6878      	ldr	r0, [r7, #4]
 8025510:	f7fd fd60 	bl	8022fd4 <pbuf_free>
    return ERR_OK;
 8025514:	2300      	movs	r3, #0
 8025516:	e06c      	b.n	80255f2 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8025518:	697b      	ldr	r3, [r7, #20]
 802551a:	88db      	ldrh	r3, [r3, #6]
 802551c:	b29b      	uxth	r3, r3
 802551e:	461a      	mov	r2, r3
 8025520:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8025524:	4013      	ands	r3, r2
 8025526:	2b00      	cmp	r3, #0
 8025528:	d00b      	beq.n	8025542 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 802552a:	6878      	ldr	r0, [r7, #4]
 802552c:	f000 fd26 	bl	8025f7c <ip4_reass>
 8025530:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8025532:	687b      	ldr	r3, [r7, #4]
 8025534:	2b00      	cmp	r3, #0
 8025536:	d101      	bne.n	802553c <ip4_input+0x16c>
      return ERR_OK;
 8025538:	2300      	movs	r3, #0
 802553a:	e05a      	b.n	80255f2 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 802553c:	687b      	ldr	r3, [r7, #4]
 802553e:	685b      	ldr	r3, [r3, #4]
 8025540:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8025542:	4a2e      	ldr	r2, [pc, #184]	; (80255fc <ip4_input+0x22c>)
 8025544:	693b      	ldr	r3, [r7, #16]
 8025546:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8025548:	4a2c      	ldr	r2, [pc, #176]	; (80255fc <ip4_input+0x22c>)
 802554a:	683b      	ldr	r3, [r7, #0]
 802554c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 802554e:	4a2b      	ldr	r2, [pc, #172]	; (80255fc <ip4_input+0x22c>)
 8025550:	697b      	ldr	r3, [r7, #20]
 8025552:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8025554:	697b      	ldr	r3, [r7, #20]
 8025556:	781b      	ldrb	r3, [r3, #0]
 8025558:	f003 030f 	and.w	r3, r3, #15
 802555c:	b2db      	uxtb	r3, r3
 802555e:	009b      	lsls	r3, r3, #2
 8025560:	b2db      	uxtb	r3, r3
 8025562:	b29a      	uxth	r2, r3
 8025564:	4b25      	ldr	r3, [pc, #148]	; (80255fc <ip4_input+0x22c>)
 8025566:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8025568:	89fb      	ldrh	r3, [r7, #14]
 802556a:	4619      	mov	r1, r3
 802556c:	6878      	ldr	r0, [r7, #4]
 802556e:	f7fd fcab 	bl	8022ec8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8025572:	697b      	ldr	r3, [r7, #20]
 8025574:	7a5b      	ldrb	r3, [r3, #9]
 8025576:	2b01      	cmp	r3, #1
 8025578:	d006      	beq.n	8025588 <ip4_input+0x1b8>
 802557a:	2b11      	cmp	r3, #17
 802557c:	d109      	bne.n	8025592 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 802557e:	6839      	ldr	r1, [r7, #0]
 8025580:	6878      	ldr	r0, [r7, #4]
 8025582:	f7fe f9b5 	bl	80238f0 <udp_input>
        break;
 8025586:	e021      	b.n	80255cc <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8025588:	6839      	ldr	r1, [r7, #0]
 802558a:	6878      	ldr	r0, [r7, #4]
 802558c:	f7ff fcf8 	bl	8024f80 <icmp_input>
        break;
 8025590:	e01c      	b.n	80255cc <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8025592:	4b1a      	ldr	r3, [pc, #104]	; (80255fc <ip4_input+0x22c>)
 8025594:	695b      	ldr	r3, [r3, #20]
 8025596:	6939      	ldr	r1, [r7, #16]
 8025598:	4618      	mov	r0, r3
 802559a:	f000 f919 	bl	80257d0 <ip4_addr_isbroadcast_u32>
 802559e:	4603      	mov	r3, r0
 80255a0:	2b00      	cmp	r3, #0
 80255a2:	d10f      	bne.n	80255c4 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80255a4:	4b15      	ldr	r3, [pc, #84]	; (80255fc <ip4_input+0x22c>)
 80255a6:	695b      	ldr	r3, [r3, #20]
 80255a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80255ac:	2be0      	cmp	r3, #224	; 0xe0
 80255ae:	d009      	beq.n	80255c4 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80255b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80255b4:	4619      	mov	r1, r3
 80255b6:	6878      	ldr	r0, [r7, #4]
 80255b8:	f7fd fcf9 	bl	8022fae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80255bc:	2102      	movs	r1, #2
 80255be:	6878      	ldr	r0, [r7, #4]
 80255c0:	f7ff fde2 	bl	8025188 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80255c4:	6878      	ldr	r0, [r7, #4]
 80255c6:	f7fd fd05 	bl	8022fd4 <pbuf_free>
        break;
 80255ca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80255cc:	4b0b      	ldr	r3, [pc, #44]	; (80255fc <ip4_input+0x22c>)
 80255ce:	2200      	movs	r2, #0
 80255d0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80255d2:	4b0a      	ldr	r3, [pc, #40]	; (80255fc <ip4_input+0x22c>)
 80255d4:	2200      	movs	r2, #0
 80255d6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80255d8:	4b08      	ldr	r3, [pc, #32]	; (80255fc <ip4_input+0x22c>)
 80255da:	2200      	movs	r2, #0
 80255dc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80255de:	4b07      	ldr	r3, [pc, #28]	; (80255fc <ip4_input+0x22c>)
 80255e0:	2200      	movs	r2, #0
 80255e2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80255e4:	4b05      	ldr	r3, [pc, #20]	; (80255fc <ip4_input+0x22c>)
 80255e6:	2200      	movs	r2, #0
 80255e8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80255ea:	4b04      	ldr	r3, [pc, #16]	; (80255fc <ip4_input+0x22c>)
 80255ec:	2200      	movs	r2, #0
 80255ee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80255f0:	2300      	movs	r3, #0
}
 80255f2:	4618      	mov	r0, r3
 80255f4:	3718      	adds	r7, #24
 80255f6:	46bd      	mov	sp, r7
 80255f8:	bd80      	pop	{r7, pc}
 80255fa:	bf00      	nop
 80255fc:	200127d4 	.word	0x200127d4
 8025600:	20015de4 	.word	0x20015de4

08025604 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8025604:	b580      	push	{r7, lr}
 8025606:	b08a      	sub	sp, #40	; 0x28
 8025608:	af04      	add	r7, sp, #16
 802560a:	60f8      	str	r0, [r7, #12]
 802560c:	60b9      	str	r1, [r7, #8]
 802560e:	607a      	str	r2, [r7, #4]
 8025610:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8025612:	68bb      	ldr	r3, [r7, #8]
 8025614:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8025616:	687b      	ldr	r3, [r7, #4]
 8025618:	2b00      	cmp	r3, #0
 802561a:	d009      	beq.n	8025630 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 802561c:	68bb      	ldr	r3, [r7, #8]
 802561e:	2b00      	cmp	r3, #0
 8025620:	d003      	beq.n	802562a <ip4_output_if+0x26>
 8025622:	68bb      	ldr	r3, [r7, #8]
 8025624:	681b      	ldr	r3, [r3, #0]
 8025626:	2b00      	cmp	r3, #0
 8025628:	d102      	bne.n	8025630 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802562c:	3304      	adds	r3, #4
 802562e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8025630:	78fa      	ldrb	r2, [r7, #3]
 8025632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025634:	9302      	str	r3, [sp, #8]
 8025636:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802563a:	9301      	str	r3, [sp, #4]
 802563c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025640:	9300      	str	r3, [sp, #0]
 8025642:	4613      	mov	r3, r2
 8025644:	687a      	ldr	r2, [r7, #4]
 8025646:	6979      	ldr	r1, [r7, #20]
 8025648:	68f8      	ldr	r0, [r7, #12]
 802564a:	f000 f805 	bl	8025658 <ip4_output_if_src>
 802564e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8025650:	4618      	mov	r0, r3
 8025652:	3718      	adds	r7, #24
 8025654:	46bd      	mov	sp, r7
 8025656:	bd80      	pop	{r7, pc}

08025658 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8025658:	b580      	push	{r7, lr}
 802565a:	b088      	sub	sp, #32
 802565c:	af00      	add	r7, sp, #0
 802565e:	60f8      	str	r0, [r7, #12]
 8025660:	60b9      	str	r1, [r7, #8]
 8025662:	607a      	str	r2, [r7, #4]
 8025664:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8025666:	68fb      	ldr	r3, [r7, #12]
 8025668:	7b9b      	ldrb	r3, [r3, #14]
 802566a:	2b01      	cmp	r3, #1
 802566c:	d006      	beq.n	802567c <ip4_output_if_src+0x24>
 802566e:	4b52      	ldr	r3, [pc, #328]	; (80257b8 <ip4_output_if_src+0x160>)
 8025670:	f44f 7255 	mov.w	r2, #852	; 0x354
 8025674:	4951      	ldr	r1, [pc, #324]	; (80257bc <ip4_output_if_src+0x164>)
 8025676:	4852      	ldr	r0, [pc, #328]	; (80257c0 <ip4_output_if_src+0x168>)
 8025678:	f001 f9e4 	bl	8026a44 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	2b00      	cmp	r3, #0
 8025680:	d060      	beq.n	8025744 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8025682:	2314      	movs	r3, #20
 8025684:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8025686:	2114      	movs	r1, #20
 8025688:	68f8      	ldr	r0, [r7, #12]
 802568a:	f7fd fc0d 	bl	8022ea8 <pbuf_add_header>
 802568e:	4603      	mov	r3, r0
 8025690:	2b00      	cmp	r3, #0
 8025692:	d002      	beq.n	802569a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8025694:	f06f 0301 	mvn.w	r3, #1
 8025698:	e089      	b.n	80257ae <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 802569a:	68fb      	ldr	r3, [r7, #12]
 802569c:	685b      	ldr	r3, [r3, #4]
 802569e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80256a0:	68fb      	ldr	r3, [r7, #12]
 80256a2:	895b      	ldrh	r3, [r3, #10]
 80256a4:	2b13      	cmp	r3, #19
 80256a6:	d806      	bhi.n	80256b6 <ip4_output_if_src+0x5e>
 80256a8:	4b43      	ldr	r3, [pc, #268]	; (80257b8 <ip4_output_if_src+0x160>)
 80256aa:	f44f 7262 	mov.w	r2, #904	; 0x388
 80256ae:	4945      	ldr	r1, [pc, #276]	; (80257c4 <ip4_output_if_src+0x16c>)
 80256b0:	4843      	ldr	r0, [pc, #268]	; (80257c0 <ip4_output_if_src+0x168>)
 80256b2:	f001 f9c7 	bl	8026a44 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80256b6:	69fb      	ldr	r3, [r7, #28]
 80256b8:	78fa      	ldrb	r2, [r7, #3]
 80256ba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80256bc:	69fb      	ldr	r3, [r7, #28]
 80256be:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80256c2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80256c4:	687b      	ldr	r3, [r7, #4]
 80256c6:	681a      	ldr	r2, [r3, #0]
 80256c8:	69fb      	ldr	r3, [r7, #28]
 80256ca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80256cc:	8b7b      	ldrh	r3, [r7, #26]
 80256ce:	089b      	lsrs	r3, r3, #2
 80256d0:	b29b      	uxth	r3, r3
 80256d2:	b2db      	uxtb	r3, r3
 80256d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80256d8:	b2da      	uxtb	r2, r3
 80256da:	69fb      	ldr	r3, [r7, #28]
 80256dc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80256de:	69fb      	ldr	r3, [r7, #28]
 80256e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80256e4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80256e6:	68fb      	ldr	r3, [r7, #12]
 80256e8:	891b      	ldrh	r3, [r3, #8]
 80256ea:	4618      	mov	r0, r3
 80256ec:	f7fc f896 	bl	802181c <lwip_htons>
 80256f0:	4603      	mov	r3, r0
 80256f2:	461a      	mov	r2, r3
 80256f4:	69fb      	ldr	r3, [r7, #28]
 80256f6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80256f8:	69fb      	ldr	r3, [r7, #28]
 80256fa:	2200      	movs	r2, #0
 80256fc:	719a      	strb	r2, [r3, #6]
 80256fe:	2200      	movs	r2, #0
 8025700:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8025702:	4b31      	ldr	r3, [pc, #196]	; (80257c8 <ip4_output_if_src+0x170>)
 8025704:	881b      	ldrh	r3, [r3, #0]
 8025706:	4618      	mov	r0, r3
 8025708:	f7fc f888 	bl	802181c <lwip_htons>
 802570c:	4603      	mov	r3, r0
 802570e:	461a      	mov	r2, r3
 8025710:	69fb      	ldr	r3, [r7, #28]
 8025712:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8025714:	4b2c      	ldr	r3, [pc, #176]	; (80257c8 <ip4_output_if_src+0x170>)
 8025716:	881b      	ldrh	r3, [r3, #0]
 8025718:	3301      	adds	r3, #1
 802571a:	b29a      	uxth	r2, r3
 802571c:	4b2a      	ldr	r3, [pc, #168]	; (80257c8 <ip4_output_if_src+0x170>)
 802571e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8025720:	68bb      	ldr	r3, [r7, #8]
 8025722:	2b00      	cmp	r3, #0
 8025724:	d104      	bne.n	8025730 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8025726:	4b29      	ldr	r3, [pc, #164]	; (80257cc <ip4_output_if_src+0x174>)
 8025728:	681a      	ldr	r2, [r3, #0]
 802572a:	69fb      	ldr	r3, [r7, #28]
 802572c:	60da      	str	r2, [r3, #12]
 802572e:	e003      	b.n	8025738 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8025730:	68bb      	ldr	r3, [r7, #8]
 8025732:	681a      	ldr	r2, [r3, #0]
 8025734:	69fb      	ldr	r3, [r7, #28]
 8025736:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8025738:	69fb      	ldr	r3, [r7, #28]
 802573a:	2200      	movs	r2, #0
 802573c:	729a      	strb	r2, [r3, #10]
 802573e:	2200      	movs	r2, #0
 8025740:	72da      	strb	r2, [r3, #11]
 8025742:	e00f      	b.n	8025764 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8025744:	68fb      	ldr	r3, [r7, #12]
 8025746:	895b      	ldrh	r3, [r3, #10]
 8025748:	2b13      	cmp	r3, #19
 802574a:	d802      	bhi.n	8025752 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802574c:	f06f 0301 	mvn.w	r3, #1
 8025750:	e02d      	b.n	80257ae <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8025752:	68fb      	ldr	r3, [r7, #12]
 8025754:	685b      	ldr	r3, [r3, #4]
 8025756:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8025758:	69fb      	ldr	r3, [r7, #28]
 802575a:	691b      	ldr	r3, [r3, #16]
 802575c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 802575e:	f107 0314 	add.w	r3, r7, #20
 8025762:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8025764:	687b      	ldr	r3, [r7, #4]
 8025766:	681a      	ldr	r2, [r3, #0]
 8025768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802576a:	3304      	adds	r3, #4
 802576c:	681b      	ldr	r3, [r3, #0]
 802576e:	429a      	cmp	r2, r3
 8025770:	d105      	bne.n	802577e <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 8025772:	68f9      	ldr	r1, [r7, #12]
 8025774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025776:	f7fd f86f 	bl	8022858 <netif_loop_output>
 802577a:	4603      	mov	r3, r0
 802577c:	e017      	b.n	80257ae <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 802577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025782:	2b00      	cmp	r3, #0
 8025784:	d00c      	beq.n	80257a0 <ip4_output_if_src+0x148>
 8025786:	68fb      	ldr	r3, [r7, #12]
 8025788:	891a      	ldrh	r2, [r3, #8]
 802578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802578c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802578e:	429a      	cmp	r2, r3
 8025790:	d906      	bls.n	80257a0 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 8025792:	687a      	ldr	r2, [r7, #4]
 8025794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025796:	68f8      	ldr	r0, [r7, #12]
 8025798:	f000 fde4 	bl	8026364 <ip4_frag>
 802579c:	4603      	mov	r3, r0
 802579e:	e006      	b.n	80257ae <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80257a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257a2:	695b      	ldr	r3, [r3, #20]
 80257a4:	687a      	ldr	r2, [r7, #4]
 80257a6:	68f9      	ldr	r1, [r7, #12]
 80257a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80257aa:	4798      	blx	r3
 80257ac:	4603      	mov	r3, r0
}
 80257ae:	4618      	mov	r0, r3
 80257b0:	3720      	adds	r7, #32
 80257b2:	46bd      	mov	sp, r7
 80257b4:	bd80      	pop	{r7, pc}
 80257b6:	bf00      	nop
 80257b8:	0802d5dc 	.word	0x0802d5dc
 80257bc:	0802d610 	.word	0x0802d610
 80257c0:	0802d61c 	.word	0x0802d61c
 80257c4:	0802d644 	.word	0x0802d644
 80257c8:	200162ee 	.word	0x200162ee
 80257cc:	0802dde8 	.word	0x0802dde8

080257d0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80257d0:	b480      	push	{r7}
 80257d2:	b085      	sub	sp, #20
 80257d4:	af00      	add	r7, sp, #0
 80257d6:	6078      	str	r0, [r7, #4]
 80257d8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80257de:	687b      	ldr	r3, [r7, #4]
 80257e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80257e4:	d002      	beq.n	80257ec <ip4_addr_isbroadcast_u32+0x1c>
 80257e6:	687b      	ldr	r3, [r7, #4]
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	d101      	bne.n	80257f0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80257ec:	2301      	movs	r3, #1
 80257ee:	e02a      	b.n	8025846 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80257f0:	683b      	ldr	r3, [r7, #0]
 80257f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80257f6:	f003 0302 	and.w	r3, r3, #2
 80257fa:	2b00      	cmp	r3, #0
 80257fc:	d101      	bne.n	8025802 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80257fe:	2300      	movs	r3, #0
 8025800:	e021      	b.n	8025846 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8025802:	683b      	ldr	r3, [r7, #0]
 8025804:	3304      	adds	r3, #4
 8025806:	681b      	ldr	r3, [r3, #0]
 8025808:	687a      	ldr	r2, [r7, #4]
 802580a:	429a      	cmp	r2, r3
 802580c:	d101      	bne.n	8025812 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802580e:	2300      	movs	r3, #0
 8025810:	e019      	b.n	8025846 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8025812:	68fa      	ldr	r2, [r7, #12]
 8025814:	683b      	ldr	r3, [r7, #0]
 8025816:	3304      	adds	r3, #4
 8025818:	681b      	ldr	r3, [r3, #0]
 802581a:	405a      	eors	r2, r3
 802581c:	683b      	ldr	r3, [r7, #0]
 802581e:	3308      	adds	r3, #8
 8025820:	681b      	ldr	r3, [r3, #0]
 8025822:	4013      	ands	r3, r2
 8025824:	2b00      	cmp	r3, #0
 8025826:	d10d      	bne.n	8025844 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8025828:	683b      	ldr	r3, [r7, #0]
 802582a:	3308      	adds	r3, #8
 802582c:	681b      	ldr	r3, [r3, #0]
 802582e:	43da      	mvns	r2, r3
 8025830:	687b      	ldr	r3, [r7, #4]
 8025832:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8025834:	683b      	ldr	r3, [r7, #0]
 8025836:	3308      	adds	r3, #8
 8025838:	681b      	ldr	r3, [r3, #0]
 802583a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802583c:	429a      	cmp	r2, r3
 802583e:	d101      	bne.n	8025844 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8025840:	2301      	movs	r3, #1
 8025842:	e000      	b.n	8025846 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8025844:	2300      	movs	r3, #0
  }
}
 8025846:	4618      	mov	r0, r3
 8025848:	3714      	adds	r7, #20
 802584a:	46bd      	mov	sp, r7
 802584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025850:	4770      	bx	lr
	...

08025854 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8025854:	b580      	push	{r7, lr}
 8025856:	b082      	sub	sp, #8
 8025858:	af00      	add	r7, sp, #0
 802585a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 802585c:	2210      	movs	r2, #16
 802585e:	4904      	ldr	r1, [pc, #16]	; (8025870 <ip4addr_ntoa+0x1c>)
 8025860:	6878      	ldr	r0, [r7, #4]
 8025862:	f000 f807 	bl	8025874 <ip4addr_ntoa_r>
 8025866:	4603      	mov	r3, r0
}
 8025868:	4618      	mov	r0, r3
 802586a:	3708      	adds	r7, #8
 802586c:	46bd      	mov	sp, r7
 802586e:	bd80      	pop	{r7, pc}
 8025870:	200162f0 	.word	0x200162f0

08025874 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8025874:	b480      	push	{r7}
 8025876:	b08d      	sub	sp, #52	; 0x34
 8025878:	af00      	add	r7, sp, #0
 802587a:	60f8      	str	r0, [r7, #12]
 802587c:	60b9      	str	r1, [r7, #8]
 802587e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8025880:	2300      	movs	r3, #0
 8025882:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8025884:	68fb      	ldr	r3, [r7, #12]
 8025886:	681b      	ldr	r3, [r3, #0]
 8025888:	61bb      	str	r3, [r7, #24]

  rp = buf;
 802588a:	68bb      	ldr	r3, [r7, #8]
 802588c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 802588e:	f107 0318 	add.w	r3, r7, #24
 8025892:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8025894:	2300      	movs	r3, #0
 8025896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802589a:	e058      	b.n	802594e <ip4addr_ntoa_r+0xda>
    i = 0;
 802589c:	2300      	movs	r3, #0
 802589e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80258a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258a4:	781a      	ldrb	r2, [r3, #0]
 80258a6:	4b32      	ldr	r3, [pc, #200]	; (8025970 <ip4addr_ntoa_r+0xfc>)
 80258a8:	fba3 1302 	umull	r1, r3, r3, r2
 80258ac:	08d9      	lsrs	r1, r3, #3
 80258ae:	460b      	mov	r3, r1
 80258b0:	009b      	lsls	r3, r3, #2
 80258b2:	440b      	add	r3, r1
 80258b4:	005b      	lsls	r3, r3, #1
 80258b6:	1ad3      	subs	r3, r2, r3
 80258b8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80258ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258bc:	781b      	ldrb	r3, [r3, #0]
 80258be:	4a2c      	ldr	r2, [pc, #176]	; (8025970 <ip4addr_ntoa_r+0xfc>)
 80258c0:	fba2 2303 	umull	r2, r3, r2, r3
 80258c4:	08db      	lsrs	r3, r3, #3
 80258c6:	b2da      	uxtb	r2, r3
 80258c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258ca:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80258cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80258d0:	1c5a      	adds	r2, r3, #1
 80258d2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80258d6:	4619      	mov	r1, r3
 80258d8:	7ffb      	ldrb	r3, [r7, #31]
 80258da:	3330      	adds	r3, #48	; 0x30
 80258dc:	b2da      	uxtb	r2, r3
 80258de:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80258e2:	443b      	add	r3, r7
 80258e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80258e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80258ea:	781b      	ldrb	r3, [r3, #0]
 80258ec:	2b00      	cmp	r3, #0
 80258ee:	d1d8      	bne.n	80258a2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80258f0:	e011      	b.n	8025916 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80258f2:	6a3b      	ldr	r3, [r7, #32]
 80258f4:	1c5a      	adds	r2, r3, #1
 80258f6:	623a      	str	r2, [r7, #32]
 80258f8:	687a      	ldr	r2, [r7, #4]
 80258fa:	429a      	cmp	r2, r3
 80258fc:	dc01      	bgt.n	8025902 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80258fe:	2300      	movs	r3, #0
 8025900:	e030      	b.n	8025964 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8025902:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8025906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025908:	1c59      	adds	r1, r3, #1
 802590a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802590c:	3230      	adds	r2, #48	; 0x30
 802590e:	443a      	add	r2, r7
 8025910:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8025914:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8025916:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802591a:	1e5a      	subs	r2, r3, #1
 802591c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8025920:	2b00      	cmp	r3, #0
 8025922:	d1e6      	bne.n	80258f2 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8025924:	6a3b      	ldr	r3, [r7, #32]
 8025926:	1c5a      	adds	r2, r3, #1
 8025928:	623a      	str	r2, [r7, #32]
 802592a:	687a      	ldr	r2, [r7, #4]
 802592c:	429a      	cmp	r2, r3
 802592e:	dc01      	bgt.n	8025934 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8025930:	2300      	movs	r3, #0
 8025932:	e017      	b.n	8025964 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8025934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025936:	1c5a      	adds	r2, r3, #1
 8025938:	62fa      	str	r2, [r7, #44]	; 0x2c
 802593a:	222e      	movs	r2, #46	; 0x2e
 802593c:	701a      	strb	r2, [r3, #0]
    ap++;
 802593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025940:	3301      	adds	r3, #1
 8025942:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8025944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025948:	3301      	adds	r3, #1
 802594a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802594e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025952:	2b03      	cmp	r3, #3
 8025954:	d9a2      	bls.n	802589c <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8025956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025958:	3b01      	subs	r3, #1
 802595a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802595e:	2200      	movs	r2, #0
 8025960:	701a      	strb	r2, [r3, #0]
  return buf;
 8025962:	68bb      	ldr	r3, [r7, #8]
}
 8025964:	4618      	mov	r0, r3
 8025966:	3734      	adds	r7, #52	; 0x34
 8025968:	46bd      	mov	sp, r7
 802596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802596e:	4770      	bx	lr
 8025970:	cccccccd 	.word	0xcccccccd

08025974 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8025974:	b580      	push	{r7, lr}
 8025976:	b084      	sub	sp, #16
 8025978:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 802597a:	2300      	movs	r3, #0
 802597c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 802597e:	4b12      	ldr	r3, [pc, #72]	; (80259c8 <ip_reass_tmr+0x54>)
 8025980:	681b      	ldr	r3, [r3, #0]
 8025982:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8025984:	e018      	b.n	80259b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8025986:	68fb      	ldr	r3, [r7, #12]
 8025988:	7fdb      	ldrb	r3, [r3, #31]
 802598a:	2b00      	cmp	r3, #0
 802598c:	d00b      	beq.n	80259a6 <ip_reass_tmr+0x32>
      r->timer--;
 802598e:	68fb      	ldr	r3, [r7, #12]
 8025990:	7fdb      	ldrb	r3, [r3, #31]
 8025992:	3b01      	subs	r3, #1
 8025994:	b2da      	uxtb	r2, r3
 8025996:	68fb      	ldr	r3, [r7, #12]
 8025998:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 802599a:	68fb      	ldr	r3, [r7, #12]
 802599c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 802599e:	68fb      	ldr	r3, [r7, #12]
 80259a0:	681b      	ldr	r3, [r3, #0]
 80259a2:	60fb      	str	r3, [r7, #12]
 80259a4:	e008      	b.n	80259b8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80259a6:	68fb      	ldr	r3, [r7, #12]
 80259a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80259aa:	68fb      	ldr	r3, [r7, #12]
 80259ac:	681b      	ldr	r3, [r3, #0]
 80259ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80259b0:	68b9      	ldr	r1, [r7, #8]
 80259b2:	6878      	ldr	r0, [r7, #4]
 80259b4:	f000 f80a 	bl	80259cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80259b8:	68fb      	ldr	r3, [r7, #12]
 80259ba:	2b00      	cmp	r3, #0
 80259bc:	d1e3      	bne.n	8025986 <ip_reass_tmr+0x12>
    }
  }
}
 80259be:	bf00      	nop
 80259c0:	bf00      	nop
 80259c2:	3710      	adds	r7, #16
 80259c4:	46bd      	mov	sp, r7
 80259c6:	bd80      	pop	{r7, pc}
 80259c8:	20016300 	.word	0x20016300

080259cc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80259cc:	b580      	push	{r7, lr}
 80259ce:	b088      	sub	sp, #32
 80259d0:	af00      	add	r7, sp, #0
 80259d2:	6078      	str	r0, [r7, #4]
 80259d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80259d6:	2300      	movs	r3, #0
 80259d8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80259da:	683a      	ldr	r2, [r7, #0]
 80259dc:	687b      	ldr	r3, [r7, #4]
 80259de:	429a      	cmp	r2, r3
 80259e0:	d105      	bne.n	80259ee <ip_reass_free_complete_datagram+0x22>
 80259e2:	4b45      	ldr	r3, [pc, #276]	; (8025af8 <ip_reass_free_complete_datagram+0x12c>)
 80259e4:	22ab      	movs	r2, #171	; 0xab
 80259e6:	4945      	ldr	r1, [pc, #276]	; (8025afc <ip_reass_free_complete_datagram+0x130>)
 80259e8:	4845      	ldr	r0, [pc, #276]	; (8025b00 <ip_reass_free_complete_datagram+0x134>)
 80259ea:	f001 f82b 	bl	8026a44 <iprintf>
  if (prev != NULL) {
 80259ee:	683b      	ldr	r3, [r7, #0]
 80259f0:	2b00      	cmp	r3, #0
 80259f2:	d00a      	beq.n	8025a0a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80259f4:	683b      	ldr	r3, [r7, #0]
 80259f6:	681b      	ldr	r3, [r3, #0]
 80259f8:	687a      	ldr	r2, [r7, #4]
 80259fa:	429a      	cmp	r2, r3
 80259fc:	d005      	beq.n	8025a0a <ip_reass_free_complete_datagram+0x3e>
 80259fe:	4b3e      	ldr	r3, [pc, #248]	; (8025af8 <ip_reass_free_complete_datagram+0x12c>)
 8025a00:	22ad      	movs	r2, #173	; 0xad
 8025a02:	4940      	ldr	r1, [pc, #256]	; (8025b04 <ip_reass_free_complete_datagram+0x138>)
 8025a04:	483e      	ldr	r0, [pc, #248]	; (8025b00 <ip_reass_free_complete_datagram+0x134>)
 8025a06:	f001 f81d 	bl	8026a44 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8025a0a:	687b      	ldr	r3, [r7, #4]
 8025a0c:	685b      	ldr	r3, [r3, #4]
 8025a0e:	685b      	ldr	r3, [r3, #4]
 8025a10:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8025a12:	697b      	ldr	r3, [r7, #20]
 8025a14:	889b      	ldrh	r3, [r3, #4]
 8025a16:	b29b      	uxth	r3, r3
 8025a18:	2b00      	cmp	r3, #0
 8025a1a:	d12a      	bne.n	8025a72 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8025a1c:	687b      	ldr	r3, [r7, #4]
 8025a1e:	685b      	ldr	r3, [r3, #4]
 8025a20:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8025a22:	697b      	ldr	r3, [r7, #20]
 8025a24:	681a      	ldr	r2, [r3, #0]
 8025a26:	687b      	ldr	r3, [r7, #4]
 8025a28:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8025a2a:	69bb      	ldr	r3, [r7, #24]
 8025a2c:	6858      	ldr	r0, [r3, #4]
 8025a2e:	687b      	ldr	r3, [r7, #4]
 8025a30:	3308      	adds	r3, #8
 8025a32:	2214      	movs	r2, #20
 8025a34:	4619      	mov	r1, r3
 8025a36:	f000 fef5 	bl	8026824 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8025a3a:	2101      	movs	r1, #1
 8025a3c:	69b8      	ldr	r0, [r7, #24]
 8025a3e:	f7ff fbb3 	bl	80251a8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8025a42:	69b8      	ldr	r0, [r7, #24]
 8025a44:	f7fd fb4e 	bl	80230e4 <pbuf_clen>
 8025a48:	4603      	mov	r3, r0
 8025a4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8025a4c:	8bfa      	ldrh	r2, [r7, #30]
 8025a4e:	8a7b      	ldrh	r3, [r7, #18]
 8025a50:	4413      	add	r3, r2
 8025a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025a56:	db05      	blt.n	8025a64 <ip_reass_free_complete_datagram+0x98>
 8025a58:	4b27      	ldr	r3, [pc, #156]	; (8025af8 <ip_reass_free_complete_datagram+0x12c>)
 8025a5a:	22bc      	movs	r2, #188	; 0xbc
 8025a5c:	492a      	ldr	r1, [pc, #168]	; (8025b08 <ip_reass_free_complete_datagram+0x13c>)
 8025a5e:	4828      	ldr	r0, [pc, #160]	; (8025b00 <ip_reass_free_complete_datagram+0x134>)
 8025a60:	f000 fff0 	bl	8026a44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025a64:	8bfa      	ldrh	r2, [r7, #30]
 8025a66:	8a7b      	ldrh	r3, [r7, #18]
 8025a68:	4413      	add	r3, r2
 8025a6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8025a6c:	69b8      	ldr	r0, [r7, #24]
 8025a6e:	f7fd fab1 	bl	8022fd4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8025a72:	687b      	ldr	r3, [r7, #4]
 8025a74:	685b      	ldr	r3, [r3, #4]
 8025a76:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8025a78:	e01f      	b.n	8025aba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8025a7a:	69bb      	ldr	r3, [r7, #24]
 8025a7c:	685b      	ldr	r3, [r3, #4]
 8025a7e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8025a80:	69bb      	ldr	r3, [r7, #24]
 8025a82:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8025a84:	697b      	ldr	r3, [r7, #20]
 8025a86:	681b      	ldr	r3, [r3, #0]
 8025a88:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8025a8a:	68f8      	ldr	r0, [r7, #12]
 8025a8c:	f7fd fb2a 	bl	80230e4 <pbuf_clen>
 8025a90:	4603      	mov	r3, r0
 8025a92:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8025a94:	8bfa      	ldrh	r2, [r7, #30]
 8025a96:	8a7b      	ldrh	r3, [r7, #18]
 8025a98:	4413      	add	r3, r2
 8025a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025a9e:	db05      	blt.n	8025aac <ip_reass_free_complete_datagram+0xe0>
 8025aa0:	4b15      	ldr	r3, [pc, #84]	; (8025af8 <ip_reass_free_complete_datagram+0x12c>)
 8025aa2:	22cc      	movs	r2, #204	; 0xcc
 8025aa4:	4918      	ldr	r1, [pc, #96]	; (8025b08 <ip_reass_free_complete_datagram+0x13c>)
 8025aa6:	4816      	ldr	r0, [pc, #88]	; (8025b00 <ip_reass_free_complete_datagram+0x134>)
 8025aa8:	f000 ffcc 	bl	8026a44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025aac:	8bfa      	ldrh	r2, [r7, #30]
 8025aae:	8a7b      	ldrh	r3, [r7, #18]
 8025ab0:	4413      	add	r3, r2
 8025ab2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8025ab4:	68f8      	ldr	r0, [r7, #12]
 8025ab6:	f7fd fa8d 	bl	8022fd4 <pbuf_free>
  while (p != NULL) {
 8025aba:	69bb      	ldr	r3, [r7, #24]
 8025abc:	2b00      	cmp	r3, #0
 8025abe:	d1dc      	bne.n	8025a7a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8025ac0:	6839      	ldr	r1, [r7, #0]
 8025ac2:	6878      	ldr	r0, [r7, #4]
 8025ac4:	f000 f8c2 	bl	8025c4c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8025ac8:	4b10      	ldr	r3, [pc, #64]	; (8025b0c <ip_reass_free_complete_datagram+0x140>)
 8025aca:	881b      	ldrh	r3, [r3, #0]
 8025acc:	8bfa      	ldrh	r2, [r7, #30]
 8025ace:	429a      	cmp	r2, r3
 8025ad0:	d905      	bls.n	8025ade <ip_reass_free_complete_datagram+0x112>
 8025ad2:	4b09      	ldr	r3, [pc, #36]	; (8025af8 <ip_reass_free_complete_datagram+0x12c>)
 8025ad4:	22d2      	movs	r2, #210	; 0xd2
 8025ad6:	490e      	ldr	r1, [pc, #56]	; (8025b10 <ip_reass_free_complete_datagram+0x144>)
 8025ad8:	4809      	ldr	r0, [pc, #36]	; (8025b00 <ip_reass_free_complete_datagram+0x134>)
 8025ada:	f000 ffb3 	bl	8026a44 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8025ade:	4b0b      	ldr	r3, [pc, #44]	; (8025b0c <ip_reass_free_complete_datagram+0x140>)
 8025ae0:	881a      	ldrh	r2, [r3, #0]
 8025ae2:	8bfb      	ldrh	r3, [r7, #30]
 8025ae4:	1ad3      	subs	r3, r2, r3
 8025ae6:	b29a      	uxth	r2, r3
 8025ae8:	4b08      	ldr	r3, [pc, #32]	; (8025b0c <ip_reass_free_complete_datagram+0x140>)
 8025aea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8025aec:	8bfb      	ldrh	r3, [r7, #30]
}
 8025aee:	4618      	mov	r0, r3
 8025af0:	3720      	adds	r7, #32
 8025af2:	46bd      	mov	sp, r7
 8025af4:	bd80      	pop	{r7, pc}
 8025af6:	bf00      	nop
 8025af8:	0802d674 	.word	0x0802d674
 8025afc:	0802d6b0 	.word	0x0802d6b0
 8025b00:	0802d6bc 	.word	0x0802d6bc
 8025b04:	0802d6e4 	.word	0x0802d6e4
 8025b08:	0802d6f8 	.word	0x0802d6f8
 8025b0c:	20016304 	.word	0x20016304
 8025b10:	0802d718 	.word	0x0802d718

08025b14 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8025b14:	b580      	push	{r7, lr}
 8025b16:	b08a      	sub	sp, #40	; 0x28
 8025b18:	af00      	add	r7, sp, #0
 8025b1a:	6078      	str	r0, [r7, #4]
 8025b1c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8025b1e:	2300      	movs	r3, #0
 8025b20:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8025b22:	2300      	movs	r3, #0
 8025b24:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8025b26:	2300      	movs	r3, #0
 8025b28:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8025b2a:	2300      	movs	r3, #0
 8025b2c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8025b2e:	2300      	movs	r3, #0
 8025b30:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8025b32:	4b28      	ldr	r3, [pc, #160]	; (8025bd4 <ip_reass_remove_oldest_datagram+0xc0>)
 8025b34:	681b      	ldr	r3, [r3, #0]
 8025b36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8025b38:	e030      	b.n	8025b9c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8025b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b3c:	695a      	ldr	r2, [r3, #20]
 8025b3e:	687b      	ldr	r3, [r7, #4]
 8025b40:	68db      	ldr	r3, [r3, #12]
 8025b42:	429a      	cmp	r2, r3
 8025b44:	d10c      	bne.n	8025b60 <ip_reass_remove_oldest_datagram+0x4c>
 8025b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b48:	699a      	ldr	r2, [r3, #24]
 8025b4a:	687b      	ldr	r3, [r7, #4]
 8025b4c:	691b      	ldr	r3, [r3, #16]
 8025b4e:	429a      	cmp	r2, r3
 8025b50:	d106      	bne.n	8025b60 <ip_reass_remove_oldest_datagram+0x4c>
 8025b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b54:	899a      	ldrh	r2, [r3, #12]
 8025b56:	687b      	ldr	r3, [r7, #4]
 8025b58:	889b      	ldrh	r3, [r3, #4]
 8025b5a:	b29b      	uxth	r3, r3
 8025b5c:	429a      	cmp	r2, r3
 8025b5e:	d014      	beq.n	8025b8a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8025b60:	693b      	ldr	r3, [r7, #16]
 8025b62:	3301      	adds	r3, #1
 8025b64:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8025b66:	6a3b      	ldr	r3, [r7, #32]
 8025b68:	2b00      	cmp	r3, #0
 8025b6a:	d104      	bne.n	8025b76 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8025b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b6e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8025b70:	69fb      	ldr	r3, [r7, #28]
 8025b72:	61bb      	str	r3, [r7, #24]
 8025b74:	e009      	b.n	8025b8a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8025b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b78:	7fda      	ldrb	r2, [r3, #31]
 8025b7a:	6a3b      	ldr	r3, [r7, #32]
 8025b7c:	7fdb      	ldrb	r3, [r3, #31]
 8025b7e:	429a      	cmp	r2, r3
 8025b80:	d803      	bhi.n	8025b8a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8025b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b84:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8025b86:	69fb      	ldr	r3, [r7, #28]
 8025b88:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8025b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b8c:	681b      	ldr	r3, [r3, #0]
 8025b8e:	2b00      	cmp	r3, #0
 8025b90:	d001      	beq.n	8025b96 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8025b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b94:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8025b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b98:	681b      	ldr	r3, [r3, #0]
 8025b9a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8025b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025b9e:	2b00      	cmp	r3, #0
 8025ba0:	d1cb      	bne.n	8025b3a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8025ba2:	6a3b      	ldr	r3, [r7, #32]
 8025ba4:	2b00      	cmp	r3, #0
 8025ba6:	d008      	beq.n	8025bba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8025ba8:	69b9      	ldr	r1, [r7, #24]
 8025baa:	6a38      	ldr	r0, [r7, #32]
 8025bac:	f7ff ff0e 	bl	80259cc <ip_reass_free_complete_datagram>
 8025bb0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8025bb2:	697a      	ldr	r2, [r7, #20]
 8025bb4:	68fb      	ldr	r3, [r7, #12]
 8025bb6:	4413      	add	r3, r2
 8025bb8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8025bba:	697a      	ldr	r2, [r7, #20]
 8025bbc:	683b      	ldr	r3, [r7, #0]
 8025bbe:	429a      	cmp	r2, r3
 8025bc0:	da02      	bge.n	8025bc8 <ip_reass_remove_oldest_datagram+0xb4>
 8025bc2:	693b      	ldr	r3, [r7, #16]
 8025bc4:	2b01      	cmp	r3, #1
 8025bc6:	dcac      	bgt.n	8025b22 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8025bc8:	697b      	ldr	r3, [r7, #20]
}
 8025bca:	4618      	mov	r0, r3
 8025bcc:	3728      	adds	r7, #40	; 0x28
 8025bce:	46bd      	mov	sp, r7
 8025bd0:	bd80      	pop	{r7, pc}
 8025bd2:	bf00      	nop
 8025bd4:	20016300 	.word	0x20016300

08025bd8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8025bd8:	b580      	push	{r7, lr}
 8025bda:	b084      	sub	sp, #16
 8025bdc:	af00      	add	r7, sp, #0
 8025bde:	6078      	str	r0, [r7, #4]
 8025be0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025be2:	2001      	movs	r0, #1
 8025be4:	f7fc fa76 	bl	80220d4 <memp_malloc>
 8025be8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8025bea:	68fb      	ldr	r3, [r7, #12]
 8025bec:	2b00      	cmp	r3, #0
 8025bee:	d110      	bne.n	8025c12 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8025bf0:	6839      	ldr	r1, [r7, #0]
 8025bf2:	6878      	ldr	r0, [r7, #4]
 8025bf4:	f7ff ff8e 	bl	8025b14 <ip_reass_remove_oldest_datagram>
 8025bf8:	4602      	mov	r2, r0
 8025bfa:	683b      	ldr	r3, [r7, #0]
 8025bfc:	4293      	cmp	r3, r2
 8025bfe:	dc03      	bgt.n	8025c08 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8025c00:	2001      	movs	r0, #1
 8025c02:	f7fc fa67 	bl	80220d4 <memp_malloc>
 8025c06:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8025c08:	68fb      	ldr	r3, [r7, #12]
 8025c0a:	2b00      	cmp	r3, #0
 8025c0c:	d101      	bne.n	8025c12 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8025c0e:	2300      	movs	r3, #0
 8025c10:	e016      	b.n	8025c40 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8025c12:	2220      	movs	r2, #32
 8025c14:	2100      	movs	r1, #0
 8025c16:	68f8      	ldr	r0, [r7, #12]
 8025c18:	f000 fe2c 	bl	8026874 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8025c1c:	68fb      	ldr	r3, [r7, #12]
 8025c1e:	220f      	movs	r2, #15
 8025c20:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8025c22:	4b09      	ldr	r3, [pc, #36]	; (8025c48 <ip_reass_enqueue_new_datagram+0x70>)
 8025c24:	681a      	ldr	r2, [r3, #0]
 8025c26:	68fb      	ldr	r3, [r7, #12]
 8025c28:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8025c2a:	4a07      	ldr	r2, [pc, #28]	; (8025c48 <ip_reass_enqueue_new_datagram+0x70>)
 8025c2c:	68fb      	ldr	r3, [r7, #12]
 8025c2e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8025c30:	68fb      	ldr	r3, [r7, #12]
 8025c32:	3308      	adds	r3, #8
 8025c34:	2214      	movs	r2, #20
 8025c36:	6879      	ldr	r1, [r7, #4]
 8025c38:	4618      	mov	r0, r3
 8025c3a:	f000 fdf3 	bl	8026824 <memcpy>
  return ipr;
 8025c3e:	68fb      	ldr	r3, [r7, #12]
}
 8025c40:	4618      	mov	r0, r3
 8025c42:	3710      	adds	r7, #16
 8025c44:	46bd      	mov	sp, r7
 8025c46:	bd80      	pop	{r7, pc}
 8025c48:	20016300 	.word	0x20016300

08025c4c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8025c4c:	b580      	push	{r7, lr}
 8025c4e:	b082      	sub	sp, #8
 8025c50:	af00      	add	r7, sp, #0
 8025c52:	6078      	str	r0, [r7, #4]
 8025c54:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8025c56:	4b10      	ldr	r3, [pc, #64]	; (8025c98 <ip_reass_dequeue_datagram+0x4c>)
 8025c58:	681b      	ldr	r3, [r3, #0]
 8025c5a:	687a      	ldr	r2, [r7, #4]
 8025c5c:	429a      	cmp	r2, r3
 8025c5e:	d104      	bne.n	8025c6a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8025c60:	687b      	ldr	r3, [r7, #4]
 8025c62:	681b      	ldr	r3, [r3, #0]
 8025c64:	4a0c      	ldr	r2, [pc, #48]	; (8025c98 <ip_reass_dequeue_datagram+0x4c>)
 8025c66:	6013      	str	r3, [r2, #0]
 8025c68:	e00d      	b.n	8025c86 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8025c6a:	683b      	ldr	r3, [r7, #0]
 8025c6c:	2b00      	cmp	r3, #0
 8025c6e:	d106      	bne.n	8025c7e <ip_reass_dequeue_datagram+0x32>
 8025c70:	4b0a      	ldr	r3, [pc, #40]	; (8025c9c <ip_reass_dequeue_datagram+0x50>)
 8025c72:	f240 1245 	movw	r2, #325	; 0x145
 8025c76:	490a      	ldr	r1, [pc, #40]	; (8025ca0 <ip_reass_dequeue_datagram+0x54>)
 8025c78:	480a      	ldr	r0, [pc, #40]	; (8025ca4 <ip_reass_dequeue_datagram+0x58>)
 8025c7a:	f000 fee3 	bl	8026a44 <iprintf>
    prev->next = ipr->next;
 8025c7e:	687b      	ldr	r3, [r7, #4]
 8025c80:	681a      	ldr	r2, [r3, #0]
 8025c82:	683b      	ldr	r3, [r7, #0]
 8025c84:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8025c86:	6879      	ldr	r1, [r7, #4]
 8025c88:	2001      	movs	r0, #1
 8025c8a:	f7fc fa93 	bl	80221b4 <memp_free>
}
 8025c8e:	bf00      	nop
 8025c90:	3708      	adds	r7, #8
 8025c92:	46bd      	mov	sp, r7
 8025c94:	bd80      	pop	{r7, pc}
 8025c96:	bf00      	nop
 8025c98:	20016300 	.word	0x20016300
 8025c9c:	0802d674 	.word	0x0802d674
 8025ca0:	0802d73c 	.word	0x0802d73c
 8025ca4:	0802d6bc 	.word	0x0802d6bc

08025ca8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8025ca8:	b580      	push	{r7, lr}
 8025caa:	b08c      	sub	sp, #48	; 0x30
 8025cac:	af00      	add	r7, sp, #0
 8025cae:	60f8      	str	r0, [r7, #12]
 8025cb0:	60b9      	str	r1, [r7, #8]
 8025cb2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8025cb4:	2300      	movs	r3, #0
 8025cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8025cb8:	2301      	movs	r3, #1
 8025cba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8025cbc:	68bb      	ldr	r3, [r7, #8]
 8025cbe:	685b      	ldr	r3, [r3, #4]
 8025cc0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8025cc2:	69fb      	ldr	r3, [r7, #28]
 8025cc4:	885b      	ldrh	r3, [r3, #2]
 8025cc6:	b29b      	uxth	r3, r3
 8025cc8:	4618      	mov	r0, r3
 8025cca:	f7fb fda7 	bl	802181c <lwip_htons>
 8025cce:	4603      	mov	r3, r0
 8025cd0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8025cd2:	69fb      	ldr	r3, [r7, #28]
 8025cd4:	781b      	ldrb	r3, [r3, #0]
 8025cd6:	f003 030f 	and.w	r3, r3, #15
 8025cda:	b2db      	uxtb	r3, r3
 8025cdc:	009b      	lsls	r3, r3, #2
 8025cde:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8025ce0:	7e7b      	ldrb	r3, [r7, #25]
 8025ce2:	b29b      	uxth	r3, r3
 8025ce4:	8b7a      	ldrh	r2, [r7, #26]
 8025ce6:	429a      	cmp	r2, r3
 8025ce8:	d202      	bcs.n	8025cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025cea:	f04f 33ff 	mov.w	r3, #4294967295
 8025cee:	e135      	b.n	8025f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8025cf0:	7e7b      	ldrb	r3, [r7, #25]
 8025cf2:	b29b      	uxth	r3, r3
 8025cf4:	8b7a      	ldrh	r2, [r7, #26]
 8025cf6:	1ad3      	subs	r3, r2, r3
 8025cf8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8025cfa:	69fb      	ldr	r3, [r7, #28]
 8025cfc:	88db      	ldrh	r3, [r3, #6]
 8025cfe:	b29b      	uxth	r3, r3
 8025d00:	4618      	mov	r0, r3
 8025d02:	f7fb fd8b 	bl	802181c <lwip_htons>
 8025d06:	4603      	mov	r3, r0
 8025d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025d0c:	b29b      	uxth	r3, r3
 8025d0e:	00db      	lsls	r3, r3, #3
 8025d10:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8025d12:	68bb      	ldr	r3, [r7, #8]
 8025d14:	685b      	ldr	r3, [r3, #4]
 8025d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8025d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d1a:	2200      	movs	r2, #0
 8025d1c:	701a      	strb	r2, [r3, #0]
 8025d1e:	2200      	movs	r2, #0
 8025d20:	705a      	strb	r2, [r3, #1]
 8025d22:	2200      	movs	r2, #0
 8025d24:	709a      	strb	r2, [r3, #2]
 8025d26:	2200      	movs	r2, #0
 8025d28:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8025d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d2c:	8afa      	ldrh	r2, [r7, #22]
 8025d2e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8025d30:	8afa      	ldrh	r2, [r7, #22]
 8025d32:	8b7b      	ldrh	r3, [r7, #26]
 8025d34:	4413      	add	r3, r2
 8025d36:	b29a      	uxth	r2, r3
 8025d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d3a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8025d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d3e:	88db      	ldrh	r3, [r3, #6]
 8025d40:	b29b      	uxth	r3, r3
 8025d42:	8afa      	ldrh	r2, [r7, #22]
 8025d44:	429a      	cmp	r2, r3
 8025d46:	d902      	bls.n	8025d4e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025d48:	f04f 33ff 	mov.w	r3, #4294967295
 8025d4c:	e106      	b.n	8025f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8025d4e:	68fb      	ldr	r3, [r7, #12]
 8025d50:	685b      	ldr	r3, [r3, #4]
 8025d52:	627b      	str	r3, [r7, #36]	; 0x24
 8025d54:	e068      	b.n	8025e28 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8025d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d58:	685b      	ldr	r3, [r3, #4]
 8025d5a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8025d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d5e:	889b      	ldrh	r3, [r3, #4]
 8025d60:	b29a      	uxth	r2, r3
 8025d62:	693b      	ldr	r3, [r7, #16]
 8025d64:	889b      	ldrh	r3, [r3, #4]
 8025d66:	b29b      	uxth	r3, r3
 8025d68:	429a      	cmp	r2, r3
 8025d6a:	d235      	bcs.n	8025dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8025d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025d70:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8025d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d74:	2b00      	cmp	r3, #0
 8025d76:	d020      	beq.n	8025dba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8025d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d7a:	889b      	ldrh	r3, [r3, #4]
 8025d7c:	b29a      	uxth	r2, r3
 8025d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025d80:	88db      	ldrh	r3, [r3, #6]
 8025d82:	b29b      	uxth	r3, r3
 8025d84:	429a      	cmp	r2, r3
 8025d86:	d307      	bcc.n	8025d98 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8025d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025d8a:	88db      	ldrh	r3, [r3, #6]
 8025d8c:	b29a      	uxth	r2, r3
 8025d8e:	693b      	ldr	r3, [r7, #16]
 8025d90:	889b      	ldrh	r3, [r3, #4]
 8025d92:	b29b      	uxth	r3, r3
 8025d94:	429a      	cmp	r2, r3
 8025d96:	d902      	bls.n	8025d9e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025d98:	f04f 33ff 	mov.w	r3, #4294967295
 8025d9c:	e0de      	b.n	8025f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8025d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025da0:	68ba      	ldr	r2, [r7, #8]
 8025da2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8025da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025da6:	88db      	ldrh	r3, [r3, #6]
 8025da8:	b29a      	uxth	r2, r3
 8025daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025dac:	889b      	ldrh	r3, [r3, #4]
 8025dae:	b29b      	uxth	r3, r3
 8025db0:	429a      	cmp	r2, r3
 8025db2:	d03d      	beq.n	8025e30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8025db4:	2300      	movs	r3, #0
 8025db6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8025db8:	e03a      	b.n	8025e30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8025dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025dbc:	88db      	ldrh	r3, [r3, #6]
 8025dbe:	b29a      	uxth	r2, r3
 8025dc0:	693b      	ldr	r3, [r7, #16]
 8025dc2:	889b      	ldrh	r3, [r3, #4]
 8025dc4:	b29b      	uxth	r3, r3
 8025dc6:	429a      	cmp	r2, r3
 8025dc8:	d902      	bls.n	8025dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025dca:	f04f 33ff 	mov.w	r3, #4294967295
 8025dce:	e0c5      	b.n	8025f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8025dd0:	68fb      	ldr	r3, [r7, #12]
 8025dd2:	68ba      	ldr	r2, [r7, #8]
 8025dd4:	605a      	str	r2, [r3, #4]
      break;
 8025dd6:	e02b      	b.n	8025e30 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8025dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025dda:	889b      	ldrh	r3, [r3, #4]
 8025ddc:	b29a      	uxth	r2, r3
 8025dde:	693b      	ldr	r3, [r7, #16]
 8025de0:	889b      	ldrh	r3, [r3, #4]
 8025de2:	b29b      	uxth	r3, r3
 8025de4:	429a      	cmp	r2, r3
 8025de6:	d102      	bne.n	8025dee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025de8:	f04f 33ff 	mov.w	r3, #4294967295
 8025dec:	e0b6      	b.n	8025f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8025dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025df0:	889b      	ldrh	r3, [r3, #4]
 8025df2:	b29a      	uxth	r2, r3
 8025df4:	693b      	ldr	r3, [r7, #16]
 8025df6:	88db      	ldrh	r3, [r3, #6]
 8025df8:	b29b      	uxth	r3, r3
 8025dfa:	429a      	cmp	r2, r3
 8025dfc:	d202      	bcs.n	8025e04 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8025e02:	e0ab      	b.n	8025f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8025e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e06:	2b00      	cmp	r3, #0
 8025e08:	d009      	beq.n	8025e1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8025e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e0c:	88db      	ldrh	r3, [r3, #6]
 8025e0e:	b29a      	uxth	r2, r3
 8025e10:	693b      	ldr	r3, [r7, #16]
 8025e12:	889b      	ldrh	r3, [r3, #4]
 8025e14:	b29b      	uxth	r3, r3
 8025e16:	429a      	cmp	r2, r3
 8025e18:	d001      	beq.n	8025e1e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8025e1a:	2300      	movs	r3, #0
 8025e1c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8025e1e:	693b      	ldr	r3, [r7, #16]
 8025e20:	681b      	ldr	r3, [r3, #0]
 8025e22:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8025e24:	693b      	ldr	r3, [r7, #16]
 8025e26:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8025e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e2a:	2b00      	cmp	r3, #0
 8025e2c:	d193      	bne.n	8025d56 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8025e2e:	e000      	b.n	8025e32 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8025e30:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8025e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	d12d      	bne.n	8025e94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8025e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e3a:	2b00      	cmp	r3, #0
 8025e3c:	d01c      	beq.n	8025e78 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8025e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e40:	88db      	ldrh	r3, [r3, #6]
 8025e42:	b29a      	uxth	r2, r3
 8025e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e46:	889b      	ldrh	r3, [r3, #4]
 8025e48:	b29b      	uxth	r3, r3
 8025e4a:	429a      	cmp	r2, r3
 8025e4c:	d906      	bls.n	8025e5c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8025e4e:	4b45      	ldr	r3, [pc, #276]	; (8025f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025e50:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8025e54:	4944      	ldr	r1, [pc, #272]	; (8025f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8025e56:	4845      	ldr	r0, [pc, #276]	; (8025f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025e58:	f000 fdf4 	bl	8026a44 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8025e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e5e:	68ba      	ldr	r2, [r7, #8]
 8025e60:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8025e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025e64:	88db      	ldrh	r3, [r3, #6]
 8025e66:	b29a      	uxth	r2, r3
 8025e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e6a:	889b      	ldrh	r3, [r3, #4]
 8025e6c:	b29b      	uxth	r3, r3
 8025e6e:	429a      	cmp	r2, r3
 8025e70:	d010      	beq.n	8025e94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8025e72:	2300      	movs	r3, #0
 8025e74:	623b      	str	r3, [r7, #32]
 8025e76:	e00d      	b.n	8025e94 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8025e78:	68fb      	ldr	r3, [r7, #12]
 8025e7a:	685b      	ldr	r3, [r3, #4]
 8025e7c:	2b00      	cmp	r3, #0
 8025e7e:	d006      	beq.n	8025e8e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8025e80:	4b38      	ldr	r3, [pc, #224]	; (8025f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025e82:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8025e86:	493a      	ldr	r1, [pc, #232]	; (8025f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8025e88:	4838      	ldr	r0, [pc, #224]	; (8025f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025e8a:	f000 fddb 	bl	8026a44 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8025e8e:	68fb      	ldr	r3, [r7, #12]
 8025e90:	68ba      	ldr	r2, [r7, #8]
 8025e92:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8025e94:	687b      	ldr	r3, [r7, #4]
 8025e96:	2b00      	cmp	r3, #0
 8025e98:	d105      	bne.n	8025ea6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8025e9a:	68fb      	ldr	r3, [r7, #12]
 8025e9c:	7f9b      	ldrb	r3, [r3, #30]
 8025e9e:	f003 0301 	and.w	r3, r3, #1
 8025ea2:	2b00      	cmp	r3, #0
 8025ea4:	d059      	beq.n	8025f5a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8025ea6:	6a3b      	ldr	r3, [r7, #32]
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	d04f      	beq.n	8025f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8025eac:	68fb      	ldr	r3, [r7, #12]
 8025eae:	685b      	ldr	r3, [r3, #4]
 8025eb0:	2b00      	cmp	r3, #0
 8025eb2:	d006      	beq.n	8025ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8025eb4:	68fb      	ldr	r3, [r7, #12]
 8025eb6:	685b      	ldr	r3, [r3, #4]
 8025eb8:	685b      	ldr	r3, [r3, #4]
 8025eba:	889b      	ldrh	r3, [r3, #4]
 8025ebc:	b29b      	uxth	r3, r3
 8025ebe:	2b00      	cmp	r3, #0
 8025ec0:	d002      	beq.n	8025ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8025ec2:	2300      	movs	r3, #0
 8025ec4:	623b      	str	r3, [r7, #32]
 8025ec6:	e041      	b.n	8025f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8025ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025eca:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8025ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ece:	681b      	ldr	r3, [r3, #0]
 8025ed0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8025ed2:	e012      	b.n	8025efa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8025ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ed6:	685b      	ldr	r3, [r3, #4]
 8025ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8025eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025edc:	88db      	ldrh	r3, [r3, #6]
 8025ede:	b29a      	uxth	r2, r3
 8025ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ee2:	889b      	ldrh	r3, [r3, #4]
 8025ee4:	b29b      	uxth	r3, r3
 8025ee6:	429a      	cmp	r2, r3
 8025ee8:	d002      	beq.n	8025ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8025eea:	2300      	movs	r3, #0
 8025eec:	623b      	str	r3, [r7, #32]
            break;
 8025eee:	e007      	b.n	8025f00 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8025ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ef2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8025ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ef6:	681b      	ldr	r3, [r3, #0]
 8025ef8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8025efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025efc:	2b00      	cmp	r3, #0
 8025efe:	d1e9      	bne.n	8025ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8025f00:	6a3b      	ldr	r3, [r7, #32]
 8025f02:	2b00      	cmp	r3, #0
 8025f04:	d022      	beq.n	8025f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8025f06:	68fb      	ldr	r3, [r7, #12]
 8025f08:	685b      	ldr	r3, [r3, #4]
 8025f0a:	2b00      	cmp	r3, #0
 8025f0c:	d106      	bne.n	8025f1c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8025f0e:	4b15      	ldr	r3, [pc, #84]	; (8025f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025f10:	f240 12df 	movw	r2, #479	; 0x1df
 8025f14:	4917      	ldr	r1, [pc, #92]	; (8025f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8025f16:	4815      	ldr	r0, [pc, #84]	; (8025f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025f18:	f000 fd94 	bl	8026a44 <iprintf>
          LWIP_ASSERT("sanity check",
 8025f1c:	68fb      	ldr	r3, [r7, #12]
 8025f1e:	685b      	ldr	r3, [r3, #4]
 8025f20:	685b      	ldr	r3, [r3, #4]
 8025f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025f24:	429a      	cmp	r2, r3
 8025f26:	d106      	bne.n	8025f36 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8025f28:	4b0e      	ldr	r3, [pc, #56]	; (8025f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025f2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8025f2e:	4911      	ldr	r1, [pc, #68]	; (8025f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8025f30:	480e      	ldr	r0, [pc, #56]	; (8025f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025f32:	f000 fd87 	bl	8026a44 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8025f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f38:	681b      	ldr	r3, [r3, #0]
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	d006      	beq.n	8025f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8025f3e:	4b09      	ldr	r3, [pc, #36]	; (8025f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8025f40:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8025f44:	490c      	ldr	r1, [pc, #48]	; (8025f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8025f46:	4809      	ldr	r0, [pc, #36]	; (8025f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025f48:	f000 fd7c 	bl	8026a44 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8025f4c:	6a3b      	ldr	r3, [r7, #32]
 8025f4e:	2b00      	cmp	r3, #0
 8025f50:	bf14      	ite	ne
 8025f52:	2301      	movne	r3, #1
 8025f54:	2300      	moveq	r3, #0
 8025f56:	b2db      	uxtb	r3, r3
 8025f58:	e000      	b.n	8025f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8025f5a:	2300      	movs	r3, #0
}
 8025f5c:	4618      	mov	r0, r3
 8025f5e:	3730      	adds	r7, #48	; 0x30
 8025f60:	46bd      	mov	sp, r7
 8025f62:	bd80      	pop	{r7, pc}
 8025f64:	0802d674 	.word	0x0802d674
 8025f68:	0802d758 	.word	0x0802d758
 8025f6c:	0802d6bc 	.word	0x0802d6bc
 8025f70:	0802d778 	.word	0x0802d778
 8025f74:	0802d7b0 	.word	0x0802d7b0
 8025f78:	0802d7c0 	.word	0x0802d7c0

08025f7c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8025f7c:	b580      	push	{r7, lr}
 8025f7e:	b08e      	sub	sp, #56	; 0x38
 8025f80:	af00      	add	r7, sp, #0
 8025f82:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8025f84:	687b      	ldr	r3, [r7, #4]
 8025f86:	685b      	ldr	r3, [r3, #4]
 8025f88:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8025f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f8c:	781b      	ldrb	r3, [r3, #0]
 8025f8e:	f003 030f 	and.w	r3, r3, #15
 8025f92:	b2db      	uxtb	r3, r3
 8025f94:	009b      	lsls	r3, r3, #2
 8025f96:	b2db      	uxtb	r3, r3
 8025f98:	2b14      	cmp	r3, #20
 8025f9a:	f040 8171 	bne.w	8026280 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8025f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fa0:	88db      	ldrh	r3, [r3, #6]
 8025fa2:	b29b      	uxth	r3, r3
 8025fa4:	4618      	mov	r0, r3
 8025fa6:	f7fb fc39 	bl	802181c <lwip_htons>
 8025faa:	4603      	mov	r3, r0
 8025fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025fb0:	b29b      	uxth	r3, r3
 8025fb2:	00db      	lsls	r3, r3, #3
 8025fb4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8025fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fb8:	885b      	ldrh	r3, [r3, #2]
 8025fba:	b29b      	uxth	r3, r3
 8025fbc:	4618      	mov	r0, r3
 8025fbe:	f7fb fc2d 	bl	802181c <lwip_htons>
 8025fc2:	4603      	mov	r3, r0
 8025fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8025fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fc8:	781b      	ldrb	r3, [r3, #0]
 8025fca:	f003 030f 	and.w	r3, r3, #15
 8025fce:	b2db      	uxtb	r3, r3
 8025fd0:	009b      	lsls	r3, r3, #2
 8025fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8025fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025fda:	b29b      	uxth	r3, r3
 8025fdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025fde:	429a      	cmp	r2, r3
 8025fe0:	f0c0 8150 	bcc.w	8026284 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8025fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025fe8:	b29b      	uxth	r3, r3
 8025fea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025fec:	1ad3      	subs	r3, r2, r3
 8025fee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8025ff0:	6878      	ldr	r0, [r7, #4]
 8025ff2:	f7fd f877 	bl	80230e4 <pbuf_clen>
 8025ff6:	4603      	mov	r3, r0
 8025ff8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8025ffa:	4b8c      	ldr	r3, [pc, #560]	; (802622c <ip4_reass+0x2b0>)
 8025ffc:	881b      	ldrh	r3, [r3, #0]
 8025ffe:	461a      	mov	r2, r3
 8026000:	8c3b      	ldrh	r3, [r7, #32]
 8026002:	4413      	add	r3, r2
 8026004:	2b0a      	cmp	r3, #10
 8026006:	dd10      	ble.n	802602a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8026008:	8c3b      	ldrh	r3, [r7, #32]
 802600a:	4619      	mov	r1, r3
 802600c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802600e:	f7ff fd81 	bl	8025b14 <ip_reass_remove_oldest_datagram>
 8026012:	4603      	mov	r3, r0
 8026014:	2b00      	cmp	r3, #0
 8026016:	f000 8137 	beq.w	8026288 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802601a:	4b84      	ldr	r3, [pc, #528]	; (802622c <ip4_reass+0x2b0>)
 802601c:	881b      	ldrh	r3, [r3, #0]
 802601e:	461a      	mov	r2, r3
 8026020:	8c3b      	ldrh	r3, [r7, #32]
 8026022:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8026024:	2b0a      	cmp	r3, #10
 8026026:	f300 812f 	bgt.w	8026288 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802602a:	4b81      	ldr	r3, [pc, #516]	; (8026230 <ip4_reass+0x2b4>)
 802602c:	681b      	ldr	r3, [r3, #0]
 802602e:	633b      	str	r3, [r7, #48]	; 0x30
 8026030:	e015      	b.n	802605e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8026032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026034:	695a      	ldr	r2, [r3, #20]
 8026036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026038:	68db      	ldr	r3, [r3, #12]
 802603a:	429a      	cmp	r2, r3
 802603c:	d10c      	bne.n	8026058 <ip4_reass+0xdc>
 802603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026040:	699a      	ldr	r2, [r3, #24]
 8026042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026044:	691b      	ldr	r3, [r3, #16]
 8026046:	429a      	cmp	r2, r3
 8026048:	d106      	bne.n	8026058 <ip4_reass+0xdc>
 802604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802604c:	899a      	ldrh	r2, [r3, #12]
 802604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026050:	889b      	ldrh	r3, [r3, #4]
 8026052:	b29b      	uxth	r3, r3
 8026054:	429a      	cmp	r2, r3
 8026056:	d006      	beq.n	8026066 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8026058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802605a:	681b      	ldr	r3, [r3, #0]
 802605c:	633b      	str	r3, [r7, #48]	; 0x30
 802605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026060:	2b00      	cmp	r3, #0
 8026062:	d1e6      	bne.n	8026032 <ip4_reass+0xb6>
 8026064:	e000      	b.n	8026068 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8026066:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8026068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802606a:	2b00      	cmp	r3, #0
 802606c:	d109      	bne.n	8026082 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802606e:	8c3b      	ldrh	r3, [r7, #32]
 8026070:	4619      	mov	r1, r3
 8026072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026074:	f7ff fdb0 	bl	8025bd8 <ip_reass_enqueue_new_datagram>
 8026078:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802607c:	2b00      	cmp	r3, #0
 802607e:	d11c      	bne.n	80260ba <ip4_reass+0x13e>
      goto nullreturn;
 8026080:	e105      	b.n	802628e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8026082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026084:	88db      	ldrh	r3, [r3, #6]
 8026086:	b29b      	uxth	r3, r3
 8026088:	4618      	mov	r0, r3
 802608a:	f7fb fbc7 	bl	802181c <lwip_htons>
 802608e:	4603      	mov	r3, r0
 8026090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026094:	2b00      	cmp	r3, #0
 8026096:	d110      	bne.n	80260ba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8026098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802609a:	89db      	ldrh	r3, [r3, #14]
 802609c:	4618      	mov	r0, r3
 802609e:	f7fb fbbd 	bl	802181c <lwip_htons>
 80260a2:	4603      	mov	r3, r0
 80260a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80260a8:	2b00      	cmp	r3, #0
 80260aa:	d006      	beq.n	80260ba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80260ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80260ae:	3308      	adds	r3, #8
 80260b0:	2214      	movs	r2, #20
 80260b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80260b4:	4618      	mov	r0, r3
 80260b6:	f000 fbb5 	bl	8026824 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80260ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80260bc:	88db      	ldrh	r3, [r3, #6]
 80260be:	b29b      	uxth	r3, r3
 80260c0:	f003 0320 	and.w	r3, r3, #32
 80260c4:	2b00      	cmp	r3, #0
 80260c6:	bf0c      	ite	eq
 80260c8:	2301      	moveq	r3, #1
 80260ca:	2300      	movne	r3, #0
 80260cc:	b2db      	uxtb	r3, r3
 80260ce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80260d0:	69fb      	ldr	r3, [r7, #28]
 80260d2:	2b00      	cmp	r3, #0
 80260d4:	d00e      	beq.n	80260f4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80260d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80260d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80260da:	4413      	add	r3, r2
 80260dc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80260de:	8b7a      	ldrh	r2, [r7, #26]
 80260e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80260e2:	429a      	cmp	r2, r3
 80260e4:	f0c0 80a0 	bcc.w	8026228 <ip4_reass+0x2ac>
 80260e8:	8b7b      	ldrh	r3, [r7, #26]
 80260ea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80260ee:	4293      	cmp	r3, r2
 80260f0:	f200 809a 	bhi.w	8026228 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80260f4:	69fa      	ldr	r2, [r7, #28]
 80260f6:	6879      	ldr	r1, [r7, #4]
 80260f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80260fa:	f7ff fdd5 	bl	8025ca8 <ip_reass_chain_frag_into_datagram_and_validate>
 80260fe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8026100:	697b      	ldr	r3, [r7, #20]
 8026102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026106:	f000 809b 	beq.w	8026240 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802610a:	4b48      	ldr	r3, [pc, #288]	; (802622c <ip4_reass+0x2b0>)
 802610c:	881a      	ldrh	r2, [r3, #0]
 802610e:	8c3b      	ldrh	r3, [r7, #32]
 8026110:	4413      	add	r3, r2
 8026112:	b29a      	uxth	r2, r3
 8026114:	4b45      	ldr	r3, [pc, #276]	; (802622c <ip4_reass+0x2b0>)
 8026116:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8026118:	69fb      	ldr	r3, [r7, #28]
 802611a:	2b00      	cmp	r3, #0
 802611c:	d00d      	beq.n	802613a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802611e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8026120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8026122:	4413      	add	r3, r2
 8026124:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8026126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026128:	8a7a      	ldrh	r2, [r7, #18]
 802612a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802612e:	7f9b      	ldrb	r3, [r3, #30]
 8026130:	f043 0301 	orr.w	r3, r3, #1
 8026134:	b2da      	uxtb	r2, r3
 8026136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026138:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802613a:	697b      	ldr	r3, [r7, #20]
 802613c:	2b01      	cmp	r3, #1
 802613e:	d171      	bne.n	8026224 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8026140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026142:	8b9b      	ldrh	r3, [r3, #28]
 8026144:	3314      	adds	r3, #20
 8026146:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8026148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802614a:	685b      	ldr	r3, [r3, #4]
 802614c:	685b      	ldr	r3, [r3, #4]
 802614e:	681b      	ldr	r3, [r3, #0]
 8026150:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8026152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026154:	685b      	ldr	r3, [r3, #4]
 8026156:	685b      	ldr	r3, [r3, #4]
 8026158:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802615c:	3308      	adds	r3, #8
 802615e:	2214      	movs	r2, #20
 8026160:	4619      	mov	r1, r3
 8026162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8026164:	f000 fb5e 	bl	8026824 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8026168:	8a3b      	ldrh	r3, [r7, #16]
 802616a:	4618      	mov	r0, r3
 802616c:	f7fb fb56 	bl	802181c <lwip_htons>
 8026170:	4603      	mov	r3, r0
 8026172:	461a      	mov	r2, r3
 8026174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026176:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8026178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802617a:	2200      	movs	r2, #0
 802617c:	719a      	strb	r2, [r3, #6]
 802617e:	2200      	movs	r2, #0
 8026180:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8026182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026184:	2200      	movs	r2, #0
 8026186:	729a      	strb	r2, [r3, #10]
 8026188:	2200      	movs	r2, #0
 802618a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 802618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802618e:	685b      	ldr	r3, [r3, #4]
 8026190:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8026192:	e00d      	b.n	80261b0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8026194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026196:	685b      	ldr	r3, [r3, #4]
 8026198:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802619a:	2114      	movs	r1, #20
 802619c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802619e:	f7fc fe93 	bl	8022ec8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80261a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80261a4:	6878      	ldr	r0, [r7, #4]
 80261a6:	f7fc ffd7 	bl	8023158 <pbuf_cat>
      r = iprh->next_pbuf;
 80261aa:	68fb      	ldr	r3, [r7, #12]
 80261ac:	681b      	ldr	r3, [r3, #0]
 80261ae:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80261b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80261b2:	2b00      	cmp	r3, #0
 80261b4:	d1ee      	bne.n	8026194 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80261b6:	4b1e      	ldr	r3, [pc, #120]	; (8026230 <ip4_reass+0x2b4>)
 80261b8:	681b      	ldr	r3, [r3, #0]
 80261ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80261bc:	429a      	cmp	r2, r3
 80261be:	d102      	bne.n	80261c6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80261c0:	2300      	movs	r3, #0
 80261c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80261c4:	e010      	b.n	80261e8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80261c6:	4b1a      	ldr	r3, [pc, #104]	; (8026230 <ip4_reass+0x2b4>)
 80261c8:	681b      	ldr	r3, [r3, #0]
 80261ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80261cc:	e007      	b.n	80261de <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80261ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80261d0:	681b      	ldr	r3, [r3, #0]
 80261d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80261d4:	429a      	cmp	r2, r3
 80261d6:	d006      	beq.n	80261e6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80261d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80261da:	681b      	ldr	r3, [r3, #0]
 80261dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80261de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80261e0:	2b00      	cmp	r3, #0
 80261e2:	d1f4      	bne.n	80261ce <ip4_reass+0x252>
 80261e4:	e000      	b.n	80261e8 <ip4_reass+0x26c>
          break;
 80261e6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80261e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80261ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80261ec:	f7ff fd2e 	bl	8025c4c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80261f0:	6878      	ldr	r0, [r7, #4]
 80261f2:	f7fc ff77 	bl	80230e4 <pbuf_clen>
 80261f6:	4603      	mov	r3, r0
 80261f8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80261fa:	4b0c      	ldr	r3, [pc, #48]	; (802622c <ip4_reass+0x2b0>)
 80261fc:	881b      	ldrh	r3, [r3, #0]
 80261fe:	8c3a      	ldrh	r2, [r7, #32]
 8026200:	429a      	cmp	r2, r3
 8026202:	d906      	bls.n	8026212 <ip4_reass+0x296>
 8026204:	4b0b      	ldr	r3, [pc, #44]	; (8026234 <ip4_reass+0x2b8>)
 8026206:	f240 229b 	movw	r2, #667	; 0x29b
 802620a:	490b      	ldr	r1, [pc, #44]	; (8026238 <ip4_reass+0x2bc>)
 802620c:	480b      	ldr	r0, [pc, #44]	; (802623c <ip4_reass+0x2c0>)
 802620e:	f000 fc19 	bl	8026a44 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8026212:	4b06      	ldr	r3, [pc, #24]	; (802622c <ip4_reass+0x2b0>)
 8026214:	881a      	ldrh	r2, [r3, #0]
 8026216:	8c3b      	ldrh	r3, [r7, #32]
 8026218:	1ad3      	subs	r3, r2, r3
 802621a:	b29a      	uxth	r2, r3
 802621c:	4b03      	ldr	r3, [pc, #12]	; (802622c <ip4_reass+0x2b0>)
 802621e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8026220:	687b      	ldr	r3, [r7, #4]
 8026222:	e038      	b.n	8026296 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8026224:	2300      	movs	r3, #0
 8026226:	e036      	b.n	8026296 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8026228:	bf00      	nop
 802622a:	e00a      	b.n	8026242 <ip4_reass+0x2c6>
 802622c:	20016304 	.word	0x20016304
 8026230:	20016300 	.word	0x20016300
 8026234:	0802d674 	.word	0x0802d674
 8026238:	0802d7e4 	.word	0x0802d7e4
 802623c:	0802d6bc 	.word	0x0802d6bc
    goto nullreturn_ipr;
 8026240:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8026242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026244:	2b00      	cmp	r3, #0
 8026246:	d106      	bne.n	8026256 <ip4_reass+0x2da>
 8026248:	4b15      	ldr	r3, [pc, #84]	; (80262a0 <ip4_reass+0x324>)
 802624a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 802624e:	4915      	ldr	r1, [pc, #84]	; (80262a4 <ip4_reass+0x328>)
 8026250:	4815      	ldr	r0, [pc, #84]	; (80262a8 <ip4_reass+0x32c>)
 8026252:	f000 fbf7 	bl	8026a44 <iprintf>
  if (ipr->p == NULL) {
 8026256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026258:	685b      	ldr	r3, [r3, #4]
 802625a:	2b00      	cmp	r3, #0
 802625c:	d116      	bne.n	802628c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 802625e:	4b13      	ldr	r3, [pc, #76]	; (80262ac <ip4_reass+0x330>)
 8026260:	681b      	ldr	r3, [r3, #0]
 8026262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8026264:	429a      	cmp	r2, r3
 8026266:	d006      	beq.n	8026276 <ip4_reass+0x2fa>
 8026268:	4b0d      	ldr	r3, [pc, #52]	; (80262a0 <ip4_reass+0x324>)
 802626a:	f240 22ab 	movw	r2, #683	; 0x2ab
 802626e:	4910      	ldr	r1, [pc, #64]	; (80262b0 <ip4_reass+0x334>)
 8026270:	480d      	ldr	r0, [pc, #52]	; (80262a8 <ip4_reass+0x32c>)
 8026272:	f000 fbe7 	bl	8026a44 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8026276:	2100      	movs	r1, #0
 8026278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802627a:	f7ff fce7 	bl	8025c4c <ip_reass_dequeue_datagram>
 802627e:	e006      	b.n	802628e <ip4_reass+0x312>
    goto nullreturn;
 8026280:	bf00      	nop
 8026282:	e004      	b.n	802628e <ip4_reass+0x312>
    goto nullreturn;
 8026284:	bf00      	nop
 8026286:	e002      	b.n	802628e <ip4_reass+0x312>
      goto nullreturn;
 8026288:	bf00      	nop
 802628a:	e000      	b.n	802628e <ip4_reass+0x312>
  }

nullreturn:
 802628c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802628e:	6878      	ldr	r0, [r7, #4]
 8026290:	f7fc fea0 	bl	8022fd4 <pbuf_free>
  return NULL;
 8026294:	2300      	movs	r3, #0
}
 8026296:	4618      	mov	r0, r3
 8026298:	3738      	adds	r7, #56	; 0x38
 802629a:	46bd      	mov	sp, r7
 802629c:	bd80      	pop	{r7, pc}
 802629e:	bf00      	nop
 80262a0:	0802d674 	.word	0x0802d674
 80262a4:	0802d800 	.word	0x0802d800
 80262a8:	0802d6bc 	.word	0x0802d6bc
 80262ac:	20016300 	.word	0x20016300
 80262b0:	0802d80c 	.word	0x0802d80c

080262b4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80262b4:	b580      	push	{r7, lr}
 80262b6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80262b8:	2002      	movs	r0, #2
 80262ba:	f7fb ff0b 	bl	80220d4 <memp_malloc>
 80262be:	4603      	mov	r3, r0
}
 80262c0:	4618      	mov	r0, r3
 80262c2:	bd80      	pop	{r7, pc}

080262c4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80262c4:	b580      	push	{r7, lr}
 80262c6:	b082      	sub	sp, #8
 80262c8:	af00      	add	r7, sp, #0
 80262ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80262cc:	687b      	ldr	r3, [r7, #4]
 80262ce:	2b00      	cmp	r3, #0
 80262d0:	d106      	bne.n	80262e0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80262d2:	4b07      	ldr	r3, [pc, #28]	; (80262f0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80262d4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80262d8:	4906      	ldr	r1, [pc, #24]	; (80262f4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80262da:	4807      	ldr	r0, [pc, #28]	; (80262f8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80262dc:	f000 fbb2 	bl	8026a44 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80262e0:	6879      	ldr	r1, [r7, #4]
 80262e2:	2002      	movs	r0, #2
 80262e4:	f7fb ff66 	bl	80221b4 <memp_free>
}
 80262e8:	bf00      	nop
 80262ea:	3708      	adds	r7, #8
 80262ec:	46bd      	mov	sp, r7
 80262ee:	bd80      	pop	{r7, pc}
 80262f0:	0802d674 	.word	0x0802d674
 80262f4:	0802d82c 	.word	0x0802d82c
 80262f8:	0802d6bc 	.word	0x0802d6bc

080262fc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80262fc:	b580      	push	{r7, lr}
 80262fe:	b084      	sub	sp, #16
 8026300:	af00      	add	r7, sp, #0
 8026302:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8026304:	687b      	ldr	r3, [r7, #4]
 8026306:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8026308:	68fb      	ldr	r3, [r7, #12]
 802630a:	2b00      	cmp	r3, #0
 802630c:	d106      	bne.n	802631c <ipfrag_free_pbuf_custom+0x20>
 802630e:	4b11      	ldr	r3, [pc, #68]	; (8026354 <ipfrag_free_pbuf_custom+0x58>)
 8026310:	f240 22ce 	movw	r2, #718	; 0x2ce
 8026314:	4910      	ldr	r1, [pc, #64]	; (8026358 <ipfrag_free_pbuf_custom+0x5c>)
 8026316:	4811      	ldr	r0, [pc, #68]	; (802635c <ipfrag_free_pbuf_custom+0x60>)
 8026318:	f000 fb94 	bl	8026a44 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 802631c:	68fa      	ldr	r2, [r7, #12]
 802631e:	687b      	ldr	r3, [r7, #4]
 8026320:	429a      	cmp	r2, r3
 8026322:	d006      	beq.n	8026332 <ipfrag_free_pbuf_custom+0x36>
 8026324:	4b0b      	ldr	r3, [pc, #44]	; (8026354 <ipfrag_free_pbuf_custom+0x58>)
 8026326:	f240 22cf 	movw	r2, #719	; 0x2cf
 802632a:	490d      	ldr	r1, [pc, #52]	; (8026360 <ipfrag_free_pbuf_custom+0x64>)
 802632c:	480b      	ldr	r0, [pc, #44]	; (802635c <ipfrag_free_pbuf_custom+0x60>)
 802632e:	f000 fb89 	bl	8026a44 <iprintf>
  if (pcr->original != NULL) {
 8026332:	68fb      	ldr	r3, [r7, #12]
 8026334:	695b      	ldr	r3, [r3, #20]
 8026336:	2b00      	cmp	r3, #0
 8026338:	d004      	beq.n	8026344 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802633a:	68fb      	ldr	r3, [r7, #12]
 802633c:	695b      	ldr	r3, [r3, #20]
 802633e:	4618      	mov	r0, r3
 8026340:	f7fc fe48 	bl	8022fd4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8026344:	68f8      	ldr	r0, [r7, #12]
 8026346:	f7ff ffbd 	bl	80262c4 <ip_frag_free_pbuf_custom_ref>
}
 802634a:	bf00      	nop
 802634c:	3710      	adds	r7, #16
 802634e:	46bd      	mov	sp, r7
 8026350:	bd80      	pop	{r7, pc}
 8026352:	bf00      	nop
 8026354:	0802d674 	.word	0x0802d674
 8026358:	0802d838 	.word	0x0802d838
 802635c:	0802d6bc 	.word	0x0802d6bc
 8026360:	0802d844 	.word	0x0802d844

08026364 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8026364:	b580      	push	{r7, lr}
 8026366:	b094      	sub	sp, #80	; 0x50
 8026368:	af02      	add	r7, sp, #8
 802636a:	60f8      	str	r0, [r7, #12]
 802636c:	60b9      	str	r1, [r7, #8]
 802636e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8026370:	2300      	movs	r3, #0
 8026372:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8026376:	68bb      	ldr	r3, [r7, #8]
 8026378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802637a:	3b14      	subs	r3, #20
 802637c:	2b00      	cmp	r3, #0
 802637e:	da00      	bge.n	8026382 <ip4_frag+0x1e>
 8026380:	3307      	adds	r3, #7
 8026382:	10db      	asrs	r3, r3, #3
 8026384:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8026386:	2314      	movs	r3, #20
 8026388:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802638a:	68fb      	ldr	r3, [r7, #12]
 802638c:	685b      	ldr	r3, [r3, #4]
 802638e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8026390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026392:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8026394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026396:	781b      	ldrb	r3, [r3, #0]
 8026398:	f003 030f 	and.w	r3, r3, #15
 802639c:	b2db      	uxtb	r3, r3
 802639e:	009b      	lsls	r3, r3, #2
 80263a0:	b2db      	uxtb	r3, r3
 80263a2:	2b14      	cmp	r3, #20
 80263a4:	d002      	beq.n	80263ac <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80263a6:	f06f 0305 	mvn.w	r3, #5
 80263aa:	e110      	b.n	80265ce <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80263ac:	68fb      	ldr	r3, [r7, #12]
 80263ae:	895b      	ldrh	r3, [r3, #10]
 80263b0:	2b13      	cmp	r3, #19
 80263b2:	d809      	bhi.n	80263c8 <ip4_frag+0x64>
 80263b4:	4b88      	ldr	r3, [pc, #544]	; (80265d8 <ip4_frag+0x274>)
 80263b6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80263ba:	4988      	ldr	r1, [pc, #544]	; (80265dc <ip4_frag+0x278>)
 80263bc:	4888      	ldr	r0, [pc, #544]	; (80265e0 <ip4_frag+0x27c>)
 80263be:	f000 fb41 	bl	8026a44 <iprintf>
 80263c2:	f06f 0305 	mvn.w	r3, #5
 80263c6:	e102      	b.n	80265ce <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80263c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80263ca:	88db      	ldrh	r3, [r3, #6]
 80263cc:	b29b      	uxth	r3, r3
 80263ce:	4618      	mov	r0, r3
 80263d0:	f7fb fa24 	bl	802181c <lwip_htons>
 80263d4:	4603      	mov	r3, r0
 80263d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80263d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80263da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80263de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80263e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80263e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80263e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80263ea:	68fb      	ldr	r3, [r7, #12]
 80263ec:	891b      	ldrh	r3, [r3, #8]
 80263ee:	3b14      	subs	r3, #20
 80263f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80263f4:	e0e1      	b.n	80265ba <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80263f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80263f8:	00db      	lsls	r3, r3, #3
 80263fa:	b29b      	uxth	r3, r3
 80263fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8026400:	4293      	cmp	r3, r2
 8026402:	bf28      	it	cs
 8026404:	4613      	movcs	r3, r2
 8026406:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8026408:	f44f 7220 	mov.w	r2, #640	; 0x280
 802640c:	2114      	movs	r1, #20
 802640e:	200e      	movs	r0, #14
 8026410:	f7fc fafe 	bl	8022a10 <pbuf_alloc>
 8026414:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8026416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026418:	2b00      	cmp	r3, #0
 802641a:	f000 80d5 	beq.w	80265c8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026420:	895b      	ldrh	r3, [r3, #10]
 8026422:	2b13      	cmp	r3, #19
 8026424:	d806      	bhi.n	8026434 <ip4_frag+0xd0>
 8026426:	4b6c      	ldr	r3, [pc, #432]	; (80265d8 <ip4_frag+0x274>)
 8026428:	f44f 7249 	mov.w	r2, #804	; 0x324
 802642c:	496d      	ldr	r1, [pc, #436]	; (80265e4 <ip4_frag+0x280>)
 802642e:	486c      	ldr	r0, [pc, #432]	; (80265e0 <ip4_frag+0x27c>)
 8026430:	f000 fb08 	bl	8026a44 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8026434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026436:	685b      	ldr	r3, [r3, #4]
 8026438:	2214      	movs	r2, #20
 802643a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802643c:	4618      	mov	r0, r3
 802643e:	f000 f9f1 	bl	8026824 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8026442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026444:	685b      	ldr	r3, [r3, #4]
 8026446:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8026448:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802644a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 802644e:	e064      	b.n	802651a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8026450:	68fb      	ldr	r3, [r7, #12]
 8026452:	895a      	ldrh	r2, [r3, #10]
 8026454:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8026456:	1ad3      	subs	r3, r2, r3
 8026458:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802645a:	68fb      	ldr	r3, [r7, #12]
 802645c:	895b      	ldrh	r3, [r3, #10]
 802645e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8026460:	429a      	cmp	r2, r3
 8026462:	d906      	bls.n	8026472 <ip4_frag+0x10e>
 8026464:	4b5c      	ldr	r3, [pc, #368]	; (80265d8 <ip4_frag+0x274>)
 8026466:	f240 322d 	movw	r2, #813	; 0x32d
 802646a:	495f      	ldr	r1, [pc, #380]	; (80265e8 <ip4_frag+0x284>)
 802646c:	485c      	ldr	r0, [pc, #368]	; (80265e0 <ip4_frag+0x27c>)
 802646e:	f000 fae9 	bl	8026a44 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8026472:	8bfa      	ldrh	r2, [r7, #30]
 8026474:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026478:	4293      	cmp	r3, r2
 802647a:	bf28      	it	cs
 802647c:	4613      	movcs	r3, r2
 802647e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8026482:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8026486:	2b00      	cmp	r3, #0
 8026488:	d105      	bne.n	8026496 <ip4_frag+0x132>
        poff = 0;
 802648a:	2300      	movs	r3, #0
 802648c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802648e:	68fb      	ldr	r3, [r7, #12]
 8026490:	681b      	ldr	r3, [r3, #0]
 8026492:	60fb      	str	r3, [r7, #12]
        continue;
 8026494:	e041      	b.n	802651a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8026496:	f7ff ff0d 	bl	80262b4 <ip_frag_alloc_pbuf_custom_ref>
 802649a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 802649c:	69bb      	ldr	r3, [r7, #24]
 802649e:	2b00      	cmp	r3, #0
 80264a0:	d103      	bne.n	80264aa <ip4_frag+0x146>
        pbuf_free(rambuf);
 80264a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80264a4:	f7fc fd96 	bl	8022fd4 <pbuf_free>
        goto memerr;
 80264a8:	e08f      	b.n	80265ca <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80264aa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80264ac:	68fb      	ldr	r3, [r7, #12]
 80264ae:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80264b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80264b2:	4413      	add	r3, r2
 80264b4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80264b8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80264bc:	9201      	str	r2, [sp, #4]
 80264be:	9300      	str	r3, [sp, #0]
 80264c0:	4603      	mov	r3, r0
 80264c2:	2241      	movs	r2, #65	; 0x41
 80264c4:	2000      	movs	r0, #0
 80264c6:	f7fc fbcb 	bl	8022c60 <pbuf_alloced_custom>
 80264ca:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80264cc:	697b      	ldr	r3, [r7, #20]
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	d106      	bne.n	80264e0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80264d2:	69b8      	ldr	r0, [r7, #24]
 80264d4:	f7ff fef6 	bl	80262c4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80264d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80264da:	f7fc fd7b 	bl	8022fd4 <pbuf_free>
        goto memerr;
 80264de:	e074      	b.n	80265ca <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80264e0:	68f8      	ldr	r0, [r7, #12]
 80264e2:	f7fc fe17 	bl	8023114 <pbuf_ref>
      pcr->original = p;
 80264e6:	69bb      	ldr	r3, [r7, #24]
 80264e8:	68fa      	ldr	r2, [r7, #12]
 80264ea:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80264ec:	69bb      	ldr	r3, [r7, #24]
 80264ee:	4a3f      	ldr	r2, [pc, #252]	; (80265ec <ip4_frag+0x288>)
 80264f0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80264f2:	6979      	ldr	r1, [r7, #20]
 80264f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80264f6:	f7fc fe2f 	bl	8023158 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80264fa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80264fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8026502:	1ad3      	subs	r3, r2, r3
 8026504:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8026508:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802650c:	2b00      	cmp	r3, #0
 802650e:	d004      	beq.n	802651a <ip4_frag+0x1b6>
        poff = 0;
 8026510:	2300      	movs	r3, #0
 8026512:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8026514:	68fb      	ldr	r3, [r7, #12]
 8026516:	681b      	ldr	r3, [r3, #0]
 8026518:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802651a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802651e:	2b00      	cmp	r3, #0
 8026520:	d196      	bne.n	8026450 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8026522:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8026524:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8026528:	4413      	add	r3, r2
 802652a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 802652c:	68bb      	ldr	r3, [r7, #8]
 802652e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8026530:	f1a3 0213 	sub.w	r2, r3, #19
 8026534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8026538:	429a      	cmp	r2, r3
 802653a:	bfcc      	ite	gt
 802653c:	2301      	movgt	r3, #1
 802653e:	2300      	movle	r3, #0
 8026540:	b2db      	uxtb	r3, r3
 8026542:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8026544:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8026548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802654c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 802654e:	6a3b      	ldr	r3, [r7, #32]
 8026550:	2b00      	cmp	r3, #0
 8026552:	d002      	beq.n	802655a <ip4_frag+0x1f6>
 8026554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026556:	2b00      	cmp	r3, #0
 8026558:	d003      	beq.n	8026562 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802655a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802655c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8026560:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8026562:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8026564:	4618      	mov	r0, r3
 8026566:	f7fb f959 	bl	802181c <lwip_htons>
 802656a:	4603      	mov	r3, r0
 802656c:	461a      	mov	r2, r3
 802656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026570:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8026572:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8026574:	3314      	adds	r3, #20
 8026576:	b29b      	uxth	r3, r3
 8026578:	4618      	mov	r0, r3
 802657a:	f7fb f94f 	bl	802181c <lwip_htons>
 802657e:	4603      	mov	r3, r0
 8026580:	461a      	mov	r2, r3
 8026582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026584:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8026586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026588:	2200      	movs	r2, #0
 802658a:	729a      	strb	r2, [r3, #10]
 802658c:	2200      	movs	r2, #0
 802658e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8026590:	68bb      	ldr	r3, [r7, #8]
 8026592:	695b      	ldr	r3, [r3, #20]
 8026594:	687a      	ldr	r2, [r7, #4]
 8026596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026598:	68b8      	ldr	r0, [r7, #8]
 802659a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802659c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802659e:	f7fc fd19 	bl	8022fd4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80265a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80265a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80265a8:	1ad3      	subs	r3, r2, r3
 80265aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80265ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80265b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80265b4:	4413      	add	r3, r2
 80265b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80265ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80265be:	2b00      	cmp	r3, #0
 80265c0:	f47f af19 	bne.w	80263f6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80265c4:	2300      	movs	r3, #0
 80265c6:	e002      	b.n	80265ce <ip4_frag+0x26a>
      goto memerr;
 80265c8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80265ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80265ce:	4618      	mov	r0, r3
 80265d0:	3748      	adds	r7, #72	; 0x48
 80265d2:	46bd      	mov	sp, r7
 80265d4:	bd80      	pop	{r7, pc}
 80265d6:	bf00      	nop
 80265d8:	0802d674 	.word	0x0802d674
 80265dc:	0802d850 	.word	0x0802d850
 80265e0:	0802d6bc 	.word	0x0802d6bc
 80265e4:	0802d86c 	.word	0x0802d86c
 80265e8:	0802d88c 	.word	0x0802d88c
 80265ec:	080262fd 	.word	0x080262fd

080265f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80265f0:	b580      	push	{r7, lr}
 80265f2:	b086      	sub	sp, #24
 80265f4:	af00      	add	r7, sp, #0
 80265f6:	6078      	str	r0, [r7, #4]
 80265f8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80265fa:	230e      	movs	r3, #14
 80265fc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80265fe:	687b      	ldr	r3, [r7, #4]
 8026600:	895b      	ldrh	r3, [r3, #10]
 8026602:	2b0e      	cmp	r3, #14
 8026604:	d96e      	bls.n	80266e4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8026606:	687b      	ldr	r3, [r7, #4]
 8026608:	7bdb      	ldrb	r3, [r3, #15]
 802660a:	2b00      	cmp	r3, #0
 802660c:	d106      	bne.n	802661c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 802660e:	683b      	ldr	r3, [r7, #0]
 8026610:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8026614:	3301      	adds	r3, #1
 8026616:	b2da      	uxtb	r2, r3
 8026618:	687b      	ldr	r3, [r7, #4]
 802661a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 802661c:	687b      	ldr	r3, [r7, #4]
 802661e:	685b      	ldr	r3, [r3, #4]
 8026620:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8026622:	693b      	ldr	r3, [r7, #16]
 8026624:	7b1a      	ldrb	r2, [r3, #12]
 8026626:	7b5b      	ldrb	r3, [r3, #13]
 8026628:	021b      	lsls	r3, r3, #8
 802662a:	4313      	orrs	r3, r2
 802662c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802662e:	693b      	ldr	r3, [r7, #16]
 8026630:	781b      	ldrb	r3, [r3, #0]
 8026632:	f003 0301 	and.w	r3, r3, #1
 8026636:	2b00      	cmp	r3, #0
 8026638:	d023      	beq.n	8026682 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802663a:	693b      	ldr	r3, [r7, #16]
 802663c:	781b      	ldrb	r3, [r3, #0]
 802663e:	2b01      	cmp	r3, #1
 8026640:	d10f      	bne.n	8026662 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8026642:	693b      	ldr	r3, [r7, #16]
 8026644:	785b      	ldrb	r3, [r3, #1]
 8026646:	2b00      	cmp	r3, #0
 8026648:	d11b      	bne.n	8026682 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802664a:	693b      	ldr	r3, [r7, #16]
 802664c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802664e:	2b5e      	cmp	r3, #94	; 0x5e
 8026650:	d117      	bne.n	8026682 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8026652:	687b      	ldr	r3, [r7, #4]
 8026654:	7b5b      	ldrb	r3, [r3, #13]
 8026656:	f043 0310 	orr.w	r3, r3, #16
 802665a:	b2da      	uxtb	r2, r3
 802665c:	687b      	ldr	r3, [r7, #4]
 802665e:	735a      	strb	r2, [r3, #13]
 8026660:	e00f      	b.n	8026682 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8026662:	693b      	ldr	r3, [r7, #16]
 8026664:	2206      	movs	r2, #6
 8026666:	4928      	ldr	r1, [pc, #160]	; (8026708 <ethernet_input+0x118>)
 8026668:	4618      	mov	r0, r3
 802666a:	f000 f8cb 	bl	8026804 <memcmp>
 802666e:	4603      	mov	r3, r0
 8026670:	2b00      	cmp	r3, #0
 8026672:	d106      	bne.n	8026682 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8026674:	687b      	ldr	r3, [r7, #4]
 8026676:	7b5b      	ldrb	r3, [r3, #13]
 8026678:	f043 0308 	orr.w	r3, r3, #8
 802667c:	b2da      	uxtb	r2, r3
 802667e:	687b      	ldr	r3, [r7, #4]
 8026680:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8026682:	89fb      	ldrh	r3, [r7, #14]
 8026684:	2b08      	cmp	r3, #8
 8026686:	d003      	beq.n	8026690 <ethernet_input+0xa0>
 8026688:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 802668c:	d014      	beq.n	80266b8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 802668e:	e032      	b.n	80266f6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8026690:	683b      	ldr	r3, [r7, #0]
 8026692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8026696:	f003 0308 	and.w	r3, r3, #8
 802669a:	2b00      	cmp	r3, #0
 802669c:	d024      	beq.n	80266e8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802669e:	8afb      	ldrh	r3, [r7, #22]
 80266a0:	4619      	mov	r1, r3
 80266a2:	6878      	ldr	r0, [r7, #4]
 80266a4:	f7fc fc10 	bl	8022ec8 <pbuf_remove_header>
 80266a8:	4603      	mov	r3, r0
 80266aa:	2b00      	cmp	r3, #0
 80266ac:	d11e      	bne.n	80266ec <ethernet_input+0xfc>
        ip4_input(p, netif);
 80266ae:	6839      	ldr	r1, [r7, #0]
 80266b0:	6878      	ldr	r0, [r7, #4]
 80266b2:	f7fe fe8d 	bl	80253d0 <ip4_input>
      break;
 80266b6:	e013      	b.n	80266e0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80266b8:	683b      	ldr	r3, [r7, #0]
 80266ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80266be:	f003 0308 	and.w	r3, r3, #8
 80266c2:	2b00      	cmp	r3, #0
 80266c4:	d014      	beq.n	80266f0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80266c6:	8afb      	ldrh	r3, [r7, #22]
 80266c8:	4619      	mov	r1, r3
 80266ca:	6878      	ldr	r0, [r7, #4]
 80266cc:	f7fc fbfc 	bl	8022ec8 <pbuf_remove_header>
 80266d0:	4603      	mov	r3, r0
 80266d2:	2b00      	cmp	r3, #0
 80266d4:	d10e      	bne.n	80266f4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80266d6:	6839      	ldr	r1, [r7, #0]
 80266d8:	6878      	ldr	r0, [r7, #4]
 80266da:	f7fe f82d 	bl	8024738 <etharp_input>
      break;
 80266de:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80266e0:	2300      	movs	r3, #0
 80266e2:	e00c      	b.n	80266fe <ethernet_input+0x10e>
    goto free_and_return;
 80266e4:	bf00      	nop
 80266e6:	e006      	b.n	80266f6 <ethernet_input+0x106>
        goto free_and_return;
 80266e8:	bf00      	nop
 80266ea:	e004      	b.n	80266f6 <ethernet_input+0x106>
        goto free_and_return;
 80266ec:	bf00      	nop
 80266ee:	e002      	b.n	80266f6 <ethernet_input+0x106>
        goto free_and_return;
 80266f0:	bf00      	nop
 80266f2:	e000      	b.n	80266f6 <ethernet_input+0x106>
        goto free_and_return;
 80266f4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80266f6:	6878      	ldr	r0, [r7, #4]
 80266f8:	f7fc fc6c 	bl	8022fd4 <pbuf_free>
  return ERR_OK;
 80266fc:	2300      	movs	r3, #0
}
 80266fe:	4618      	mov	r0, r3
 8026700:	3718      	adds	r7, #24
 8026702:	46bd      	mov	sp, r7
 8026704:	bd80      	pop	{r7, pc}
 8026706:	bf00      	nop
 8026708:	0802ddec 	.word	0x0802ddec

0802670c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 802670c:	b580      	push	{r7, lr}
 802670e:	b086      	sub	sp, #24
 8026710:	af00      	add	r7, sp, #0
 8026712:	60f8      	str	r0, [r7, #12]
 8026714:	60b9      	str	r1, [r7, #8]
 8026716:	607a      	str	r2, [r7, #4]
 8026718:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802671a:	8c3b      	ldrh	r3, [r7, #32]
 802671c:	4618      	mov	r0, r3
 802671e:	f7fb f87d 	bl	802181c <lwip_htons>
 8026722:	4603      	mov	r3, r0
 8026724:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8026726:	210e      	movs	r1, #14
 8026728:	68b8      	ldr	r0, [r7, #8]
 802672a:	f7fc fbbd 	bl	8022ea8 <pbuf_add_header>
 802672e:	4603      	mov	r3, r0
 8026730:	2b00      	cmp	r3, #0
 8026732:	d125      	bne.n	8026780 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8026734:	68bb      	ldr	r3, [r7, #8]
 8026736:	685b      	ldr	r3, [r3, #4]
 8026738:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802673a:	693b      	ldr	r3, [r7, #16]
 802673c:	8afa      	ldrh	r2, [r7, #22]
 802673e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8026740:	693b      	ldr	r3, [r7, #16]
 8026742:	2206      	movs	r2, #6
 8026744:	6839      	ldr	r1, [r7, #0]
 8026746:	4618      	mov	r0, r3
 8026748:	f000 f86c 	bl	8026824 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802674c:	693b      	ldr	r3, [r7, #16]
 802674e:	3306      	adds	r3, #6
 8026750:	2206      	movs	r2, #6
 8026752:	6879      	ldr	r1, [r7, #4]
 8026754:	4618      	mov	r0, r3
 8026756:	f000 f865 	bl	8026824 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802675a:	68fb      	ldr	r3, [r7, #12]
 802675c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026760:	2b06      	cmp	r3, #6
 8026762:	d006      	beq.n	8026772 <ethernet_output+0x66>
 8026764:	4b0a      	ldr	r3, [pc, #40]	; (8026790 <ethernet_output+0x84>)
 8026766:	f44f 7299 	mov.w	r2, #306	; 0x132
 802676a:	490a      	ldr	r1, [pc, #40]	; (8026794 <ethernet_output+0x88>)
 802676c:	480a      	ldr	r0, [pc, #40]	; (8026798 <ethernet_output+0x8c>)
 802676e:	f000 f969 	bl	8026a44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8026772:	68fb      	ldr	r3, [r7, #12]
 8026774:	699b      	ldr	r3, [r3, #24]
 8026776:	68b9      	ldr	r1, [r7, #8]
 8026778:	68f8      	ldr	r0, [r7, #12]
 802677a:	4798      	blx	r3
 802677c:	4603      	mov	r3, r0
 802677e:	e002      	b.n	8026786 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8026780:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8026782:	f06f 0301 	mvn.w	r3, #1
}
 8026786:	4618      	mov	r0, r3
 8026788:	3718      	adds	r7, #24
 802678a:	46bd      	mov	sp, r7
 802678c:	bd80      	pop	{r7, pc}
 802678e:	bf00      	nop
 8026790:	0802d89c 	.word	0x0802d89c
 8026794:	0802d8d4 	.word	0x0802d8d4
 8026798:	0802d908 	.word	0x0802d908

0802679c <__libc_init_array>:
 802679c:	b570      	push	{r4, r5, r6, lr}
 802679e:	4d0d      	ldr	r5, [pc, #52]	; (80267d4 <__libc_init_array+0x38>)
 80267a0:	4c0d      	ldr	r4, [pc, #52]	; (80267d8 <__libc_init_array+0x3c>)
 80267a2:	1b64      	subs	r4, r4, r5
 80267a4:	10a4      	asrs	r4, r4, #2
 80267a6:	2600      	movs	r6, #0
 80267a8:	42a6      	cmp	r6, r4
 80267aa:	d109      	bne.n	80267c0 <__libc_init_array+0x24>
 80267ac:	4d0b      	ldr	r5, [pc, #44]	; (80267dc <__libc_init_array+0x40>)
 80267ae:	4c0c      	ldr	r4, [pc, #48]	; (80267e0 <__libc_init_array+0x44>)
 80267b0:	f001 fbfe 	bl	8027fb0 <_init>
 80267b4:	1b64      	subs	r4, r4, r5
 80267b6:	10a4      	asrs	r4, r4, #2
 80267b8:	2600      	movs	r6, #0
 80267ba:	42a6      	cmp	r6, r4
 80267bc:	d105      	bne.n	80267ca <__libc_init_array+0x2e>
 80267be:	bd70      	pop	{r4, r5, r6, pc}
 80267c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80267c4:	4798      	blx	r3
 80267c6:	3601      	adds	r6, #1
 80267c8:	e7ee      	b.n	80267a8 <__libc_init_array+0xc>
 80267ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80267ce:	4798      	blx	r3
 80267d0:	3601      	adds	r6, #1
 80267d2:	e7f2      	b.n	80267ba <__libc_init_array+0x1e>
 80267d4:	0802df4c 	.word	0x0802df4c
 80267d8:	0802df4c 	.word	0x0802df4c
 80267dc:	0802df4c 	.word	0x0802df4c
 80267e0:	0802df50 	.word	0x0802df50

080267e4 <malloc>:
 80267e4:	4b02      	ldr	r3, [pc, #8]	; (80267f0 <malloc+0xc>)
 80267e6:	4601      	mov	r1, r0
 80267e8:	6818      	ldr	r0, [r3, #0]
 80267ea:	f000 b8b7 	b.w	802695c <_malloc_r>
 80267ee:	bf00      	nop
 80267f0:	20000340 	.word	0x20000340

080267f4 <free>:
 80267f4:	4b02      	ldr	r3, [pc, #8]	; (8026800 <free+0xc>)
 80267f6:	4601      	mov	r1, r0
 80267f8:	6818      	ldr	r0, [r3, #0]
 80267fa:	f000 b843 	b.w	8026884 <_free_r>
 80267fe:	bf00      	nop
 8026800:	20000340 	.word	0x20000340

08026804 <memcmp>:
 8026804:	b510      	push	{r4, lr}
 8026806:	3901      	subs	r1, #1
 8026808:	4402      	add	r2, r0
 802680a:	4290      	cmp	r0, r2
 802680c:	d101      	bne.n	8026812 <memcmp+0xe>
 802680e:	2000      	movs	r0, #0
 8026810:	e005      	b.n	802681e <memcmp+0x1a>
 8026812:	7803      	ldrb	r3, [r0, #0]
 8026814:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8026818:	42a3      	cmp	r3, r4
 802681a:	d001      	beq.n	8026820 <memcmp+0x1c>
 802681c:	1b18      	subs	r0, r3, r4
 802681e:	bd10      	pop	{r4, pc}
 8026820:	3001      	adds	r0, #1
 8026822:	e7f2      	b.n	802680a <memcmp+0x6>

08026824 <memcpy>:
 8026824:	440a      	add	r2, r1
 8026826:	4291      	cmp	r1, r2
 8026828:	f100 33ff 	add.w	r3, r0, #4294967295
 802682c:	d100      	bne.n	8026830 <memcpy+0xc>
 802682e:	4770      	bx	lr
 8026830:	b510      	push	{r4, lr}
 8026832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026836:	f803 4f01 	strb.w	r4, [r3, #1]!
 802683a:	4291      	cmp	r1, r2
 802683c:	d1f9      	bne.n	8026832 <memcpy+0xe>
 802683e:	bd10      	pop	{r4, pc}

08026840 <memmove>:
 8026840:	4288      	cmp	r0, r1
 8026842:	b510      	push	{r4, lr}
 8026844:	eb01 0402 	add.w	r4, r1, r2
 8026848:	d902      	bls.n	8026850 <memmove+0x10>
 802684a:	4284      	cmp	r4, r0
 802684c:	4623      	mov	r3, r4
 802684e:	d807      	bhi.n	8026860 <memmove+0x20>
 8026850:	1e43      	subs	r3, r0, #1
 8026852:	42a1      	cmp	r1, r4
 8026854:	d008      	beq.n	8026868 <memmove+0x28>
 8026856:	f811 2b01 	ldrb.w	r2, [r1], #1
 802685a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802685e:	e7f8      	b.n	8026852 <memmove+0x12>
 8026860:	4402      	add	r2, r0
 8026862:	4601      	mov	r1, r0
 8026864:	428a      	cmp	r2, r1
 8026866:	d100      	bne.n	802686a <memmove+0x2a>
 8026868:	bd10      	pop	{r4, pc}
 802686a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802686e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026872:	e7f7      	b.n	8026864 <memmove+0x24>

08026874 <memset>:
 8026874:	4402      	add	r2, r0
 8026876:	4603      	mov	r3, r0
 8026878:	4293      	cmp	r3, r2
 802687a:	d100      	bne.n	802687e <memset+0xa>
 802687c:	4770      	bx	lr
 802687e:	f803 1b01 	strb.w	r1, [r3], #1
 8026882:	e7f9      	b.n	8026878 <memset+0x4>

08026884 <_free_r>:
 8026884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026886:	2900      	cmp	r1, #0
 8026888:	d044      	beq.n	8026914 <_free_r+0x90>
 802688a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802688e:	9001      	str	r0, [sp, #4]
 8026890:	2b00      	cmp	r3, #0
 8026892:	f1a1 0404 	sub.w	r4, r1, #4
 8026896:	bfb8      	it	lt
 8026898:	18e4      	addlt	r4, r4, r3
 802689a:	f000 fdbb 	bl	8027414 <__malloc_lock>
 802689e:	4a1e      	ldr	r2, [pc, #120]	; (8026918 <_free_r+0x94>)
 80268a0:	9801      	ldr	r0, [sp, #4]
 80268a2:	6813      	ldr	r3, [r2, #0]
 80268a4:	b933      	cbnz	r3, 80268b4 <_free_r+0x30>
 80268a6:	6063      	str	r3, [r4, #4]
 80268a8:	6014      	str	r4, [r2, #0]
 80268aa:	b003      	add	sp, #12
 80268ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80268b0:	f000 bdb6 	b.w	8027420 <__malloc_unlock>
 80268b4:	42a3      	cmp	r3, r4
 80268b6:	d908      	bls.n	80268ca <_free_r+0x46>
 80268b8:	6825      	ldr	r5, [r4, #0]
 80268ba:	1961      	adds	r1, r4, r5
 80268bc:	428b      	cmp	r3, r1
 80268be:	bf01      	itttt	eq
 80268c0:	6819      	ldreq	r1, [r3, #0]
 80268c2:	685b      	ldreq	r3, [r3, #4]
 80268c4:	1949      	addeq	r1, r1, r5
 80268c6:	6021      	streq	r1, [r4, #0]
 80268c8:	e7ed      	b.n	80268a6 <_free_r+0x22>
 80268ca:	461a      	mov	r2, r3
 80268cc:	685b      	ldr	r3, [r3, #4]
 80268ce:	b10b      	cbz	r3, 80268d4 <_free_r+0x50>
 80268d0:	42a3      	cmp	r3, r4
 80268d2:	d9fa      	bls.n	80268ca <_free_r+0x46>
 80268d4:	6811      	ldr	r1, [r2, #0]
 80268d6:	1855      	adds	r5, r2, r1
 80268d8:	42a5      	cmp	r5, r4
 80268da:	d10b      	bne.n	80268f4 <_free_r+0x70>
 80268dc:	6824      	ldr	r4, [r4, #0]
 80268de:	4421      	add	r1, r4
 80268e0:	1854      	adds	r4, r2, r1
 80268e2:	42a3      	cmp	r3, r4
 80268e4:	6011      	str	r1, [r2, #0]
 80268e6:	d1e0      	bne.n	80268aa <_free_r+0x26>
 80268e8:	681c      	ldr	r4, [r3, #0]
 80268ea:	685b      	ldr	r3, [r3, #4]
 80268ec:	6053      	str	r3, [r2, #4]
 80268ee:	4421      	add	r1, r4
 80268f0:	6011      	str	r1, [r2, #0]
 80268f2:	e7da      	b.n	80268aa <_free_r+0x26>
 80268f4:	d902      	bls.n	80268fc <_free_r+0x78>
 80268f6:	230c      	movs	r3, #12
 80268f8:	6003      	str	r3, [r0, #0]
 80268fa:	e7d6      	b.n	80268aa <_free_r+0x26>
 80268fc:	6825      	ldr	r5, [r4, #0]
 80268fe:	1961      	adds	r1, r4, r5
 8026900:	428b      	cmp	r3, r1
 8026902:	bf04      	itt	eq
 8026904:	6819      	ldreq	r1, [r3, #0]
 8026906:	685b      	ldreq	r3, [r3, #4]
 8026908:	6063      	str	r3, [r4, #4]
 802690a:	bf04      	itt	eq
 802690c:	1949      	addeq	r1, r1, r5
 802690e:	6021      	streq	r1, [r4, #0]
 8026910:	6054      	str	r4, [r2, #4]
 8026912:	e7ca      	b.n	80268aa <_free_r+0x26>
 8026914:	b003      	add	sp, #12
 8026916:	bd30      	pop	{r4, r5, pc}
 8026918:	20016308 	.word	0x20016308

0802691c <sbrk_aligned>:
 802691c:	b570      	push	{r4, r5, r6, lr}
 802691e:	4e0e      	ldr	r6, [pc, #56]	; (8026958 <sbrk_aligned+0x3c>)
 8026920:	460c      	mov	r4, r1
 8026922:	6831      	ldr	r1, [r6, #0]
 8026924:	4605      	mov	r5, r0
 8026926:	b911      	cbnz	r1, 802692e <sbrk_aligned+0x12>
 8026928:	f000 f96e 	bl	8026c08 <_sbrk_r>
 802692c:	6030      	str	r0, [r6, #0]
 802692e:	4621      	mov	r1, r4
 8026930:	4628      	mov	r0, r5
 8026932:	f000 f969 	bl	8026c08 <_sbrk_r>
 8026936:	1c43      	adds	r3, r0, #1
 8026938:	d00a      	beq.n	8026950 <sbrk_aligned+0x34>
 802693a:	1cc4      	adds	r4, r0, #3
 802693c:	f024 0403 	bic.w	r4, r4, #3
 8026940:	42a0      	cmp	r0, r4
 8026942:	d007      	beq.n	8026954 <sbrk_aligned+0x38>
 8026944:	1a21      	subs	r1, r4, r0
 8026946:	4628      	mov	r0, r5
 8026948:	f000 f95e 	bl	8026c08 <_sbrk_r>
 802694c:	3001      	adds	r0, #1
 802694e:	d101      	bne.n	8026954 <sbrk_aligned+0x38>
 8026950:	f04f 34ff 	mov.w	r4, #4294967295
 8026954:	4620      	mov	r0, r4
 8026956:	bd70      	pop	{r4, r5, r6, pc}
 8026958:	2001630c 	.word	0x2001630c

0802695c <_malloc_r>:
 802695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026960:	1ccd      	adds	r5, r1, #3
 8026962:	f025 0503 	bic.w	r5, r5, #3
 8026966:	3508      	adds	r5, #8
 8026968:	2d0c      	cmp	r5, #12
 802696a:	bf38      	it	cc
 802696c:	250c      	movcc	r5, #12
 802696e:	2d00      	cmp	r5, #0
 8026970:	4607      	mov	r7, r0
 8026972:	db01      	blt.n	8026978 <_malloc_r+0x1c>
 8026974:	42a9      	cmp	r1, r5
 8026976:	d905      	bls.n	8026984 <_malloc_r+0x28>
 8026978:	230c      	movs	r3, #12
 802697a:	603b      	str	r3, [r7, #0]
 802697c:	2600      	movs	r6, #0
 802697e:	4630      	mov	r0, r6
 8026980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026984:	4e2e      	ldr	r6, [pc, #184]	; (8026a40 <_malloc_r+0xe4>)
 8026986:	f000 fd45 	bl	8027414 <__malloc_lock>
 802698a:	6833      	ldr	r3, [r6, #0]
 802698c:	461c      	mov	r4, r3
 802698e:	bb34      	cbnz	r4, 80269de <_malloc_r+0x82>
 8026990:	4629      	mov	r1, r5
 8026992:	4638      	mov	r0, r7
 8026994:	f7ff ffc2 	bl	802691c <sbrk_aligned>
 8026998:	1c43      	adds	r3, r0, #1
 802699a:	4604      	mov	r4, r0
 802699c:	d14d      	bne.n	8026a3a <_malloc_r+0xde>
 802699e:	6834      	ldr	r4, [r6, #0]
 80269a0:	4626      	mov	r6, r4
 80269a2:	2e00      	cmp	r6, #0
 80269a4:	d140      	bne.n	8026a28 <_malloc_r+0xcc>
 80269a6:	6823      	ldr	r3, [r4, #0]
 80269a8:	4631      	mov	r1, r6
 80269aa:	4638      	mov	r0, r7
 80269ac:	eb04 0803 	add.w	r8, r4, r3
 80269b0:	f000 f92a 	bl	8026c08 <_sbrk_r>
 80269b4:	4580      	cmp	r8, r0
 80269b6:	d13a      	bne.n	8026a2e <_malloc_r+0xd2>
 80269b8:	6821      	ldr	r1, [r4, #0]
 80269ba:	3503      	adds	r5, #3
 80269bc:	1a6d      	subs	r5, r5, r1
 80269be:	f025 0503 	bic.w	r5, r5, #3
 80269c2:	3508      	adds	r5, #8
 80269c4:	2d0c      	cmp	r5, #12
 80269c6:	bf38      	it	cc
 80269c8:	250c      	movcc	r5, #12
 80269ca:	4629      	mov	r1, r5
 80269cc:	4638      	mov	r0, r7
 80269ce:	f7ff ffa5 	bl	802691c <sbrk_aligned>
 80269d2:	3001      	adds	r0, #1
 80269d4:	d02b      	beq.n	8026a2e <_malloc_r+0xd2>
 80269d6:	6823      	ldr	r3, [r4, #0]
 80269d8:	442b      	add	r3, r5
 80269da:	6023      	str	r3, [r4, #0]
 80269dc:	e00e      	b.n	80269fc <_malloc_r+0xa0>
 80269de:	6822      	ldr	r2, [r4, #0]
 80269e0:	1b52      	subs	r2, r2, r5
 80269e2:	d41e      	bmi.n	8026a22 <_malloc_r+0xc6>
 80269e4:	2a0b      	cmp	r2, #11
 80269e6:	d916      	bls.n	8026a16 <_malloc_r+0xba>
 80269e8:	1961      	adds	r1, r4, r5
 80269ea:	42a3      	cmp	r3, r4
 80269ec:	6025      	str	r5, [r4, #0]
 80269ee:	bf18      	it	ne
 80269f0:	6059      	strne	r1, [r3, #4]
 80269f2:	6863      	ldr	r3, [r4, #4]
 80269f4:	bf08      	it	eq
 80269f6:	6031      	streq	r1, [r6, #0]
 80269f8:	5162      	str	r2, [r4, r5]
 80269fa:	604b      	str	r3, [r1, #4]
 80269fc:	4638      	mov	r0, r7
 80269fe:	f104 060b 	add.w	r6, r4, #11
 8026a02:	f000 fd0d 	bl	8027420 <__malloc_unlock>
 8026a06:	f026 0607 	bic.w	r6, r6, #7
 8026a0a:	1d23      	adds	r3, r4, #4
 8026a0c:	1af2      	subs	r2, r6, r3
 8026a0e:	d0b6      	beq.n	802697e <_malloc_r+0x22>
 8026a10:	1b9b      	subs	r3, r3, r6
 8026a12:	50a3      	str	r3, [r4, r2]
 8026a14:	e7b3      	b.n	802697e <_malloc_r+0x22>
 8026a16:	6862      	ldr	r2, [r4, #4]
 8026a18:	42a3      	cmp	r3, r4
 8026a1a:	bf0c      	ite	eq
 8026a1c:	6032      	streq	r2, [r6, #0]
 8026a1e:	605a      	strne	r2, [r3, #4]
 8026a20:	e7ec      	b.n	80269fc <_malloc_r+0xa0>
 8026a22:	4623      	mov	r3, r4
 8026a24:	6864      	ldr	r4, [r4, #4]
 8026a26:	e7b2      	b.n	802698e <_malloc_r+0x32>
 8026a28:	4634      	mov	r4, r6
 8026a2a:	6876      	ldr	r6, [r6, #4]
 8026a2c:	e7b9      	b.n	80269a2 <_malloc_r+0x46>
 8026a2e:	230c      	movs	r3, #12
 8026a30:	603b      	str	r3, [r7, #0]
 8026a32:	4638      	mov	r0, r7
 8026a34:	f000 fcf4 	bl	8027420 <__malloc_unlock>
 8026a38:	e7a1      	b.n	802697e <_malloc_r+0x22>
 8026a3a:	6025      	str	r5, [r4, #0]
 8026a3c:	e7de      	b.n	80269fc <_malloc_r+0xa0>
 8026a3e:	bf00      	nop
 8026a40:	20016308 	.word	0x20016308

08026a44 <iprintf>:
 8026a44:	b40f      	push	{r0, r1, r2, r3}
 8026a46:	4b0a      	ldr	r3, [pc, #40]	; (8026a70 <iprintf+0x2c>)
 8026a48:	b513      	push	{r0, r1, r4, lr}
 8026a4a:	681c      	ldr	r4, [r3, #0]
 8026a4c:	b124      	cbz	r4, 8026a58 <iprintf+0x14>
 8026a4e:	69a3      	ldr	r3, [r4, #24]
 8026a50:	b913      	cbnz	r3, 8026a58 <iprintf+0x14>
 8026a52:	4620      	mov	r0, r4
 8026a54:	f000 fbc6 	bl	80271e4 <__sinit>
 8026a58:	ab05      	add	r3, sp, #20
 8026a5a:	9a04      	ldr	r2, [sp, #16]
 8026a5c:	68a1      	ldr	r1, [r4, #8]
 8026a5e:	9301      	str	r3, [sp, #4]
 8026a60:	4620      	mov	r0, r4
 8026a62:	f000 fe69 	bl	8027738 <_vfiprintf_r>
 8026a66:	b002      	add	sp, #8
 8026a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026a6c:	b004      	add	sp, #16
 8026a6e:	4770      	bx	lr
 8026a70:	20000340 	.word	0x20000340

08026a74 <putchar>:
 8026a74:	4b09      	ldr	r3, [pc, #36]	; (8026a9c <putchar+0x28>)
 8026a76:	b513      	push	{r0, r1, r4, lr}
 8026a78:	681c      	ldr	r4, [r3, #0]
 8026a7a:	4601      	mov	r1, r0
 8026a7c:	b134      	cbz	r4, 8026a8c <putchar+0x18>
 8026a7e:	69a3      	ldr	r3, [r4, #24]
 8026a80:	b923      	cbnz	r3, 8026a8c <putchar+0x18>
 8026a82:	9001      	str	r0, [sp, #4]
 8026a84:	4620      	mov	r0, r4
 8026a86:	f000 fbad 	bl	80271e4 <__sinit>
 8026a8a:	9901      	ldr	r1, [sp, #4]
 8026a8c:	68a2      	ldr	r2, [r4, #8]
 8026a8e:	4620      	mov	r0, r4
 8026a90:	b002      	add	sp, #8
 8026a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026a96:	f001 b913 	b.w	8027cc0 <_putc_r>
 8026a9a:	bf00      	nop
 8026a9c:	20000340 	.word	0x20000340

08026aa0 <_puts_r>:
 8026aa0:	b570      	push	{r4, r5, r6, lr}
 8026aa2:	460e      	mov	r6, r1
 8026aa4:	4605      	mov	r5, r0
 8026aa6:	b118      	cbz	r0, 8026ab0 <_puts_r+0x10>
 8026aa8:	6983      	ldr	r3, [r0, #24]
 8026aaa:	b90b      	cbnz	r3, 8026ab0 <_puts_r+0x10>
 8026aac:	f000 fb9a 	bl	80271e4 <__sinit>
 8026ab0:	69ab      	ldr	r3, [r5, #24]
 8026ab2:	68ac      	ldr	r4, [r5, #8]
 8026ab4:	b913      	cbnz	r3, 8026abc <_puts_r+0x1c>
 8026ab6:	4628      	mov	r0, r5
 8026ab8:	f000 fb94 	bl	80271e4 <__sinit>
 8026abc:	4b2c      	ldr	r3, [pc, #176]	; (8026b70 <_puts_r+0xd0>)
 8026abe:	429c      	cmp	r4, r3
 8026ac0:	d120      	bne.n	8026b04 <_puts_r+0x64>
 8026ac2:	686c      	ldr	r4, [r5, #4]
 8026ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026ac6:	07db      	lsls	r3, r3, #31
 8026ac8:	d405      	bmi.n	8026ad6 <_puts_r+0x36>
 8026aca:	89a3      	ldrh	r3, [r4, #12]
 8026acc:	0598      	lsls	r0, r3, #22
 8026ace:	d402      	bmi.n	8026ad6 <_puts_r+0x36>
 8026ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026ad2:	f000 fc37 	bl	8027344 <__retarget_lock_acquire_recursive>
 8026ad6:	89a3      	ldrh	r3, [r4, #12]
 8026ad8:	0719      	lsls	r1, r3, #28
 8026ada:	d51d      	bpl.n	8026b18 <_puts_r+0x78>
 8026adc:	6923      	ldr	r3, [r4, #16]
 8026ade:	b1db      	cbz	r3, 8026b18 <_puts_r+0x78>
 8026ae0:	3e01      	subs	r6, #1
 8026ae2:	68a3      	ldr	r3, [r4, #8]
 8026ae4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026ae8:	3b01      	subs	r3, #1
 8026aea:	60a3      	str	r3, [r4, #8]
 8026aec:	bb39      	cbnz	r1, 8026b3e <_puts_r+0x9e>
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	da38      	bge.n	8026b64 <_puts_r+0xc4>
 8026af2:	4622      	mov	r2, r4
 8026af4:	210a      	movs	r1, #10
 8026af6:	4628      	mov	r0, r5
 8026af8:	f000 f97c 	bl	8026df4 <__swbuf_r>
 8026afc:	3001      	adds	r0, #1
 8026afe:	d011      	beq.n	8026b24 <_puts_r+0x84>
 8026b00:	250a      	movs	r5, #10
 8026b02:	e011      	b.n	8026b28 <_puts_r+0x88>
 8026b04:	4b1b      	ldr	r3, [pc, #108]	; (8026b74 <_puts_r+0xd4>)
 8026b06:	429c      	cmp	r4, r3
 8026b08:	d101      	bne.n	8026b0e <_puts_r+0x6e>
 8026b0a:	68ac      	ldr	r4, [r5, #8]
 8026b0c:	e7da      	b.n	8026ac4 <_puts_r+0x24>
 8026b0e:	4b1a      	ldr	r3, [pc, #104]	; (8026b78 <_puts_r+0xd8>)
 8026b10:	429c      	cmp	r4, r3
 8026b12:	bf08      	it	eq
 8026b14:	68ec      	ldreq	r4, [r5, #12]
 8026b16:	e7d5      	b.n	8026ac4 <_puts_r+0x24>
 8026b18:	4621      	mov	r1, r4
 8026b1a:	4628      	mov	r0, r5
 8026b1c:	f000 f9bc 	bl	8026e98 <__swsetup_r>
 8026b20:	2800      	cmp	r0, #0
 8026b22:	d0dd      	beq.n	8026ae0 <_puts_r+0x40>
 8026b24:	f04f 35ff 	mov.w	r5, #4294967295
 8026b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026b2a:	07da      	lsls	r2, r3, #31
 8026b2c:	d405      	bmi.n	8026b3a <_puts_r+0x9a>
 8026b2e:	89a3      	ldrh	r3, [r4, #12]
 8026b30:	059b      	lsls	r3, r3, #22
 8026b32:	d402      	bmi.n	8026b3a <_puts_r+0x9a>
 8026b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026b36:	f000 fc06 	bl	8027346 <__retarget_lock_release_recursive>
 8026b3a:	4628      	mov	r0, r5
 8026b3c:	bd70      	pop	{r4, r5, r6, pc}
 8026b3e:	2b00      	cmp	r3, #0
 8026b40:	da04      	bge.n	8026b4c <_puts_r+0xac>
 8026b42:	69a2      	ldr	r2, [r4, #24]
 8026b44:	429a      	cmp	r2, r3
 8026b46:	dc06      	bgt.n	8026b56 <_puts_r+0xb6>
 8026b48:	290a      	cmp	r1, #10
 8026b4a:	d004      	beq.n	8026b56 <_puts_r+0xb6>
 8026b4c:	6823      	ldr	r3, [r4, #0]
 8026b4e:	1c5a      	adds	r2, r3, #1
 8026b50:	6022      	str	r2, [r4, #0]
 8026b52:	7019      	strb	r1, [r3, #0]
 8026b54:	e7c5      	b.n	8026ae2 <_puts_r+0x42>
 8026b56:	4622      	mov	r2, r4
 8026b58:	4628      	mov	r0, r5
 8026b5a:	f000 f94b 	bl	8026df4 <__swbuf_r>
 8026b5e:	3001      	adds	r0, #1
 8026b60:	d1bf      	bne.n	8026ae2 <_puts_r+0x42>
 8026b62:	e7df      	b.n	8026b24 <_puts_r+0x84>
 8026b64:	6823      	ldr	r3, [r4, #0]
 8026b66:	250a      	movs	r5, #10
 8026b68:	1c5a      	adds	r2, r3, #1
 8026b6a:	6022      	str	r2, [r4, #0]
 8026b6c:	701d      	strb	r5, [r3, #0]
 8026b6e:	e7db      	b.n	8026b28 <_puts_r+0x88>
 8026b70:	0802ded0 	.word	0x0802ded0
 8026b74:	0802def0 	.word	0x0802def0
 8026b78:	0802deb0 	.word	0x0802deb0

08026b7c <puts>:
 8026b7c:	4b02      	ldr	r3, [pc, #8]	; (8026b88 <puts+0xc>)
 8026b7e:	4601      	mov	r1, r0
 8026b80:	6818      	ldr	r0, [r3, #0]
 8026b82:	f7ff bf8d 	b.w	8026aa0 <_puts_r>
 8026b86:	bf00      	nop
 8026b88:	20000340 	.word	0x20000340

08026b8c <rand>:
 8026b8c:	4b16      	ldr	r3, [pc, #88]	; (8026be8 <rand+0x5c>)
 8026b8e:	b510      	push	{r4, lr}
 8026b90:	681c      	ldr	r4, [r3, #0]
 8026b92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026b94:	b9b3      	cbnz	r3, 8026bc4 <rand+0x38>
 8026b96:	2018      	movs	r0, #24
 8026b98:	f7ff fe24 	bl	80267e4 <malloc>
 8026b9c:	63a0      	str	r0, [r4, #56]	; 0x38
 8026b9e:	b928      	cbnz	r0, 8026bac <rand+0x20>
 8026ba0:	4602      	mov	r2, r0
 8026ba2:	4b12      	ldr	r3, [pc, #72]	; (8026bec <rand+0x60>)
 8026ba4:	4812      	ldr	r0, [pc, #72]	; (8026bf0 <rand+0x64>)
 8026ba6:	214e      	movs	r1, #78	; 0x4e
 8026ba8:	f000 f9e4 	bl	8026f74 <__assert_func>
 8026bac:	4a11      	ldr	r2, [pc, #68]	; (8026bf4 <rand+0x68>)
 8026bae:	4b12      	ldr	r3, [pc, #72]	; (8026bf8 <rand+0x6c>)
 8026bb0:	e9c0 2300 	strd	r2, r3, [r0]
 8026bb4:	4b11      	ldr	r3, [pc, #68]	; (8026bfc <rand+0x70>)
 8026bb6:	6083      	str	r3, [r0, #8]
 8026bb8:	230b      	movs	r3, #11
 8026bba:	8183      	strh	r3, [r0, #12]
 8026bbc:	2201      	movs	r2, #1
 8026bbe:	2300      	movs	r3, #0
 8026bc0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8026bc4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8026bc6:	4a0e      	ldr	r2, [pc, #56]	; (8026c00 <rand+0x74>)
 8026bc8:	6920      	ldr	r0, [r4, #16]
 8026bca:	6963      	ldr	r3, [r4, #20]
 8026bcc:	490d      	ldr	r1, [pc, #52]	; (8026c04 <rand+0x78>)
 8026bce:	4342      	muls	r2, r0
 8026bd0:	fb01 2203 	mla	r2, r1, r3, r2
 8026bd4:	fba0 0101 	umull	r0, r1, r0, r1
 8026bd8:	1c43      	adds	r3, r0, #1
 8026bda:	eb42 0001 	adc.w	r0, r2, r1
 8026bde:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8026be2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026be6:	bd10      	pop	{r4, pc}
 8026be8:	20000340 	.word	0x20000340
 8026bec:	0802de00 	.word	0x0802de00
 8026bf0:	0802de17 	.word	0x0802de17
 8026bf4:	abcd330e 	.word	0xabcd330e
 8026bf8:	e66d1234 	.word	0xe66d1234
 8026bfc:	0005deec 	.word	0x0005deec
 8026c00:	5851f42d 	.word	0x5851f42d
 8026c04:	4c957f2d 	.word	0x4c957f2d

08026c08 <_sbrk_r>:
 8026c08:	b538      	push	{r3, r4, r5, lr}
 8026c0a:	4d06      	ldr	r5, [pc, #24]	; (8026c24 <_sbrk_r+0x1c>)
 8026c0c:	2300      	movs	r3, #0
 8026c0e:	4604      	mov	r4, r0
 8026c10:	4608      	mov	r0, r1
 8026c12:	602b      	str	r3, [r5, #0]
 8026c14:	f7f2 f840 	bl	8018c98 <_sbrk>
 8026c18:	1c43      	adds	r3, r0, #1
 8026c1a:	d102      	bne.n	8026c22 <_sbrk_r+0x1a>
 8026c1c:	682b      	ldr	r3, [r5, #0]
 8026c1e:	b103      	cbz	r3, 8026c22 <_sbrk_r+0x1a>
 8026c20:	6023      	str	r3, [r4, #0]
 8026c22:	bd38      	pop	{r3, r4, r5, pc}
 8026c24:	20016310 	.word	0x20016310

08026c28 <setvbuf>:
 8026c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026c2c:	461d      	mov	r5, r3
 8026c2e:	4b5d      	ldr	r3, [pc, #372]	; (8026da4 <setvbuf+0x17c>)
 8026c30:	681f      	ldr	r7, [r3, #0]
 8026c32:	4604      	mov	r4, r0
 8026c34:	460e      	mov	r6, r1
 8026c36:	4690      	mov	r8, r2
 8026c38:	b127      	cbz	r7, 8026c44 <setvbuf+0x1c>
 8026c3a:	69bb      	ldr	r3, [r7, #24]
 8026c3c:	b913      	cbnz	r3, 8026c44 <setvbuf+0x1c>
 8026c3e:	4638      	mov	r0, r7
 8026c40:	f000 fad0 	bl	80271e4 <__sinit>
 8026c44:	4b58      	ldr	r3, [pc, #352]	; (8026da8 <setvbuf+0x180>)
 8026c46:	429c      	cmp	r4, r3
 8026c48:	d167      	bne.n	8026d1a <setvbuf+0xf2>
 8026c4a:	687c      	ldr	r4, [r7, #4]
 8026c4c:	f1b8 0f02 	cmp.w	r8, #2
 8026c50:	d006      	beq.n	8026c60 <setvbuf+0x38>
 8026c52:	f1b8 0f01 	cmp.w	r8, #1
 8026c56:	f200 809f 	bhi.w	8026d98 <setvbuf+0x170>
 8026c5a:	2d00      	cmp	r5, #0
 8026c5c:	f2c0 809c 	blt.w	8026d98 <setvbuf+0x170>
 8026c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026c62:	07db      	lsls	r3, r3, #31
 8026c64:	d405      	bmi.n	8026c72 <setvbuf+0x4a>
 8026c66:	89a3      	ldrh	r3, [r4, #12]
 8026c68:	0598      	lsls	r0, r3, #22
 8026c6a:	d402      	bmi.n	8026c72 <setvbuf+0x4a>
 8026c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026c6e:	f000 fb69 	bl	8027344 <__retarget_lock_acquire_recursive>
 8026c72:	4621      	mov	r1, r4
 8026c74:	4638      	mov	r0, r7
 8026c76:	f000 fa21 	bl	80270bc <_fflush_r>
 8026c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026c7c:	b141      	cbz	r1, 8026c90 <setvbuf+0x68>
 8026c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026c82:	4299      	cmp	r1, r3
 8026c84:	d002      	beq.n	8026c8c <setvbuf+0x64>
 8026c86:	4638      	mov	r0, r7
 8026c88:	f7ff fdfc 	bl	8026884 <_free_r>
 8026c8c:	2300      	movs	r3, #0
 8026c8e:	6363      	str	r3, [r4, #52]	; 0x34
 8026c90:	2300      	movs	r3, #0
 8026c92:	61a3      	str	r3, [r4, #24]
 8026c94:	6063      	str	r3, [r4, #4]
 8026c96:	89a3      	ldrh	r3, [r4, #12]
 8026c98:	0619      	lsls	r1, r3, #24
 8026c9a:	d503      	bpl.n	8026ca4 <setvbuf+0x7c>
 8026c9c:	6921      	ldr	r1, [r4, #16]
 8026c9e:	4638      	mov	r0, r7
 8026ca0:	f7ff fdf0 	bl	8026884 <_free_r>
 8026ca4:	89a3      	ldrh	r3, [r4, #12]
 8026ca6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8026caa:	f023 0303 	bic.w	r3, r3, #3
 8026cae:	f1b8 0f02 	cmp.w	r8, #2
 8026cb2:	81a3      	strh	r3, [r4, #12]
 8026cb4:	d06c      	beq.n	8026d90 <setvbuf+0x168>
 8026cb6:	ab01      	add	r3, sp, #4
 8026cb8:	466a      	mov	r2, sp
 8026cba:	4621      	mov	r1, r4
 8026cbc:	4638      	mov	r0, r7
 8026cbe:	f000 fb43 	bl	8027348 <__swhatbuf_r>
 8026cc2:	89a3      	ldrh	r3, [r4, #12]
 8026cc4:	4318      	orrs	r0, r3
 8026cc6:	81a0      	strh	r0, [r4, #12]
 8026cc8:	2d00      	cmp	r5, #0
 8026cca:	d130      	bne.n	8026d2e <setvbuf+0x106>
 8026ccc:	9d00      	ldr	r5, [sp, #0]
 8026cce:	4628      	mov	r0, r5
 8026cd0:	f7ff fd88 	bl	80267e4 <malloc>
 8026cd4:	4606      	mov	r6, r0
 8026cd6:	2800      	cmp	r0, #0
 8026cd8:	d155      	bne.n	8026d86 <setvbuf+0x15e>
 8026cda:	f8dd 9000 	ldr.w	r9, [sp]
 8026cde:	45a9      	cmp	r9, r5
 8026ce0:	d14a      	bne.n	8026d78 <setvbuf+0x150>
 8026ce2:	f04f 35ff 	mov.w	r5, #4294967295
 8026ce6:	2200      	movs	r2, #0
 8026ce8:	60a2      	str	r2, [r4, #8]
 8026cea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8026cee:	6022      	str	r2, [r4, #0]
 8026cf0:	6122      	str	r2, [r4, #16]
 8026cf2:	2201      	movs	r2, #1
 8026cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026cf8:	6162      	str	r2, [r4, #20]
 8026cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026cfc:	f043 0302 	orr.w	r3, r3, #2
 8026d00:	07d2      	lsls	r2, r2, #31
 8026d02:	81a3      	strh	r3, [r4, #12]
 8026d04:	d405      	bmi.n	8026d12 <setvbuf+0xea>
 8026d06:	f413 7f00 	tst.w	r3, #512	; 0x200
 8026d0a:	d102      	bne.n	8026d12 <setvbuf+0xea>
 8026d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026d0e:	f000 fb1a 	bl	8027346 <__retarget_lock_release_recursive>
 8026d12:	4628      	mov	r0, r5
 8026d14:	b003      	add	sp, #12
 8026d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026d1a:	4b24      	ldr	r3, [pc, #144]	; (8026dac <setvbuf+0x184>)
 8026d1c:	429c      	cmp	r4, r3
 8026d1e:	d101      	bne.n	8026d24 <setvbuf+0xfc>
 8026d20:	68bc      	ldr	r4, [r7, #8]
 8026d22:	e793      	b.n	8026c4c <setvbuf+0x24>
 8026d24:	4b22      	ldr	r3, [pc, #136]	; (8026db0 <setvbuf+0x188>)
 8026d26:	429c      	cmp	r4, r3
 8026d28:	bf08      	it	eq
 8026d2a:	68fc      	ldreq	r4, [r7, #12]
 8026d2c:	e78e      	b.n	8026c4c <setvbuf+0x24>
 8026d2e:	2e00      	cmp	r6, #0
 8026d30:	d0cd      	beq.n	8026cce <setvbuf+0xa6>
 8026d32:	69bb      	ldr	r3, [r7, #24]
 8026d34:	b913      	cbnz	r3, 8026d3c <setvbuf+0x114>
 8026d36:	4638      	mov	r0, r7
 8026d38:	f000 fa54 	bl	80271e4 <__sinit>
 8026d3c:	f1b8 0f01 	cmp.w	r8, #1
 8026d40:	bf08      	it	eq
 8026d42:	89a3      	ldrheq	r3, [r4, #12]
 8026d44:	6026      	str	r6, [r4, #0]
 8026d46:	bf04      	itt	eq
 8026d48:	f043 0301 	orreq.w	r3, r3, #1
 8026d4c:	81a3      	strheq	r3, [r4, #12]
 8026d4e:	89a2      	ldrh	r2, [r4, #12]
 8026d50:	f012 0308 	ands.w	r3, r2, #8
 8026d54:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8026d58:	d01c      	beq.n	8026d94 <setvbuf+0x16c>
 8026d5a:	07d3      	lsls	r3, r2, #31
 8026d5c:	bf41      	itttt	mi
 8026d5e:	2300      	movmi	r3, #0
 8026d60:	426d      	negmi	r5, r5
 8026d62:	60a3      	strmi	r3, [r4, #8]
 8026d64:	61a5      	strmi	r5, [r4, #24]
 8026d66:	bf58      	it	pl
 8026d68:	60a5      	strpl	r5, [r4, #8]
 8026d6a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8026d6c:	f015 0501 	ands.w	r5, r5, #1
 8026d70:	d115      	bne.n	8026d9e <setvbuf+0x176>
 8026d72:	f412 7f00 	tst.w	r2, #512	; 0x200
 8026d76:	e7c8      	b.n	8026d0a <setvbuf+0xe2>
 8026d78:	4648      	mov	r0, r9
 8026d7a:	f7ff fd33 	bl	80267e4 <malloc>
 8026d7e:	4606      	mov	r6, r0
 8026d80:	2800      	cmp	r0, #0
 8026d82:	d0ae      	beq.n	8026ce2 <setvbuf+0xba>
 8026d84:	464d      	mov	r5, r9
 8026d86:	89a3      	ldrh	r3, [r4, #12]
 8026d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026d8c:	81a3      	strh	r3, [r4, #12]
 8026d8e:	e7d0      	b.n	8026d32 <setvbuf+0x10a>
 8026d90:	2500      	movs	r5, #0
 8026d92:	e7a8      	b.n	8026ce6 <setvbuf+0xbe>
 8026d94:	60a3      	str	r3, [r4, #8]
 8026d96:	e7e8      	b.n	8026d6a <setvbuf+0x142>
 8026d98:	f04f 35ff 	mov.w	r5, #4294967295
 8026d9c:	e7b9      	b.n	8026d12 <setvbuf+0xea>
 8026d9e:	2500      	movs	r5, #0
 8026da0:	e7b7      	b.n	8026d12 <setvbuf+0xea>
 8026da2:	bf00      	nop
 8026da4:	20000340 	.word	0x20000340
 8026da8:	0802ded0 	.word	0x0802ded0
 8026dac:	0802def0 	.word	0x0802def0
 8026db0:	0802deb0 	.word	0x0802deb0

08026db4 <siprintf>:
 8026db4:	b40e      	push	{r1, r2, r3}
 8026db6:	b500      	push	{lr}
 8026db8:	b09c      	sub	sp, #112	; 0x70
 8026dba:	ab1d      	add	r3, sp, #116	; 0x74
 8026dbc:	9002      	str	r0, [sp, #8]
 8026dbe:	9006      	str	r0, [sp, #24]
 8026dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026dc4:	4809      	ldr	r0, [pc, #36]	; (8026dec <siprintf+0x38>)
 8026dc6:	9107      	str	r1, [sp, #28]
 8026dc8:	9104      	str	r1, [sp, #16]
 8026dca:	4909      	ldr	r1, [pc, #36]	; (8026df0 <siprintf+0x3c>)
 8026dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8026dd0:	9105      	str	r1, [sp, #20]
 8026dd2:	6800      	ldr	r0, [r0, #0]
 8026dd4:	9301      	str	r3, [sp, #4]
 8026dd6:	a902      	add	r1, sp, #8
 8026dd8:	f000 fb84 	bl	80274e4 <_svfiprintf_r>
 8026ddc:	9b02      	ldr	r3, [sp, #8]
 8026dde:	2200      	movs	r2, #0
 8026de0:	701a      	strb	r2, [r3, #0]
 8026de2:	b01c      	add	sp, #112	; 0x70
 8026de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8026de8:	b003      	add	sp, #12
 8026dea:	4770      	bx	lr
 8026dec:	20000340 	.word	0x20000340
 8026df0:	ffff0208 	.word	0xffff0208

08026df4 <__swbuf_r>:
 8026df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026df6:	460e      	mov	r6, r1
 8026df8:	4614      	mov	r4, r2
 8026dfa:	4605      	mov	r5, r0
 8026dfc:	b118      	cbz	r0, 8026e06 <__swbuf_r+0x12>
 8026dfe:	6983      	ldr	r3, [r0, #24]
 8026e00:	b90b      	cbnz	r3, 8026e06 <__swbuf_r+0x12>
 8026e02:	f000 f9ef 	bl	80271e4 <__sinit>
 8026e06:	4b21      	ldr	r3, [pc, #132]	; (8026e8c <__swbuf_r+0x98>)
 8026e08:	429c      	cmp	r4, r3
 8026e0a:	d12b      	bne.n	8026e64 <__swbuf_r+0x70>
 8026e0c:	686c      	ldr	r4, [r5, #4]
 8026e0e:	69a3      	ldr	r3, [r4, #24]
 8026e10:	60a3      	str	r3, [r4, #8]
 8026e12:	89a3      	ldrh	r3, [r4, #12]
 8026e14:	071a      	lsls	r2, r3, #28
 8026e16:	d52f      	bpl.n	8026e78 <__swbuf_r+0x84>
 8026e18:	6923      	ldr	r3, [r4, #16]
 8026e1a:	b36b      	cbz	r3, 8026e78 <__swbuf_r+0x84>
 8026e1c:	6923      	ldr	r3, [r4, #16]
 8026e1e:	6820      	ldr	r0, [r4, #0]
 8026e20:	1ac0      	subs	r0, r0, r3
 8026e22:	6963      	ldr	r3, [r4, #20]
 8026e24:	b2f6      	uxtb	r6, r6
 8026e26:	4283      	cmp	r3, r0
 8026e28:	4637      	mov	r7, r6
 8026e2a:	dc04      	bgt.n	8026e36 <__swbuf_r+0x42>
 8026e2c:	4621      	mov	r1, r4
 8026e2e:	4628      	mov	r0, r5
 8026e30:	f000 f944 	bl	80270bc <_fflush_r>
 8026e34:	bb30      	cbnz	r0, 8026e84 <__swbuf_r+0x90>
 8026e36:	68a3      	ldr	r3, [r4, #8]
 8026e38:	3b01      	subs	r3, #1
 8026e3a:	60a3      	str	r3, [r4, #8]
 8026e3c:	6823      	ldr	r3, [r4, #0]
 8026e3e:	1c5a      	adds	r2, r3, #1
 8026e40:	6022      	str	r2, [r4, #0]
 8026e42:	701e      	strb	r6, [r3, #0]
 8026e44:	6963      	ldr	r3, [r4, #20]
 8026e46:	3001      	adds	r0, #1
 8026e48:	4283      	cmp	r3, r0
 8026e4a:	d004      	beq.n	8026e56 <__swbuf_r+0x62>
 8026e4c:	89a3      	ldrh	r3, [r4, #12]
 8026e4e:	07db      	lsls	r3, r3, #31
 8026e50:	d506      	bpl.n	8026e60 <__swbuf_r+0x6c>
 8026e52:	2e0a      	cmp	r6, #10
 8026e54:	d104      	bne.n	8026e60 <__swbuf_r+0x6c>
 8026e56:	4621      	mov	r1, r4
 8026e58:	4628      	mov	r0, r5
 8026e5a:	f000 f92f 	bl	80270bc <_fflush_r>
 8026e5e:	b988      	cbnz	r0, 8026e84 <__swbuf_r+0x90>
 8026e60:	4638      	mov	r0, r7
 8026e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026e64:	4b0a      	ldr	r3, [pc, #40]	; (8026e90 <__swbuf_r+0x9c>)
 8026e66:	429c      	cmp	r4, r3
 8026e68:	d101      	bne.n	8026e6e <__swbuf_r+0x7a>
 8026e6a:	68ac      	ldr	r4, [r5, #8]
 8026e6c:	e7cf      	b.n	8026e0e <__swbuf_r+0x1a>
 8026e6e:	4b09      	ldr	r3, [pc, #36]	; (8026e94 <__swbuf_r+0xa0>)
 8026e70:	429c      	cmp	r4, r3
 8026e72:	bf08      	it	eq
 8026e74:	68ec      	ldreq	r4, [r5, #12]
 8026e76:	e7ca      	b.n	8026e0e <__swbuf_r+0x1a>
 8026e78:	4621      	mov	r1, r4
 8026e7a:	4628      	mov	r0, r5
 8026e7c:	f000 f80c 	bl	8026e98 <__swsetup_r>
 8026e80:	2800      	cmp	r0, #0
 8026e82:	d0cb      	beq.n	8026e1c <__swbuf_r+0x28>
 8026e84:	f04f 37ff 	mov.w	r7, #4294967295
 8026e88:	e7ea      	b.n	8026e60 <__swbuf_r+0x6c>
 8026e8a:	bf00      	nop
 8026e8c:	0802ded0 	.word	0x0802ded0
 8026e90:	0802def0 	.word	0x0802def0
 8026e94:	0802deb0 	.word	0x0802deb0

08026e98 <__swsetup_r>:
 8026e98:	4b32      	ldr	r3, [pc, #200]	; (8026f64 <__swsetup_r+0xcc>)
 8026e9a:	b570      	push	{r4, r5, r6, lr}
 8026e9c:	681d      	ldr	r5, [r3, #0]
 8026e9e:	4606      	mov	r6, r0
 8026ea0:	460c      	mov	r4, r1
 8026ea2:	b125      	cbz	r5, 8026eae <__swsetup_r+0x16>
 8026ea4:	69ab      	ldr	r3, [r5, #24]
 8026ea6:	b913      	cbnz	r3, 8026eae <__swsetup_r+0x16>
 8026ea8:	4628      	mov	r0, r5
 8026eaa:	f000 f99b 	bl	80271e4 <__sinit>
 8026eae:	4b2e      	ldr	r3, [pc, #184]	; (8026f68 <__swsetup_r+0xd0>)
 8026eb0:	429c      	cmp	r4, r3
 8026eb2:	d10f      	bne.n	8026ed4 <__swsetup_r+0x3c>
 8026eb4:	686c      	ldr	r4, [r5, #4]
 8026eb6:	89a3      	ldrh	r3, [r4, #12]
 8026eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026ebc:	0719      	lsls	r1, r3, #28
 8026ebe:	d42c      	bmi.n	8026f1a <__swsetup_r+0x82>
 8026ec0:	06dd      	lsls	r5, r3, #27
 8026ec2:	d411      	bmi.n	8026ee8 <__swsetup_r+0x50>
 8026ec4:	2309      	movs	r3, #9
 8026ec6:	6033      	str	r3, [r6, #0]
 8026ec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026ecc:	81a3      	strh	r3, [r4, #12]
 8026ece:	f04f 30ff 	mov.w	r0, #4294967295
 8026ed2:	e03e      	b.n	8026f52 <__swsetup_r+0xba>
 8026ed4:	4b25      	ldr	r3, [pc, #148]	; (8026f6c <__swsetup_r+0xd4>)
 8026ed6:	429c      	cmp	r4, r3
 8026ed8:	d101      	bne.n	8026ede <__swsetup_r+0x46>
 8026eda:	68ac      	ldr	r4, [r5, #8]
 8026edc:	e7eb      	b.n	8026eb6 <__swsetup_r+0x1e>
 8026ede:	4b24      	ldr	r3, [pc, #144]	; (8026f70 <__swsetup_r+0xd8>)
 8026ee0:	429c      	cmp	r4, r3
 8026ee2:	bf08      	it	eq
 8026ee4:	68ec      	ldreq	r4, [r5, #12]
 8026ee6:	e7e6      	b.n	8026eb6 <__swsetup_r+0x1e>
 8026ee8:	0758      	lsls	r0, r3, #29
 8026eea:	d512      	bpl.n	8026f12 <__swsetup_r+0x7a>
 8026eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026eee:	b141      	cbz	r1, 8026f02 <__swsetup_r+0x6a>
 8026ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026ef4:	4299      	cmp	r1, r3
 8026ef6:	d002      	beq.n	8026efe <__swsetup_r+0x66>
 8026ef8:	4630      	mov	r0, r6
 8026efa:	f7ff fcc3 	bl	8026884 <_free_r>
 8026efe:	2300      	movs	r3, #0
 8026f00:	6363      	str	r3, [r4, #52]	; 0x34
 8026f02:	89a3      	ldrh	r3, [r4, #12]
 8026f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026f08:	81a3      	strh	r3, [r4, #12]
 8026f0a:	2300      	movs	r3, #0
 8026f0c:	6063      	str	r3, [r4, #4]
 8026f0e:	6923      	ldr	r3, [r4, #16]
 8026f10:	6023      	str	r3, [r4, #0]
 8026f12:	89a3      	ldrh	r3, [r4, #12]
 8026f14:	f043 0308 	orr.w	r3, r3, #8
 8026f18:	81a3      	strh	r3, [r4, #12]
 8026f1a:	6923      	ldr	r3, [r4, #16]
 8026f1c:	b94b      	cbnz	r3, 8026f32 <__swsetup_r+0x9a>
 8026f1e:	89a3      	ldrh	r3, [r4, #12]
 8026f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026f28:	d003      	beq.n	8026f32 <__swsetup_r+0x9a>
 8026f2a:	4621      	mov	r1, r4
 8026f2c:	4630      	mov	r0, r6
 8026f2e:	f000 fa31 	bl	8027394 <__smakebuf_r>
 8026f32:	89a0      	ldrh	r0, [r4, #12]
 8026f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026f38:	f010 0301 	ands.w	r3, r0, #1
 8026f3c:	d00a      	beq.n	8026f54 <__swsetup_r+0xbc>
 8026f3e:	2300      	movs	r3, #0
 8026f40:	60a3      	str	r3, [r4, #8]
 8026f42:	6963      	ldr	r3, [r4, #20]
 8026f44:	425b      	negs	r3, r3
 8026f46:	61a3      	str	r3, [r4, #24]
 8026f48:	6923      	ldr	r3, [r4, #16]
 8026f4a:	b943      	cbnz	r3, 8026f5e <__swsetup_r+0xc6>
 8026f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026f50:	d1ba      	bne.n	8026ec8 <__swsetup_r+0x30>
 8026f52:	bd70      	pop	{r4, r5, r6, pc}
 8026f54:	0781      	lsls	r1, r0, #30
 8026f56:	bf58      	it	pl
 8026f58:	6963      	ldrpl	r3, [r4, #20]
 8026f5a:	60a3      	str	r3, [r4, #8]
 8026f5c:	e7f4      	b.n	8026f48 <__swsetup_r+0xb0>
 8026f5e:	2000      	movs	r0, #0
 8026f60:	e7f7      	b.n	8026f52 <__swsetup_r+0xba>
 8026f62:	bf00      	nop
 8026f64:	20000340 	.word	0x20000340
 8026f68:	0802ded0 	.word	0x0802ded0
 8026f6c:	0802def0 	.word	0x0802def0
 8026f70:	0802deb0 	.word	0x0802deb0

08026f74 <__assert_func>:
 8026f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026f76:	4614      	mov	r4, r2
 8026f78:	461a      	mov	r2, r3
 8026f7a:	4b09      	ldr	r3, [pc, #36]	; (8026fa0 <__assert_func+0x2c>)
 8026f7c:	681b      	ldr	r3, [r3, #0]
 8026f7e:	4605      	mov	r5, r0
 8026f80:	68d8      	ldr	r0, [r3, #12]
 8026f82:	b14c      	cbz	r4, 8026f98 <__assert_func+0x24>
 8026f84:	4b07      	ldr	r3, [pc, #28]	; (8026fa4 <__assert_func+0x30>)
 8026f86:	9100      	str	r1, [sp, #0]
 8026f88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026f8c:	4906      	ldr	r1, [pc, #24]	; (8026fa8 <__assert_func+0x34>)
 8026f8e:	462b      	mov	r3, r5
 8026f90:	f000 f9a6 	bl	80272e0 <fiprintf>
 8026f94:	f000 ff32 	bl	8027dfc <abort>
 8026f98:	4b04      	ldr	r3, [pc, #16]	; (8026fac <__assert_func+0x38>)
 8026f9a:	461c      	mov	r4, r3
 8026f9c:	e7f3      	b.n	8026f86 <__assert_func+0x12>
 8026f9e:	bf00      	nop
 8026fa0:	20000340 	.word	0x20000340
 8026fa4:	0802de72 	.word	0x0802de72
 8026fa8:	0802de7f 	.word	0x0802de7f
 8026fac:	0802dead 	.word	0x0802dead

08026fb0 <__sflush_r>:
 8026fb0:	898a      	ldrh	r2, [r1, #12]
 8026fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026fb6:	4605      	mov	r5, r0
 8026fb8:	0710      	lsls	r0, r2, #28
 8026fba:	460c      	mov	r4, r1
 8026fbc:	d458      	bmi.n	8027070 <__sflush_r+0xc0>
 8026fbe:	684b      	ldr	r3, [r1, #4]
 8026fc0:	2b00      	cmp	r3, #0
 8026fc2:	dc05      	bgt.n	8026fd0 <__sflush_r+0x20>
 8026fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026fc6:	2b00      	cmp	r3, #0
 8026fc8:	dc02      	bgt.n	8026fd0 <__sflush_r+0x20>
 8026fca:	2000      	movs	r0, #0
 8026fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026fd2:	2e00      	cmp	r6, #0
 8026fd4:	d0f9      	beq.n	8026fca <__sflush_r+0x1a>
 8026fd6:	2300      	movs	r3, #0
 8026fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026fdc:	682f      	ldr	r7, [r5, #0]
 8026fde:	602b      	str	r3, [r5, #0]
 8026fe0:	d032      	beq.n	8027048 <__sflush_r+0x98>
 8026fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026fe4:	89a3      	ldrh	r3, [r4, #12]
 8026fe6:	075a      	lsls	r2, r3, #29
 8026fe8:	d505      	bpl.n	8026ff6 <__sflush_r+0x46>
 8026fea:	6863      	ldr	r3, [r4, #4]
 8026fec:	1ac0      	subs	r0, r0, r3
 8026fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026ff0:	b10b      	cbz	r3, 8026ff6 <__sflush_r+0x46>
 8026ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026ff4:	1ac0      	subs	r0, r0, r3
 8026ff6:	2300      	movs	r3, #0
 8026ff8:	4602      	mov	r2, r0
 8026ffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026ffc:	6a21      	ldr	r1, [r4, #32]
 8026ffe:	4628      	mov	r0, r5
 8027000:	47b0      	blx	r6
 8027002:	1c43      	adds	r3, r0, #1
 8027004:	89a3      	ldrh	r3, [r4, #12]
 8027006:	d106      	bne.n	8027016 <__sflush_r+0x66>
 8027008:	6829      	ldr	r1, [r5, #0]
 802700a:	291d      	cmp	r1, #29
 802700c:	d82c      	bhi.n	8027068 <__sflush_r+0xb8>
 802700e:	4a2a      	ldr	r2, [pc, #168]	; (80270b8 <__sflush_r+0x108>)
 8027010:	40ca      	lsrs	r2, r1
 8027012:	07d6      	lsls	r6, r2, #31
 8027014:	d528      	bpl.n	8027068 <__sflush_r+0xb8>
 8027016:	2200      	movs	r2, #0
 8027018:	6062      	str	r2, [r4, #4]
 802701a:	04d9      	lsls	r1, r3, #19
 802701c:	6922      	ldr	r2, [r4, #16]
 802701e:	6022      	str	r2, [r4, #0]
 8027020:	d504      	bpl.n	802702c <__sflush_r+0x7c>
 8027022:	1c42      	adds	r2, r0, #1
 8027024:	d101      	bne.n	802702a <__sflush_r+0x7a>
 8027026:	682b      	ldr	r3, [r5, #0]
 8027028:	b903      	cbnz	r3, 802702c <__sflush_r+0x7c>
 802702a:	6560      	str	r0, [r4, #84]	; 0x54
 802702c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802702e:	602f      	str	r7, [r5, #0]
 8027030:	2900      	cmp	r1, #0
 8027032:	d0ca      	beq.n	8026fca <__sflush_r+0x1a>
 8027034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027038:	4299      	cmp	r1, r3
 802703a:	d002      	beq.n	8027042 <__sflush_r+0x92>
 802703c:	4628      	mov	r0, r5
 802703e:	f7ff fc21 	bl	8026884 <_free_r>
 8027042:	2000      	movs	r0, #0
 8027044:	6360      	str	r0, [r4, #52]	; 0x34
 8027046:	e7c1      	b.n	8026fcc <__sflush_r+0x1c>
 8027048:	6a21      	ldr	r1, [r4, #32]
 802704a:	2301      	movs	r3, #1
 802704c:	4628      	mov	r0, r5
 802704e:	47b0      	blx	r6
 8027050:	1c41      	adds	r1, r0, #1
 8027052:	d1c7      	bne.n	8026fe4 <__sflush_r+0x34>
 8027054:	682b      	ldr	r3, [r5, #0]
 8027056:	2b00      	cmp	r3, #0
 8027058:	d0c4      	beq.n	8026fe4 <__sflush_r+0x34>
 802705a:	2b1d      	cmp	r3, #29
 802705c:	d001      	beq.n	8027062 <__sflush_r+0xb2>
 802705e:	2b16      	cmp	r3, #22
 8027060:	d101      	bne.n	8027066 <__sflush_r+0xb6>
 8027062:	602f      	str	r7, [r5, #0]
 8027064:	e7b1      	b.n	8026fca <__sflush_r+0x1a>
 8027066:	89a3      	ldrh	r3, [r4, #12]
 8027068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802706c:	81a3      	strh	r3, [r4, #12]
 802706e:	e7ad      	b.n	8026fcc <__sflush_r+0x1c>
 8027070:	690f      	ldr	r7, [r1, #16]
 8027072:	2f00      	cmp	r7, #0
 8027074:	d0a9      	beq.n	8026fca <__sflush_r+0x1a>
 8027076:	0793      	lsls	r3, r2, #30
 8027078:	680e      	ldr	r6, [r1, #0]
 802707a:	bf08      	it	eq
 802707c:	694b      	ldreq	r3, [r1, #20]
 802707e:	600f      	str	r7, [r1, #0]
 8027080:	bf18      	it	ne
 8027082:	2300      	movne	r3, #0
 8027084:	eba6 0807 	sub.w	r8, r6, r7
 8027088:	608b      	str	r3, [r1, #8]
 802708a:	f1b8 0f00 	cmp.w	r8, #0
 802708e:	dd9c      	ble.n	8026fca <__sflush_r+0x1a>
 8027090:	6a21      	ldr	r1, [r4, #32]
 8027092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027094:	4643      	mov	r3, r8
 8027096:	463a      	mov	r2, r7
 8027098:	4628      	mov	r0, r5
 802709a:	47b0      	blx	r6
 802709c:	2800      	cmp	r0, #0
 802709e:	dc06      	bgt.n	80270ae <__sflush_r+0xfe>
 80270a0:	89a3      	ldrh	r3, [r4, #12]
 80270a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80270a6:	81a3      	strh	r3, [r4, #12]
 80270a8:	f04f 30ff 	mov.w	r0, #4294967295
 80270ac:	e78e      	b.n	8026fcc <__sflush_r+0x1c>
 80270ae:	4407      	add	r7, r0
 80270b0:	eba8 0800 	sub.w	r8, r8, r0
 80270b4:	e7e9      	b.n	802708a <__sflush_r+0xda>
 80270b6:	bf00      	nop
 80270b8:	20400001 	.word	0x20400001

080270bc <_fflush_r>:
 80270bc:	b538      	push	{r3, r4, r5, lr}
 80270be:	690b      	ldr	r3, [r1, #16]
 80270c0:	4605      	mov	r5, r0
 80270c2:	460c      	mov	r4, r1
 80270c4:	b913      	cbnz	r3, 80270cc <_fflush_r+0x10>
 80270c6:	2500      	movs	r5, #0
 80270c8:	4628      	mov	r0, r5
 80270ca:	bd38      	pop	{r3, r4, r5, pc}
 80270cc:	b118      	cbz	r0, 80270d6 <_fflush_r+0x1a>
 80270ce:	6983      	ldr	r3, [r0, #24]
 80270d0:	b90b      	cbnz	r3, 80270d6 <_fflush_r+0x1a>
 80270d2:	f000 f887 	bl	80271e4 <__sinit>
 80270d6:	4b14      	ldr	r3, [pc, #80]	; (8027128 <_fflush_r+0x6c>)
 80270d8:	429c      	cmp	r4, r3
 80270da:	d11b      	bne.n	8027114 <_fflush_r+0x58>
 80270dc:	686c      	ldr	r4, [r5, #4]
 80270de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80270e2:	2b00      	cmp	r3, #0
 80270e4:	d0ef      	beq.n	80270c6 <_fflush_r+0xa>
 80270e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80270e8:	07d0      	lsls	r0, r2, #31
 80270ea:	d404      	bmi.n	80270f6 <_fflush_r+0x3a>
 80270ec:	0599      	lsls	r1, r3, #22
 80270ee:	d402      	bmi.n	80270f6 <_fflush_r+0x3a>
 80270f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80270f2:	f000 f927 	bl	8027344 <__retarget_lock_acquire_recursive>
 80270f6:	4628      	mov	r0, r5
 80270f8:	4621      	mov	r1, r4
 80270fa:	f7ff ff59 	bl	8026fb0 <__sflush_r>
 80270fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027100:	07da      	lsls	r2, r3, #31
 8027102:	4605      	mov	r5, r0
 8027104:	d4e0      	bmi.n	80270c8 <_fflush_r+0xc>
 8027106:	89a3      	ldrh	r3, [r4, #12]
 8027108:	059b      	lsls	r3, r3, #22
 802710a:	d4dd      	bmi.n	80270c8 <_fflush_r+0xc>
 802710c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802710e:	f000 f91a 	bl	8027346 <__retarget_lock_release_recursive>
 8027112:	e7d9      	b.n	80270c8 <_fflush_r+0xc>
 8027114:	4b05      	ldr	r3, [pc, #20]	; (802712c <_fflush_r+0x70>)
 8027116:	429c      	cmp	r4, r3
 8027118:	d101      	bne.n	802711e <_fflush_r+0x62>
 802711a:	68ac      	ldr	r4, [r5, #8]
 802711c:	e7df      	b.n	80270de <_fflush_r+0x22>
 802711e:	4b04      	ldr	r3, [pc, #16]	; (8027130 <_fflush_r+0x74>)
 8027120:	429c      	cmp	r4, r3
 8027122:	bf08      	it	eq
 8027124:	68ec      	ldreq	r4, [r5, #12]
 8027126:	e7da      	b.n	80270de <_fflush_r+0x22>
 8027128:	0802ded0 	.word	0x0802ded0
 802712c:	0802def0 	.word	0x0802def0
 8027130:	0802deb0 	.word	0x0802deb0

08027134 <std>:
 8027134:	2300      	movs	r3, #0
 8027136:	b510      	push	{r4, lr}
 8027138:	4604      	mov	r4, r0
 802713a:	e9c0 3300 	strd	r3, r3, [r0]
 802713e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8027142:	6083      	str	r3, [r0, #8]
 8027144:	8181      	strh	r1, [r0, #12]
 8027146:	6643      	str	r3, [r0, #100]	; 0x64
 8027148:	81c2      	strh	r2, [r0, #14]
 802714a:	6183      	str	r3, [r0, #24]
 802714c:	4619      	mov	r1, r3
 802714e:	2208      	movs	r2, #8
 8027150:	305c      	adds	r0, #92	; 0x5c
 8027152:	f7ff fb8f 	bl	8026874 <memset>
 8027156:	4b05      	ldr	r3, [pc, #20]	; (802716c <std+0x38>)
 8027158:	6263      	str	r3, [r4, #36]	; 0x24
 802715a:	4b05      	ldr	r3, [pc, #20]	; (8027170 <std+0x3c>)
 802715c:	62a3      	str	r3, [r4, #40]	; 0x28
 802715e:	4b05      	ldr	r3, [pc, #20]	; (8027174 <std+0x40>)
 8027160:	62e3      	str	r3, [r4, #44]	; 0x2c
 8027162:	4b05      	ldr	r3, [pc, #20]	; (8027178 <std+0x44>)
 8027164:	6224      	str	r4, [r4, #32]
 8027166:	6323      	str	r3, [r4, #48]	; 0x30
 8027168:	bd10      	pop	{r4, pc}
 802716a:	bf00      	nop
 802716c:	08027d51 	.word	0x08027d51
 8027170:	08027d73 	.word	0x08027d73
 8027174:	08027dab 	.word	0x08027dab
 8027178:	08027dcf 	.word	0x08027dcf

0802717c <_cleanup_r>:
 802717c:	4901      	ldr	r1, [pc, #4]	; (8027184 <_cleanup_r+0x8>)
 802717e:	f000 b8c1 	b.w	8027304 <_fwalk_reent>
 8027182:	bf00      	nop
 8027184:	080270bd 	.word	0x080270bd

08027188 <__sfmoreglue>:
 8027188:	b570      	push	{r4, r5, r6, lr}
 802718a:	2268      	movs	r2, #104	; 0x68
 802718c:	1e4d      	subs	r5, r1, #1
 802718e:	4355      	muls	r5, r2
 8027190:	460e      	mov	r6, r1
 8027192:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027196:	f7ff fbe1 	bl	802695c <_malloc_r>
 802719a:	4604      	mov	r4, r0
 802719c:	b140      	cbz	r0, 80271b0 <__sfmoreglue+0x28>
 802719e:	2100      	movs	r1, #0
 80271a0:	e9c0 1600 	strd	r1, r6, [r0]
 80271a4:	300c      	adds	r0, #12
 80271a6:	60a0      	str	r0, [r4, #8]
 80271a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80271ac:	f7ff fb62 	bl	8026874 <memset>
 80271b0:	4620      	mov	r0, r4
 80271b2:	bd70      	pop	{r4, r5, r6, pc}

080271b4 <__sfp_lock_acquire>:
 80271b4:	4801      	ldr	r0, [pc, #4]	; (80271bc <__sfp_lock_acquire+0x8>)
 80271b6:	f000 b8c5 	b.w	8027344 <__retarget_lock_acquire_recursive>
 80271ba:	bf00      	nop
 80271bc:	20016315 	.word	0x20016315

080271c0 <__sfp_lock_release>:
 80271c0:	4801      	ldr	r0, [pc, #4]	; (80271c8 <__sfp_lock_release+0x8>)
 80271c2:	f000 b8c0 	b.w	8027346 <__retarget_lock_release_recursive>
 80271c6:	bf00      	nop
 80271c8:	20016315 	.word	0x20016315

080271cc <__sinit_lock_acquire>:
 80271cc:	4801      	ldr	r0, [pc, #4]	; (80271d4 <__sinit_lock_acquire+0x8>)
 80271ce:	f000 b8b9 	b.w	8027344 <__retarget_lock_acquire_recursive>
 80271d2:	bf00      	nop
 80271d4:	20016316 	.word	0x20016316

080271d8 <__sinit_lock_release>:
 80271d8:	4801      	ldr	r0, [pc, #4]	; (80271e0 <__sinit_lock_release+0x8>)
 80271da:	f000 b8b4 	b.w	8027346 <__retarget_lock_release_recursive>
 80271de:	bf00      	nop
 80271e0:	20016316 	.word	0x20016316

080271e4 <__sinit>:
 80271e4:	b510      	push	{r4, lr}
 80271e6:	4604      	mov	r4, r0
 80271e8:	f7ff fff0 	bl	80271cc <__sinit_lock_acquire>
 80271ec:	69a3      	ldr	r3, [r4, #24]
 80271ee:	b11b      	cbz	r3, 80271f8 <__sinit+0x14>
 80271f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80271f4:	f7ff bff0 	b.w	80271d8 <__sinit_lock_release>
 80271f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80271fc:	6523      	str	r3, [r4, #80]	; 0x50
 80271fe:	4b13      	ldr	r3, [pc, #76]	; (802724c <__sinit+0x68>)
 8027200:	4a13      	ldr	r2, [pc, #76]	; (8027250 <__sinit+0x6c>)
 8027202:	681b      	ldr	r3, [r3, #0]
 8027204:	62a2      	str	r2, [r4, #40]	; 0x28
 8027206:	42a3      	cmp	r3, r4
 8027208:	bf04      	itt	eq
 802720a:	2301      	moveq	r3, #1
 802720c:	61a3      	streq	r3, [r4, #24]
 802720e:	4620      	mov	r0, r4
 8027210:	f000 f820 	bl	8027254 <__sfp>
 8027214:	6060      	str	r0, [r4, #4]
 8027216:	4620      	mov	r0, r4
 8027218:	f000 f81c 	bl	8027254 <__sfp>
 802721c:	60a0      	str	r0, [r4, #8]
 802721e:	4620      	mov	r0, r4
 8027220:	f000 f818 	bl	8027254 <__sfp>
 8027224:	2200      	movs	r2, #0
 8027226:	60e0      	str	r0, [r4, #12]
 8027228:	2104      	movs	r1, #4
 802722a:	6860      	ldr	r0, [r4, #4]
 802722c:	f7ff ff82 	bl	8027134 <std>
 8027230:	68a0      	ldr	r0, [r4, #8]
 8027232:	2201      	movs	r2, #1
 8027234:	2109      	movs	r1, #9
 8027236:	f7ff ff7d 	bl	8027134 <std>
 802723a:	68e0      	ldr	r0, [r4, #12]
 802723c:	2202      	movs	r2, #2
 802723e:	2112      	movs	r1, #18
 8027240:	f7ff ff78 	bl	8027134 <std>
 8027244:	2301      	movs	r3, #1
 8027246:	61a3      	str	r3, [r4, #24]
 8027248:	e7d2      	b.n	80271f0 <__sinit+0xc>
 802724a:	bf00      	nop
 802724c:	0802ddfc 	.word	0x0802ddfc
 8027250:	0802717d 	.word	0x0802717d

08027254 <__sfp>:
 8027254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027256:	4607      	mov	r7, r0
 8027258:	f7ff ffac 	bl	80271b4 <__sfp_lock_acquire>
 802725c:	4b1e      	ldr	r3, [pc, #120]	; (80272d8 <__sfp+0x84>)
 802725e:	681e      	ldr	r6, [r3, #0]
 8027260:	69b3      	ldr	r3, [r6, #24]
 8027262:	b913      	cbnz	r3, 802726a <__sfp+0x16>
 8027264:	4630      	mov	r0, r6
 8027266:	f7ff ffbd 	bl	80271e4 <__sinit>
 802726a:	3648      	adds	r6, #72	; 0x48
 802726c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8027270:	3b01      	subs	r3, #1
 8027272:	d503      	bpl.n	802727c <__sfp+0x28>
 8027274:	6833      	ldr	r3, [r6, #0]
 8027276:	b30b      	cbz	r3, 80272bc <__sfp+0x68>
 8027278:	6836      	ldr	r6, [r6, #0]
 802727a:	e7f7      	b.n	802726c <__sfp+0x18>
 802727c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8027280:	b9d5      	cbnz	r5, 80272b8 <__sfp+0x64>
 8027282:	4b16      	ldr	r3, [pc, #88]	; (80272dc <__sfp+0x88>)
 8027284:	60e3      	str	r3, [r4, #12]
 8027286:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802728a:	6665      	str	r5, [r4, #100]	; 0x64
 802728c:	f000 f859 	bl	8027342 <__retarget_lock_init_recursive>
 8027290:	f7ff ff96 	bl	80271c0 <__sfp_lock_release>
 8027294:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027298:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802729c:	6025      	str	r5, [r4, #0]
 802729e:	61a5      	str	r5, [r4, #24]
 80272a0:	2208      	movs	r2, #8
 80272a2:	4629      	mov	r1, r5
 80272a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80272a8:	f7ff fae4 	bl	8026874 <memset>
 80272ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80272b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80272b4:	4620      	mov	r0, r4
 80272b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80272b8:	3468      	adds	r4, #104	; 0x68
 80272ba:	e7d9      	b.n	8027270 <__sfp+0x1c>
 80272bc:	2104      	movs	r1, #4
 80272be:	4638      	mov	r0, r7
 80272c0:	f7ff ff62 	bl	8027188 <__sfmoreglue>
 80272c4:	4604      	mov	r4, r0
 80272c6:	6030      	str	r0, [r6, #0]
 80272c8:	2800      	cmp	r0, #0
 80272ca:	d1d5      	bne.n	8027278 <__sfp+0x24>
 80272cc:	f7ff ff78 	bl	80271c0 <__sfp_lock_release>
 80272d0:	230c      	movs	r3, #12
 80272d2:	603b      	str	r3, [r7, #0]
 80272d4:	e7ee      	b.n	80272b4 <__sfp+0x60>
 80272d6:	bf00      	nop
 80272d8:	0802ddfc 	.word	0x0802ddfc
 80272dc:	ffff0001 	.word	0xffff0001

080272e0 <fiprintf>:
 80272e0:	b40e      	push	{r1, r2, r3}
 80272e2:	b503      	push	{r0, r1, lr}
 80272e4:	4601      	mov	r1, r0
 80272e6:	ab03      	add	r3, sp, #12
 80272e8:	4805      	ldr	r0, [pc, #20]	; (8027300 <fiprintf+0x20>)
 80272ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80272ee:	6800      	ldr	r0, [r0, #0]
 80272f0:	9301      	str	r3, [sp, #4]
 80272f2:	f000 fa21 	bl	8027738 <_vfiprintf_r>
 80272f6:	b002      	add	sp, #8
 80272f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80272fc:	b003      	add	sp, #12
 80272fe:	4770      	bx	lr
 8027300:	20000340 	.word	0x20000340

08027304 <_fwalk_reent>:
 8027304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027308:	4606      	mov	r6, r0
 802730a:	4688      	mov	r8, r1
 802730c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027310:	2700      	movs	r7, #0
 8027312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027316:	f1b9 0901 	subs.w	r9, r9, #1
 802731a:	d505      	bpl.n	8027328 <_fwalk_reent+0x24>
 802731c:	6824      	ldr	r4, [r4, #0]
 802731e:	2c00      	cmp	r4, #0
 8027320:	d1f7      	bne.n	8027312 <_fwalk_reent+0xe>
 8027322:	4638      	mov	r0, r7
 8027324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027328:	89ab      	ldrh	r3, [r5, #12]
 802732a:	2b01      	cmp	r3, #1
 802732c:	d907      	bls.n	802733e <_fwalk_reent+0x3a>
 802732e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027332:	3301      	adds	r3, #1
 8027334:	d003      	beq.n	802733e <_fwalk_reent+0x3a>
 8027336:	4629      	mov	r1, r5
 8027338:	4630      	mov	r0, r6
 802733a:	47c0      	blx	r8
 802733c:	4307      	orrs	r7, r0
 802733e:	3568      	adds	r5, #104	; 0x68
 8027340:	e7e9      	b.n	8027316 <_fwalk_reent+0x12>

08027342 <__retarget_lock_init_recursive>:
 8027342:	4770      	bx	lr

08027344 <__retarget_lock_acquire_recursive>:
 8027344:	4770      	bx	lr

08027346 <__retarget_lock_release_recursive>:
 8027346:	4770      	bx	lr

08027348 <__swhatbuf_r>:
 8027348:	b570      	push	{r4, r5, r6, lr}
 802734a:	460e      	mov	r6, r1
 802734c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027350:	2900      	cmp	r1, #0
 8027352:	b096      	sub	sp, #88	; 0x58
 8027354:	4614      	mov	r4, r2
 8027356:	461d      	mov	r5, r3
 8027358:	da08      	bge.n	802736c <__swhatbuf_r+0x24>
 802735a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802735e:	2200      	movs	r2, #0
 8027360:	602a      	str	r2, [r5, #0]
 8027362:	061a      	lsls	r2, r3, #24
 8027364:	d410      	bmi.n	8027388 <__swhatbuf_r+0x40>
 8027366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802736a:	e00e      	b.n	802738a <__swhatbuf_r+0x42>
 802736c:	466a      	mov	r2, sp
 802736e:	f000 fd5d 	bl	8027e2c <_fstat_r>
 8027372:	2800      	cmp	r0, #0
 8027374:	dbf1      	blt.n	802735a <__swhatbuf_r+0x12>
 8027376:	9a01      	ldr	r2, [sp, #4]
 8027378:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802737c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027380:	425a      	negs	r2, r3
 8027382:	415a      	adcs	r2, r3
 8027384:	602a      	str	r2, [r5, #0]
 8027386:	e7ee      	b.n	8027366 <__swhatbuf_r+0x1e>
 8027388:	2340      	movs	r3, #64	; 0x40
 802738a:	2000      	movs	r0, #0
 802738c:	6023      	str	r3, [r4, #0]
 802738e:	b016      	add	sp, #88	; 0x58
 8027390:	bd70      	pop	{r4, r5, r6, pc}
	...

08027394 <__smakebuf_r>:
 8027394:	898b      	ldrh	r3, [r1, #12]
 8027396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027398:	079d      	lsls	r5, r3, #30
 802739a:	4606      	mov	r6, r0
 802739c:	460c      	mov	r4, r1
 802739e:	d507      	bpl.n	80273b0 <__smakebuf_r+0x1c>
 80273a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80273a4:	6023      	str	r3, [r4, #0]
 80273a6:	6123      	str	r3, [r4, #16]
 80273a8:	2301      	movs	r3, #1
 80273aa:	6163      	str	r3, [r4, #20]
 80273ac:	b002      	add	sp, #8
 80273ae:	bd70      	pop	{r4, r5, r6, pc}
 80273b0:	ab01      	add	r3, sp, #4
 80273b2:	466a      	mov	r2, sp
 80273b4:	f7ff ffc8 	bl	8027348 <__swhatbuf_r>
 80273b8:	9900      	ldr	r1, [sp, #0]
 80273ba:	4605      	mov	r5, r0
 80273bc:	4630      	mov	r0, r6
 80273be:	f7ff facd 	bl	802695c <_malloc_r>
 80273c2:	b948      	cbnz	r0, 80273d8 <__smakebuf_r+0x44>
 80273c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80273c8:	059a      	lsls	r2, r3, #22
 80273ca:	d4ef      	bmi.n	80273ac <__smakebuf_r+0x18>
 80273cc:	f023 0303 	bic.w	r3, r3, #3
 80273d0:	f043 0302 	orr.w	r3, r3, #2
 80273d4:	81a3      	strh	r3, [r4, #12]
 80273d6:	e7e3      	b.n	80273a0 <__smakebuf_r+0xc>
 80273d8:	4b0d      	ldr	r3, [pc, #52]	; (8027410 <__smakebuf_r+0x7c>)
 80273da:	62b3      	str	r3, [r6, #40]	; 0x28
 80273dc:	89a3      	ldrh	r3, [r4, #12]
 80273de:	6020      	str	r0, [r4, #0]
 80273e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80273e4:	81a3      	strh	r3, [r4, #12]
 80273e6:	9b00      	ldr	r3, [sp, #0]
 80273e8:	6163      	str	r3, [r4, #20]
 80273ea:	9b01      	ldr	r3, [sp, #4]
 80273ec:	6120      	str	r0, [r4, #16]
 80273ee:	b15b      	cbz	r3, 8027408 <__smakebuf_r+0x74>
 80273f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80273f4:	4630      	mov	r0, r6
 80273f6:	f000 fd2b 	bl	8027e50 <_isatty_r>
 80273fa:	b128      	cbz	r0, 8027408 <__smakebuf_r+0x74>
 80273fc:	89a3      	ldrh	r3, [r4, #12]
 80273fe:	f023 0303 	bic.w	r3, r3, #3
 8027402:	f043 0301 	orr.w	r3, r3, #1
 8027406:	81a3      	strh	r3, [r4, #12]
 8027408:	89a0      	ldrh	r0, [r4, #12]
 802740a:	4305      	orrs	r5, r0
 802740c:	81a5      	strh	r5, [r4, #12]
 802740e:	e7cd      	b.n	80273ac <__smakebuf_r+0x18>
 8027410:	0802717d 	.word	0x0802717d

08027414 <__malloc_lock>:
 8027414:	4801      	ldr	r0, [pc, #4]	; (802741c <__malloc_lock+0x8>)
 8027416:	f7ff bf95 	b.w	8027344 <__retarget_lock_acquire_recursive>
 802741a:	bf00      	nop
 802741c:	20016314 	.word	0x20016314

08027420 <__malloc_unlock>:
 8027420:	4801      	ldr	r0, [pc, #4]	; (8027428 <__malloc_unlock+0x8>)
 8027422:	f7ff bf90 	b.w	8027346 <__retarget_lock_release_recursive>
 8027426:	bf00      	nop
 8027428:	20016314 	.word	0x20016314

0802742c <__ssputs_r>:
 802742c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027430:	688e      	ldr	r6, [r1, #8]
 8027432:	429e      	cmp	r6, r3
 8027434:	4682      	mov	sl, r0
 8027436:	460c      	mov	r4, r1
 8027438:	4690      	mov	r8, r2
 802743a:	461f      	mov	r7, r3
 802743c:	d838      	bhi.n	80274b0 <__ssputs_r+0x84>
 802743e:	898a      	ldrh	r2, [r1, #12]
 8027440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027444:	d032      	beq.n	80274ac <__ssputs_r+0x80>
 8027446:	6825      	ldr	r5, [r4, #0]
 8027448:	6909      	ldr	r1, [r1, #16]
 802744a:	eba5 0901 	sub.w	r9, r5, r1
 802744e:	6965      	ldr	r5, [r4, #20]
 8027450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027458:	3301      	adds	r3, #1
 802745a:	444b      	add	r3, r9
 802745c:	106d      	asrs	r5, r5, #1
 802745e:	429d      	cmp	r5, r3
 8027460:	bf38      	it	cc
 8027462:	461d      	movcc	r5, r3
 8027464:	0553      	lsls	r3, r2, #21
 8027466:	d531      	bpl.n	80274cc <__ssputs_r+0xa0>
 8027468:	4629      	mov	r1, r5
 802746a:	f7ff fa77 	bl	802695c <_malloc_r>
 802746e:	4606      	mov	r6, r0
 8027470:	b950      	cbnz	r0, 8027488 <__ssputs_r+0x5c>
 8027472:	230c      	movs	r3, #12
 8027474:	f8ca 3000 	str.w	r3, [sl]
 8027478:	89a3      	ldrh	r3, [r4, #12]
 802747a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802747e:	81a3      	strh	r3, [r4, #12]
 8027480:	f04f 30ff 	mov.w	r0, #4294967295
 8027484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027488:	6921      	ldr	r1, [r4, #16]
 802748a:	464a      	mov	r2, r9
 802748c:	f7ff f9ca 	bl	8026824 <memcpy>
 8027490:	89a3      	ldrh	r3, [r4, #12]
 8027492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802749a:	81a3      	strh	r3, [r4, #12]
 802749c:	6126      	str	r6, [r4, #16]
 802749e:	6165      	str	r5, [r4, #20]
 80274a0:	444e      	add	r6, r9
 80274a2:	eba5 0509 	sub.w	r5, r5, r9
 80274a6:	6026      	str	r6, [r4, #0]
 80274a8:	60a5      	str	r5, [r4, #8]
 80274aa:	463e      	mov	r6, r7
 80274ac:	42be      	cmp	r6, r7
 80274ae:	d900      	bls.n	80274b2 <__ssputs_r+0x86>
 80274b0:	463e      	mov	r6, r7
 80274b2:	6820      	ldr	r0, [r4, #0]
 80274b4:	4632      	mov	r2, r6
 80274b6:	4641      	mov	r1, r8
 80274b8:	f7ff f9c2 	bl	8026840 <memmove>
 80274bc:	68a3      	ldr	r3, [r4, #8]
 80274be:	1b9b      	subs	r3, r3, r6
 80274c0:	60a3      	str	r3, [r4, #8]
 80274c2:	6823      	ldr	r3, [r4, #0]
 80274c4:	4433      	add	r3, r6
 80274c6:	6023      	str	r3, [r4, #0]
 80274c8:	2000      	movs	r0, #0
 80274ca:	e7db      	b.n	8027484 <__ssputs_r+0x58>
 80274cc:	462a      	mov	r2, r5
 80274ce:	f000 fce1 	bl	8027e94 <_realloc_r>
 80274d2:	4606      	mov	r6, r0
 80274d4:	2800      	cmp	r0, #0
 80274d6:	d1e1      	bne.n	802749c <__ssputs_r+0x70>
 80274d8:	6921      	ldr	r1, [r4, #16]
 80274da:	4650      	mov	r0, sl
 80274dc:	f7ff f9d2 	bl	8026884 <_free_r>
 80274e0:	e7c7      	b.n	8027472 <__ssputs_r+0x46>
	...

080274e4 <_svfiprintf_r>:
 80274e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274e8:	4698      	mov	r8, r3
 80274ea:	898b      	ldrh	r3, [r1, #12]
 80274ec:	061b      	lsls	r3, r3, #24
 80274ee:	b09d      	sub	sp, #116	; 0x74
 80274f0:	4607      	mov	r7, r0
 80274f2:	460d      	mov	r5, r1
 80274f4:	4614      	mov	r4, r2
 80274f6:	d50e      	bpl.n	8027516 <_svfiprintf_r+0x32>
 80274f8:	690b      	ldr	r3, [r1, #16]
 80274fa:	b963      	cbnz	r3, 8027516 <_svfiprintf_r+0x32>
 80274fc:	2140      	movs	r1, #64	; 0x40
 80274fe:	f7ff fa2d 	bl	802695c <_malloc_r>
 8027502:	6028      	str	r0, [r5, #0]
 8027504:	6128      	str	r0, [r5, #16]
 8027506:	b920      	cbnz	r0, 8027512 <_svfiprintf_r+0x2e>
 8027508:	230c      	movs	r3, #12
 802750a:	603b      	str	r3, [r7, #0]
 802750c:	f04f 30ff 	mov.w	r0, #4294967295
 8027510:	e0d1      	b.n	80276b6 <_svfiprintf_r+0x1d2>
 8027512:	2340      	movs	r3, #64	; 0x40
 8027514:	616b      	str	r3, [r5, #20]
 8027516:	2300      	movs	r3, #0
 8027518:	9309      	str	r3, [sp, #36]	; 0x24
 802751a:	2320      	movs	r3, #32
 802751c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027520:	f8cd 800c 	str.w	r8, [sp, #12]
 8027524:	2330      	movs	r3, #48	; 0x30
 8027526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80276d0 <_svfiprintf_r+0x1ec>
 802752a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802752e:	f04f 0901 	mov.w	r9, #1
 8027532:	4623      	mov	r3, r4
 8027534:	469a      	mov	sl, r3
 8027536:	f813 2b01 	ldrb.w	r2, [r3], #1
 802753a:	b10a      	cbz	r2, 8027540 <_svfiprintf_r+0x5c>
 802753c:	2a25      	cmp	r2, #37	; 0x25
 802753e:	d1f9      	bne.n	8027534 <_svfiprintf_r+0x50>
 8027540:	ebba 0b04 	subs.w	fp, sl, r4
 8027544:	d00b      	beq.n	802755e <_svfiprintf_r+0x7a>
 8027546:	465b      	mov	r3, fp
 8027548:	4622      	mov	r2, r4
 802754a:	4629      	mov	r1, r5
 802754c:	4638      	mov	r0, r7
 802754e:	f7ff ff6d 	bl	802742c <__ssputs_r>
 8027552:	3001      	adds	r0, #1
 8027554:	f000 80aa 	beq.w	80276ac <_svfiprintf_r+0x1c8>
 8027558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802755a:	445a      	add	r2, fp
 802755c:	9209      	str	r2, [sp, #36]	; 0x24
 802755e:	f89a 3000 	ldrb.w	r3, [sl]
 8027562:	2b00      	cmp	r3, #0
 8027564:	f000 80a2 	beq.w	80276ac <_svfiprintf_r+0x1c8>
 8027568:	2300      	movs	r3, #0
 802756a:	f04f 32ff 	mov.w	r2, #4294967295
 802756e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027572:	f10a 0a01 	add.w	sl, sl, #1
 8027576:	9304      	str	r3, [sp, #16]
 8027578:	9307      	str	r3, [sp, #28]
 802757a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802757e:	931a      	str	r3, [sp, #104]	; 0x68
 8027580:	4654      	mov	r4, sl
 8027582:	2205      	movs	r2, #5
 8027584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027588:	4851      	ldr	r0, [pc, #324]	; (80276d0 <_svfiprintf_r+0x1ec>)
 802758a:	f7d8 fe71 	bl	8000270 <memchr>
 802758e:	9a04      	ldr	r2, [sp, #16]
 8027590:	b9d8      	cbnz	r0, 80275ca <_svfiprintf_r+0xe6>
 8027592:	06d0      	lsls	r0, r2, #27
 8027594:	bf44      	itt	mi
 8027596:	2320      	movmi	r3, #32
 8027598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802759c:	0711      	lsls	r1, r2, #28
 802759e:	bf44      	itt	mi
 80275a0:	232b      	movmi	r3, #43	; 0x2b
 80275a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80275a6:	f89a 3000 	ldrb.w	r3, [sl]
 80275aa:	2b2a      	cmp	r3, #42	; 0x2a
 80275ac:	d015      	beq.n	80275da <_svfiprintf_r+0xf6>
 80275ae:	9a07      	ldr	r2, [sp, #28]
 80275b0:	4654      	mov	r4, sl
 80275b2:	2000      	movs	r0, #0
 80275b4:	f04f 0c0a 	mov.w	ip, #10
 80275b8:	4621      	mov	r1, r4
 80275ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80275be:	3b30      	subs	r3, #48	; 0x30
 80275c0:	2b09      	cmp	r3, #9
 80275c2:	d94e      	bls.n	8027662 <_svfiprintf_r+0x17e>
 80275c4:	b1b0      	cbz	r0, 80275f4 <_svfiprintf_r+0x110>
 80275c6:	9207      	str	r2, [sp, #28]
 80275c8:	e014      	b.n	80275f4 <_svfiprintf_r+0x110>
 80275ca:	eba0 0308 	sub.w	r3, r0, r8
 80275ce:	fa09 f303 	lsl.w	r3, r9, r3
 80275d2:	4313      	orrs	r3, r2
 80275d4:	9304      	str	r3, [sp, #16]
 80275d6:	46a2      	mov	sl, r4
 80275d8:	e7d2      	b.n	8027580 <_svfiprintf_r+0x9c>
 80275da:	9b03      	ldr	r3, [sp, #12]
 80275dc:	1d19      	adds	r1, r3, #4
 80275de:	681b      	ldr	r3, [r3, #0]
 80275e0:	9103      	str	r1, [sp, #12]
 80275e2:	2b00      	cmp	r3, #0
 80275e4:	bfbb      	ittet	lt
 80275e6:	425b      	neglt	r3, r3
 80275e8:	f042 0202 	orrlt.w	r2, r2, #2
 80275ec:	9307      	strge	r3, [sp, #28]
 80275ee:	9307      	strlt	r3, [sp, #28]
 80275f0:	bfb8      	it	lt
 80275f2:	9204      	strlt	r2, [sp, #16]
 80275f4:	7823      	ldrb	r3, [r4, #0]
 80275f6:	2b2e      	cmp	r3, #46	; 0x2e
 80275f8:	d10c      	bne.n	8027614 <_svfiprintf_r+0x130>
 80275fa:	7863      	ldrb	r3, [r4, #1]
 80275fc:	2b2a      	cmp	r3, #42	; 0x2a
 80275fe:	d135      	bne.n	802766c <_svfiprintf_r+0x188>
 8027600:	9b03      	ldr	r3, [sp, #12]
 8027602:	1d1a      	adds	r2, r3, #4
 8027604:	681b      	ldr	r3, [r3, #0]
 8027606:	9203      	str	r2, [sp, #12]
 8027608:	2b00      	cmp	r3, #0
 802760a:	bfb8      	it	lt
 802760c:	f04f 33ff 	movlt.w	r3, #4294967295
 8027610:	3402      	adds	r4, #2
 8027612:	9305      	str	r3, [sp, #20]
 8027614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80276e0 <_svfiprintf_r+0x1fc>
 8027618:	7821      	ldrb	r1, [r4, #0]
 802761a:	2203      	movs	r2, #3
 802761c:	4650      	mov	r0, sl
 802761e:	f7d8 fe27 	bl	8000270 <memchr>
 8027622:	b140      	cbz	r0, 8027636 <_svfiprintf_r+0x152>
 8027624:	2340      	movs	r3, #64	; 0x40
 8027626:	eba0 000a 	sub.w	r0, r0, sl
 802762a:	fa03 f000 	lsl.w	r0, r3, r0
 802762e:	9b04      	ldr	r3, [sp, #16]
 8027630:	4303      	orrs	r3, r0
 8027632:	3401      	adds	r4, #1
 8027634:	9304      	str	r3, [sp, #16]
 8027636:	f814 1b01 	ldrb.w	r1, [r4], #1
 802763a:	4826      	ldr	r0, [pc, #152]	; (80276d4 <_svfiprintf_r+0x1f0>)
 802763c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027640:	2206      	movs	r2, #6
 8027642:	f7d8 fe15 	bl	8000270 <memchr>
 8027646:	2800      	cmp	r0, #0
 8027648:	d038      	beq.n	80276bc <_svfiprintf_r+0x1d8>
 802764a:	4b23      	ldr	r3, [pc, #140]	; (80276d8 <_svfiprintf_r+0x1f4>)
 802764c:	bb1b      	cbnz	r3, 8027696 <_svfiprintf_r+0x1b2>
 802764e:	9b03      	ldr	r3, [sp, #12]
 8027650:	3307      	adds	r3, #7
 8027652:	f023 0307 	bic.w	r3, r3, #7
 8027656:	3308      	adds	r3, #8
 8027658:	9303      	str	r3, [sp, #12]
 802765a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802765c:	4433      	add	r3, r6
 802765e:	9309      	str	r3, [sp, #36]	; 0x24
 8027660:	e767      	b.n	8027532 <_svfiprintf_r+0x4e>
 8027662:	fb0c 3202 	mla	r2, ip, r2, r3
 8027666:	460c      	mov	r4, r1
 8027668:	2001      	movs	r0, #1
 802766a:	e7a5      	b.n	80275b8 <_svfiprintf_r+0xd4>
 802766c:	2300      	movs	r3, #0
 802766e:	3401      	adds	r4, #1
 8027670:	9305      	str	r3, [sp, #20]
 8027672:	4619      	mov	r1, r3
 8027674:	f04f 0c0a 	mov.w	ip, #10
 8027678:	4620      	mov	r0, r4
 802767a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802767e:	3a30      	subs	r2, #48	; 0x30
 8027680:	2a09      	cmp	r2, #9
 8027682:	d903      	bls.n	802768c <_svfiprintf_r+0x1a8>
 8027684:	2b00      	cmp	r3, #0
 8027686:	d0c5      	beq.n	8027614 <_svfiprintf_r+0x130>
 8027688:	9105      	str	r1, [sp, #20]
 802768a:	e7c3      	b.n	8027614 <_svfiprintf_r+0x130>
 802768c:	fb0c 2101 	mla	r1, ip, r1, r2
 8027690:	4604      	mov	r4, r0
 8027692:	2301      	movs	r3, #1
 8027694:	e7f0      	b.n	8027678 <_svfiprintf_r+0x194>
 8027696:	ab03      	add	r3, sp, #12
 8027698:	9300      	str	r3, [sp, #0]
 802769a:	462a      	mov	r2, r5
 802769c:	4b0f      	ldr	r3, [pc, #60]	; (80276dc <_svfiprintf_r+0x1f8>)
 802769e:	a904      	add	r1, sp, #16
 80276a0:	4638      	mov	r0, r7
 80276a2:	f3af 8000 	nop.w
 80276a6:	1c42      	adds	r2, r0, #1
 80276a8:	4606      	mov	r6, r0
 80276aa:	d1d6      	bne.n	802765a <_svfiprintf_r+0x176>
 80276ac:	89ab      	ldrh	r3, [r5, #12]
 80276ae:	065b      	lsls	r3, r3, #25
 80276b0:	f53f af2c 	bmi.w	802750c <_svfiprintf_r+0x28>
 80276b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80276b6:	b01d      	add	sp, #116	; 0x74
 80276b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276bc:	ab03      	add	r3, sp, #12
 80276be:	9300      	str	r3, [sp, #0]
 80276c0:	462a      	mov	r2, r5
 80276c2:	4b06      	ldr	r3, [pc, #24]	; (80276dc <_svfiprintf_r+0x1f8>)
 80276c4:	a904      	add	r1, sp, #16
 80276c6:	4638      	mov	r0, r7
 80276c8:	f000 f9d4 	bl	8027a74 <_printf_i>
 80276cc:	e7eb      	b.n	80276a6 <_svfiprintf_r+0x1c2>
 80276ce:	bf00      	nop
 80276d0:	0802df10 	.word	0x0802df10
 80276d4:	0802df1a 	.word	0x0802df1a
 80276d8:	00000000 	.word	0x00000000
 80276dc:	0802742d 	.word	0x0802742d
 80276e0:	0802df16 	.word	0x0802df16

080276e4 <__sfputc_r>:
 80276e4:	6893      	ldr	r3, [r2, #8]
 80276e6:	3b01      	subs	r3, #1
 80276e8:	2b00      	cmp	r3, #0
 80276ea:	b410      	push	{r4}
 80276ec:	6093      	str	r3, [r2, #8]
 80276ee:	da08      	bge.n	8027702 <__sfputc_r+0x1e>
 80276f0:	6994      	ldr	r4, [r2, #24]
 80276f2:	42a3      	cmp	r3, r4
 80276f4:	db01      	blt.n	80276fa <__sfputc_r+0x16>
 80276f6:	290a      	cmp	r1, #10
 80276f8:	d103      	bne.n	8027702 <__sfputc_r+0x1e>
 80276fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80276fe:	f7ff bb79 	b.w	8026df4 <__swbuf_r>
 8027702:	6813      	ldr	r3, [r2, #0]
 8027704:	1c58      	adds	r0, r3, #1
 8027706:	6010      	str	r0, [r2, #0]
 8027708:	7019      	strb	r1, [r3, #0]
 802770a:	4608      	mov	r0, r1
 802770c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027710:	4770      	bx	lr

08027712 <__sfputs_r>:
 8027712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027714:	4606      	mov	r6, r0
 8027716:	460f      	mov	r7, r1
 8027718:	4614      	mov	r4, r2
 802771a:	18d5      	adds	r5, r2, r3
 802771c:	42ac      	cmp	r4, r5
 802771e:	d101      	bne.n	8027724 <__sfputs_r+0x12>
 8027720:	2000      	movs	r0, #0
 8027722:	e007      	b.n	8027734 <__sfputs_r+0x22>
 8027724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027728:	463a      	mov	r2, r7
 802772a:	4630      	mov	r0, r6
 802772c:	f7ff ffda 	bl	80276e4 <__sfputc_r>
 8027730:	1c43      	adds	r3, r0, #1
 8027732:	d1f3      	bne.n	802771c <__sfputs_r+0xa>
 8027734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027738 <_vfiprintf_r>:
 8027738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802773c:	460d      	mov	r5, r1
 802773e:	b09d      	sub	sp, #116	; 0x74
 8027740:	4614      	mov	r4, r2
 8027742:	4698      	mov	r8, r3
 8027744:	4606      	mov	r6, r0
 8027746:	b118      	cbz	r0, 8027750 <_vfiprintf_r+0x18>
 8027748:	6983      	ldr	r3, [r0, #24]
 802774a:	b90b      	cbnz	r3, 8027750 <_vfiprintf_r+0x18>
 802774c:	f7ff fd4a 	bl	80271e4 <__sinit>
 8027750:	4b89      	ldr	r3, [pc, #548]	; (8027978 <_vfiprintf_r+0x240>)
 8027752:	429d      	cmp	r5, r3
 8027754:	d11b      	bne.n	802778e <_vfiprintf_r+0x56>
 8027756:	6875      	ldr	r5, [r6, #4]
 8027758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802775a:	07d9      	lsls	r1, r3, #31
 802775c:	d405      	bmi.n	802776a <_vfiprintf_r+0x32>
 802775e:	89ab      	ldrh	r3, [r5, #12]
 8027760:	059a      	lsls	r2, r3, #22
 8027762:	d402      	bmi.n	802776a <_vfiprintf_r+0x32>
 8027764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027766:	f7ff fded 	bl	8027344 <__retarget_lock_acquire_recursive>
 802776a:	89ab      	ldrh	r3, [r5, #12]
 802776c:	071b      	lsls	r3, r3, #28
 802776e:	d501      	bpl.n	8027774 <_vfiprintf_r+0x3c>
 8027770:	692b      	ldr	r3, [r5, #16]
 8027772:	b9eb      	cbnz	r3, 80277b0 <_vfiprintf_r+0x78>
 8027774:	4629      	mov	r1, r5
 8027776:	4630      	mov	r0, r6
 8027778:	f7ff fb8e 	bl	8026e98 <__swsetup_r>
 802777c:	b1c0      	cbz	r0, 80277b0 <_vfiprintf_r+0x78>
 802777e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027780:	07dc      	lsls	r4, r3, #31
 8027782:	d50e      	bpl.n	80277a2 <_vfiprintf_r+0x6a>
 8027784:	f04f 30ff 	mov.w	r0, #4294967295
 8027788:	b01d      	add	sp, #116	; 0x74
 802778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802778e:	4b7b      	ldr	r3, [pc, #492]	; (802797c <_vfiprintf_r+0x244>)
 8027790:	429d      	cmp	r5, r3
 8027792:	d101      	bne.n	8027798 <_vfiprintf_r+0x60>
 8027794:	68b5      	ldr	r5, [r6, #8]
 8027796:	e7df      	b.n	8027758 <_vfiprintf_r+0x20>
 8027798:	4b79      	ldr	r3, [pc, #484]	; (8027980 <_vfiprintf_r+0x248>)
 802779a:	429d      	cmp	r5, r3
 802779c:	bf08      	it	eq
 802779e:	68f5      	ldreq	r5, [r6, #12]
 80277a0:	e7da      	b.n	8027758 <_vfiprintf_r+0x20>
 80277a2:	89ab      	ldrh	r3, [r5, #12]
 80277a4:	0598      	lsls	r0, r3, #22
 80277a6:	d4ed      	bmi.n	8027784 <_vfiprintf_r+0x4c>
 80277a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80277aa:	f7ff fdcc 	bl	8027346 <__retarget_lock_release_recursive>
 80277ae:	e7e9      	b.n	8027784 <_vfiprintf_r+0x4c>
 80277b0:	2300      	movs	r3, #0
 80277b2:	9309      	str	r3, [sp, #36]	; 0x24
 80277b4:	2320      	movs	r3, #32
 80277b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80277ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80277be:	2330      	movs	r3, #48	; 0x30
 80277c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027984 <_vfiprintf_r+0x24c>
 80277c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80277c8:	f04f 0901 	mov.w	r9, #1
 80277cc:	4623      	mov	r3, r4
 80277ce:	469a      	mov	sl, r3
 80277d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80277d4:	b10a      	cbz	r2, 80277da <_vfiprintf_r+0xa2>
 80277d6:	2a25      	cmp	r2, #37	; 0x25
 80277d8:	d1f9      	bne.n	80277ce <_vfiprintf_r+0x96>
 80277da:	ebba 0b04 	subs.w	fp, sl, r4
 80277de:	d00b      	beq.n	80277f8 <_vfiprintf_r+0xc0>
 80277e0:	465b      	mov	r3, fp
 80277e2:	4622      	mov	r2, r4
 80277e4:	4629      	mov	r1, r5
 80277e6:	4630      	mov	r0, r6
 80277e8:	f7ff ff93 	bl	8027712 <__sfputs_r>
 80277ec:	3001      	adds	r0, #1
 80277ee:	f000 80aa 	beq.w	8027946 <_vfiprintf_r+0x20e>
 80277f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80277f4:	445a      	add	r2, fp
 80277f6:	9209      	str	r2, [sp, #36]	; 0x24
 80277f8:	f89a 3000 	ldrb.w	r3, [sl]
 80277fc:	2b00      	cmp	r3, #0
 80277fe:	f000 80a2 	beq.w	8027946 <_vfiprintf_r+0x20e>
 8027802:	2300      	movs	r3, #0
 8027804:	f04f 32ff 	mov.w	r2, #4294967295
 8027808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802780c:	f10a 0a01 	add.w	sl, sl, #1
 8027810:	9304      	str	r3, [sp, #16]
 8027812:	9307      	str	r3, [sp, #28]
 8027814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027818:	931a      	str	r3, [sp, #104]	; 0x68
 802781a:	4654      	mov	r4, sl
 802781c:	2205      	movs	r2, #5
 802781e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027822:	4858      	ldr	r0, [pc, #352]	; (8027984 <_vfiprintf_r+0x24c>)
 8027824:	f7d8 fd24 	bl	8000270 <memchr>
 8027828:	9a04      	ldr	r2, [sp, #16]
 802782a:	b9d8      	cbnz	r0, 8027864 <_vfiprintf_r+0x12c>
 802782c:	06d1      	lsls	r1, r2, #27
 802782e:	bf44      	itt	mi
 8027830:	2320      	movmi	r3, #32
 8027832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027836:	0713      	lsls	r3, r2, #28
 8027838:	bf44      	itt	mi
 802783a:	232b      	movmi	r3, #43	; 0x2b
 802783c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027840:	f89a 3000 	ldrb.w	r3, [sl]
 8027844:	2b2a      	cmp	r3, #42	; 0x2a
 8027846:	d015      	beq.n	8027874 <_vfiprintf_r+0x13c>
 8027848:	9a07      	ldr	r2, [sp, #28]
 802784a:	4654      	mov	r4, sl
 802784c:	2000      	movs	r0, #0
 802784e:	f04f 0c0a 	mov.w	ip, #10
 8027852:	4621      	mov	r1, r4
 8027854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027858:	3b30      	subs	r3, #48	; 0x30
 802785a:	2b09      	cmp	r3, #9
 802785c:	d94e      	bls.n	80278fc <_vfiprintf_r+0x1c4>
 802785e:	b1b0      	cbz	r0, 802788e <_vfiprintf_r+0x156>
 8027860:	9207      	str	r2, [sp, #28]
 8027862:	e014      	b.n	802788e <_vfiprintf_r+0x156>
 8027864:	eba0 0308 	sub.w	r3, r0, r8
 8027868:	fa09 f303 	lsl.w	r3, r9, r3
 802786c:	4313      	orrs	r3, r2
 802786e:	9304      	str	r3, [sp, #16]
 8027870:	46a2      	mov	sl, r4
 8027872:	e7d2      	b.n	802781a <_vfiprintf_r+0xe2>
 8027874:	9b03      	ldr	r3, [sp, #12]
 8027876:	1d19      	adds	r1, r3, #4
 8027878:	681b      	ldr	r3, [r3, #0]
 802787a:	9103      	str	r1, [sp, #12]
 802787c:	2b00      	cmp	r3, #0
 802787e:	bfbb      	ittet	lt
 8027880:	425b      	neglt	r3, r3
 8027882:	f042 0202 	orrlt.w	r2, r2, #2
 8027886:	9307      	strge	r3, [sp, #28]
 8027888:	9307      	strlt	r3, [sp, #28]
 802788a:	bfb8      	it	lt
 802788c:	9204      	strlt	r2, [sp, #16]
 802788e:	7823      	ldrb	r3, [r4, #0]
 8027890:	2b2e      	cmp	r3, #46	; 0x2e
 8027892:	d10c      	bne.n	80278ae <_vfiprintf_r+0x176>
 8027894:	7863      	ldrb	r3, [r4, #1]
 8027896:	2b2a      	cmp	r3, #42	; 0x2a
 8027898:	d135      	bne.n	8027906 <_vfiprintf_r+0x1ce>
 802789a:	9b03      	ldr	r3, [sp, #12]
 802789c:	1d1a      	adds	r2, r3, #4
 802789e:	681b      	ldr	r3, [r3, #0]
 80278a0:	9203      	str	r2, [sp, #12]
 80278a2:	2b00      	cmp	r3, #0
 80278a4:	bfb8      	it	lt
 80278a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80278aa:	3402      	adds	r4, #2
 80278ac:	9305      	str	r3, [sp, #20]
 80278ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027994 <_vfiprintf_r+0x25c>
 80278b2:	7821      	ldrb	r1, [r4, #0]
 80278b4:	2203      	movs	r2, #3
 80278b6:	4650      	mov	r0, sl
 80278b8:	f7d8 fcda 	bl	8000270 <memchr>
 80278bc:	b140      	cbz	r0, 80278d0 <_vfiprintf_r+0x198>
 80278be:	2340      	movs	r3, #64	; 0x40
 80278c0:	eba0 000a 	sub.w	r0, r0, sl
 80278c4:	fa03 f000 	lsl.w	r0, r3, r0
 80278c8:	9b04      	ldr	r3, [sp, #16]
 80278ca:	4303      	orrs	r3, r0
 80278cc:	3401      	adds	r4, #1
 80278ce:	9304      	str	r3, [sp, #16]
 80278d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80278d4:	482c      	ldr	r0, [pc, #176]	; (8027988 <_vfiprintf_r+0x250>)
 80278d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80278da:	2206      	movs	r2, #6
 80278dc:	f7d8 fcc8 	bl	8000270 <memchr>
 80278e0:	2800      	cmp	r0, #0
 80278e2:	d03f      	beq.n	8027964 <_vfiprintf_r+0x22c>
 80278e4:	4b29      	ldr	r3, [pc, #164]	; (802798c <_vfiprintf_r+0x254>)
 80278e6:	bb1b      	cbnz	r3, 8027930 <_vfiprintf_r+0x1f8>
 80278e8:	9b03      	ldr	r3, [sp, #12]
 80278ea:	3307      	adds	r3, #7
 80278ec:	f023 0307 	bic.w	r3, r3, #7
 80278f0:	3308      	adds	r3, #8
 80278f2:	9303      	str	r3, [sp, #12]
 80278f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80278f6:	443b      	add	r3, r7
 80278f8:	9309      	str	r3, [sp, #36]	; 0x24
 80278fa:	e767      	b.n	80277cc <_vfiprintf_r+0x94>
 80278fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8027900:	460c      	mov	r4, r1
 8027902:	2001      	movs	r0, #1
 8027904:	e7a5      	b.n	8027852 <_vfiprintf_r+0x11a>
 8027906:	2300      	movs	r3, #0
 8027908:	3401      	adds	r4, #1
 802790a:	9305      	str	r3, [sp, #20]
 802790c:	4619      	mov	r1, r3
 802790e:	f04f 0c0a 	mov.w	ip, #10
 8027912:	4620      	mov	r0, r4
 8027914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027918:	3a30      	subs	r2, #48	; 0x30
 802791a:	2a09      	cmp	r2, #9
 802791c:	d903      	bls.n	8027926 <_vfiprintf_r+0x1ee>
 802791e:	2b00      	cmp	r3, #0
 8027920:	d0c5      	beq.n	80278ae <_vfiprintf_r+0x176>
 8027922:	9105      	str	r1, [sp, #20]
 8027924:	e7c3      	b.n	80278ae <_vfiprintf_r+0x176>
 8027926:	fb0c 2101 	mla	r1, ip, r1, r2
 802792a:	4604      	mov	r4, r0
 802792c:	2301      	movs	r3, #1
 802792e:	e7f0      	b.n	8027912 <_vfiprintf_r+0x1da>
 8027930:	ab03      	add	r3, sp, #12
 8027932:	9300      	str	r3, [sp, #0]
 8027934:	462a      	mov	r2, r5
 8027936:	4b16      	ldr	r3, [pc, #88]	; (8027990 <_vfiprintf_r+0x258>)
 8027938:	a904      	add	r1, sp, #16
 802793a:	4630      	mov	r0, r6
 802793c:	f3af 8000 	nop.w
 8027940:	4607      	mov	r7, r0
 8027942:	1c78      	adds	r0, r7, #1
 8027944:	d1d6      	bne.n	80278f4 <_vfiprintf_r+0x1bc>
 8027946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027948:	07d9      	lsls	r1, r3, #31
 802794a:	d405      	bmi.n	8027958 <_vfiprintf_r+0x220>
 802794c:	89ab      	ldrh	r3, [r5, #12]
 802794e:	059a      	lsls	r2, r3, #22
 8027950:	d402      	bmi.n	8027958 <_vfiprintf_r+0x220>
 8027952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027954:	f7ff fcf7 	bl	8027346 <__retarget_lock_release_recursive>
 8027958:	89ab      	ldrh	r3, [r5, #12]
 802795a:	065b      	lsls	r3, r3, #25
 802795c:	f53f af12 	bmi.w	8027784 <_vfiprintf_r+0x4c>
 8027960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027962:	e711      	b.n	8027788 <_vfiprintf_r+0x50>
 8027964:	ab03      	add	r3, sp, #12
 8027966:	9300      	str	r3, [sp, #0]
 8027968:	462a      	mov	r2, r5
 802796a:	4b09      	ldr	r3, [pc, #36]	; (8027990 <_vfiprintf_r+0x258>)
 802796c:	a904      	add	r1, sp, #16
 802796e:	4630      	mov	r0, r6
 8027970:	f000 f880 	bl	8027a74 <_printf_i>
 8027974:	e7e4      	b.n	8027940 <_vfiprintf_r+0x208>
 8027976:	bf00      	nop
 8027978:	0802ded0 	.word	0x0802ded0
 802797c:	0802def0 	.word	0x0802def0
 8027980:	0802deb0 	.word	0x0802deb0
 8027984:	0802df10 	.word	0x0802df10
 8027988:	0802df1a 	.word	0x0802df1a
 802798c:	00000000 	.word	0x00000000
 8027990:	08027713 	.word	0x08027713
 8027994:	0802df16 	.word	0x0802df16

08027998 <_printf_common>:
 8027998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802799c:	4616      	mov	r6, r2
 802799e:	4699      	mov	r9, r3
 80279a0:	688a      	ldr	r2, [r1, #8]
 80279a2:	690b      	ldr	r3, [r1, #16]
 80279a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80279a8:	4293      	cmp	r3, r2
 80279aa:	bfb8      	it	lt
 80279ac:	4613      	movlt	r3, r2
 80279ae:	6033      	str	r3, [r6, #0]
 80279b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80279b4:	4607      	mov	r7, r0
 80279b6:	460c      	mov	r4, r1
 80279b8:	b10a      	cbz	r2, 80279be <_printf_common+0x26>
 80279ba:	3301      	adds	r3, #1
 80279bc:	6033      	str	r3, [r6, #0]
 80279be:	6823      	ldr	r3, [r4, #0]
 80279c0:	0699      	lsls	r1, r3, #26
 80279c2:	bf42      	ittt	mi
 80279c4:	6833      	ldrmi	r3, [r6, #0]
 80279c6:	3302      	addmi	r3, #2
 80279c8:	6033      	strmi	r3, [r6, #0]
 80279ca:	6825      	ldr	r5, [r4, #0]
 80279cc:	f015 0506 	ands.w	r5, r5, #6
 80279d0:	d106      	bne.n	80279e0 <_printf_common+0x48>
 80279d2:	f104 0a19 	add.w	sl, r4, #25
 80279d6:	68e3      	ldr	r3, [r4, #12]
 80279d8:	6832      	ldr	r2, [r6, #0]
 80279da:	1a9b      	subs	r3, r3, r2
 80279dc:	42ab      	cmp	r3, r5
 80279de:	dc26      	bgt.n	8027a2e <_printf_common+0x96>
 80279e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80279e4:	1e13      	subs	r3, r2, #0
 80279e6:	6822      	ldr	r2, [r4, #0]
 80279e8:	bf18      	it	ne
 80279ea:	2301      	movne	r3, #1
 80279ec:	0692      	lsls	r2, r2, #26
 80279ee:	d42b      	bmi.n	8027a48 <_printf_common+0xb0>
 80279f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80279f4:	4649      	mov	r1, r9
 80279f6:	4638      	mov	r0, r7
 80279f8:	47c0      	blx	r8
 80279fa:	3001      	adds	r0, #1
 80279fc:	d01e      	beq.n	8027a3c <_printf_common+0xa4>
 80279fe:	6823      	ldr	r3, [r4, #0]
 8027a00:	68e5      	ldr	r5, [r4, #12]
 8027a02:	6832      	ldr	r2, [r6, #0]
 8027a04:	f003 0306 	and.w	r3, r3, #6
 8027a08:	2b04      	cmp	r3, #4
 8027a0a:	bf08      	it	eq
 8027a0c:	1aad      	subeq	r5, r5, r2
 8027a0e:	68a3      	ldr	r3, [r4, #8]
 8027a10:	6922      	ldr	r2, [r4, #16]
 8027a12:	bf0c      	ite	eq
 8027a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027a18:	2500      	movne	r5, #0
 8027a1a:	4293      	cmp	r3, r2
 8027a1c:	bfc4      	itt	gt
 8027a1e:	1a9b      	subgt	r3, r3, r2
 8027a20:	18ed      	addgt	r5, r5, r3
 8027a22:	2600      	movs	r6, #0
 8027a24:	341a      	adds	r4, #26
 8027a26:	42b5      	cmp	r5, r6
 8027a28:	d11a      	bne.n	8027a60 <_printf_common+0xc8>
 8027a2a:	2000      	movs	r0, #0
 8027a2c:	e008      	b.n	8027a40 <_printf_common+0xa8>
 8027a2e:	2301      	movs	r3, #1
 8027a30:	4652      	mov	r2, sl
 8027a32:	4649      	mov	r1, r9
 8027a34:	4638      	mov	r0, r7
 8027a36:	47c0      	blx	r8
 8027a38:	3001      	adds	r0, #1
 8027a3a:	d103      	bne.n	8027a44 <_printf_common+0xac>
 8027a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8027a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027a44:	3501      	adds	r5, #1
 8027a46:	e7c6      	b.n	80279d6 <_printf_common+0x3e>
 8027a48:	18e1      	adds	r1, r4, r3
 8027a4a:	1c5a      	adds	r2, r3, #1
 8027a4c:	2030      	movs	r0, #48	; 0x30
 8027a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027a52:	4422      	add	r2, r4
 8027a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027a5c:	3302      	adds	r3, #2
 8027a5e:	e7c7      	b.n	80279f0 <_printf_common+0x58>
 8027a60:	2301      	movs	r3, #1
 8027a62:	4622      	mov	r2, r4
 8027a64:	4649      	mov	r1, r9
 8027a66:	4638      	mov	r0, r7
 8027a68:	47c0      	blx	r8
 8027a6a:	3001      	adds	r0, #1
 8027a6c:	d0e6      	beq.n	8027a3c <_printf_common+0xa4>
 8027a6e:	3601      	adds	r6, #1
 8027a70:	e7d9      	b.n	8027a26 <_printf_common+0x8e>
	...

08027a74 <_printf_i>:
 8027a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027a78:	7e0f      	ldrb	r7, [r1, #24]
 8027a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027a7c:	2f78      	cmp	r7, #120	; 0x78
 8027a7e:	4691      	mov	r9, r2
 8027a80:	4680      	mov	r8, r0
 8027a82:	460c      	mov	r4, r1
 8027a84:	469a      	mov	sl, r3
 8027a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8027a8a:	d807      	bhi.n	8027a9c <_printf_i+0x28>
 8027a8c:	2f62      	cmp	r7, #98	; 0x62
 8027a8e:	d80a      	bhi.n	8027aa6 <_printf_i+0x32>
 8027a90:	2f00      	cmp	r7, #0
 8027a92:	f000 80d8 	beq.w	8027c46 <_printf_i+0x1d2>
 8027a96:	2f58      	cmp	r7, #88	; 0x58
 8027a98:	f000 80a3 	beq.w	8027be2 <_printf_i+0x16e>
 8027a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027aa4:	e03a      	b.n	8027b1c <_printf_i+0xa8>
 8027aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027aaa:	2b15      	cmp	r3, #21
 8027aac:	d8f6      	bhi.n	8027a9c <_printf_i+0x28>
 8027aae:	a101      	add	r1, pc, #4	; (adr r1, 8027ab4 <_printf_i+0x40>)
 8027ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027ab4:	08027b0d 	.word	0x08027b0d
 8027ab8:	08027b21 	.word	0x08027b21
 8027abc:	08027a9d 	.word	0x08027a9d
 8027ac0:	08027a9d 	.word	0x08027a9d
 8027ac4:	08027a9d 	.word	0x08027a9d
 8027ac8:	08027a9d 	.word	0x08027a9d
 8027acc:	08027b21 	.word	0x08027b21
 8027ad0:	08027a9d 	.word	0x08027a9d
 8027ad4:	08027a9d 	.word	0x08027a9d
 8027ad8:	08027a9d 	.word	0x08027a9d
 8027adc:	08027a9d 	.word	0x08027a9d
 8027ae0:	08027c2d 	.word	0x08027c2d
 8027ae4:	08027b51 	.word	0x08027b51
 8027ae8:	08027c0f 	.word	0x08027c0f
 8027aec:	08027a9d 	.word	0x08027a9d
 8027af0:	08027a9d 	.word	0x08027a9d
 8027af4:	08027c4f 	.word	0x08027c4f
 8027af8:	08027a9d 	.word	0x08027a9d
 8027afc:	08027b51 	.word	0x08027b51
 8027b00:	08027a9d 	.word	0x08027a9d
 8027b04:	08027a9d 	.word	0x08027a9d
 8027b08:	08027c17 	.word	0x08027c17
 8027b0c:	682b      	ldr	r3, [r5, #0]
 8027b0e:	1d1a      	adds	r2, r3, #4
 8027b10:	681b      	ldr	r3, [r3, #0]
 8027b12:	602a      	str	r2, [r5, #0]
 8027b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027b1c:	2301      	movs	r3, #1
 8027b1e:	e0a3      	b.n	8027c68 <_printf_i+0x1f4>
 8027b20:	6820      	ldr	r0, [r4, #0]
 8027b22:	6829      	ldr	r1, [r5, #0]
 8027b24:	0606      	lsls	r6, r0, #24
 8027b26:	f101 0304 	add.w	r3, r1, #4
 8027b2a:	d50a      	bpl.n	8027b42 <_printf_i+0xce>
 8027b2c:	680e      	ldr	r6, [r1, #0]
 8027b2e:	602b      	str	r3, [r5, #0]
 8027b30:	2e00      	cmp	r6, #0
 8027b32:	da03      	bge.n	8027b3c <_printf_i+0xc8>
 8027b34:	232d      	movs	r3, #45	; 0x2d
 8027b36:	4276      	negs	r6, r6
 8027b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027b3c:	485e      	ldr	r0, [pc, #376]	; (8027cb8 <_printf_i+0x244>)
 8027b3e:	230a      	movs	r3, #10
 8027b40:	e019      	b.n	8027b76 <_printf_i+0x102>
 8027b42:	680e      	ldr	r6, [r1, #0]
 8027b44:	602b      	str	r3, [r5, #0]
 8027b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8027b4a:	bf18      	it	ne
 8027b4c:	b236      	sxthne	r6, r6
 8027b4e:	e7ef      	b.n	8027b30 <_printf_i+0xbc>
 8027b50:	682b      	ldr	r3, [r5, #0]
 8027b52:	6820      	ldr	r0, [r4, #0]
 8027b54:	1d19      	adds	r1, r3, #4
 8027b56:	6029      	str	r1, [r5, #0]
 8027b58:	0601      	lsls	r1, r0, #24
 8027b5a:	d501      	bpl.n	8027b60 <_printf_i+0xec>
 8027b5c:	681e      	ldr	r6, [r3, #0]
 8027b5e:	e002      	b.n	8027b66 <_printf_i+0xf2>
 8027b60:	0646      	lsls	r6, r0, #25
 8027b62:	d5fb      	bpl.n	8027b5c <_printf_i+0xe8>
 8027b64:	881e      	ldrh	r6, [r3, #0]
 8027b66:	4854      	ldr	r0, [pc, #336]	; (8027cb8 <_printf_i+0x244>)
 8027b68:	2f6f      	cmp	r7, #111	; 0x6f
 8027b6a:	bf0c      	ite	eq
 8027b6c:	2308      	moveq	r3, #8
 8027b6e:	230a      	movne	r3, #10
 8027b70:	2100      	movs	r1, #0
 8027b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027b76:	6865      	ldr	r5, [r4, #4]
 8027b78:	60a5      	str	r5, [r4, #8]
 8027b7a:	2d00      	cmp	r5, #0
 8027b7c:	bfa2      	ittt	ge
 8027b7e:	6821      	ldrge	r1, [r4, #0]
 8027b80:	f021 0104 	bicge.w	r1, r1, #4
 8027b84:	6021      	strge	r1, [r4, #0]
 8027b86:	b90e      	cbnz	r6, 8027b8c <_printf_i+0x118>
 8027b88:	2d00      	cmp	r5, #0
 8027b8a:	d04d      	beq.n	8027c28 <_printf_i+0x1b4>
 8027b8c:	4615      	mov	r5, r2
 8027b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8027b92:	fb03 6711 	mls	r7, r3, r1, r6
 8027b96:	5dc7      	ldrb	r7, [r0, r7]
 8027b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027b9c:	4637      	mov	r7, r6
 8027b9e:	42bb      	cmp	r3, r7
 8027ba0:	460e      	mov	r6, r1
 8027ba2:	d9f4      	bls.n	8027b8e <_printf_i+0x11a>
 8027ba4:	2b08      	cmp	r3, #8
 8027ba6:	d10b      	bne.n	8027bc0 <_printf_i+0x14c>
 8027ba8:	6823      	ldr	r3, [r4, #0]
 8027baa:	07de      	lsls	r6, r3, #31
 8027bac:	d508      	bpl.n	8027bc0 <_printf_i+0x14c>
 8027bae:	6923      	ldr	r3, [r4, #16]
 8027bb0:	6861      	ldr	r1, [r4, #4]
 8027bb2:	4299      	cmp	r1, r3
 8027bb4:	bfde      	ittt	le
 8027bb6:	2330      	movle	r3, #48	; 0x30
 8027bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8027bc0:	1b52      	subs	r2, r2, r5
 8027bc2:	6122      	str	r2, [r4, #16]
 8027bc4:	f8cd a000 	str.w	sl, [sp]
 8027bc8:	464b      	mov	r3, r9
 8027bca:	aa03      	add	r2, sp, #12
 8027bcc:	4621      	mov	r1, r4
 8027bce:	4640      	mov	r0, r8
 8027bd0:	f7ff fee2 	bl	8027998 <_printf_common>
 8027bd4:	3001      	adds	r0, #1
 8027bd6:	d14c      	bne.n	8027c72 <_printf_i+0x1fe>
 8027bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8027bdc:	b004      	add	sp, #16
 8027bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027be2:	4835      	ldr	r0, [pc, #212]	; (8027cb8 <_printf_i+0x244>)
 8027be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8027be8:	6829      	ldr	r1, [r5, #0]
 8027bea:	6823      	ldr	r3, [r4, #0]
 8027bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8027bf0:	6029      	str	r1, [r5, #0]
 8027bf2:	061d      	lsls	r5, r3, #24
 8027bf4:	d514      	bpl.n	8027c20 <_printf_i+0x1ac>
 8027bf6:	07df      	lsls	r7, r3, #31
 8027bf8:	bf44      	itt	mi
 8027bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8027bfe:	6023      	strmi	r3, [r4, #0]
 8027c00:	b91e      	cbnz	r6, 8027c0a <_printf_i+0x196>
 8027c02:	6823      	ldr	r3, [r4, #0]
 8027c04:	f023 0320 	bic.w	r3, r3, #32
 8027c08:	6023      	str	r3, [r4, #0]
 8027c0a:	2310      	movs	r3, #16
 8027c0c:	e7b0      	b.n	8027b70 <_printf_i+0xfc>
 8027c0e:	6823      	ldr	r3, [r4, #0]
 8027c10:	f043 0320 	orr.w	r3, r3, #32
 8027c14:	6023      	str	r3, [r4, #0]
 8027c16:	2378      	movs	r3, #120	; 0x78
 8027c18:	4828      	ldr	r0, [pc, #160]	; (8027cbc <_printf_i+0x248>)
 8027c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8027c1e:	e7e3      	b.n	8027be8 <_printf_i+0x174>
 8027c20:	0659      	lsls	r1, r3, #25
 8027c22:	bf48      	it	mi
 8027c24:	b2b6      	uxthmi	r6, r6
 8027c26:	e7e6      	b.n	8027bf6 <_printf_i+0x182>
 8027c28:	4615      	mov	r5, r2
 8027c2a:	e7bb      	b.n	8027ba4 <_printf_i+0x130>
 8027c2c:	682b      	ldr	r3, [r5, #0]
 8027c2e:	6826      	ldr	r6, [r4, #0]
 8027c30:	6961      	ldr	r1, [r4, #20]
 8027c32:	1d18      	adds	r0, r3, #4
 8027c34:	6028      	str	r0, [r5, #0]
 8027c36:	0635      	lsls	r5, r6, #24
 8027c38:	681b      	ldr	r3, [r3, #0]
 8027c3a:	d501      	bpl.n	8027c40 <_printf_i+0x1cc>
 8027c3c:	6019      	str	r1, [r3, #0]
 8027c3e:	e002      	b.n	8027c46 <_printf_i+0x1d2>
 8027c40:	0670      	lsls	r0, r6, #25
 8027c42:	d5fb      	bpl.n	8027c3c <_printf_i+0x1c8>
 8027c44:	8019      	strh	r1, [r3, #0]
 8027c46:	2300      	movs	r3, #0
 8027c48:	6123      	str	r3, [r4, #16]
 8027c4a:	4615      	mov	r5, r2
 8027c4c:	e7ba      	b.n	8027bc4 <_printf_i+0x150>
 8027c4e:	682b      	ldr	r3, [r5, #0]
 8027c50:	1d1a      	adds	r2, r3, #4
 8027c52:	602a      	str	r2, [r5, #0]
 8027c54:	681d      	ldr	r5, [r3, #0]
 8027c56:	6862      	ldr	r2, [r4, #4]
 8027c58:	2100      	movs	r1, #0
 8027c5a:	4628      	mov	r0, r5
 8027c5c:	f7d8 fb08 	bl	8000270 <memchr>
 8027c60:	b108      	cbz	r0, 8027c66 <_printf_i+0x1f2>
 8027c62:	1b40      	subs	r0, r0, r5
 8027c64:	6060      	str	r0, [r4, #4]
 8027c66:	6863      	ldr	r3, [r4, #4]
 8027c68:	6123      	str	r3, [r4, #16]
 8027c6a:	2300      	movs	r3, #0
 8027c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027c70:	e7a8      	b.n	8027bc4 <_printf_i+0x150>
 8027c72:	6923      	ldr	r3, [r4, #16]
 8027c74:	462a      	mov	r2, r5
 8027c76:	4649      	mov	r1, r9
 8027c78:	4640      	mov	r0, r8
 8027c7a:	47d0      	blx	sl
 8027c7c:	3001      	adds	r0, #1
 8027c7e:	d0ab      	beq.n	8027bd8 <_printf_i+0x164>
 8027c80:	6823      	ldr	r3, [r4, #0]
 8027c82:	079b      	lsls	r3, r3, #30
 8027c84:	d413      	bmi.n	8027cae <_printf_i+0x23a>
 8027c86:	68e0      	ldr	r0, [r4, #12]
 8027c88:	9b03      	ldr	r3, [sp, #12]
 8027c8a:	4298      	cmp	r0, r3
 8027c8c:	bfb8      	it	lt
 8027c8e:	4618      	movlt	r0, r3
 8027c90:	e7a4      	b.n	8027bdc <_printf_i+0x168>
 8027c92:	2301      	movs	r3, #1
 8027c94:	4632      	mov	r2, r6
 8027c96:	4649      	mov	r1, r9
 8027c98:	4640      	mov	r0, r8
 8027c9a:	47d0      	blx	sl
 8027c9c:	3001      	adds	r0, #1
 8027c9e:	d09b      	beq.n	8027bd8 <_printf_i+0x164>
 8027ca0:	3501      	adds	r5, #1
 8027ca2:	68e3      	ldr	r3, [r4, #12]
 8027ca4:	9903      	ldr	r1, [sp, #12]
 8027ca6:	1a5b      	subs	r3, r3, r1
 8027ca8:	42ab      	cmp	r3, r5
 8027caa:	dcf2      	bgt.n	8027c92 <_printf_i+0x21e>
 8027cac:	e7eb      	b.n	8027c86 <_printf_i+0x212>
 8027cae:	2500      	movs	r5, #0
 8027cb0:	f104 0619 	add.w	r6, r4, #25
 8027cb4:	e7f5      	b.n	8027ca2 <_printf_i+0x22e>
 8027cb6:	bf00      	nop
 8027cb8:	0802df21 	.word	0x0802df21
 8027cbc:	0802df32 	.word	0x0802df32

08027cc0 <_putc_r>:
 8027cc0:	b570      	push	{r4, r5, r6, lr}
 8027cc2:	460d      	mov	r5, r1
 8027cc4:	4614      	mov	r4, r2
 8027cc6:	4606      	mov	r6, r0
 8027cc8:	b118      	cbz	r0, 8027cd2 <_putc_r+0x12>
 8027cca:	6983      	ldr	r3, [r0, #24]
 8027ccc:	b90b      	cbnz	r3, 8027cd2 <_putc_r+0x12>
 8027cce:	f7ff fa89 	bl	80271e4 <__sinit>
 8027cd2:	4b1c      	ldr	r3, [pc, #112]	; (8027d44 <_putc_r+0x84>)
 8027cd4:	429c      	cmp	r4, r3
 8027cd6:	d124      	bne.n	8027d22 <_putc_r+0x62>
 8027cd8:	6874      	ldr	r4, [r6, #4]
 8027cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027cdc:	07d8      	lsls	r0, r3, #31
 8027cde:	d405      	bmi.n	8027cec <_putc_r+0x2c>
 8027ce0:	89a3      	ldrh	r3, [r4, #12]
 8027ce2:	0599      	lsls	r1, r3, #22
 8027ce4:	d402      	bmi.n	8027cec <_putc_r+0x2c>
 8027ce6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027ce8:	f7ff fb2c 	bl	8027344 <__retarget_lock_acquire_recursive>
 8027cec:	68a3      	ldr	r3, [r4, #8]
 8027cee:	3b01      	subs	r3, #1
 8027cf0:	2b00      	cmp	r3, #0
 8027cf2:	60a3      	str	r3, [r4, #8]
 8027cf4:	da05      	bge.n	8027d02 <_putc_r+0x42>
 8027cf6:	69a2      	ldr	r2, [r4, #24]
 8027cf8:	4293      	cmp	r3, r2
 8027cfa:	db1c      	blt.n	8027d36 <_putc_r+0x76>
 8027cfc:	b2eb      	uxtb	r3, r5
 8027cfe:	2b0a      	cmp	r3, #10
 8027d00:	d019      	beq.n	8027d36 <_putc_r+0x76>
 8027d02:	6823      	ldr	r3, [r4, #0]
 8027d04:	1c5a      	adds	r2, r3, #1
 8027d06:	6022      	str	r2, [r4, #0]
 8027d08:	701d      	strb	r5, [r3, #0]
 8027d0a:	b2ed      	uxtb	r5, r5
 8027d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027d0e:	07da      	lsls	r2, r3, #31
 8027d10:	d405      	bmi.n	8027d1e <_putc_r+0x5e>
 8027d12:	89a3      	ldrh	r3, [r4, #12]
 8027d14:	059b      	lsls	r3, r3, #22
 8027d16:	d402      	bmi.n	8027d1e <_putc_r+0x5e>
 8027d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027d1a:	f7ff fb14 	bl	8027346 <__retarget_lock_release_recursive>
 8027d1e:	4628      	mov	r0, r5
 8027d20:	bd70      	pop	{r4, r5, r6, pc}
 8027d22:	4b09      	ldr	r3, [pc, #36]	; (8027d48 <_putc_r+0x88>)
 8027d24:	429c      	cmp	r4, r3
 8027d26:	d101      	bne.n	8027d2c <_putc_r+0x6c>
 8027d28:	68b4      	ldr	r4, [r6, #8]
 8027d2a:	e7d6      	b.n	8027cda <_putc_r+0x1a>
 8027d2c:	4b07      	ldr	r3, [pc, #28]	; (8027d4c <_putc_r+0x8c>)
 8027d2e:	429c      	cmp	r4, r3
 8027d30:	bf08      	it	eq
 8027d32:	68f4      	ldreq	r4, [r6, #12]
 8027d34:	e7d1      	b.n	8027cda <_putc_r+0x1a>
 8027d36:	4629      	mov	r1, r5
 8027d38:	4622      	mov	r2, r4
 8027d3a:	4630      	mov	r0, r6
 8027d3c:	f7ff f85a 	bl	8026df4 <__swbuf_r>
 8027d40:	4605      	mov	r5, r0
 8027d42:	e7e3      	b.n	8027d0c <_putc_r+0x4c>
 8027d44:	0802ded0 	.word	0x0802ded0
 8027d48:	0802def0 	.word	0x0802def0
 8027d4c:	0802deb0 	.word	0x0802deb0

08027d50 <__sread>:
 8027d50:	b510      	push	{r4, lr}
 8027d52:	460c      	mov	r4, r1
 8027d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027d58:	f000 f8cc 	bl	8027ef4 <_read_r>
 8027d5c:	2800      	cmp	r0, #0
 8027d5e:	bfab      	itete	ge
 8027d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027d62:	89a3      	ldrhlt	r3, [r4, #12]
 8027d64:	181b      	addge	r3, r3, r0
 8027d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027d6a:	bfac      	ite	ge
 8027d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8027d6e:	81a3      	strhlt	r3, [r4, #12]
 8027d70:	bd10      	pop	{r4, pc}

08027d72 <__swrite>:
 8027d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027d76:	461f      	mov	r7, r3
 8027d78:	898b      	ldrh	r3, [r1, #12]
 8027d7a:	05db      	lsls	r3, r3, #23
 8027d7c:	4605      	mov	r5, r0
 8027d7e:	460c      	mov	r4, r1
 8027d80:	4616      	mov	r6, r2
 8027d82:	d505      	bpl.n	8027d90 <__swrite+0x1e>
 8027d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027d88:	2302      	movs	r3, #2
 8027d8a:	2200      	movs	r2, #0
 8027d8c:	f000 f870 	bl	8027e70 <_lseek_r>
 8027d90:	89a3      	ldrh	r3, [r4, #12]
 8027d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027d9a:	81a3      	strh	r3, [r4, #12]
 8027d9c:	4632      	mov	r2, r6
 8027d9e:	463b      	mov	r3, r7
 8027da0:	4628      	mov	r0, r5
 8027da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027da6:	f000 b817 	b.w	8027dd8 <_write_r>

08027daa <__sseek>:
 8027daa:	b510      	push	{r4, lr}
 8027dac:	460c      	mov	r4, r1
 8027dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027db2:	f000 f85d 	bl	8027e70 <_lseek_r>
 8027db6:	1c43      	adds	r3, r0, #1
 8027db8:	89a3      	ldrh	r3, [r4, #12]
 8027dba:	bf15      	itete	ne
 8027dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8027dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027dc6:	81a3      	strheq	r3, [r4, #12]
 8027dc8:	bf18      	it	ne
 8027dca:	81a3      	strhne	r3, [r4, #12]
 8027dcc:	bd10      	pop	{r4, pc}

08027dce <__sclose>:
 8027dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027dd2:	f000 b81b 	b.w	8027e0c <_close_r>
	...

08027dd8 <_write_r>:
 8027dd8:	b538      	push	{r3, r4, r5, lr}
 8027dda:	4d07      	ldr	r5, [pc, #28]	; (8027df8 <_write_r+0x20>)
 8027ddc:	4604      	mov	r4, r0
 8027dde:	4608      	mov	r0, r1
 8027de0:	4611      	mov	r1, r2
 8027de2:	2200      	movs	r2, #0
 8027de4:	602a      	str	r2, [r5, #0]
 8027de6:	461a      	mov	r2, r3
 8027de8:	f7f0 ff05 	bl	8018bf6 <_write>
 8027dec:	1c43      	adds	r3, r0, #1
 8027dee:	d102      	bne.n	8027df6 <_write_r+0x1e>
 8027df0:	682b      	ldr	r3, [r5, #0]
 8027df2:	b103      	cbz	r3, 8027df6 <_write_r+0x1e>
 8027df4:	6023      	str	r3, [r4, #0]
 8027df6:	bd38      	pop	{r3, r4, r5, pc}
 8027df8:	20016310 	.word	0x20016310

08027dfc <abort>:
 8027dfc:	b508      	push	{r3, lr}
 8027dfe:	2006      	movs	r0, #6
 8027e00:	f000 f8b2 	bl	8027f68 <raise>
 8027e04:	2001      	movs	r0, #1
 8027e06:	f7f0 fecf 	bl	8018ba8 <_exit>
	...

08027e0c <_close_r>:
 8027e0c:	b538      	push	{r3, r4, r5, lr}
 8027e0e:	4d06      	ldr	r5, [pc, #24]	; (8027e28 <_close_r+0x1c>)
 8027e10:	2300      	movs	r3, #0
 8027e12:	4604      	mov	r4, r0
 8027e14:	4608      	mov	r0, r1
 8027e16:	602b      	str	r3, [r5, #0]
 8027e18:	f7f0 ff09 	bl	8018c2e <_close>
 8027e1c:	1c43      	adds	r3, r0, #1
 8027e1e:	d102      	bne.n	8027e26 <_close_r+0x1a>
 8027e20:	682b      	ldr	r3, [r5, #0]
 8027e22:	b103      	cbz	r3, 8027e26 <_close_r+0x1a>
 8027e24:	6023      	str	r3, [r4, #0]
 8027e26:	bd38      	pop	{r3, r4, r5, pc}
 8027e28:	20016310 	.word	0x20016310

08027e2c <_fstat_r>:
 8027e2c:	b538      	push	{r3, r4, r5, lr}
 8027e2e:	4d07      	ldr	r5, [pc, #28]	; (8027e4c <_fstat_r+0x20>)
 8027e30:	2300      	movs	r3, #0
 8027e32:	4604      	mov	r4, r0
 8027e34:	4608      	mov	r0, r1
 8027e36:	4611      	mov	r1, r2
 8027e38:	602b      	str	r3, [r5, #0]
 8027e3a:	f7f0 ff04 	bl	8018c46 <_fstat>
 8027e3e:	1c43      	adds	r3, r0, #1
 8027e40:	d102      	bne.n	8027e48 <_fstat_r+0x1c>
 8027e42:	682b      	ldr	r3, [r5, #0]
 8027e44:	b103      	cbz	r3, 8027e48 <_fstat_r+0x1c>
 8027e46:	6023      	str	r3, [r4, #0]
 8027e48:	bd38      	pop	{r3, r4, r5, pc}
 8027e4a:	bf00      	nop
 8027e4c:	20016310 	.word	0x20016310

08027e50 <_isatty_r>:
 8027e50:	b538      	push	{r3, r4, r5, lr}
 8027e52:	4d06      	ldr	r5, [pc, #24]	; (8027e6c <_isatty_r+0x1c>)
 8027e54:	2300      	movs	r3, #0
 8027e56:	4604      	mov	r4, r0
 8027e58:	4608      	mov	r0, r1
 8027e5a:	602b      	str	r3, [r5, #0]
 8027e5c:	f7f0 ff03 	bl	8018c66 <_isatty>
 8027e60:	1c43      	adds	r3, r0, #1
 8027e62:	d102      	bne.n	8027e6a <_isatty_r+0x1a>
 8027e64:	682b      	ldr	r3, [r5, #0]
 8027e66:	b103      	cbz	r3, 8027e6a <_isatty_r+0x1a>
 8027e68:	6023      	str	r3, [r4, #0]
 8027e6a:	bd38      	pop	{r3, r4, r5, pc}
 8027e6c:	20016310 	.word	0x20016310

08027e70 <_lseek_r>:
 8027e70:	b538      	push	{r3, r4, r5, lr}
 8027e72:	4d07      	ldr	r5, [pc, #28]	; (8027e90 <_lseek_r+0x20>)
 8027e74:	4604      	mov	r4, r0
 8027e76:	4608      	mov	r0, r1
 8027e78:	4611      	mov	r1, r2
 8027e7a:	2200      	movs	r2, #0
 8027e7c:	602a      	str	r2, [r5, #0]
 8027e7e:	461a      	mov	r2, r3
 8027e80:	f7f0 fefc 	bl	8018c7c <_lseek>
 8027e84:	1c43      	adds	r3, r0, #1
 8027e86:	d102      	bne.n	8027e8e <_lseek_r+0x1e>
 8027e88:	682b      	ldr	r3, [r5, #0]
 8027e8a:	b103      	cbz	r3, 8027e8e <_lseek_r+0x1e>
 8027e8c:	6023      	str	r3, [r4, #0]
 8027e8e:	bd38      	pop	{r3, r4, r5, pc}
 8027e90:	20016310 	.word	0x20016310

08027e94 <_realloc_r>:
 8027e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027e98:	4680      	mov	r8, r0
 8027e9a:	4614      	mov	r4, r2
 8027e9c:	460e      	mov	r6, r1
 8027e9e:	b921      	cbnz	r1, 8027eaa <_realloc_r+0x16>
 8027ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027ea4:	4611      	mov	r1, r2
 8027ea6:	f7fe bd59 	b.w	802695c <_malloc_r>
 8027eaa:	b92a      	cbnz	r2, 8027eb8 <_realloc_r+0x24>
 8027eac:	f7fe fcea 	bl	8026884 <_free_r>
 8027eb0:	4625      	mov	r5, r4
 8027eb2:	4628      	mov	r0, r5
 8027eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027eb8:	f000 f872 	bl	8027fa0 <_malloc_usable_size_r>
 8027ebc:	4284      	cmp	r4, r0
 8027ebe:	4607      	mov	r7, r0
 8027ec0:	d802      	bhi.n	8027ec8 <_realloc_r+0x34>
 8027ec2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8027ec6:	d812      	bhi.n	8027eee <_realloc_r+0x5a>
 8027ec8:	4621      	mov	r1, r4
 8027eca:	4640      	mov	r0, r8
 8027ecc:	f7fe fd46 	bl	802695c <_malloc_r>
 8027ed0:	4605      	mov	r5, r0
 8027ed2:	2800      	cmp	r0, #0
 8027ed4:	d0ed      	beq.n	8027eb2 <_realloc_r+0x1e>
 8027ed6:	42bc      	cmp	r4, r7
 8027ed8:	4622      	mov	r2, r4
 8027eda:	4631      	mov	r1, r6
 8027edc:	bf28      	it	cs
 8027ede:	463a      	movcs	r2, r7
 8027ee0:	f7fe fca0 	bl	8026824 <memcpy>
 8027ee4:	4631      	mov	r1, r6
 8027ee6:	4640      	mov	r0, r8
 8027ee8:	f7fe fccc 	bl	8026884 <_free_r>
 8027eec:	e7e1      	b.n	8027eb2 <_realloc_r+0x1e>
 8027eee:	4635      	mov	r5, r6
 8027ef0:	e7df      	b.n	8027eb2 <_realloc_r+0x1e>
	...

08027ef4 <_read_r>:
 8027ef4:	b538      	push	{r3, r4, r5, lr}
 8027ef6:	4d07      	ldr	r5, [pc, #28]	; (8027f14 <_read_r+0x20>)
 8027ef8:	4604      	mov	r4, r0
 8027efa:	4608      	mov	r0, r1
 8027efc:	4611      	mov	r1, r2
 8027efe:	2200      	movs	r2, #0
 8027f00:	602a      	str	r2, [r5, #0]
 8027f02:	461a      	mov	r2, r3
 8027f04:	f7f0 fe5a 	bl	8018bbc <_read>
 8027f08:	1c43      	adds	r3, r0, #1
 8027f0a:	d102      	bne.n	8027f12 <_read_r+0x1e>
 8027f0c:	682b      	ldr	r3, [r5, #0]
 8027f0e:	b103      	cbz	r3, 8027f12 <_read_r+0x1e>
 8027f10:	6023      	str	r3, [r4, #0]
 8027f12:	bd38      	pop	{r3, r4, r5, pc}
 8027f14:	20016310 	.word	0x20016310

08027f18 <_raise_r>:
 8027f18:	291f      	cmp	r1, #31
 8027f1a:	b538      	push	{r3, r4, r5, lr}
 8027f1c:	4604      	mov	r4, r0
 8027f1e:	460d      	mov	r5, r1
 8027f20:	d904      	bls.n	8027f2c <_raise_r+0x14>
 8027f22:	2316      	movs	r3, #22
 8027f24:	6003      	str	r3, [r0, #0]
 8027f26:	f04f 30ff 	mov.w	r0, #4294967295
 8027f2a:	bd38      	pop	{r3, r4, r5, pc}
 8027f2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027f2e:	b112      	cbz	r2, 8027f36 <_raise_r+0x1e>
 8027f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027f34:	b94b      	cbnz	r3, 8027f4a <_raise_r+0x32>
 8027f36:	4620      	mov	r0, r4
 8027f38:	f000 f830 	bl	8027f9c <_getpid_r>
 8027f3c:	462a      	mov	r2, r5
 8027f3e:	4601      	mov	r1, r0
 8027f40:	4620      	mov	r0, r4
 8027f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027f46:	f000 b817 	b.w	8027f78 <_kill_r>
 8027f4a:	2b01      	cmp	r3, #1
 8027f4c:	d00a      	beq.n	8027f64 <_raise_r+0x4c>
 8027f4e:	1c59      	adds	r1, r3, #1
 8027f50:	d103      	bne.n	8027f5a <_raise_r+0x42>
 8027f52:	2316      	movs	r3, #22
 8027f54:	6003      	str	r3, [r0, #0]
 8027f56:	2001      	movs	r0, #1
 8027f58:	e7e7      	b.n	8027f2a <_raise_r+0x12>
 8027f5a:	2400      	movs	r4, #0
 8027f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027f60:	4628      	mov	r0, r5
 8027f62:	4798      	blx	r3
 8027f64:	2000      	movs	r0, #0
 8027f66:	e7e0      	b.n	8027f2a <_raise_r+0x12>

08027f68 <raise>:
 8027f68:	4b02      	ldr	r3, [pc, #8]	; (8027f74 <raise+0xc>)
 8027f6a:	4601      	mov	r1, r0
 8027f6c:	6818      	ldr	r0, [r3, #0]
 8027f6e:	f7ff bfd3 	b.w	8027f18 <_raise_r>
 8027f72:	bf00      	nop
 8027f74:	20000340 	.word	0x20000340

08027f78 <_kill_r>:
 8027f78:	b538      	push	{r3, r4, r5, lr}
 8027f7a:	4d07      	ldr	r5, [pc, #28]	; (8027f98 <_kill_r+0x20>)
 8027f7c:	2300      	movs	r3, #0
 8027f7e:	4604      	mov	r4, r0
 8027f80:	4608      	mov	r0, r1
 8027f82:	4611      	mov	r1, r2
 8027f84:	602b      	str	r3, [r5, #0]
 8027f86:	f7f0 fdfd 	bl	8018b84 <_kill>
 8027f8a:	1c43      	adds	r3, r0, #1
 8027f8c:	d102      	bne.n	8027f94 <_kill_r+0x1c>
 8027f8e:	682b      	ldr	r3, [r5, #0]
 8027f90:	b103      	cbz	r3, 8027f94 <_kill_r+0x1c>
 8027f92:	6023      	str	r3, [r4, #0]
 8027f94:	bd38      	pop	{r3, r4, r5, pc}
 8027f96:	bf00      	nop
 8027f98:	20016310 	.word	0x20016310

08027f9c <_getpid_r>:
 8027f9c:	f7f0 bdea 	b.w	8018b74 <_getpid>

08027fa0 <_malloc_usable_size_r>:
 8027fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027fa4:	1f18      	subs	r0, r3, #4
 8027fa6:	2b00      	cmp	r3, #0
 8027fa8:	bfbc      	itt	lt
 8027faa:	580b      	ldrlt	r3, [r1, r0]
 8027fac:	18c0      	addlt	r0, r0, r3
 8027fae:	4770      	bx	lr

08027fb0 <_init>:
 8027fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027fb2:	bf00      	nop
 8027fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027fb6:	bc08      	pop	{r3}
 8027fb8:	469e      	mov	lr, r3
 8027fba:	4770      	bx	lr

08027fbc <_fini>:
 8027fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027fbe:	bf00      	nop
 8027fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027fc2:	bc08      	pop	{r3}
 8027fc4:	469e      	mov	lr, r3
 8027fc6:	4770      	bx	lr
